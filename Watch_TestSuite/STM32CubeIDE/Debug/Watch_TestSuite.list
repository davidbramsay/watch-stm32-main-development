
Watch_TestSuite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016f54  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002440  08017098  08017098  00027098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080194d8  080194d8  000294d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080194dc  080194dc  000294dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f4  20000004  080194e0  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 BLE_APP_CONTEXT 00000088  200001f8  080196d4  000301f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000280  0801975c  00030280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003e  2000031c  080197f5  0003031c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  2000035c  08019833  0003035c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0002e080  20000370  08019844  00030370  2**3
                  ALLOC
 11 ._user_heap_stack 00001400  2002e3f0  08019844  0003e3f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003036d  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 14 MB_MEM1       000001b8  20030028  20030028  00040000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00040000  2**2
                  ALLOC
 16 .debug_info   00054f0f  00000000  00000000  0003039d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 00008d26  00000000  00000000  000852ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 000037b8  00000000  00000000  0008dfd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00003420  00000000  00000000  00091790  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  000334b3  00000000  00000000  00094bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   00035e04  00000000  00000000  000c8063  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    0011233e  00000000  00000000  000fde67  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      0000007b  00000000  00000000  002101a5  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000fb2c  00000000  00000000  00210220  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000370 	.word	0x20000370
 800015c:	00000000 	.word	0x00000000
 8000160:	0801707c 	.word	0x0801707c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000374 	.word	0x20000374
 800017c:	0801707c 	.word	0x0801707c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800036e:	f1a4 0401 	sub.w	r4, r4, #1
 8000372:	d1e9      	bne.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <LL_FLASH_GetUDN+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	1fff7580 	.word	0x1fff7580

08000c10 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <LL_FLASH_GetDeviceID+0x14>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	b2db      	uxtb	r3, r3
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	1fff7584 	.word	0x1fff7584

08000c28 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <LL_FLASH_GetSTCompanyID+0x14>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	0a1b      	lsrs	r3, r3, #8
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	1fff7584 	.word	0x1fff7584

08000c40 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8000c40:	b5b0      	push	{r4, r5, r7, lr}
 8000c42:	b08c      	sub	sp, #48	; 0x30
 8000c44:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8000c46:	4b2b      	ldr	r3, [pc, #172]	; (8000cf4 <APP_BLE_Init+0xb4>)
 8000c48:	463c      	mov	r4, r7
 8000c4a:	461d      	mov	r5, r3
 8000c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c54:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c58:	c407      	stmia	r4!, {r0, r1, r2}
 8000c5a:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8000c5c:	f000 f9fe 	bl	800105c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8000c60:	2101      	movs	r1, #1
 8000c62:	2002      	movs	r0, #2
 8000c64:	f012 fb8a 	bl	801337c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  HciUserEvtProcessId = osThreadNew(HciUserEvtProcess, NULL, &HciUserEvtProcess_attr);
 8000c68:	4a23      	ldr	r2, [pc, #140]	; (8000cf8 <APP_BLE_Init+0xb8>)
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4823      	ldr	r0, [pc, #140]	; (8000cfc <APP_BLE_Init+0xbc>)
 8000c6e:	f00e fa09 	bl	800f084 <osThreadNew>
 8000c72:	4602      	mov	r2, r0
 8000c74:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <APP_BLE_Init+0xc0>)
 8000c76:	601a      	str	r2, [r3, #0]

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 8000c78:	463b      	mov	r3, r7
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f00c fd96 	bl	800d7ac <SHCI_C2_BLE_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <APP_BLE_Init+0x4a>
  {
    Error_Handler();
 8000c86:	f005 fa6d 	bl	8006164 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8000c8a:	f000 fa0f 	bl	80010ac <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8000c8e:	f00b fd39 	bl	800c704 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <APP_BLE_Init+0xc4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <APP_BLE_Init+0xc4>)
 8000c9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ca0:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  AdvUpdateProcessId = osThreadNew(AdvUpdateProcess, NULL, &AdvUpdateProcess_attr);
 8000ca2:	4a19      	ldr	r2, [pc, #100]	; (8000d08 <APP_BLE_Init+0xc8>)
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4819      	ldr	r0, [pc, #100]	; (8000d0c <APP_BLE_Init+0xcc>)
 8000ca8:	f00e f9ec 	bl	800f084 <osThreadNew>
 8000cac:	4602      	mov	r2, r0
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <APP_BLE_Init+0xd0>)
 8000cb0:	601a      	str	r2, [r3, #0]

  /**
   * Initialize HRS Application
   */
  //P2P FIX HRSAPP_Init();
  index_con_int = 0;
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <APP_BLE_Init+0xd4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <APP_BLE_Init+0xd8>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
  P2PS_APP_Init();
 8000cbe:	f000 fca7 	bl	8001610 <P2PS_APP_Init>

  /**
   * Create timer to handle the connection state machine
   */

  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Mgr);
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <APP_BLE_Init+0xdc>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	4916      	ldr	r1, [pc, #88]	; (8000d20 <APP_BLE_Init+0xe0>)
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f002 fab7 	bl	800323c <HW_TS_Create>
  /**
   * Make device discoverable
   */

  //P2P FIX lines below
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL; //AD_TYPE_16_BIT_SERV_UUID;
 8000cce:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <APP_BLE_Init+0xc4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;//1;
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <APP_BLE_Init+0xc4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	761a      	strb	r2, [r3, #24]
  //P2P FIX Add_Advertisment_Service_UUID(HEART_RATE_SERVICE_UUID);
  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <APP_BLE_Init+0xe4>)
 8000cdc:	2280      	movs	r2, #128	; 0x80
 8000cde:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <APP_BLE_Init+0xe8>)
 8000ce2:	22a0      	movs	r2, #160	; 0xa0
 8000ce4:	801a      	strh	r2, [r3, #0]

  /**
  * Start to Advertise to be connected by Collector
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f000 fabc 	bl	8001264 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8000cec:	bf00      	nop
}
 8000cee:	3730      	adds	r7, #48	; 0x30
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8000cf4:	08017228 	.word	0x08017228
 8000cf8:	08017ffc 	.word	0x08017ffc
 8000cfc:	08001479 	.word	0x08001479
 8000d00:	2002e074 	.word	0x2002e074
 8000d04:	200001f8 	.word	0x200001f8
 8000d08:	08017fd8 	.word	0x08017fd8
 8000d0c:	08001451 	.word	0x08001451
 8000d10:	2002e1a4 	.word	0x2002e1a4
 8000d14:	2002e081 	.word	0x2002e081
 8000d18:	2002e080 	.word	0x2002e080
 8000d1c:	08001439 	.word	0x08001439
 8000d20:	20000279 	.word	0x20000279
 8000d24:	2000027c 	.word	0x2000027c
 8000d28:	2000027e 	.word	0x2000027e

08000d2c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08c      	sub	sp, #48	; 0x30
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8000d34:	2342      	movs	r3, #66	; 0x42
 8000d36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8000d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b3e      	cmp	r3, #62	; 0x3e
 8000d46:	d028      	beq.n	8000d9a <SVCCTL_App_Notification+0x6e>
 8000d48:	2bff      	cmp	r3, #255	; 0xff
 8000d4a:	f000 80a5 	beq.w	8000e98 <SVCCTL_App_Notification+0x16c>
 8000d4e:	2b05      	cmp	r3, #5
 8000d50:	d000      	beq.n	8000d54 <SVCCTL_App_Notification+0x28>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
        break;
 8000d52:	e145      	b.n	8000fe0 <SVCCTL_App_Notification+0x2b4>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8000d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d56:	3302      	adds	r3, #2
 8000d58:	613b      	str	r3, [r7, #16]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	4ba2      	ldr	r3, [pc, #648]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000d64:	8adb      	ldrh	r3, [r3, #22]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d109      	bne.n	8000d7e <SVCCTL_App_Notification+0x52>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8000d6a:	4ba0      	ldr	r3, [pc, #640]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8000d70:	4b9e      	ldr	r3, [pc, #632]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 8000d78:	489d      	ldr	r0, [pc, #628]	; (8000ff0 <SVCCTL_App_Notification+0x2c4>)
 8000d7a:	f013 f83b 	bl	8013df4 <puts>
      Adv_Request(APP_BLE_FAST_ADV);
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f000 fa70 	bl	8001264 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8000d84:	4b9b      	ldr	r3, [pc, #620]	; (8000ff4 <SVCCTL_App_Notification+0x2c8>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8000d8a:	4b98      	ldr	r3, [pc, #608]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000d8c:	8ada      	ldrh	r2, [r3, #22]
 8000d8e:	4b99      	ldr	r3, [pc, #612]	; (8000ff4 <SVCCTL_App_Notification+0x2c8>)
 8000d90:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 8000d92:	4898      	ldr	r0, [pc, #608]	; (8000ff4 <SVCCTL_App_Notification+0x2c8>)
 8000d94:	f000 fc24 	bl	80015e0 <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 8000d98:	e122      	b.n	8000fe0 <SVCCTL_App_Notification+0x2b4>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8000d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	61fb      	str	r3, [r7, #28]
      switch (meta_evt->subevent)
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	d004      	beq.n	8000db2 <SVCCTL_App_Notification+0x86>
 8000da8:	2b0c      	cmp	r3, #12
 8000daa:	d006      	beq.n	8000dba <SVCCTL_App_Notification+0x8e>
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d042      	beq.n	8000e36 <SVCCTL_App_Notification+0x10a>
          break;
 8000db0:	e071      	b.n	8000e96 <SVCCTL_App_Notification+0x16a>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 8000db2:	4891      	ldr	r0, [pc, #580]	; (8000ff8 <SVCCTL_App_Notification+0x2cc>)
 8000db4:	f013 f81e 	bl	8013df4 <puts>
          break;
 8000db8:	e06d      	b.n	8000e96 <SVCCTL_App_Notification+0x16a>
          APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE \n");
 8000dba:	4890      	ldr	r0, [pc, #576]	; (8000ffc <SVCCTL_App_Notification+0x2d0>)
 8000dbc:	f013 f81a 	bl	8013df4 <puts>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	61bb      	str	r3, [r7, #24]
          if (evt_le_phy_update_complete->Status == 0)
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d103      	bne.n	8000dd6 <SVCCTL_App_Notification+0xaa>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status ok \n");
 8000dce:	488c      	ldr	r0, [pc, #560]	; (8001000 <SVCCTL_App_Notification+0x2d4>)
 8000dd0:	f013 f810 	bl	8013df4 <puts>
 8000dd4:	e002      	b.n	8000ddc <SVCCTL_App_Notification+0xb0>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status nok \n");
 8000dd6:	488b      	ldr	r0, [pc, #556]	; (8001004 <SVCCTL_App_Notification+0x2d8>)
 8000dd8:	f013 f80c 	bl	8013df4 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 8000ddc:	4b83      	ldr	r3, [pc, #524]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000dde:	8adb      	ldrh	r3, [r3, #22]
 8000de0:	f107 020e 	add.w	r2, r7, #14
 8000de4:	f107 010f 	add.w	r1, r7, #15
 8000de8:	4618      	mov	r0, r3
 8000dea:	f00c fbf0 	bl	800d5ce <hci_le_read_phy>
 8000dee:	4603      	mov	r3, r0
 8000df0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret == BLE_STATUS_SUCCESS)
 8000df4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d118      	bne.n	8000e2e <SVCCTL_App_Notification+0x102>
            APP_DBG_MSG("Read_PHY success \n");
 8000dfc:	4882      	ldr	r0, [pc, #520]	; (8001008 <SVCCTL_App_Notification+0x2dc>)
 8000dfe:	f012 fff9 	bl	8013df4 <puts>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d10a      	bne.n	8000e1e <SVCCTL_App_Notification+0xf2>
 8000e08:	7bbb      	ldrb	r3, [r7, #14]
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d107      	bne.n	8000e1e <SVCCTL_App_Notification+0xf2>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	4619      	mov	r1, r3
 8000e12:	7bbb      	ldrb	r3, [r7, #14]
 8000e14:	461a      	mov	r2, r3
 8000e16:	487d      	ldr	r0, [pc, #500]	; (800100c <SVCCTL_App_Notification+0x2e0>)
 8000e18:	f012 ff78 	bl	8013d0c <iprintf>
          break;
 8000e1c:	e03b      	b.n	8000e96 <SVCCTL_App_Notification+0x16a>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	4619      	mov	r1, r3
 8000e22:	7bbb      	ldrb	r3, [r7, #14]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4879      	ldr	r0, [pc, #484]	; (800100c <SVCCTL_App_Notification+0x2e0>)
 8000e28:	f012 ff70 	bl	8013d0c <iprintf>
          break;
 8000e2c:	e033      	b.n	8000e96 <SVCCTL_App_Notification+0x16a>
            APP_DBG_MSG("Read conf not succeess \n");
 8000e2e:	4878      	ldr	r0, [pc, #480]	; (8001010 <SVCCTL_App_Notification+0x2e4>)
 8000e30:	f012 ffe0 	bl	8013df4 <puts>
          break;
 8000e34:	e02f      	b.n	8000e96 <SVCCTL_App_Notification+0x16a>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8000e3c:	4b6b      	ldr	r3, [pc, #428]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000e3e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000e42:	4618      	mov	r0, r3
 8000e44:	f002 fa70 	bl	8003328 <HW_TS_Stop>
          APP_DBG_MSG("EVT_LE_CONN_COMPLETE for connection handle 0x%x\n", connection_complete_event->Connection_Handle);
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	4619      	mov	r1, r3
 8000e52:	4870      	ldr	r0, [pc, #448]	; (8001014 <SVCCTL_App_Notification+0x2e8>)
 8000e54:	f012 ff5a 	bl	8013d0c <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8000e58:	4b64      	ldr	r3, [pc, #400]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000e5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	d104      	bne.n	8000e6c <SVCCTL_App_Notification+0x140>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8000e62:	4b62      	ldr	r3, [pc, #392]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000e64:	2206      	movs	r2, #6
 8000e66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8000e6a:	e003      	b.n	8000e74 <SVCCTL_App_Notification+0x148>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8000e6c:	4b5f      	ldr	r3, [pc, #380]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000e6e:	2205      	movs	r2, #5
 8000e70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	4b5b      	ldr	r3, [pc, #364]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000e7e:	82da      	strh	r2, [r3, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8000e80:	4b5c      	ldr	r3, [pc, #368]	; (8000ff4 <SVCCTL_App_Notification+0x2c8>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8000e86:	4b59      	ldr	r3, [pc, #356]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000e88:	8ada      	ldrh	r2, [r3, #22]
 8000e8a:	4b5a      	ldr	r3, [pc, #360]	; (8000ff4 <SVCCTL_App_Notification+0x2c8>)
 8000e8c:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8000e8e:	4859      	ldr	r0, [pc, #356]	; (8000ff4 <SVCCTL_App_Notification+0x2c8>)
 8000e90:	f000 fba6 	bl	80015e0 <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 8000e94:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 8000e96:	e0a3      	b.n	8000fe0 <SVCCTL_App_Notification+0x2b4>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8000e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blue_evt->ecode)
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	f240 4205 	movw	r2, #1029	; 0x405
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d04a      	beq.n	8000f42 <SVCCTL_App_Notification+0x216>
 8000eac:	f240 4205 	movw	r2, #1029	; 0x405
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	dc18      	bgt.n	8000ee6 <SVCCTL_App_Notification+0x1ba>
 8000eb4:	f240 4202 	movw	r2, #1026	; 0x402
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d033      	beq.n	8000f24 <SVCCTL_App_Notification+0x1f8>
 8000ebc:	f240 4202 	movw	r2, #1026	; 0x402
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	dc07      	bgt.n	8000ed4 <SVCCTL_App_Notification+0x1a8>
 8000ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ec8:	d028      	beq.n	8000f1c <SVCCTL_App_Notification+0x1f0>
 8000eca:	f240 4201 	movw	r2, #1025	; 0x401
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d069      	beq.n	8000fa6 <SVCCTL_App_Notification+0x27a>
      break; /* EVT_VENDOR */
 8000ed2:	e084      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
      switch (blue_evt->ecode)
 8000ed4:	f240 4203 	movw	r2, #1027	; 0x403
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d02a      	beq.n	8000f32 <SVCCTL_App_Notification+0x206>
 8000edc:	f240 4204 	movw	r2, #1028	; 0x404
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d02a      	beq.n	8000f3a <SVCCTL_App_Notification+0x20e>
      break; /* EVT_VENDOR */
 8000ee4:	e07b      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
      switch (blue_evt->ecode)
 8000ee6:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8000eea:	d03a      	beq.n	8000f62 <SVCCTL_App_Notification+0x236>
 8000eec:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8000ef0:	dc08      	bgt.n	8000f04 <SVCCTL_App_Notification+0x1d8>
 8000ef2:	f240 4206 	movw	r2, #1030	; 0x406
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d02f      	beq.n	8000f5a <SVCCTL_App_Notification+0x22e>
 8000efa:	f240 4207 	movw	r2, #1031	; 0x407
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d069      	beq.n	8000fd6 <SVCCTL_App_Notification+0x2aa>
      break; /* EVT_VENDOR */
 8000f02:	e06c      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
      switch (blue_evt->ecode)
 8000f04:	f240 420a 	movw	r2, #1034	; 0x40a
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d02e      	beq.n	8000f6a <SVCCTL_App_Notification+0x23e>
 8000f0c:	f240 420a 	movw	r2, #1034	; 0x40a
 8000f10:	4293      	cmp	r3, r2
 8000f12:	db2e      	blt.n	8000f72 <SVCCTL_App_Notification+0x246>
 8000f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f18:	d05a      	beq.n	8000fd0 <SVCCTL_App_Notification+0x2a4>
      break; /* EVT_VENDOR */
 8000f1a:	e060      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_LIMITED_DISCOVERABLE \n");
 8000f1c:	483e      	ldr	r0, [pc, #248]	; (8001018 <SVCCTL_App_Notification+0x2ec>)
 8000f1e:	f012 ff69 	bl	8013df4 <puts>
          break; /* EVT_BLUE_GAP_LIMITED_DISCOVERABLE */
 8000f22:	e05c      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PASS_KEY_REQUEST \n");
 8000f24:	483d      	ldr	r0, [pc, #244]	; (800101c <SVCCTL_App_Notification+0x2f0>)
 8000f26:	f012 ff65 	bl	8013df4 <puts>
        APP_DBG_MSG("\r\n\r** aci_gap_pass_key_resp \n");
 8000f2a:	483d      	ldr	r0, [pc, #244]	; (8001020 <SVCCTL_App_Notification+0x2f4>)
 8000f2c:	f012 ff62 	bl	8013df4 <puts>
          break; /* EVT_BLUE_GAP_PASS_KEY_REQUEST */
 8000f30:	e055      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_AUTHORIZATION_REQUEST \n");
 8000f32:	483c      	ldr	r0, [pc, #240]	; (8001024 <SVCCTL_App_Notification+0x2f8>)
 8000f34:	f012 ff5e 	bl	8013df4 <puts>
          break; /* EVT_BLUE_GAP_AUTHORIZATION_REQUEST */
 8000f38:	e051      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_SLAVE_SECURITY_INITIATED \n");
 8000f3a:	483b      	ldr	r0, [pc, #236]	; (8001028 <SVCCTL_App_Notification+0x2fc>)
 8000f3c:	f012 ff5a 	bl	8013df4 <puts>
          break; /* EVT_BLUE_GAP_SLAVE_SECURITY_INITIATED */
 8000f40:	e04d      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_BOND_LOST \n");
 8000f42:	483a      	ldr	r0, [pc, #232]	; (800102c <SVCCTL_App_Notification+0x300>)
 8000f44:	f012 ff56 	bl	8013df4 <puts>
          aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8000f48:	4b28      	ldr	r3, [pc, #160]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000f4a:	8adb      	ldrh	r3, [r3, #22]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f00b ff74 	bl	800ce3a <aci_gap_allow_rebond>
        APP_DBG_MSG("\r\n\r** Send allow rebond \n");
 8000f52:	4837      	ldr	r0, [pc, #220]	; (8001030 <SVCCTL_App_Notification+0x304>)
 8000f54:	f012 ff4e 	bl	8013df4 <puts>
          break; /* EVT_BLUE_GAP_BOND_LOST */
 8000f58:	e041      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_DEVICE_FOUND \n");
 8000f5a:	4836      	ldr	r0, [pc, #216]	; (8001034 <SVCCTL_App_Notification+0x308>)
 8000f5c:	f012 ff4a 	bl	8013df4 <puts>
          break; /* EVT_BLUE_GAP_DEVICE_FOUND */
 8000f60:	e03d      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
         APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_DEVICE_FOUND \n");
 8000f62:	4834      	ldr	r0, [pc, #208]	; (8001034 <SVCCTL_App_Notification+0x308>)
 8000f64:	f012 ff46 	bl	8013df4 <puts>
          break; /* EVT_BLUE_GAP_DEVICE_FOUND */
 8000f68:	e039      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
         APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_KEYPRESS_NOTIFICATION \n");
 8000f6a:	4833      	ldr	r0, [pc, #204]	; (8001038 <SVCCTL_App_Notification+0x30c>)
 8000f6c:	f012 ff42 	bl	8013df4 <puts>
          break; /* EVT_BLUE_GAP_KEY_PRESS_NOTIFICATION */    
 8000f70:	e035      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(blue_evt->data))->Numeric_Value);
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	3302      	adds	r3, #2
          APP_DBG_MSG("numeric_value = %ld\n",
 8000f76:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	482f      	ldr	r0, [pc, #188]	; (800103c <SVCCTL_App_Notification+0x310>)
 8000f7e:	f012 fec5 	bl	8013d0c <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(blue_evt->data))->Numeric_Value);
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	3302      	adds	r3, #2
          APP_DBG_MSG("Hex_value = %lx\n",
 8000f86:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	482c      	ldr	r0, [pc, #176]	; (8001040 <SVCCTL_App_Notification+0x314>)
 8000f8e:	f012 febd 	bl	8013d0c <iprintf>
          aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 1); /* CONFIRM_YES = 1 */
 8000f92:	4b16      	ldr	r3, [pc, #88]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000f94:	8adb      	ldrh	r3, [r3, #22]
 8000f96:	2101      	movs	r1, #1
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f00b ff98 	bl	800cece <aci_gap_numeric_comparison_value_confirm_yesno>
          APP_DBG_MSG("\r\n\r** aci_gap_numeric_comparison_value_confirm_yesno-->YES \n");
 8000f9e:	4829      	ldr	r0, [pc, #164]	; (8001044 <SVCCTL_App_Notification+0x318>)
 8000fa0:	f012 ff28 	bl	8013df4 <puts>
          break;
 8000fa4:	e01b      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blue_evt->data;
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	3302      	adds	r3, #2
 8000faa:	623b      	str	r3, [r7, #32]
            APP_DBG_MSG("BLE_CTRL_App_Notification: EVT_BLUE_GAP_PAIRING_CMPLT, pairing_complete->Status = %d\n",pairing_complete->Status);
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	789b      	ldrb	r3, [r3, #2]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4825      	ldr	r0, [pc, #148]	; (8001048 <SVCCTL_App_Notification+0x31c>)
 8000fb4:	f012 feaa 	bl	8013d0c <iprintf>
            if (pairing_complete->Status == 0)
 8000fb8:	6a3b      	ldr	r3, [r7, #32]
 8000fba:	789b      	ldrb	r3, [r3, #2]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d103      	bne.n	8000fc8 <SVCCTL_App_Notification+0x29c>
              APP_DBG_MSG("\r\n\r** Pairing OK \n");
 8000fc0:	4822      	ldr	r0, [pc, #136]	; (800104c <SVCCTL_App_Notification+0x320>)
 8000fc2:	f012 ff17 	bl	8013df4 <puts>
           break;    
 8000fc6:	e00a      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
              APP_DBG_MSG("\r\n\r** Pairing KO \n");
 8000fc8:	4821      	ldr	r0, [pc, #132]	; (8001050 <SVCCTL_App_Notification+0x324>)
 8000fca:	f012 ff13 	bl	8013df4 <puts>
           break;    
 8000fce:	e006      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
          mutex = 1;
 8000fd0:	4b20      	ldr	r3, [pc, #128]	; (8001054 <SVCCTL_App_Notification+0x328>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	701a      	strb	r2, [r3, #0]
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PROCEDURE_COMPLETE \n");
 8000fd6:	4820      	ldr	r0, [pc, #128]	; (8001058 <SVCCTL_App_Notification+0x32c>)
 8000fd8:	f012 ff0c 	bl	8013df4 <puts>
          break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 8000fdc:	bf00      	nop
      break; /* EVT_VENDOR */
 8000fde:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8000fe0:	2301      	movs	r3, #1
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3730      	adds	r7, #48	; 0x30
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200001f8 	.word	0x200001f8
 8000ff0:	08017258 	.word	0x08017258
 8000ff4:	2002e078 	.word	0x2002e078
 8000ff8:	08017280 	.word	0x08017280
 8000ffc:	080172ac 	.word	0x080172ac
 8001000:	080172c8 	.word	0x080172c8
 8001004:	080172ec 	.word	0x080172ec
 8001008:	08017314 	.word	0x08017314
 800100c:	08017328 	.word	0x08017328
 8001010:	08017344 	.word	0x08017344
 8001014:	0801735c 	.word	0x0801735c
 8001018:	08017390 	.word	0x08017390
 800101c:	080173bc 	.word	0x080173bc
 8001020:	080173e4 	.word	0x080173e4
 8001024:	08017404 	.word	0x08017404
 8001028:	08017430 	.word	0x08017430
 800102c:	08017460 	.word	0x08017460
 8001030:	08017480 	.word	0x08017480
 8001034:	0801749c 	.word	0x0801749c
 8001038:	080174c0 	.word	0x080174c0
 800103c:	080174ec 	.word	0x080174ec
 8001040:	08017504 	.word	0x08017504
 8001044:	08017518 	.word	0x08017518
 8001048:	08017554 	.word	0x08017554
 800104c:	080175ac 	.word	0x080175ac
 8001050:	080175c0 	.word	0x080175c0
 8001054:	2002e080 	.word	0x2002e080
 8001058:	080175d4 	.word	0x080175d4

0800105c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  MtxHciId = osMutexNew( NULL );
 8001062:	2000      	movs	r0, #0
 8001064:	f00e f9d8 	bl	800f418 <osMutexNew>
 8001068:	4602      	mov	r2, r0
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <Ble_Tl_Init+0x3c>)
 800106c:	601a      	str	r2, [r3, #0]
  SemHciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2001      	movs	r0, #1
 8001074:	f00e fb18 	bl	800f6a8 <osSemaphoreNew>
 8001078:	4602      	mov	r2, r0
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <Ble_Tl_Init+0x40>)
 800107c:	601a      	str	r2, [r3, #0]

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <Ble_Tl_Init+0x44>)
 8001080:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <Ble_Tl_Init+0x48>)
 8001084:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	4807      	ldr	r0, [pc, #28]	; (80010a8 <Ble_Tl_Init+0x4c>)
 800108c:	f00c fbbc 	bl	800d808 <hci_init>

  return;
 8001090:	bf00      	nop
}
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	2002e0a0 	.word	0x2002e0a0
 800109c:	2002e070 	.word	0x2002e070
 80010a0:	20030028 	.word	0x20030028
 80010a4:	08001531 	.word	0x08001531
 80010a8:	080014f9 	.word	0x080014f9

080010ac <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 80010ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ae:	b08f      	sub	sp, #60	; 0x3c
 80010b0:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 80010b2:	f44f 7350 	mov.w	r3, #832	; 0x340
 80010b6:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 80010b8:	f00c fa65 	bl	800d586 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 80010bc:	f000 f978 	bl	80013b0 <BleGetBdAddress>
 80010c0:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80010c2:	69fa      	ldr	r2, [r7, #28]
 80010c4:	2106      	movs	r1, #6
 80010c6:	2000      	movs	r0, #0
 80010c8:	f00c f99d 	bl	800d406 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	795a      	ldrb	r2, [r3, #5]
 80010d0:	4b5c      	ldr	r3, [pc, #368]	; (8001244 <Ble_Hci_Gap_Gatt_Init+0x198>)
 80010d2:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	791a      	ldrb	r2, [r3, #4]
 80010d8:	4b5a      	ldr	r3, [pc, #360]	; (8001244 <Ble_Hci_Gap_Gatt_Init+0x198>)
 80010da:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	78da      	ldrb	r2, [r3, #3]
 80010e0:	4b58      	ldr	r3, [pc, #352]	; (8001244 <Ble_Hci_Gap_Gatt_Init+0x198>)
 80010e2:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	789a      	ldrb	r2, [r3, #2]
 80010e8:	4b56      	ldr	r3, [pc, #344]	; (8001244 <Ble_Hci_Gap_Gatt_Init+0x198>)
 80010ea:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	785a      	ldrb	r2, [r3, #1]
 80010f0:	4b54      	ldr	r3, [pc, #336]	; (8001244 <Ble_Hci_Gap_Gatt_Init+0x198>)
 80010f2:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	781a      	ldrb	r2, [r3, #0]
 80010f8:	4b52      	ldr	r3, [pc, #328]	; (8001244 <Ble_Hci_Gap_Gatt_Init+0x198>)
 80010fa:	735a      	strb	r2, [r3, #13]

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET,
 80010fc:	4a52      	ldr	r2, [pc, #328]	; (8001248 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80010fe:	2110      	movs	r1, #16
 8001100:	2018      	movs	r0, #24
 8001102:	f00c f980 	bl	800d406 <aci_hal_write_config_data>
                            (uint8_t*) BLE_CFG_IR_VALUE);

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET,
 8001106:	4a51      	ldr	r2, [pc, #324]	; (800124c <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8001108:	2110      	movs	r1, #16
 800110a:	2008      	movs	r0, #8
 800110c:	f00c f97b 	bl	800d406 <aci_hal_write_config_data>
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8001110:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8001114:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8001116:	f7ff fd6f 	bl	8000bf8 <LL_FLASH_GetUDN>
 800111a:	4603      	mov	r3, r0
 800111c:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	461a      	mov	r2, r3
 8001122:	2106      	movs	r1, #6
 8001124:	202e      	movs	r0, #46	; 0x2e
 8001126:	f00c f96e 	bl	800d406 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800112a:	4a47      	ldr	r2, [pc, #284]	; (8001248 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800112c:	2110      	movs	r1, #16
 800112e:	2018      	movs	r0, #24
 8001130:	f00c f969 	bl	800d406 <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8001134:	4a45      	ldr	r2, [pc, #276]	; (800124c <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8001136:	2110      	movs	r1, #16
 8001138:	2008      	movs	r0, #8
 800113a:	f00c f964 	bl	800d406 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800113e:	2118      	movs	r1, #24
 8001140:	2001      	movs	r0, #1
 8001142:	f00c f9c9 	bl	800d4d8 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8001146:	f00b ff19 	bl	800cf7c <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800114e:	7efb      	ldrb	r3, [r7, #27]
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8001156:	7efb      	ldrb	r3, [r7, #27]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d024      	beq.n	80011a6 <Ble_Hci_Gap_Gatt_Init+0xfa>
  {
    const char *name = "DBRTEST";
 800115c:	4b3c      	ldr	r3, [pc, #240]	; (8001250 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 800115e:	617b      	str	r3, [r7, #20]
    aci_gap_init(role, 0,
 8001160:	f107 0212 	add.w	r2, r7, #18
 8001164:	7ef8      	ldrb	r0, [r7, #27]
 8001166:	f107 030e 	add.w	r3, r7, #14
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	4613      	mov	r3, r2
 8001174:	2207      	movs	r2, #7
 8001176:	2100      	movs	r1, #0
 8001178:	f00b fd54 	bl	800cc24 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800117c:	8a7c      	ldrh	r4, [r7, #18]
 800117e:	8a3d      	ldrh	r5, [r7, #16]
 8001180:	6978      	ldr	r0, [r7, #20]
 8001182:	f7fe fffd 	bl	8000180 <strlen>
 8001186:	4603      	mov	r3, r0
 8001188:	b2da      	uxtb	r2, r3
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	4613      	mov	r3, r2
 8001190:	2200      	movs	r2, #0
 8001192:	4629      	mov	r1, r5
 8001194:	4620      	mov	r0, r4
 8001196:	f00c f8af 	bl	800d2f8 <aci_gatt_update_char_value>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d002      	beq.n	80011a6 <Ble_Hci_Gap_Gatt_Init+0xfa>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
 80011a0:	482c      	ldr	r0, [pc, #176]	; (8001254 <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 80011a2:	f012 fe27 	bl	8013df4 <puts>
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 80011a6:	8a78      	ldrh	r0, [r7, #18]
 80011a8:	89f9      	ldrh	r1, [r7, #14]
 80011aa:	463b      	mov	r3, r7
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	2302      	movs	r3, #2
 80011b0:	2200      	movs	r2, #0
 80011b2:	f00c f8a1 	bl	800d2f8 <aci_gatt_update_char_value>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d002      	beq.n	80011c2 <Ble_Hci_Gap_Gatt_Init+0x116>
                                gap_appearance_char_handle,
                                0,
                                2,
                                (uint8_t *)&appearance))
  {
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
 80011bc:	4826      	ldr	r0, [pc, #152]	; (8001258 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80011be:	f012 fe19 	bl	8013df4 <puts>
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80011c2:	2202      	movs	r2, #2
 80011c4:	2102      	movs	r1, #2
 80011c6:	2000      	movs	r0, #0
 80011c8:	f00c fa69 	bl	800d69e <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80011cc:	4b23      	ldr	r3, [pc, #140]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f00b fc32 	bl	800ca40 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80011dc:	4b1f      	ldr	r3, [pc, #124]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011de:	2201      	movs	r2, #1
 80011e0:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80011e2:	4b1e      	ldr	r3, [pc, #120]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011e4:	2208      	movs	r2, #8
 80011e6:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80011e8:	4b1c      	ldr	r3, [pc, #112]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011ea:	2210      	movs	r2, #16
 80011ec:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011f6:	4a1a      	ldr	r2, [pc, #104]	; (8001260 <Ble_Hci_Gap_Gatt_Init+0x1b4>)
 80011f8:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001202:	789d      	ldrb	r5, [r3, #2]
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001206:	785e      	ldrb	r6, [r3, #1]
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800120a:	791b      	ldrb	r3, [r3, #4]
 800120c:	4a13      	ldr	r2, [pc, #76]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800120e:	7952      	ldrb	r2, [r2, #5]
 8001210:	4912      	ldr	r1, [pc, #72]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001212:	78c9      	ldrb	r1, [r1, #3]
 8001214:	4811      	ldr	r0, [pc, #68]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001216:	6880      	ldr	r0, [r0, #8]
 8001218:	2400      	movs	r4, #0
 800121a:	9404      	str	r4, [sp, #16]
 800121c:	9003      	str	r0, [sp, #12]
 800121e:	9102      	str	r1, [sp, #8]
 8001220:	9201      	str	r2, [sp, #4]
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2300      	movs	r3, #0
 8001226:	2201      	movs	r2, #1
 8001228:	4631      	mov	r1, r6
 800122a:	4628      	mov	r0, r5
 800122c:	f00b fc52 	bl	800cad4 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001232:	789b      	ldrb	r3, [r3, #2]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <Ble_Hci_Gap_Gatt_Init+0x190>
   {
     aci_gap_configure_whitelist();
 8001238:	f00b fddb 	bl	800cdf2 <aci_gap_configure_whitelist>
   }
}
 800123c:	bf00      	nop
 800123e:	3724      	adds	r7, #36	; 0x24
 8001240:	46bd      	mov	sp, r7
 8001242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001244:	20000004 	.word	0x20000004
 8001248:	08017fb0 	.word	0x08017fb0
 800124c:	08017fc0 	.word	0x08017fc0
 8001250:	080175fc 	.word	0x080175fc
 8001254:	08017604 	.word	0x08017604
 8001258:	08017634 	.word	0x08017634
 800125c:	200001f8 	.word	0x200001f8
 8001260:	0001b207 	.word	0x0001b207

08001264 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08c      	sub	sp, #48	; 0x30
 8001268:	af08      	add	r7, sp, #32
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800126e:	2342      	movs	r3, #66	; 0x42
 8001270:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d106      	bne.n	8001286 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8001278:	4b3f      	ldr	r3, [pc, #252]	; (8001378 <Adv_Request+0x114>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800127e:	4b3f      	ldr	r3, [pc, #252]	; (800137c <Adv_Request+0x118>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	81bb      	strh	r3, [r7, #12]
 8001284:	e005      	b.n	8001292 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8001286:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800128a:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800128c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001290:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8001292:	4b3b      	ldr	r3, [pc, #236]	; (8001380 <Adv_Request+0x11c>)
 8001294:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001298:	4618      	mov	r0, r3
 800129a:	f002 f845 	bl	8003328 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
 800129e:	4b38      	ldr	r3, [pc, #224]	; (8001380 <Adv_Request+0x11c>)
 80012a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80012a4:	4619      	mov	r1, r3
 80012a6:	4837      	ldr	r0, [pc, #220]	; (8001384 <Adv_Request+0x120>)
 80012a8:	f012 fd30 	bl	8013d0c <iprintf>

    if ((New_Status == APP_BLE_LP_ADV)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d119      	bne.n	80012e6 <Adv_Request+0x82>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 80012b2:	4b33      	ldr	r3, [pc, #204]	; (8001380 <Adv_Request+0x11c>)
 80012b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d004      	beq.n	80012c6 <Adv_Request+0x62>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 80012bc:	4b30      	ldr	r3, [pc, #192]	; (8001380 <Adv_Request+0x11c>)
 80012be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d10f      	bne.n	80012e6 <Adv_Request+0x82>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 80012c6:	f00b fab9 	bl	800c83c <aci_gap_set_non_discoverable>
 80012ca:	4603      	mov	r3, r0
 80012cc:	72fb      	strb	r3, [r7, #11]
      if (ret == BLE_STATUS_SUCCESS)
 80012ce:	7afb      	ldrb	r3, [r7, #11]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d103      	bne.n	80012dc <Adv_Request+0x78>
      {
        APP_DBG_MSG("Successfully Stopped Advertising \n");
 80012d4:	482c      	ldr	r0, [pc, #176]	; (8001388 <Adv_Request+0x124>)
 80012d6:	f012 fd8d 	bl	8013df4 <puts>
 80012da:	e004      	b.n	80012e6 <Adv_Request+0x82>
      }
      else
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
 80012dc:	7afb      	ldrb	r3, [r7, #11]
 80012de:	4619      	mov	r1, r3
 80012e0:	482a      	ldr	r0, [pc, #168]	; (800138c <Adv_Request+0x128>)
 80012e2:	f012 fd13 	bl	8013d0c <iprintf>
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 80012e6:	4a26      	ldr	r2, [pc, #152]	; (8001380 <Adv_Request+0x11c>)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 80012ee:	4b24      	ldr	r3, [pc, #144]	; (8001380 <Adv_Request+0x11c>)
 80012f0:	7e1b      	ldrb	r3, [r3, #24]
 80012f2:	89b8      	ldrh	r0, [r7, #12]
 80012f4:	89f9      	ldrh	r1, [r7, #14]
 80012f6:	2200      	movs	r2, #0
 80012f8:	9206      	str	r2, [sp, #24]
 80012fa:	2200      	movs	r2, #0
 80012fc:	9205      	str	r2, [sp, #20]
 80012fe:	4a24      	ldr	r2, [pc, #144]	; (8001390 <Adv_Request+0x12c>)
 8001300:	9204      	str	r2, [sp, #16]
 8001302:	9303      	str	r3, [sp, #12]
 8001304:	4b23      	ldr	r3, [pc, #140]	; (8001394 <Adv_Request+0x130>)
 8001306:	9302      	str	r3, [sp, #8]
 8001308:	2308      	movs	r3, #8
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	2300      	movs	r3, #0
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2300      	movs	r3, #0
 8001312:	4602      	mov	r2, r0
 8001314:	2000      	movs	r0, #0
 8001316:	f00b fab5 	bl	800c884 <aci_gap_set_discoverable>
 800131a:	4603      	mov	r3, r0
 800131c:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800131e:	491e      	ldr	r1, [pc, #120]	; (8001398 <Adv_Request+0x134>)
 8001320:	200e      	movs	r0, #14
 8001322:	f00b fd0a 	bl	800cd3a <aci_gap_update_adv_data>
 8001326:	4603      	mov	r3, r0
 8001328:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 800132a:	7afb      	ldrb	r3, [r7, #11]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d111      	bne.n	8001354 <Adv_Request+0xf0>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d10a      	bne.n	800134c <Adv_Request+0xe8>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 8001336:	4819      	ldr	r0, [pc, #100]	; (800139c <Adv_Request+0x138>)
 8001338:	f012 fd5c 	bl	8013df4 <puts>
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800133c:	4b10      	ldr	r3, [pc, #64]	; (8001380 <Adv_Request+0x11c>)
 800133e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001342:	4917      	ldr	r1, [pc, #92]	; (80013a0 <Adv_Request+0x13c>)
 8001344:	4618      	mov	r0, r3
 8001346:	f002 f879 	bl	800343c <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800134a:	e012      	b.n	8001372 <Adv_Request+0x10e>
        APP_DBG_MSG("Successfully Start Low Power Advertising \n");
 800134c:	4815      	ldr	r0, [pc, #84]	; (80013a4 <Adv_Request+0x140>)
 800134e:	f012 fd51 	bl	8013df4 <puts>
  return;
 8001352:	e00e      	b.n	8001372 <Adv_Request+0x10e>
      if (New_Status == APP_BLE_FAST_ADV)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d105      	bne.n	8001366 <Adv_Request+0x102>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 800135a:	7afb      	ldrb	r3, [r7, #11]
 800135c:	4619      	mov	r1, r3
 800135e:	4812      	ldr	r0, [pc, #72]	; (80013a8 <Adv_Request+0x144>)
 8001360:	f012 fcd4 	bl	8013d0c <iprintf>
  return;
 8001364:	e005      	b.n	8001372 <Adv_Request+0x10e>
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
 8001366:	7afb      	ldrb	r3, [r7, #11]
 8001368:	4619      	mov	r1, r3
 800136a:	4810      	ldr	r0, [pc, #64]	; (80013ac <Adv_Request+0x148>)
 800136c:	f012 fcce 	bl	8013d0c <iprintf>
  return;
 8001370:	bf00      	nop
}
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2000027c 	.word	0x2000027c
 800137c:	2000027e 	.word	0x2000027e
 8001380:	200001f8 	.word	0x200001f8
 8001384:	08017664 	.word	0x08017664
 8001388:	08017680 	.word	0x08017680
 800138c:	080176a4 	.word	0x080176a4
 8001390:	20000211 	.word	0x20000211
 8001394:	08017fd0 	.word	0x08017fd0
 8001398:	20000004 	.word	0x20000004
 800139c:	080176cc 	.word	0x080176cc
 80013a0:	0001e046 	.word	0x0001e046
 80013a4:	080176f4 	.word	0x080176f4
 80013a8:	08017720 	.word	0x08017720
 80013ac:	08017750 	.word	0x08017750

080013b0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80013b6:	f7ff fc1f 	bl	8000bf8 <LL_FLASH_GetUDN>
 80013ba:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013c2:	d023      	beq.n	800140c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80013c4:	f7ff fc30 	bl	8000c28 <LL_FLASH_GetSTCompanyID>
 80013c8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80013ca:	f7ff fc21 	bl	8000c10 <LL_FLASH_GetDeviceID>
 80013ce:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	4b16      	ldr	r3, [pc, #88]	; (8001430 <BleGetBdAddress+0x80>)
 80013d6:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	0a1b      	lsrs	r3, r3, #8
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4b14      	ldr	r3, [pc, #80]	; (8001430 <BleGetBdAddress+0x80>)
 80013e0:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	0c1b      	lsrs	r3, r3, #16
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <BleGetBdAddress+0x80>)
 80013ea:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <BleGetBdAddress+0x80>)
 80013f2:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <BleGetBdAddress+0x80>)
 80013fa:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	0a1b      	lsrs	r3, r3, #8
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <BleGetBdAddress+0x80>)
 8001404:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <BleGetBdAddress+0x80>)
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	e00b      	b.n	8001424 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800140c:	2000      	movs	r0, #0
 800140e:	f00d f8e9 	bl	800e5e4 <OTP_Read>
 8001412:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	e001      	b.n	8001424 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <BleGetBdAddress+0x84>)
 8001422:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 8001424:	697b      	ldr	r3, [r7, #20]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2000038c 	.word	0x2000038c
 8001434:	08017fa8 	.word	0x08017fa8

08001438 <Adv_Mgr>:
  return;
}
*/

static void Adv_Mgr( void )
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as an aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  osThreadFlagsSet( AdvUpdateProcessId, 1 );
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <Adv_Mgr+0x14>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2101      	movs	r1, #1
 8001442:	4618      	mov	r0, r3
 8001444:	f00d fec4 	bl	800f1d0 <osThreadFlagsSet>

  return;
 8001448:	bf00      	nop
}
 800144a:	bd80      	pop	{r7, pc}
 800144c:	2002e1a4 	.word	0x2002e1a4

08001450 <AdvUpdateProcess>:

static void AdvUpdateProcess(void *argument)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8001458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800145c:	2100      	movs	r1, #0
 800145e:	2001      	movs	r0, #1
 8001460:	f00d ff18 	bl	800f294 <osThreadFlagsWait>
    Adv_Update( );
 8001464:	f000 f801 	bl	800146a <Adv_Update>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8001468:	e7f6      	b.n	8001458 <AdvUpdateProcess+0x8>

0800146a <Adv_Update>:
  }
}

static void Adv_Update( void )
{
 800146a:	b580      	push	{r7, lr}
 800146c:	af00      	add	r7, sp, #0
  Adv_Request(APP_BLE_LP_ADV);
 800146e:	2002      	movs	r0, #2
 8001470:	f7ff fef8 	bl	8001264 <Adv_Request>

  return;
 8001474:	bf00      	nop
}
 8001476:	bd80      	pop	{r7, pc}

08001478 <HciUserEvtProcess>:
  }
  return;
}

static void HciUserEvtProcess(void *argument)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8001480:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001484:	2100      	movs	r1, #0
 8001486:	2001      	movs	r0, #1
 8001488:	f00d ff04 	bl	800f294 <osThreadFlagsWait>
    hci_user_evt_proc( );
 800148c:	f00c f9d8 	bl	800d840 <hci_user_evt_proc>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8001490:	e7f6      	b.n	8001480 <HciUserEvtProcess+0x8>
	...

08001494 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet( HciUserEvtProcessId, 1 );
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <hci_notify_asynch_evt+0x1c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2101      	movs	r1, #1
 80014a2:	4618      	mov	r0, r3
 80014a4:	f00d fe94 	bl	800f1d0 <osThreadFlagsSet>
  return;
 80014a8:	bf00      	nop
}
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	2002e074 	.word	0x2002e074

080014b4 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemHciId );
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <hci_cmd_resp_release+0x1c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f00e f9f5 	bl	800f8b0 <osSemaphoreRelease>
  return;
 80014c6:	bf00      	nop
}
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	2002e070 	.word	0x2002e070

080014d4 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemHciId, osWaitForever );
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <hci_cmd_resp_wait+0x20>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014e4:	4618      	mov	r0, r3
 80014e6:	f00e f97d 	bl	800f7e4 <osSemaphoreAcquire>
  return;
 80014ea:	bf00      	nop
}
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2002e070 	.word	0x2002e070

080014f8 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	3308      	adds	r3, #8
 800150a:	4618      	mov	r0, r3
 800150c:	f00b f944 	bl	800c798 <SVCCTL_UserEvtRx>
 8001510:	4603      	mov	r3, r0
 8001512:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8001514:	7afb      	ldrb	r3, [r7, #11]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8001520:	e002      	b.n	8001528 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
  switch (status)
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d002      	beq.n	8001546 <BLE_StatusNot+0x16>
 8001540:	2b01      	cmp	r3, #1
 8001542:	d008      	beq.n	8001556 <BLE_StatusNot+0x26>
    case HCI_TL_CmdAvailable:
      osMutexRelease( MtxHciId );
      break;

    default:
      break;
 8001544:	e00d      	b.n	8001562 <BLE_StatusNot+0x32>
      osMutexAcquire( MtxHciId, osWaitForever );
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <BLE_StatusNot+0x3c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800154e:	4618      	mov	r0, r3
 8001550:	f00d fffc 	bl	800f54c <osMutexAcquire>
      break;
 8001554:	e005      	b.n	8001562 <BLE_StatusNot+0x32>
      osMutexRelease( MtxHciId );
 8001556:	4b05      	ldr	r3, [pc, #20]	; (800156c <BLE_StatusNot+0x3c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f00e f854 	bl	800f608 <osMutexRelease>
      break;
 8001560:	bf00      	nop
  }
  return;
 8001562:	bf00      	nop
}
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	2002e0a0 	.word	0x2002e0a0

08001570 <P2PS_STM_App_Notification>:
/* Private function prototypes -----------------------------------------------*/
void P2PS_APP_Context_Init(void);

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  switch(pNotification->P2P_Evt_Opcode)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d00e      	beq.n	800159e <P2PS_STM_App_Notification+0x2e>
 8001580:	2b03      	cmp	r3, #3
 8001582:	d016      	beq.n	80015b2 <P2PS_STM_App_Notification+0x42>
 8001584:	2b00      	cmp	r3, #0
 8001586:	d000      	beq.n	800158a <P2PS_STM_App_Notification+0x1a>
    case P2PS_STM_WRITE_EVT:
		osMessageQueuePut(bleRXqueueHandle, &(pNotification->DataTransfered), 0, 0);
      break;

    default:
      break;
 8001588:	e01c      	b.n	80015c4 <P2PS_STM_App_Notification+0x54>
      P2P_Server_App_Context.Notification_Status = 1;
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <P2PS_STM_App_Notification+0x5c>)
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n");
 8001590:	480f      	ldr	r0, [pc, #60]	; (80015d0 <P2PS_STM_App_Notification+0x60>)
 8001592:	f012 fc2f 	bl	8013df4 <puts>
      APP_DBG_MSG(" \n\r");
 8001596:	480f      	ldr	r0, [pc, #60]	; (80015d4 <P2PS_STM_App_Notification+0x64>)
 8001598:	f012 fbb8 	bl	8013d0c <iprintf>
      break;
 800159c:	e012      	b.n	80015c4 <P2PS_STM_App_Notification+0x54>
      P2P_Server_App_Context.Notification_Status = 0;
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <P2PS_STM_App_Notification+0x5c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 80015a4:	480c      	ldr	r0, [pc, #48]	; (80015d8 <P2PS_STM_App_Notification+0x68>)
 80015a6:	f012 fc25 	bl	8013df4 <puts>
      APP_DBG_MSG(" \n\r");
 80015aa:	480a      	ldr	r0, [pc, #40]	; (80015d4 <P2PS_STM_App_Notification+0x64>)
 80015ac:	f012 fbae 	bl	8013d0c <iprintf>
      break;
 80015b0:	e008      	b.n	80015c4 <P2PS_STM_App_Notification+0x54>
		osMessageQueuePut(bleRXqueueHandle, &(pNotification->DataTransfered), 0, 0);
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <P2PS_STM_App_Notification+0x6c>)
 80015b4:	6818      	ldr	r0, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	1d19      	adds	r1, r3, #4
 80015ba:	2300      	movs	r3, #0
 80015bc:	2200      	movs	r2, #0
 80015be:	f00e fa55 	bl	800fa6c <osMessageQueuePut>
      break;
 80015c2:	bf00      	nop
  }
  return;
 80015c4:	bf00      	nop
}
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	2002e088 	.word	0x2002e088
 80015d0:	08017940 	.word	0x08017940
 80015d4:	08017974 	.word	0x08017974
 80015d8:	08017978 	.word	0x08017978
 80015dc:	2002e07c 	.word	0x2002e07c

080015e0 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  switch(pNotification->P2P_Evt_Opcode)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d002      	beq.n	80015f6 <P2PS_APP_Notification+0x16>
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d004      	beq.n	80015fe <P2PS_APP_Notification+0x1e>

    case PEER_DISCON_HANDLE_EVT :
       P2PS_APP_Context_Init();
       break;
    default:
      break;
 80015f4:	e006      	b.n	8001604 <P2PS_APP_Notification+0x24>
	  P2P_Server_App_Context.Connected = 1;
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <P2PS_APP_Notification+0x2c>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	705a      	strb	r2, [r3, #1]
    break;
 80015fc:	e002      	b.n	8001604 <P2PS_APP_Notification+0x24>
       P2PS_APP_Context_Init();
 80015fe:	f000 f813 	bl	8001628 <P2PS_APP_Context_Init>
       break;
 8001602:	bf00      	nop
  }
  return;
 8001604:	bf00      	nop
}
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	2002e088 	.word	0x2002e088

08001610 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  P2P_Server_App_Context.Notification_Status=0;
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <P2PS_APP_Init+0x14>)
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
  P2PS_APP_Context_Init();
 800161a:	f000 f805 	bl	8001628 <P2PS_APP_Context_Init>
  return;
 800161e:	bf00      	nop
}
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2002e088 	.word	0x2002e088

08001628 <P2PS_APP_Context_Init>:

void  P2PS_APP_Context_Init(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
	  //init context on app init and on reconnect events
	  P2P_Server_App_Context.Connected = 0;
 800162c:	4b03      	ldr	r3, [pc, #12]	; (800163c <P2PS_APP_Context_Init+0x14>)
 800162e:	2200      	movs	r2, #0
 8001630:	705a      	strb	r2, [r3, #1]
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	2002e088 	.word	0x2002e088

08001640 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <LL_PWR_EnableBootC2+0x1c>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <LL_PWR_EnableBootC2+0x1c>)
 800164a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800164e:	60d3      	str	r3, [r2, #12]
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	58000400 	.word	0x58000400

08001660 <LL_C2_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800166a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800166e:	4905      	ldr	r1, [pc, #20]	; (8001684 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4313      	orrs	r3, r2
 8001674:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	58000800 	.word	0x58000800

08001688 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001692:	6a1a      	ldr	r2, [r3, #32]
 8001694:	4904      	ldr	r1, [pc, #16]	; (80016a8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4313      	orrs	r3, r2
 800169a:	620b      	str	r3, [r1, #32]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	58000800 	.word	0x58000800

080016ac <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80016b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80016c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4013      	ands	r3, r2
 80016ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016d0:	68fb      	ldr	r3, [r7, #12]
}
 80016d2:	bf00      	nop
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80016de:	b480      	push	{r7}
 80016e0:	b085      	sub	sp, #20
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80016e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ea:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80016ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80016fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016fe:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4013      	ands	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001708:	68fb      	ldr	r3, [r7, #12]
}
 800170a:	bf00      	nop
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	601a      	str	r2, [r3, #0]
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f043 0201 	orr.w	r2, r3, #1
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	601a      	str	r2, [r3, #0]
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	041b      	lsls	r3, r3, #16
 8001768:	43db      	mvns	r3, r3
 800176a:	401a      	ands	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	605a      	str	r2, [r3, #4]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	041b      	lsls	r3, r3, #16
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	605a      	str	r2, [r3, #4]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	401a      	ands	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	605a      	str	r2, [r3, #4]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	609a      	str	r2, [r3, #8]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	041a      	lsls	r2, r3, #16
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	609a      	str	r2, [r3, #8]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	4013      	ands	r3, r2
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d101      	bne.n	800181a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69da      	ldr	r2, [r3, #28]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	4013      	ands	r3, r2
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d101      	bne.n	8001844 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8001858:	2102      	movs	r1, #2
 800185a:	4819      	ldr	r0, [pc, #100]	; (80018c0 <HW_IPCC_Rx_Handler+0x6c>)
 800185c:	f7ff ffe4 	bl	8001828 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d009      	beq.n	800187a <HW_IPCC_Rx_Handler+0x26>
 8001866:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <HW_IPCC_Rx_Handler+0x6c>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	43db      	mvns	r3, r3
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8001874:	f000 f8ea 	bl	8001a4c <HW_IPCC_SYS_EvtHandler>
 8001878:	e01f      	b.n	80018ba <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800187a:	2101      	movs	r1, #1
 800187c:	4810      	ldr	r0, [pc, #64]	; (80018c0 <HW_IPCC_Rx_Handler+0x6c>)
 800187e:	f7ff ffd3 	bl	8001828 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d008      	beq.n	800189a <HW_IPCC_Rx_Handler+0x46>
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <HW_IPCC_Rx_Handler+0x6c>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8001894:	f000 f89e 	bl	80019d4 <HW_IPCC_BLE_EvtHandler>
 8001898:	e00f      	b.n	80018ba <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800189a:	2108      	movs	r1, #8
 800189c:	4808      	ldr	r0, [pc, #32]	; (80018c0 <HW_IPCC_Rx_Handler+0x6c>)
 800189e:	f7ff ffc3 	bl	8001828 <LL_C2_IPCC_IsActiveFlag_CHx>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d009      	beq.n	80018bc <HW_IPCC_Rx_Handler+0x68>
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <HW_IPCC_Rx_Handler+0x6c>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80018b6:	f000 f915 	bl	8001ae4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80018ba:	bf00      	nop
 80018bc:	bf00      	nop
}
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	58000c00 	.word	0x58000c00

080018c4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80018c8:	2102      	movs	r1, #2
 80018ca:	4822      	ldr	r0, [pc, #136]	; (8001954 <HW_IPCC_Tx_Handler+0x90>)
 80018cc:	f7ff ff97 	bl	80017fe <LL_C1_IPCC_IsActiveFlag_CHx>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d109      	bne.n	80018ea <HW_IPCC_Tx_Handler+0x26>
 80018d6:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <HW_IPCC_Tx_Handler+0x90>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	43db      	mvns	r3, r3
 80018dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d002      	beq.n	80018ea <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80018e4:	f000 f8a6 	bl	8001a34 <HW_IPCC_SYS_CmdEvtHandler>
 80018e8:	e031      	b.n	800194e <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80018ea:	2102      	movs	r1, #2
 80018ec:	4819      	ldr	r0, [pc, #100]	; (8001954 <HW_IPCC_Tx_Handler+0x90>)
 80018ee:	f7ff ff86 	bl	80017fe <LL_C1_IPCC_IsActiveFlag_CHx>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d109      	bne.n	800190c <HW_IPCC_Tx_Handler+0x48>
 80018f8:	4b16      	ldr	r3, [pc, #88]	; (8001954 <HW_IPCC_Tx_Handler+0x90>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d002      	beq.n	800190c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8001906:	f000 f895 	bl	8001a34 <HW_IPCC_SYS_CmdEvtHandler>
 800190a:	e020      	b.n	800194e <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800190c:	2108      	movs	r1, #8
 800190e:	4811      	ldr	r0, [pc, #68]	; (8001954 <HW_IPCC_Tx_Handler+0x90>)
 8001910:	f7ff ff75 	bl	80017fe <LL_C1_IPCC_IsActiveFlag_CHx>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d109      	bne.n	800192e <HW_IPCC_Tx_Handler+0x6a>
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <HW_IPCC_Tx_Handler+0x90>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	43db      	mvns	r3, r3
 8001920:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8001928:	f000 f8be 	bl	8001aa8 <HW_IPCC_MM_FreeBufHandler>
 800192c:	e00f      	b.n	800194e <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800192e:	2120      	movs	r1, #32
 8001930:	4808      	ldr	r0, [pc, #32]	; (8001954 <HW_IPCC_Tx_Handler+0x90>)
 8001932:	f7ff ff64 	bl	80017fe <LL_C1_IPCC_IsActiveFlag_CHx>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d109      	bne.n	8001950 <HW_IPCC_Tx_Handler+0x8c>
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HW_IPCC_Tx_Handler+0x90>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	43db      	mvns	r3, r3
 8001942:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800194a:	f000 f84f 	bl	80019ec <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800194e:	bf00      	nop
 8001950:	bf00      	nop
}
 8001952:	bd80      	pop	{r7, pc}
 8001954:	58000c00 	.word	0x58000c00

08001958 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800195c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001960:	f7ff febd 	bl	80016de <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8001964:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001968:	f7ff fe7a 	bl	8001660 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800196c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001970:	f7ff fe8a 	bl	8001688 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8001974:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8001976:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8001978:	f7ff fe62 	bl	8001640 <LL_PWR_EnableBootC2>

  return;
 800197c:	bf00      	nop
}
 800197e:	bd80      	pop	{r7, pc}

08001980 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8001984:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001988:	f7ff fe90 	bl	80016ac <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800198c:	4806      	ldr	r0, [pc, #24]	; (80019a8 <HW_IPCC_Init+0x28>)
 800198e:	f7ff fed2 	bl	8001736 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <HW_IPCC_Init+0x28>)
 8001994:	f7ff febf 	bl	8001716 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001998:	202c      	movs	r0, #44	; 0x2c
 800199a:	f005 fd57 	bl	800744c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800199e:	202d      	movs	r0, #45	; 0x2d
 80019a0:	f005 fd54 	bl	800744c <HAL_NVIC_EnableIRQ>

  return;
 80019a4:	bf00      	nop
}
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	58000c00 	.word	0x58000c00

080019ac <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80019b0:	2101      	movs	r1, #1
 80019b2:	4802      	ldr	r0, [pc, #8]	; (80019bc <HW_IPCC_BLE_Init+0x10>)
 80019b4:	f7ff fef4 	bl	80017a0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80019b8:	bf00      	nop
}
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	58000c00 	.word	0x58000c00

080019c0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80019c4:	2101      	movs	r1, #1
 80019c6:	4802      	ldr	r0, [pc, #8]	; (80019d0 <HW_IPCC_BLE_SendCmd+0x10>)
 80019c8:	f7ff ff0a 	bl	80017e0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80019cc:	bf00      	nop
}
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	58000c00 	.word	0x58000c00

080019d4 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80019d8:	f00c fa70 	bl	800debc <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80019dc:	2101      	movs	r1, #1
 80019de:	4802      	ldr	r0, [pc, #8]	; (80019e8 <HW_IPCC_BLE_EvtHandler+0x14>)
 80019e0:	f7ff fef0 	bl	80017c4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80019e4:	bf00      	nop
}
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	58000c00 	.word	0x58000c00

080019ec <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80019f0:	2120      	movs	r1, #32
 80019f2:	4803      	ldr	r0, [pc, #12]	; (8001a00 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80019f4:	f7ff fec2 	bl	800177c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80019f8:	f00c fa90 	bl	800df1c <HW_IPCC_BLE_AclDataAckNot>

  return;
 80019fc:	bf00      	nop
}
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	58000c00 	.word	0x58000c00

08001a04 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001a08:	2102      	movs	r1, #2
 8001a0a:	4802      	ldr	r0, [pc, #8]	; (8001a14 <HW_IPCC_SYS_Init+0x10>)
 8001a0c:	f7ff fec8 	bl	80017a0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001a10:	bf00      	nop
}
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	58000c00 	.word	0x58000c00

08001a18 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001a1c:	2102      	movs	r1, #2
 8001a1e:	4804      	ldr	r0, [pc, #16]	; (8001a30 <HW_IPCC_SYS_SendCmd+0x18>)
 8001a20:	f7ff fede 	bl	80017e0 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001a24:	2102      	movs	r1, #2
 8001a26:	4802      	ldr	r0, [pc, #8]	; (8001a30 <HW_IPCC_SYS_SendCmd+0x18>)
 8001a28:	f7ff fe95 	bl	8001756 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001a2c:	bf00      	nop
}
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	58000c00 	.word	0x58000c00

08001a34 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001a38:	2102      	movs	r1, #2
 8001a3a:	4803      	ldr	r0, [pc, #12]	; (8001a48 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8001a3c:	f7ff fe9e 	bl	800177c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8001a40:	f00c fabc 	bl	800dfbc <HW_IPCC_SYS_CmdEvtNot>

  return;
 8001a44:	bf00      	nop
}
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	58000c00 	.word	0x58000c00

08001a4c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8001a50:	f00c faca 	bl	800dfe8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001a54:	2102      	movs	r1, #2
 8001a56:	4802      	ldr	r0, [pc, #8]	; (8001a60 <HW_IPCC_SYS_EvtHandler+0x14>)
 8001a58:	f7ff feb4 	bl	80017c4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001a5c:	bf00      	nop
}
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	58000c00 	.word	0x58000c00

08001a64 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8001a6c:	2108      	movs	r1, #8
 8001a6e:	480c      	ldr	r0, [pc, #48]	; (8001aa0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001a70:	f7ff fec5 	bl	80017fe <LL_C1_IPCC_IsActiveFlag_CHx>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d007      	beq.n	8001a8a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001a80:	2108      	movs	r1, #8
 8001a82:	4807      	ldr	r0, [pc, #28]	; (8001aa0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001a84:	f7ff fe67 	bl	8001756 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8001a88:	e006      	b.n	8001a98 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001a8e:	2108      	movs	r1, #8
 8001a90:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001a92:	f7ff fea5 	bl	80017e0 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8001a96:	bf00      	nop
}
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	58000c00 	.word	0x58000c00
 8001aa4:	20000394 	.word	0x20000394

08001aa8 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001aac:	2108      	movs	r1, #8
 8001aae:	4806      	ldr	r0, [pc, #24]	; (8001ac8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001ab0:	f7ff fe64 	bl	800177c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <HW_IPCC_MM_FreeBufHandler+0x24>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001aba:	2108      	movs	r1, #8
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001abe:	f7ff fe8f 	bl	80017e0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8001ac2:	bf00      	nop
}
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	58000c00 	.word	0x58000c00
 8001acc:	20000394 	.word	0x20000394

08001ad0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001ad4:	2108      	movs	r1, #8
 8001ad6:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <HW_IPCC_TRACES_Init+0x10>)
 8001ad8:	f7ff fe62 	bl	80017a0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001adc:	bf00      	nop
}
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	58000c00 	.word	0x58000c00

08001ae4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8001ae8:	f00c fb26 	bl	800e138 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001aec:	2108      	movs	r1, #8
 8001aee:	4802      	ldr	r0, [pc, #8]	; (8001af8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8001af0:	f7ff fe68 	bl	80017c4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001af4:	bf00      	nop
}
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	58000c00 	.word	0x58000c00

08001afc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001afc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001afe:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b00:	3304      	adds	r3, #4

08001b02 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b02:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b04:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001b06:	d3f9      	bcc.n	8001afc <CopyDataInit>
  bx lr
 8001b08:	4770      	bx	lr

08001b0a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001b0a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001b0c:	3004      	adds	r0, #4

08001b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001b0e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001b10:	d3fb      	bcc.n	8001b0a <FillZerobss>
  bx lr
 8001b12:	4770      	bx	lr

08001b14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b14:	480c      	ldr	r0, [pc, #48]	; (8001b48 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001b16:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b18:	f005 fa8e 	bl	8007038 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001b1c:	480b      	ldr	r0, [pc, #44]	; (8001b4c <LoopForever+0x8>)
 8001b1e:	490c      	ldr	r1, [pc, #48]	; (8001b50 <LoopForever+0xc>)
 8001b20:	4a0c      	ldr	r2, [pc, #48]	; (8001b54 <LoopForever+0x10>)
 8001b22:	2300      	movs	r3, #0
 8001b24:	f7ff ffed 	bl	8001b02 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001b28:	480b      	ldr	r0, [pc, #44]	; (8001b58 <LoopForever+0x14>)
 8001b2a:	490c      	ldr	r1, [pc, #48]	; (8001b5c <LoopForever+0x18>)
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f7ff ffee 	bl	8001b0e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001b32:	480b      	ldr	r0, [pc, #44]	; (8001b60 <LoopForever+0x1c>)
 8001b34:	490b      	ldr	r1, [pc, #44]	; (8001b64 <LoopForever+0x20>)
 8001b36:	2300      	movs	r3, #0
 8001b38:	f7ff ffe9 	bl	8001b0e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b3c:	f011 fc52 	bl	80133e4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001b40:	f002 f8fe 	bl	8003d40 <main>

08001b44 <LoopForever>:

LoopForever:
  b LoopForever
 8001b44:	e7fe      	b.n	8001b44 <LoopForever>
 8001b46:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001b48:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001b4c:	20000004 	.word	0x20000004
 8001b50:	200001f8 	.word	0x200001f8
 8001b54:	080194e0 	.word	0x080194e0
  INIT_BSS _sbss, _ebss
 8001b58:	20000370 	.word	0x20000370
 8001b5c:	2002e3f0 	.word	0x2002e3f0
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001b60:	200301e0 	.word	0x200301e0
 8001b64:	20030a57 	.word	0x20030a57

08001b68 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b68:	e7fe      	b.n	8001b68 <ADC1_IRQHandler>
	...

08001b6c <LL_EXTI_EnableIT_32_63>:
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <LL_EXTI_EnableIT_32_63+0x24>)
 8001b76:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001b7a:	4905      	ldr	r1, [pc, #20]	; (8001b90 <LL_EXTI_EnableIT_32_63+0x24>)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	58000800 	.word	0x58000800

08001b94 <LL_AHB2_GRP1_EnableClock>:
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ba2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
}
 8001bba:	bf00      	nop
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <LL_C2_AHB2_GRP1_EnableClock>:
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b085      	sub	sp, #20
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8001bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd2:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001bd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8001be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be6:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4013      	ands	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
}
 8001bf2:	bf00      	nop
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001c02:	f005 fae7 	bl	80071d4 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001c06:	f005 faeb 	bl	80071e0 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8001c0a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001c0e:	f7ff ffad 	bl	8001b6c <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8001c12:	f00c fc6d 	bl	800e4f0 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8001c16:	f000 f821 	bl	8001c5c <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8001c1a:	f000 f8bf 	bl	8001d9c <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8001c1e:	bf00      	nop
}
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8001c24:	b5b0      	push	{r4, r5, r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <APPD_EnableCPU2+0x34>)
 8001c2c:	1d3c      	adds	r4, r7, #4
 8001c2e:	461d      	mov	r5, r3
 8001c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c38:	c403      	stmia	r4!, {r0, r1}
 8001c3a:	8022      	strh	r2, [r4, #0]
 8001c3c:	3402      	adds	r4, #2
 8001c3e:	0c13      	lsrs	r3, r2, #16
 8001c40:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8001c42:	f00c fa67 	bl	800e114 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f00b fdc6 	bl	800d7da <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8001c4e:	bf00      	nop
}
 8001c50:	3720      	adds	r7, #32
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bdb0      	pop	{r4, r5, r7, pc}
 8001c56:	bf00      	nop
 8001c58:	08017a68 	.word	0x08017a68

08001c5c <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	77fb      	strb	r3, [r7, #31]
 8001c80:	e033      	b.n	8001cea <APPD_SetCPU2GpioConfig+0x8e>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8001c82:	7ffb      	ldrb	r3, [r7, #31]
 8001c84:	4a42      	ldr	r2, [pc, #264]	; (8001d90 <APPD_SetCPU2GpioConfig+0x134>)
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4413      	add	r3, r2
 8001c8a:	799b      	ldrb	r3, [r3, #6]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d028      	beq.n	8001ce2 <APPD_SetCPU2GpioConfig+0x86>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8001c90:	7ffb      	ldrb	r3, [r7, #31]
 8001c92:	4a3f      	ldr	r2, [pc, #252]	; (8001d90 <APPD_SetCPU2GpioConfig+0x134>)
 8001c94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001c98:	4a3e      	ldr	r2, [pc, #248]	; (8001d94 <APPD_SetCPU2GpioConfig+0x138>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d00f      	beq.n	8001cbe <APPD_SetCPU2GpioConfig+0x62>
 8001c9e:	4a3e      	ldr	r2, [pc, #248]	; (8001d98 <APPD_SetCPU2GpioConfig+0x13c>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d015      	beq.n	8001cd0 <APPD_SetCPU2GpioConfig+0x74>
 8001ca4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ca8:	d000      	beq.n	8001cac <APPD_SetCPU2GpioConfig+0x50>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8001caa:	e01b      	b.n	8001ce4 <APPD_SetCPU2GpioConfig+0x88>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8001cac:	7ffb      	ldrb	r3, [r7, #31]
 8001cae:	4a38      	ldr	r2, [pc, #224]	; (8001d90 <APPD_SetCPU2GpioConfig+0x134>)
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	889a      	ldrh	r2, [r3, #4]
 8001cb6:	8bbb      	ldrh	r3, [r7, #28]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	83bb      	strh	r3, [r7, #28]
          break;
 8001cbc:	e012      	b.n	8001ce4 <APPD_SetCPU2GpioConfig+0x88>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8001cbe:	7ffb      	ldrb	r3, [r7, #31]
 8001cc0:	4a33      	ldr	r2, [pc, #204]	; (8001d90 <APPD_SetCPU2GpioConfig+0x134>)
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	889a      	ldrh	r2, [r3, #4]
 8001cc8:	8b7b      	ldrh	r3, [r7, #26]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	837b      	strh	r3, [r7, #26]
          break;
 8001cce:	e009      	b.n	8001ce4 <APPD_SetCPU2GpioConfig+0x88>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8001cd0:	7ffb      	ldrb	r3, [r7, #31]
 8001cd2:	4a2f      	ldr	r2, [pc, #188]	; (8001d90 <APPD_SetCPU2GpioConfig+0x134>)
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	889a      	ldrh	r2, [r3, #4]
 8001cda:	8b3b      	ldrh	r3, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	833b      	strh	r3, [r7, #24]
          break;
 8001ce0:	e000      	b.n	8001ce4 <APPD_SetCPU2GpioConfig+0x88>
      }
    }
 8001ce2:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001ce4:	7ffb      	ldrb	r3, [r7, #31]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	77fb      	strb	r3, [r7, #31]
 8001cea:	7ffb      	ldrb	r3, [r7, #31]
 8001cec:	2b21      	cmp	r3, #33	; 0x21
 8001cee:	d9c8      	bls.n	8001c82 <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8001cfc:	8bbb      	ldrh	r3, [r7, #28]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d014      	beq.n	8001d2c <APPD_SetCPU2GpioConfig+0xd0>
  {
    gpio_config.Pin = gpioa_pin_list;
 8001d02:	8bbb      	ldrh	r3, [r7, #28]
 8001d04:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	2001      	movs	r0, #1
 8001d08:	f7ff ff44 	bl	8001b94 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f7ff ff5a 	bl	8001bc6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	4619      	mov	r1, r3
 8001d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d1a:	f005 fbcf 	bl	80074bc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8001d1e:	8bbb      	ldrh	r3, [r7, #28]
 8001d20:	2200      	movs	r2, #0
 8001d22:	4619      	mov	r1, r3
 8001d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d28:	f005 fd50 	bl	80077cc <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8001d2c:	8b7b      	ldrh	r3, [r7, #26]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d012      	beq.n	8001d58 <APPD_SetCPU2GpioConfig+0xfc>
  {
    gpio_config.Pin = gpiob_pin_list;
 8001d32:	8b7b      	ldrh	r3, [r7, #26]
 8001d34:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d36:	2002      	movs	r0, #2
 8001d38:	f7ff ff2c 	bl	8001b94 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8001d3c:	2002      	movs	r0, #2
 8001d3e:	f7ff ff42 	bl	8001bc6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	4619      	mov	r1, r3
 8001d46:	4813      	ldr	r0, [pc, #76]	; (8001d94 <APPD_SetCPU2GpioConfig+0x138>)
 8001d48:	f005 fbb8 	bl	80074bc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8001d4c:	8b7b      	ldrh	r3, [r7, #26]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	4619      	mov	r1, r3
 8001d52:	4810      	ldr	r0, [pc, #64]	; (8001d94 <APPD_SetCPU2GpioConfig+0x138>)
 8001d54:	f005 fd3a 	bl	80077cc <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8001d58:	8b3b      	ldrh	r3, [r7, #24]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d013      	beq.n	8001d86 <APPD_SetCPU2GpioConfig+0x12a>
  {
    gpio_config.Pin = gpioc_pin_list;
 8001d5e:	8b3b      	ldrh	r3, [r7, #24]
 8001d60:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d62:	2004      	movs	r0, #4
 8001d64:	f7ff ff16 	bl	8001b94 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8001d68:	2004      	movs	r0, #4
 8001d6a:	f7ff ff2c 	bl	8001bc6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	4619      	mov	r1, r3
 8001d72:	4809      	ldr	r0, [pc, #36]	; (8001d98 <APPD_SetCPU2GpioConfig+0x13c>)
 8001d74:	f005 fba2 	bl	80074bc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8001d78:	8b3b      	ldrh	r3, [r7, #24]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4806      	ldr	r0, [pc, #24]	; (8001d98 <APPD_SetCPU2GpioConfig+0x13c>)
 8001d80:	f005 fd24 	bl	80077cc <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
}
 8001d88:	3720      	adds	r7, #32
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	08018020 	.word	0x08018020
 8001d94:	48000400 	.word	0x48000400
 8001d98:	48000800 	.word	0x48000800

08001d9c <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8001da0:	bf00      	nop
}
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8001dae:	bf00      	nop
}
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	607a      	str	r2, [r7, #4]
 8001dc4:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8001dc6:	897a      	ldrh	r2, [r7, #10]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68f9      	ldr	r1, [r7, #12]
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f001 fbc9 	bl	8003564 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8001dd2:	bf00      	nop
}
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001de4:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <LL_C2_PWR_SetPowerMode+0x28>)
 8001de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dea:	f023 0207 	bic.w	r2, r3, #7
 8001dee:	4905      	ldr	r1, [pc, #20]	; (8001e04 <LL_C2_PWR_SetPowerMode+0x28>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	58000400 	.word	0x58000400

08001e08 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	608b      	str	r3, [r1, #8]
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <APPE_Init>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8001e34:	f000 f814 	bl	8001e60 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001e38:	4908      	ldr	r1, [pc, #32]	; (8001e5c <APPE_Init+0x2c>)
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	f001 f918 	bl	8003070 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8001e40:	f7ff fedd 	bl	8001bfe <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001e44:	2101      	movs	r1, #1
 8001e46:	2001      	movs	r0, #1
 8001e48:	f011 fa98 	bl	801337c <UTIL_LPM_SetOffMode>

  Led_Init();
 8001e4c:	f000 f8a1 	bl	8001f92 <Led_Init>

  Button_Init();
 8001e50:	f000 f8a6 	bl	8001fa0 <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001e54:	f000 f812 	bl	8001e7c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001e58:	bf00      	nop
}
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	2002e0a4 	.word	0x2002e0a4

08001e60 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001e64:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001e68:	f7ff ffce 	bl	8001e08 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001e6c:	f011 fa74 	bl	8013358 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001e70:	2004      	movs	r0, #4
 8001e72:	f7ff ffb3 	bl	8001ddc <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8001e76:	bf00      	nop
}
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001e82:	f00b ff91 	bl	800dda8 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8001e86:	2000      	movs	r0, #0
 8001e88:	f00d fac6 	bl	800f418 <osMutexNew>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	4b17      	ldr	r3, [pc, #92]	; (8001eec <appe_Tl_Init+0x70>)
 8001e90:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 8001e92:	2200      	movs	r2, #0
 8001e94:	2100      	movs	r1, #0
 8001e96:	2001      	movs	r0, #1
 8001e98:	f00d fc06 	bl	800f6a8 <osSemaphoreNew>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <appe_Tl_Init+0x74>)
 8001ea0:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 8001ea2:	4a14      	ldr	r2, [pc, #80]	; (8001ef4 <appe_Tl_Init+0x78>)
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4814      	ldr	r0, [pc, #80]	; (8001ef8 <appe_Tl_Init+0x7c>)
 8001ea8:	f00d f8ec 	bl	800f084 <osThreadNew>
 8001eac:	4602      	mov	r2, r0
 8001eae:	4b13      	ldr	r3, [pc, #76]	; (8001efc <appe_Tl_Init+0x80>)
 8001eb0:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001eb2:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <appe_Tl_Init+0x84>)
 8001eb4:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001eb6:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <appe_Tl_Init+0x88>)
 8001eb8:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001eba:	463b      	mov	r3, r7
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4812      	ldr	r0, [pc, #72]	; (8001f08 <appe_Tl_Init+0x8c>)
 8001ec0:	f00b fe38 	bl	800db34 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <appe_Tl_Init+0x90>)
 8001ec6:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <appe_Tl_Init+0x94>)
 8001eca:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <appe_Tl_Init+0x98>)
 8001ece:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001ed0:	f240 533c 	movw	r3, #1340	; 0x53c
 8001ed4:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8001ed6:	f107 0308 	add.w	r3, r7, #8
 8001eda:	4618      	mov	r0, r3
 8001edc:	f00c f8a6 	bl	800e02c <TL_MM_Init>

  TL_Enable();
 8001ee0:	f00b ff5c 	bl	800dd9c <TL_Enable>

  return;
 8001ee4:	bf00      	nop
}
 8001ee6:	3720      	adds	r7, #32
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	2002e1b8 	.word	0x2002e1b8
 8001ef0:	2002e1c0 	.word	0x2002e1c0
 8001ef4:	08018130 	.word	0x08018130
 8001ef8:	08001f79 	.word	0x08001f79
 8001efc:	2002e1bc 	.word	0x2002e1bc
 8001f00:	20030724 	.word	0x20030724
 8001f04:	08001f19 	.word	0x08001f19
 8001f08:	08001f59 	.word	0x08001f59
 8001f0c:	2003093c 	.word	0x2003093c
 8001f10:	20030830 	.word	0x20030830
 8001f14:	200301e8 	.word	0x200301e8

08001f18 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
  switch (status)
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d002      	beq.n	8001f2e <APPE_SysStatusNot+0x16>
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d008      	beq.n	8001f3e <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 8001f2c:	e00d      	b.n	8001f4a <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <APPE_SysStatusNot+0x3c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f36:	4618      	mov	r0, r3
 8001f38:	f00d fb08 	bl	800f54c <osMutexAcquire>
      break;
 8001f3c:	e005      	b.n	8001f4a <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 8001f3e:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <APPE_SysStatusNot+0x3c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f00d fb60 	bl	800f608 <osMutexRelease>
      break;
 8001f48:	bf00      	nop
  }
  return;
 8001f4a:	bf00      	nop
}
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	2002e1b8 	.word	0x2002e1b8

08001f58 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 8001f60:	f7ff fe60 	bl	8001c24 <APPD_EnableCPU2>

  APP_BLE_Init( );
 8001f64:	f7fe fe6c 	bl	8000c40 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001f68:	2100      	movs	r1, #0
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	f011 fa06 	bl	801337c <UTIL_LPM_SetOffMode>
  return;
 8001f70:	bf00      	nop
}
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8001f80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f84:	2100      	movs	r1, #0
 8001f86:	2001      	movs	r0, #1
 8001f88:	f00d f984 	bl	800f294 <osThreadFlagsWait>
     shci_user_evt_proc();
 8001f8c:	f00b fdee 	bl	800db6c <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8001f90:	e7f6      	b.n	8001f80 <ShciUserEvtProcess+0x8>

08001f92 <Led_Init>:
    }
}

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  BSP_LED_Init(LED_RED);

  BSP_LED_On(LED_GREEN);
#endif

  return;
 8001f96:	bf00      	nop
}
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <Button_Init>:

static void Button_Init( void )
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
#endif

  return;
 8001fa4:	bf00      	nop
}
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet( ShciUserEvtProcessId, 1 );
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <shci_notify_asynch_evt+0x1c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f00d f906 	bl	800f1d0 <osThreadFlagsSet>
  return;
 8001fc4:	bf00      	nop
}
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	2002e1bc 	.word	0x2002e1bc

08001fd0 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 8001fd8:	4b04      	ldr	r3, [pc, #16]	; (8001fec <shci_cmd_resp_release+0x1c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f00d fc67 	bl	800f8b0 <osSemaphoreRelease>
  return;
 8001fe2:	bf00      	nop
}
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	2002e1c0 	.word	0x2002e1c0

08001ff0 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <shci_cmd_resp_wait+0x20>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002000:	4618      	mov	r0, r3
 8002002:	f00d fbef 	bl	800f7e4 <osSemaphoreAcquire>
  return;
 8002006:	bf00      	nop
}
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	2002e1c0 	.word	0x2002e1c0

08002014 <Dotstar_Init>:
} DotStar_State;


DotStar_State dotstar_state;

void Dotstar_Init(DotStar_InitHandle* dotstar_init){
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]

   dotstar_state.spiHandle = dotstar_init->spiHandle;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a23      	ldr	r2, [pc, #140]	; (80020b0 <Dotstar_Init+0x9c>)
 8002022:	6013      	str	r3, [r2, #0]
   dotstar_state.numLEDs = dotstar_init->numLEDs;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	889a      	ldrh	r2, [r3, #4]
 8002028:	4b21      	ldr	r3, [pc, #132]	; (80020b0 <Dotstar_Init+0x9c>)
 800202a:	809a      	strh	r2, [r3, #4]
   dotstar_state.brightness = 0;
 800202c:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <Dotstar_Init+0x9c>)
 800202e:	2200      	movs	r2, #0
 8002030:	719a      	strb	r2, [r3, #6]
   dotstar_state.rOffset = dotstar_init->colorOrder & 3;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	799b      	ldrb	r3, [r3, #6]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	b2da      	uxtb	r2, r3
 800203c:	4b1c      	ldr	r3, [pc, #112]	; (80020b0 <Dotstar_Init+0x9c>)
 800203e:	731a      	strb	r2, [r3, #12]
   dotstar_state.gOffset = (dotstar_init->colorOrder >> 2) & 3;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	799b      	ldrb	r3, [r3, #6]
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	b2db      	uxtb	r3, r3
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <Dotstar_Init+0x9c>)
 8002050:	735a      	strb	r2, [r3, #13]
   dotstar_state.bOffset = (dotstar_init->colorOrder >> 4) & 3;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	799b      	ldrb	r3, [r3, #6]
 8002056:	091b      	lsrs	r3, r3, #4
 8002058:	b2db      	uxtb	r3, r3
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	b2da      	uxtb	r2, r3
 8002060:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <Dotstar_Init+0x9c>)
 8002062:	739a      	strb	r2, [r3, #14]

   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8002064:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <Dotstar_Init+0x9c>)
 8002066:	7b1a      	ldrb	r2, [r3, #12]
 8002068:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <Dotstar_Init+0x9c>)
 800206a:	7b5b      	ldrb	r3, [r3, #13]
 800206c:	429a      	cmp	r2, r3
 800206e:	d10c      	bne.n	800208a <Dotstar_Init+0x76>
     dotstar_state.numLEDs + ((dotstar_state.numLEDs + 3) / 4) : // MONO: 10 bits/pixel, round up to next byte
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <Dotstar_Init+0x9c>)
 8002072:	889a      	ldrh	r2, [r3, #4]
 8002074:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <Dotstar_Init+0x9c>)
 8002076:	889b      	ldrh	r3, [r3, #4]
 8002078:	3303      	adds	r3, #3
 800207a:	2b00      	cmp	r3, #0
 800207c:	da00      	bge.n	8002080 <Dotstar_Init+0x6c>
 800207e:	3303      	adds	r3, #3
 8002080:	109b      	asrs	r3, r3, #2
 8002082:	b29b      	uxth	r3, r3
   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8002084:	4413      	add	r3, r2
 8002086:	b29b      	uxth	r3, r3
 8002088:	e005      	b.n	8002096 <Dotstar_Init+0x82>
     dotstar_state.numLEDs * 3;              // COLOR: 3 bytes/pixel
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <Dotstar_Init+0x9c>)
 800208c:	889b      	ldrh	r3, [r3, #4]
   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 800208e:	461a      	mov	r2, r3
 8002090:	0052      	lsls	r2, r2, #1
 8002092:	4413      	add	r3, r2
 8002094:	b29b      	uxth	r3, r3
 8002096:	81fb      	strh	r3, [r7, #14]

   //dotstar_state.pixels = (uint8_t *)malloc(bytes);
   dotstar_state.pixels = (uint8_t *)pvPortMalloc(bytes);
 8002098:	89fb      	ldrh	r3, [r7, #14]
 800209a:	4618      	mov	r0, r3
 800209c:	f00e f840 	bl	8010120 <pvPortMalloc>
 80020a0:	4603      	mov	r3, r0
 80020a2:	461a      	mov	r2, r3
 80020a4:	4b02      	ldr	r3, [pc, #8]	; (80020b0 <Dotstar_Init+0x9c>)
 80020a6:	609a      	str	r2, [r3, #8]
}
 80020a8:	bf00      	nop
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	2002e1c4 	.word	0x2002e1c4

080020b4 <ds_show>:
*/

/*!
  @brief   Transmit pixel data in RAM to DotStars.
*/
void ds_show(void) {
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0

  if(!dotstar_state.pixels) return;
 80020ba:	4b4b      	ldr	r3, [pc, #300]	; (80021e8 <ds_show+0x134>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 808e 	beq.w	80021e0 <ds_show+0x12c>

  uint8_t *ptr = dotstar_state.pixels, i;            // -> LED data
 80020c4:	4b48      	ldr	r3, [pc, #288]	; (80021e8 <ds_show+0x134>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	60fb      	str	r3, [r7, #12]
  uint16_t n   = dotstar_state.numLEDs;              // Counter
 80020ca:	4b47      	ldr	r3, [pc, #284]	; (80021e8 <ds_show+0x134>)
 80020cc:	889b      	ldrh	r3, [r3, #4]
 80020ce:	813b      	strh	r3, [r7, #8]
  uint16_t b16 = (uint16_t)dotstar_state.brightness; // Type-convert for fixed-point math
 80020d0:	4b45      	ldr	r3, [pc, #276]	; (80021e8 <ds_show+0x134>)
 80020d2:	799b      	ldrb	r3, [r3, #6]
 80020d4:	80fb      	strh	r3, [r7, #6]
  uint8_t sendval;

    sendval = 0x00;
 80020d6:	2300      	movs	r3, #0
 80020d8:	717b      	strb	r3, [r7, #5]
    for(i=0; i<4; i++) spi_out(&sendval);    // 4 byte start-frame marker
 80020da:	2300      	movs	r3, #0
 80020dc:	72fb      	strb	r3, [r7, #11]
 80020de:	e00a      	b.n	80020f6 <ds_show+0x42>
 80020e0:	4b41      	ldr	r3, [pc, #260]	; (80021e8 <ds_show+0x134>)
 80020e2:	6818      	ldr	r0, [r3, #0]
 80020e4:	1d79      	adds	r1, r7, #5
 80020e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020ea:	2201      	movs	r2, #1
 80020ec:	f008 fdb5 	bl	800ac5a <HAL_SPI_Transmit>
 80020f0:	7afb      	ldrb	r3, [r7, #11]
 80020f2:	3301      	adds	r3, #1
 80020f4:	72fb      	strb	r3, [r7, #11]
 80020f6:	7afb      	ldrb	r3, [r7, #11]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d9f1      	bls.n	80020e0 <ds_show+0x2c>

    if(dotstar_state.brightness) {                     // Scale pixel brightness on output
 80020fc:	4b3a      	ldr	r3, [pc, #232]	; (80021e8 <ds_show+0x134>)
 80020fe:	799b      	ldrb	r3, [r3, #6]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d02c      	beq.n	800215e <ds_show+0xaa>
      do {                               // For each pixel...
    	sendval = 0xFF;
 8002104:	23ff      	movs	r3, #255	; 0xff
 8002106:	717b      	strb	r3, [r7, #5]
        spi_out(&sendval);                   //  Pixel start
 8002108:	4b37      	ldr	r3, [pc, #220]	; (80021e8 <ds_show+0x134>)
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	1d79      	adds	r1, r7, #5
 800210e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002112:	2201      	movs	r2, #1
 8002114:	f008 fda1 	bl	800ac5a <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 8002118:	2300      	movs	r3, #0
 800211a:	72fb      	strb	r3, [r7, #11]
 800211c:	e015      	b.n	800214a <ds_show+0x96>
        	sendval = (*ptr++ * b16) >> 8;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1c5a      	adds	r2, r3, #1
 8002122:	60fa      	str	r2, [r7, #12]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	88fb      	ldrh	r3, [r7, #6]
 800212a:	fb03 f302 	mul.w	r3, r3, r2
 800212e:	121b      	asrs	r3, r3, #8
 8002130:	b2db      	uxtb	r3, r3
 8002132:	717b      	strb	r3, [r7, #5]
        	spi_out(&sendval); // Scale, write RGB
 8002134:	4b2c      	ldr	r3, [pc, #176]	; (80021e8 <ds_show+0x134>)
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	1d79      	adds	r1, r7, #5
 800213a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800213e:	2201      	movs	r2, #1
 8002140:	f008 fd8b 	bl	800ac5a <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 8002144:	7afb      	ldrb	r3, [r7, #11]
 8002146:	3301      	adds	r3, #1
 8002148:	72fb      	strb	r3, [r7, #11]
 800214a:	7afb      	ldrb	r3, [r7, #11]
 800214c:	2b02      	cmp	r3, #2
 800214e:	d9e6      	bls.n	800211e <ds_show+0x6a>
        }
      } while(--n);
 8002150:	893b      	ldrh	r3, [r7, #8]
 8002152:	3b01      	subs	r3, #1
 8002154:	813b      	strh	r3, [r7, #8]
 8002156:	893b      	ldrh	r3, [r7, #8]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1d3      	bne.n	8002104 <ds_show+0x50>
 800215c:	e025      	b.n	80021aa <ds_show+0xf6>
    } else {                             // Full brightness (no scaling)
      do {                               // For each pixel...
    	sendval = 0xFF;
 800215e:	23ff      	movs	r3, #255	; 0xff
 8002160:	717b      	strb	r3, [r7, #5]
        spi_out(&sendval);                   //  Pixel start
 8002162:	4b21      	ldr	r3, [pc, #132]	; (80021e8 <ds_show+0x134>)
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	1d79      	adds	r1, r7, #5
 8002168:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800216c:	2201      	movs	r2, #1
 800216e:	f008 fd74 	bl	800ac5a <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 8002172:	2300      	movs	r3, #0
 8002174:	72fb      	strb	r3, [r7, #11]
 8002176:	e00f      	b.n	8002198 <ds_show+0xe4>
        	sendval = *ptr++;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	60fa      	str	r2, [r7, #12]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	717b      	strb	r3, [r7, #5]
        	spi_out(&sendval); // Write R,G,B
 8002182:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <ds_show+0x134>)
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	1d79      	adds	r1, r7, #5
 8002188:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800218c:	2201      	movs	r2, #1
 800218e:	f008 fd64 	bl	800ac5a <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 8002192:	7afb      	ldrb	r3, [r7, #11]
 8002194:	3301      	adds	r3, #1
 8002196:	72fb      	strb	r3, [r7, #11]
 8002198:	7afb      	ldrb	r3, [r7, #11]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d9ec      	bls.n	8002178 <ds_show+0xc4>
        }
      } while(--n);
 800219e:	893b      	ldrh	r3, [r7, #8]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	813b      	strh	r3, [r7, #8]
 80021a4:	893b      	ldrh	r3, [r7, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1d9      	bne.n	800215e <ds_show+0xaa>
    // revisions are more strict (e.g. might mandate use of end-frame
    // before start-frame marker). i.e. let's not remove this. But after
    // testing a bit more the suggestion is to use at least (numLeds+1)/2
    // high values (1) or (numLeds+15)/16 full bytes as EndFrame. For details see also:
    // https://cpldcpu.wordpress.com/2014/11/30/understanding-the-apa102-superled/
    sendval = 0xFF;
 80021aa:	23ff      	movs	r3, #255	; 0xff
 80021ac:	717b      	strb	r3, [r7, #5]
    for(i=0; i<((dotstar_state.numLEDs + 15) / 16); i++) spi_out(&sendval);
 80021ae:	2300      	movs	r3, #0
 80021b0:	72fb      	strb	r3, [r7, #11]
 80021b2:	e00a      	b.n	80021ca <ds_show+0x116>
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <ds_show+0x134>)
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	1d79      	adds	r1, r7, #5
 80021ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021be:	2201      	movs	r2, #1
 80021c0:	f008 fd4b 	bl	800ac5a <HAL_SPI_Transmit>
 80021c4:	7afb      	ldrb	r3, [r7, #11]
 80021c6:	3301      	adds	r3, #1
 80021c8:	72fb      	strb	r3, [r7, #11]
 80021ca:	7afa      	ldrb	r2, [r7, #11]
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <ds_show+0x134>)
 80021ce:	889b      	ldrh	r3, [r3, #4]
 80021d0:	330f      	adds	r3, #15
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	da00      	bge.n	80021d8 <ds_show+0x124>
 80021d6:	330f      	adds	r3, #15
 80021d8:	111b      	asrs	r3, r3, #4
 80021da:	429a      	cmp	r2, r3
 80021dc:	dbea      	blt.n	80021b4 <ds_show+0x100>
 80021de:	e000      	b.n	80021e2 <ds_show+0x12e>
  if(!dotstar_state.pixels) return;
 80021e0:	bf00      	nop

}
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	2002e1c4 	.word	0x2002e1c4

080021ec <ds_clear>:

/*!
  @brief   Fill the whole DotStar strip with 0 / black / off.
*/
void ds_clear() {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  memset(dotstar_state.pixels, 0, (dotstar_state.rOffset == dotstar_state.gOffset) ?
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <ds_clear+0x44>)
 80021f2:	6898      	ldr	r0, [r3, #8]
 80021f4:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <ds_clear+0x44>)
 80021f6:	7b1a      	ldrb	r2, [r3, #12]
 80021f8:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <ds_clear+0x44>)
 80021fa:	7b5b      	ldrb	r3, [r3, #13]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d10b      	bne.n	8002218 <ds_clear+0x2c>
    dotstar_state.numLEDs + ((dotstar_state.numLEDs + 3) / 4) : // MONO: 10 bits/pixel
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <ds_clear+0x44>)
 8002202:	889b      	ldrh	r3, [r3, #4]
 8002204:	461a      	mov	r2, r3
 8002206:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <ds_clear+0x44>)
 8002208:	889b      	ldrh	r3, [r3, #4]
 800220a:	3303      	adds	r3, #3
 800220c:	2b00      	cmp	r3, #0
 800220e:	da00      	bge.n	8002212 <ds_clear+0x26>
 8002210:	3303      	adds	r3, #3
 8002212:	109b      	asrs	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	e005      	b.n	8002224 <ds_clear+0x38>
    dotstar_state.numLEDs * 3);                   // COLOR: 3 bytes/pixel
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <ds_clear+0x44>)
 800221a:	889b      	ldrh	r3, [r3, #4]
 800221c:	461a      	mov	r2, r3
 800221e:	4613      	mov	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4413      	add	r3, r2
  memset(dotstar_state.pixels, 0, (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8002224:	461a      	mov	r2, r3
 8002226:	2100      	movs	r1, #0
 8002228:	f011 f90b 	bl	8013442 <memset>
}
 800222c:	bf00      	nop
 800222e:	bd80      	pop	{r7, pc}
 8002230:	2002e1c4 	.word	0x2002e1c4

08002234 <ds_setPixelColor32B>:
  @param   n  Pixel index, starting from 0.
  @param   c  32-bit color value. Most significant byte is 0, second is
              red, then green, and least significant byte is blue.
              e.g. 0x00RRGGBB
*/
void ds_setPixelColor32B(uint16_t n, uint32_t c) {
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	80fb      	strh	r3, [r7, #6]
  if(n < dotstar_state.numLEDs) {
 8002240:	4b16      	ldr	r3, [pc, #88]	; (800229c <ds_setPixelColor32B+0x68>)
 8002242:	889b      	ldrh	r3, [r3, #4]
 8002244:	88fa      	ldrh	r2, [r7, #6]
 8002246:	429a      	cmp	r2, r3
 8002248:	d221      	bcs.n	800228e <ds_setPixelColor32B+0x5a>
    uint8_t *p = &dotstar_state.pixels[n * 3];
 800224a:	4b14      	ldr	r3, [pc, #80]	; (800229c <ds_setPixelColor32B+0x68>)
 800224c:	6899      	ldr	r1, [r3, #8]
 800224e:	88fa      	ldrh	r2, [r7, #6]
 8002250:	4613      	mov	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4413      	add	r3, r2
 8002256:	440b      	add	r3, r1
 8002258:	60fb      	str	r3, [r7, #12]
    p[dotstar_state.rOffset] = (uint8_t)(c >> 16);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	0c1a      	lsrs	r2, r3, #16
 800225e:	4b0f      	ldr	r3, [pc, #60]	; (800229c <ds_setPixelColor32B+0x68>)
 8002260:	7b1b      	ldrb	r3, [r3, #12]
 8002262:	4619      	mov	r1, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	440b      	add	r3, r1
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	701a      	strb	r2, [r3, #0]
    p[dotstar_state.gOffset] = (uint8_t)(c >>  8);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	0a1a      	lsrs	r2, r3, #8
 8002270:	4b0a      	ldr	r3, [pc, #40]	; (800229c <ds_setPixelColor32B+0x68>)
 8002272:	7b5b      	ldrb	r3, [r3, #13]
 8002274:	4619      	mov	r1, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	440b      	add	r3, r1
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	701a      	strb	r2, [r3, #0]
    p[dotstar_state.bOffset] = (uint8_t)c;
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <ds_setPixelColor32B+0x68>)
 8002280:	7b9b      	ldrb	r3, [r3, #14]
 8002282:	461a      	mov	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4413      	add	r3, r2
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	701a      	strb	r2, [r3, #0]
  }
}
 800228e:	bf00      	nop
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	2002e1c4 	.word	0x2002e1c4

080022a0 <ds_fill>:
  @param   first  Index of first pixel to fill, starting from 0. Must be
                  in-bounds, no clipping is performed. 0 if unspecified.
  @param   count  Number of pixels to fill, as a positive value. Passing
                  0 or leaving unspecified will fill to end of strip.
*/
void ds_fill(uint32_t c, uint16_t first, uint16_t count) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	807b      	strh	r3, [r7, #2]
 80022ac:	4613      	mov	r3, r2
 80022ae:	803b      	strh	r3, [r7, #0]
  uint16_t i, end;

  if(first >= dotstar_state.numLEDs) {
 80022b0:	4b15      	ldr	r3, [pc, #84]	; (8002308 <ds_fill+0x68>)
 80022b2:	889b      	ldrh	r3, [r3, #4]
 80022b4:	887a      	ldrh	r2, [r7, #2]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d222      	bcs.n	8002300 <ds_fill+0x60>
    return; // If first LED is past end of strip, nothing to do
  }

  // Calculate the index ONE AFTER the last pixel to fill
  if(count == 0) {
 80022ba:	883b      	ldrh	r3, [r7, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d103      	bne.n	80022c8 <ds_fill+0x28>
    // Fill to end of strip
    end = dotstar_state.numLEDs;
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <ds_fill+0x68>)
 80022c2:	889b      	ldrh	r3, [r3, #4]
 80022c4:	81bb      	strh	r3, [r7, #12]
 80022c6:	e00b      	b.n	80022e0 <ds_fill+0x40>
  } else {
    // Ensure that the loop won't go past the last pixel
    end = first + count;
 80022c8:	887a      	ldrh	r2, [r7, #2]
 80022ca:	883b      	ldrh	r3, [r7, #0]
 80022cc:	4413      	add	r3, r2
 80022ce:	81bb      	strh	r3, [r7, #12]
    if(end > dotstar_state.numLEDs) end = dotstar_state.numLEDs;
 80022d0:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <ds_fill+0x68>)
 80022d2:	889b      	ldrh	r3, [r3, #4]
 80022d4:	89ba      	ldrh	r2, [r7, #12]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d902      	bls.n	80022e0 <ds_fill+0x40>
 80022da:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <ds_fill+0x68>)
 80022dc:	889b      	ldrh	r3, [r3, #4]
 80022de:	81bb      	strh	r3, [r7, #12]
  }

  for(i = first; i < end; i++) {
 80022e0:	887b      	ldrh	r3, [r7, #2]
 80022e2:	81fb      	strh	r3, [r7, #14]
 80022e4:	e007      	b.n	80022f6 <ds_fill+0x56>
    ds_setPixelColor32B(i, c);
 80022e6:	89fb      	ldrh	r3, [r7, #14]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ffa2 	bl	8002234 <ds_setPixelColor32B>
  for(i = first; i < end; i++) {
 80022f0:	89fb      	ldrh	r3, [r7, #14]
 80022f2:	3301      	adds	r3, #1
 80022f4:	81fb      	strh	r3, [r7, #14]
 80022f6:	89fa      	ldrh	r2, [r7, #14]
 80022f8:	89bb      	ldrh	r3, [r7, #12]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d3f3      	bcc.n	80022e6 <ds_fill+0x46>
 80022fe:	e000      	b.n	8002302 <ds_fill+0x62>
    return; // If first LED is past end of strip, nothing to do
 8002300:	bf00      	nop
  }
}
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	2002e1c4 	.word	0x2002e1c4

0800230c <ds_setBrightness>:
           is 'non destructive' -- it's applied as color data is being
           issued to the strip, not during setPixelColor(), and also
           means that getPixelColor() returns the exact value originally
           stored.
*/
void ds_setBrightness(uint8_t b) {
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
  // optimizes the actual scaling math later, allowing a fast 8x8-bit
  // multiply and taking the MSB. 'brightness' is a uint8_t, adding 1
  // here may (intentionally) roll over...so 0 = max brightness (color
  // values are interpreted literally; no scaling), 1 = min brightness
  // (off), 255 = just below max brightness.
  dotstar_state.brightness = b + 1;
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	3301      	adds	r3, #1
 800231a:	b2da      	uxtb	r2, r3
 800231c:	4b03      	ldr	r3, [pc, #12]	; (800232c <ds_setBrightness+0x20>)
 800231e:	719a      	strb	r2, [r3, #6]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	2002e1c4 	.word	0x2002e1c4

08002330 <I2C_Write_Byte>:
//#include "stm32wbxx_hal_i2c.h"
//#include "stm32wbxx_hal.h"


void I2C_Write_Byte(uint8_t value, uint8_t Cmd)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af02      	add	r7, sp, #8
 8002336:	4603      	mov	r3, r0
 8002338:	460a      	mov	r2, r1
 800233a:	71fb      	strb	r3, [r7, #7]
 800233c:	4613      	mov	r3, r2
 800233e:	71bb      	strb	r3, [r7, #6]
  uint16_t Addr = 0x3C << 1;
 8002340:	2378      	movs	r3, #120	; 0x78
 8002342:	81fb      	strh	r3, [r7, #14]
  uint8_t Data[2];
  Data[0] = Cmd;
 8002344:	79bb      	ldrb	r3, [r7, #6]
 8002346:	733b      	strb	r3, [r7, #12]
  Data[1] = value;
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	737b      	strb	r3, [r7, #13]

  HAL_I2C_Master_Transmit(&ER_OLED_I2C_PORT, Addr, Data, 2, HAL_MAX_DELAY);
 800234c:	f107 020c 	add.w	r2, r7, #12
 8002350:	89f9      	ldrh	r1, [r7, #14]
 8002352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	2302      	movs	r3, #2
 800235a:	4803      	ldr	r0, [pc, #12]	; (8002368 <I2C_Write_Byte+0x38>)
 800235c:	f005 fb1a 	bl	8007994 <HAL_I2C_Master_Transmit>
}
 8002360:	bf00      	nop
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	2002e1dc 	.word	0x2002e1dc

0800236c <er_oled_begin>:

void er_oled_begin()
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
    command(0xae);//--turn off oled panel
 8002370:	2100      	movs	r1, #0
 8002372:	20ae      	movs	r0, #174	; 0xae
 8002374:	f7ff ffdc 	bl	8002330 <I2C_Write_Byte>

    command(0xd5);//--set display clock divide ratio/oscillator frequency
 8002378:	2100      	movs	r1, #0
 800237a:	20d5      	movs	r0, #213	; 0xd5
 800237c:	f7ff ffd8 	bl	8002330 <I2C_Write_Byte>
    command(0x80);//--set divide ratio
 8002380:	2100      	movs	r1, #0
 8002382:	2080      	movs	r0, #128	; 0x80
 8002384:	f7ff ffd4 	bl	8002330 <I2C_Write_Byte>

    command(0xa8);//--set multiplex ratio
 8002388:	2100      	movs	r1, #0
 800238a:	20a8      	movs	r0, #168	; 0xa8
 800238c:	f7ff ffd0 	bl	8002330 <I2C_Write_Byte>
    command(0x27);//--1/40 duty
 8002390:	2100      	movs	r1, #0
 8002392:	2027      	movs	r0, #39	; 0x27
 8002394:	f7ff ffcc 	bl	8002330 <I2C_Write_Byte>

    command(0xd3);//-set display offset
 8002398:	2100      	movs	r1, #0
 800239a:	20d3      	movs	r0, #211	; 0xd3
 800239c:	f7ff ffc8 	bl	8002330 <I2C_Write_Byte>
    command(0x00);//-not offset
 80023a0:	2100      	movs	r1, #0
 80023a2:	2000      	movs	r0, #0
 80023a4:	f7ff ffc4 	bl	8002330 <I2C_Write_Byte>

    command(0xad);//--Internal IREF Setting
 80023a8:	2100      	movs	r1, #0
 80023aa:	20ad      	movs	r0, #173	; 0xad
 80023ac:	f7ff ffc0 	bl	8002330 <I2C_Write_Byte>
    command(0x30);//--
 80023b0:	2100      	movs	r1, #0
 80023b2:	2030      	movs	r0, #48	; 0x30
 80023b4:	f7ff ffbc 	bl	8002330 <I2C_Write_Byte>

    command(0x8d);//--set Charge Pump enable/disable
 80023b8:	2100      	movs	r1, #0
 80023ba:	208d      	movs	r0, #141	; 0x8d
 80023bc:	f7ff ffb8 	bl	8002330 <I2C_Write_Byte>
    command(0x14);//--set(0x10) disable
 80023c0:	2100      	movs	r1, #0
 80023c2:	2014      	movs	r0, #20
 80023c4:	f7ff ffb4 	bl	8002330 <I2C_Write_Byte>

    command(0x40);//--set start line address
 80023c8:	2100      	movs	r1, #0
 80023ca:	2040      	movs	r0, #64	; 0x40
 80023cc:	f7ff ffb0 	bl	8002330 <I2C_Write_Byte>

    command(0xa6);//--set normal display
 80023d0:	2100      	movs	r1, #0
 80023d2:	20a6      	movs	r0, #166	; 0xa6
 80023d4:	f7ff ffac 	bl	8002330 <I2C_Write_Byte>

    command(0xa4);//Disable Entire Display On
 80023d8:	2100      	movs	r1, #0
 80023da:	20a4      	movs	r0, #164	; 0xa4
 80023dc:	f7ff ffa8 	bl	8002330 <I2C_Write_Byte>

    command(0xa1);//--set segment re-map 128 to 0
 80023e0:	2100      	movs	r1, #0
 80023e2:	20a1      	movs	r0, #161	; 0xa1
 80023e4:	f7ff ffa4 	bl	8002330 <I2C_Write_Byte>

    command(0xC8);//--Set COM Output Scan Direction 64 to 0
 80023e8:	2100      	movs	r1, #0
 80023ea:	20c8      	movs	r0, #200	; 0xc8
 80023ec:	f7ff ffa0 	bl	8002330 <I2C_Write_Byte>

    command(0xda);//--set com pins hardware configuration
 80023f0:	2100      	movs	r1, #0
 80023f2:	20da      	movs	r0, #218	; 0xda
 80023f4:	f7ff ff9c 	bl	8002330 <I2C_Write_Byte>
    command(0x12);
 80023f8:	2100      	movs	r1, #0
 80023fa:	2012      	movs	r0, #18
 80023fc:	f7ff ff98 	bl	8002330 <I2C_Write_Byte>

    command(0x81);//--set contrast control register
 8002400:	2100      	movs	r1, #0
 8002402:	2081      	movs	r0, #129	; 0x81
 8002404:	f7ff ff94 	bl	8002330 <I2C_Write_Byte>
    command(0xaf);
 8002408:	2100      	movs	r1, #0
 800240a:	20af      	movs	r0, #175	; 0xaf
 800240c:	f7ff ff90 	bl	8002330 <I2C_Write_Byte>

    command(0xd9);//--set pre-charge period
 8002410:	2100      	movs	r1, #0
 8002412:	20d9      	movs	r0, #217	; 0xd9
 8002414:	f7ff ff8c 	bl	8002330 <I2C_Write_Byte>
    command(0x22);
 8002418:	2100      	movs	r1, #0
 800241a:	2022      	movs	r0, #34	; 0x22
 800241c:	f7ff ff88 	bl	8002330 <I2C_Write_Byte>

    command(0xdb);//--set vcomh
 8002420:	2100      	movs	r1, #0
 8002422:	20db      	movs	r0, #219	; 0xdb
 8002424:	f7ff ff84 	bl	8002330 <I2C_Write_Byte>
    command(0x20);
 8002428:	2100      	movs	r1, #0
 800242a:	2020      	movs	r0, #32
 800242c:	f7ff ff80 	bl	8002330 <I2C_Write_Byte>

    command(0xaf);//--turn on oled panel
 8002430:	2100      	movs	r1, #0
 8002432:	20af      	movs	r0, #175	; 0xaf
 8002434:	f7ff ff7c 	bl	8002330 <I2C_Write_Byte>

}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}

0800243c <er_oled_clear>:

void er_oled_clear(uint8_t* buffer)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
	int i;
	for(i = 0;i < WIDTH * HEIGHT / 8;i++)
 8002444:	2300      	movs	r3, #0
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	e007      	b.n	800245a <er_oled_clear+0x1e>
	{
		buffer[i] = 0;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	4413      	add	r3, r2
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]
	for(i = 0;i < WIDTH * HEIGHT / 8;i++)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	3301      	adds	r3, #1
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002460:	dbf3      	blt.n	800244a <er_oled_clear+0xe>
	}
}
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <er_oled_pixel>:
		buffer[i] = 0;
	}
}

void er_oled_pixel(int x, int y, char color, uint8_t* buffer)
{
 800246e:	b480      	push	{r7}
 8002470:	b085      	sub	sp, #20
 8002472:	af00      	add	r7, sp, #0
 8002474:	60f8      	str	r0, [r7, #12]
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	603b      	str	r3, [r7, #0]
 800247a:	4613      	mov	r3, r2
 800247c:	71fb      	strb	r3, [r7, #7]
    if(x > WIDTH || y > HEIGHT)return ;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2b48      	cmp	r3, #72	; 0x48
 8002482:	dc61      	bgt.n	8002548 <er_oled_pixel+0xda>
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b28      	cmp	r3, #40	; 0x28
 8002488:	dc5e      	bgt.n	8002548 <er_oled_pixel+0xda>
    if(color)
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d02c      	beq.n	80024ea <er_oled_pixel+0x7c>
        buffer[x+(y/8)*WIDTH] |= 1<<(y%8);
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	da00      	bge.n	8002498 <er_oled_pixel+0x2a>
 8002496:	3307      	adds	r3, #7
 8002498:	10db      	asrs	r3, r3, #3
 800249a:	461a      	mov	r2, r3
 800249c:	4613      	mov	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	4413      	add	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4619      	mov	r1, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	440b      	add	r3, r1
 80024aa:	4619      	mov	r1, r3
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	440b      	add	r3, r1
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	b259      	sxtb	r1, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	4258      	negs	r0, r3
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	f000 0007 	and.w	r0, r0, #7
 80024c0:	bf58      	it	pl
 80024c2:	4243      	negpl	r3, r0
 80024c4:	2001      	movs	r0, #1
 80024c6:	fa00 f303 	lsl.w	r3, r0, r3
 80024ca:	b25b      	sxtb	r3, r3
 80024cc:	430b      	orrs	r3, r1
 80024ce:	b259      	sxtb	r1, r3
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4413      	add	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	461a      	mov	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	4413      	add	r3, r2
 80024de:	461a      	mov	r2, r3
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	b2ca      	uxtb	r2, r1
 80024e6:	701a      	strb	r2, [r3, #0]
 80024e8:	e02f      	b.n	800254a <er_oled_pixel+0xdc>
    else
        buffer[x+(y/8)*WIDTH] &= ~(1<<(y%8));
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	da00      	bge.n	80024f2 <er_oled_pixel+0x84>
 80024f0:	3307      	adds	r3, #7
 80024f2:	10db      	asrs	r3, r3, #3
 80024f4:	461a      	mov	r2, r3
 80024f6:	4613      	mov	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	4413      	add	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4619      	mov	r1, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	440b      	add	r3, r1
 8002504:	4619      	mov	r1, r3
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	440b      	add	r3, r1
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	b259      	sxtb	r1, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	4258      	negs	r0, r3
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	f000 0007 	and.w	r0, r0, #7
 800251a:	bf58      	it	pl
 800251c:	4243      	negpl	r3, r0
 800251e:	2001      	movs	r0, #1
 8002520:	fa00 f303 	lsl.w	r3, r0, r3
 8002524:	b25b      	sxtb	r3, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	b25b      	sxtb	r3, r3
 800252a:	400b      	ands	r3, r1
 800252c:	b259      	sxtb	r1, r3
 800252e:	4613      	mov	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4413      	add	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	461a      	mov	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4413      	add	r3, r2
 800253c:	461a      	mov	r2, r3
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	4413      	add	r3, r2
 8002542:	b2ca      	uxtb	r2, r1
 8002544:	701a      	strb	r2, [r3, #0]
 8002546:	e000      	b.n	800254a <er_oled_pixel+0xdc>
    if(x > WIDTH || y > HEIGHT)return ;
 8002548:	bf00      	nop
}
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <er_oled_char>:
		}
	}
}

void er_oled_char(unsigned char x, unsigned char y, char acsii, char size, char mode, uint8_t* buffer)
{
 8002554:	b590      	push	{r4, r7, lr}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	4604      	mov	r4, r0
 800255c:	4608      	mov	r0, r1
 800255e:	4611      	mov	r1, r2
 8002560:	461a      	mov	r2, r3
 8002562:	4623      	mov	r3, r4
 8002564:	71fb      	strb	r3, [r7, #7]
 8002566:	4603      	mov	r3, r0
 8002568:	71bb      	strb	r3, [r7, #6]
 800256a:	460b      	mov	r3, r1
 800256c:	717b      	strb	r3, [r7, #5]
 800256e:	4613      	mov	r3, r2
 8002570:	713b      	strb	r3, [r7, #4]
    unsigned char i, j, y0=y;
 8002572:	79bb      	ldrb	r3, [r7, #6]
 8002574:	743b      	strb	r3, [r7, #16]
    uint16_t temp;
    uint16_t position = 0x80;
 8002576:	2380      	movs	r3, #128	; 0x80
 8002578:	827b      	strh	r3, [r7, #18]
    uint8_t maxindex = 8;
 800257a:	2308      	movs	r3, #8
 800257c:	747b      	strb	r3, [r7, #17]
    unsigned char ch = acsii - ' ';
 800257e:	797b      	ldrb	r3, [r7, #5]
 8002580:	3b20      	subs	r3, #32
 8002582:	73fb      	strb	r3, [r7, #15]

    if (size == 32){
 8002584:	793b      	ldrb	r3, [r7, #4]
 8002586:	2b20      	cmp	r3, #32
 8002588:	d104      	bne.n	8002594 <er_oled_char+0x40>
    	position = 0x8000;
 800258a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800258e:	827b      	strh	r3, [r7, #18]
    	maxindex =16;
 8002590:	2310      	movs	r3, #16
 8002592:	747b      	strb	r3, [r7, #17]
    }

    for(i = 0;i<size;i++) {
 8002594:	2300      	movs	r3, #0
 8002596:	75fb      	strb	r3, [r7, #23]
 8002598:	e0b1      	b.n	80026fe <er_oled_char+0x1aa>
        if(size == 12)
 800259a:	793b      	ldrb	r3, [r7, #4]
 800259c:	2b0c      	cmp	r3, #12
 800259e:	d11d      	bne.n	80025dc <er_oled_char+0x88>
        {
            if(mode)temp = Font1206[ch][i];
 80025a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00b      	beq.n	80025c0 <er_oled_char+0x6c>
 80025a8:	7bfa      	ldrb	r2, [r7, #15]
 80025aa:	7df9      	ldrb	r1, [r7, #23]
 80025ac:	4858      	ldr	r0, [pc, #352]	; (8002710 <er_oled_char+0x1bc>)
 80025ae:	4613      	mov	r3, r2
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	4413      	add	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4403      	add	r3, r0
 80025b8:	440b      	add	r3, r1
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	82bb      	strh	r3, [r7, #20]
 80025be:	e06c      	b.n	800269a <er_oled_char+0x146>
            else temp = ~Font1206[ch][i];
 80025c0:	7bfa      	ldrb	r2, [r7, #15]
 80025c2:	7df9      	ldrb	r1, [r7, #23]
 80025c4:	4852      	ldr	r0, [pc, #328]	; (8002710 <er_oled_char+0x1bc>)
 80025c6:	4613      	mov	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4403      	add	r3, r0
 80025d0:	440b      	add	r3, r1
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	82bb      	strh	r3, [r7, #20]
 80025da:	e05e      	b.n	800269a <er_oled_char+0x146>
        }
        else if(size == 16)
 80025dc:	793b      	ldrb	r3, [r7, #4]
 80025de:	2b10      	cmp	r3, #16
 80025e0:	d117      	bne.n	8002612 <er_oled_char+0xbe>
        {
            if(mode)temp = Font1608[ch][i];
 80025e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d008      	beq.n	80025fc <er_oled_char+0xa8>
 80025ea:	7bfa      	ldrb	r2, [r7, #15]
 80025ec:	7dfb      	ldrb	r3, [r7, #23]
 80025ee:	4949      	ldr	r1, [pc, #292]	; (8002714 <er_oled_char+0x1c0>)
 80025f0:	0112      	lsls	r2, r2, #4
 80025f2:	440a      	add	r2, r1
 80025f4:	4413      	add	r3, r2
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	82bb      	strh	r3, [r7, #20]
 80025fa:	e04e      	b.n	800269a <er_oled_char+0x146>
            else temp = ~Font1608[ch][i];
 80025fc:	7bfa      	ldrb	r2, [r7, #15]
 80025fe:	7dfb      	ldrb	r3, [r7, #23]
 8002600:	4944      	ldr	r1, [pc, #272]	; (8002714 <er_oled_char+0x1c0>)
 8002602:	0112      	lsls	r2, r2, #4
 8002604:	440a      	add	r2, r1
 8002606:	4413      	add	r3, r2
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	b29b      	uxth	r3, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	82bb      	strh	r3, [r7, #20]
 8002610:	e043      	b.n	800269a <er_oled_char+0x146>
        }
        else {
            if(mode) {
 8002612:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002616:	2b00      	cmp	r3, #0
 8002618:	d01c      	beq.n	8002654 <er_oled_char+0x100>
            	temp = Font3216[ch - 16][2*i] << 8;
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	f1a3 0210 	sub.w	r2, r3, #16
 8002620:	7dfb      	ldrb	r3, [r7, #23]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	493c      	ldr	r1, [pc, #240]	; (8002718 <er_oled_char+0x1c4>)
 8002626:	0192      	lsls	r2, r2, #6
 8002628:	440a      	add	r2, r1
 800262a:	4413      	add	r3, r2
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	b29b      	uxth	r3, r3
 8002630:	021b      	lsls	r3, r3, #8
 8002632:	82bb      	strh	r3, [r7, #20]
                temp |= Font3216[ch-16][2*i + 1];
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	f1a3 0210 	sub.w	r2, r3, #16
 800263a:	7dfb      	ldrb	r3, [r7, #23]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	3301      	adds	r3, #1
 8002640:	4935      	ldr	r1, [pc, #212]	; (8002718 <er_oled_char+0x1c4>)
 8002642:	0192      	lsls	r2, r2, #6
 8002644:	440a      	add	r2, r1
 8002646:	4413      	add	r3, r2
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	b29a      	uxth	r2, r3
 800264c:	8abb      	ldrh	r3, [r7, #20]
 800264e:	4313      	orrs	r3, r2
 8002650:	82bb      	strh	r3, [r7, #20]
 8002652:	e022      	b.n	800269a <er_oled_char+0x146>
            }
            else {
            	temp = ~Font3216[ch - 16][2*i] << 8;
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	f1a3 0210 	sub.w	r2, r3, #16
 800265a:	7dfb      	ldrb	r3, [r7, #23]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	492e      	ldr	r1, [pc, #184]	; (8002718 <er_oled_char+0x1c4>)
 8002660:	0192      	lsls	r2, r2, #6
 8002662:	440a      	add	r2, r1
 8002664:	4413      	add	r3, r2
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	b29b      	uxth	r3, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	b29b      	uxth	r3, r3
 800266e:	021b      	lsls	r3, r3, #8
 8002670:	82bb      	strh	r3, [r7, #20]
            	temp |= ~Font3216[ch - 16][2*i + 1];
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	f1a3 0210 	sub.w	r2, r3, #16
 8002678:	7dfb      	ldrb	r3, [r7, #23]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	3301      	adds	r3, #1
 800267e:	4926      	ldr	r1, [pc, #152]	; (8002718 <er_oled_char+0x1c4>)
 8002680:	0192      	lsls	r2, r2, #6
 8002682:	440a      	add	r2, r1
 8002684:	4413      	add	r3, r2
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	b29b      	uxth	r3, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	b29b      	uxth	r3, r3
 800268e:	b21a      	sxth	r2, r3
 8002690:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002694:	4313      	orrs	r3, r2
 8002696:	b21b      	sxth	r3, r3
 8002698:	82bb      	strh	r3, [r7, #20]
            }
        }
        for(j =0;j<maxindex;j++)
 800269a:	2300      	movs	r3, #0
 800269c:	75bb      	strb	r3, [r7, #22]
 800269e:	e027      	b.n	80026f0 <er_oled_char+0x19c>
        {
            if(temp & position) er_oled_pixel(x, y, 1, buffer);
 80026a0:	8aba      	ldrh	r2, [r7, #20]
 80026a2:	8a7b      	ldrh	r3, [r7, #18]
 80026a4:	4013      	ands	r3, r2
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d006      	beq.n	80026ba <er_oled_char+0x166>
 80026ac:	79f8      	ldrb	r0, [r7, #7]
 80026ae:	79b9      	ldrb	r1, [r7, #6]
 80026b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b2:	2201      	movs	r2, #1
 80026b4:	f7ff fedb 	bl	800246e <er_oled_pixel>
 80026b8:	e005      	b.n	80026c6 <er_oled_char+0x172>
            else er_oled_pixel(x, y, 0, buffer);
 80026ba:	79f8      	ldrb	r0, [r7, #7]
 80026bc:	79b9      	ldrb	r1, [r7, #6]
 80026be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c0:	2200      	movs	r2, #0
 80026c2:	f7ff fed4 	bl	800246e <er_oled_pixel>
            temp <<= 1;
 80026c6:	8abb      	ldrh	r3, [r7, #20]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	82bb      	strh	r3, [r7, #20]
            y++;
 80026cc:	79bb      	ldrb	r3, [r7, #6]
 80026ce:	3301      	adds	r3, #1
 80026d0:	71bb      	strb	r3, [r7, #6]
            if((y-y0) == size)
 80026d2:	79ba      	ldrb	r2, [r7, #6]
 80026d4:	7c3b      	ldrb	r3, [r7, #16]
 80026d6:	1ad2      	subs	r2, r2, r3
 80026d8:	793b      	ldrb	r3, [r7, #4]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d105      	bne.n	80026ea <er_oled_char+0x196>
            {
                y = y0;
 80026de:	7c3b      	ldrb	r3, [r7, #16]
 80026e0:	71bb      	strb	r3, [r7, #6]
                x++;
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	3301      	adds	r3, #1
 80026e6:	71fb      	strb	r3, [r7, #7]
                break;
 80026e8:	e006      	b.n	80026f8 <er_oled_char+0x1a4>
        for(j =0;j<maxindex;j++)
 80026ea:	7dbb      	ldrb	r3, [r7, #22]
 80026ec:	3301      	adds	r3, #1
 80026ee:	75bb      	strb	r3, [r7, #22]
 80026f0:	7dba      	ldrb	r2, [r7, #22]
 80026f2:	7c7b      	ldrb	r3, [r7, #17]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d3d3      	bcc.n	80026a0 <er_oled_char+0x14c>
    for(i = 0;i<size;i++) {
 80026f8:	7dfb      	ldrb	r3, [r7, #23]
 80026fa:	3301      	adds	r3, #1
 80026fc:	75fb      	strb	r3, [r7, #23]
 80026fe:	7dfa      	ldrb	r2, [r7, #23]
 8002700:	793b      	ldrb	r3, [r7, #4]
 8002702:	429a      	cmp	r2, r3
 8002704:	f4ff af49 	bcc.w	800259a <er_oled_char+0x46>
            }
        }
    }
}
 8002708:	bf00      	nop
 800270a:	371c      	adds	r7, #28
 800270c:	46bd      	mov	sp, r7
 800270e:	bd90      	pop	{r4, r7, pc}
 8002710:	08018154 	.word	0x08018154
 8002714:	080185c8 	.word	0x080185c8
 8002718:	08018bb8 	.word	0x08018bb8

0800271c <er_oled_string>:

void er_oled_string(uint8_t x, uint8_t y, const char *pString, uint8_t Size, uint8_t Mode, uint8_t* buffer)
{
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	b085      	sub	sp, #20
 8002720:	af02      	add	r7, sp, #8
 8002722:	603a      	str	r2, [r7, #0]
 8002724:	461a      	mov	r2, r3
 8002726:	4603      	mov	r3, r0
 8002728:	71fb      	strb	r3, [r7, #7]
 800272a:	460b      	mov	r3, r1
 800272c:	71bb      	strb	r3, [r7, #6]
 800272e:	4613      	mov	r3, r2
 8002730:	717b      	strb	r3, [r7, #5]
    while (*pString != '\0') {
 8002732:	e02c      	b.n	800278e <er_oled_string+0x72>
        if (x > (WIDTH - Size / 2)) {
 8002734:	79fa      	ldrb	r2, [r7, #7]
 8002736:	797b      	ldrb	r3, [r7, #5]
 8002738:	085b      	lsrs	r3, r3, #1
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f1c3 0348 	rsb	r3, r3, #72	; 0x48
 8002740:	429a      	cmp	r2, r3
 8002742:	dd0f      	ble.n	8002764 <er_oled_string+0x48>
            x = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	71fb      	strb	r3, [r7, #7]
            y += Size;
 8002748:	79ba      	ldrb	r2, [r7, #6]
 800274a:	797b      	ldrb	r3, [r7, #5]
 800274c:	4413      	add	r3, r2
 800274e:	71bb      	strb	r3, [r7, #6]
            if (y > (HEIGHT - Size)) {
 8002750:	79ba      	ldrb	r2, [r7, #6]
 8002752:	797b      	ldrb	r3, [r7, #5]
 8002754:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8002758:	429a      	cmp	r2, r3
 800275a:	dd03      	ble.n	8002764 <er_oled_string+0x48>
                y = x = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	71fb      	strb	r3, [r7, #7]
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	71bb      	strb	r3, [r7, #6]
            }
        }

        er_oled_char(x, y, *pString, Size, Mode, buffer);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	781a      	ldrb	r2, [r3, #0]
 8002768:	797c      	ldrb	r4, [r7, #5]
 800276a:	79b9      	ldrb	r1, [r7, #6]
 800276c:	79f8      	ldrb	r0, [r7, #7]
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	9301      	str	r3, [sp, #4]
 8002772:	7e3b      	ldrb	r3, [r7, #24]
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	4623      	mov	r3, r4
 8002778:	f7ff feec 	bl	8002554 <er_oled_char>
        x += Size / 2;
 800277c:	797b      	ldrb	r3, [r7, #5]
 800277e:	085b      	lsrs	r3, r3, #1
 8002780:	b2da      	uxtb	r2, r3
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	4413      	add	r3, r2
 8002786:	71fb      	strb	r3, [r7, #7]
        pString++;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	3301      	adds	r3, #1
 800278c:	603b      	str	r3, [r7, #0]
    while (*pString != '\0') {
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1ce      	bne.n	8002734 <er_oled_string+0x18>
    }
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bd90      	pop	{r4, r7, pc}

0800279e <er_oled_display>:
		}
	}
}

void er_oled_display(uint8_t* pBuf)
{    uint8_t page,i;
 800279e:	b580      	push	{r7, lr}
 80027a0:	b084      	sub	sp, #16
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
    for (page = 0; page < PAGES; page++) {
 80027a6:	2300      	movs	r3, #0
 80027a8:	73fb      	strb	r3, [r7, #15]
 80027aa:	e029      	b.n	8002800 <er_oled_display+0x62>
        command(0xB0 + page);/* set page address */
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	3b50      	subs	r3, #80	; 0x50
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2100      	movs	r1, #0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fdbb 	bl	8002330 <I2C_Write_Byte>
        command(0x0c);   /* set low column address */
 80027ba:	2100      	movs	r1, #0
 80027bc:	200c      	movs	r0, #12
 80027be:	f7ff fdb7 	bl	8002330 <I2C_Write_Byte>
        command(0x11);  /* set high column address */
 80027c2:	2100      	movs	r1, #0
 80027c4:	2011      	movs	r0, #17
 80027c6:	f7ff fdb3 	bl	8002330 <I2C_Write_Byte>
        for(i = 0; i< WIDTH; i++ ) {
 80027ca:	2300      	movs	r3, #0
 80027cc:	73bb      	strb	r3, [r7, #14]
 80027ce:	e011      	b.n	80027f4 <er_oled_display+0x56>
          data(pBuf[i+page*WIDTH]);// write data one
 80027d0:	7bb9      	ldrb	r1, [r7, #14]
 80027d2:	7bfa      	ldrb	r2, [r7, #15]
 80027d4:	4613      	mov	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	4413      	add	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	440b      	add	r3, r1
 80027de:	461a      	mov	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4413      	add	r3, r2
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2140      	movs	r1, #64	; 0x40
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff fda1 	bl	8002330 <I2C_Write_Byte>
        for(i = 0; i< WIDTH; i++ ) {
 80027ee:	7bbb      	ldrb	r3, [r7, #14]
 80027f0:	3301      	adds	r3, #1
 80027f2:	73bb      	strb	r3, [r7, #14]
 80027f4:	7bbb      	ldrb	r3, [r7, #14]
 80027f6:	2b47      	cmp	r3, #71	; 0x47
 80027f8:	d9ea      	bls.n	80027d0 <er_oled_display+0x32>
    for (page = 0; page < PAGES; page++) {
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
 80027fc:	3301      	adds	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
 8002800:	7bfb      	ldrb	r3, [r7, #15]
 8002802:	2b04      	cmp	r3, #4
 8002804:	d9d2      	bls.n	80027ac <er_oled_display+0xe>
        }
    }
}
 8002806:	bf00      	nop
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <LL_EXTI_EnableIT_0_31>:
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <LL_EXTI_EnableIT_0_31+0x24>)
 800282e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002832:	4905      	ldr	r1, [pc, #20]	; (8002848 <LL_EXTI_EnableIT_0_31+0x24>)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	58000800 	.word	0x58000800

0800284c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4904      	ldr	r1, [pc, #16]	; (800286c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4313      	orrs	r3, r2
 800285e:	600b      	str	r3, [r1, #0]
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	58000800 	.word	0x58000800

08002870 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002876:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <ReadRtcSsrValue+0x3c>)
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	b29b      	uxth	r3, r3
 800287c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800287e:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <ReadRtcSsrValue+0x3c>)
 8002880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002882:	b29b      	uxth	r3, r3
 8002884:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002886:	e005      	b.n	8002894 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800288c:	4b07      	ldr	r3, [pc, #28]	; (80028ac <ReadRtcSsrValue+0x3c>)
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	b29b      	uxth	r3, r3
 8002892:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d1f5      	bne.n	8002888 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800289c:	683b      	ldr	r3, [r7, #0]
}
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40002800 	.word	0x40002800

080028b0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	460a      	mov	r2, r1
 80028ba:	71fb      	strb	r3, [r7, #7]
 80028bc:	4613      	mov	r3, r2
 80028be:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80028c0:	79ba      	ldrb	r2, [r7, #6]
 80028c2:	491d      	ldr	r1, [pc, #116]	; (8002938 <LinkTimerAfter+0x88>)
 80028c4:	4613      	mov	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	4413      	add	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	440b      	add	r3, r1
 80028ce:	3315      	adds	r3, #21
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	2b06      	cmp	r3, #6
 80028d8:	d009      	beq.n	80028ee <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80028da:	7bfa      	ldrb	r2, [r7, #15]
 80028dc:	4916      	ldr	r1, [pc, #88]	; (8002938 <LinkTimerAfter+0x88>)
 80028de:	4613      	mov	r3, r2
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	4413      	add	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	440b      	add	r3, r1
 80028e8:	3314      	adds	r3, #20
 80028ea:	79fa      	ldrb	r2, [r7, #7]
 80028ec:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80028ee:	79fa      	ldrb	r2, [r7, #7]
 80028f0:	4911      	ldr	r1, [pc, #68]	; (8002938 <LinkTimerAfter+0x88>)
 80028f2:	4613      	mov	r3, r2
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	4413      	add	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	440b      	add	r3, r1
 80028fc:	3315      	adds	r3, #21
 80028fe:	7bfa      	ldrb	r2, [r7, #15]
 8002900:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002902:	79fa      	ldrb	r2, [r7, #7]
 8002904:	490c      	ldr	r1, [pc, #48]	; (8002938 <LinkTimerAfter+0x88>)
 8002906:	4613      	mov	r3, r2
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	4413      	add	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	440b      	add	r3, r1
 8002910:	3314      	adds	r3, #20
 8002912:	79ba      	ldrb	r2, [r7, #6]
 8002914:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002916:	79ba      	ldrb	r2, [r7, #6]
 8002918:	4907      	ldr	r1, [pc, #28]	; (8002938 <LinkTimerAfter+0x88>)
 800291a:	4613      	mov	r3, r2
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	4413      	add	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	440b      	add	r3, r1
 8002924:	3315      	adds	r3, #21
 8002926:	79fa      	ldrb	r2, [r7, #7]
 8002928:	701a      	strb	r2, [r3, #0]

  return;
 800292a:	bf00      	nop
}
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	20000280 	.word	0x20000280

0800293c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	460a      	mov	r2, r1
 8002946:	71fb      	strb	r3, [r7, #7]
 8002948:	4613      	mov	r3, r2
 800294a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 800294c:	4b29      	ldr	r3, [pc, #164]	; (80029f4 <LinkTimerBefore+0xb8>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	79ba      	ldrb	r2, [r7, #6]
 8002954:	429a      	cmp	r2, r3
 8002956:	d032      	beq.n	80029be <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002958:	79ba      	ldrb	r2, [r7, #6]
 800295a:	4927      	ldr	r1, [pc, #156]	; (80029f8 <LinkTimerBefore+0xbc>)
 800295c:	4613      	mov	r3, r2
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	4413      	add	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	440b      	add	r3, r1
 8002966:	3314      	adds	r3, #20
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 800296c:	7bfa      	ldrb	r2, [r7, #15]
 800296e:	4922      	ldr	r1, [pc, #136]	; (80029f8 <LinkTimerBefore+0xbc>)
 8002970:	4613      	mov	r3, r2
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	4413      	add	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	440b      	add	r3, r1
 800297a:	3315      	adds	r3, #21
 800297c:	79fa      	ldrb	r2, [r7, #7]
 800297e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002980:	79fa      	ldrb	r2, [r7, #7]
 8002982:	491d      	ldr	r1, [pc, #116]	; (80029f8 <LinkTimerBefore+0xbc>)
 8002984:	4613      	mov	r3, r2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4413      	add	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	440b      	add	r3, r1
 800298e:	3315      	adds	r3, #21
 8002990:	79ba      	ldrb	r2, [r7, #6]
 8002992:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002994:	79fa      	ldrb	r2, [r7, #7]
 8002996:	4918      	ldr	r1, [pc, #96]	; (80029f8 <LinkTimerBefore+0xbc>)
 8002998:	4613      	mov	r3, r2
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	4413      	add	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	440b      	add	r3, r1
 80029a2:	3314      	adds	r3, #20
 80029a4:	7bfa      	ldrb	r2, [r7, #15]
 80029a6:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80029a8:	79ba      	ldrb	r2, [r7, #6]
 80029aa:	4913      	ldr	r1, [pc, #76]	; (80029f8 <LinkTimerBefore+0xbc>)
 80029ac:	4613      	mov	r3, r2
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4413      	add	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	440b      	add	r3, r1
 80029b6:	3314      	adds	r3, #20
 80029b8:	79fa      	ldrb	r2, [r7, #7]
 80029ba:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80029bc:	e014      	b.n	80029e8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80029be:	79fa      	ldrb	r2, [r7, #7]
 80029c0:	490d      	ldr	r1, [pc, #52]	; (80029f8 <LinkTimerBefore+0xbc>)
 80029c2:	4613      	mov	r3, r2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	4413      	add	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	440b      	add	r3, r1
 80029cc:	3315      	adds	r3, #21
 80029ce:	79ba      	ldrb	r2, [r7, #6]
 80029d0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80029d2:	79ba      	ldrb	r2, [r7, #6]
 80029d4:	4908      	ldr	r1, [pc, #32]	; (80029f8 <LinkTimerBefore+0xbc>)
 80029d6:	4613      	mov	r3, r2
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	4413      	add	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	440b      	add	r3, r1
 80029e0:	3314      	adds	r3, #20
 80029e2:	79fa      	ldrb	r2, [r7, #7]
 80029e4:	701a      	strb	r2, [r3, #0]
  return;
 80029e6:	bf00      	nop
}
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	20000310 	.word	0x20000310
 80029f8:	20000280 	.word	0x20000280

080029fc <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002a06:	4b4e      	ldr	r3, [pc, #312]	; (8002b40 <linkTimer+0x144>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b06      	cmp	r3, #6
 8002a0e:	d118      	bne.n	8002a42 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002a10:	4b4b      	ldr	r3, [pc, #300]	; (8002b40 <linkTimer+0x144>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	4b4b      	ldr	r3, [pc, #300]	; (8002b44 <linkTimer+0x148>)
 8002a18:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002a1a:	4a49      	ldr	r2, [pc, #292]	; (8002b40 <linkTimer+0x144>)
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002a20:	79fa      	ldrb	r2, [r7, #7]
 8002a22:	4949      	ldr	r1, [pc, #292]	; (8002b48 <linkTimer+0x14c>)
 8002a24:	4613      	mov	r3, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4413      	add	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	440b      	add	r3, r1
 8002a2e:	3315      	adds	r3, #21
 8002a30:	2206      	movs	r2, #6
 8002a32:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002a34:	4b45      	ldr	r3, [pc, #276]	; (8002b4c <linkTimer+0x150>)
 8002a36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a3a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	81fb      	strh	r3, [r7, #14]
 8002a40:	e078      	b.n	8002b34 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002a42:	f000 f909 	bl	8002c58 <ReturnTimeElapsed>
 8002a46:	4603      	mov	r3, r0
 8002a48:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002a4a:	79fa      	ldrb	r2, [r7, #7]
 8002a4c:	493e      	ldr	r1, [pc, #248]	; (8002b48 <linkTimer+0x14c>)
 8002a4e:	4613      	mov	r3, r2
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	4413      	add	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	440b      	add	r3, r1
 8002a58:	3308      	adds	r3, #8
 8002a5a:	6819      	ldr	r1, [r3, #0]
 8002a5c:	89fb      	ldrh	r3, [r7, #14]
 8002a5e:	79fa      	ldrb	r2, [r7, #7]
 8002a60:	4419      	add	r1, r3
 8002a62:	4839      	ldr	r0, [pc, #228]	; (8002b48 <linkTimer+0x14c>)
 8002a64:	4613      	mov	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4413      	add	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	4403      	add	r3, r0
 8002a6e:	3308      	adds	r3, #8
 8002a70:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002a72:	79fa      	ldrb	r2, [r7, #7]
 8002a74:	4934      	ldr	r1, [pc, #208]	; (8002b48 <linkTimer+0x14c>)
 8002a76:	4613      	mov	r3, r2
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	4413      	add	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	440b      	add	r3, r1
 8002a80:	3308      	adds	r3, #8
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002a86:	4b2e      	ldr	r3, [pc, #184]	; (8002b40 <linkTimer+0x144>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4a2e      	ldr	r2, [pc, #184]	; (8002b48 <linkTimer+0x14c>)
 8002a90:	460b      	mov	r3, r1
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	440b      	add	r3, r1
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	4413      	add	r3, r2
 8002a9a:	3308      	adds	r3, #8
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d337      	bcc.n	8002b14 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002aa4:	4b26      	ldr	r3, [pc, #152]	; (8002b40 <linkTimer+0x144>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002aaa:	7b7a      	ldrb	r2, [r7, #13]
 8002aac:	4926      	ldr	r1, [pc, #152]	; (8002b48 <linkTimer+0x14c>)
 8002aae:	4613      	mov	r3, r2
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	4413      	add	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	440b      	add	r3, r1
 8002ab8:	3315      	adds	r3, #21
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002abe:	e013      	b.n	8002ae8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002ac0:	7b7a      	ldrb	r2, [r7, #13]
 8002ac2:	4921      	ldr	r1, [pc, #132]	; (8002b48 <linkTimer+0x14c>)
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	4413      	add	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	440b      	add	r3, r1
 8002ace:	3315      	adds	r3, #21
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002ad4:	7b7a      	ldrb	r2, [r7, #13]
 8002ad6:	491c      	ldr	r1, [pc, #112]	; (8002b48 <linkTimer+0x14c>)
 8002ad8:	4613      	mov	r3, r2
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	4413      	add	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	440b      	add	r3, r1
 8002ae2:	3315      	adds	r3, #21
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002ae8:	7b3b      	ldrb	r3, [r7, #12]
 8002aea:	2b06      	cmp	r3, #6
 8002aec:	d00b      	beq.n	8002b06 <linkTimer+0x10a>
 8002aee:	7b3a      	ldrb	r2, [r7, #12]
 8002af0:	4915      	ldr	r1, [pc, #84]	; (8002b48 <linkTimer+0x14c>)
 8002af2:	4613      	mov	r3, r2
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	4413      	add	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	440b      	add	r3, r1
 8002afc:	3308      	adds	r3, #8
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d2dc      	bcs.n	8002ac0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8002b06:	7b7a      	ldrb	r2, [r7, #13]
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff fecf 	bl	80028b0 <LinkTimerAfter>
 8002b12:	e00f      	b.n	8002b34 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002b14:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <linkTimer+0x144>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	4611      	mov	r1, r2
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff ff0c 	bl	800293c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002b24:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <linkTimer+0x144>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <linkTimer+0x148>)
 8002b2c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002b2e:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <linkTimer+0x144>)
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002b34:	89fb      	ldrh	r3, [r7, #14]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000310 	.word	0x20000310
 8002b44:	20000311 	.word	0x20000311
 8002b48:	20000280 	.word	0x20000280
 8002b4c:	20000314 	.word	0x20000314

08002b50 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	460a      	mov	r2, r1
 8002b5a:	71fb      	strb	r3, [r7, #7]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002b60:	4b39      	ldr	r3, [pc, #228]	; (8002c48 <UnlinkTimer+0xf8>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	79fa      	ldrb	r2, [r7, #7]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d111      	bne.n	8002b90 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002b6c:	4b36      	ldr	r3, [pc, #216]	; (8002c48 <UnlinkTimer+0xf8>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	4b36      	ldr	r3, [pc, #216]	; (8002c4c <UnlinkTimer+0xfc>)
 8002b74:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002b76:	79fa      	ldrb	r2, [r7, #7]
 8002b78:	4935      	ldr	r1, [pc, #212]	; (8002c50 <UnlinkTimer+0x100>)
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	4413      	add	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	440b      	add	r3, r1
 8002b84:	3315      	adds	r3, #21
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	4b2f      	ldr	r3, [pc, #188]	; (8002c48 <UnlinkTimer+0xf8>)
 8002b8c:	701a      	strb	r2, [r3, #0]
 8002b8e:	e03e      	b.n	8002c0e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002b90:	79fa      	ldrb	r2, [r7, #7]
 8002b92:	492f      	ldr	r1, [pc, #188]	; (8002c50 <UnlinkTimer+0x100>)
 8002b94:	4613      	mov	r3, r2
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	4413      	add	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	440b      	add	r3, r1
 8002b9e:	3314      	adds	r3, #20
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002ba4:	79fa      	ldrb	r2, [r7, #7]
 8002ba6:	492a      	ldr	r1, [pc, #168]	; (8002c50 <UnlinkTimer+0x100>)
 8002ba8:	4613      	mov	r3, r2
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	4413      	add	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	440b      	add	r3, r1
 8002bb2:	3315      	adds	r3, #21
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002bb8:	79f9      	ldrb	r1, [r7, #7]
 8002bba:	7bfa      	ldrb	r2, [r7, #15]
 8002bbc:	4824      	ldr	r0, [pc, #144]	; (8002c50 <UnlinkTimer+0x100>)
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	440b      	add	r3, r1
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4403      	add	r3, r0
 8002bc8:	3315      	adds	r3, #21
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	b2d8      	uxtb	r0, r3
 8002bce:	4920      	ldr	r1, [pc, #128]	; (8002c50 <UnlinkTimer+0x100>)
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4413      	add	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	440b      	add	r3, r1
 8002bda:	3315      	adds	r3, #21
 8002bdc:	4602      	mov	r2, r0
 8002bde:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002be0:	7bbb      	ldrb	r3, [r7, #14]
 8002be2:	2b06      	cmp	r3, #6
 8002be4:	d013      	beq.n	8002c0e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002be6:	79f9      	ldrb	r1, [r7, #7]
 8002be8:	7bba      	ldrb	r2, [r7, #14]
 8002bea:	4819      	ldr	r0, [pc, #100]	; (8002c50 <UnlinkTimer+0x100>)
 8002bec:	460b      	mov	r3, r1
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	440b      	add	r3, r1
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4403      	add	r3, r0
 8002bf6:	3314      	adds	r3, #20
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	b2d8      	uxtb	r0, r3
 8002bfc:	4914      	ldr	r1, [pc, #80]	; (8002c50 <UnlinkTimer+0x100>)
 8002bfe:	4613      	mov	r3, r2
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	4413      	add	r3, r2
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	440b      	add	r3, r1
 8002c08:	3314      	adds	r3, #20
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002c0e:	79fa      	ldrb	r2, [r7, #7]
 8002c10:	490f      	ldr	r1, [pc, #60]	; (8002c50 <UnlinkTimer+0x100>)
 8002c12:	4613      	mov	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4413      	add	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	440b      	add	r3, r1
 8002c1c:	330c      	adds	r3, #12
 8002c1e:	2201      	movs	r2, #1
 8002c20:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <UnlinkTimer+0xf8>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b06      	cmp	r3, #6
 8002c2a:	d107      	bne.n	8002c3c <UnlinkTimer+0xec>
 8002c2c:	79bb      	ldrb	r3, [r7, #6]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d104      	bne.n	8002c3c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002c32:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <UnlinkTimer+0x104>)
 8002c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c38:	601a      	str	r2, [r3, #0]
  }

  return;
 8002c3a:	bf00      	nop
 8002c3c:	bf00      	nop
}
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	20000310 	.word	0x20000310
 8002c4c:	20000311 	.word	0x20000311
 8002c50:	20000280 	.word	0x20000280
 8002c54:	20000314 	.word	0x20000314

08002c58 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002c5e:	4b1a      	ldr	r3, [pc, #104]	; (8002cc8 <ReturnTimeElapsed+0x70>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c66:	d026      	beq.n	8002cb6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002c68:	f7ff fe02 	bl	8002870 <ReadRtcSsrValue>
 8002c6c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002c6e:	4b16      	ldr	r3, [pc, #88]	; (8002cc8 <ReturnTimeElapsed+0x70>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d805      	bhi.n	8002c84 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002c78:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <ReturnTimeElapsed+0x70>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	607b      	str	r3, [r7, #4]
 8002c82:	e00a      	b.n	8002c9a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002c84:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <ReturnTimeElapsed+0x74>)
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002c90:	4b0d      	ldr	r3, [pc, #52]	; (8002cc8 <ReturnTimeElapsed+0x70>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	4413      	add	r3, r2
 8002c98:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002c9a:	4b0d      	ldr	r3, [pc, #52]	; (8002cd0 <ReturnTimeElapsed+0x78>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	fb02 f303 	mul.w	r3, r2, r3
 8002ca6:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002ca8:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <ReturnTimeElapsed+0x7c>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	461a      	mov	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	40d3      	lsrs	r3, r2
 8002cb2:	607b      	str	r3, [r7, #4]
 8002cb4:	e001      	b.n	8002cba <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	b29b      	uxth	r3, r3
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20000314 	.word	0x20000314
 8002ccc:	2000039e 	.word	0x2000039e
 8002cd0:	2000039d 	.word	0x2000039d
 8002cd4:	2000039c 	.word	0x2000039c

08002cd8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d108      	bne.n	8002cfa <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002ce8:	f7ff fdc2 	bl	8002870 <ReadRtcSsrValue>
 8002cec:	4602      	mov	r2, r0
 8002cee:	4b24      	ldr	r3, [pc, #144]	; (8002d80 <RestartWakeupCounter+0xa8>)
 8002cf0:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002cf2:	2003      	movs	r0, #3
 8002cf4:	f004 fbc6 	bl	8007484 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002cf8:	e03e      	b.n	8002d78 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002cfa:	88fb      	ldrh	r3, [r7, #6]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d803      	bhi.n	8002d08 <RestartWakeupCounter+0x30>
 8002d00:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <RestartWakeupCounter+0xac>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d002      	beq.n	8002d0e <RestartWakeupCounter+0x36>
      Value -= 1;
 8002d08:	88fb      	ldrh	r3, [r7, #6]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8002d0e:	bf00      	nop
 8002d10:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <RestartWakeupCounter+0xb0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f7      	beq.n	8002d10 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002d20:	4b19      	ldr	r3, [pc, #100]	; (8002d88 <RestartWakeupCounter+0xb0>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	4b17      	ldr	r3, [pc, #92]	; (8002d88 <RestartWakeupCounter+0xb0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002d34:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002d36:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <RestartWakeupCounter+0xb4>)
 8002d38:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002d3c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002d3e:	2003      	movs	r0, #3
 8002d40:	f004 fbae 	bl	80074a0 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002d44:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <RestartWakeupCounter+0xb8>)
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	0c1b      	lsrs	r3, r3, #16
 8002d4a:	041b      	lsls	r3, r3, #16
 8002d4c:	88fa      	ldrh	r2, [r7, #6]
 8002d4e:	4910      	ldr	r1, [pc, #64]	; (8002d90 <RestartWakeupCounter+0xb8>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002d54:	f7ff fd8c 	bl	8002870 <ReadRtcSsrValue>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <RestartWakeupCounter+0xa8>)
 8002d5c:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <RestartWakeupCounter+0xb0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	4b08      	ldr	r3, [pc, #32]	; (8002d88 <RestartWakeupCounter+0xb0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d70:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002d72:	f3af 8000 	nop.w
  return ;
 8002d76:	bf00      	nop
}
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000314 	.word	0x20000314
 8002d84:	2000039c 	.word	0x2000039c
 8002d88:	20000398 	.word	0x20000398
 8002d8c:	58000800 	.word	0x58000800
 8002d90:	40002800 	.word	0x40002800

08002d94 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002d9a:	4b47      	ldr	r3, [pc, #284]	; (8002eb8 <RescheduleTimerList+0x124>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002da6:	d108      	bne.n	8002dba <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8002da8:	bf00      	nop
 8002daa:	4b44      	ldr	r3, [pc, #272]	; (8002ebc <RescheduleTimerList+0x128>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f7      	bne.n	8002daa <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8002dba:	4b40      	ldr	r3, [pc, #256]	; (8002ebc <RescheduleTimerList+0x128>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	4b3e      	ldr	r3, [pc, #248]	; (8002ebc <RescheduleTimerList+0x128>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dcc:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002dce:	4b3c      	ldr	r3, [pc, #240]	; (8002ec0 <RescheduleTimerList+0x12c>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002dd4:	7bfa      	ldrb	r2, [r7, #15]
 8002dd6:	493b      	ldr	r1, [pc, #236]	; (8002ec4 <RescheduleTimerList+0x130>)
 8002dd8:	4613      	mov	r3, r2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	4413      	add	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	440b      	add	r3, r1
 8002de2:	3308      	adds	r3, #8
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002de8:	f7ff ff36 	bl	8002c58 <ReturnTimeElapsed>
 8002dec:	4603      	mov	r3, r0
 8002dee:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002df0:	88fb      	ldrh	r3, [r7, #6]
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d205      	bcs.n	8002e04 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002dfc:	4b32      	ldr	r3, [pc, #200]	; (8002ec8 <RescheduleTimerList+0x134>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	701a      	strb	r2, [r3, #0]
 8002e02:	e04d      	b.n	8002ea0 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002e04:	88fb      	ldrh	r3, [r7, #6]
 8002e06:	4a31      	ldr	r2, [pc, #196]	; (8002ecc <RescheduleTimerList+0x138>)
 8002e08:	8812      	ldrh	r2, [r2, #0]
 8002e0a:	b292      	uxth	r2, r2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	461a      	mov	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d906      	bls.n	8002e24 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002e16:	4b2d      	ldr	r3, [pc, #180]	; (8002ecc <RescheduleTimerList+0x138>)
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002e1c:	4b2a      	ldr	r3, [pc, #168]	; (8002ec8 <RescheduleTimerList+0x134>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	701a      	strb	r2, [r3, #0]
 8002e22:	e03d      	b.n	8002ea0 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002e2e:	4b26      	ldr	r3, [pc, #152]	; (8002ec8 <RescheduleTimerList+0x134>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002e34:	e034      	b.n	8002ea0 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002e36:	7bfa      	ldrb	r2, [r7, #15]
 8002e38:	4922      	ldr	r1, [pc, #136]	; (8002ec4 <RescheduleTimerList+0x130>)
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	4413      	add	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	440b      	add	r3, r1
 8002e44:	3308      	adds	r3, #8
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	88fb      	ldrh	r3, [r7, #6]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d20a      	bcs.n	8002e64 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002e4e:	7bfa      	ldrb	r2, [r7, #15]
 8002e50:	491c      	ldr	r1, [pc, #112]	; (8002ec4 <RescheduleTimerList+0x130>)
 8002e52:	4613      	mov	r3, r2
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	4413      	add	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	440b      	add	r3, r1
 8002e5c:	3308      	adds	r3, #8
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	e013      	b.n	8002e8c <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002e64:	7bfa      	ldrb	r2, [r7, #15]
 8002e66:	4917      	ldr	r1, [pc, #92]	; (8002ec4 <RescheduleTimerList+0x130>)
 8002e68:	4613      	mov	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4413      	add	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	440b      	add	r3, r1
 8002e72:	3308      	adds	r3, #8
 8002e74:	6819      	ldr	r1, [r3, #0]
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	7bfa      	ldrb	r2, [r7, #15]
 8002e7a:	1ac9      	subs	r1, r1, r3
 8002e7c:	4811      	ldr	r0, [pc, #68]	; (8002ec4 <RescheduleTimerList+0x130>)
 8002e7e:	4613      	mov	r3, r2
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	4413      	add	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4403      	add	r3, r0
 8002e88:	3308      	adds	r3, #8
 8002e8a:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8002e8c:	7bfa      	ldrb	r2, [r7, #15]
 8002e8e:	490d      	ldr	r1, [pc, #52]	; (8002ec4 <RescheduleTimerList+0x130>)
 8002e90:	4613      	mov	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4413      	add	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	440b      	add	r3, r1
 8002e9a:	3315      	adds	r3, #21
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	2b06      	cmp	r3, #6
 8002ea4:	d1c7      	bne.n	8002e36 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002ea6:	89bb      	ldrh	r3, [r7, #12]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff ff15 	bl	8002cd8 <RestartWakeupCounter>

  return ;
 8002eae:	bf00      	nop
}
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40002800 	.word	0x40002800
 8002ebc:	20000398 	.word	0x20000398
 8002ec0:	20000310 	.word	0x20000310
 8002ec4:	20000280 	.word	0x20000280
 8002ec8:	20000318 	.word	0x20000318
 8002ecc:	200003a0 	.word	0x200003a0

08002ed0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08a      	sub	sp, #40	; 0x28
 8002ed4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8002eda:	617b      	str	r3, [r7, #20]
  return(result);
 8002edc:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002ee0:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8002ee2:	4b5e      	ldr	r3, [pc, #376]	; (800305c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	22ca      	movs	r2, #202	; 0xca
 8002eea:	625a      	str	r2, [r3, #36]	; 0x24
 8002eec:	4b5b      	ldr	r3, [pc, #364]	; (800305c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2253      	movs	r2, #83	; 0x53
 8002ef4:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8002ef6:	4b59      	ldr	r3, [pc, #356]	; (800305c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	4b57      	ldr	r3, [pc, #348]	; (800305c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f08:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002f0a:	4b55      	ldr	r3, [pc, #340]	; (8003060 <HW_TS_RTC_Wakeup_Handler+0x190>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002f12:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002f16:	4953      	ldr	r1, [pc, #332]	; (8003064 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8002f18:	4613      	mov	r3, r2
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	4413      	add	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	440b      	add	r3, r1
 8002f22:	330c      	adds	r3, #12
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d170      	bne.n	800300e <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002f2c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002f30:	494c      	ldr	r1, [pc, #304]	; (8003064 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8002f32:	4613      	mov	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4413      	add	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	440b      	add	r3, r1
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002f40:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002f44:	4947      	ldr	r1, [pc, #284]	; (8003064 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8002f46:	4613      	mov	r3, r2
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	4413      	add	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	440b      	add	r3, r1
 8002f50:	3310      	adds	r3, #16
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002f56:	4b44      	ldr	r3, [pc, #272]	; (8003068 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d04e      	beq.n	8002ffe <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002f60:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002f64:	493f      	ldr	r1, [pc, #252]	; (8003064 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8002f66:	4613      	mov	r3, r2
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	4413      	add	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	440b      	add	r3, r1
 8002f70:	330d      	adds	r3, #13
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d125      	bne.n	8002fc6 <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002f7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f7e:	2101      	movs	r1, #1
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fde5 	bl	8002b50 <UnlinkTimer>
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002f90:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002f94:	4933      	ldr	r1, [pc, #204]	; (8003064 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8002f96:	4613      	mov	r3, r2
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	4413      	add	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	440b      	add	r3, r1
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fa46 	bl	800343c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8002fb0:	4b2a      	ldr	r3, [pc, #168]	; (800305c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	22ca      	movs	r2, #202	; 0xca
 8002fb8:	625a      	str	r2, [r3, #36]	; 0x24
 8002fba:	4b28      	ldr	r3, [pc, #160]	; (800305c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2253      	movs	r2, #83	; 0x53
 8002fc2:	625a      	str	r2, [r3, #36]	; 0x24
 8002fc4:	e013      	b.n	8002fee <HW_TS_RTC_Wakeup_Handler+0x11e>
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002fd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 f9a7 	bl	8003328 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8002fda:	4b20      	ldr	r3, [pc, #128]	; (800305c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	22ca      	movs	r2, #202	; 0xca
 8002fe2:	625a      	str	r2, [r3, #36]	; 0x24
 8002fe4:	4b1d      	ldr	r3, [pc, #116]	; (800305c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2253      	movs	r2, #83	; 0x53
 8002fec:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002fee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ff2:	69fa      	ldr	r2, [r7, #28]
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	69b8      	ldr	r0, [r7, #24]
 8002ff8:	f000 faa6 	bl	8003548 <HW_TS_RTC_Int_AppNot>
 8002ffc:	e024      	b.n	8003048 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8002ffe:	f7ff fec9 	bl	8002d94 <RescheduleTimerList>
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	60bb      	str	r3, [r7, #8]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	f383 8810 	msr	PRIMASK, r3
 800300c:	e01c      	b.n	8003048 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800300e:	bf00      	nop
 8003010:	4b12      	ldr	r3, [pc, #72]	; (800305c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0f7      	beq.n	8003010 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003020:	4b0e      	ldr	r3, [pc, #56]	; (800305c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	b2da      	uxtb	r2, r3
 800302a:	4b0c      	ldr	r3, [pc, #48]	; (800305c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003034:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003036:	4b0d      	ldr	r3, [pc, #52]	; (800306c <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8003038:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800303c:	60da      	str	r2, [r3, #12]
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	607b      	str	r3, [r7, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003048:	4b04      	ldr	r3, [pc, #16]	; (800305c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	22ff      	movs	r2, #255	; 0xff
 8003050:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8003052:	bf00      	nop
}
 8003054:	3728      	adds	r7, #40	; 0x28
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	20000398 	.word	0x20000398
 8003060:	20000310 	.word	0x20000310
 8003064:	20000280 	.word	0x20000280
 8003068:	20000318 	.word	0x20000318
 800306c:	58000800 	.word	0x58000800

08003070 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	6039      	str	r1, [r7, #0]
 800307a:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 800307c:	4a64      	ldr	r2, [pc, #400]	; (8003210 <HW_TS_Init+0x1a0>)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003082:	4b63      	ldr	r3, [pc, #396]	; (8003210 <HW_TS_Init+0x1a0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	22ca      	movs	r2, #202	; 0xca
 800308a:	625a      	str	r2, [r3, #36]	; 0x24
 800308c:	4b60      	ldr	r3, [pc, #384]	; (8003210 <HW_TS_Init+0x1a0>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2253      	movs	r2, #83	; 0x53
 8003094:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003096:	4b5f      	ldr	r3, [pc, #380]	; (8003214 <HW_TS_Init+0x1a4>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	4a5e      	ldr	r2, [pc, #376]	; (8003214 <HW_TS_Init+0x1a4>)
 800309c:	f043 0320 	orr.w	r3, r3, #32
 80030a0:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80030a2:	4b5c      	ldr	r3, [pc, #368]	; (8003214 <HW_TS_Init+0x1a4>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	f1c3 0304 	rsb	r3, r3, #4
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	4b58      	ldr	r3, [pc, #352]	; (8003218 <HW_TS_Init+0x1a8>)
 80030b6:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80030b8:	4b56      	ldr	r3, [pc, #344]	; (8003214 <HW_TS_Init+0x1a4>)
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80030c0:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80030c4:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	fa92 f2a2 	rbit	r2, r2
 80030cc:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	2a00      	cmp	r2, #0
 80030d6:	d101      	bne.n	80030dc <HW_TS_Init+0x6c>
  {
    return 32U;
 80030d8:	2220      	movs	r2, #32
 80030da:	e003      	b.n	80030e4 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	fab2 f282 	clz	r2, r2
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	40d3      	lsrs	r3, r2
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	3301      	adds	r3, #1
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	4b4b      	ldr	r3, [pc, #300]	; (800321c <HW_TS_Init+0x1ac>)
 80030ee:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80030f0:	4b48      	ldr	r3, [pc, #288]	; (8003214 <HW_TS_Init+0x1a4>)
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	3301      	adds	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	4b47      	ldr	r3, [pc, #284]	; (8003220 <HW_TS_Init+0x1b0>)
 8003102:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8003104:	4b46      	ldr	r3, [pc, #280]	; (8003220 <HW_TS_Init+0x1b0>)
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	3b01      	subs	r3, #1
 800310a:	4a44      	ldr	r2, [pc, #272]	; (800321c <HW_TS_Init+0x1ac>)
 800310c:	7812      	ldrb	r2, [r2, #0]
 800310e:	fb02 f303 	mul.w	r3, r2, r3
 8003112:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003116:	4a40      	ldr	r2, [pc, #256]	; (8003218 <HW_TS_Init+0x1a8>)
 8003118:	7812      	ldrb	r2, [r2, #0]
 800311a:	40d3      	lsrs	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003124:	4293      	cmp	r3, r2
 8003126:	d904      	bls.n	8003132 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8003128:	4b3e      	ldr	r3, [pc, #248]	; (8003224 <HW_TS_Init+0x1b4>)
 800312a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800312e:	801a      	strh	r2, [r3, #0]
 8003130:	e003      	b.n	800313a <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	b29a      	uxth	r2, r3
 8003136:	4b3b      	ldr	r3, [pc, #236]	; (8003224 <HW_TS_Init+0x1b4>)
 8003138:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800313a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800313e:	f7ff fb85 	bl	800284c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003142:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003146:	f7ff fb6d 	bl	8002824 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d143      	bne.n	80031d8 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003150:	4b35      	ldr	r3, [pc, #212]	; (8003228 <HW_TS_Init+0x1b8>)
 8003152:	2201      	movs	r2, #1
 8003154:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003156:	4b35      	ldr	r3, [pc, #212]	; (800322c <HW_TS_Init+0x1bc>)
 8003158:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800315c:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800315e:	2300      	movs	r3, #0
 8003160:	77fb      	strb	r3, [r7, #31]
 8003162:	e00c      	b.n	800317e <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8003164:	7ffa      	ldrb	r2, [r7, #31]
 8003166:	4932      	ldr	r1, [pc, #200]	; (8003230 <HW_TS_Init+0x1c0>)
 8003168:	4613      	mov	r3, r2
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	4413      	add	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	440b      	add	r3, r1
 8003172:	330c      	adds	r3, #12
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003178:	7ffb      	ldrb	r3, [r7, #31]
 800317a:	3301      	adds	r3, #1
 800317c:	77fb      	strb	r3, [r7, #31]
 800317e:	7ffb      	ldrb	r3, [r7, #31]
 8003180:	2b05      	cmp	r3, #5
 8003182:	d9ef      	bls.n	8003164 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8003184:	4b2b      	ldr	r3, [pc, #172]	; (8003234 <HW_TS_Init+0x1c4>)
 8003186:	2206      	movs	r2, #6
 8003188:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800318a:	4b21      	ldr	r3, [pc, #132]	; (8003210 <HW_TS_Init+0x1a0>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	4b1f      	ldr	r3, [pc, #124]	; (8003210 <HW_TS_Init+0x1a0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800319c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800319e:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <HW_TS_Init+0x1a0>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	4b19      	ldr	r3, [pc, #100]	; (8003210 <HW_TS_Init+0x1a0>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80031b2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80031b4:	4b20      	ldr	r3, [pc, #128]	; (8003238 <HW_TS_Init+0x1c8>)
 80031b6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80031ba:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80031bc:	2003      	movs	r0, #3
 80031be:	f004 f96f 	bl	80074a0 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80031c2:	4b13      	ldr	r3, [pc, #76]	; (8003210 <HW_TS_Init+0x1a0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	4b11      	ldr	r3, [pc, #68]	; (8003210 <HW_TS_Init+0x1a0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031d4:	609a      	str	r2, [r3, #8]
 80031d6:	e00a      	b.n	80031ee <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80031d8:	4b0d      	ldr	r3, [pc, #52]	; (8003210 <HW_TS_Init+0x1a0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80031e8:	2003      	movs	r0, #3
 80031ea:	f004 f94b 	bl	8007484 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80031ee:	4b08      	ldr	r3, [pc, #32]	; (8003210 <HW_TS_Init+0x1a0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	22ff      	movs	r2, #255	; 0xff
 80031f6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80031f8:	2200      	movs	r2, #0
 80031fa:	2106      	movs	r1, #6
 80031fc:	2003      	movs	r0, #3
 80031fe:	f004 f90b 	bl	8007418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003202:	2003      	movs	r0, #3
 8003204:	f004 f922 	bl	800744c <HAL_NVIC_EnableIRQ>

  return;
 8003208:	bf00      	nop
}
 800320a:	3720      	adds	r7, #32
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	20000398 	.word	0x20000398
 8003214:	40002800 	.word	0x40002800
 8003218:	2000039c 	.word	0x2000039c
 800321c:	2000039d 	.word	0x2000039d
 8003220:	2000039e 	.word	0x2000039e
 8003224:	200003a0 	.word	0x200003a0
 8003228:	20000318 	.word	0x20000318
 800322c:	20000314 	.word	0x20000314
 8003230:	20000280 	.word	0x20000280
 8003234:	20000310 	.word	0x20000310
 8003238:	58000800 	.word	0x58000800

0800323c <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 800323c:	b480      	push	{r7}
 800323e:	b08b      	sub	sp, #44	; 0x2c
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	4613      	mov	r3, r2
 800324a:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 800324c:	2300      	movs	r3, #0
 800324e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003252:	f3ef 8310 	mrs	r3, PRIMASK
 8003256:	61fb      	str	r3, [r7, #28]
  return(result);
 8003258:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800325a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800325c:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800325e:	e004      	b.n	800326a <HW_TS_Create+0x2e>
  {
    loop++;
 8003260:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003264:	3301      	adds	r3, #1
 8003266:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800326a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800326e:	2b05      	cmp	r3, #5
 8003270:	d80c      	bhi.n	800328c <HW_TS_Create+0x50>
 8003272:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003276:	492b      	ldr	r1, [pc, #172]	; (8003324 <HW_TS_Create+0xe8>)
 8003278:	4613      	mov	r3, r2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	4413      	add	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	440b      	add	r3, r1
 8003282:	330c      	adds	r3, #12
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1e9      	bne.n	8003260 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800328c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003290:	2b06      	cmp	r3, #6
 8003292:	d037      	beq.n	8003304 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8003294:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003298:	4922      	ldr	r1, [pc, #136]	; (8003324 <HW_TS_Create+0xe8>)
 800329a:	4613      	mov	r3, r2
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	4413      	add	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	440b      	add	r3, r1
 80032a4:	330c      	adds	r3, #12
 80032a6:	2201      	movs	r2, #1
 80032a8:	701a      	strb	r2, [r3, #0]
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80032b4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80032b8:	491a      	ldr	r1, [pc, #104]	; (8003324 <HW_TS_Create+0xe8>)
 80032ba:	4613      	mov	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4413      	add	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	440b      	add	r3, r1
 80032c4:	3310      	adds	r3, #16
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80032ca:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80032ce:	4915      	ldr	r1, [pc, #84]	; (8003324 <HW_TS_Create+0xe8>)
 80032d0:	4613      	mov	r3, r2
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	4413      	add	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	440b      	add	r3, r1
 80032da:	330d      	adds	r3, #13
 80032dc:	79fa      	ldrb	r2, [r7, #7]
 80032de:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80032e0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80032e4:	490f      	ldr	r1, [pc, #60]	; (8003324 <HW_TS_Create+0xe8>)
 80032e6:	4613      	mov	r3, r2
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	4413      	add	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	440b      	add	r3, r1
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80032fa:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80032fc:	2300      	movs	r3, #0
 80032fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003302:	e007      	b.n	8003314 <HW_TS_Create+0xd8>
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800330e:	2301      	movs	r3, #1
 8003310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8003314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003318:	4618      	mov	r0, r3
 800331a:	372c      	adds	r7, #44	; 0x2c
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	20000280 	.word	0x20000280

08003328 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003332:	f3ef 8310 	mrs	r3, PRIMASK
 8003336:	60fb      	str	r3, [r7, #12]
  return(result);
 8003338:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800333a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800333c:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800333e:	2003      	movs	r0, #3
 8003340:	f004 f892 	bl	8007468 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003344:	4b37      	ldr	r3, [pc, #220]	; (8003424 <HW_TS_Stop+0xfc>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	22ca      	movs	r2, #202	; 0xca
 800334c:	625a      	str	r2, [r3, #36]	; 0x24
 800334e:	4b35      	ldr	r3, [pc, #212]	; (8003424 <HW_TS_Stop+0xfc>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2253      	movs	r2, #83	; 0x53
 8003356:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003358:	79fa      	ldrb	r2, [r7, #7]
 800335a:	4933      	ldr	r1, [pc, #204]	; (8003428 <HW_TS_Stop+0x100>)
 800335c:	4613      	mov	r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	4413      	add	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	440b      	add	r3, r1
 8003366:	330c      	adds	r3, #12
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d148      	bne.n	8003402 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8003370:	79fb      	ldrb	r3, [r7, #7]
 8003372:	2100      	movs	r1, #0
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff fbeb 	bl	8002b50 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800337a:	4b2c      	ldr	r3, [pc, #176]	; (800342c <HW_TS_Stop+0x104>)
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003380:	7cfb      	ldrb	r3, [r7, #19]
 8003382:	2b06      	cmp	r3, #6
 8003384:	d135      	bne.n	80033f2 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003386:	4b2a      	ldr	r3, [pc, #168]	; (8003430 <HW_TS_Stop+0x108>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800338e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003392:	d108      	bne.n	80033a6 <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8003394:	bf00      	nop
 8003396:	4b23      	ldr	r3, [pc, #140]	; (8003424 <HW_TS_Stop+0xfc>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f7      	bne.n	8003396 <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80033a6:	4b1f      	ldr	r3, [pc, #124]	; (8003424 <HW_TS_Stop+0xfc>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	4b1d      	ldr	r3, [pc, #116]	; (8003424 <HW_TS_Stop+0xfc>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b8:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80033ba:	bf00      	nop
 80033bc:	4b19      	ldr	r3, [pc, #100]	; (8003424 <HW_TS_Stop+0xfc>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0f7      	beq.n	80033bc <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80033cc:	4b15      	ldr	r3, [pc, #84]	; (8003424 <HW_TS_Stop+0xfc>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	4b13      	ldr	r3, [pc, #76]	; (8003424 <HW_TS_Stop+0xfc>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80033e0:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80033e2:	4b14      	ldr	r3, [pc, #80]	; (8003434 <HW_TS_Stop+0x10c>)
 80033e4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80033e8:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80033ea:	2003      	movs	r0, #3
 80033ec:	f004 f858 	bl	80074a0 <HAL_NVIC_ClearPendingIRQ>
 80033f0:	e007      	b.n	8003402 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80033f2:	4b11      	ldr	r3, [pc, #68]	; (8003438 <HW_TS_Stop+0x110>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	7cfa      	ldrb	r2, [r7, #19]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d001      	beq.n	8003402 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 80033fe:	f7ff fcc9 	bl	8002d94 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003402:	4b08      	ldr	r3, [pc, #32]	; (8003424 <HW_TS_Stop+0xfc>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	22ff      	movs	r2, #255	; 0xff
 800340a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800340c:	2003      	movs	r0, #3
 800340e:	f004 f81d 	bl	800744c <HAL_NVIC_EnableIRQ>
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800341c:	bf00      	nop
}
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	20000398 	.word	0x20000398
 8003428:	20000280 	.word	0x20000280
 800342c:	20000310 	.word	0x20000310
 8003430:	40002800 	.word	0x40002800
 8003434:	58000800 	.word	0x58000800
 8003438:	20000311 	.word	0x20000311

0800343c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	6039      	str	r1, [r7, #0]
 8003446:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003448:	79fa      	ldrb	r2, [r7, #7]
 800344a:	493b      	ldr	r1, [pc, #236]	; (8003538 <HW_TS_Start+0xfc>)
 800344c:	4613      	mov	r3, r2
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	4413      	add	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	440b      	add	r3, r1
 8003456:	330c      	adds	r3, #12
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d103      	bne.n	8003468 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff ff60 	bl	8003328 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003468:	f3ef 8310 	mrs	r3, PRIMASK
 800346c:	60fb      	str	r3, [r7, #12]
  return(result);
 800346e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003470:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003472:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003474:	2003      	movs	r0, #3
 8003476:	f003 fff7 	bl	8007468 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800347a:	4b30      	ldr	r3, [pc, #192]	; (800353c <HW_TS_Start+0x100>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	22ca      	movs	r2, #202	; 0xca
 8003482:	625a      	str	r2, [r3, #36]	; 0x24
 8003484:	4b2d      	ldr	r3, [pc, #180]	; (800353c <HW_TS_Start+0x100>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2253      	movs	r2, #83	; 0x53
 800348c:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800348e:	79fa      	ldrb	r2, [r7, #7]
 8003490:	4929      	ldr	r1, [pc, #164]	; (8003538 <HW_TS_Start+0xfc>)
 8003492:	4613      	mov	r3, r2
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	4413      	add	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	440b      	add	r3, r1
 800349c:	330c      	adds	r3, #12
 800349e:	2202      	movs	r2, #2
 80034a0:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80034a2:	79fa      	ldrb	r2, [r7, #7]
 80034a4:	4924      	ldr	r1, [pc, #144]	; (8003538 <HW_TS_Start+0xfc>)
 80034a6:	4613      	mov	r3, r2
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	4413      	add	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	440b      	add	r3, r1
 80034b0:	3308      	adds	r3, #8
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80034b6:	79fa      	ldrb	r2, [r7, #7]
 80034b8:	491f      	ldr	r1, [pc, #124]	; (8003538 <HW_TS_Start+0xfc>)
 80034ba:	4613      	mov	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4413      	add	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	440b      	add	r3, r1
 80034c4:	3304      	adds	r3, #4
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80034ca:	79fb      	ldrb	r3, [r7, #7]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff fa95 	bl	80029fc <linkTimer>
 80034d2:	4603      	mov	r3, r0
 80034d4:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80034d6:	4b1a      	ldr	r3, [pc, #104]	; (8003540 <HW_TS_Start+0x104>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80034dc:	4b19      	ldr	r3, [pc, #100]	; (8003544 <HW_TS_Start+0x108>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	7c7a      	ldrb	r2, [r7, #17]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d002      	beq.n	80034ee <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 80034e8:	f7ff fc54 	bl	8002d94 <RescheduleTimerList>
 80034ec:	e013      	b.n	8003516 <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80034ee:	79fa      	ldrb	r2, [r7, #7]
 80034f0:	4911      	ldr	r1, [pc, #68]	; (8003538 <HW_TS_Start+0xfc>)
 80034f2:	4613      	mov	r3, r2
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	4413      	add	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	440b      	add	r3, r1
 80034fc:	3308      	adds	r3, #8
 80034fe:	6819      	ldr	r1, [r3, #0]
 8003500:	8a7b      	ldrh	r3, [r7, #18]
 8003502:	79fa      	ldrb	r2, [r7, #7]
 8003504:	1ac9      	subs	r1, r1, r3
 8003506:	480c      	ldr	r0, [pc, #48]	; (8003538 <HW_TS_Start+0xfc>)
 8003508:	4613      	mov	r3, r2
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	4413      	add	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4403      	add	r3, r0
 8003512:	3308      	adds	r3, #8
 8003514:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003516:	4b09      	ldr	r3, [pc, #36]	; (800353c <HW_TS_Start+0x100>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	22ff      	movs	r2, #255	; 0xff
 800351e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003520:	2003      	movs	r0, #3
 8003522:	f003 ff93 	bl	800744c <HAL_NVIC_EnableIRQ>
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003530:	bf00      	nop
}
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20000280 	.word	0x20000280
 800353c:	20000398 	.word	0x20000398
 8003540:	20000310 	.word	0x20000310
 8003544:	20000311 	.word	0x20000311

08003548 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	460b      	mov	r3, r1
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4798      	blx	r3

  return;
 800355a:	bf00      	nop
}
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	607b      	str	r3, [r7, #4]
 800356e:	4603      	mov	r3, r0
 8003570:	73fb      	strb	r3, [r7, #15]
 8003572:	4613      	mov	r3, r2
 8003574:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	75bb      	strb	r3, [r7, #22]
    hw_status_t hw_status = hw_uart_ok;
 800357a:	2300      	movs	r3, #0
 800357c:	75fb      	strb	r3, [r7, #23]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 800357e:	bf00      	nop
    }

    switch (hal_status)
 8003580:	7dbb      	ldrb	r3, [r7, #22]
 8003582:	2b03      	cmp	r3, #3
 8003584:	d816      	bhi.n	80035b4 <HW_UART_Transmit_DMA+0x50>
 8003586:	a201      	add	r2, pc, #4	; (adr r2, 800358c <HW_UART_Transmit_DMA+0x28>)
 8003588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358c:	0800359d 	.word	0x0800359d
 8003590:	080035a3 	.word	0x080035a3
 8003594:	080035a9 	.word	0x080035a9
 8003598:	080035af 	.word	0x080035af
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 800359c:	2300      	movs	r3, #0
 800359e:	75fb      	strb	r3, [r7, #23]
            break;
 80035a0:	e009      	b.n	80035b6 <HW_UART_Transmit_DMA+0x52>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80035a2:	2301      	movs	r3, #1
 80035a4:	75fb      	strb	r3, [r7, #23]
            break;
 80035a6:	e006      	b.n	80035b6 <HW_UART_Transmit_DMA+0x52>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80035a8:	2302      	movs	r3, #2
 80035aa:	75fb      	strb	r3, [r7, #23]
            break;
 80035ac:	e003      	b.n	80035b6 <HW_UART_Transmit_DMA+0x52>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80035ae:	2303      	movs	r3, #3
 80035b0:	75fb      	strb	r3, [r7, #23]
            break;
 80035b2:	e000      	b.n	80035b6 <HW_UART_Transmit_DMA+0x52>

        default:
            break;
 80035b4:	bf00      	nop
    }

    return hw_status;
 80035b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	371c      	adds	r7, #28
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <_angle_correction>:





int _angle_correction(int measured_angle){
 80035c4:	b480      	push	{r7}
 80035c6:	b089      	sub	sp, #36	; 0x24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  //given a measured angle, get back a warped angle interpolated from measured corrections
  int i=0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61fb      	str	r3, [r7, #28]
  while(measured_angle > MAP_ANGLE_MEASURED[i+1]) i++;
 80035d0:	e002      	b.n	80035d8 <_angle_correction+0x14>
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	3301      	adds	r3, #1
 80035d6:	61fb      	str	r3, [r7, #28]
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	3301      	adds	r3, #1
 80035dc:	4a1f      	ldr	r2, [pc, #124]	; (800365c <_angle_correction+0x98>)
 80035de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	dcf4      	bgt.n	80035d2 <_angle_correction+0xe>

  int low_m = MAP_ANGLE_MEASURED[i];
 80035e8:	4a1c      	ldr	r2, [pc, #112]	; (800365c <_angle_correction+0x98>)
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f0:	61bb      	str	r3, [r7, #24]
  int high_m = MAP_ANGLE_MEASURED[i+1];
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	3301      	adds	r3, #1
 80035f6:	4a19      	ldr	r2, [pc, #100]	; (800365c <_angle_correction+0x98>)
 80035f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035fc:	617b      	str	r3, [r7, #20]
  int low_r = MAP_ANGLE_REAL[i];
 80035fe:	4a18      	ldr	r2, [pc, #96]	; (8003660 <_angle_correction+0x9c>)
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003606:	613b      	str	r3, [r7, #16]
  int high_r = MAP_ANGLE_REAL[i+1];
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	3301      	adds	r3, #1
 800360c:	4a14      	ldr	r2, [pc, #80]	; (8003660 <_angle_correction+0x9c>)
 800360e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003612:	60fb      	str	r3, [r7, #12]

  int scaled = (int)((high_r-low_r)*(measured_angle-low_m)/(float)(high_m-low_m));
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	1a8a      	subs	r2, r1, r2
 8003620:	fb02 f303 	mul.w	r3, r2, r3
 8003624:	ee07 3a90 	vmov	s15, r3
 8003628:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	ee07 3a90 	vmov	s15, r3
 8003636:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800363a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800363e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003642:	ee17 3a90 	vmov	r3, s15
 8003646:	60bb      	str	r3, [r7, #8]
  return (low_r + scaled);
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	4413      	add	r3, r2
}
 800364e:	4618      	mov	r0, r3
 8003650:	3724      	adds	r7, #36	; 0x24
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	08018e9c 	.word	0x08018e9c
 8003660:	08018e78 	.word	0x08018e78

08003664 <_get_pad_angle>:


int _get_pad_angle(int p1, int p2){
 8003664:	b590      	push	{r4, r7, lr}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
    //return angle from 0 to 120 degrees between two pads given their two values
    if (p1 == 0) return 120;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <_get_pad_angle+0x14>
 8003674:	2378      	movs	r3, #120	; 0x78
 8003676:	e02c      	b.n	80036d2 <_get_pad_angle+0x6e>
    if (p2 == 0) return 0;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <_get_pad_angle+0x1e>
 800367e:	2300      	movs	r3, #0
 8003680:	e027      	b.n	80036d2 <_get_pad_angle+0x6e>
    return round(((float)(p2)/(float)(p1+p2))*120.0);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	ee07 3a90 	vmov	s15, r3
 8003688:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	4413      	add	r3, r2
 8003692:	ee07 3a90 	vmov	s15, r3
 8003696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800369a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800369e:	ee16 0a90 	vmov	r0, s13
 80036a2:	f7fc ff29 	bl	80004f8 <__aeabi_f2d>
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	4b0c      	ldr	r3, [pc, #48]	; (80036dc <_get_pad_angle+0x78>)
 80036ac:	f7fc ff7c 	bl	80005a8 <__aeabi_dmul>
 80036b0:	4603      	mov	r3, r0
 80036b2:	460c      	mov	r4, r1
 80036b4:	ec44 3b17 	vmov	d7, r3, r4
 80036b8:	eeb0 0a47 	vmov.f32	s0, s14
 80036bc:	eef0 0a67 	vmov.f32	s1, s15
 80036c0:	f012 fc3c 	bl	8015f3c <round>
 80036c4:	ec54 3b10 	vmov	r3, r4, d0
 80036c8:	4618      	mov	r0, r3
 80036ca:	4621      	mov	r1, r4
 80036cc:	f7fd fa1c 	bl	8000b08 <__aeabi_d2iz>
 80036d0:	4603      	mov	r3, r0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd90      	pop	{r4, r7, pc}
 80036da:	bf00      	nop
 80036dc:	405e0000 	.word	0x405e0000

080036e0 <_get_angle>:


int _get_angle(int* c) {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08a      	sub	sp, #40	; 0x28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  //c[0] is proximity
  //60 min on clock, so 6 deg resolution
  //3 pads.  take top 2 values, map linearly to 120 degree slice.
  int angle = ANGLE_OFFSET;
 80036e8:	f240 1361 	movw	r3, #353	; 0x161
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
  int warped_angle;

  if ( ((c[1]==0) + (c[2]==0) + (c[3]==0)) > 1){//if more than one value is zero
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3304      	adds	r3, #4
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	bf0c      	ite	eq
 80036f8:	2301      	moveq	r3, #1
 80036fa:	2300      	movne	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	461a      	mov	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3308      	adds	r3, #8
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	bf0c      	ite	eq
 800370a:	2301      	moveq	r3, #1
 800370c:	2300      	movne	r3, #0
 800370e:	b2db      	uxtb	r3, r3
 8003710:	4413      	add	r3, r2
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	320c      	adds	r2, #12
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	2a00      	cmp	r2, #0
 800371a:	bf0c      	ite	eq
 800371c:	2201      	moveq	r2, #1
 800371e:	2200      	movne	r2, #0
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	4413      	add	r3, r2
 8003724:	2b01      	cmp	r3, #1
 8003726:	dd1a      	ble.n	800375e <_get_angle+0x7e>
	  if (c[1]) angle += 0;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3304      	adds	r3, #4
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	f040 8081 	bne.w	8003836 <_get_angle+0x156>
	  else if (c[2]) angle += 120;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3308      	adds	r3, #8
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <_get_angle+0x66>
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	3378      	adds	r3, #120	; 0x78
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
 8003744:	e077      	b.n	8003836 <_get_angle+0x156>
	  else if (c[3]) angle += 240;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	330c      	adds	r3, #12
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <_get_angle+0x78>
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	33f0      	adds	r3, #240	; 0xf0
 8003754:	627b      	str	r3, [r7, #36]	; 0x24
 8003756:	e06e      	b.n	8003836 <_get_angle+0x156>
	  else return -1;
 8003758:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800375c:	e07e      	b.n	800385c <_get_angle+0x17c>
  }

  else if (c[1] > c[3] && c[2] > c[3]) { //first third, between 1 and 2
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3304      	adds	r3, #4
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	330c      	adds	r3, #12
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	dd20      	ble.n	80037b0 <_get_angle+0xd0>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3308      	adds	r3, #8
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	330c      	adds	r3, #12
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	dd18      	ble.n	80037b0 <_get_angle+0xd0>
    int pos1 = c[1]-c[3];
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3304      	adds	r3, #4
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	330c      	adds	r3, #12
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	623b      	str	r3, [r7, #32]
    int pos2 = c[2]-c[3];
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3308      	adds	r3, #8
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	330c      	adds	r3, #12
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	61fb      	str	r3, [r7, #28]
    angle += _get_pad_angle(pos1, pos2);
 800379e:	69f9      	ldr	r1, [r7, #28]
 80037a0:	6a38      	ldr	r0, [r7, #32]
 80037a2:	f7ff ff5f 	bl	8003664 <_get_pad_angle>
 80037a6:	4602      	mov	r2, r0
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	4413      	add	r3, r2
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
  else if (c[1] > c[3] && c[2] > c[3]) { //first third, between 1 and 2
 80037ae:	e042      	b.n	8003836 <_get_angle+0x156>
  }

  else if (c[2] > c[1] && c[3] > c[1]) { //second third, between 2 and 3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3308      	adds	r3, #8
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3304      	adds	r3, #4
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	dd21      	ble.n	8003804 <_get_angle+0x124>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	330c      	adds	r3, #12
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	3304      	adds	r3, #4
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	dd19      	ble.n	8003804 <_get_angle+0x124>
    int pos1 = c[2]-c[1];
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3308      	adds	r3, #8
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	3304      	adds	r3, #4
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	61bb      	str	r3, [r7, #24]
    int pos2 = c[3]-c[1];
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	330c      	adds	r3, #12
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3304      	adds	r3, #4
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	617b      	str	r3, [r7, #20]
    angle += _get_pad_angle(pos1, pos2) + 120;
 80037f0:	6979      	ldr	r1, [r7, #20]
 80037f2:	69b8      	ldr	r0, [r7, #24]
 80037f4:	f7ff ff36 	bl	8003664 <_get_pad_angle>
 80037f8:	4603      	mov	r3, r0
 80037fa:	3378      	adds	r3, #120	; 0x78
 80037fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fe:	4413      	add	r3, r2
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
  else if (c[2] > c[1] && c[3] > c[1]) { //second third, between 2 and 3
 8003802:	e018      	b.n	8003836 <_get_angle+0x156>
  }

  else { //third third, between 3 and 1
    int pos1 = c[3]-c[2];
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	330c      	adds	r3, #12
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3308      	adds	r3, #8
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	613b      	str	r3, [r7, #16]
    int pos2 = c[1]-c[2];
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3304      	adds	r3, #4
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3308      	adds	r3, #8
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	60fb      	str	r3, [r7, #12]
    angle += _get_pad_angle(pos1, pos2) + 240;
 8003824:	68f9      	ldr	r1, [r7, #12]
 8003826:	6938      	ldr	r0, [r7, #16]
 8003828:	f7ff ff1c 	bl	8003664 <_get_pad_angle>
 800382c:	4603      	mov	r3, r0
 800382e:	33f0      	adds	r3, #240	; 0xf0
 8003830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003832:	4413      	add	r3, r2
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
  }

  angle %= 360;
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	4a0a      	ldr	r2, [pc, #40]	; (8003864 <_get_angle+0x184>)
 800383a:	fb82 1203 	smull	r1, r2, r2, r3
 800383e:	441a      	add	r2, r3
 8003840:	1211      	asrs	r1, r2, #8
 8003842:	17da      	asrs	r2, r3, #31
 8003844:	1a8a      	subs	r2, r1, r2
 8003846:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800384a:	fb01 f202 	mul.w	r2, r1, r2
 800384e:	1a9b      	subs	r3, r3, r2
 8003850:	627b      	str	r3, [r7, #36]	; 0x24
  warped_angle = _angle_correction(angle);
 8003852:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003854:	f7ff feb6 	bl	80035c4 <_angle_correction>
 8003858:	60b8      	str	r0, [r7, #8]

  return warped_angle;
 800385a:	68bb      	ldr	r3, [r7, #8]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3728      	adds	r7, #40	; 0x28
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	b60b60b7 	.word	0xb60b60b7

08003868 <_get_min>:


int _get_min(int* c) {
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
	int angle = _get_angle(c);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7ff ff35 	bl	80036e0 <_get_angle>
 8003876:	60f8      	str	r0, [r7, #12]
	if (angle == -1) return -1;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800387e:	d102      	bne.n	8003886 <_get_min+0x1e>
 8003880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003884:	e005      	b.n	8003892 <_get_min+0x2a>
	return angle/6;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4a04      	ldr	r2, [pc, #16]	; (800389c <_get_min+0x34>)
 800388a:	fb82 1203 	smull	r1, r2, r2, r3
 800388e:	17db      	asrs	r3, r3, #31
 8003890:	1ad3      	subs	r3, r2, r3
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	2aaaaaab 	.word	0x2aaaaaab

080038a0 <_get_min_if_pressed>:


int _get_min_if_pressed(int* c){
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
	//return -1 if not pressed, otherwise return a logical minute value
	if (c[0] <= IQS_TOUCH_THRESH || c[0] > 0xFF) return -1;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	dd03      	ble.n	80038b8 <_get_min_if_pressed+0x18>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2bff      	cmp	r3, #255	; 0xff
 80038b6:	dd02      	ble.n	80038be <_get_min_if_pressed+0x1e>
 80038b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038bc:	e003      	b.n	80038c6 <_get_min_if_pressed+0x26>
	else return _get_min(c);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7ff ffd2 	bl	8003868 <_get_min>
 80038c4:	4603      	mov	r3, r0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <iqs263_poll_raw>:


void iqs263_poll_raw(int* coords){
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b086      	sub	sp, #24
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]

  //uint16_t coords[4];

  uint8_t coords_raw[8];

  iqs263_read(0x06, coords_raw, 8);
 80038d6:	f107 030c 	add.w	r3, r7, #12
 80038da:	2208      	movs	r2, #8
 80038dc:	4619      	mov	r1, r3
 80038de:	2006      	movs	r0, #6
 80038e0:	f000 f8a8 	bl	8003a34 <iqs263_read>

  for (int i=0; i<4; i++){
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	e019      	b.n	800391e <iqs263_poll_raw+0x50>
	  coords[i] = (coords_raw[2*i+1] << 8) | (coords_raw[2*i] & 0xFF);
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	3301      	adds	r3, #1
 80038f0:	f107 0218 	add.w	r2, r7, #24
 80038f4:	4413      	add	r3, r2
 80038f6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80038fa:	021a      	lsls	r2, r3, #8
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	f107 0118 	add.w	r1, r7, #24
 8003904:	440b      	add	r3, r1
 8003906:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800390a:	4618      	mov	r0, r3
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	440b      	add	r3, r1
 8003914:	4302      	orrs	r2, r0
 8003916:	601a      	str	r2, [r3, #0]
  for (int i=0; i<4; i++){
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	3301      	adds	r3, #1
 800391c:	617b      	str	r3, [r7, #20]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2b03      	cmp	r3, #3
 8003922:	dde2      	ble.n	80038ea <iqs263_poll_raw+0x1c>
  }
  //c[0] is proximity

}
 8003924:	bf00      	nop
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <setup_iqs263>:


HAL_StatusTypeDef setup_iqs263() {
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af04      	add	r7, sp, #16

	uint8_t c;
	HAL_StatusTypeDef resp = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	71fb      	strb	r3, [r7, #7]
	uint8_t out_data[5] = {0x00, 0x00, 0x00, 0x00, 0x00};
 8003936:	463b      	mov	r3, r7
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	711a      	strb	r2, [r3, #4]

	//check product num
	while (resp == HAL_ERROR){
 800393e:	e00e      	b.n	800395e <setup_iqs263+0x32>
		resp = HAL_I2C_Mem_Read(&IQS_I2C_PORT, IQS_ADDR, 0x00, sizeof(uint8_t), &c, sizeof(uint8_t), HAL_MAX_DELAY);
 8003940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003944:	9302      	str	r3, [sp, #8]
 8003946:	2301      	movs	r3, #1
 8003948:	9301      	str	r3, [sp, #4]
 800394a:	1dbb      	adds	r3, r7, #6
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	2301      	movs	r3, #1
 8003950:	2200      	movs	r2, #0
 8003952:	2188      	movs	r1, #136	; 0x88
 8003954:	4836      	ldr	r0, [pc, #216]	; (8003a30 <setup_iqs263+0x104>)
 8003956:	f004 fb1b 	bl	8007f90 <HAL_I2C_Mem_Read>
 800395a:	4603      	mov	r3, r0
 800395c:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d0ed      	beq.n	8003940 <setup_iqs263+0x14>
	}

	if (c != 0x3C) {
 8003964:	79bb      	ldrb	r3, [r7, #6]
 8003966:	2b3c      	cmp	r3, #60	; 0x3c
 8003968:	d001      	beq.n	800396e <setup_iqs263+0x42>
	  //ERROR - should read product code 0x3C
	  return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e05b      	b.n	8003a26 <setup_iqs263+0xfa>
	}

	HAL_Delay(100);
 800396e:	2064      	movs	r0, #100	; 0x64
 8003970:	f002 fbc1 	bl	80060f6 <HAL_Delay>


	//now write and read 0x0E to address 0x0D
	out_data[0] = 0x0E;
 8003974:	230e      	movs	r3, #14
 8003976:	703b      	strb	r3, [r7, #0]

	resp = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 800397c:	e00e      	b.n	800399c <setup_iqs263+0x70>
		  resp = HAL_I2C_Mem_Write(&IQS_I2C_PORT, IQS_ADDR, 0x0D, 1, out_data, 1, HAL_MAX_DELAY);
 800397e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003982:	9302      	str	r3, [sp, #8]
 8003984:	2301      	movs	r3, #1
 8003986:	9301      	str	r3, [sp, #4]
 8003988:	463b      	mov	r3, r7
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	2301      	movs	r3, #1
 800398e:	220d      	movs	r2, #13
 8003990:	2188      	movs	r1, #136	; 0x88
 8003992:	4827      	ldr	r0, [pc, #156]	; (8003a30 <setup_iqs263+0x104>)
 8003994:	f004 f9e8 	bl	8007d68 <HAL_I2C_Mem_Write>
 8003998:	4603      	mov	r3, r0
 800399a:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 800399c:	79fb      	ldrb	r3, [r7, #7]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d0ed      	beq.n	800397e <setup_iqs263+0x52>
	}
	HAL_Delay(100);
 80039a2:	2064      	movs	r0, #100	; 0x64
 80039a4:	f002 fba7 	bl	80060f6 <HAL_Delay>
	out_data[4]=0x00;
	*/


	//for 0x07 - Multipliers
	out_data[0]=0x11; //ch0 sensitivity and compensation multipliers
 80039a8:	2311      	movs	r3, #17
 80039aa:	703b      	strb	r3, [r7, #0]
	out_data[1]=0x11; //ch1 sensitivity and compensation multipliers
 80039ac:	2311      	movs	r3, #17
 80039ae:	707b      	strb	r3, [r7, #1]
	out_data[2]=0x11; //ch2 sensitivity and compensation multipliers
 80039b0:	2311      	movs	r3, #17
 80039b2:	70bb      	strb	r3, [r7, #2]
	out_data[3]=0x11; //ch3 sensitivity and compensation multipliers
 80039b4:	2311      	movs	r3, #17
 80039b6:	70fb      	strb	r3, [r7, #3]
	out_data[4]=0x11; //base values, see look up table. 138/138, can range from 74 to 298
 80039b8:	2311      	movs	r3, #17
 80039ba:	713b      	strb	r3, [r7, #4]

	resp = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 80039c0:	e00e      	b.n	80039e0 <setup_iqs263+0xb4>
	  resp = HAL_I2C_Mem_Write(&IQS_I2C_PORT, IQS_ADDR, 0x07, 1, out_data, 5, HAL_MAX_DELAY);
 80039c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039c6:	9302      	str	r3, [sp, #8]
 80039c8:	2305      	movs	r3, #5
 80039ca:	9301      	str	r3, [sp, #4]
 80039cc:	463b      	mov	r3, r7
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	2301      	movs	r3, #1
 80039d2:	2207      	movs	r2, #7
 80039d4:	2188      	movs	r1, #136	; 0x88
 80039d6:	4816      	ldr	r0, [pc, #88]	; (8003a30 <setup_iqs263+0x104>)
 80039d8:	f004 f9c6 	bl	8007d68 <HAL_I2C_Mem_Write>
 80039dc:	4603      	mov	r3, r0
 80039de:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 80039e0:	79fb      	ldrb	r3, [r7, #7]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d0ed      	beq.n	80039c2 <setup_iqs263+0x96>
	}


	//for 0x09 - ProxSettings:
	out_data[0]=0b01000000;  // ProxSettings0
 80039e6:	2340      	movs	r3, #64	; 0x40
 80039e8:	703b      	strb	r3, [r7, #0]
	out_data[1]=0b00011011; // ProxSettings1
 80039ea:	231b      	movs	r3, #27
 80039ec:	707b      	strb	r3, [r7, #1]
	out_data[2]=0xb00000100; // ProxSettings2
 80039ee:	2300      	movs	r3, #0
 80039f0:	70bb      	strb	r3, [r7, #2]
	out_data[3]=0b00000110; // ProxSettings3
 80039f2:	2306      	movs	r3, #6
 80039f4:	70fb      	strb	r3, [r7, #3]
	out_data[4]=0x00; // Event Mask
 80039f6:	2300      	movs	r3, #0
 80039f8:	713b      	strb	r3, [r7, #4]

	resp = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 80039fe:	e00e      	b.n	8003a1e <setup_iqs263+0xf2>
		  resp = HAL_I2C_Mem_Write(&IQS_I2C_PORT, IQS_ADDR, 0x09, 1, out_data, 5, HAL_MAX_DELAY);
 8003a00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a04:	9302      	str	r3, [sp, #8]
 8003a06:	2305      	movs	r3, #5
 8003a08:	9301      	str	r3, [sp, #4]
 8003a0a:	463b      	mov	r3, r7
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	2301      	movs	r3, #1
 8003a10:	2209      	movs	r2, #9
 8003a12:	2188      	movs	r1, #136	; 0x88
 8003a14:	4806      	ldr	r0, [pc, #24]	; (8003a30 <setup_iqs263+0x104>)
 8003a16:	f004 f9a7 	bl	8007d68 <HAL_I2C_Mem_Write>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003a1e:	79fb      	ldrb	r3, [r7, #7]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d0ed      	beq.n	8003a00 <setup_iqs263+0xd4>
	//for 0x0B - Timing and Targets
	out_data[0] //low power time, 16ms steps, default = 00
	out_data[1] //ATI touch target, default = 48D
	out_data[2] //ATI prox target, default = 64D
*/
    return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	2002e1dc 	.word	0x2002e1dc

08003a34 <iqs263_read>:

  return HAL_OK;

}

HAL_StatusTypeDef iqs263_read(uint8_t addr, uint8_t* buf, uint8_t size) {
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b088      	sub	sp, #32
 8003a38:	af04      	add	r7, sp, #16
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	6039      	str	r1, [r7, #0]
 8003a3e:	71fb      	strb	r3, [r7, #7]
 8003a40:	4613      	mov	r3, r2
 8003a42:	71bb      	strb	r3, [r7, #6]


  const uint16_t max_tries = 300;
 8003a44:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003a48:	817b      	strh	r3, [r7, #10]
  uint16_t current_tries = 0;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	81fb      	strh	r3, [r7, #14]

  HAL_StatusTypeDef resp = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	737b      	strb	r3, [r7, #13]

  while (resp == HAL_ERROR && current_tries < max_tries){
 8003a52:	e014      	b.n	8003a7e <iqs263_read+0x4a>
    resp = HAL_I2C_Mem_Read(&IQS_I2C_PORT, IQS_ADDR, addr, 1, buf, size, HAL_MAX_DELAY);
 8003a54:	79fb      	ldrb	r3, [r7, #7]
 8003a56:	b299      	uxth	r1, r3
 8003a58:	79bb      	ldrb	r3, [r7, #6]
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a60:	9202      	str	r2, [sp, #8]
 8003a62:	9301      	str	r3, [sp, #4]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	2301      	movs	r3, #1
 8003a6a:	460a      	mov	r2, r1
 8003a6c:	2188      	movs	r1, #136	; 0x88
 8003a6e:	480d      	ldr	r0, [pc, #52]	; (8003aa4 <iqs263_read+0x70>)
 8003a70:	f004 fa8e 	bl	8007f90 <HAL_I2C_Mem_Read>
 8003a74:	4603      	mov	r3, r0
 8003a76:	737b      	strb	r3, [r7, #13]
    current_tries++;
 8003a78:	89fb      	ldrh	r3, [r7, #14]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	81fb      	strh	r3, [r7, #14]
  while (resp == HAL_ERROR && current_tries < max_tries){
 8003a7e:	7b7b      	ldrb	r3, [r7, #13]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d103      	bne.n	8003a8c <iqs263_read+0x58>
 8003a84:	89fa      	ldrh	r2, [r7, #14]
 8003a86:	897b      	ldrh	r3, [r7, #10]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d3e3      	bcc.n	8003a54 <iqs263_read+0x20>
  }

  if (current_tries >= max_tries) {
 8003a8c:	89fa      	ldrh	r2, [r7, #14]
 8003a8e:	897b      	ldrh	r3, [r7, #10]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d301      	bcc.n	8003a98 <iqs263_read+0x64>
	  return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e000      	b.n	8003a9a <iqs263_read+0x66>
  }

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0

}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	2002e1dc 	.word	0x2002e1dc

08003aa8 <LL_EXTI_DisableIT_0_31>:
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003ab0:	4b07      	ldr	r3, [pc, #28]	; (8003ad0 <LL_EXTI_DisableIT_0_31+0x28>)
 8003ab2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	4905      	ldr	r1, [pc, #20]	; (8003ad0 <LL_EXTI_DisableIT_0_31+0x28>)
 8003abc:	4013      	ands	r3, r2
 8003abe:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	58000800 	.word	0x58000800

08003ad4 <LL_EXTI_DisableIT_32_63>:
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003adc:	4b07      	ldr	r3, [pc, #28]	; (8003afc <LL_EXTI_DisableIT_32_63+0x28>)
 8003ade:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	4905      	ldr	r1, [pc, #20]	; (8003afc <LL_EXTI_DisableIT_32_63+0x28>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	58000800 	.word	0x58000800

08003b00 <LL_RCC_HSE_SetCapacitorTuning>:
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8003b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b0c:	4a0a      	ldr	r2, [pc, #40]	; (8003b38 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8003b0e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8003b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b1a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	021b      	lsls	r3, r3, #8
 8003b22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	cafecafe 	.word	0xcafecafe

08003b3c <LL_RCC_LSE_SetDriveCapability>:
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4c:	f023 0218 	bic.w	r2, r3, #24
 8003b50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b80:	bf00      	nop
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003ba2:	bf00      	nop
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8003bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bc0:	d101      	bne.n	8003bc6 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e000      	b.n	8003bc8 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8003bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003be6:	d101      	bne.n	8003bec <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <LL_AHB2_GRP1_EnableClock>:
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
}
 8003c1e:	bf00      	nop
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <LL_AHB3_GRP1_EnableClock>:
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b085      	sub	sp, #20
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
}
 8003c50:	bf00      	nop
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <LL_C1_IPCC_DisableTransmitChannel>:
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	041b      	lsls	r3, r3, #16
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	605a      	str	r2, [r3, #4]
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <LL_C1_IPCC_DisableReceiveChannel>:
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	431a      	orrs	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	605a      	str	r2, [r3, #4]
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <LL_C2_IPCC_DisableTransmitChannel>:
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	695a      	ldr	r2, [r3, #20]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	041b      	lsls	r3, r3, #16
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	615a      	str	r2, [r3, #20]
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <LL_C2_IPCC_DisableReceiveChannel>:
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	695a      	ldr	r2, [r3, #20]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	615a      	str	r2, [r3, #20]
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	609a      	str	r2, [r3, #8]
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <LL_C2_IPCC_ClearFlag_CHx>:
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	619a      	str	r2, [r3, #24]
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003d24:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <LL_LPM_EnableSleep+0x1c>)
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	4a04      	ldr	r2, [pc, #16]	; (8003d3c <LL_LPM_EnableSleep+0x1c>)
 8003d2a:	f023 0304 	bic.w	r3, r3, #4
 8003d2e:	6113      	str	r3, [r2, #16]
}
 8003d30:	bf00      	nop
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	e000ed00 	.word	0xe000ed00

08003d40 <main>:
static void Reset_BackupDomain( void );
static void Init_Exti( void );
static void Config_HSE(void);

int main(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003d44:	4b45      	ldr	r3, [pc, #276]	; (8003e5c <main+0x11c>)
 8003d46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003d4a:	611a      	str	r2, [r3, #16]


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d4c:	f003 f9ea 	bl	8007124 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 8003d50:	f002 f983 	bl	800605a <Reset_Device>
  Config_HSE();
 8003d54:	f002 f96d 	bl	8006032 <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d58:	f000 f8c8 	bl	8003eec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 8003d5c:	f002 f962 	bl	8006024 <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 8003d60:	f002 f9bd 	bl	80060de <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d64:	f000 fad6 	bl	8004314 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003d68:	f000 f940 	bl	8003fec <MX_I2C1_Init>
  MX_SPI1_Init();
 8003d6c:	f000 f9e4 	bl	8004138 <MX_SPI1_Init>
  MX_RF_Init();
 8003d70:	f000 f97c 	bl	800406c <MX_RF_Init>
  MX_RTC_Init();
 8003d74:	f000 f982 	bl	800407c <MX_RTC_Init>
  MX_TIM1_Init();
 8003d78:	f000 fa1c 	bl	80041b4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  GlobalState_Init();
 8003d7c:	f000 fb2c 	bl	80043d8 <GlobalState_Init>

  //Init Pseudo-Random Number Generation Seed
  srand(0xFA1863A7);
 8003d80:	4837      	ldr	r0, [pc, #220]	; (8003e60 <main+0x120>)
 8003d82:	f010 f83f 	bl	8013e04 <srand>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003d86:	f00b f913 	bl	800efb0 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
    /* creation of rtcMutex */
    rtcMutexHandle = osMutexNew(&rtcMutex_attributes);
 8003d8a:	4836      	ldr	r0, [pc, #216]	; (8003e64 <main+0x124>)
 8003d8c:	f00b fb44 	bl	800f418 <osMutexNew>
 8003d90:	4602      	mov	r2, r0
 8003d92:	4b35      	ldr	r3, [pc, #212]	; (8003e68 <main+0x128>)
 8003d94:	601a      	str	r2, [r3, #0]

    /* creation of timeBoundMutex */
    timeBoundMutexHandle = osMutexNew(&timeBoundMutex_attributes);
 8003d96:	4835      	ldr	r0, [pc, #212]	; (8003e6c <main+0x12c>)
 8003d98:	f00b fb3e 	bl	800f418 <osMutexNew>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	4b34      	ldr	r3, [pc, #208]	; (8003e70 <main+0x130>)
 8003da0:	601a      	str	r2, [r3, #0]

    /* creation of lastSeenMutex */
    lastSeenMutexHandle = osMutexNew(&lastSeenMutex_attributes);
 8003da2:	4834      	ldr	r0, [pc, #208]	; (8003e74 <main+0x134>)
 8003da4:	f00b fb38 	bl	800f418 <osMutexNew>
 8003da8:	4602      	mov	r2, r0
 8003daa:	4b33      	ldr	r3, [pc, #204]	; (8003e78 <main+0x138>)
 8003dac:	601a      	str	r2, [r3, #0]

    /* creation of timeEstimateMutex */
    //timeEstimateMutexHandle = osMutexNew(&timeEstimateMutex_attributes);

    /* creation of conditionMutex */
    conditionMutexHandle = osMutexNew(&conditionMutex_attributes);
 8003dae:	4833      	ldr	r0, [pc, #204]	; (8003e7c <main+0x13c>)
 8003db0:	f00b fb32 	bl	800f418 <osMutexNew>
 8003db4:	4602      	mov	r2, r0
 8003db6:	4b32      	ldr	r3, [pc, #200]	; (8003e80 <main+0x140>)
 8003db8:	601a      	str	r2, [r3, #0]

    /* creation of modeMutex */
    modeMutexHandle = osMutexNew(&modeMutex_attributes);
 8003dba:	4832      	ldr	r0, [pc, #200]	; (8003e84 <main+0x144>)
 8003dbc:	f00b fb2c 	bl	800f418 <osMutexNew>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	4b31      	ldr	r3, [pc, #196]	; (8003e88 <main+0x148>)
 8003dc4:	601a      	str	r2, [r3, #0]

    /* creation of surveyMutex */
    surveyMutexHandle = osMutexNew(&surveyMutex_attributes);
 8003dc6:	4831      	ldr	r0, [pc, #196]	; (8003e8c <main+0x14c>)
 8003dc8:	f00b fb26 	bl	800f418 <osMutexNew>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	4b30      	ldr	r3, [pc, #192]	; (8003e90 <main+0x150>)
 8003dd0:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_QUEUES */
      /* creation of bleTXqueue */
      bleTXqueueHandle = osMessageQueueNew (16, sizeof(BLETX_Queue_t), &bleTXqueue_attributes);
 8003dd2:	4a30      	ldr	r2, [pc, #192]	; (8003e94 <main+0x154>)
 8003dd4:	2104      	movs	r1, #4
 8003dd6:	2010      	movs	r0, #16
 8003dd8:	f00b fdc2 	bl	800f960 <osMessageQueueNew>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	4b2e      	ldr	r3, [pc, #184]	; (8003e98 <main+0x158>)
 8003de0:	601a      	str	r2, [r3, #0]

      /* creation of bleRXqueue */
      bleRXqueueHandle = osMessageQueueNew (16, sizeof(P2PS_STM_Data_t *), &bleRXqueue_attributes);
 8003de2:	4a2e      	ldr	r2, [pc, #184]	; (8003e9c <main+0x15c>)
 8003de4:	2104      	movs	r1, #4
 8003de6:	2010      	movs	r0, #16
 8003de8:	f00b fdba 	bl	800f960 <osMessageQueueNew>
 8003dec:	4602      	mov	r2, r0
 8003dee:	4b2c      	ldr	r3, [pc, #176]	; (8003ea0 <main+0x160>)
 8003df0:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
        /* creation of uiControl */
        uiControlHandle = osThreadNew(startUIControl, NULL, &uiControl_attributes);
 8003df2:	4a2c      	ldr	r2, [pc, #176]	; (8003ea4 <main+0x164>)
 8003df4:	2100      	movs	r1, #0
 8003df6:	482c      	ldr	r0, [pc, #176]	; (8003ea8 <main+0x168>)
 8003df8:	f00b f944 	bl	800f084 <osThreadNew>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	4b2b      	ldr	r3, [pc, #172]	; (8003eac <main+0x16c>)
 8003e00:	601a      	str	r2, [r3, #0]

        /* creation of ESMMain */
        esmMainHandle = osThreadNew(startESMMain, NULL, &esmMain_attributes);
 8003e02:	4a2b      	ldr	r2, [pc, #172]	; (8003eb0 <main+0x170>)
 8003e04:	2100      	movs	r1, #0
 8003e06:	482b      	ldr	r0, [pc, #172]	; (8003eb4 <main+0x174>)
 8003e08:	f00b f93c 	bl	800f084 <osThreadNew>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	4b2a      	ldr	r3, [pc, #168]	; (8003eb8 <main+0x178>)
 8003e10:	601a      	str	r2, [r3, #0]

        /* creation of buttonPress */
        buttonPressHandle = osThreadNew(startButtonPress, NULL, &buttonPress_attributes);
 8003e12:	4a2a      	ldr	r2, [pc, #168]	; (8003ebc <main+0x17c>)
 8003e14:	2100      	movs	r1, #0
 8003e16:	482a      	ldr	r0, [pc, #168]	; (8003ec0 <main+0x180>)
 8003e18:	f00b f934 	bl	800f084 <osThreadNew>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	4b29      	ldr	r3, [pc, #164]	; (8003ec4 <main+0x184>)
 8003e20:	601a      	str	r2, [r3, #0]

        /* creation of conditionsPoll */
        conditionsPollHandle = osThreadNew(startConditionsPoll, NULL, &conditionsPoll_attributes);
 8003e22:	4a29      	ldr	r2, [pc, #164]	; (8003ec8 <main+0x188>)
 8003e24:	2100      	movs	r1, #0
 8003e26:	4829      	ldr	r0, [pc, #164]	; (8003ecc <main+0x18c>)
 8003e28:	f00b f92c 	bl	800f084 <osThreadNew>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	4b28      	ldr	r3, [pc, #160]	; (8003ed0 <main+0x190>)
 8003e30:	601a      	str	r2, [r3, #0]

        /* creation of bleTX */
        bleTXHandle = osThreadNew(startBLETX, NULL, &bleTX_attributes);
 8003e32:	4a28      	ldr	r2, [pc, #160]	; (8003ed4 <main+0x194>)
 8003e34:	2100      	movs	r1, #0
 8003e36:	4828      	ldr	r0, [pc, #160]	; (8003ed8 <main+0x198>)
 8003e38:	f00b f924 	bl	800f084 <osThreadNew>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	4b27      	ldr	r3, [pc, #156]	; (8003edc <main+0x19c>)
 8003e40:	601a      	str	r2, [r3, #0]

        /* creation of bleRX */
        bleRXHandle = osThreadNew(startBLERX, NULL, &bleRX_attributes);
 8003e42:	4a27      	ldr	r2, [pc, #156]	; (8003ee0 <main+0x1a0>)
 8003e44:	2100      	movs	r1, #0
 8003e46:	4827      	ldr	r0, [pc, #156]	; (8003ee4 <main+0x1a4>)
 8003e48:	f00b f91c 	bl	800f084 <osThreadNew>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	4b26      	ldr	r3, [pc, #152]	; (8003ee8 <main+0x1a8>)
 8003e50:	601a      	str	r2, [r3, #0]


  /* Init code for STM32_WPAN */
  APPE_Init();
 8003e52:	f7fd ffed 	bl	8001e30 <APPE_Init>
  /* Start scheduler */
  osKernelStart();
 8003e56:	f00b f8df 	bl	800f018 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  while (1){}
 8003e5a:	e7fe      	b.n	8003e5a <main+0x11a>
 8003e5c:	58004000 	.word	0x58004000
 8003e60:	fa1863a7 	.word	0xfa1863a7
 8003e64:	080190d0 	.word	0x080190d0
 8003e68:	2002e0c8 	.word	0x2002e0c8
 8003e6c:	080190e0 	.word	0x080190e0
 8003e70:	2002e1d8 	.word	0x2002e1d8
 8003e74:	080190f0 	.word	0x080190f0
 8003e78:	2002e304 	.word	0x2002e304
 8003e7c:	08019100 	.word	0x08019100
 8003e80:	2002e228 	.word	0x2002e228
 8003e84:	08019110 	.word	0x08019110
 8003e88:	2002e234 	.word	0x2002e234
 8003e8c:	08019120 	.word	0x08019120
 8003e90:	2002e22c 	.word	0x2002e22c
 8003e94:	080190a0 	.word	0x080190a0
 8003e98:	2002e294 	.word	0x2002e294
 8003e9c:	080190b8 	.word	0x080190b8
 8003ea0:	2002e07c 	.word	0x2002e07c
 8003ea4:	08018fc8 	.word	0x08018fc8
 8003ea8:	08004519 	.word	0x08004519
 8003eac:	2002e298 	.word	0x2002e298
 8003eb0:	08018fec 	.word	0x08018fec
 8003eb4:	08004b5d 	.word	0x08004b5d
 8003eb8:	2002e29c 	.word	0x2002e29c
 8003ebc:	08019010 	.word	0x08019010
 8003ec0:	080056fd 	.word	0x080056fd
 8003ec4:	2002e1d4 	.word	0x2002e1d4
 8003ec8:	08019034 	.word	0x08019034
 8003ecc:	08005809 	.word	0x08005809
 8003ed0:	2002e244 	.word	0x2002e244
 8003ed4:	08019058 	.word	0x08019058
 8003ed8:	0800581d 	.word	0x0800581d
 8003edc:	2002e230 	.word	0x2002e230
 8003ee0:	0801907c 	.word	0x0801907c
 8003ee4:	08005d15 	.word	0x08005d15
 8003ee8:	2002e240 	.word	0x2002e240

08003eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b0ae      	sub	sp, #184	; 0xb8
 8003ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ef2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003ef6:	2248      	movs	r2, #72	; 0x48
 8003ef8:	2100      	movs	r1, #0
 8003efa:	4618      	mov	r0, r3
 8003efc:	f00f faa1 	bl	8013442 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	605a      	str	r2, [r3, #4]
 8003f0a:	609a      	str	r2, [r3, #8]
 8003f0c:	60da      	str	r2, [r3, #12]
 8003f0e:	611a      	str	r2, [r3, #16]
 8003f10:	615a      	str	r2, [r3, #20]
 8003f12:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f14:	1d3b      	adds	r3, r7, #4
 8003f16:	2250      	movs	r2, #80	; 0x50
 8003f18:	2100      	movs	r1, #0
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f00f fa91 	bl	8013442 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003f20:	f004 fc70 	bl	8008804 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003f24:	2000      	movs	r0, #0
 8003f26:	f7ff fe09 	bl	8003b3c <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f2a:	4b2f      	ldr	r3, [pc, #188]	; (8003fe8 <SystemClock_Config+0xfc>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f32:	4a2d      	ldr	r2, [pc, #180]	; (8003fe8 <SystemClock_Config+0xfc>)
 8003f34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	4b2b      	ldr	r3, [pc, #172]	; (8003fe8 <SystemClock_Config+0xfc>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8003f46:	2307      	movs	r3, #7
 8003f48:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f4e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003f50:	2301      	movs	r3, #1
 8003f52:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f58:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f5a:	2340      	movs	r3, #64	; 0x40
 8003f5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003f60:	2300      	movs	r3, #0
 8003f62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f66:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f004 ffea 	bl	8008f44 <HAL_RCC_OscConfig>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8003f76:	f002 f8f5 	bl	8006164 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8003f7a:	236f      	movs	r3, #111	; 0x6f
 8003f7c:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003f7e:	2302      	movs	r3, #2
 8003f80:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f82:	2300      	movs	r3, #0
 8003f84:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003f86:	2300      	movs	r3, #0
 8003f88:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003f92:	2300      	movs	r3, #0
 8003f94:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003f96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f005 fb5d 	bl	800965c <HAL_RCC_ClockConfig>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003fa8:	f002 f8dc 	bl	8006164 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8003fac:	f643 0303 	movw	r3, #14339	; 0x3803
 8003fb0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003fba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fbe:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8003fc0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003fc4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8003fca:	2310      	movs	r3, #16
 8003fcc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fce:	1d3b      	adds	r3, r7, #4
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f005 ff9e 	bl	8009f12 <HAL_RCCEx_PeriphCLKConfig>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8003fdc:	f002 f8c2 	bl	8006164 <Error_Handler>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  /* USER CODE END Smps */
}
 8003fe0:	bf00      	nop
 8003fe2:	37b8      	adds	r7, #184	; 0xb8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	58000400 	.word	0x58000400

08003fec <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003ff0:	4b1b      	ldr	r3, [pc, #108]	; (8004060 <MX_I2C1_Init+0x74>)
 8003ff2:	4a1c      	ldr	r2, [pc, #112]	; (8004064 <MX_I2C1_Init+0x78>)
 8003ff4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8003ff6:	4b1a      	ldr	r3, [pc, #104]	; (8004060 <MX_I2C1_Init+0x74>)
 8003ff8:	4a1b      	ldr	r2, [pc, #108]	; (8004068 <MX_I2C1_Init+0x7c>)
 8003ffa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003ffc:	4b18      	ldr	r3, [pc, #96]	; (8004060 <MX_I2C1_Init+0x74>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004002:	4b17      	ldr	r3, [pc, #92]	; (8004060 <MX_I2C1_Init+0x74>)
 8004004:	2201      	movs	r2, #1
 8004006:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004008:	4b15      	ldr	r3, [pc, #84]	; (8004060 <MX_I2C1_Init+0x74>)
 800400a:	2200      	movs	r2, #0
 800400c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800400e:	4b14      	ldr	r3, [pc, #80]	; (8004060 <MX_I2C1_Init+0x74>)
 8004010:	2200      	movs	r2, #0
 8004012:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004014:	4b12      	ldr	r3, [pc, #72]	; (8004060 <MX_I2C1_Init+0x74>)
 8004016:	2200      	movs	r2, #0
 8004018:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800401a:	4b11      	ldr	r3, [pc, #68]	; (8004060 <MX_I2C1_Init+0x74>)
 800401c:	2200      	movs	r2, #0
 800401e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004020:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <MX_I2C1_Init+0x74>)
 8004022:	2200      	movs	r2, #0
 8004024:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004026:	480e      	ldr	r0, [pc, #56]	; (8004060 <MX_I2C1_Init+0x74>)
 8004028:	f003 fc24 	bl	8007874 <HAL_I2C_Init>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004032:	f002 f897 	bl	8006164 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004036:	2100      	movs	r1, #0
 8004038:	4809      	ldr	r0, [pc, #36]	; (8004060 <MX_I2C1_Init+0x74>)
 800403a:	f004 fb4b 	bl	80086d4 <HAL_I2CEx_ConfigAnalogFilter>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004044:	f002 f88e 	bl	8006164 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004048:	2100      	movs	r1, #0
 800404a:	4805      	ldr	r0, [pc, #20]	; (8004060 <MX_I2C1_Init+0x74>)
 800404c:	f004 fb8d 	bl	800876a <HAL_I2CEx_ConfigDigitalFilter>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004056:	f002 f885 	bl	8006164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800405a:	bf00      	nop
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	2002e1dc 	.word	0x2002e1dc
 8004064:	40005400 	.word	0x40005400
 8004068:	00300f38 	.word	0x00300f38

0800406c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8004070:	bf00      	nop
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
	...

0800407c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004082:	4b2b      	ldr	r3, [pc, #172]	; (8004130 <MX_RTC_Init+0xb4>)
 8004084:	4a2b      	ldr	r2, [pc, #172]	; (8004134 <MX_RTC_Init+0xb8>)
 8004086:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004088:	4b29      	ldr	r3, [pc, #164]	; (8004130 <MX_RTC_Init+0xb4>)
 800408a:	2200      	movs	r2, #0
 800408c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800408e:	4b28      	ldr	r3, [pc, #160]	; (8004130 <MX_RTC_Init+0xb4>)
 8004090:	227f      	movs	r2, #127	; 0x7f
 8004092:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004094:	4b26      	ldr	r3, [pc, #152]	; (8004130 <MX_RTC_Init+0xb4>)
 8004096:	22ff      	movs	r2, #255	; 0xff
 8004098:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800409a:	4b25      	ldr	r3, [pc, #148]	; (8004130 <MX_RTC_Init+0xb4>)
 800409c:	2200      	movs	r2, #0
 800409e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80040a0:	4b23      	ldr	r3, [pc, #140]	; (8004130 <MX_RTC_Init+0xb4>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80040a6:	4b22      	ldr	r3, [pc, #136]	; (8004130 <MX_RTC_Init+0xb4>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80040ac:	4b20      	ldr	r3, [pc, #128]	; (8004130 <MX_RTC_Init+0xb4>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80040b2:	481f      	ldr	r0, [pc, #124]	; (8004130 <MX_RTC_Init+0xb4>)
 80040b4:	f006 f9b3 	bl	800a41e <HAL_RTC_Init>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80040be:	f002 f851 	bl	8006164 <Error_Handler>
  /* Enable RTC registers write protection */
  //LL_RTC_EnableWriteProtection(RTC);

  /** Initialize RTC and set the Time and Date
    */
    RTC_TimeTypeDef sTime = {0};
 80040c2:	1d3b      	adds	r3, r7, #4
 80040c4:	2200      	movs	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	605a      	str	r2, [r3, #4]
 80040ca:	609a      	str	r2, [r3, #8]
 80040cc:	60da      	str	r2, [r3, #12]
 80040ce:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 80040d0:	2300      	movs	r3, #0
 80040d2:	603b      	str	r3, [r7, #0]

    sTime.Hours = 0x11;
 80040d4:	2311      	movs	r3, #17
 80040d6:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 0x59;
 80040d8:	2359      	movs	r3, #89	; 0x59
 80040da:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 0x29;
 80040dc:	2329      	movs	r3, #41	; 0x29
 80040de:	71bb      	strb	r3, [r7, #6]
    sTime.SubSeconds = 0x0;
 80040e0:	2300      	movs	r3, #0
 80040e2:	60bb      	str	r3, [r7, #8]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80040e4:	2300      	movs	r3, #0
 80040e6:	613b      	str	r3, [r7, #16]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80040ec:	1d3b      	adds	r3, r7, #4
 80040ee:	2201      	movs	r2, #1
 80040f0:	4619      	mov	r1, r3
 80040f2:	480f      	ldr	r0, [pc, #60]	; (8004130 <MX_RTC_Init+0xb4>)
 80040f4:	f006 fa31 	bl	800a55a <HAL_RTC_SetTime>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <MX_RTC_Init+0x86>
    {
      Error_Handler();
 80040fe:	f002 f831 	bl	8006164 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8004102:	2302      	movs	r3, #2
 8004104:	703b      	strb	r3, [r7, #0]
    sDate.Month = RTC_MONTH_MARCH;
 8004106:	2303      	movs	r3, #3
 8004108:	707b      	strb	r3, [r7, #1]
    sDate.Date = 0x29;
 800410a:	2329      	movs	r3, #41	; 0x29
 800410c:	70bb      	strb	r3, [r7, #2]
    sDate.Year = 0x20;
 800410e:	2320      	movs	r3, #32
 8004110:	70fb      	strb	r3, [r7, #3]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004112:	463b      	mov	r3, r7
 8004114:	2201      	movs	r2, #1
 8004116:	4619      	mov	r1, r3
 8004118:	4805      	ldr	r0, [pc, #20]	; (8004130 <MX_RTC_Init+0xb4>)
 800411a:	f006 fb3e 	bl	800a79a <HAL_RTC_SetDate>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <MX_RTC_Init+0xac>
    {
      Error_Handler();
 8004124:	f002 f81e 	bl	8006164 <Error_Handler>
    }


  /* USER CODE END RTC_Init 2 */

}
 8004128:	bf00      	nop
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	2002e0a4 	.word	0x2002e0a4
 8004134:	40002800 	.word	0x40002800

08004138 <MX_SPI1_Init>:

/* USER CODE BEGIN 4 */
static void MX_SPI1_Init(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800413c:	4b1b      	ldr	r3, [pc, #108]	; (80041ac <MX_SPI1_Init+0x74>)
 800413e:	4a1c      	ldr	r2, [pc, #112]	; (80041b0 <MX_SPI1_Init+0x78>)
 8004140:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004142:	4b1a      	ldr	r3, [pc, #104]	; (80041ac <MX_SPI1_Init+0x74>)
 8004144:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004148:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800414a:	4b18      	ldr	r3, [pc, #96]	; (80041ac <MX_SPI1_Init+0x74>)
 800414c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004150:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004152:	4b16      	ldr	r3, [pc, #88]	; (80041ac <MX_SPI1_Init+0x74>)
 8004154:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004158:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800415a:	4b14      	ldr	r3, [pc, #80]	; (80041ac <MX_SPI1_Init+0x74>)
 800415c:	2200      	movs	r2, #0
 800415e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004160:	4b12      	ldr	r3, [pc, #72]	; (80041ac <MX_SPI1_Init+0x74>)
 8004162:	2200      	movs	r2, #0
 8004164:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004166:	4b11      	ldr	r3, [pc, #68]	; (80041ac <MX_SPI1_Init+0x74>)
 8004168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800416c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800416e:	4b0f      	ldr	r3, [pc, #60]	; (80041ac <MX_SPI1_Init+0x74>)
 8004170:	2200      	movs	r2, #0
 8004172:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004174:	4b0d      	ldr	r3, [pc, #52]	; (80041ac <MX_SPI1_Init+0x74>)
 8004176:	2200      	movs	r2, #0
 8004178:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800417a:	4b0c      	ldr	r3, [pc, #48]	; (80041ac <MX_SPI1_Init+0x74>)
 800417c:	2200      	movs	r2, #0
 800417e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004180:	4b0a      	ldr	r3, [pc, #40]	; (80041ac <MX_SPI1_Init+0x74>)
 8004182:	2200      	movs	r2, #0
 8004184:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004186:	4b09      	ldr	r3, [pc, #36]	; (80041ac <MX_SPI1_Init+0x74>)
 8004188:	2207      	movs	r2, #7
 800418a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800418c:	4b07      	ldr	r3, [pc, #28]	; (80041ac <MX_SPI1_Init+0x74>)
 800418e:	2200      	movs	r2, #0
 8004190:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004192:	4b06      	ldr	r3, [pc, #24]	; (80041ac <MX_SPI1_Init+0x74>)
 8004194:	2208      	movs	r2, #8
 8004196:	635a      	str	r2, [r3, #52]	; 0x34

  //hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  //hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;

  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004198:	4804      	ldr	r0, [pc, #16]	; (80041ac <MX_SPI1_Init+0x74>)
 800419a:	f006 fcbb 	bl	800ab14 <HAL_SPI_Init>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80041a4:	f001 ffde 	bl	8006164 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80041a8:	bf00      	nop
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	2002e2a0 	.word	0x2002e2a0
 80041b0:	40013000 	.word	0x40013000

080041b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b09c      	sub	sp, #112	; 0x70
 80041b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041ba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	605a      	str	r2, [r3, #4]
 80041c4:	609a      	str	r2, [r3, #8]
 80041c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	605a      	str	r2, [r3, #4]
 80041d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	605a      	str	r2, [r3, #4]
 80041de:	609a      	str	r2, [r3, #8]
 80041e0:	60da      	str	r2, [r3, #12]
 80041e2:	611a      	str	r2, [r3, #16]
 80041e4:	615a      	str	r2, [r3, #20]
 80041e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80041e8:	1d3b      	adds	r3, r7, #4
 80041ea:	2234      	movs	r2, #52	; 0x34
 80041ec:	2100      	movs	r1, #0
 80041ee:	4618      	mov	r0, r3
 80041f0:	f00f f927 	bl	8013442 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80041f4:	4b45      	ldr	r3, [pc, #276]	; (800430c <MX_TIM1_Init+0x158>)
 80041f6:	4a46      	ldr	r2, [pc, #280]	; (8004310 <MX_TIM1_Init+0x15c>)
 80041f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80041fa:	4b44      	ldr	r3, [pc, #272]	; (800430c <MX_TIM1_Init+0x158>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004200:	4b42      	ldr	r3, [pc, #264]	; (800430c <MX_TIM1_Init+0x158>)
 8004202:	2200      	movs	r2, #0
 8004204:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8004206:	4b41      	ldr	r3, [pc, #260]	; (800430c <MX_TIM1_Init+0x158>)
 8004208:	2264      	movs	r2, #100	; 0x64
 800420a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800420c:	4b3f      	ldr	r3, [pc, #252]	; (800430c <MX_TIM1_Init+0x158>)
 800420e:	2200      	movs	r2, #0
 8004210:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004212:	4b3e      	ldr	r3, [pc, #248]	; (800430c <MX_TIM1_Init+0x158>)
 8004214:	2200      	movs	r2, #0
 8004216:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004218:	4b3c      	ldr	r3, [pc, #240]	; (800430c <MX_TIM1_Init+0x158>)
 800421a:	2200      	movs	r2, #0
 800421c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800421e:	483b      	ldr	r0, [pc, #236]	; (800430c <MX_TIM1_Init+0x158>)
 8004220:	f006 ffe6 	bl	800b1f0 <HAL_TIM_Base_Init>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800422a:	f001 ff9b 	bl	8006164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800422e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004232:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004234:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004238:	4619      	mov	r1, r3
 800423a:	4834      	ldr	r0, [pc, #208]	; (800430c <MX_TIM1_Init+0x158>)
 800423c:	f007 fc72 	bl	800bb24 <HAL_TIM_ConfigClockSource>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004246:	f001 ff8d 	bl	8006164 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800424a:	4830      	ldr	r0, [pc, #192]	; (800430c <MX_TIM1_Init+0x158>)
 800424c:	f007 f876 	bl	800b33c <HAL_TIM_PWM_Init>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004256:	f001 ff85 	bl	8006164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800425a:	2300      	movs	r3, #0
 800425c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800425e:	2300      	movs	r3, #0
 8004260:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004262:	2300      	movs	r3, #0
 8004264:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004266:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800426a:	4619      	mov	r1, r3
 800426c:	4827      	ldr	r0, [pc, #156]	; (800430c <MX_TIM1_Init+0x158>)
 800426e:	f008 f8df 	bl	800c430 <HAL_TIMEx_MasterConfigSynchronization>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8004278:	f001 ff74 	bl	8006164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800427c:	2360      	movs	r3, #96	; 0x60
 800427e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 100;
 8004280:	2364      	movs	r3, #100	; 0x64
 8004282:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004284:	2300      	movs	r3, #0
 8004286:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004288:	2300      	movs	r3, #0
 800428a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800428c:	2304      	movs	r3, #4
 800428e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004290:	2300      	movs	r3, #0
 8004292:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004294:	2300      	movs	r3, #0
 8004296:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004298:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800429c:	2200      	movs	r2, #0
 800429e:	4619      	mov	r1, r3
 80042a0:	481a      	ldr	r0, [pc, #104]	; (800430c <MX_TIM1_Init+0x158>)
 80042a2:	f007 fb2f 	bl	800b904 <HAL_TIM_PWM_ConfigChannel>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80042ac:	f001 ff5a 	bl	8006164 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80042b0:	2300      	movs	r3, #0
 80042b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80042b4:	2300      	movs	r3, #0
 80042b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80042b8:	2300      	movs	r3, #0
 80042ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80042bc:	2300      	movs	r3, #0
 80042be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80042c0:	2300      	movs	r3, #0
 80042c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80042c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80042ca:	2300      	movs	r3, #0
 80042cc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80042ce:	2300      	movs	r3, #0
 80042d0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80042d2:	2300      	movs	r3, #0
 80042d4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80042d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042da:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80042dc:	2300      	movs	r3, #0
 80042de:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80042e0:	2300      	movs	r3, #0
 80042e2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80042e4:	2300      	movs	r3, #0
 80042e6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80042e8:	1d3b      	adds	r3, r7, #4
 80042ea:	4619      	mov	r1, r3
 80042ec:	4807      	ldr	r0, [pc, #28]	; (800430c <MX_TIM1_Init+0x158>)
 80042ee:	f008 f8ff 	bl	800c4f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80042f8:	f001 ff34 	bl	8006164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80042fc:	4803      	ldr	r0, [pc, #12]	; (800430c <MX_TIM1_Init+0x158>)
 80042fe:	f002 f9ad 	bl	800665c <HAL_TIM_MspPostInit>

}
 8004302:	bf00      	nop
 8004304:	3770      	adds	r7, #112	; 0x70
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	2002e248 	.word	0x2002e248
 8004310:	40012c00 	.word	0x40012c00

08004314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800431a:	1d3b      	adds	r3, r7, #4
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	605a      	str	r2, [r3, #4]
 8004322:	609a      	str	r2, [r3, #8]
 8004324:	60da      	str	r2, [r3, #12]
 8004326:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004328:	2004      	movs	r0, #4
 800432a:	f7ff fc65 	bl	8003bf8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800432e:	2002      	movs	r0, #2
 8004330:	f7ff fc62 	bl	8003bf8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004334:	2001      	movs	r0, #1
 8004336:	f7ff fc5f 	bl	8003bf8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_RESET);
 800433a:	2200      	movs	r2, #0
 800433c:	2101      	movs	r1, #1
 800433e:	4824      	ldr	r0, [pc, #144]	; (80043d0 <MX_GPIO_Init+0xbc>)
 8004340:	f003 fa44 	bl	80077cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OLED_RESET_Pin */
  GPIO_InitStruct.Pin = OLED_RESET_Pin;
 8004344:	2301      	movs	r3, #1
 8004346:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004348:	2301      	movs	r3, #1
 800434a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434c:	2300      	movs	r3, #0
 800434e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004350:	2300      	movs	r3, #0
 8004352:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(OLED_RESET_GPIO_Port, &GPIO_InitStruct);
 8004354:	1d3b      	adds	r3, r7, #4
 8004356:	4619      	mov	r1, r3
 8004358:	481d      	ldr	r0, [pc, #116]	; (80043d0 <MX_GPIO_Init+0xbc>)
 800435a:	f003 f8af 	bl	80074bc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 800435e:	2338      	movs	r3, #56	; 0x38
 8004360:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004362:	4b1c      	ldr	r3, [pc, #112]	; (80043d4 <MX_GPIO_Init+0xc0>)
 8004364:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004366:	2301      	movs	r3, #1
 8004368:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800436a:	1d3b      	adds	r3, r7, #4
 800436c:	4619      	mov	r1, r3
 800436e:	4818      	ldr	r0, [pc, #96]	; (80043d0 <MX_GPIO_Init+0xbc>)
 8004370:	f003 f8a4 	bl	80074bc <HAL_GPIO_Init>

  /*Configure SPI_NSS pin to be GPIO, pulled up*/
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004374:	2310      	movs	r3, #16
 8004376:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004378:	2301      	movs	r3, #1
 800437a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800437c:	2301      	movs	r3, #1
 800437e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004380:	1d3b      	adds	r3, r7, #4
 8004382:	4619      	mov	r1, r3
 8004384:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004388:	f003 f898 	bl	80074bc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800438c:	2201      	movs	r2, #1
 800438e:	2110      	movs	r1, #16
 8004390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004394:	f003 fa1a 	bl	80077cc <HAL_GPIO_WritePin>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 15, 0);
 8004398:	2200      	movs	r2, #0
 800439a:	210f      	movs	r1, #15
 800439c:	2009      	movs	r0, #9
 800439e:	f003 f83b 	bl	8007418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80043a2:	2009      	movs	r0, #9
 80043a4:	f003 f852 	bl	800744c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 80043a8:	2200      	movs	r2, #0
 80043aa:	210f      	movs	r1, #15
 80043ac:	200a      	movs	r0, #10
 80043ae:	f003 f833 	bl	8007418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80043b2:	200a      	movs	r0, #10
 80043b4:	f003 f84a 	bl	800744c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 15, 0);
 80043b8:	2200      	movs	r2, #0
 80043ba:	210f      	movs	r1, #15
 80043bc:	2017      	movs	r0, #23
 80043be:	f003 f82b 	bl	8007418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80043c2:	2017      	movs	r0, #23
 80043c4:	f003 f842 	bl	800744c <HAL_NVIC_EnableIRQ>

}
 80043c8:	bf00      	nop
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	48000400 	.word	0x48000400
 80043d4:	10310000 	.word	0x10310000

080043d8 <GlobalState_Init>:

/* USER CODE BEGIN 4 */


static void GlobalState_Init(){
 80043d8:	b5b0      	push	{r4, r5, r7, lr}
 80043da:	b08a      	sub	sp, #40	; 0x28
 80043dc:	af00      	add	r7, sp, #0
	GlobalState.timeBound.startHR_BCD = 0x10; //10AM, BCD
 80043de:	4b37      	ldr	r3, [pc, #220]	; (80044bc <GlobalState_Init+0xe4>)
 80043e0:	2210      	movs	r2, #16
 80043e2:	701a      	strb	r2, [r3, #0]
	GlobalState.timeBound.endHR_BCD = 0x22;   //10PM, BCD
 80043e4:	4b35      	ldr	r3, [pc, #212]	; (80044bc <GlobalState_Init+0xe4>)
 80043e6:	2222      	movs	r2, #34	; 0x22
 80043e8:	705a      	strb	r2, [r3, #1]
	GlobalState.timeBound.minInterval = INTERVAL_MIN;   //15min min interval
 80043ea:	4b34      	ldr	r3, [pc, #208]	; (80044bc <GlobalState_Init+0xe4>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	709a      	strb	r2, [r3, #2]
	GlobalState.timeBound.maxInterval = INTERVAL_MAX;   //90min max interval
 80043f0:	4b32      	ldr	r3, [pc, #200]	; (80044bc <GlobalState_Init+0xe4>)
 80043f2:	2201      	movs	r2, #1
 80043f4:	70da      	strb	r2, [r3, #3]

	RTC_TimeTypeDef tempTime;
	RTC_DateTypeDef tempDate;
	HAL_RTC_GetTime(&hrtc, &tempTime, RTC_FORMAT_BCD);
 80043f6:	f107 0314 	add.w	r3, r7, #20
 80043fa:	2201      	movs	r2, #1
 80043fc:	4619      	mov	r1, r3
 80043fe:	4830      	ldr	r0, [pc, #192]	; (80044c0 <GlobalState_Init+0xe8>)
 8004400:	f006 f96f 	bl	800a6e2 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &tempDate, RTC_FORMAT_BCD);
 8004404:	f107 0310 	add.w	r3, r7, #16
 8004408:	2201      	movs	r2, #1
 800440a:	4619      	mov	r1, r3
 800440c:	482c      	ldr	r0, [pc, #176]	; (80044c0 <GlobalState_Init+0xe8>)
 800440e:	f006 fa72 	bl	800a8f6 <HAL_RTC_GetDate>

	//shallow structs so no issues with assignment
	GlobalState.lastSeenTime.time = tempTime;
 8004412:	4b2a      	ldr	r3, [pc, #168]	; (80044bc <GlobalState_Init+0xe4>)
 8004414:	1d1c      	adds	r4, r3, #4
 8004416:	f107 0514 	add.w	r5, r7, #20
 800441a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800441c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800441e:	682b      	ldr	r3, [r5, #0]
 8004420:	6023      	str	r3, [r4, #0]
	GlobalState.lastSeenTime.date = tempDate;
 8004422:	4a26      	ldr	r2, [pc, #152]	; (80044bc <GlobalState_Init+0xe4>)
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	6193      	str	r3, [r2, #24]

	//GlobalState.timeEstimateSample.time = tempTime;
	//GlobalState.timeEstimateSample.date = tempDate;

	GlobalState.lastConditions.lux = 0.0;
 8004428:	4b24      	ldr	r3, [pc, #144]	; (80044bc <GlobalState_Init+0xe4>)
 800442a:	f04f 0200 	mov.w	r2, #0
 800442e:	61da      	str	r2, [r3, #28]
	GlobalState.lastConditions.whiteLux = 0.0;
 8004430:	4b22      	ldr	r3, [pc, #136]	; (80044bc <GlobalState_Init+0xe4>)
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	621a      	str	r2, [r3, #32]
	GlobalState.lastConditions.temp = 0.0;
 8004438:	4b20      	ldr	r3, [pc, #128]	; (80044bc <GlobalState_Init+0xe4>)
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	625a      	str	r2, [r3, #36]	; 0x24
	GlobalState.lastConditions.humd = 0.0;
 8004440:	4b1e      	ldr	r3, [pc, #120]	; (80044bc <GlobalState_Init+0xe4>)
 8004442:	f04f 0200 	mov.w	r2, #0
 8004446:	629a      	str	r2, [r3, #40]	; 0x28

	GlobalState.programMode = 0;
 8004448:	4b1c      	ldr	r3, [pc, #112]	; (80044bc <GlobalState_Init+0xe4>)
 800444a:	2200      	movs	r2, #0
 800444c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	GlobalState.surveyState.surveyID = SURVEY_NONE;
 8004450:	4b1a      	ldr	r3, [pc, #104]	; (80044bc <GlobalState_Init+0xe4>)
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	char temp_string[10] = "  DRAMSAY.";
 8004458:	4a1a      	ldr	r2, [pc, #104]	; (80044c4 <GlobalState_Init+0xec>)
 800445a:	1d3b      	adds	r3, r7, #4
 800445c:	ca07      	ldmia	r2, {r0, r1, r2}
 800445e:	c303      	stmia	r3!, {r0, r1}
 8004460:	801a      	strh	r2, [r3, #0]
	strncpy(GlobalState.surveyState.screenText, temp_string, strlen(temp_string)+1);
 8004462:	1d3b      	adds	r3, r7, #4
 8004464:	4618      	mov	r0, r3
 8004466:	f7fb fe8b 	bl	8000180 <strlen>
 800446a:	4603      	mov	r3, r0
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	1d3b      	adds	r3, r7, #4
 8004470:	4619      	mov	r1, r3
 8004472:	4815      	ldr	r0, [pc, #84]	; (80044c8 <GlobalState_Init+0xf0>)
 8004474:	f00f fd0a 	bl	8013e8c <strncpy>
	GlobalState.surveyState.screenTextLength = strlen(temp_string);
 8004478:	1d3b      	adds	r3, r7, #4
 800447a:	4618      	mov	r0, r3
 800447c:	f7fb fe80 	bl	8000180 <strlen>
 8004480:	4603      	mov	r3, r0
 8004482:	b2da      	uxtb	r2, r3
 8004484:	4b0d      	ldr	r3, [pc, #52]	; (80044bc <GlobalState_Init+0xe4>)
 8004486:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	memset(GlobalState.surveyState.optionArray, 0, sizeof(GlobalState.surveyState.optionArray));
 800448a:	221c      	movs	r2, #28
 800448c:	2100      	movs	r1, #0
 800448e:	480f      	ldr	r0, [pc, #60]	; (80044cc <GlobalState_Init+0xf4>)
 8004490:	f00e ffd7 	bl	8013442 <memset>
	GlobalState.surveyState.optionArrayLength = 0;
 8004494:	4b09      	ldr	r3, [pc, #36]	; (80044bc <GlobalState_Init+0xe4>)
 8004496:	2200      	movs	r2, #0
 8004498:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0

	GlobalState.currentInterval = 0;
 800449c:	4b07      	ldr	r3, [pc, #28]	; (80044bc <GlobalState_Init+0xe4>)
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	GlobalState.paused = 0;
 80044a4:	4b05      	ldr	r3, [pc, #20]	; (80044bc <GlobalState_Init+0xe4>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	GlobalState.demo = 0;
 80044ac:	4b03      	ldr	r3, [pc, #12]	; (80044bc <GlobalState_Init+0xe4>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
}
 80044b4:	bf00      	nop
 80044b6:	3728      	adds	r7, #40	; 0x28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bdb0      	pop	{r4, r5, r7, pc}
 80044bc:	2002e0cc 	.word	0x2002e0cc
 80044c0:	2002e0a4 	.word	0x2002e0a4
 80044c4:	08017e10 	.word	0x08017e10
 80044c8:	2002e0fd 	.word	0x2002e0fd
 80044cc:	2002e180 	.word	0x2002e180

080044d0 <HAL_GPIO_EXTI_Callback>:

static inline void clear_bit(long *x, int bitNum) {
    *x &= (~(1L << bitNum));
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af02      	add	r7, sp, #8
 80044d6:	4603      	mov	r3, r0
 80044d8:	80fb      	strh	r3, [r7, #6]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80044da:	2300      	movs	r3, #0
 80044dc:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(buttonPressHandle, GPIO_Pin, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 80044de:	4b0c      	ldr	r3, [pc, #48]	; (8004510 <HAL_GPIO_EXTI_Callback+0x40>)
 80044e0:	6818      	ldr	r0, [r3, #0]
 80044e2:	88f9      	ldrh	r1, [r7, #6]
 80044e4:	f107 030c 	add.w	r3, r7, #12
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	2300      	movs	r3, #0
 80044ec:	2203      	movs	r2, #3
 80044ee:	f00e fa9b 	bl	8012a28 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d007      	beq.n	8004508 <HAL_GPIO_EXTI_Callback+0x38>
 80044f8:	4b06      	ldr	r3, [pc, #24]	; (8004514 <HAL_GPIO_EXTI_Callback+0x44>)
 80044fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	f3bf 8f6f 	isb	sy

}
 8004508:	bf00      	nop
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	2002e1d4 	.word	0x2002e1d4
 8004514:	e000ed04 	.word	0xe000ed04

08004518 <startUIControl>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header startUIControl */
void startUIControl(void *argument)
{
 8004518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800451a:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800451e:	af10      	add	r7, sp, #64	; 0x40
 8004520:	1d3b      	adds	r3, r7, #4
 8004522:	6018      	str	r0, [r3, #0]


  int duty_cycle = 79; //0 is off, up to ~80
 8004524:	234f      	movs	r3, #79	; 0x4f
 8004526:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
  htim1.Instance->CCR2 = duty_cycle;
 800452a:	4b64      	ldr	r3, [pc, #400]	; (80046bc <startUIControl+0x1a4>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8004532:	639a      	str	r2, [r3, #56]	; 0x38

	//Dotstar Init
	DotStar_InitHandle dotstar;
	dotstar.spiHandle = &hspi1;
 8004534:	4b62      	ldr	r3, [pc, #392]	; (80046c0 <startUIControl+0x1a8>)
 8004536:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	dotstar.numLEDs = NUM_PIXELS;
 800453a:	230c      	movs	r3, #12
 800453c:	f8a7 31e0 	strh.w	r3, [r7, #480]	; 0x1e0
	dotstar.colorOrder = DOTSTAR_BGR;
 8004540:	2306      	movs	r3, #6
 8004542:	f887 31e2 	strb.w	r3, [r7, #482]	; 0x1e2
	Dotstar_Init(&dotstar);
 8004546:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 800454a:	4618      	mov	r0, r3
 800454c:	f7fd fd62 	bl	8002014 <Dotstar_Init>

	ds_clear();  //turn off
 8004550:	f7fd fe4c 	bl	80021ec <ds_clear>
	ds_show();
 8004554:	f7fd fdae 	bl	80020b4 <ds_show>

	const uint8_t MAX_BRIGHTNESS = 0xFF; //max brightness, 0x01-0xFF
 8004558:	23ff      	movs	r3, #255	; 0xff
 800455a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

	ds_setBrightness(0);
 800455e:	2000      	movs	r0, #0
 8004560:	f7fd fed4 	bl	800230c <ds_setBrightness>

  /* USER CODE BEGIN 5 */
  HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_SET);
 8004564:	2201      	movs	r2, #1
 8004566:	2101      	movs	r1, #1
 8004568:	4856      	ldr	r0, [pc, #344]	; (80046c4 <startUIControl+0x1ac>)
 800456a:	f003 f92f 	bl	80077cc <HAL_GPIO_WritePin>

  uint8_t oled_buf[WIDTH * HEIGHT / 8];

  er_oled_begin();
 800456e:	f7fd fefd 	bl	800236c <er_oled_begin>
  er_oled_clear(oled_buf);
 8004572:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004576:	4618      	mov	r0, r3
 8004578:	f7fd ff60 	bl	800243c <er_oled_clear>
  er_oled_string(0, 10, "  DRAMSAY.", 12, 1, oled_buf);
 800457c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004580:	9301      	str	r3, [sp, #4]
 8004582:	2301      	movs	r3, #1
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	230c      	movs	r3, #12
 8004588:	4a4f      	ldr	r2, [pc, #316]	; (80046c8 <startUIControl+0x1b0>)
 800458a:	210a      	movs	r1, #10
 800458c:	2000      	movs	r0, #0
 800458e:	f7fe f8c5 	bl	800271c <er_oled_string>
  er_oled_string(0, 28, "resenv | mit", 12, 1, oled_buf);
 8004592:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004596:	9301      	str	r3, [sp, #4]
 8004598:	2301      	movs	r3, #1
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	230c      	movs	r3, #12
 800459e:	4a4b      	ldr	r2, [pc, #300]	; (80046cc <startUIControl+0x1b4>)
 80045a0:	211c      	movs	r1, #28
 80045a2:	2000      	movs	r0, #0
 80045a4:	f7fe f8ba 	bl	800271c <er_oled_string>
  er_oled_display(oled_buf);
 80045a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7fe f8f6 	bl	800279e <er_oled_display>


    osDelay(100);
 80045b2:	2064      	movs	r0, #100	; 0x64
 80045b4:	f00a ff02 	bl	800f3bc <osDelay>
    uint16_t counter;
    uint32_t color;
    uint8_t r,g,b;

  	//start vibration
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80045b8:	2100      	movs	r1, #0
 80045ba:	4840      	ldr	r0, [pc, #256]	; (80046bc <startUIControl+0x1a4>)
 80045bc:	f006 ff20 	bl	800b400 <HAL_TIM_PWM_Start>

  	osDelay(pdMS_TO_TICKS(300)); //300ms delay
 80045c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80045c4:	f00a fefa 	bl	800f3bc <osDelay>

  	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80045c8:	2100      	movs	r1, #0
 80045ca:	483c      	ldr	r0, [pc, #240]	; (80046bc <startUIControl+0x1a4>)
 80045cc:	f006 fff2 	bl	800b5b4 <HAL_TIM_PWM_Stop>


    counter = 0;
 80045d0:	2300      	movs	r3, #0
 80045d2:	f8a7 321e 	strh.w	r3, [r7, #542]	; 0x21e
    r = 0xFF;
 80045d6:	23ff      	movs	r3, #255	; 0xff
 80045d8:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 	g = 0xFF;
 80045dc:	23ff      	movs	r3, #255	; 0xff
 80045de:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
 	b = 0xFF;
 80045e2:	23ff      	movs	r3, #255	; 0xff
 80045e4:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215

  	ds_setBrightness(MAX_BRIGHTNESS);
 80045e8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7fd fe8d 	bl	800230c <ds_setBrightness>
  	for(int l=0;l<24*4;l++) {
 80045f2:	2300      	movs	r3, #0
 80045f4:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80045f8:	e0d1      	b.n	800479e <startUIControl+0x286>

		for (int i=0; i< NUM_PIXELS; i++){
 80045fa:	2300      	movs	r3, #0
 80045fc:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004600:	e078      	b.n	80046f4 <startUIControl+0x1dc>

			if      (i==(counter+2)%12)	{ color = (r  <<16) | (g  <<8) | b; }
 8004602:	f8b7 321e 	ldrh.w	r3, [r7, #542]	; 0x21e
 8004606:	1c99      	adds	r1, r3, #2
 8004608:	4b31      	ldr	r3, [pc, #196]	; (80046d0 <startUIControl+0x1b8>)
 800460a:	fb83 2301 	smull	r2, r3, r3, r1
 800460e:	105a      	asrs	r2, r3, #1
 8004610:	17cb      	asrs	r3, r1, #31
 8004612:	1ad2      	subs	r2, r2, r3
 8004614:	4613      	mov	r3, r2
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	4413      	add	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	1aca      	subs	r2, r1, r3
 800461e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004622:	4293      	cmp	r3, r2
 8004624:	d10c      	bne.n	8004640 <startUIControl+0x128>
 8004626:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800462a:	041a      	lsls	r2, r3, #16
 800462c:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8004630:	021b      	lsls	r3, r3, #8
 8004632:	431a      	orrs	r2, r3
 8004634:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800463e:	e04c      	b.n	80046da <startUIControl+0x1c2>
			else if (i==(counter+1)%12) { color = (r/2<<16) | (g/2<<8) | b/2; }
 8004640:	f8b7 321e 	ldrh.w	r3, [r7, #542]	; 0x21e
 8004644:	1c59      	adds	r1, r3, #1
 8004646:	4b22      	ldr	r3, [pc, #136]	; (80046d0 <startUIControl+0x1b8>)
 8004648:	fb83 2301 	smull	r2, r3, r3, r1
 800464c:	105a      	asrs	r2, r3, #1
 800464e:	17cb      	asrs	r3, r1, #31
 8004650:	1ad2      	subs	r2, r2, r3
 8004652:	4613      	mov	r3, r2
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	4413      	add	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	1aca      	subs	r2, r1, r3
 800465c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004660:	4293      	cmp	r3, r2
 8004662:	d112      	bne.n	800468a <startUIControl+0x172>
 8004664:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004668:	085b      	lsrs	r3, r3, #1
 800466a:	b2db      	uxtb	r3, r3
 800466c:	041a      	lsls	r2, r3, #16
 800466e:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8004672:	085b      	lsrs	r3, r3, #1
 8004674:	b2db      	uxtb	r3, r3
 8004676:	021b      	lsls	r3, r3, #8
 8004678:	4313      	orrs	r3, r2
 800467a:	f897 2215 	ldrb.w	r2, [r7, #533]	; 0x215
 800467e:	0852      	lsrs	r2, r2, #1
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8004688:	e027      	b.n	80046da <startUIControl+0x1c2>
			else if (i==counter)        { color = (r/4<<16) | (g/4<<8) | b/4; }
 800468a:	f8b7 321e 	ldrh.w	r3, [r7, #542]	; 0x21e
 800468e:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8004692:	429a      	cmp	r2, r3
 8004694:	d11e      	bne.n	80046d4 <startUIControl+0x1bc>
 8004696:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800469a:	089b      	lsrs	r3, r3, #2
 800469c:	b2db      	uxtb	r3, r3
 800469e:	041a      	lsls	r2, r3, #16
 80046a0:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 80046a4:	089b      	lsrs	r3, r3, #2
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	021b      	lsls	r3, r3, #8
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f897 2215 	ldrb.w	r2, [r7, #533]	; 0x215
 80046b0:	0892      	lsrs	r2, r2, #2
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 80046ba:	e00e      	b.n	80046da <startUIControl+0x1c2>
 80046bc:	2002e248 	.word	0x2002e248
 80046c0:	2002e2a0 	.word	0x2002e2a0
 80046c4:	48000400 	.word	0x48000400
 80046c8:	08017e10 	.word	0x08017e10
 80046cc:	08017e38 	.word	0x08017e38
 80046d0:	2aaaaaab 	.word	0x2aaaaaab
			else 						{ color = 0x000000; }
 80046d4:	2300      	movs	r3, #0
 80046d6:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218

			ds_setPixelColor32B(i, color); // 'off' pixel at head
 80046da:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80046de:	b29b      	uxth	r3, r3
 80046e0:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7fd fda5 	bl	8002234 <ds_setPixelColor32B>
		for (int i=0; i< NUM_PIXELS; i++){
 80046ea:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80046ee:	3301      	adds	r3, #1
 80046f0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80046f4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80046f8:	2b0b      	cmp	r3, #11
 80046fa:	dd82      	ble.n	8004602 <startUIControl+0xea>
		}

		ds_show();
 80046fc:	f7fd fcda 	bl	80020b4 <ds_show>
		r = (r + 11) % 0xFF;
 8004700:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004704:	f103 020b 	add.w	r2, r3, #11
 8004708:	4baf      	ldr	r3, [pc, #700]	; (80049c8 <startUIControl+0x4b0>)
 800470a:	fb83 1302 	smull	r1, r3, r3, r2
 800470e:	4413      	add	r3, r2
 8004710:	11d9      	asrs	r1, r3, #7
 8004712:	17d3      	asrs	r3, r2, #31
 8004714:	1ac9      	subs	r1, r1, r3
 8004716:	460b      	mov	r3, r1
 8004718:	021b      	lsls	r3, r3, #8
 800471a:	1a5b      	subs	r3, r3, r1
 800471c:	1ad1      	subs	r1, r2, r3
 800471e:	460b      	mov	r3, r1
 8004720:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		g = (g + 13) % 0xFF;
 8004724:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8004728:	f103 020d 	add.w	r2, r3, #13
 800472c:	4ba6      	ldr	r3, [pc, #664]	; (80049c8 <startUIControl+0x4b0>)
 800472e:	fb83 1302 	smull	r1, r3, r3, r2
 8004732:	4413      	add	r3, r2
 8004734:	11d9      	asrs	r1, r3, #7
 8004736:	17d3      	asrs	r3, r2, #31
 8004738:	1ac9      	subs	r1, r1, r3
 800473a:	460b      	mov	r3, r1
 800473c:	021b      	lsls	r3, r3, #8
 800473e:	1a5b      	subs	r3, r3, r1
 8004740:	1ad1      	subs	r1, r2, r3
 8004742:	460b      	mov	r3, r1
 8004744:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
		b = (b + 17) % 0xFF;
 8004748:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 800474c:	f103 0211 	add.w	r2, r3, #17
 8004750:	4b9d      	ldr	r3, [pc, #628]	; (80049c8 <startUIControl+0x4b0>)
 8004752:	fb83 1302 	smull	r1, r3, r3, r2
 8004756:	4413      	add	r3, r2
 8004758:	11d9      	asrs	r1, r3, #7
 800475a:	17d3      	asrs	r3, r2, #31
 800475c:	1ac9      	subs	r1, r1, r3
 800475e:	460b      	mov	r3, r1
 8004760:	021b      	lsls	r3, r3, #8
 8004762:	1a5b      	subs	r3, r3, r1
 8004764:	1ad1      	subs	r1, r2, r3
 8004766:	460b      	mov	r3, r1
 8004768:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
		counter = (counter+1)%12;
 800476c:	f8b7 321e 	ldrh.w	r3, [r7, #542]	; 0x21e
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	4b96      	ldr	r3, [pc, #600]	; (80049cc <startUIControl+0x4b4>)
 8004774:	fb83 1302 	smull	r1, r3, r3, r2
 8004778:	1059      	asrs	r1, r3, #1
 800477a:	17d3      	asrs	r3, r2, #31
 800477c:	1ac9      	subs	r1, r1, r3
 800477e:	460b      	mov	r3, r1
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	440b      	add	r3, r1
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	1ad1      	subs	r1, r2, r3
 8004788:	460b      	mov	r3, r1
 800478a:	f8a7 321e 	strh.w	r3, [r7, #542]	; 0x21e
		osDelay(pdMS_TO_TICKS(50));
 800478e:	2032      	movs	r0, #50	; 0x32
 8004790:	f00a fe14 	bl	800f3bc <osDelay>
  	for(int l=0;l<24*4;l++) {
 8004794:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004798:	3301      	adds	r3, #1
 800479a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800479e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80047a2:	2b5f      	cmp	r3, #95	; 0x5f
 80047a4:	f77f af29 	ble.w	80045fa <startUIControl+0xe2>
	}

	//turn off LEDs
	ds_setBrightness(0);
 80047a8:	2000      	movs	r0, #0
 80047aa:	f7fd fdaf 	bl	800230c <ds_setBrightness>
	ds_fill(0x000000, 0, 12);
 80047ae:	220c      	movs	r2, #12
 80047b0:	2100      	movs	r1, #0
 80047b2:	2000      	movs	r0, #0
 80047b4:	f7fd fd74 	bl	80022a0 <ds_fill>
	ds_show();
 80047b8:	f7fd fc7c 	bl	80020b4 <ds_show>


  er_oled_clear(oled_buf);
 80047bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7fd fe3b 	bl	800243c <er_oled_clear>
  er_oled_display(oled_buf);
 80047c6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fd ffe7 	bl	800279e <er_oled_display>

  int16_t current_minute = -1;
 80047d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047d4:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204
  int16_t display_minute = -1;
 80047d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047dc:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202
  int16_t last_display_minute = -1;
 80047e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047e4:	f8a7 3200 	strh.w	r3, [r7, #512]	; 0x200
  int16_t minute_history[TOUCH_HISTORY_SIZE] = {0};
 80047e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80047ec:	461a      	mov	r2, r3
 80047ee:	2300      	movs	r3, #0
 80047f0:	6013      	str	r3, [r2, #0]
 80047f2:	6053      	str	r3, [r2, #4]
 80047f4:	6093      	str	r3, [r2, #8]
 80047f6:	60d3      	str	r3, [r2, #12]
 80047f8:	6113      	str	r3, [r2, #16]
  uint8_t history_ind = 0;
 80047fa:	2300      	movs	r3, #0
 80047fc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff

  char display1[12];
  char display2[12];
  char display3[12];

  uint8_t touch_end_count = 0;
 8004800:	2300      	movs	r3, #0
 8004802:	f887 31fe 	strb.w	r3, [r7, #510]	; 0x1fe
  RTC_DateTypeDef cDate;

  BLETX_Queue_t bleSendData;

  //init peripheral (not turbo mode, poll every 250ms, if touch sample at 40Hz until no touch)
  if (setup_iqs263() == HAL_ERROR) {
 8004806:	f7ff f891 	bl	800392c <setup_iqs263>
 800480a:	4603      	mov	r3, r0
 800480c:	2b01      	cmp	r3, #1
 800480e:	d10c      	bne.n	800482a <startUIControl+0x312>
	  strncpy(errorCondition, "ERR:IQS263ST", sizeof(errorCondition));
 8004810:	4a6f      	ldr	r2, [pc, #444]	; (80049d0 <startUIControl+0x4b8>)
 8004812:	4b70      	ldr	r3, [pc, #448]	; (80049d4 <startUIControl+0x4bc>)
 8004814:	4614      	mov	r4, r2
 8004816:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004818:	6020      	str	r0, [r4, #0]
 800481a:	6061      	str	r1, [r4, #4]
 800481c:	60a2      	str	r2, [r4, #8]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	7323      	strb	r3, [r4, #12]
	  GlobalState.programMode = MODE_ERROR;
 8004822:	4b6d      	ldr	r3, [pc, #436]	; (80049d8 <startUIControl+0x4c0>)
 8004824:	2206      	movs	r2, #6
 8004826:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }

  osDelay(500); //let screen start first
 800482a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800482e:	f00a fdc5 	bl	800f3bc <osDelay>

  if (veml_Setup(hi2c1, VEML_5S_POLLING) == HAL_ERROR){
 8004832:	4e6a      	ldr	r6, [pc, #424]	; (80049dc <startUIControl+0x4c4>)
 8004834:	2300      	movs	r3, #0
 8004836:	930f      	str	r3, [sp, #60]	; 0x3c
 8004838:	466d      	mov	r5, sp
 800483a:	f106 0410 	add.w	r4, r6, #16
 800483e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004846:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004848:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800484a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800484e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004852:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004856:	f002 f8e1 	bl	8006a1c <veml_Setup>
 800485a:	4603      	mov	r3, r0
 800485c:	2b01      	cmp	r3, #1
 800485e:	d10c      	bne.n	800487a <startUIControl+0x362>
		//error condition
		strncpy(errorCondition, "ERR:VEML7700", sizeof(errorCondition));
 8004860:	4a5b      	ldr	r2, [pc, #364]	; (80049d0 <startUIControl+0x4b8>)
 8004862:	4b5f      	ldr	r3, [pc, #380]	; (80049e0 <startUIControl+0x4c8>)
 8004864:	4614      	mov	r4, r2
 8004866:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004868:	6020      	str	r0, [r4, #0]
 800486a:	6061      	str	r1, [r4, #4]
 800486c:	60a2      	str	r2, [r4, #8]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	7323      	strb	r3, [r4, #12]
		GlobalState.programMode = MODE_ERROR;
 8004872:	4b59      	ldr	r3, [pc, #356]	; (80049d8 <startUIControl+0x4c0>)
 8004874:	2206      	movs	r2, #6
 8004876:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }

  osDelay(10);
 800487a:	200a      	movs	r0, #10
 800487c:	f00a fd9e 	bl	800f3bc <osDelay>

  if (si7021_set_config(&hi2c1, SI7021_HEATER_OFF, SI7021_RESOLUTION_RH12_TEMP14) == HAL_ERROR) {
 8004880:	2200      	movs	r2, #0
 8004882:	2100      	movs	r1, #0
 8004884:	4855      	ldr	r0, [pc, #340]	; (80049dc <startUIControl+0x4c4>)
 8004886:	f001 fce5 	bl	8006254 <si7021_set_config>
 800488a:	4603      	mov	r3, r0
 800488c:	2b01      	cmp	r3, #1
 800488e:	d10c      	bne.n	80048aa <startUIControl+0x392>
		//error condition
		strncpy(errorCondition, "ERR:SI7021CF", sizeof(errorCondition));
 8004890:	4a4f      	ldr	r2, [pc, #316]	; (80049d0 <startUIControl+0x4b8>)
 8004892:	4b54      	ldr	r3, [pc, #336]	; (80049e4 <startUIControl+0x4cc>)
 8004894:	4614      	mov	r4, r2
 8004896:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004898:	6020      	str	r0, [r4, #0]
 800489a:	6061      	str	r1, [r4, #4]
 800489c:	60a2      	str	r2, [r4, #8]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	7323      	strb	r3, [r4, #12]
		GlobalState.programMode = MODE_ERROR;
 80048a2:	4b4d      	ldr	r3, [pc, #308]	; (80049d8 <startUIControl+0x4c0>)
 80048a4:	2206      	movs	r2, #6
 80048a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }

  osDelay(10);
 80048aa:	200a      	movs	r0, #10
 80048ac:	f00a fd86 	bl	800f3bc <osDelay>

  if (si7021_set_heater_power(&hi2c1, SI7021_HEATER_POWER_3MA) == HAL_ERROR) {
 80048b0:	2100      	movs	r1, #0
 80048b2:	484a      	ldr	r0, [pc, #296]	; (80049dc <startUIControl+0x4c4>)
 80048b4:	f001 fceb 	bl	800628e <si7021_set_heater_power>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d10c      	bne.n	80048d8 <startUIControl+0x3c0>
		//error condition
		strncpy(errorCondition, "ERR:SI7021HT", sizeof(errorCondition));
 80048be:	4a44      	ldr	r2, [pc, #272]	; (80049d0 <startUIControl+0x4b8>)
 80048c0:	4b49      	ldr	r3, [pc, #292]	; (80049e8 <startUIControl+0x4d0>)
 80048c2:	4614      	mov	r4, r2
 80048c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80048c6:	6020      	str	r0, [r4, #0]
 80048c8:	6061      	str	r1, [r4, #4]
 80048ca:	60a2      	str	r2, [r4, #8]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	7323      	strb	r3, [r4, #12]
		GlobalState.programMode = MODE_ERROR;
 80048d0:	4b41      	ldr	r3, [pc, #260]	; (80049d8 <startUIControl+0x4c0>)
 80048d2:	2206      	movs	r2, #6
 80048d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  float lux;
  float whiteLux;
  float humidity;
  float temperature;

  int* coords[4] = {0x0000, 0x0000, 0x0000, 0x0000};
 80048d8:	f107 0308 	add.w	r3, r7, #8
 80048dc:	461a      	mov	r2, r3
 80048de:	2300      	movs	r3, #0
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	6053      	str	r3, [r2, #4]
 80048e4:	6093      	str	r3, [r2, #8]
 80048e6:	60d3      	str	r3, [r2, #12]

    /* Infinite loop */
    for(;;)
    {

     if (GlobalState.programMode){
 80048e8:	4b3b      	ldr	r3, [pc, #236]	; (80049d8 <startUIControl+0x4c0>)
 80048ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f000 8082 	beq.w	80049f8 <startUIControl+0x4e0>

     iqs263_poll_raw(coords);
 80048f4:	f107 0308 	add.w	r3, r7, #8
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7fe ffe8 	bl	80038ce <iqs263_poll_raw>
     angle = _get_angle(coords);
 80048fe:	f107 0308 	add.w	r3, r7, #8
 8004902:	4618      	mov	r0, r3
 8004904:	f7fe feec 	bl	80036e0 <_get_angle>
 8004908:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
     min = _get_min_if_pressed(coords);
 800490c:	f107 0308 	add.w	r3, r7, #8
 8004910:	4618      	mov	r0, r3
 8004912:	f7fe ffc5 	bl	80038a0 <_get_min_if_pressed>
 8004916:	f8c7 01e4 	str.w	r0, [r7, #484]	; 0x1e4

     sprintf(display1, "%d %d %d %d", coords[0], coords[1], coords[2], coords[3]);
 800491a:	f107 0308 	add.w	r3, r7, #8
 800491e:	6819      	ldr	r1, [r3, #0]
 8004920:	f107 0308 	add.w	r3, r7, #8
 8004924:	685c      	ldr	r4, [r3, #4]
 8004926:	f107 0308 	add.w	r3, r7, #8
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f107 0208 	add.w	r2, r7, #8
 8004930:	68d2      	ldr	r2, [r2, #12]
 8004932:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8004936:	9201      	str	r2, [sp, #4]
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	4623      	mov	r3, r4
 800493c:	460a      	mov	r2, r1
 800493e:	492b      	ldr	r1, [pc, #172]	; (80049ec <startUIControl+0x4d4>)
 8004940:	f00f fa84 	bl	8013e4c <siprintf>
     sprintf(display2, "angle: %3d", angle);
 8004944:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004948:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 800494c:	4928      	ldr	r1, [pc, #160]	; (80049f0 <startUIControl+0x4d8>)
 800494e:	4618      	mov	r0, r3
 8004950:	f00f fa7c 	bl	8013e4c <siprintf>
     sprintf(display3, "min  :  %2d", min);
 8004954:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004958:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 800495c:	4925      	ldr	r1, [pc, #148]	; (80049f4 <startUIControl+0x4dc>)
 800495e:	4618      	mov	r0, r3
 8004960:	f00f fa74 	bl	8013e4c <siprintf>

     er_oled_clear(oled_buf);
 8004964:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004968:	4618      	mov	r0, r3
 800496a:	f7fd fd67 	bl	800243c <er_oled_clear>
     er_oled_string(0, 0, display1, 12, 1, oled_buf);
 800496e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004972:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004976:	9301      	str	r3, [sp, #4]
 8004978:	2301      	movs	r3, #1
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	230c      	movs	r3, #12
 800497e:	2100      	movs	r1, #0
 8004980:	2000      	movs	r0, #0
 8004982:	f7fd fecb 	bl	800271c <er_oled_string>
     er_oled_string(0, 12, display2, 12, 1, oled_buf);
 8004986:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800498a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800498e:	9301      	str	r3, [sp, #4]
 8004990:	2301      	movs	r3, #1
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	230c      	movs	r3, #12
 8004996:	210c      	movs	r1, #12
 8004998:	2000      	movs	r0, #0
 800499a:	f7fd febf 	bl	800271c <er_oled_string>
     er_oled_string(0, 24, display3, 12, 1, oled_buf);
 800499e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80049a2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80049a6:	9301      	str	r3, [sp, #4]
 80049a8:	2301      	movs	r3, #1
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	230c      	movs	r3, #12
 80049ae:	2118      	movs	r1, #24
 80049b0:	2000      	movs	r0, #0
 80049b2:	f7fd feb3 	bl	800271c <er_oled_string>
     er_oled_display(oled_buf);
 80049b6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fd feef 	bl	800279e <er_oled_display>
     osDelay(50);
 80049c0:	2032      	movs	r0, #50	; 0x32
 80049c2:	f00a fcfb 	bl	800f3bc <osDelay>
 80049c6:	e78f      	b.n	80048e8 <startUIControl+0x3d0>
 80049c8:	80808081 	.word	0x80808081
 80049cc:	2aaaaaab 	.word	0x2aaaaaab
 80049d0:	2002e1a8 	.word	0x2002e1a8
 80049d4:	08017e48 	.word	0x08017e48
 80049d8:	2002e0cc 	.word	0x2002e0cc
 80049dc:	2002e1dc 	.word	0x2002e1dc
 80049e0:	08017e58 	.word	0x08017e58
 80049e4:	08017e68 	.word	0x08017e68
 80049e8:	08017e78 	.word	0x08017e78
 80049ec:	08017e88 	.word	0x08017e88
 80049f0:	08017e94 	.word	0x08017e94
 80049f4:	08017ea0 	.word	0x08017ea0

     } else {


	lux = veml_Get_Lux();
 80049f8:	f002 f94e 	bl	8006c98 <veml_Get_Lux>
 80049fc:	ed87 0a7e 	vstr	s0, [r7, #504]	; 0x1f8
	whiteLux = veml_Get_White_Lux();
 8004a00:	f002 fa32 	bl	8006e68 <veml_Get_White_Lux>
 8004a04:	ed87 0a7d 	vstr	s0, [r7, #500]	; 0x1f4
	temperature = si7021_measure_temperature(&hi2c1);
 8004a08:	4835      	ldr	r0, [pc, #212]	; (8004ae0 <startUIControl+0x5c8>)
 8004a0a:	f001 fcb7 	bl	800637c <si7021_measure_temperature>
 8004a0e:	ed87 0a7c 	vstr	s0, [r7, #496]	; 0x1f0
	humidity = si7021_measure_humidity(&hi2c1);
 8004a12:	4833      	ldr	r0, [pc, #204]	; (8004ae0 <startUIControl+0x5c8>)
 8004a14:	f001 fc54 	bl	80062c0 <si7021_measure_humidity>
 8004a18:	ed87 0a7b 	vstr	s0, [r7, #492]	; 0x1ec

	//sprintf(display1, "%2.2f  %2.2f", temperature, humidity);
	sprintf(display1, "lux : %x, %x", temperature, humidity);
 8004a1c:	f8d7 01f0 	ldr.w	r0, [r7, #496]	; 0x1f0
 8004a20:	f7fb fd6a 	bl	80004f8 <__aeabi_f2d>
 8004a24:	4605      	mov	r5, r0
 8004a26:	460e      	mov	r6, r1
 8004a28:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8004a2c:	f7fb fd64 	bl	80004f8 <__aeabi_f2d>
 8004a30:	4603      	mov	r3, r0
 8004a32:	460c      	mov	r4, r1
 8004a34:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8004a38:	e9cd 3400 	strd	r3, r4, [sp]
 8004a3c:	462a      	mov	r2, r5
 8004a3e:	4633      	mov	r3, r6
 8004a40:	4928      	ldr	r1, [pc, #160]	; (8004ae4 <startUIControl+0x5cc>)
 8004a42:	f00f fa03 	bl	8013e4c <siprintf>
	sprintf(display2, "lux : %x", lux);
 8004a46:	f8d7 01f8 	ldr.w	r0, [r7, #504]	; 0x1f8
 8004a4a:	f7fb fd55 	bl	80004f8 <__aeabi_f2d>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	460c      	mov	r4, r1
 8004a52:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8004a56:	461a      	mov	r2, r3
 8004a58:	4623      	mov	r3, r4
 8004a5a:	4923      	ldr	r1, [pc, #140]	; (8004ae8 <startUIControl+0x5d0>)
 8004a5c:	f00f f9f6 	bl	8013e4c <siprintf>
	sprintf(display3, "wlux: %x", whiteLux);
 8004a60:	f8d7 01f4 	ldr.w	r0, [r7, #500]	; 0x1f4
 8004a64:	f7fb fd48 	bl	80004f8 <__aeabi_f2d>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	460c      	mov	r4, r1
 8004a6c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004a70:	461a      	mov	r2, r3
 8004a72:	4623      	mov	r3, r4
 8004a74:	491d      	ldr	r1, [pc, #116]	; (8004aec <startUIControl+0x5d4>)
 8004a76:	f00f f9e9 	bl	8013e4c <siprintf>

	er_oled_clear(oled_buf);
 8004a7a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fd fcdc 	bl	800243c <er_oled_clear>
	er_oled_string(0, 0, display1, 12, 1, oled_buf);
 8004a84:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004a88:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004a8c:	9301      	str	r3, [sp, #4]
 8004a8e:	2301      	movs	r3, #1
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	230c      	movs	r3, #12
 8004a94:	2100      	movs	r1, #0
 8004a96:	2000      	movs	r0, #0
 8004a98:	f7fd fe40 	bl	800271c <er_oled_string>
	er_oled_string(0, 12, display2, 12, 1, oled_buf);
 8004a9c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004aa0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004aa4:	9301      	str	r3, [sp, #4]
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	230c      	movs	r3, #12
 8004aac:	210c      	movs	r1, #12
 8004aae:	2000      	movs	r0, #0
 8004ab0:	f7fd fe34 	bl	800271c <er_oled_string>
	er_oled_string(0, 24, display3, 12, 1, oled_buf);
 8004ab4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004ab8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004abc:	9301      	str	r3, [sp, #4]
 8004abe:	2301      	movs	r3, #1
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	230c      	movs	r3, #12
 8004ac4:	2118      	movs	r1, #24
 8004ac6:	2000      	movs	r0, #0
 8004ac8:	f7fd fe28 	bl	800271c <er_oled_string>
	er_oled_display(oled_buf);
 8004acc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7fd fe64 	bl	800279e <er_oled_display>
	osDelay(50);
 8004ad6:	2032      	movs	r0, #50	; 0x32
 8004ad8:	f00a fc70 	bl	800f3bc <osDelay>
     if (GlobalState.programMode){
 8004adc:	e704      	b.n	80048e8 <startUIControl+0x3d0>
 8004ade:	bf00      	nop
 8004ae0:	2002e1dc 	.word	0x2002e1dc
 8004ae4:	08017eac 	.word	0x08017eac
 8004ae8:	08017ebc 	.word	0x08017ebc
 8004aec:	08017ec8 	.word	0x08017ec8

08004af0 <check_time_bounds>:

  /* USER CODE END startUIControl */
}


uint8_t check_time_bounds(uint8_t curr_hrs){
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	4603      	mov	r3, r0
 8004af8:	71fb      	strb	r3, [r7, #7]
	//check time bounds, account for wrap (i.e. give time bounds of 10a-3a)

	uint8_t starthr = RTC_Bcd2ToByte(GlobalState.timeBound.startHR_BCD);
 8004afa:	4b17      	ldr	r3, [pc, #92]	; (8004b58 <check_time_bounds+0x68>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f005 ffb6 	bl	800aa70 <RTC_Bcd2ToByte>
 8004b04:	4603      	mov	r3, r0
 8004b06:	73fb      	strb	r3, [r7, #15]
	uint8_t endhr = RTC_Bcd2ToByte(GlobalState.timeBound.endHR_BCD);
 8004b08:	4b13      	ldr	r3, [pc, #76]	; (8004b58 <check_time_bounds+0x68>)
 8004b0a:	785b      	ldrb	r3, [r3, #1]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f005 ffaf 	bl	800aa70 <RTC_Bcd2ToByte>
 8004b12:	4603      	mov	r3, r0
 8004b14:	73bb      	strb	r3, [r7, #14]

	if (starthr < endhr){
 8004b16:	7bfa      	ldrb	r2, [r7, #15]
 8004b18:	7bbb      	ldrb	r3, [r7, #14]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d20c      	bcs.n	8004b38 <check_time_bounds+0x48>
		return (curr_hrs >= starthr && curr_hrs < endhr);
 8004b1e:	79fa      	ldrb	r2, [r7, #7]
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d305      	bcc.n	8004b32 <check_time_bounds+0x42>
 8004b26:	79fa      	ldrb	r2, [r7, #7]
 8004b28:	7bbb      	ldrb	r3, [r7, #14]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d201      	bcs.n	8004b32 <check_time_bounds+0x42>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <check_time_bounds+0x44>
 8004b32:	2300      	movs	r3, #0
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	e00b      	b.n	8004b50 <check_time_bounds+0x60>
	} else {
		return (curr_hrs >= starthr || curr_hrs < endhr);
 8004b38:	79fa      	ldrb	r2, [r7, #7]
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d203      	bcs.n	8004b48 <check_time_bounds+0x58>
 8004b40:	79fa      	ldrb	r2, [r7, #7]
 8004b42:	7bbb      	ldrb	r3, [r7, #14]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d201      	bcs.n	8004b4c <check_time_bounds+0x5c>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e000      	b.n	8004b4e <check_time_bounds+0x5e>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	b2db      	uxtb	r3, r3
	}

}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	2002e0cc 	.word	0x2002e0cc

08004b5c <startESMMain>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startESMMain */
void startESMMain(void *argument)
{
 8004b5c:	b5b0      	push	{r4, r5, r7, lr}
 8004b5e:	b092      	sub	sp, #72	; 0x48
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startESMMain */


  const BLETX_Queue_t bleSendInit = {TX_SURVEY_INITIALIZED, 0x0000};
 8004b64:	2302      	movs	r3, #2
 8004b66:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	857b      	strh	r3, [r7, #42]	; 0x2a
  /* Infinite loop */
  for(;;)
  {

	//only check time 3 times a min to see if we need a survey
    osDelay(20000); //20 sec delay
 8004b6e:	f644 6020 	movw	r0, #20000	; 0x4e20
 8004b72:	f00a fc23 	bl	800f3bc <osDelay>

    //Grab current time
    osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 8004b76:	4ba2      	ldr	r3, [pc, #648]	; (8004e00 <startESMMain+0x2a4>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f00a fce4 	bl	800f54c <osMutexAcquire>
    HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BCD);
 8004b84:	f107 0314 	add.w	r3, r7, #20
 8004b88:	2201      	movs	r2, #1
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	489d      	ldr	r0, [pc, #628]	; (8004e04 <startESMMain+0x2a8>)
 8004b8e:	f005 fda8 	bl	800a6e2 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BCD);
 8004b92:	f107 0310 	add.w	r3, r7, #16
 8004b96:	2201      	movs	r2, #1
 8004b98:	4619      	mov	r1, r3
 8004b9a:	489a      	ldr	r0, [pc, #616]	; (8004e04 <startESMMain+0x2a8>)
 8004b9c:	f005 feab 	bl	800a8f6 <HAL_RTC_GetDate>
    osMutexRelease(rtcMutexHandle);
 8004ba0:	4b97      	ldr	r3, [pc, #604]	; (8004e00 <startESMMain+0x2a4>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f00a fd2f 	bl	800f608 <osMutexRelease>

    uint8_t curr_hrs = RTC_Bcd2ToByte(cTime.Hours);
 8004baa:	7d3b      	ldrb	r3, [r7, #20]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f005 ff5f 	bl	800aa70 <RTC_Bcd2ToByte>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    uint8_t curr_min = RTC_Bcd2ToByte(cTime.Minutes);
 8004bb8:	7d7b      	ldrb	r3, [r7, #21]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f005 ff58 	bl	800aa70 <RTC_Bcd2ToByte>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    //Get a date in YYMMDD format so we can easily compare relative values
    uint32_t curr_date = (cDate.Year << 16) | (cDate.Month << 8) | cDate.Date;
 8004bc6:	7cfb      	ldrb	r3, [r7, #19]
 8004bc8:	041a      	lsls	r2, r3, #16
 8004bca:	7c7b      	ldrb	r3, [r7, #17]
 8004bcc:	021b      	lsls	r3, r3, #8
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	7cba      	ldrb	r2, [r7, #18]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	63bb      	str	r3, [r7, #56]	; 0x38

    //Grab last seen time hrs/min and date
    uint8_t last_hrs = RTC_Bcd2ToByte(GlobalState.lastSeenTime.time.Hours);
 8004bd6:	4b8c      	ldr	r3, [pc, #560]	; (8004e08 <startESMMain+0x2ac>)
 8004bd8:	791b      	ldrb	r3, [r3, #4]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f005 ff48 	bl	800aa70 <RTC_Bcd2ToByte>
 8004be0:	4603      	mov	r3, r0
 8004be2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint8_t last_min = RTC_Bcd2ToByte(GlobalState.lastSeenTime.time.Minutes);
 8004be6:	4b88      	ldr	r3, [pc, #544]	; (8004e08 <startESMMain+0x2ac>)
 8004be8:	795b      	ldrb	r3, [r3, #5]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f005 ff40 	bl	800aa70 <RTC_Bcd2ToByte>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    uint32_t last_date = (GlobalState.lastSeenTime.date.Year << 16) |
 8004bf6:	4b84      	ldr	r3, [pc, #528]	; (8004e08 <startESMMain+0x2ac>)
 8004bf8:	7edb      	ldrb	r3, [r3, #27]
 8004bfa:	041a      	lsls	r2, r3, #16
    					 (GlobalState.lastSeenTime.date.Month << 8) |
 8004bfc:	4b82      	ldr	r3, [pc, #520]	; (8004e08 <startESMMain+0x2ac>)
 8004bfe:	7e5b      	ldrb	r3, [r3, #25]
 8004c00:	021b      	lsls	r3, r3, #8
    uint32_t last_date = (GlobalState.lastSeenTime.date.Year << 16) |
 8004c02:	4313      	orrs	r3, r2
						  GlobalState.lastSeenTime.date.Date;
 8004c04:	4a80      	ldr	r2, [pc, #512]	; (8004e08 <startESMMain+0x2ac>)
 8004c06:	7e92      	ldrb	r2, [r2, #26]
    					 (GlobalState.lastSeenTime.date.Month << 8) |
 8004c08:	4313      	orrs	r3, r2
    uint32_t last_date = (GlobalState.lastSeenTime.date.Year << 16) |
 8004c0a:	633b      	str	r3, [r7, #48]	; 0x30

    uint8_t sameDayFlag = 1;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    //Going to do time in minutes for ease.  60 min *24 hours = 1440 min / day

    uint16_t current_time_in_min = (60*curr_hrs + curr_min);
 8004c12:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	461a      	mov	r2, r3
 8004c1a:	0112      	lsls	r2, r2, #4
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	4413      	add	r3, r2
 8004c2a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    uint16_t thresh_time_in_min = (60*last_hrs + last_min + GlobalState.currentInterval);
 8004c2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	461a      	mov	r2, r3
 8004c34:	0112      	lsls	r2, r2, #4
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	4413      	add	r3, r2
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	4b70      	ldr	r3, [pc, #448]	; (8004e08 <startESMMain+0x2ac>)
 8004c48:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	4413      	add	r3, r2
 8004c50:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	if (thresh_time_in_min >= 1440){
 8004c54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004c58:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8004c5c:	d30f      	bcc.n	8004c7e <startESMMain+0x122>
		thresh_time_in_min %= 1440;
 8004c5e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004c62:	095a      	lsrs	r2, r3, #5
 8004c64:	4969      	ldr	r1, [pc, #420]	; (8004e0c <startESMMain+0x2b0>)
 8004c66:	fba1 1202 	umull	r1, r2, r1, r2
 8004c6a:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 8004c6e:	fb01 f202 	mul.w	r2, r1, r2
 8004c72:	1a9b      	subs	r3, r3, r2
 8004c74:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		sameDayFlag = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    //Init Survey:
    // TIME BOUNDS for current time hrs
    // curr_time == last_time + interval  (minute resolution, this is checked every 15 sec).
    // programMode is RESTING
    // not GlobalState.paused
    if (GlobalState.programMode == MODE_RESTING && !GlobalState.paused &&
 8004c7e:	4b62      	ldr	r3, [pc, #392]	; (8004e08 <startESMMain+0x2ac>)
 8004c80:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f040 84d0 	bne.w	800562a <startESMMain+0xace>
 8004c8a:	4b5f      	ldr	r3, [pc, #380]	; (8004e08 <startESMMain+0x2ac>)
 8004c8c:	f893 30d5 	ldrb.w	r3, [r3, #213]	; 0xd5
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f040 84ca 	bne.w	800562a <startESMMain+0xace>
    	check_time_bounds(curr_hrs) && current_time_in_min >= thresh_time_in_min &&
 8004c96:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7ff ff28 	bl	8004af0 <check_time_bounds>
 8004ca0:	4603      	mov	r3, r0
    if (GlobalState.programMode == MODE_RESTING && !GlobalState.paused &&
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 84c1 	beq.w	800562a <startESMMain+0xace>
    	check_time_bounds(curr_hrs) && current_time_in_min >= thresh_time_in_min &&
 8004ca8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004caa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	f0c0 84bb 	bcc.w	800562a <startESMMain+0xace>
		(sameDayFlag | (curr_date > last_date )) ){
 8004cb4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004cb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cbc:	4291      	cmp	r1, r2
 8004cbe:	bf8c      	ite	hi
 8004cc0:	2201      	movhi	r2, #1
 8004cc2:	2200      	movls	r2, #0
 8004cc4:	b2d2      	uxtb	r2, r2
 8004cc6:	4313      	orrs	r3, r2
    	check_time_bounds(curr_hrs) && current_time_in_min >= thresh_time_in_min &&
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 84ae 	beq.w	800562a <startESMMain+0xace>

    	//send TX_SURVEY_INITIALIZED
    	osMessageQueuePut(bleTXqueueHandle, &bleSendInit, 0, 0);
 8004cce:	4b50      	ldr	r3, [pc, #320]	; (8004e10 <startESMMain+0x2b4>)
 8004cd0:	6818      	ldr	r0, [r3, #0]
 8004cd2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f00a fec7 	bl	800fa6c <osMessageQueuePut>

    	//set program mode to MODE_ESM_TIME_ESTIMATE
    	osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8004cde:	4b4d      	ldr	r3, [pc, #308]	; (8004e14 <startESMMain+0x2b8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f00a fc30 	bl	800f54c <osMutexAcquire>
    	GlobalState.programMode = MODE_ESM_TIME_ESTIMATE;
 8004cec:	4b46      	ldr	r3, [pc, #280]	; (8004e08 <startESMMain+0x2ac>)
 8004cee:	2202      	movs	r2, #2
 8004cf0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    	osMutexRelease(modeMutexHandle);
 8004cf4:	4b47      	ldr	r3, [pc, #284]	; (8004e14 <startESMMain+0x2b8>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f00a fc85 	bl	800f608 <osMutexRelease>

    	//clear UI notification flags
    	xTaskNotifyStateClear(NULL);
 8004cfe:	2000      	movs	r0, #0
 8004d00:	f00d ff6a 	bl	8012bd8 <xTaskNotifyStateClear>

    	uint8_t continue_flag = 1;
 8004d04:	2301      	movs	r3, #1
 8004d06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    	//(1) Alert Loop and ESM_TIME_ESTIMATE
    	uint8_t keep_alerting = 1;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    	while(keep_alerting){
 8004d10:	e019      	b.n	8004d46 <startESMMain+0x1ea>

    		//alert
    		//wait for notification from UI thread that indicates start of user interaction
    		notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(ALERT_TIMEOUT));
 8004d12:	f241 7170 	movw	r1, #6000	; 0x1770
 8004d16:	2001      	movs	r0, #1
 8004d18:	f00d fd2e 	bl	8012778 <ulTaskNotifyTake>
 8004d1c:	6478      	str	r0, [r7, #68]	; 0x44
       	    if (notification){ //not a timeout, interaction started
 8004d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <startESMMain+0x1ce>
        		keep_alerting = 0;
 8004d24:	2300      	movs	r3, #0
 8004d26:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
     		}
    	    if (GlobalState.programMode != MODE_ESM_TIME_ESTIMATE){
 8004d2a:	4b37      	ldr	r3, [pc, #220]	; (8004e08 <startESMMain+0x2ac>)
 8004d2c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d005      	beq.n	8004d40 <startESMMain+0x1e4>
    	    	//button press has changed mode and canceled interaction. want to exit alert loop.
    	    	keep_alerting = 0;
 8004d34:	2300      	movs	r3, #0
 8004d36:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    	    	continue_flag = 0;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    	    }

    	    osDelay(10);
 8004d40:	200a      	movs	r0, #10
 8004d42:	f00a fb3b 	bl	800f3bc <osDelay>
    	while(keep_alerting){
 8004d46:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1e1      	bne.n	8004d12 <startESMMain+0x1b6>
        }

    	//SECOND SCREEN FOR ESM - FOCUS
    	if (continue_flag){
 8004d4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00d      	beq.n	8004d72 <startESMMain+0x216>
    		//(2) Wait for notification from UI thread that indicates confirmed input
    		notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 8004d56:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 8004d5a:	2001      	movs	r0, #1
 8004d5c:	f00d fd0c 	bl	8012778 <ulTaskNotifyTake>
 8004d60:	6478      	str	r0, [r7, #68]	; 0x44

    		if (GlobalState.programMode != MODE_ESM_TIME_ESTIMATE){
 8004d62:	4b29      	ldr	r3, [pc, #164]	; (8004e08 <startESMMain+0x2ac>)
 8004d64:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d002      	beq.n	8004d72 <startESMMain+0x216>
    			//if our mode has changed, we had a dismiss/snooze event
    			continue_flag = 0;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    		}
    	}

    	if (continue_flag){
 8004d72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d069      	beq.n	8004e4e <startESMMain+0x2f2>
    		if (notification){//not timed out, had a confirmed event
 8004d7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d053      	beq.n	8004e28 <startESMMain+0x2cc>
    			//set up next interaction
    			//set up survey
    			osMutexAcquire(surveyMutexHandle, portMAX_DELAY);
 8004d80:	4b25      	ldr	r3, [pc, #148]	; (8004e18 <startESMMain+0x2bc>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f00a fbdf 	bl	800f54c <osMutexAcquire>
    			strncpy(GlobalState.surveyState.screenText, "    FOCUS?", strlen("    FOCUS?") + 1);
 8004d8e:	4a23      	ldr	r2, [pc, #140]	; (8004e1c <startESMMain+0x2c0>)
 8004d90:	4b23      	ldr	r3, [pc, #140]	; (8004e20 <startESMMain+0x2c4>)
 8004d92:	cb03      	ldmia	r3!, {r0, r1}
 8004d94:	6010      	str	r0, [r2, #0]
 8004d96:	6051      	str	r1, [r2, #4]
 8004d98:	8819      	ldrh	r1, [r3, #0]
 8004d9a:	789b      	ldrb	r3, [r3, #2]
 8004d9c:	8111      	strh	r1, [r2, #8]
 8004d9e:	7293      	strb	r3, [r2, #10]
    			GlobalState.surveyState.screenTextLength = strlen("    FOCUS?");
 8004da0:	4b19      	ldr	r3, [pc, #100]	; (8004e08 <startESMMain+0x2ac>)
 8004da2:	220a      	movs	r2, #10
 8004da4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    			GlobalState.surveyState.surveyID = SURVEY_FOCUS;
 8004da8:	4b17      	ldr	r3, [pc, #92]	; (8004e08 <startESMMain+0x2ac>)
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    			memcpy(GlobalState.surveyState.optionArray, opts_arousal, sizeof(opts_arousal));
 8004db0:	4b15      	ldr	r3, [pc, #84]	; (8004e08 <startESMMain+0x2ac>)
 8004db2:	4a1c      	ldr	r2, [pc, #112]	; (8004e24 <startESMMain+0x2c8>)
 8004db4:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 8004db8:	4615      	mov	r5, r2
 8004dba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dc2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004dc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    			GlobalState.surveyState.optionArrayLength = 5;
 8004dca:	4b0f      	ldr	r3, [pc, #60]	; (8004e08 <startESMMain+0x2ac>)
 8004dcc:	2205      	movs	r2, #5
 8004dce:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
    			osMutexRelease(surveyMutexHandle);
 8004dd2:	4b11      	ldr	r3, [pc, #68]	; (8004e18 <startESMMain+0x2bc>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f00a fc16 	bl	800f608 <osMutexRelease>

    			//programMode
    			osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8004ddc:	4b0d      	ldr	r3, [pc, #52]	; (8004e14 <startESMMain+0x2b8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004de4:	4618      	mov	r0, r3
 8004de6:	f00a fbb1 	bl	800f54c <osMutexAcquire>
    			GlobalState.programMode = MODE_ESM_SURVEY;
 8004dea:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <startESMMain+0x2ac>)
 8004dec:	2203      	movs	r2, #3
 8004dee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    			osMutexRelease(modeMutexHandle);
 8004df2:	4b08      	ldr	r3, [pc, #32]	; (8004e14 <startESMMain+0x2b8>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f00a fc06 	bl	800f608 <osMutexRelease>
 8004dfc:	e027      	b.n	8004e4e <startESMMain+0x2f2>
 8004dfe:	bf00      	nop
 8004e00:	2002e0c8 	.word	0x2002e0c8
 8004e04:	2002e0a4 	.word	0x2002e0a4
 8004e08:	2002e0cc 	.word	0x2002e0cc
 8004e0c:	05b05b06 	.word	0x05b05b06
 8004e10:	2002e294 	.word	0x2002e294
 8004e14:	2002e234 	.word	0x2002e234
 8004e18:	2002e22c 	.word	0x2002e22c
 8004e1c:	2002e0fd 	.word	0x2002e0fd
 8004e20:	08017ed4 	.word	0x08017ed4
 8004e24:	08018eec 	.word	0x08018eec

    		} else {//timed out due to inactivity
    			continue_flag = 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    			osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8004e2e:	4bb2      	ldr	r3, [pc, #712]	; (80050f8 <startESMMain+0x59c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004e36:	4618      	mov	r0, r3
 8004e38:	f00a fb88 	bl	800f54c <osMutexAcquire>
    			GlobalState.programMode = MODE_CLEAR;
 8004e3c:	4baf      	ldr	r3, [pc, #700]	; (80050fc <startESMMain+0x5a0>)
 8004e3e:	2207      	movs	r2, #7
 8004e40:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    			osMutexRelease(modeMutexHandle);
 8004e44:	4bac      	ldr	r3, [pc, #688]	; (80050f8 <startESMMain+0x59c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f00a fbdd 	bl	800f608 <osMutexRelease>
    		}
    	}

    	//THIRD SCREEN FOR ESM - ALERTNESS/AROUSAL
		if (continue_flag){
 8004e4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00d      	beq.n	8004e72 <startESMMain+0x316>
			//(2) Wait for notification from UI thread that indicates confirmed input
			notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 8004e56:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 8004e5a:	2001      	movs	r0, #1
 8004e5c:	f00d fc8c 	bl	8012778 <ulTaskNotifyTake>
 8004e60:	6478      	str	r0, [r7, #68]	; 0x44

			if (GlobalState.programMode != MODE_ESM_SURVEY){
 8004e62:	4ba6      	ldr	r3, [pc, #664]	; (80050fc <startESMMain+0x5a0>)
 8004e64:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004e68:	2b03      	cmp	r3, #3
 8004e6a:	d002      	beq.n	8004e72 <startESMMain+0x316>
				//if our mode has changed, we had a dismiss/snooze event
				continue_flag = 0;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (continue_flag){
 8004e72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d042      	beq.n	8004f00 <startESMMain+0x3a4>
			if (notification){//not timed out, had a confirmed event
 8004e7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d02c      	beq.n	8004eda <startESMMain+0x37e>
				//set up next interaction
				//set up survey
				osMutexAcquire(surveyMutexHandle, portMAX_DELAY);
 8004e80:	4b9f      	ldr	r3, [pc, #636]	; (8005100 <startESMMain+0x5a4>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f00a fb5f 	bl	800f54c <osMutexAcquire>
				strncpy(GlobalState.surveyState.screenText, " ALERTNESS?", strlen(" ALERTNESS?") + 1);
 8004e8e:	4a9d      	ldr	r2, [pc, #628]	; (8005104 <startESMMain+0x5a8>)
 8004e90:	4b9d      	ldr	r3, [pc, #628]	; (8005108 <startESMMain+0x5ac>)
 8004e92:	4614      	mov	r4, r2
 8004e94:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004e96:	6020      	str	r0, [r4, #0]
 8004e98:	6061      	str	r1, [r4, #4]
 8004e9a:	60a2      	str	r2, [r4, #8]
				GlobalState.surveyState.screenTextLength = strlen(" ALERTNESS?");
 8004e9c:	4b97      	ldr	r3, [pc, #604]	; (80050fc <startESMMain+0x5a0>)
 8004e9e:	220b      	movs	r2, #11
 8004ea0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
				GlobalState.surveyState.surveyID = SURVEY_AROUSAL;
 8004ea4:	4b95      	ldr	r3, [pc, #596]	; (80050fc <startESMMain+0x5a0>)
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				memcpy(GlobalState.surveyState.optionArray, opts_arousal, sizeof(opts_arousal));
 8004eac:	4b93      	ldr	r3, [pc, #588]	; (80050fc <startESMMain+0x5a0>)
 8004eae:	4a97      	ldr	r2, [pc, #604]	; (800510c <startESMMain+0x5b0>)
 8004eb0:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 8004eb4:	4615      	mov	r5, r2
 8004eb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004eb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004eba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ebc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ebe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004ec2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				GlobalState.surveyState.optionArrayLength = 5;
 8004ec6:	4b8d      	ldr	r3, [pc, #564]	; (80050fc <startESMMain+0x5a0>)
 8004ec8:	2205      	movs	r2, #5
 8004eca:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
				osMutexRelease(surveyMutexHandle);
 8004ece:	4b8c      	ldr	r3, [pc, #560]	; (8005100 <startESMMain+0x5a4>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f00a fb98 	bl	800f608 <osMutexRelease>
 8004ed8:	e012      	b.n	8004f00 <startESMMain+0x3a4>

			} else {//timed out due to inactivity
				continue_flag = 0;
 8004eda:	2300      	movs	r3, #0
 8004edc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8004ee0:	4b85      	ldr	r3, [pc, #532]	; (80050f8 <startESMMain+0x59c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f00a fb2f 	bl	800f54c <osMutexAcquire>
				GlobalState.programMode = MODE_CLEAR;
 8004eee:	4b83      	ldr	r3, [pc, #524]	; (80050fc <startESMMain+0x5a0>)
 8004ef0:	2207      	movs	r2, #7
 8004ef2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				osMutexRelease(modeMutexHandle);
 8004ef6:	4b80      	ldr	r3, [pc, #512]	; (80050f8 <startESMMain+0x59c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f00a fb84 	bl	800f608 <osMutexRelease>
			}
		}

		//FOURTH SCREEN FOR ESM - EMOTION/VALENCE
		if (continue_flag){
 8004f00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00d      	beq.n	8004f24 <startESMMain+0x3c8>
			//(2) Wait for notification from UI thread that indicates confirmed input
			notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 8004f08:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 8004f0c:	2001      	movs	r0, #1
 8004f0e:	f00d fc33 	bl	8012778 <ulTaskNotifyTake>
 8004f12:	6478      	str	r0, [r7, #68]	; 0x44

			if (GlobalState.programMode != MODE_ESM_SURVEY){
 8004f14:	4b79      	ldr	r3, [pc, #484]	; (80050fc <startESMMain+0x5a0>)
 8004f16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004f1a:	2b03      	cmp	r3, #3
 8004f1c:	d002      	beq.n	8004f24 <startESMMain+0x3c8>
				//if our mode has changed, we had a dismiss/snooze event
				continue_flag = 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (continue_flag){
 8004f24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d044      	beq.n	8004fb6 <startESMMain+0x45a>
			if (notification){//not timed out, had a confirmed event
 8004f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d02e      	beq.n	8004f90 <startESMMain+0x434>
				//set up next interaction
				//set up survey
				osMutexAcquire(surveyMutexHandle, portMAX_DELAY);
 8004f32:	4b73      	ldr	r3, [pc, #460]	; (8005100 <startESMMain+0x5a4>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f00a fb06 	bl	800f54c <osMutexAcquire>
				strncpy(GlobalState.surveyState.screenText, "  EMOTION?", strlen("  EMOTION?") + 1);
 8004f40:	4a70      	ldr	r2, [pc, #448]	; (8005104 <startESMMain+0x5a8>)
 8004f42:	4b73      	ldr	r3, [pc, #460]	; (8005110 <startESMMain+0x5b4>)
 8004f44:	cb03      	ldmia	r3!, {r0, r1}
 8004f46:	6010      	str	r0, [r2, #0]
 8004f48:	6051      	str	r1, [r2, #4]
 8004f4a:	8819      	ldrh	r1, [r3, #0]
 8004f4c:	789b      	ldrb	r3, [r3, #2]
 8004f4e:	8111      	strh	r1, [r2, #8]
 8004f50:	7293      	strb	r3, [r2, #10]
				GlobalState.surveyState.screenTextLength = strlen("  EMOTION?");
 8004f52:	4b6a      	ldr	r3, [pc, #424]	; (80050fc <startESMMain+0x5a0>)
 8004f54:	220a      	movs	r2, #10
 8004f56:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
				GlobalState.surveyState.surveyID = SURVEY_VALENCE;
 8004f5a:	4b68      	ldr	r3, [pc, #416]	; (80050fc <startESMMain+0x5a0>)
 8004f5c:	2203      	movs	r2, #3
 8004f5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				memcpy(GlobalState.surveyState.optionArray, opts_valence, sizeof(opts_valence));
 8004f62:	4b66      	ldr	r3, [pc, #408]	; (80050fc <startESMMain+0x5a0>)
 8004f64:	4a6b      	ldr	r2, [pc, #428]	; (8005114 <startESMMain+0x5b8>)
 8004f66:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 8004f6a:	4615      	mov	r5, r2
 8004f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004f78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				GlobalState.surveyState.optionArrayLength = 5;
 8004f7c:	4b5f      	ldr	r3, [pc, #380]	; (80050fc <startESMMain+0x5a0>)
 8004f7e:	2205      	movs	r2, #5
 8004f80:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
				osMutexRelease(surveyMutexHandle);
 8004f84:	4b5e      	ldr	r3, [pc, #376]	; (8005100 <startESMMain+0x5a4>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f00a fb3d 	bl	800f608 <osMutexRelease>
 8004f8e:	e012      	b.n	8004fb6 <startESMMain+0x45a>

			} else {//timed out due to inactivity
				continue_flag = 0;
 8004f90:	2300      	movs	r3, #0
 8004f92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8004f96:	4b58      	ldr	r3, [pc, #352]	; (80050f8 <startESMMain+0x59c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f00a fad4 	bl	800f54c <osMutexAcquire>
				GlobalState.programMode = MODE_CLEAR;
 8004fa4:	4b55      	ldr	r3, [pc, #340]	; (80050fc <startESMMain+0x5a0>)
 8004fa6:	2207      	movs	r2, #7
 8004fa8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				osMutexRelease(modeMutexHandle);
 8004fac:	4b52      	ldr	r3, [pc, #328]	; (80050f8 <startESMMain+0x59c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f00a fb29 	bl	800f608 <osMutexRelease>
			}
		}

		//FIFTH SCREEN FOR ESM - COG LOAD
		if (continue_flag){
 8004fb6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00d      	beq.n	8004fda <startESMMain+0x47e>
			//(2) Wait for notification from UI thread that indicates confirmed input
			notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 8004fbe:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 8004fc2:	2001      	movs	r0, #1
 8004fc4:	f00d fbd8 	bl	8012778 <ulTaskNotifyTake>
 8004fc8:	6478      	str	r0, [r7, #68]	; 0x44

			if (GlobalState.programMode != MODE_ESM_SURVEY){
 8004fca:	4b4c      	ldr	r3, [pc, #304]	; (80050fc <startESMMain+0x5a0>)
 8004fcc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004fd0:	2b03      	cmp	r3, #3
 8004fd2:	d002      	beq.n	8004fda <startESMMain+0x47e>
				//if our mode has changed, we had a dismiss/snooze event
				continue_flag = 0;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (continue_flag){
 8004fda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d044      	beq.n	800506c <startESMMain+0x510>
			if (notification){//not timed out, had a confirmed event
 8004fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d02e      	beq.n	8005046 <startESMMain+0x4ea>
				//set up next interaction
				//set up survey
				osMutexAcquire(surveyMutexHandle, portMAX_DELAY);
 8004fe8:	4b45      	ldr	r3, [pc, #276]	; (8005100 <startESMMain+0x5a4>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f00a faab 	bl	800f54c <osMutexAcquire>
				strncpy(GlobalState.surveyState.screenText, "COG. EFFORT?", strlen("COG. EFFORT?") + 1);
 8004ff6:	4a43      	ldr	r2, [pc, #268]	; (8005104 <startESMMain+0x5a8>)
 8004ff8:	4b47      	ldr	r3, [pc, #284]	; (8005118 <startESMMain+0x5bc>)
 8004ffa:	4614      	mov	r4, r2
 8004ffc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004ffe:	6020      	str	r0, [r4, #0]
 8005000:	6061      	str	r1, [r4, #4]
 8005002:	60a2      	str	r2, [r4, #8]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	7323      	strb	r3, [r4, #12]
				GlobalState.surveyState.screenTextLength = strlen("COG. EFFORT?");
 8005008:	4b3c      	ldr	r3, [pc, #240]	; (80050fc <startESMMain+0x5a0>)
 800500a:	220c      	movs	r2, #12
 800500c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
				GlobalState.surveyState.surveyID = SURVEY_COGLOAD;
 8005010:	4b3a      	ldr	r3, [pc, #232]	; (80050fc <startESMMain+0x5a0>)
 8005012:	2204      	movs	r2, #4
 8005014:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				memcpy(GlobalState.surveyState.optionArray, opts_arousal, sizeof(opts_arousal));
 8005018:	4b38      	ldr	r3, [pc, #224]	; (80050fc <startESMMain+0x5a0>)
 800501a:	4a3c      	ldr	r2, [pc, #240]	; (800510c <startESMMain+0x5b0>)
 800501c:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 8005020:	4615      	mov	r5, r2
 8005022:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005024:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800502a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800502e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				GlobalState.surveyState.optionArrayLength = 5;
 8005032:	4b32      	ldr	r3, [pc, #200]	; (80050fc <startESMMain+0x5a0>)
 8005034:	2205      	movs	r2, #5
 8005036:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
				osMutexRelease(surveyMutexHandle);
 800503a:	4b31      	ldr	r3, [pc, #196]	; (8005100 <startESMMain+0x5a4>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4618      	mov	r0, r3
 8005040:	f00a fae2 	bl	800f608 <osMutexRelease>
 8005044:	e012      	b.n	800506c <startESMMain+0x510>

			} else {//timed out due to inactivity
				continue_flag = 0;
 8005046:	2300      	movs	r3, #0
 8005048:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 800504c:	4b2a      	ldr	r3, [pc, #168]	; (80050f8 <startESMMain+0x59c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005054:	4618      	mov	r0, r3
 8005056:	f00a fa79 	bl	800f54c <osMutexAcquire>
				GlobalState.programMode = MODE_CLEAR;
 800505a:	4b28      	ldr	r3, [pc, #160]	; (80050fc <startESMMain+0x5a0>)
 800505c:	2207      	movs	r2, #7
 800505e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				osMutexRelease(modeMutexHandle);
 8005062:	4b25      	ldr	r3, [pc, #148]	; (80050f8 <startESMMain+0x59c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4618      	mov	r0, r3
 8005068:	f00a face 	bl	800f608 <osMutexRelease>
			}
		}

		//SIXTH SCREEN FOR ESM - STRESS
		if (continue_flag){
 800506c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00d      	beq.n	8005090 <startESMMain+0x534>
			//(2) Wait for notification from UI thread that indicates confirmed input
			notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 8005074:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 8005078:	2001      	movs	r0, #1
 800507a:	f00d fb7d 	bl	8012778 <ulTaskNotifyTake>
 800507e:	6478      	str	r0, [r7, #68]	; 0x44

			if (GlobalState.programMode != MODE_ESM_SURVEY){
 8005080:	4b1e      	ldr	r3, [pc, #120]	; (80050fc <startESMMain+0x5a0>)
 8005082:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005086:	2b03      	cmp	r3, #3
 8005088:	d002      	beq.n	8005090 <startESMMain+0x534>
				//if our mode has changed, we had a dismiss/snooze event
				continue_flag = 0;
 800508a:	2300      	movs	r3, #0
 800508c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (continue_flag){
 8005090:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005094:	2b00      	cmp	r3, #0
 8005096:	d056      	beq.n	8005146 <startESMMain+0x5ea>
			if (notification){//not timed out, had a confirmed event
 8005098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800509a:	2b00      	cmp	r3, #0
 800509c:	d040      	beq.n	8005120 <startESMMain+0x5c4>
				//set up next interaction
				//set up survey
				osMutexAcquire(surveyMutexHandle, portMAX_DELAY);
 800509e:	4b18      	ldr	r3, [pc, #96]	; (8005100 <startESMMain+0x5a4>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80050a6:	4618      	mov	r0, r3
 80050a8:	f00a fa50 	bl	800f54c <osMutexAcquire>
				strncpy(GlobalState.surveyState.screenText, "  STRESS?", strlen("  STRESS?") + 1);
 80050ac:	4a15      	ldr	r2, [pc, #84]	; (8005104 <startESMMain+0x5a8>)
 80050ae:	4b1b      	ldr	r3, [pc, #108]	; (800511c <startESMMain+0x5c0>)
 80050b0:	cb03      	ldmia	r3!, {r0, r1}
 80050b2:	6010      	str	r0, [r2, #0]
 80050b4:	6051      	str	r1, [r2, #4]
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	8113      	strh	r3, [r2, #8]
				GlobalState.surveyState.screenTextLength = strlen("  STRESS?");
 80050ba:	4b10      	ldr	r3, [pc, #64]	; (80050fc <startESMMain+0x5a0>)
 80050bc:	2209      	movs	r2, #9
 80050be:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
				GlobalState.surveyState.surveyID = SURVEY_STRESS;
 80050c2:	4b0e      	ldr	r3, [pc, #56]	; (80050fc <startESMMain+0x5a0>)
 80050c4:	2208      	movs	r2, #8
 80050c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				memcpy(GlobalState.surveyState.optionArray, opts_arousal, sizeof(opts_arousal));
 80050ca:	4b0c      	ldr	r3, [pc, #48]	; (80050fc <startESMMain+0x5a0>)
 80050cc:	4a0f      	ldr	r2, [pc, #60]	; (800510c <startESMMain+0x5b0>)
 80050ce:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 80050d2:	4615      	mov	r5, r2
 80050d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80050e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				GlobalState.surveyState.optionArrayLength = 5;
 80050e4:	4b05      	ldr	r3, [pc, #20]	; (80050fc <startESMMain+0x5a0>)
 80050e6:	2205      	movs	r2, #5
 80050e8:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
				osMutexRelease(surveyMutexHandle);
 80050ec:	4b04      	ldr	r3, [pc, #16]	; (8005100 <startESMMain+0x5a4>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f00a fa89 	bl	800f608 <osMutexRelease>
 80050f6:	e026      	b.n	8005146 <startESMMain+0x5ea>
 80050f8:	2002e234 	.word	0x2002e234
 80050fc:	2002e0cc 	.word	0x2002e0cc
 8005100:	2002e22c 	.word	0x2002e22c
 8005104:	2002e0fd 	.word	0x2002e0fd
 8005108:	08017ee0 	.word	0x08017ee0
 800510c:	08018eec 	.word	0x08018eec
 8005110:	08017eec 	.word	0x08017eec
 8005114:	08018ec0 	.word	0x08018ec0
 8005118:	08017ef8 	.word	0x08017ef8
 800511c:	08017f08 	.word	0x08017f08

			} else {//timed out due to inactivity
				continue_flag = 0;
 8005120:	2300      	movs	r3, #0
 8005122:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8005126:	4bb4      	ldr	r3, [pc, #720]	; (80053f8 <startESMMain+0x89c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800512e:	4618      	mov	r0, r3
 8005130:	f00a fa0c 	bl	800f54c <osMutexAcquire>
				GlobalState.programMode = MODE_CLEAR;
 8005134:	4bb1      	ldr	r3, [pc, #708]	; (80053fc <startESMMain+0x8a0>)
 8005136:	2207      	movs	r2, #7
 8005138:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				osMutexRelease(modeMutexHandle);
 800513c:	4bae      	ldr	r3, [pc, #696]	; (80053f8 <startESMMain+0x89c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4618      	mov	r0, r3
 8005142:	f00a fa61 	bl	800f608 <osMutexRelease>
			}
		}

		//SEVENTH SCREEN FOR ESM - CAFFEINE
		if (continue_flag){
 8005146:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00d      	beq.n	800516a <startESMMain+0x60e>
			//(2) Wait for notification from UI thread that indicates confirmed input
			notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 800514e:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 8005152:	2001      	movs	r0, #1
 8005154:	f00d fb10 	bl	8012778 <ulTaskNotifyTake>
 8005158:	6478      	str	r0, [r7, #68]	; 0x44

			if (GlobalState.programMode != MODE_ESM_SURVEY){
 800515a:	4ba8      	ldr	r3, [pc, #672]	; (80053fc <startESMMain+0x8a0>)
 800515c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005160:	2b03      	cmp	r3, #3
 8005162:	d002      	beq.n	800516a <startESMMain+0x60e>
				//if our mode has changed, we had a dismiss/snooze event
				continue_flag = 0;
 8005164:	2300      	movs	r3, #0
 8005166:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (continue_flag){
 800516a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800516e:	2b00      	cmp	r3, #0
 8005170:	d044      	beq.n	80051fc <startESMMain+0x6a0>
			if (notification){//not timed out, had a confirmed event
 8005172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005174:	2b00      	cmp	r3, #0
 8005176:	d02e      	beq.n	80051d6 <startESMMain+0x67a>
				//set up next interaction
				//set up survey
				osMutexAcquire(surveyMutexHandle, portMAX_DELAY);
 8005178:	4ba1      	ldr	r3, [pc, #644]	; (8005400 <startESMMain+0x8a4>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005180:	4618      	mov	r0, r3
 8005182:	f00a f9e3 	bl	800f54c <osMutexAcquire>
				strncpy(GlobalState.surveyState.screenText, " CAFFEINE?", strlen(" CAFFEINE?") + 1);
 8005186:	4a9f      	ldr	r2, [pc, #636]	; (8005404 <startESMMain+0x8a8>)
 8005188:	4b9f      	ldr	r3, [pc, #636]	; (8005408 <startESMMain+0x8ac>)
 800518a:	cb03      	ldmia	r3!, {r0, r1}
 800518c:	6010      	str	r0, [r2, #0]
 800518e:	6051      	str	r1, [r2, #4]
 8005190:	8819      	ldrh	r1, [r3, #0]
 8005192:	789b      	ldrb	r3, [r3, #2]
 8005194:	8111      	strh	r1, [r2, #8]
 8005196:	7293      	strb	r3, [r2, #10]
				GlobalState.surveyState.screenTextLength = strlen(" CAFFEINE?");
 8005198:	4b98      	ldr	r3, [pc, #608]	; (80053fc <startESMMain+0x8a0>)
 800519a:	220a      	movs	r2, #10
 800519c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
				GlobalState.surveyState.surveyID = SURVEY_CAFFEINE;
 80051a0:	4b96      	ldr	r3, [pc, #600]	; (80053fc <startESMMain+0x8a0>)
 80051a2:	2206      	movs	r2, #6
 80051a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				memcpy(GlobalState.surveyState.optionArray, opts_yes, sizeof(opts_yes));
 80051a8:	4b94      	ldr	r3, [pc, #592]	; (80053fc <startESMMain+0x8a0>)
 80051aa:	4a98      	ldr	r2, [pc, #608]	; (800540c <startESMMain+0x8b0>)
 80051ac:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 80051b0:	4615      	mov	r5, r2
 80051b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80051be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				GlobalState.surveyState.optionArrayLength = 2;
 80051c2:	4b8e      	ldr	r3, [pc, #568]	; (80053fc <startESMMain+0x8a0>)
 80051c4:	2202      	movs	r2, #2
 80051c6:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
				osMutexRelease(surveyMutexHandle);
 80051ca:	4b8d      	ldr	r3, [pc, #564]	; (8005400 <startESMMain+0x8a4>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f00a fa1a 	bl	800f608 <osMutexRelease>
 80051d4:	e012      	b.n	80051fc <startESMMain+0x6a0>

			} else {//timed out due to inactivity
				continue_flag = 0;
 80051d6:	2300      	movs	r3, #0
 80051d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 80051dc:	4b86      	ldr	r3, [pc, #536]	; (80053f8 <startESMMain+0x89c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80051e4:	4618      	mov	r0, r3
 80051e6:	f00a f9b1 	bl	800f54c <osMutexAcquire>
				GlobalState.programMode = MODE_CLEAR;
 80051ea:	4b84      	ldr	r3, [pc, #528]	; (80053fc <startESMMain+0x8a0>)
 80051ec:	2207      	movs	r2, #7
 80051ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				osMutexRelease(modeMutexHandle);
 80051f2:	4b81      	ldr	r3, [pc, #516]	; (80053f8 <startESMMain+0x89c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f00a fa06 	bl	800f608 <osMutexRelease>
			}
		}

		//EIGHTH SCREEN FOR ESM - EXERCISE
		if (continue_flag){
 80051fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00d      	beq.n	8005220 <startESMMain+0x6c4>
			//(2) Wait for notification from UI thread that indicates confirmed input
			notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 8005204:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 8005208:	2001      	movs	r0, #1
 800520a:	f00d fab5 	bl	8012778 <ulTaskNotifyTake>
 800520e:	6478      	str	r0, [r7, #68]	; 0x44

			if (GlobalState.programMode != MODE_ESM_SURVEY){
 8005210:	4b7a      	ldr	r3, [pc, #488]	; (80053fc <startESMMain+0x8a0>)
 8005212:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005216:	2b03      	cmp	r3, #3
 8005218:	d002      	beq.n	8005220 <startESMMain+0x6c4>
				//if our mode has changed, we had a dismiss/snooze event
				continue_flag = 0;
 800521a:	2300      	movs	r3, #0
 800521c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (continue_flag){
 8005220:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005224:	2b00      	cmp	r3, #0
 8005226:	d044      	beq.n	80052b2 <startESMMain+0x756>
			if (notification){//not timed out, had a confirmed event
 8005228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800522a:	2b00      	cmp	r3, #0
 800522c:	d02e      	beq.n	800528c <startESMMain+0x730>
				//set up next interaction
				//set up survey
				osMutexAcquire(surveyMutexHandle, portMAX_DELAY);
 800522e:	4b74      	ldr	r3, [pc, #464]	; (8005400 <startESMMain+0x8a4>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005236:	4618      	mov	r0, r3
 8005238:	f00a f988 	bl	800f54c <osMutexAcquire>
				strncpy(GlobalState.surveyState.screenText, " EXERCISE?", strlen(" EXERCISE?") + 1);
 800523c:	4a71      	ldr	r2, [pc, #452]	; (8005404 <startESMMain+0x8a8>)
 800523e:	4b74      	ldr	r3, [pc, #464]	; (8005410 <startESMMain+0x8b4>)
 8005240:	cb03      	ldmia	r3!, {r0, r1}
 8005242:	6010      	str	r0, [r2, #0]
 8005244:	6051      	str	r1, [r2, #4]
 8005246:	8819      	ldrh	r1, [r3, #0]
 8005248:	789b      	ldrb	r3, [r3, #2]
 800524a:	8111      	strh	r1, [r2, #8]
 800524c:	7293      	strb	r3, [r2, #10]
				GlobalState.surveyState.screenTextLength = strlen(" EXERCISE?");
 800524e:	4b6b      	ldr	r3, [pc, #428]	; (80053fc <startESMMain+0x8a0>)
 8005250:	220a      	movs	r2, #10
 8005252:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
				GlobalState.surveyState.surveyID = SURVEY_EXERCISE;
 8005256:	4b69      	ldr	r3, [pc, #420]	; (80053fc <startESMMain+0x8a0>)
 8005258:	2207      	movs	r2, #7
 800525a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				memcpy(GlobalState.surveyState.optionArray, opts_yes, sizeof(opts_yes));
 800525e:	4b67      	ldr	r3, [pc, #412]	; (80053fc <startESMMain+0x8a0>)
 8005260:	4a6a      	ldr	r2, [pc, #424]	; (800540c <startESMMain+0x8b0>)
 8005262:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 8005266:	4615      	mov	r5, r2
 8005268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800526a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800526c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800526e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005270:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005274:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				GlobalState.surveyState.optionArrayLength = 2;
 8005278:	4b60      	ldr	r3, [pc, #384]	; (80053fc <startESMMain+0x8a0>)
 800527a:	2202      	movs	r2, #2
 800527c:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
				osMutexRelease(surveyMutexHandle);
 8005280:	4b5f      	ldr	r3, [pc, #380]	; (8005400 <startESMMain+0x8a4>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4618      	mov	r0, r3
 8005286:	f00a f9bf 	bl	800f608 <osMutexRelease>
 800528a:	e012      	b.n	80052b2 <startESMMain+0x756>

			} else {//timed out due to inactivity
				continue_flag = 0;
 800528c:	2300      	movs	r3, #0
 800528e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8005292:	4b59      	ldr	r3, [pc, #356]	; (80053f8 <startESMMain+0x89c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800529a:	4618      	mov	r0, r3
 800529c:	f00a f956 	bl	800f54c <osMutexAcquire>
				GlobalState.programMode = MODE_CLEAR;
 80052a0:	4b56      	ldr	r3, [pc, #344]	; (80053fc <startESMMain+0x8a0>)
 80052a2:	2207      	movs	r2, #7
 80052a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				osMutexRelease(modeMutexHandle);
 80052a8:	4b53      	ldr	r3, [pc, #332]	; (80053f8 <startESMMain+0x89c>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f00a f9ab 	bl	800f608 <osMutexRelease>
			}
		}

		//NINETH SCREEN FOR ESM - TIME CUE
		if (continue_flag){
 80052b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00d      	beq.n	80052d6 <startESMMain+0x77a>
			//(2) Wait for notification from UI thread that indicates confirmed input
			notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 80052ba:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 80052be:	2001      	movs	r0, #1
 80052c0:	f00d fa5a 	bl	8012778 <ulTaskNotifyTake>
 80052c4:	6478      	str	r0, [r7, #68]	; 0x44

			if (GlobalState.programMode != MODE_ESM_SURVEY){
 80052c6:	4b4d      	ldr	r3, [pc, #308]	; (80053fc <startESMMain+0x8a0>)
 80052c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80052cc:	2b03      	cmp	r3, #3
 80052ce:	d002      	beq.n	80052d6 <startESMMain+0x77a>
				//if our mode has changed, we had a dismiss/snooze event
				continue_flag = 0;
 80052d0:	2300      	movs	r3, #0
 80052d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (continue_flag){
 80052d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d044      	beq.n	8005368 <startESMMain+0x80c>
			if (notification){//not timed out, had a confirmed event
 80052de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d02e      	beq.n	8005342 <startESMMain+0x7e6>
				//set up next interaction
				//set up survey
				osMutexAcquire(surveyMutexHandle, portMAX_DELAY);
 80052e4:	4b46      	ldr	r3, [pc, #280]	; (8005400 <startESMMain+0x8a4>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80052ec:	4618      	mov	r0, r3
 80052ee:	f00a f92d 	bl	800f54c <osMutexAcquire>
				strncpy(GlobalState.surveyState.screenText, " TIME CUE?", strlen(" TIME CUE?") + 1);
 80052f2:	4a44      	ldr	r2, [pc, #272]	; (8005404 <startESMMain+0x8a8>)
 80052f4:	4b47      	ldr	r3, [pc, #284]	; (8005414 <startESMMain+0x8b8>)
 80052f6:	cb03      	ldmia	r3!, {r0, r1}
 80052f8:	6010      	str	r0, [r2, #0]
 80052fa:	6051      	str	r1, [r2, #4]
 80052fc:	8819      	ldrh	r1, [r3, #0]
 80052fe:	789b      	ldrb	r3, [r3, #2]
 8005300:	8111      	strh	r1, [r2, #8]
 8005302:	7293      	strb	r3, [r2, #10]
				GlobalState.surveyState.screenTextLength = strlen(" TIME CUE?");
 8005304:	4b3d      	ldr	r3, [pc, #244]	; (80053fc <startESMMain+0x8a0>)
 8005306:	220a      	movs	r2, #10
 8005308:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
				GlobalState.surveyState.surveyID = SURVEY_TIMECUE;
 800530c:	4b3b      	ldr	r3, [pc, #236]	; (80053fc <startESMMain+0x8a0>)
 800530e:	2205      	movs	r2, #5
 8005310:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				memcpy(GlobalState.surveyState.optionArray, opts_yes, sizeof(opts_yes));
 8005314:	4b39      	ldr	r3, [pc, #228]	; (80053fc <startESMMain+0x8a0>)
 8005316:	4a3d      	ldr	r2, [pc, #244]	; (800540c <startESMMain+0x8b0>)
 8005318:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 800531c:	4615      	mov	r5, r2
 800531e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005324:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005326:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800532a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				GlobalState.surveyState.optionArrayLength = 2;
 800532e:	4b33      	ldr	r3, [pc, #204]	; (80053fc <startESMMain+0x8a0>)
 8005330:	2202      	movs	r2, #2
 8005332:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
				osMutexRelease(surveyMutexHandle);
 8005336:	4b32      	ldr	r3, [pc, #200]	; (8005400 <startESMMain+0x8a4>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f00a f964 	bl	800f608 <osMutexRelease>
 8005340:	e012      	b.n	8005368 <startESMMain+0x80c>

			} else {//timed out due to inactivity
				continue_flag = 0;
 8005342:	2300      	movs	r3, #0
 8005344:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8005348:	4b2b      	ldr	r3, [pc, #172]	; (80053f8 <startESMMain+0x89c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005350:	4618      	mov	r0, r3
 8005352:	f00a f8fb 	bl	800f54c <osMutexAcquire>
				GlobalState.programMode = MODE_CLEAR;
 8005356:	4b29      	ldr	r3, [pc, #164]	; (80053fc <startESMMain+0x8a0>)
 8005358:	2207      	movs	r2, #7
 800535a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				osMutexRelease(modeMutexHandle);
 800535e:	4b26      	ldr	r3, [pc, #152]	; (80053f8 <startESMMain+0x89c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4618      	mov	r0, r3
 8005364:	f00a f950 	bl	800f608 <osMutexRelease>
			}
		}

		//TENTH SCREEN FOR ESM - LOCATION
		if (continue_flag){
 8005368:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00d      	beq.n	800538c <startESMMain+0x830>
			//(2) Wait for notification from UI thread that indicates confirmed input
			notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 8005370:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 8005374:	2001      	movs	r0, #1
 8005376:	f00d f9ff 	bl	8012778 <ulTaskNotifyTake>
 800537a:	6478      	str	r0, [r7, #68]	; 0x44

			if (GlobalState.programMode != MODE_ESM_SURVEY){
 800537c:	4b1f      	ldr	r3, [pc, #124]	; (80053fc <startESMMain+0x8a0>)
 800537e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005382:	2b03      	cmp	r3, #3
 8005384:	d002      	beq.n	800538c <startESMMain+0x830>
				//if our mode has changed, we had a dismiss/snooze event
				continue_flag = 0;
 8005386:	2300      	movs	r3, #0
 8005388:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (continue_flag){
 800538c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005390:	2b00      	cmp	r3, #0
 8005392:	d058      	beq.n	8005446 <startESMMain+0x8ea>
			if (notification){//not timed out, had a confirmed event
 8005394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005396:	2b00      	cmp	r3, #0
 8005398:	d042      	beq.n	8005420 <startESMMain+0x8c4>
				//set up next interaction
				//set up survey
				osMutexAcquire(surveyMutexHandle, portMAX_DELAY);
 800539a:	4b19      	ldr	r3, [pc, #100]	; (8005400 <startESMMain+0x8a4>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80053a2:	4618      	mov	r0, r3
 80053a4:	f00a f8d2 	bl	800f54c <osMutexAcquire>
				strncpy(GlobalState.surveyState.screenText, " LOCATION?", strlen(" LOCATION?") + 1);
 80053a8:	4a16      	ldr	r2, [pc, #88]	; (8005404 <startESMMain+0x8a8>)
 80053aa:	4b1b      	ldr	r3, [pc, #108]	; (8005418 <startESMMain+0x8bc>)
 80053ac:	cb03      	ldmia	r3!, {r0, r1}
 80053ae:	6010      	str	r0, [r2, #0]
 80053b0:	6051      	str	r1, [r2, #4]
 80053b2:	8819      	ldrh	r1, [r3, #0]
 80053b4:	789b      	ldrb	r3, [r3, #2]
 80053b6:	8111      	strh	r1, [r2, #8]
 80053b8:	7293      	strb	r3, [r2, #10]
				GlobalState.surveyState.screenTextLength = strlen(" LOCATION?");
 80053ba:	4b10      	ldr	r3, [pc, #64]	; (80053fc <startESMMain+0x8a0>)
 80053bc:	220a      	movs	r2, #10
 80053be:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
				GlobalState.surveyState.surveyID = SURVEY_LOCATE;
 80053c2:	4b0e      	ldr	r3, [pc, #56]	; (80053fc <startESMMain+0x8a0>)
 80053c4:	2209      	movs	r2, #9
 80053c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				memcpy(GlobalState.surveyState.optionArray, opts_location, sizeof(opts_location));
 80053ca:	4b0c      	ldr	r3, [pc, #48]	; (80053fc <startESMMain+0x8a0>)
 80053cc:	4a13      	ldr	r2, [pc, #76]	; (800541c <startESMMain+0x8c0>)
 80053ce:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 80053d2:	4615      	mov	r5, r2
 80053d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80053e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				GlobalState.surveyState.optionArrayLength = 2;
 80053e4:	4b05      	ldr	r3, [pc, #20]	; (80053fc <startESMMain+0x8a0>)
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
				osMutexRelease(surveyMutexHandle);
 80053ec:	4b04      	ldr	r3, [pc, #16]	; (8005400 <startESMMain+0x8a4>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f00a f909 	bl	800f608 <osMutexRelease>
 80053f6:	e026      	b.n	8005446 <startESMMain+0x8ea>
 80053f8:	2002e234 	.word	0x2002e234
 80053fc:	2002e0cc 	.word	0x2002e0cc
 8005400:	2002e22c 	.word	0x2002e22c
 8005404:	2002e0fd 	.word	0x2002e0fd
 8005408:	08017f14 	.word	0x08017f14
 800540c:	08018f18 	.word	0x08018f18
 8005410:	08017f20 	.word	0x08017f20
 8005414:	08017f2c 	.word	0x08017f2c
 8005418:	08017f38 	.word	0x08017f38
 800541c:	08018f44 	.word	0x08018f44

			} else {//timed out due to inactivity
				continue_flag = 0;
 8005420:	2300      	movs	r3, #0
 8005422:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8005426:	4baa      	ldr	r3, [pc, #680]	; (80056d0 <startESMMain+0xb74>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800542e:	4618      	mov	r0, r3
 8005430:	f00a f88c 	bl	800f54c <osMutexAcquire>
				GlobalState.programMode = MODE_CLEAR;
 8005434:	4ba7      	ldr	r3, [pc, #668]	; (80056d4 <startESMMain+0xb78>)
 8005436:	2207      	movs	r2, #7
 8005438:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				osMutexRelease(modeMutexHandle);
 800543c:	4ba4      	ldr	r3, [pc, #656]	; (80056d0 <startESMMain+0xb74>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4618      	mov	r0, r3
 8005442:	f00a f8e1 	bl	800f608 <osMutexRelease>
			}
		}

		//ELEVENTH SCREEN FOR ESM - THERMAL SENSATION
		if (continue_flag){
 8005446:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00d      	beq.n	800546a <startESMMain+0x90e>
			//(2) Wait for notification from UI thread that indicates confirmed input
			notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 800544e:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 8005452:	2001      	movs	r0, #1
 8005454:	f00d f990 	bl	8012778 <ulTaskNotifyTake>
 8005458:	6478      	str	r0, [r7, #68]	; 0x44

			if (GlobalState.programMode != MODE_ESM_SURVEY){
 800545a:	4b9e      	ldr	r3, [pc, #632]	; (80056d4 <startESMMain+0xb78>)
 800545c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005460:	2b03      	cmp	r3, #3
 8005462:	d002      	beq.n	800546a <startESMMain+0x90e>
				//if our mode has changed, we had a dismiss/snooze event
				continue_flag = 0;
 8005464:	2300      	movs	r3, #0
 8005466:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (continue_flag){
 800546a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800546e:	2b00      	cmp	r3, #0
 8005470:	d042      	beq.n	80054f8 <startESMMain+0x99c>
			if (notification){//not timed out, had a confirmed event
 8005472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005474:	2b00      	cmp	r3, #0
 8005476:	d02c      	beq.n	80054d2 <startESMMain+0x976>
				//set up next interaction
				//set up survey
				osMutexAcquire(surveyMutexHandle, portMAX_DELAY);
 8005478:	4b97      	ldr	r3, [pc, #604]	; (80056d8 <startESMMain+0xb7c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005480:	4618      	mov	r0, r3
 8005482:	f00a f863 	bl	800f54c <osMutexAcquire>
				strncpy(GlobalState.surveyState.screenText, " SENSATION?", strlen(" SENSATION?") + 1);
 8005486:	4a95      	ldr	r2, [pc, #596]	; (80056dc <startESMMain+0xb80>)
 8005488:	4b95      	ldr	r3, [pc, #596]	; (80056e0 <startESMMain+0xb84>)
 800548a:	4614      	mov	r4, r2
 800548c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800548e:	6020      	str	r0, [r4, #0]
 8005490:	6061      	str	r1, [r4, #4]
 8005492:	60a2      	str	r2, [r4, #8]
				GlobalState.surveyState.screenTextLength = strlen(" SENSATION?");
 8005494:	4b8f      	ldr	r3, [pc, #572]	; (80056d4 <startESMMain+0xb78>)
 8005496:	220b      	movs	r2, #11
 8005498:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
				GlobalState.surveyState.surveyID = SURVEY_TSENSE;
 800549c:	4b8d      	ldr	r3, [pc, #564]	; (80056d4 <startESMMain+0xb78>)
 800549e:	220a      	movs	r2, #10
 80054a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				memcpy(GlobalState.surveyState.optionArray, opts_thermalsense, sizeof(opts_thermalsense));
 80054a4:	4b8b      	ldr	r3, [pc, #556]	; (80056d4 <startESMMain+0xb78>)
 80054a6:	4a8f      	ldr	r2, [pc, #572]	; (80056e4 <startESMMain+0xb88>)
 80054a8:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 80054ac:	4615      	mov	r5, r2
 80054ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80054ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				GlobalState.surveyState.optionArrayLength = 7;
 80054be:	4b85      	ldr	r3, [pc, #532]	; (80056d4 <startESMMain+0xb78>)
 80054c0:	2207      	movs	r2, #7
 80054c2:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
				osMutexRelease(surveyMutexHandle);
 80054c6:	4b84      	ldr	r3, [pc, #528]	; (80056d8 <startESMMain+0xb7c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f00a f89c 	bl	800f608 <osMutexRelease>
 80054d0:	e012      	b.n	80054f8 <startESMMain+0x99c>

			} else {//timed out due to inactivity
				continue_flag = 0;
 80054d2:	2300      	movs	r3, #0
 80054d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 80054d8:	4b7d      	ldr	r3, [pc, #500]	; (80056d0 <startESMMain+0xb74>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80054e0:	4618      	mov	r0, r3
 80054e2:	f00a f833 	bl	800f54c <osMutexAcquire>
				GlobalState.programMode = MODE_CLEAR;
 80054e6:	4b7b      	ldr	r3, [pc, #492]	; (80056d4 <startESMMain+0xb78>)
 80054e8:	2207      	movs	r2, #7
 80054ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				osMutexRelease(modeMutexHandle);
 80054ee:	4b78      	ldr	r3, [pc, #480]	; (80056d0 <startESMMain+0xb74>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f00a f888 	bl	800f608 <osMutexRelease>
			}
		}

		//TWELFTH SCREEN FOR ESM - THERMAL PREF
		if (continue_flag){
 80054f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00d      	beq.n	800551c <startESMMain+0x9c0>
			//(2) Wait for notification from UI thread that indicates confirmed input
			notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 8005500:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 8005504:	2001      	movs	r0, #1
 8005506:	f00d f937 	bl	8012778 <ulTaskNotifyTake>
 800550a:	6478      	str	r0, [r7, #68]	; 0x44

			if (GlobalState.programMode != MODE_ESM_SURVEY){
 800550c:	4b71      	ldr	r3, [pc, #452]	; (80056d4 <startESMMain+0xb78>)
 800550e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005512:	2b03      	cmp	r3, #3
 8005514:	d002      	beq.n	800551c <startESMMain+0x9c0>
				//if our mode has changed, we had a dismiss/snooze event
				continue_flag = 0;
 8005516:	2300      	movs	r3, #0
 8005518:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (continue_flag){
 800551c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005520:	2b00      	cmp	r3, #0
 8005522:	d044      	beq.n	80055ae <startESMMain+0xa52>
			if (notification){//not timed out, had a confirmed event
 8005524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005526:	2b00      	cmp	r3, #0
 8005528:	d02e      	beq.n	8005588 <startESMMain+0xa2c>
				//set up next interaction
				//set up survey
				osMutexAcquire(surveyMutexHandle, portMAX_DELAY);
 800552a:	4b6b      	ldr	r3, [pc, #428]	; (80056d8 <startESMMain+0xb7c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005532:	4618      	mov	r0, r3
 8005534:	f00a f80a 	bl	800f54c <osMutexAcquire>
				strncpy(GlobalState.surveyState.screenText, "TEMP PREFER?", strlen("TEMP PREFER?") + 1);
 8005538:	4a68      	ldr	r2, [pc, #416]	; (80056dc <startESMMain+0xb80>)
 800553a:	4b6b      	ldr	r3, [pc, #428]	; (80056e8 <startESMMain+0xb8c>)
 800553c:	4614      	mov	r4, r2
 800553e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005540:	6020      	str	r0, [r4, #0]
 8005542:	6061      	str	r1, [r4, #4]
 8005544:	60a2      	str	r2, [r4, #8]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	7323      	strb	r3, [r4, #12]
				GlobalState.surveyState.screenTextLength = strlen("TEMP PREFER?");
 800554a:	4b62      	ldr	r3, [pc, #392]	; (80056d4 <startESMMain+0xb78>)
 800554c:	220c      	movs	r2, #12
 800554e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
				GlobalState.surveyState.surveyID = SURVEY_TCOMFORT;
 8005552:	4b60      	ldr	r3, [pc, #384]	; (80056d4 <startESMMain+0xb78>)
 8005554:	220b      	movs	r2, #11
 8005556:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				memcpy(GlobalState.surveyState.optionArray, opts_thermalcomfort, sizeof(opts_thermalcomfort));
 800555a:	4b5e      	ldr	r3, [pc, #376]	; (80056d4 <startESMMain+0xb78>)
 800555c:	4a63      	ldr	r2, [pc, #396]	; (80056ec <startESMMain+0xb90>)
 800555e:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 8005562:	4615      	mov	r5, r2
 8005564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800556a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800556c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005570:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				GlobalState.surveyState.optionArrayLength = 3;
 8005574:	4b57      	ldr	r3, [pc, #348]	; (80056d4 <startESMMain+0xb78>)
 8005576:	2203      	movs	r2, #3
 8005578:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
				osMutexRelease(surveyMutexHandle);
 800557c:	4b56      	ldr	r3, [pc, #344]	; (80056d8 <startESMMain+0xb7c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4618      	mov	r0, r3
 8005582:	f00a f841 	bl	800f608 <osMutexRelease>
 8005586:	e012      	b.n	80055ae <startESMMain+0xa52>

			} else {//timed out due to inactivity
				continue_flag = 0;
 8005588:	2300      	movs	r3, #0
 800558a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 800558e:	4b50      	ldr	r3, [pc, #320]	; (80056d0 <startESMMain+0xb74>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005596:	4618      	mov	r0, r3
 8005598:	f009 ffd8 	bl	800f54c <osMutexAcquire>
				GlobalState.programMode = MODE_CLEAR;
 800559c:	4b4d      	ldr	r3, [pc, #308]	; (80056d4 <startESMMain+0xb78>)
 800559e:	2207      	movs	r2, #7
 80055a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				osMutexRelease(modeMutexHandle);
 80055a4:	4b4a      	ldr	r3, [pc, #296]	; (80056d0 <startESMMain+0xb74>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f00a f82d 	bl	800f608 <osMutexRelease>
			}
		}

		//FINISH ESM; SHOW TIME
		if (continue_flag){
 80055ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00d      	beq.n	80055d2 <startESMMain+0xa76>
			//(2) Wait for notification from UI thread that indicates confirmed input
			notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 80055b6:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 80055ba:	2001      	movs	r0, #1
 80055bc:	f00d f8dc 	bl	8012778 <ulTaskNotifyTake>
 80055c0:	6478      	str	r0, [r7, #68]	; 0x44

			if (GlobalState.programMode != MODE_ESM_SURVEY){
 80055c2:	4b44      	ldr	r3, [pc, #272]	; (80056d4 <startESMMain+0xb78>)
 80055c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	d002      	beq.n	80055d2 <startESMMain+0xa76>
				//if our mode has changed, we had a dismiss/snooze event
				continue_flag = 0;
 80055cc:	2300      	movs	r3, #0
 80055ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (continue_flag){
 80055d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d076      	beq.n	80056c8 <startESMMain+0xb6c>
			if (notification){//not timed out, had a confirmed event
 80055da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d010      	beq.n	8005602 <startESMMain+0xaa6>
				//completed survey with no problem!

				//back to rest, show time
				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 80055e0:	4b3b      	ldr	r3, [pc, #236]	; (80056d0 <startESMMain+0xb74>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80055e8:	4618      	mov	r0, r3
 80055ea:	f009 ffaf 	bl	800f54c <osMutexAcquire>
				GlobalState.programMode = MODE_SHOW_TIME;
 80055ee:	4b39      	ldr	r3, [pc, #228]	; (80056d4 <startESMMain+0xb78>)
 80055f0:	2205      	movs	r2, #5
 80055f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				osMutexRelease(modeMutexHandle);;
 80055f6:	4b36      	ldr	r3, [pc, #216]	; (80056d0 <startESMMain+0xb74>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f00a f804 	bl	800f608 <osMutexRelease>
		(sameDayFlag | (curr_date > last_date )) ){
 8005600:	e062      	b.n	80056c8 <startESMMain+0xb6c>

			} else {//timed out due to inactivity
				continue_flag = 0;
 8005602:	2300      	movs	r3, #0
 8005604:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8005608:	4b31      	ldr	r3, [pc, #196]	; (80056d0 <startESMMain+0xb74>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005610:	4618      	mov	r0, r3
 8005612:	f009 ff9b 	bl	800f54c <osMutexAcquire>
				GlobalState.programMode = MODE_CLEAR;
 8005616:	4b2f      	ldr	r3, [pc, #188]	; (80056d4 <startESMMain+0xb78>)
 8005618:	2207      	movs	r2, #7
 800561a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				osMutexRelease(modeMutexHandle);
 800561e:	4b2c      	ldr	r3, [pc, #176]	; (80056d0 <startESMMain+0xb74>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4618      	mov	r0, r3
 8005624:	f009 fff0 	bl	800f608 <osMutexRelease>
		(sameDayFlag | (curr_date > last_date )) ){
 8005628:	e04e      	b.n	80056c8 <startESMMain+0xb6c>
		}

    } else {//not time for a survey

    	//get hour for last_seen + interval (trigger) time
    	uint8_t extra_hours = (last_min + GlobalState.currentInterval) / 60;
 800562a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800562e:	4a29      	ldr	r2, [pc, #164]	; (80056d4 <startESMMain+0xb78>)
 8005630:	f892 20d4 	ldrb.w	r2, [r2, #212]	; 0xd4
 8005634:	4413      	add	r3, r2
 8005636:	4a2e      	ldr	r2, [pc, #184]	; (80056f0 <startESMMain+0xb94>)
 8005638:	fb82 1203 	smull	r1, r2, r2, r3
 800563c:	441a      	add	r2, r3
 800563e:	1152      	asrs	r2, r2, #5
 8005640:	17db      	asrs	r3, r3, #31
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    	last_hrs = (last_hrs + extra_hours) % 24;
 8005648:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800564c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005650:	441a      	add	r2, r3
 8005652:	4b28      	ldr	r3, [pc, #160]	; (80056f4 <startESMMain+0xb98>)
 8005654:	fb83 1302 	smull	r1, r3, r3, r2
 8005658:	1099      	asrs	r1, r3, #2
 800565a:	17d3      	asrs	r3, r2, #31
 800565c:	1ac9      	subs	r1, r1, r3
 800565e:	460b      	mov	r3, r1
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	440b      	add	r3, r1
 8005664:	00db      	lsls	r3, r3, #3
 8005666:	1ad1      	subs	r1, r2, r3
 8005668:	460b      	mov	r3, r1
 800566a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    	//if next trigger is outside of timebound (i.e. last seen time is end of the day) AND
    	//its the morning (curr_hr = startHR), put it in paused mode, wait for user to initiate.
    	if (!check_time_bounds(last_hrs) && (curr_hrs == RTC_Bcd2ToByte(GlobalState.timeBound.startHR_BCD)) && !GlobalState.paused){
 800566e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff fa3c 	bl	8004af0 <check_time_bounds>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	f47f aa77 	bne.w	8004b6e <startESMMain+0x12>
 8005680:	4b14      	ldr	r3, [pc, #80]	; (80056d4 <startESMMain+0xb78>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	4618      	mov	r0, r3
 8005686:	f005 f9f3 	bl	800aa70 <RTC_Bcd2ToByte>
 800568a:	4603      	mov	r3, r0
 800568c:	461a      	mov	r2, r3
 800568e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005692:	4293      	cmp	r3, r2
 8005694:	f47f aa6b 	bne.w	8004b6e <startESMMain+0x12>
 8005698:	4b0e      	ldr	r3, [pc, #56]	; (80056d4 <startESMMain+0xb78>)
 800569a:	f893 30d5 	ldrb.w	r3, [r3, #213]	; 0xd5
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f47f aa65 	bne.w	8004b6e <startESMMain+0x12>
    		GlobalState.paused = 1;
 80056a4:	4b0b      	ldr	r3, [pc, #44]	; (80056d4 <startESMMain+0xb78>)
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
    		const BLETX_Queue_t bleSendPause = {TX_BEGIN_PAUSE, 0x0000};
 80056ac:	2308      	movs	r3, #8
 80056ae:	733b      	strb	r3, [r7, #12]
 80056b0:	2300      	movs	r3, #0
 80056b2:	81fb      	strh	r3, [r7, #14]
     		osMessageQueuePut(bleTXqueueHandle, &bleSendPause, 0, 0);
 80056b4:	4b10      	ldr	r3, [pc, #64]	; (80056f8 <startESMMain+0xb9c>)
 80056b6:	6818      	ldr	r0, [r3, #0]
 80056b8:	f107 010c 	add.w	r1, r7, #12
 80056bc:	2300      	movs	r3, #0
 80056be:	2200      	movs	r2, #0
 80056c0:	f00a f9d4 	bl	800fa6c <osMessageQueuePut>
 80056c4:	f7ff ba53 	b.w	8004b6e <startESMMain+0x12>
		(sameDayFlag | (curr_date > last_date )) ){
 80056c8:	bf00      	nop
  {
 80056ca:	f7ff ba50 	b.w	8004b6e <startESMMain+0x12>
 80056ce:	bf00      	nop
 80056d0:	2002e234 	.word	0x2002e234
 80056d4:	2002e0cc 	.word	0x2002e0cc
 80056d8:	2002e22c 	.word	0x2002e22c
 80056dc:	2002e0fd 	.word	0x2002e0fd
 80056e0:	08017f44 	.word	0x08017f44
 80056e4:	08018f70 	.word	0x08018f70
 80056e8:	08017f50 	.word	0x08017f50
 80056ec:	08018f9c 	.word	0x08018f9c
 80056f0:	88888889 	.word	0x88888889
 80056f4:	2aaaaaab 	.word	0x2aaaaaab
 80056f8:	2002e294 	.word	0x2002e294

080056fc <startButtonPress>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startButtonPress */
void startButtonPress(void *argument)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startButtonPress */
  /* Infinite loop */

  //Buttons are PULLED UP and drop to 0 when pressed
  uint8_t buttonState[] = {1, 1, 1};
 8005704:	4a3d      	ldr	r2, [pc, #244]	; (80057fc <startButtonPress+0x100>)
 8005706:	f107 0314 	add.w	r3, r7, #20
 800570a:	6812      	ldr	r2, [r2, #0]
 800570c:	4611      	mov	r1, r2
 800570e:	8019      	strh	r1, [r3, #0]
 8005710:	3302      	adds	r3, #2
 8005712:	0c12      	lsrs	r2, r2, #16
 8005714:	701a      	strb	r2, [r3, #0]
  uint32_t callingPin = 0x00;
 8005716:	2300      	movs	r3, #0
 8005718:	613b      	str	r3, [r7, #16]

  const BLETX_Queue_t bleSendData = {TX_PREVIOUS_INVALID, 0x0000};
 800571a:	2306      	movs	r3, #6
 800571c:	733b      	strb	r3, [r7, #12]
 800571e:	2300      	movs	r3, #0
 8005720:	81fb      	strh	r3, [r7, #14]

  for(;;)
  {
	//wait for rising or falling edge trigger, put calling pin in callingPin
	xTaskNotifyWait(0x00, 0x00, &callingPin, portMAX_DELAY);
 8005722:	f107 0210 	add.w	r2, r7, #16
 8005726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800572a:	2100      	movs	r1, #0
 800572c:	2000      	movs	r0, #0
 800572e:	f00d f86b 	bl	8012808 <xTaskNotifyWait>

	//check state of pin
	GPIO_PinState first_read = HAL_GPIO_ReadPin(GPIOB, callingPin);
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	b29b      	uxth	r3, r3
 8005736:	4619      	mov	r1, r3
 8005738:	4831      	ldr	r0, [pc, #196]	; (8005800 <startButtonPress+0x104>)
 800573a:	f002 f82f 	bl	800779c <HAL_GPIO_ReadPin>
 800573e:	4603      	mov	r3, r0
 8005740:	75fb      	strb	r3, [r7, #23]

	//wait 50ms
    osDelay(50);
 8005742:	2032      	movs	r0, #50	; 0x32
 8005744:	f009 fe3a 	bl	800f3bc <osDelay>

    //check again (debounce) to get a good reading
	if (first_read == HAL_GPIO_ReadPin(GPIOB, callingPin)){
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	b29b      	uxth	r3, r3
 800574c:	4619      	mov	r1, r3
 800574e:	482c      	ldr	r0, [pc, #176]	; (8005800 <startButtonPress+0x104>)
 8005750:	f002 f824 	bl	800779c <HAL_GPIO_ReadPin>
 8005754:	4603      	mov	r3, r0
 8005756:	461a      	mov	r2, r3
 8005758:	7dfb      	ldrb	r3, [r7, #23]
 800575a:	4293      	cmp	r3, r2
 800575c:	d1e1      	bne.n	8005722 <startButtonPress+0x26>
		//when this happens (except during debouncing) so we expect this to be true
		//almost always

		//callingPin can be used as bitmask Pin 5/4/3 give 1000000/10000/1000

		if (callingPin == 0b1000 && first_read != buttonState[0]) { //button 1 trigger
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	2b08      	cmp	r3, #8
 8005762:	d116      	bne.n	8005792 <startButtonPress+0x96>
 8005764:	7d3b      	ldrb	r3, [r7, #20]
 8005766:	7dfa      	ldrb	r2, [r7, #23]
 8005768:	429a      	cmp	r2, r3
 800576a:	d012      	beq.n	8005792 <startButtonPress+0x96>
		  //set buttonState
		  buttonState[0] = first_read;
 800576c:	7dfb      	ldrb	r3, [r7, #23]
 800576e:	753b      	strb	r3, [r7, #20]

		  //do stuff if button pressed
		  if (!first_read){
 8005770:	7dfb      	ldrb	r3, [r7, #23]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10d      	bne.n	8005792 <startButtonPress+0x96>
			  if (GlobalState.programMode){
 8005776:	4b23      	ldr	r3, [pc, #140]	; (8005804 <startButtonPress+0x108>)
 8005778:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800577c:	2b00      	cmp	r3, #0
 800577e:	d004      	beq.n	800578a <startButtonPress+0x8e>
			   GlobalState.programMode = 0;
 8005780:	4b20      	ldr	r3, [pc, #128]	; (8005804 <startButtonPress+0x108>)
 8005782:	2200      	movs	r2, #0
 8005784:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005788:	e003      	b.n	8005792 <startButtonPress+0x96>
			  } else {
			   GlobalState.programMode = 1;
 800578a:	4b1e      	ldr	r3, [pc, #120]	; (8005804 <startButtonPress+0x108>)
 800578c:	2201      	movs	r2, #1
 800578e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			  }
		  }

		}
		if (callingPin == 0b10000 && first_read != buttonState[1]) { //button 2 trigger
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	2b10      	cmp	r3, #16
 8005796:	d116      	bne.n	80057c6 <startButtonPress+0xca>
 8005798:	7d7b      	ldrb	r3, [r7, #21]
 800579a:	7dfa      	ldrb	r2, [r7, #23]
 800579c:	429a      	cmp	r2, r3
 800579e:	d012      	beq.n	80057c6 <startButtonPress+0xca>
		    //set buttonState
		    buttonState[1] = first_read;
 80057a0:	7dfb      	ldrb	r3, [r7, #23]
 80057a2:	757b      	strb	r3, [r7, #21]

		    //do stuff if button pressed
		    if (!first_read){
 80057a4:	7dfb      	ldrb	r3, [r7, #23]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10d      	bne.n	80057c6 <startButtonPress+0xca>
		    	  if (GlobalState.programMode){
 80057aa:	4b16      	ldr	r3, [pc, #88]	; (8005804 <startButtonPress+0x108>)
 80057ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d004      	beq.n	80057be <startButtonPress+0xc2>
				   GlobalState.programMode = 0;
 80057b4:	4b13      	ldr	r3, [pc, #76]	; (8005804 <startButtonPress+0x108>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80057bc:	e003      	b.n	80057c6 <startButtonPress+0xca>
				  } else {
				   GlobalState.programMode = 1;
 80057be:	4b11      	ldr	r3, [pc, #68]	; (8005804 <startButtonPress+0x108>)
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				  }

		    }
		}
		if (callingPin == 0b100000 && first_read != buttonState[2]) { //button 3 trigger
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	2b20      	cmp	r3, #32
 80057ca:	d1aa      	bne.n	8005722 <startButtonPress+0x26>
 80057cc:	7dbb      	ldrb	r3, [r7, #22]
 80057ce:	7dfa      	ldrb	r2, [r7, #23]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d0a6      	beq.n	8005722 <startButtonPress+0x26>
		    //set buttonState
		    buttonState[2] = first_read;
 80057d4:	7dfb      	ldrb	r3, [r7, #23]
 80057d6:	75bb      	strb	r3, [r7, #22]

		    //do stuff if button pressed
		    if (!first_read){
 80057d8:	7dfb      	ldrb	r3, [r7, #23]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1a1      	bne.n	8005722 <startButtonPress+0x26>
		    	  if (GlobalState.programMode){
 80057de:	4b09      	ldr	r3, [pc, #36]	; (8005804 <startButtonPress+0x108>)
 80057e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d004      	beq.n	80057f2 <startButtonPress+0xf6>
				   GlobalState.programMode = 0;
 80057e8:	4b06      	ldr	r3, [pc, #24]	; (8005804 <startButtonPress+0x108>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80057f0:	e797      	b.n	8005722 <startButtonPress+0x26>
				  } else {
				  GlobalState.programMode = 1;
 80057f2:	4b04      	ldr	r3, [pc, #16]	; (8005804 <startButtonPress+0x108>)
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  {
 80057fa:	e792      	b.n	8005722 <startButtonPress+0x26>
 80057fc:	08017f60 	.word	0x08017f60
 8005800:	48000400 	.word	0x48000400
 8005804:	2002e0cc 	.word	0x2002e0cc

08005808 <startConditionsPoll>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startConditionsPoll */
void startConditionsPoll(void *argument)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
	for(;;){
	osDelay(15000);
 8005810:	f643 2098 	movw	r0, #15000	; 0x3a98
 8005814:	f009 fdd2 	bl	800f3bc <osDelay>
 8005818:	e7fa      	b.n	8005810 <startConditionsPoll+0x8>
	...

0800581c <startBLETX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBLETX */
void startBLETX(void *argument)
{
 800581c:	b5b0      	push	{r4, r5, r7, lr}
 800581e:	b09a      	sub	sp, #104	; 0x68
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  //TX_TIMESTAMP_UPDATE -- use data in sendData for error, to send
  //TX_SURVEY_RESULT -- use data in sendData, first byte is survey/second is answer

  BLETX_Queue_t sendData;

  UnsentQueueAddress_t DataQueue = NULL;
 8005824:	2300      	movs	r3, #0
 8005826:	667b      	str	r3, [r7, #100]	; 0x64

  RTC_TimeTypeDef cTime;
  RTC_DateTypeDef cDate;
  uint16_t sendval[10] = {0};
 8005828:	f107 0310 	add.w	r3, r7, #16
 800582c:	2200      	movs	r2, #0
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	605a      	str	r2, [r3, #4]
 8005832:	609a      	str	r2, [r3, #8]
 8005834:	60da      	str	r2, [r3, #12]
 8005836:	611a      	str	r2, [r3, #16]
  uint16_t lightval[4] = {0};
 8005838:	f107 0308 	add.w	r3, r7, #8
 800583c:	2200      	movs	r2, #0
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	605a      	str	r2, [r3, #4]
  uint8_t numBytes = 0;
 8005842:	2300      	movs	r3, #0
 8005844:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

  /* Infinite loop */
  for(;;)
  {
        if (osMessageQueueGet(bleTXqueueHandle, &sendData, NULL, osWaitForever) == osOK){
 8005848:	4b90      	ldr	r3, [pc, #576]	; (8005a8c <startBLETX+0x270>)
 800584a:	6818      	ldr	r0, [r3, #0]
 800584c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005854:	2200      	movs	r2, #0
 8005856:	f00a f97d 	bl	800fb54 <osMessageQueueGet>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1f3      	bne.n	8005848 <startBLETX+0x2c>

          //construct timestamped data to send
          osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 8005860:	4b8b      	ldr	r3, [pc, #556]	; (8005a90 <startBLETX+0x274>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005868:	4618      	mov	r0, r3
 800586a:	f009 fe6f 	bl	800f54c <osMutexAcquire>
          HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BCD);
 800586e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005872:	2201      	movs	r2, #1
 8005874:	4619      	mov	r1, r3
 8005876:	4887      	ldr	r0, [pc, #540]	; (8005a94 <startBLETX+0x278>)
 8005878:	f004 ff33 	bl	800a6e2 <HAL_RTC_GetTime>
          HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BCD);
 800587c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005880:	2201      	movs	r2, #1
 8005882:	4619      	mov	r1, r3
 8005884:	4883      	ldr	r0, [pc, #524]	; (8005a94 <startBLETX+0x278>)
 8005886:	f005 f836 	bl	800a8f6 <HAL_RTC_GetDate>
          osMutexRelease(rtcMutexHandle);
 800588a:	4b81      	ldr	r3, [pc, #516]	; (8005a90 <startBLETX+0x274>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4618      	mov	r0, r3
 8005890:	f009 feba 	bl	800f608 <osMutexRelease>

          switch (sendData.sendType){
 8005894:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005898:	2b08      	cmp	r3, #8
 800589a:	f200 814b 	bhi.w	8005b34 <startBLETX+0x318>
 800589e:	a201      	add	r2, pc, #4	; (adr r2, 80058a4 <startBLETX+0x88>)
 80058a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a4:	08005aa1 	.word	0x08005aa1
 80058a8:	08005aa1 	.word	0x08005aa1
 80058ac:	080058c9 	.word	0x080058c9
 80058b0:	08005931 	.word	0x08005931
 80058b4:	0800599d 	.word	0x0800599d
 80058b8:	08005931 	.word	0x08005931
 80058bc:	080058c9 	.word	0x080058c9
 80058c0:	08005931 	.word	0x08005931
 80058c4:	080058c9 	.word	0x080058c9
            case TX_PREVIOUS_INVALID:
            case TX_SURVEY_INITIALIZED:
            case TX_BEGIN_PAUSE:

            	sendval[4] = (cDate.WeekDay << (8*1)) | cDate.Month;
 80058c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80058cc:	021b      	lsls	r3, r3, #8
 80058ce:	b21a      	sxth	r2, r3
 80058d0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80058d4:	b21b      	sxth	r3, r3
 80058d6:	4313      	orrs	r3, r2
 80058d8:	b21b      	sxth	r3, r3
 80058da:	b29b      	uxth	r3, r3
 80058dc:	833b      	strh	r3, [r7, #24]
            	sendval[3] = (cDate.Date << (8*1)) | cDate.Year;
 80058de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80058e2:	021b      	lsls	r3, r3, #8
 80058e4:	b21a      	sxth	r2, r3
 80058e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058ea:	b21b      	sxth	r3, r3
 80058ec:	4313      	orrs	r3, r2
 80058ee:	b21b      	sxth	r3, r3
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	82fb      	strh	r3, [r7, #22]
            	sendval[2] = (cTime.Hours << (8*1)) | cTime.Minutes;
 80058f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80058f8:	021b      	lsls	r3, r3, #8
 80058fa:	b21a      	sxth	r2, r3
 80058fc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005900:	b21b      	sxth	r3, r3
 8005902:	4313      	orrs	r3, r2
 8005904:	b21b      	sxth	r3, r3
 8005906:	b29b      	uxth	r3, r3
 8005908:	82bb      	strh	r3, [r7, #20]
            	sendval[1] = (cTime.Seconds << (8*1)) | cTime.TimeFormat;
 800590a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800590e:	021b      	lsls	r3, r3, #8
 8005910:	b21a      	sxth	r2, r3
 8005912:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005916:	b21b      	sxth	r3, r3
 8005918:	4313      	orrs	r3, r2
 800591a:	b21b      	sxth	r3, r3
 800591c:	b29b      	uxth	r3, r3
 800591e:	827b      	strh	r3, [r7, #18]
            	sendval[0] = sendData.sendType;
 8005920:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005924:	b29b      	uxth	r3, r3
 8005926:	823b      	strh	r3, [r7, #16]
            	numBytes = 10;
 8005928:	230a      	movs	r3, #10
 800592a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
            	break;
 800592e:	e101      	b.n	8005b34 <startBLETX+0x318>

            case TX_TIME_EST:
            case TX_TIMESTAMP_UPDATE:
            case TX_SURVEY_RESULT:
            	sendval[5] = (cDate.WeekDay << (8*1)) | cDate.Month;
 8005930:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005934:	021b      	lsls	r3, r3, #8
 8005936:	b21a      	sxth	r2, r3
 8005938:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800593c:	b21b      	sxth	r3, r3
 800593e:	4313      	orrs	r3, r2
 8005940:	b21b      	sxth	r3, r3
 8005942:	b29b      	uxth	r3, r3
 8005944:	837b      	strh	r3, [r7, #26]
            	sendval[4] = (cDate.Date << (8*1)) | cDate.Year;
 8005946:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800594a:	021b      	lsls	r3, r3, #8
 800594c:	b21a      	sxth	r2, r3
 800594e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005952:	b21b      	sxth	r3, r3
 8005954:	4313      	orrs	r3, r2
 8005956:	b21b      	sxth	r3, r3
 8005958:	b29b      	uxth	r3, r3
 800595a:	833b      	strh	r3, [r7, #24]
            	sendval[3] = (cTime.Hours << (8*1)) | cTime.Minutes;
 800595c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005960:	021b      	lsls	r3, r3, #8
 8005962:	b21a      	sxth	r2, r3
 8005964:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005968:	b21b      	sxth	r3, r3
 800596a:	4313      	orrs	r3, r2
 800596c:	b21b      	sxth	r3, r3
 800596e:	b29b      	uxth	r3, r3
 8005970:	82fb      	strh	r3, [r7, #22]
            	sendval[2] = (cTime.Seconds << (8*1)) | cTime.TimeFormat;
 8005972:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005976:	021b      	lsls	r3, r3, #8
 8005978:	b21a      	sxth	r2, r3
 800597a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800597e:	b21b      	sxth	r3, r3
 8005980:	4313      	orrs	r3, r2
 8005982:	b21b      	sxth	r3, r3
 8005984:	b29b      	uxth	r3, r3
 8005986:	82bb      	strh	r3, [r7, #20]
            	sendval[1] = sendData.sendType;
 8005988:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800598c:	b29b      	uxth	r3, r3
 800598e:	827b      	strh	r3, [r7, #18]
            	sendval[0] = sendData.data;
 8005990:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005992:	823b      	strh	r3, [r7, #16]
            	numBytes = 12;
 8005994:	230c      	movs	r3, #12
 8005996:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
            	break;
 800599a:	e0cb      	b.n	8005b34 <startBLETX+0x318>

            case TX_TIME_SEEN:
            	sendval[8] = (cDate.WeekDay << (8*1)) | cDate.Month;
 800599c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80059a0:	021b      	lsls	r3, r3, #8
 80059a2:	b21a      	sxth	r2, r3
 80059a4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80059a8:	b21b      	sxth	r3, r3
 80059aa:	4313      	orrs	r3, r2
 80059ac:	b21b      	sxth	r3, r3
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	843b      	strh	r3, [r7, #32]
            	sendval[7] = (cDate.Date << (8*1)) | cDate.Year;
 80059b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80059b6:	021b      	lsls	r3, r3, #8
 80059b8:	b21a      	sxth	r2, r3
 80059ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059be:	b21b      	sxth	r3, r3
 80059c0:	4313      	orrs	r3, r2
 80059c2:	b21b      	sxth	r3, r3
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	83fb      	strh	r3, [r7, #30]
            	sendval[6] = (cTime.Hours << (8*1)) | cTime.Minutes;
 80059c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80059cc:	021b      	lsls	r3, r3, #8
 80059ce:	b21a      	sxth	r2, r3
 80059d0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80059d4:	b21b      	sxth	r3, r3
 80059d6:	4313      	orrs	r3, r2
 80059d8:	b21b      	sxth	r3, r3
 80059da:	b29b      	uxth	r3, r3
 80059dc:	83bb      	strh	r3, [r7, #28]
            	sendval[5] = (cTime.Seconds << (8*1)) | cTime.TimeFormat;
 80059de:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80059e2:	021b      	lsls	r3, r3, #8
 80059e4:	b21a      	sxth	r2, r3
 80059e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059ea:	b21b      	sxth	r3, r3
 80059ec:	4313      	orrs	r3, r2
 80059ee:	b21b      	sxth	r3, r3
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	837b      	strh	r3, [r7, #26]
            	sendval[4] = sendData.sendType;
 80059f4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	833b      	strh	r3, [r7, #24]

                osMutexAcquire(lastSeenMutexHandle, portMAX_DELAY);
 80059fc:	4b26      	ldr	r3, [pc, #152]	; (8005a98 <startBLETX+0x27c>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a04:	4618      	mov	r0, r3
 8005a06:	f009 fda1 	bl	800f54c <osMutexAcquire>
                cTime = GlobalState.lastSeenTime.time;
 8005a0a:	4b24      	ldr	r3, [pc, #144]	; (8005a9c <startBLETX+0x280>)
 8005a0c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005a10:	1d1d      	adds	r5, r3, #4
 8005a12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a16:	682b      	ldr	r3, [r5, #0]
 8005a18:	6023      	str	r3, [r4, #0]
                cDate = GlobalState.lastSeenTime.date;
 8005a1a:	4b20      	ldr	r3, [pc, #128]	; (8005a9c <startBLETX+0x280>)
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	627b      	str	r3, [r7, #36]	; 0x24
                osMutexRelease(lastSeenMutexHandle);
 8005a20:	4b1d      	ldr	r3, [pc, #116]	; (8005a98 <startBLETX+0x27c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f009 fdef 	bl	800f608 <osMutexRelease>

                sendval[3] = (cDate.WeekDay << (8*1)) | cDate.Month;
 8005a2a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005a2e:	021b      	lsls	r3, r3, #8
 8005a30:	b21a      	sxth	r2, r3
 8005a32:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005a36:	b21b      	sxth	r3, r3
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	b21b      	sxth	r3, r3
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	82fb      	strh	r3, [r7, #22]
                sendval[2] = (cDate.Date << (8*1)) | cDate.Year;
 8005a40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a44:	021b      	lsls	r3, r3, #8
 8005a46:	b21a      	sxth	r2, r3
 8005a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a4c:	b21b      	sxth	r3, r3
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	b21b      	sxth	r3, r3
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	82bb      	strh	r3, [r7, #20]
                sendval[1] = (cTime.Hours << (8*1)) | cTime.Minutes;
 8005a56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a5a:	021b      	lsls	r3, r3, #8
 8005a5c:	b21a      	sxth	r2, r3
 8005a5e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005a62:	b21b      	sxth	r3, r3
 8005a64:	4313      	orrs	r3, r2
 8005a66:	b21b      	sxth	r3, r3
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	827b      	strh	r3, [r7, #18]
                sendval[0] = (cTime.Seconds << (8*1)) | cTime.TimeFormat;
 8005a6c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005a70:	021b      	lsls	r3, r3, #8
 8005a72:	b21a      	sxth	r2, r3
 8005a74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a78:	b21b      	sxth	r3, r3
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	b21b      	sxth	r3, r3
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	823b      	strh	r3, [r7, #16]
            	numBytes = 18;
 8005a82:	2312      	movs	r3, #18
 8005a84:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
            	break;
 8005a88:	e054      	b.n	8005b34 <startBLETX+0x318>
 8005a8a:	bf00      	nop
 8005a8c:	2002e294 	.word	0x2002e294
 8005a90:	2002e0c8 	.word	0x2002e0c8
 8005a94:	2002e0a4 	.word	0x2002e0a4
 8005a98:	2002e304 	.word	0x2002e304
 8005a9c:	2002e0cc 	.word	0x2002e0cc

            case TX_TEMP_HUMD:
            case TX_LUX_WHITELUX:
            	sendval[8] = (cDate.WeekDay << (8*1)) | cDate.Month;
 8005aa0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005aa4:	021b      	lsls	r3, r3, #8
 8005aa6:	b21a      	sxth	r2, r3
 8005aa8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005aac:	b21b      	sxth	r3, r3
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	b21b      	sxth	r3, r3
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	843b      	strh	r3, [r7, #32]
            	sendval[7] = (cDate.Date << (8*1)) | cDate.Year;
 8005ab6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005aba:	021b      	lsls	r3, r3, #8
 8005abc:	b21a      	sxth	r2, r3
 8005abe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ac2:	b21b      	sxth	r3, r3
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	b21b      	sxth	r3, r3
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	83fb      	strh	r3, [r7, #30]
            	sendval[6] = (cTime.Hours << (8*1)) | cTime.Minutes;
 8005acc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ad0:	021b      	lsls	r3, r3, #8
 8005ad2:	b21a      	sxth	r2, r3
 8005ad4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005ad8:	b21b      	sxth	r3, r3
 8005ada:	4313      	orrs	r3, r2
 8005adc:	b21b      	sxth	r3, r3
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	83bb      	strh	r3, [r7, #28]
            	sendval[5] = (cTime.Seconds << (8*1)) | cTime.TimeFormat;
 8005ae2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005ae6:	021b      	lsls	r3, r3, #8
 8005ae8:	b21a      	sxth	r2, r3
 8005aea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005aee:	b21b      	sxth	r3, r3
 8005af0:	4313      	orrs	r3, r2
 8005af2:	b21b      	sxth	r3, r3
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	837b      	strh	r3, [r7, #26]
            	sendval[4] = TX_TEMP_HUMD;
 8005af8:	2301      	movs	r3, #1
 8005afa:	833b      	strh	r3, [r7, #24]
            	numBytes = 18;
 8005afc:	2312      	movs	r3, #18
 8005afe:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

            	osMutexAcquire(conditionMutexHandle, portMAX_DELAY);
 8005b02:	4b81      	ldr	r3, [pc, #516]	; (8005d08 <startBLETX+0x4ec>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f009 fd1e 	bl	800f54c <osMutexAcquire>
            	memcpy(&(sendval[2]), &GlobalState.lastConditions.temp, 4);
 8005b10:	4b7e      	ldr	r3, [pc, #504]	; (8005d0c <startBLETX+0x4f0>)
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	617b      	str	r3, [r7, #20]
            	memcpy(sendval, &GlobalState.lastConditions.humd, 4);
 8005b16:	4b7d      	ldr	r3, [pc, #500]	; (8005d0c <startBLETX+0x4f0>)
 8005b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1a:	613b      	str	r3, [r7, #16]
            	memcpy(&(lightval[2]), &GlobalState.lastConditions.lux, 4);
 8005b1c:	4b7b      	ldr	r3, [pc, #492]	; (8005d0c <startBLETX+0x4f0>)
 8005b1e:	69db      	ldr	r3, [r3, #28]
 8005b20:	60fb      	str	r3, [r7, #12]
            	memcpy(lightval, &GlobalState.lastConditions.whiteLux, 4);
 8005b22:	4b7a      	ldr	r3, [pc, #488]	; (8005d0c <startBLETX+0x4f0>)
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	60bb      	str	r3, [r7, #8]
            	osMutexRelease(conditionMutexHandle);
 8005b28:	4b77      	ldr	r3, [pc, #476]	; (8005d08 <startBLETX+0x4ec>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f009 fd6b 	bl	800f608 <osMutexRelease>
            	break;
 8005b32:	bf00      	nop
                //memcpy(sendval, lightval, 8);
          }


          //try to send queued data if we have a queue
          uint8_t dataSuccessFlag = 1;
 8005b34:	2301      	movs	r3, #1
 8005b36:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
          uint8_t failed_attempts = 0;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
		  const uint8_t MAX_ATTEMPTS = 50;
 8005b40:	2332      	movs	r3, #50	; 0x32
 8005b42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

          if (!P2P_Server_App_Context.Connected) { dataSuccessFlag = 0;}
 8005b46:	4b72      	ldr	r3, [pc, #456]	; (8005d10 <startBLETX+0x4f4>)
 8005b48:	785b      	ldrb	r3, [r3, #1]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d132      	bne.n	8005bb4 <startBLETX+0x398>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

          while(DataQueue && dataSuccessFlag){//we have data queued and have not failed to send data
 8005b54:	e02e      	b.n	8005bb4 <startBLETX+0x398>

        	  //try to send data at front of list
        	  if (P2PS_STM_App_Update_Int8(P2P_NOTIFY_CHAR_UUID, (uint8_t *)DataQueue->packet, DataQueue->numBytes) == BLE_STATUS_SUCCESS){
 8005b56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b58:	6819      	ldr	r1, [r3, #0]
 8005b5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b5c:	791b      	ldrb	r3, [r3, #4]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	f64f 6042 	movw	r0, #65090	; 0xfe42
 8005b64:	f008 fc68 	bl	800e438 <P2PS_STM_App_Update_Int8>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d110      	bne.n	8005b90 <startBLETX+0x374>

        		  //if successful, move dataQueue to next, which is NULL for last element, and free memory
        		  UnsentQueueAddress_t addressJustSent = DataQueue;
 8005b6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b70:	653b      	str	r3, [r7, #80]	; 0x50
        		  DataQueue = DataQueue->next;
 8005b72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	667b      	str	r3, [r7, #100]	; 0x64

        		  vPortFree(addressJustSent->packet);
 8005b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f00a fb91 	bl	80102a4 <vPortFree>
        		  vPortFree(addressJustSent);
 8005b82:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005b84:	f00a fb8e 	bl	80102a4 <vPortFree>

        		  failed_attempts = 0;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 8005b8e:	e011      	b.n	8005bb4 <startBLETX+0x398>
        	  } else {  //if unsuccessful MAX_ATTEMPTS in a row, dataSuccessFlag = 0
        		  failed_attempts +=1;
 8005b90:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8005b94:	3301      	adds	r3, #1
 8005b96:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

        		  if (failed_attempts >= MAX_ATTEMPTS){ dataSuccessFlag = 0; }
 8005b9a:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8005b9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d303      	bcc.n	8005bae <startBLETX+0x392>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 8005bac:	e002      	b.n	8005bb4 <startBLETX+0x398>
        		  else { osDelay(2); }
 8005bae:	2002      	movs	r0, #2
 8005bb0:	f009 fc04 	bl	800f3bc <osDelay>
          while(DataQueue && dataSuccessFlag){//we have data queued and have not failed to send data
 8005bb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <startBLETX+0x3a6>
 8005bba:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1c9      	bne.n	8005b56 <startBLETX+0x33a>
        	  }
          }

        //if we haven't had a data failure with the queue, try to send current data packet
        if (dataSuccessFlag){
 8005bc2:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d02c      	beq.n	8005c24 <startBLETX+0x408>
        	if (P2PS_STM_App_Update_Int8(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&sendval, numBytes) != BLE_STATUS_SUCCESS){
 8005bca:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8005bce:	f107 0310 	add.w	r3, r7, #16
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	f64f 6042 	movw	r0, #65090	; 0xfe42
 8005bd8:	f008 fc2e 	bl	800e438 <P2PS_STM_App_Update_Int8>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <startBLETX+0x3ce>
        		//unsuccessful packet send means we flag it
        		dataSuccessFlag = 0;
 8005be2:	2300      	movs	r3, #0
 8005be4:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 8005be8:	e01c      	b.n	8005c24 <startBLETX+0x408>

        	} else if (sendData.sendType == TX_TEMP_HUMD){ //if first packet was successful and we're transmitting conditions
 8005bea:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d118      	bne.n	8005c24 <startBLETX+0x408>

        		//construct second packet for conditions
                sendval[4] = TX_LUX_WHITELUX;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	833b      	strh	r3, [r7, #24]
                memcpy(sendval, lightval, 8);
 8005bf6:	f107 0310 	add.w	r3, r7, #16
 8005bfa:	f107 0208 	add.w	r2, r7, #8
 8005bfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c02:	e883 0003 	stmia.w	r3, {r0, r1}

                //and send it
        		if (P2PS_STM_App_Update_Int8(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&sendval, numBytes) != BLE_STATUS_SUCCESS){
 8005c06:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8005c0a:	f107 0310 	add.w	r3, r7, #16
 8005c0e:	4619      	mov	r1, r3
 8005c10:	f64f 6042 	movw	r0, #65090	; 0xfe42
 8005c14:	f008 fc10 	bl	800e438 <P2PS_STM_App_Update_Int8>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <startBLETX+0x408>
        		        dataSuccessFlag = 0;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
        	}

        }

        //if we had a data send failure, add current packet to the queue dynamically
        if (!dataSuccessFlag){
 8005c24:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f47f ae0d 	bne.w	8005848 <startBLETX+0x2c>

        	//malloc the packet data
        	uint16_t *newPacketAddress = pvPortMalloc(numBytes);
 8005c2e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8005c32:	4618      	mov	r0, r3
 8005c34:	f00a fa74 	bl	8010120 <pvPortMalloc>
 8005c38:	64f8      	str	r0, [r7, #76]	; 0x4c
        	//copy the packet data in from sendval
        	memcpy(newPacketAddress, sendval, numBytes);
 8005c3a:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8005c3e:	f107 0310 	add.w	r3, r7, #16
 8005c42:	4619      	mov	r1, r3
 8005c44:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005c46:	f00d fbf1 	bl	801342c <memcpy>

        	//malloc the queue item that points to that data
        	UnsentQueue_t *newQueueItemAddress = pvPortMalloc(sizeof(UnsentQueue_t));
 8005c4a:	200c      	movs	r0, #12
 8005c4c:	f00a fa68 	bl	8010120 <pvPortMalloc>
 8005c50:	64b8      	str	r0, [r7, #72]	; 0x48
        	//correctly fill the new Queue Item
        	newQueueItemAddress->packet = newPacketAddress;
 8005c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c56:	601a      	str	r2, [r3, #0]
        	newQueueItemAddress->numBytes = numBytes;
 8005c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c5a:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8005c5e:	711a      	strb	r2, [r3, #4]
        	newQueueItemAddress->next = NULL;
 8005c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c62:	2200      	movs	r2, #0
 8005c64:	609a      	str	r2, [r3, #8]

        	//if DataQueue is empty, simply set the queue address to this one.
        	if (!DataQueue){ DataQueue = newQueueItemAddress; }
 8005c66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d102      	bne.n	8005c72 <startBLETX+0x456>
 8005c6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c6e:	667b      	str	r3, [r7, #100]	; 0x64
 8005c70:	e00c      	b.n	8005c8c <startBLETX+0x470>
        	else {//otherwise traverse until we get null
        		UnsentQueueAddress_t current_node = DataQueue;
 8005c72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c74:	65fb      	str	r3, [r7, #92]	; 0x5c
        		while (current_node->next){ //while the pointer to the next is not null
 8005c76:	e002      	b.n	8005c7e <startBLETX+0x462>
        			current_node = current_node->next; //update current_node to next
 8005c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	65fb      	str	r3, [r7, #92]	; 0x5c
        		while (current_node->next){ //while the pointer to the next is not null
 8005c7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1f8      	bne.n	8005c78 <startBLETX+0x45c>
        		}
        		current_node->next = newQueueItemAddress;
 8005c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c8a:	609a      	str	r2, [r3, #8]
        	}

        	if (sendData.sendType == TX_TEMP_HUMD && sendval[4] == TX_TEMP_HUMD){
 8005c8c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	f47f add9 	bne.w	8005848 <startBLETX+0x2c>
 8005c96:	8b3b      	ldrh	r3, [r7, #24]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	f47f add5 	bne.w	8005848 <startBLETX+0x2c>
        		//if we're sending conditions and we didn't successfully move to second packet,
        		//add second packet to data queue as well
        		sendval[4] = TX_LUX_WHITELUX;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	833b      	strh	r3, [r7, #24]
        		memcpy(sendval, lightval, 8);
 8005ca2:	f107 0310 	add.w	r3, r7, #16
 8005ca6:	f107 0208 	add.w	r2, r7, #8
 8005caa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005cae:	e883 0003 	stmia.w	r3, {r0, r1}

        		//malloc the packet data
				uint16_t *newPacketAddress = pvPortMalloc(numBytes);
 8005cb2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f00a fa32 	bl	8010120 <pvPortMalloc>
 8005cbc:	6478      	str	r0, [r7, #68]	; 0x44
				//copy the packet data in from sendval
				memcpy(newPacketAddress, sendval, numBytes);
 8005cbe:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8005cc2:	f107 0310 	add.w	r3, r7, #16
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005cca:	f00d fbaf 	bl	801342c <memcpy>

				//malloc the queue item that points to that data
				UnsentQueue_t *newQueueItemAddress = pvPortMalloc(sizeof(UnsentQueue_t));
 8005cce:	200c      	movs	r0, #12
 8005cd0:	f00a fa26 	bl	8010120 <pvPortMalloc>
 8005cd4:	6438      	str	r0, [r7, #64]	; 0x40
				//correctly fill the new Queue Item
				newQueueItemAddress->packet = newPacketAddress;
 8005cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cda:	601a      	str	r2, [r3, #0]
				newQueueItemAddress->numBytes = numBytes;
 8005cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cde:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8005ce2:	711a      	strb	r2, [r3, #4]
				newQueueItemAddress->next = NULL;
 8005ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	609a      	str	r2, [r3, #8]

				UnsentQueueAddress_t current_node = DataQueue;
 8005cea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cec:	65bb      	str	r3, [r7, #88]	; 0x58

				while (current_node->next){ //while the pointer to the next is not null
 8005cee:	e002      	b.n	8005cf6 <startBLETX+0x4da>
					current_node = current_node->next; //update current_node to next
 8005cf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	65bb      	str	r3, [r7, #88]	; 0x58
				while (current_node->next){ //while the pointer to the next is not null
 8005cf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1f8      	bne.n	8005cf0 <startBLETX+0x4d4>
				}

				current_node->next = newQueueItemAddress;
 8005cfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d02:	609a      	str	r2, [r3, #8]
        if (osMessageQueueGet(bleTXqueueHandle, &sendData, NULL, osWaitForever) == osOK){
 8005d04:	e5a0      	b.n	8005848 <startBLETX+0x2c>
 8005d06:	bf00      	nop
 8005d08:	2002e228 	.word	0x2002e228
 8005d0c:	2002e0cc 	.word	0x2002e0cc
 8005d10:	2002e088 	.word	0x2002e088

08005d14 <startBLERX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBLERX */
void startBLERX(void *argument)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b09c      	sub	sp, #112	; 0x70
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  P2PS_STM_Data_t rxData;

  for(;;)
  {

	if (osMessageQueueGet(bleRXqueueHandle, &rxData, NULL, osWaitForever) == osOK){
 8005d1c:	4bb9      	ldr	r3, [pc, #740]	; (8006004 <startBLERX+0x2f0>)
 8005d1e:	6818      	ldr	r0, [r3, #0]
 8005d20:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8005d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f009 ff13 	bl	800fb54 <osMessageQueueGet>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1f3      	bne.n	8005d1c <startBLERX+0x8>

		if (rxData.pPayload[0] == 0x00) { // timestamp update starts with 0x00
 8005d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f040 8106 	bne.w	8005f4a <startBLERX+0x236>
			memcpy(&P2P_Server_App_Context.OTATimestamp, &(rxData.pPayload[1]), 8);
 8005d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d40:	3301      	adds	r3, #1
 8005d42:	2208      	movs	r2, #8
 8005d44:	4619      	mov	r1, r3
 8005d46:	48b0      	ldr	r0, [pc, #704]	; (8006008 <startBLERX+0x2f4>)
 8005d48:	f00d fb70 	bl	801342c <memcpy>
    	    P2P_Server_App_Context.OTA12HrFormat = rxData.pPayload[9];
 8005d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d4e:	7a5a      	ldrb	r2, [r3, #9]
 8005d50:	4bae      	ldr	r3, [pc, #696]	; (800600c <startBLERX+0x2f8>)
 8005d52:	741a      	strb	r2, [r3, #16]
    		P2P_Server_App_Context.OTADaylightSavings = rxData.pPayload[10];
 8005d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d56:	7a9a      	ldrb	r2, [r3, #10]
 8005d58:	4bac      	ldr	r3, [pc, #688]	; (800600c <startBLERX+0x2f8>)
 8005d5a:	745a      	strb	r2, [r3, #17]

    	    RTC_TimeTypeDef sTime = {0};
 8005d5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005d60:	2200      	movs	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	605a      	str	r2, [r3, #4]
 8005d66:	609a      	str	r2, [r3, #8]
 8005d68:	60da      	str	r2, [r3, #12]
 8005d6a:	611a      	str	r2, [r3, #16]
    		RTC_DateTypeDef sDate = {0};
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	637b      	str	r3, [r7, #52]	; 0x34

    		uint8_t timestampvals[8];
    		memcpy(timestampvals, &(P2P_Server_App_Context.OTATimestamp), 8);
 8005d70:	4aa6      	ldr	r2, [pc, #664]	; (800600c <startBLERX+0x2f8>)
 8005d72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d76:	3208      	adds	r2, #8
 8005d78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d7c:	e883 0003 	stmia.w	r3, {r0, r1}

    		uint8_t AMPM = timestampvals[0];
 8005d80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d84:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

    		sTime.Hours      = timestampvals[4];
 8005d88:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005d8c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    		sTime.Minutes    = timestampvals[5];
 8005d90:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005d94:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    		sTime.Seconds    = timestampvals[6];
 8005d98:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005d9c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    		sTime.SubSeconds = 0x0;
 8005da0:	2300      	movs	r3, #0
 8005da2:	63fb      	str	r3, [r7, #60]	; 0x3c
    		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005da4:	2300      	movs	r3, #0
 8005da6:	647b      	str	r3, [r7, #68]	; 0x44

    		if (P2P_Server_App_Context.OTADaylightSavings){ sTime.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H; }
 8005da8:	4b98      	ldr	r3, [pc, #608]	; (800600c <startBLERX+0x2f8>)
 8005daa:	7c5b      	ldrb	r3, [r3, #17]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <startBLERX+0xa2>
 8005db0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005db4:	647b      	str	r3, [r7, #68]	; 0x44

    		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005db6:	2300      	movs	r3, #0
 8005db8:	64bb      	str	r3, [r7, #72]	; 0x48

    		sDate.WeekDay = timestampvals[0];
 8005dba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005dbe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    		sDate.Month   = timestampvals[1];
 8005dc2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005dc6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    		sDate.Date    = timestampvals[2];
 8005dca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005dce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    		sDate.Year    = timestampvals[3];
 8005dd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005dd6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    		RTC_TimeTypeDef cTime;
   	        RTC_DateTypeDef cDate;

    		osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 8005dda:	4b8d      	ldr	r3, [pc, #564]	; (8006010 <startBLERX+0x2fc>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005de2:	4618      	mov	r0, r3
 8005de4:	f009 fbb2 	bl	800f54c <osMutexAcquire>
    		HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BCD);
 8005de8:	f107 0318 	add.w	r3, r7, #24
 8005dec:	2201      	movs	r2, #1
 8005dee:	4619      	mov	r1, r3
 8005df0:	4888      	ldr	r0, [pc, #544]	; (8006014 <startBLERX+0x300>)
 8005df2:	f004 fc76 	bl	800a6e2 <HAL_RTC_GetTime>
    		HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BCD);
 8005df6:	f107 0314 	add.w	r3, r7, #20
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	4885      	ldr	r0, [pc, #532]	; (8006014 <startBLERX+0x300>)
 8005e00:	f004 fd79 	bl	800a8f6 <HAL_RTC_GetDate>
    		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {Error_Handler();}
 8005e04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005e08:	2201      	movs	r2, #1
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4881      	ldr	r0, [pc, #516]	; (8006014 <startBLERX+0x300>)
 8005e0e:	f004 fba4 	bl	800a55a <HAL_RTC_SetTime>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <startBLERX+0x108>
 8005e18:	f000 f9a4 	bl	8006164 <Error_Handler>
    		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {Error_Handler();}
 8005e1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005e20:	2201      	movs	r2, #1
 8005e22:	4619      	mov	r1, r3
 8005e24:	487b      	ldr	r0, [pc, #492]	; (8006014 <startBLERX+0x300>)
 8005e26:	f004 fcb8 	bl	800a79a <HAL_RTC_SetDate>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <startBLERX+0x120>
 8005e30:	f000 f998 	bl	8006164 <Error_Handler>
    	    osMutexRelease(rtcMutexHandle);
 8005e34:	4b76      	ldr	r3, [pc, #472]	; (8006010 <startBLERX+0x2fc>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f009 fbe5 	bl	800f608 <osMutexRelease>

    	    //calculate the seconds off between the two.
    	    uint8_t prev_hrs = RTC_Bcd2ToByte(cTime.Hours);
 8005e3e:	7e3b      	ldrb	r3, [r7, #24]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f004 fe15 	bl	800aa70 <RTC_Bcd2ToByte>
 8005e46:	4603      	mov	r3, r0
 8005e48:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    	    uint8_t prev_min = RTC_Bcd2ToByte(cTime.Minutes);
 8005e4c:	7e7b      	ldrb	r3, [r7, #25]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f004 fe0e 	bl	800aa70 <RTC_Bcd2ToByte>
 8005e54:	4603      	mov	r3, r0
 8005e56:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
    	    uint8_t prev_sec = RTC_Bcd2ToByte(cTime.Seconds);
 8005e5a:	7ebb      	ldrb	r3, [r7, #26]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f004 fe07 	bl	800aa70 <RTC_Bcd2ToByte>
 8005e62:	4603      	mov	r3, r0
 8005e64:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

    	    uint8_t new_hrs = RTC_Bcd2ToByte(sTime.Hours);
 8005e68:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f004 fdff 	bl	800aa70 <RTC_Bcd2ToByte>
 8005e72:	4603      	mov	r3, r0
 8005e74:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
    	    uint8_t new_min = RTC_Bcd2ToByte(sTime.Minutes);
 8005e78:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f004 fdf7 	bl	800aa70 <RTC_Bcd2ToByte>
 8005e82:	4603      	mov	r3, r0
 8005e84:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
    	    uint8_t new_sec = RTC_Bcd2ToByte(sTime.Seconds);
 8005e88:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f004 fdef 	bl	800aa70 <RTC_Bcd2ToByte>
 8005e92:	4603      	mov	r3, r0
 8005e94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    	    int32_t new_totalsec = (60*60*new_hrs + 60*new_min + new_sec); //86400 sec in day
 8005e98:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8005e9c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8005ea0:	fb02 f103 	mul.w	r1, r2, r3
 8005ea4:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	011b      	lsls	r3, r3, #4
 8005eac:	1a9b      	subs	r3, r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	18ca      	adds	r2, r1, r3
 8005eb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005eb6:	4413      	add	r3, r2
 8005eb8:	65bb      	str	r3, [r7, #88]	; 0x58
    	    int32_t prev_totalsec = (60*60*prev_hrs + 60*prev_min + prev_sec);
 8005eba:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8005ebe:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8005ec2:	fb02 f103 	mul.w	r1, r2, r3
 8005ec6:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8005eca:	4613      	mov	r3, r2
 8005ecc:	011b      	lsls	r3, r3, #4
 8005ece:	1a9b      	subs	r3, r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	18ca      	adds	r2, r1, r3
 8005ed4:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8005ed8:	4413      	add	r3, r2
 8005eda:	657b      	str	r3, [r7, #84]	; 0x54
    	    int32_t forward_diff;
    	    int32_t backward_diff;

    	    int16_t signed_sec_difference; //cant hold more than 9 hours difference

    	    if (new_totalsec > prev_totalsec) {
 8005edc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	dd0a      	ble.n	8005efa <startBLERX+0x1e6>
    	    	forward_diff  = new_totalsec - prev_totalsec;
 8005ee4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	66fb      	str	r3, [r7, #108]	; 0x6c
    	    	backward_diff = 86400 - forward_diff;
 8005eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eee:	f5c3 33a8 	rsb	r3, r3, #86016	; 0x15000
 8005ef2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005ef6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ef8:	e009      	b.n	8005f0e <startBLERX+0x1fa>
    	    } else {
    	    	backward_diff = prev_totalsec - new_totalsec;
 8005efa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005efc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	66bb      	str	r3, [r7, #104]	; 0x68
    	    	forward_diff  = 86400 - backward_diff;
 8005f02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f04:	f5c3 33a8 	rsb	r3, r3, #86016	; 0x15000
 8005f08:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005f0c:	66fb      	str	r3, [r7, #108]	; 0x6c
    	    }

    	    if (backward_diff < forward_diff){
 8005f0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f12:	429a      	cmp	r2, r3
 8005f14:	da06      	bge.n	8005f24 <startBLERX+0x210>
    	    	signed_sec_difference= -1 * backward_diff;
 8005f16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	425b      	negs	r3, r3
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005f22:	e002      	b.n	8005f2a <startBLERX+0x216>
    	    }else {
    	    	signed_sec_difference = forward_diff;
 8005f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f26:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    	    }

    	    BLETX_Queue_t bleSendUpdate = {TX_TIMESTAMP_UPDATE, 0x00};
 8005f2a:	2307      	movs	r3, #7
 8005f2c:	743b      	strb	r3, [r7, #16]
 8005f2e:	2300      	movs	r3, #0
 8005f30:	827b      	strh	r3, [r7, #18]
			bleSendUpdate.data = (uint16_t)signed_sec_difference;
 8005f32:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005f36:	827b      	strh	r3, [r7, #18]
			osMessageQueuePut(bleTXqueueHandle, &bleSendUpdate, 0, 0);
 8005f38:	4b37      	ldr	r3, [pc, #220]	; (8006018 <startBLERX+0x304>)
 8005f3a:	6818      	ldr	r0, [r3, #0]
 8005f3c:	f107 0110 	add.w	r1, r7, #16
 8005f40:	2300      	movs	r3, #0
 8005f42:	2200      	movs	r2, #0
 8005f44:	f009 fd92 	bl	800fa6c <osMessageQueuePut>
 8005f48:	e6e8      	b.n	8005d1c <startBLERX+0x8>
		}

		else if (rxData.pPayload[0] == 0x01) {//change time bounds
 8005f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d118      	bne.n	8005f84 <startBLERX+0x270>
			//startHR, endHR in BCD
			GlobalState.timeBound.startHR_BCD = rxData.pPayload[1];
 8005f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f54:	785a      	ldrb	r2, [r3, #1]
 8005f56:	4b31      	ldr	r3, [pc, #196]	; (800601c <startBLERX+0x308>)
 8005f58:	701a      	strb	r2, [r3, #0]
			GlobalState.timeBound.endHR_BCD  = rxData.pPayload[2];
 8005f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f5c:	789a      	ldrb	r2, [r3, #2]
 8005f5e:	4b2f      	ldr	r3, [pc, #188]	; (800601c <startBLERX+0x308>)
 8005f60:	705a      	strb	r2, [r3, #1]

			GlobalState.paused = 1;
 8005f62:	4b2e      	ldr	r3, [pc, #184]	; (800601c <startBLERX+0x308>)
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
			const BLETX_Queue_t bleSendPause = {TX_BEGIN_PAUSE, 0x0000};
 8005f6a:	2308      	movs	r3, #8
 8005f6c:	733b      	strb	r3, [r7, #12]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	81fb      	strh	r3, [r7, #14]
			osMessageQueuePut(bleTXqueueHandle, &bleSendPause, 0, 0);
 8005f72:	4b29      	ldr	r3, [pc, #164]	; (8006018 <startBLERX+0x304>)
 8005f74:	6818      	ldr	r0, [r3, #0]
 8005f76:	f107 010c 	add.w	r1, r7, #12
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f009 fd75 	bl	800fa6c <osMessageQueuePut>
 8005f82:	e6cb      	b.n	8005d1c <startBLERX+0x8>
		}

		else if (rxData.pPayload[0] == 0x02) {//pause or unpause watch
 8005f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	f47f aec7 	bne.w	8005d1c <startBLERX+0x8>

			if (rxData.pPayload[1]) { //pause things
 8005f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f90:	3301      	adds	r3, #1
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d020      	beq.n	8005fda <startBLERX+0x2c6>

				GlobalState.paused = 1;
 8005f98:	4b20      	ldr	r3, [pc, #128]	; (800601c <startBLERX+0x308>)
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8005fa0:	4b1f      	ldr	r3, [pc, #124]	; (8006020 <startBLERX+0x30c>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f009 facf 	bl	800f54c <osMutexAcquire>
				GlobalState.programMode = MODE_RESTING;
 8005fae:	4b1b      	ldr	r3, [pc, #108]	; (800601c <startBLERX+0x308>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				osMutexRelease(modeMutexHandle);
 8005fb6:	4b1a      	ldr	r3, [pc, #104]	; (8006020 <startBLERX+0x30c>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f009 fb24 	bl	800f608 <osMutexRelease>
	    		const BLETX_Queue_t bleSendPause = {TX_BEGIN_PAUSE, 0x0000};
 8005fc0:	2308      	movs	r3, #8
 8005fc2:	723b      	strb	r3, [r7, #8]
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	817b      	strh	r3, [r7, #10]
	     		osMessageQueuePut(bleTXqueueHandle, &bleSendPause, 0, 0);
 8005fc8:	4b13      	ldr	r3, [pc, #76]	; (8006018 <startBLERX+0x304>)
 8005fca:	6818      	ldr	r0, [r3, #0]
 8005fcc:	f107 0108 	add.w	r1, r7, #8
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f009 fd4a 	bl	800fa6c <osMessageQueuePut>
 8005fd8:	e6a0      	b.n	8005d1c <startBLERX+0x8>

			} else { //unpause things

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8005fda:	4b11      	ldr	r3, [pc, #68]	; (8006020 <startBLERX+0x30c>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f009 fab2 	bl	800f54c <osMutexAcquire>
				GlobalState.programMode = MODE_SHOW_TIME;
 8005fe8:	4b0c      	ldr	r3, [pc, #48]	; (800601c <startBLERX+0x308>)
 8005fea:	2205      	movs	r2, #5
 8005fec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				osMutexRelease(modeMutexHandle);
 8005ff0:	4b0b      	ldr	r3, [pc, #44]	; (8006020 <startBLERX+0x30c>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f009 fb07 	bl	800f608 <osMutexRelease>
				GlobalState.paused = 0;
 8005ffa:	4b08      	ldr	r3, [pc, #32]	; (800601c <startBLERX+0x308>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	if (osMessageQueueGet(bleRXqueueHandle, &rxData, NULL, osWaitForever) == osOK){
 8006002:	e68b      	b.n	8005d1c <startBLERX+0x8>
 8006004:	2002e07c 	.word	0x2002e07c
 8006008:	2002e090 	.word	0x2002e090
 800600c:	2002e088 	.word	0x2002e088
 8006010:	2002e0c8 	.word	0x2002e0c8
 8006014:	2002e0a4 	.word	0x2002e0a4
 8006018:	2002e294 	.word	0x2002e294
 800601c:	2002e0cc 	.word	0x2002e0cc
 8006020:	2002e234 	.word	0x2002e234

08006024 <PeriphClock_Config>:
  /* USER CODE END startBLERX */
}


void PeriphClock_Config(void)
{
 8006024:	b480      	push	{r7}
 8006026:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 8006028:	bf00      	nop
}
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b082      	sub	sp, #8
 8006036:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8006038:	2000      	movs	r0, #0
 800603a:	f008 fad3 	bl	800e5e4 <OTP_Read>
 800603e:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d005      	beq.n	8006052 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	799b      	ldrb	r3, [r3, #6]
 800604a:	4618      	mov	r0, r3
 800604c:	f7fd fd58 	bl	8003b00 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8006050:	bf00      	nop
 8006052:	bf00      	nop
}  
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <Reset_Device>:

static void Reset_Device( void )
{
 800605a:	b580      	push	{r7, lr}
 800605c:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
	Reset_BackupDomain();
 800605e:	f000 f827 	bl	80060b0 <Reset_BackupDomain>

	Reset_IPCC();
 8006062:	f000 f803 	bl	800606c <Reset_IPCC>
#endif

	return;
 8006066:	bf00      	nop
}
 8006068:	bd80      	pop	{r7, pc}
	...

0800606c <Reset_IPCC>:

static void Reset_IPCC( void )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8006070:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006074:	f7fd fdd9 	bl	8003c2a <LL_AHB3_GRP1_EnableClock>

	LL_C1_IPCC_ClearFlag_CHx(
 8006078:	213f      	movs	r1, #63	; 0x3f
 800607a:	480c      	ldr	r0, [pc, #48]	; (80060ac <Reset_IPCC+0x40>)
 800607c:	f7fd fe34 	bl	8003ce8 <LL_C1_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_ClearFlag_CHx(
 8006080:	213f      	movs	r1, #63	; 0x3f
 8006082:	480a      	ldr	r0, [pc, #40]	; (80060ac <Reset_IPCC+0x40>)
 8006084:	f7fd fe3e 	bl	8003d04 <LL_C2_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableTransmitChannel(
 8006088:	213f      	movs	r1, #63	; 0x3f
 800608a:	4808      	ldr	r0, [pc, #32]	; (80060ac <Reset_IPCC+0x40>)
 800608c:	f7fd fde6 	bl	8003c5c <LL_C1_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableTransmitChannel(
 8006090:	213f      	movs	r1, #63	; 0x3f
 8006092:	4806      	ldr	r0, [pc, #24]	; (80060ac <Reset_IPCC+0x40>)
 8006094:	f7fd fe05 	bl	8003ca2 <LL_C2_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableReceiveChannel(
 8006098:	213f      	movs	r1, #63	; 0x3f
 800609a:	4804      	ldr	r0, [pc, #16]	; (80060ac <Reset_IPCC+0x40>)
 800609c:	f7fd fdf0 	bl	8003c80 <LL_C1_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableReceiveChannel(
 80060a0:	213f      	movs	r1, #63	; 0x3f
 80060a2:	4802      	ldr	r0, [pc, #8]	; (80060ac <Reset_IPCC+0x40>)
 80060a4:	f7fd fe0f 	bl	8003cc6 <LL_C2_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	return;
 80060a8:	bf00      	nop
}
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	58000c00 	.word	0x58000c00

080060b0 <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	af00      	add	r7, sp, #0
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80060b4:	f7fd fd7a 	bl	8003bac <LL_RCC_IsActiveFlag_PINRST>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00d      	beq.n	80060da <Reset_BackupDomain+0x2a>
 80060be:	f7fd fd88 	bl	8003bd2 <LL_RCC_IsActiveFlag_SFTRST>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d108      	bne.n	80060da <Reset_BackupDomain+0x2a>
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80060c8:	f002 fb9c 	bl	8008804 <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 80060cc:	f002 fb9a 	bl	8008804 <HAL_PWR_EnableBkUpAccess>

		__HAL_RCC_BACKUPRESET_FORCE();
 80060d0:	f7fd fd4a 	bl	8003b68 <LL_RCC_ForceBackupDomainReset>
		__HAL_RCC_BACKUPRESET_RELEASE();
 80060d4:	f7fd fd59 	bl	8003b8a <LL_RCC_ReleaseBackupDomainReset>
	}

	return;
 80060d8:	bf00      	nop
 80060da:	bf00      	nop
}
 80060dc:	bd80      	pop	{r7, pc}

080060de <Init_Exti>:

static void Init_Exti( void )
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 80060e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060e6:	f7fd fcdf 	bl	8003aa8 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 80060ea:	f06f 0050 	mvn.w	r0, #80	; 0x50
 80060ee:	f7fd fcf1 	bl	8003ad4 <LL_EXTI_DisableIT_32_63>

  return;
 80060f2:	bf00      	nop
}
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b084      	sub	sp, #16
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80060fe:	f001 f845 	bl	800718c <HAL_GetTick>
 8006102:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800610e:	d00a      	beq.n	8006126 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8006110:	f001 f854 	bl	80071bc <HAL_GetTickFreq>
 8006114:	4603      	mov	r3, r0
 8006116:	461a      	mov	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4413      	add	r3, r2
 800611c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800611e:	e002      	b.n	8006126 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8006120:	f7fd fdfe 	bl	8003d20 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8006124:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8006126:	f001 f831 	bl	800718c <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	429a      	cmp	r2, r3
 8006134:	d8f4      	bhi.n	8006120 <HAL_Delay+0x2a>
  }
}
 8006136:	bf00      	nop
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
	...

08006140 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a04      	ldr	r2, [pc, #16]	; (8006160 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d101      	bne.n	8006156 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006152:	f001 f807 	bl	8007164 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006156:	bf00      	nop
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	40014800 	.word	0x40014800

08006164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006164:	b480      	push	{r7}
 8006166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 
  /* USER CODE END Error_Handler_Debug */
}
 8006168:	bf00      	nop
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	0000      	movs	r0, r0
 8006174:	0000      	movs	r0, r0
	...

08006178 <_read_and_convert_temperature>:
  return id;
}

// Helper to read and convert temperature into uint format
static float _read_and_convert_temperature(I2C_HandleTypeDef *hi2c)
{
 8006178:	b590      	push	{r4, r7, lr}
 800617a:	b089      	sub	sp, #36	; 0x24
 800617c:	af02      	add	r7, sp, #8
 800617e:	6078      	str	r0, [r7, #4]
  uint8_t si7021_buf[4];
  int res = HAL_I2C_Master_Receive(hi2c, SI7021_ADDRESS_READ, si7021_buf, 2, 100);
 8006180:	f107 0208 	add.w	r2, r7, #8
 8006184:	2364      	movs	r3, #100	; 0x64
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	2302      	movs	r3, #2
 800618a:	2181      	movs	r1, #129	; 0x81
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f001 fcf5 	bl	8007b7c <HAL_I2C_Master_Receive>
 8006192:	4603      	mov	r3, r0
 8006194:	617b      	str	r3, [r7, #20]

  if (res != HAL_OK) {
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d001      	beq.n	80061a0 <_read_and_convert_temperature+0x28>
    return SI7021_MEASURE_FAILED;
 800619c:	4b2a      	ldr	r3, [pc, #168]	; (8006248 <_read_and_convert_temperature+0xd0>)
 800619e:	e03f      	b.n	8006220 <_read_and_convert_temperature+0xa8>
  }

  int16_t temp_code = (si7021_buf[0] << 8 | si7021_buf[1]);
 80061a0:	7a3b      	ldrb	r3, [r7, #8]
 80061a2:	021b      	lsls	r3, r3, #8
 80061a4:	b21a      	sxth	r2, r3
 80061a6:	7a7b      	ldrb	r3, [r7, #9]
 80061a8:	b21b      	sxth	r3, r3
 80061aa:	4313      	orrs	r3, r2
 80061ac:	827b      	strh	r3, [r7, #18]
  float temp = 175.72 * temp_code / 65535.00 - 46.85;
 80061ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fa f98e 	bl	80004d4 <__aeabi_i2d>
 80061b8:	a31d      	add	r3, pc, #116	; (adr r3, 8006230 <_read_and_convert_temperature+0xb8>)
 80061ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061be:	f7fa f9f3 	bl	80005a8 <__aeabi_dmul>
 80061c2:	4603      	mov	r3, r0
 80061c4:	460c      	mov	r4, r1
 80061c6:	4618      	mov	r0, r3
 80061c8:	4621      	mov	r1, r4
 80061ca:	a31b      	add	r3, pc, #108	; (adr r3, 8006238 <_read_and_convert_temperature+0xc0>)
 80061cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d0:	f7fa fb14 	bl	80007fc <__aeabi_ddiv>
 80061d4:	4603      	mov	r3, r0
 80061d6:	460c      	mov	r4, r1
 80061d8:	4618      	mov	r0, r3
 80061da:	4621      	mov	r1, r4
 80061dc:	a318      	add	r3, pc, #96	; (adr r3, 8006240 <_read_and_convert_temperature+0xc8>)
 80061de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e2:	f7fa f829 	bl	8000238 <__aeabi_dsub>
 80061e6:	4603      	mov	r3, r0
 80061e8:	460c      	mov	r4, r1
 80061ea:	4618      	mov	r0, r3
 80061ec:	4621      	mov	r1, r4
 80061ee:	f7fa fcb3 	bl	8000b58 <__aeabi_d2f>
 80061f2:	4603      	mov	r3, r0
 80061f4:	60fb      	str	r3, [r7, #12]

  if (temp > 125.00 || temp < -40.00) {
 80061f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80061fa:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800624c <_read_and_convert_temperature+0xd4>
 80061fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006206:	dc08      	bgt.n	800621a <_read_and_convert_temperature+0xa2>
 8006208:	edd7 7a03 	vldr	s15, [r7, #12]
 800620c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006250 <_read_and_convert_temperature+0xd8>
 8006210:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006218:	d501      	bpl.n	800621e <_read_and_convert_temperature+0xa6>
    return SI7021_MEASURE_FAILED;
 800621a:	4b0b      	ldr	r3, [pc, #44]	; (8006248 <_read_and_convert_temperature+0xd0>)
 800621c:	e000      	b.n	8006220 <_read_and_convert_temperature+0xa8>
  }

  return temp;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	ee07 3a90 	vmov	s15, r3
}
 8006224:	eeb0 0a67 	vmov.f32	s0, s15
 8006228:	371c      	adds	r7, #28
 800622a:	46bd      	mov	sp, r7
 800622c:	bd90      	pop	{r4, r7, pc}
 800622e:	bf00      	nop
 8006230:	3d70a3d7 	.word	0x3d70a3d7
 8006234:	4065f70a 	.word	0x4065f70a
 8006238:	00000000 	.word	0x00000000
 800623c:	40efffe0 	.word	0x40efffe0
 8006240:	cccccccd 	.word	0xcccccccd
 8006244:	40476ccc 	.word	0x40476ccc
 8006248:	477fff00 	.word	0x477fff00
 800624c:	42fa0000 	.word	0x42fa0000
 8006250:	c2200000 	.word	0xc2200000

08006254 <si7021_set_config>:

  return (uint64_t)id1 << 32 | id2;
}

uint32_t si7021_set_config(I2C_HandleTypeDef *hi2c, uint8_t heater, uint8_t resolution)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af02      	add	r7, sp, #8
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	460b      	mov	r3, r1
 800625e:	70fb      	strb	r3, [r7, #3]
 8006260:	4613      	mov	r3, r2
 8006262:	70bb      	strb	r3, [r7, #2]
  uint8_t si7021_buf[4];
  si7021_buf[0] = SI7021_WRITE_USER_REG1;
 8006264:	23e6      	movs	r3, #230	; 0xe6
 8006266:	733b      	strb	r3, [r7, #12]
  si7021_buf[1] = heater | resolution;
 8006268:	78fa      	ldrb	r2, [r7, #3]
 800626a:	78bb      	ldrb	r3, [r7, #2]
 800626c:	4313      	orrs	r3, r2
 800626e:	b2db      	uxtb	r3, r3
 8006270:	737b      	strb	r3, [r7, #13]

  return HAL_I2C_Master_Transmit(hi2c, SI7021_ADDRESS_WRITE, &si7021_buf[0], 2, 100);
 8006272:	f107 020c 	add.w	r2, r7, #12
 8006276:	2364      	movs	r3, #100	; 0x64
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	2302      	movs	r3, #2
 800627c:	2180      	movs	r1, #128	; 0x80
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f001 fb88 	bl	8007994 <HAL_I2C_Master_Transmit>
 8006284:	4603      	mov	r3, r0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <si7021_set_heater_power>:

uint32_t si7021_set_heater_power(I2C_HandleTypeDef *hi2c, uint8_t power)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b086      	sub	sp, #24
 8006292:	af02      	add	r7, sp, #8
 8006294:	6078      	str	r0, [r7, #4]
 8006296:	460b      	mov	r3, r1
 8006298:	70fb      	strb	r3, [r7, #3]
  uint8_t si7021_buf[4];
  si7021_buf[0] = SI7021_WRITE_HEATER_REG;
 800629a:	2351      	movs	r3, #81	; 0x51
 800629c:	733b      	strb	r3, [r7, #12]
  si7021_buf[1] = power;
 800629e:	78fb      	ldrb	r3, [r7, #3]
 80062a0:	737b      	strb	r3, [r7, #13]

  return HAL_I2C_Master_Transmit(hi2c, SI7021_ADDRESS_WRITE, si7021_buf, 2, 100);
 80062a2:	f107 020c 	add.w	r2, r7, #12
 80062a6:	2364      	movs	r3, #100	; 0x64
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	2302      	movs	r3, #2
 80062ac:	2180      	movs	r1, #128	; 0x80
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f001 fb70 	bl	8007994 <HAL_I2C_Master_Transmit>
 80062b4:	4603      	mov	r3, r0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
	...

080062c0 <si7021_measure_humidity>:

float si7021_measure_humidity(I2C_HandleTypeDef *hi2c)
{
 80062c0:	b590      	push	{r4, r7, lr}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af02      	add	r7, sp, #8
 80062c6:	6078      	str	r0, [r7, #4]
  uint8_t si7021_buf[4];
  si7021_buf[0] = SI7021_MEASURE_NOHOLD;
 80062c8:	23f5      	movs	r3, #245	; 0xf5
 80062ca:	723b      	strb	r3, [r7, #8]

  // Start measure
  int res = HAL_I2C_Master_Transmit(hi2c, SI7021_ADDRESS_WRITE, si7021_buf, 1, 100);
 80062cc:	f107 0208 	add.w	r2, r7, #8
 80062d0:	2364      	movs	r3, #100	; 0x64
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	2301      	movs	r3, #1
 80062d6:	2180      	movs	r1, #128	; 0x80
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f001 fb5b 	bl	8007994 <HAL_I2C_Master_Transmit>
 80062de:	4603      	mov	r3, r0
 80062e0:	60fb      	str	r3, [r7, #12]
  if (res != HAL_OK) {
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <si7021_measure_humidity+0x2c>
    return SI7021_MEASURE_FAILED;
 80062e8:	4b20      	ldr	r3, [pc, #128]	; (800636c <si7021_measure_humidity+0xac>)
 80062ea:	e037      	b.n	800635c <si7021_measure_humidity+0x9c>
  }
  HAL_Delay(30);
 80062ec:	201e      	movs	r0, #30
 80062ee:	f7ff ff02 	bl	80060f6 <HAL_Delay>

  // Read result
  res = HAL_I2C_Master_Receive(hi2c, SI7021_ADDRESS_READ, si7021_buf, 2, 100);
 80062f2:	f107 0208 	add.w	r2, r7, #8
 80062f6:	2364      	movs	r3, #100	; 0x64
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	2302      	movs	r3, #2
 80062fc:	2181      	movs	r1, #129	; 0x81
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f001 fc3c 	bl	8007b7c <HAL_I2C_Master_Receive>
 8006304:	4603      	mov	r3, r0
 8006306:	60fb      	str	r3, [r7, #12]
  if (res != HAL_OK) {
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <si7021_measure_humidity+0x52>
    return SI7021_MEASURE_FAILED;
 800630e:	4b17      	ldr	r3, [pc, #92]	; (800636c <si7021_measure_humidity+0xac>)
 8006310:	e024      	b.n	800635c <si7021_measure_humidity+0x9c>
  }

  return (si7021_buf[0] << 8 | si7021_buf[1]) * 125.0 / 65536.0 - 6.0;
 8006312:	7a3b      	ldrb	r3, [r7, #8]
 8006314:	021b      	lsls	r3, r3, #8
 8006316:	7a7a      	ldrb	r2, [r7, #9]
 8006318:	4313      	orrs	r3, r2
 800631a:	4618      	mov	r0, r3
 800631c:	f7fa f8da 	bl	80004d4 <__aeabi_i2d>
 8006320:	f04f 0200 	mov.w	r2, #0
 8006324:	4b12      	ldr	r3, [pc, #72]	; (8006370 <si7021_measure_humidity+0xb0>)
 8006326:	f7fa f93f 	bl	80005a8 <__aeabi_dmul>
 800632a:	4603      	mov	r3, r0
 800632c:	460c      	mov	r4, r1
 800632e:	4618      	mov	r0, r3
 8006330:	4621      	mov	r1, r4
 8006332:	f04f 0200 	mov.w	r2, #0
 8006336:	4b0f      	ldr	r3, [pc, #60]	; (8006374 <si7021_measure_humidity+0xb4>)
 8006338:	f7fa fa60 	bl	80007fc <__aeabi_ddiv>
 800633c:	4603      	mov	r3, r0
 800633e:	460c      	mov	r4, r1
 8006340:	4618      	mov	r0, r3
 8006342:	4621      	mov	r1, r4
 8006344:	f04f 0200 	mov.w	r2, #0
 8006348:	4b0b      	ldr	r3, [pc, #44]	; (8006378 <si7021_measure_humidity+0xb8>)
 800634a:	f7f9 ff75 	bl	8000238 <__aeabi_dsub>
 800634e:	4603      	mov	r3, r0
 8006350:	460c      	mov	r4, r1
 8006352:	4618      	mov	r0, r3
 8006354:	4621      	mov	r1, r4
 8006356:	f7fa fbff 	bl	8000b58 <__aeabi_d2f>
 800635a:	4603      	mov	r3, r0
 800635c:	ee07 3a90 	vmov	s15, r3
}
 8006360:	eeb0 0a67 	vmov.f32	s0, s15
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	bd90      	pop	{r4, r7, pc}
 800636a:	bf00      	nop
 800636c:	477fff00 	.word	0x477fff00
 8006370:	405f4000 	.word	0x405f4000
 8006374:	40f00000 	.word	0x40f00000
 8006378:	40180000 	.word	0x40180000

0800637c <si7021_measure_temperature>:

float si7021_measure_temperature(I2C_HandleTypeDef *hi2c)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af02      	add	r7, sp, #8
 8006382:	6078      	str	r0, [r7, #4]
  uint8_t si7021_buf[4];
  si7021_buf[0] = SI7021_MEASURE_TEMP_NOHOLD;
 8006384:	23f3      	movs	r3, #243	; 0xf3
 8006386:	723b      	strb	r3, [r7, #8]

  int res = HAL_I2C_Master_Transmit(hi2c, SI7021_ADDRESS_WRITE, &si7021_buf[0], 1, 100);
 8006388:	f107 0208 	add.w	r2, r7, #8
 800638c:	2364      	movs	r3, #100	; 0x64
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	2301      	movs	r3, #1
 8006392:	2180      	movs	r1, #128	; 0x80
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f001 fafd 	bl	8007994 <HAL_I2C_Master_Transmit>
 800639a:	4603      	mov	r3, r0
 800639c:	60fb      	str	r3, [r7, #12]
  if (res != HAL_OK) {
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <si7021_measure_temperature+0x2e>
    return SI7021_MEASURE_FAILED;
 80063a4:	eddf 7a07 	vldr	s15, [pc, #28]	; 80063c4 <si7021_measure_temperature+0x48>
 80063a8:	e007      	b.n	80063ba <si7021_measure_temperature+0x3e>
  }
  HAL_Delay(30);
 80063aa:	201e      	movs	r0, #30
 80063ac:	f7ff fea3 	bl	80060f6 <HAL_Delay>

  return _read_and_convert_temperature(hi2c);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f7ff fee1 	bl	8006178 <_read_and_convert_temperature>
 80063b6:	eef0 7a40 	vmov.f32	s15, s0
}
 80063ba:	eeb0 0a67 	vmov.f32	s0, s15
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	477fff00 	.word	0x477fff00

080063c8 <LL_RCC_SetRTCClockSource>:
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80063d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <LL_RCC_EnableRTC>:
{
 80063f4:	b480      	push	{r7}
 80063f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80063f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006400:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800640c:	bf00      	nop
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <LL_AHB2_GRP1_EnableClock>:
{
 8006416:	b480      	push	{r7}
 8006418:	b085      	sub	sp, #20
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800641e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006422:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006424:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4313      	orrs	r3, r2
 800642c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800642e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006432:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4013      	ands	r3, r2
 8006438:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800643a:	68fb      	ldr	r3, [r7, #12]
}
 800643c:	bf00      	nop
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <LL_AHB3_GRP1_EnableClock>:
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006454:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006456:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4313      	orrs	r3, r2
 800645e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006464:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4013      	ands	r3, r2
 800646a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800646c:	68fb      	ldr	r3, [r7, #12]
}
 800646e:	bf00      	nop
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <LL_APB1_GRP1_EnableClock>:
{
 800647a:	b480      	push	{r7}
 800647c:	b085      	sub	sp, #20
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006486:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006488:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4313      	orrs	r3, r2
 8006490:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006496:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4013      	ands	r3, r2
 800649c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800649e:	68fb      	ldr	r3, [r7, #12]
}
 80064a0:	bf00      	nop
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <LL_APB2_GRP1_EnableClock>:
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80064b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80064ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80064c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4013      	ands	r3, r2
 80064ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80064d0:	68fb      	ldr	r3, [r7, #12]
}
 80064d2:	bf00      	nop
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80064e2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80064e6:	f7ff ffaf 	bl	8006448 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80064ea:	2200      	movs	r2, #0
 80064ec:	210f      	movs	r1, #15
 80064ee:	f06f 0001 	mvn.w	r0, #1
 80064f2:	f000 ff91 	bl	8007418 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 80064f6:	2200      	movs	r2, #0
 80064f8:	2105      	movs	r1, #5
 80064fa:	202e      	movs	r0, #46	; 0x2e
 80064fc:	f000 ff8c 	bl	8007418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8006500:	202e      	movs	r0, #46	; 0x2e
 8006502:	f000 ffa3 	bl	800744c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 6, 0);
 8006506:	2200      	movs	r2, #0
 8006508:	2106      	movs	r1, #6
 800650a:	202c      	movs	r0, #44	; 0x2c
 800650c:	f000 ff84 	bl	8007418 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 6, 0);
 8006510:	2200      	movs	r2, #0
 8006512:	2106      	movs	r1, #6
 8006514:	202d      	movs	r0, #45	; 0x2d
 8006516:	f000 ff7f 	bl	8007418 <HAL_NVIC_SetPriority>

  /* USER CODE END MspInit 1 */
}
 800651a:	bf00      	nop
 800651c:	bd80      	pop	{r7, pc}
	...

08006520 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a0b      	ldr	r2, [pc, #44]	; (800655c <HAL_RTC_MspInit+0x3c>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d110      	bne.n	8006554 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8006532:	f002 f967 	bl	8008804 <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 8006536:	f002 f965 	bl	8008804 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 800653a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800653e:	f7ff ff43 	bl	80063c8 <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006542:	f7ff ff57 	bl	80063f4 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8006546:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800654a:	f7ff ff96 	bl	800647a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f004 faaa 	bl	800aaa8 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006554:	bf00      	nop
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	40002800 	.word	0x40002800

08006560 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b088      	sub	sp, #32
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006568:	f107 030c 	add.w	r3, r7, #12
 800656c:	2200      	movs	r2, #0
 800656e:	601a      	str	r2, [r3, #0]
 8006570:	605a      	str	r2, [r3, #4]
 8006572:	609a      	str	r2, [r3, #8]
 8006574:	60da      	str	r2, [r3, #12]
 8006576:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a0f      	ldr	r2, [pc, #60]	; (80065bc <HAL_I2C_MspInit+0x5c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d117      	bne.n	80065b2 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006582:	2002      	movs	r0, #2
 8006584:	f7ff ff47 	bl	8006416 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006588:	f44f 7340 	mov.w	r3, #768	; 0x300
 800658c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800658e:	2312      	movs	r3, #18
 8006590:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006592:	2301      	movs	r3, #1
 8006594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006596:	2300      	movs	r3, #0
 8006598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800659a:	2304      	movs	r3, #4
 800659c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800659e:	f107 030c 	add.w	r3, r7, #12
 80065a2:	4619      	mov	r1, r3
 80065a4:	4806      	ldr	r0, [pc, #24]	; (80065c0 <HAL_I2C_MspInit+0x60>)
 80065a6:	f000 ff89 	bl	80074bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80065aa:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80065ae:	f7ff ff64 	bl	800647a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80065b2:	bf00      	nop
 80065b4:	3720      	adds	r7, #32
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	40005400 	.word	0x40005400
 80065c0:	48000400 	.word	0x48000400

080065c4 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b088      	sub	sp, #32
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065cc:	f107 030c 	add.w	r3, r7, #12
 80065d0:	2200      	movs	r2, #0
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	605a      	str	r2, [r3, #4]
 80065d6:	609a      	str	r2, [r3, #8]
 80065d8:	60da      	str	r2, [r3, #12]
 80065da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a0f      	ldr	r2, [pc, #60]	; (8006620 <HAL_SPI_MspInit+0x5c>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d117      	bne.n	8006616 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80065e6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80065ea:	f7ff ff5f 	bl	80064ac <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065ee:	2001      	movs	r0, #1
 80065f0:	f7ff ff11 	bl	8006416 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 80065f4:	2382      	movs	r3, #130	; 0x82
 80065f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065f8:	2302      	movs	r3, #2
 80065fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065fc:	2300      	movs	r3, #0
 80065fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006600:	2300      	movs	r3, #0
 8006602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006604:	2305      	movs	r3, #5
 8006606:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006608:	f107 030c 	add.w	r3, r7, #12
 800660c:	4619      	mov	r1, r3
 800660e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006612:	f000 ff53 	bl	80074bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006616:	bf00      	nop
 8006618:	3720      	adds	r7, #32
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	40013000 	.word	0x40013000

08006624 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a09      	ldr	r2, [pc, #36]	; (8006658 <HAL_TIM_Base_MspInit+0x34>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d10b      	bne.n	800664e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006636:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800663a:	f7ff ff37 	bl	80064ac <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 800663e:	2200      	movs	r2, #0
 8006640:	210f      	movs	r1, #15
 8006642:	2019      	movs	r0, #25
 8006644:	f000 fee8 	bl	8007418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006648:	2019      	movs	r0, #25
 800664a:	f000 feff 	bl	800744c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800664e:	bf00      	nop
 8006650:	3708      	adds	r7, #8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	40012c00 	.word	0x40012c00

0800665c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b088      	sub	sp, #32
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006664:	f107 030c 	add.w	r3, r7, #12
 8006668:	2200      	movs	r2, #0
 800666a:	601a      	str	r2, [r3, #0]
 800666c:	605a      	str	r2, [r3, #4]
 800666e:	609a      	str	r2, [r3, #8]
 8006670:	60da      	str	r2, [r3, #12]
 8006672:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a0d      	ldr	r2, [pc, #52]	; (80066b0 <HAL_TIM_MspPostInit+0x54>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d114      	bne.n	80066a8 <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800667e:	2001      	movs	r0, #1
 8006680:	f7ff fec9 	bl	8006416 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006684:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006688:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800668a:	2302      	movs	r3, #2
 800668c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800668e:	2300      	movs	r3, #0
 8006690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006692:	2300      	movs	r3, #0
 8006694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006696:	2301      	movs	r3, #1
 8006698:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800669a:	f107 030c 	add.w	r3, r7, #12
 800669e:	4619      	mov	r1, r3
 80066a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80066a4:	f000 ff0a 	bl	80074bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80066a8:	bf00      	nop
 80066aa:	3720      	adds	r7, #32
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	40012c00 	.word	0x40012c00

080066b4 <LL_APB2_GRP1_EnableClock>:
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80066bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80066c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80066cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4013      	ands	r3, r2
 80066d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80066d8:	68fb      	ldr	r3, [r7, #12]
}
 80066da:	bf00      	nop
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
	...

080066e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b08c      	sub	sp, #48	; 0x30
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80066f0:	2300      	movs	r3, #0
 80066f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80066f4:	2300      	movs	r3, #0
 80066f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 80066f8:	2200      	movs	r2, #0
 80066fa:	6879      	ldr	r1, [r7, #4]
 80066fc:	201a      	movs	r0, #26
 80066fe:	f000 fe8b 	bl	8007418 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8006702:	201a      	movs	r0, #26
 8006704:	f000 fea2 	bl	800744c <HAL_NVIC_EnableIRQ>
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8006708:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800670c:	f7ff ffd2 	bl	80066b4 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006710:	f107 0208 	add.w	r2, r7, #8
 8006714:	f107 030c 	add.w	r3, r7, #12
 8006718:	4611      	mov	r1, r2
 800671a:	4618      	mov	r0, r3
 800671c:	f003 f972 	bl	8009a04 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8006720:	f003 f95a 	bl	80099d8 <HAL_RCC_GetPCLK2Freq>
 8006724:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006728:	4a12      	ldr	r2, [pc, #72]	; (8006774 <HAL_InitTick+0x8c>)
 800672a:	fba2 2303 	umull	r2, r3, r2, r3
 800672e:	0c9b      	lsrs	r3, r3, #18
 8006730:	3b01      	subs	r3, #1
 8006732:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8006734:	4b10      	ldr	r3, [pc, #64]	; (8006778 <HAL_InitTick+0x90>)
 8006736:	4a11      	ldr	r2, [pc, #68]	; (800677c <HAL_InitTick+0x94>)
 8006738:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800673a:	4b0f      	ldr	r3, [pc, #60]	; (8006778 <HAL_InitTick+0x90>)
 800673c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006740:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8006742:	4a0d      	ldr	r2, [pc, #52]	; (8006778 <HAL_InitTick+0x90>)
 8006744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006746:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8006748:	4b0b      	ldr	r3, [pc, #44]	; (8006778 <HAL_InitTick+0x90>)
 800674a:	2200      	movs	r2, #0
 800674c:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800674e:	4b0a      	ldr	r3, [pc, #40]	; (8006778 <HAL_InitTick+0x90>)
 8006750:	2200      	movs	r2, #0
 8006752:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8006754:	4808      	ldr	r0, [pc, #32]	; (8006778 <HAL_InitTick+0x90>)
 8006756:	f004 fd4b 	bl	800b1f0 <HAL_TIM_Base_Init>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d104      	bne.n	800676a <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8006760:	4805      	ldr	r0, [pc, #20]	; (8006778 <HAL_InitTick+0x90>)
 8006762:	f004 fd9d 	bl	800b2a0 <HAL_TIM_Base_Start_IT>
 8006766:	4603      	mov	r3, r0
 8006768:	e000      	b.n	800676c <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
}
 800676c:	4618      	mov	r0, r3
 800676e:	3730      	adds	r7, #48	; 0x30
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	431bde83 	.word	0x431bde83
 8006778:	2002e308 	.word	0x2002e308
 800677c:	40014800 	.word	0x40014800

08006780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006780:	b480      	push	{r7}
 8006782:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006784:	bf00      	nop
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800678e:	b480      	push	{r7}
 8006790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006792:	e7fe      	b.n	8006792 <HardFault_Handler+0x4>

08006794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006794:	b480      	push	{r7}
 8006796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006798:	e7fe      	b.n	8006798 <MemManage_Handler+0x4>

0800679a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800679a:	b480      	push	{r7}
 800679c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800679e:	e7fe      	b.n	800679e <BusFault_Handler+0x4>

080067a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80067a0:	b480      	push	{r7}
 80067a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80067a4:	e7fe      	b.n	80067a4 <UsageFault_Handler+0x4>

080067a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80067a6:	b480      	push	{r7}
 80067a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80067aa:	bf00      	nop
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80067b8:	4802      	ldr	r0, [pc, #8]	; (80067c4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80067ba:	f004 ff83 	bl	800b6c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80067be:	bf00      	nop
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	2002e308 	.word	0x2002e308

080067c8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80067cc:	f001 f82e 	bl	800782c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80067d0:	bf00      	nop
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <EXTI3_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void EXTI3_IRQHandler(void)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80067d8:	2008      	movs	r0, #8
 80067da:	f001 f80f 	bl	80077fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80067de:	bf00      	nop
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80067e6:	2010      	movs	r0, #16
 80067e8:	f001 f808 	bl	80077fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80067ec:	bf00      	nop
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80067f4:	2020      	movs	r0, #32
 80067f6:	f001 f801 	bl	80077fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80067fa:	bf00      	nop
 80067fc:	bd80      	pop	{r7, pc}
	...

08006800 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006804:	4802      	ldr	r0, [pc, #8]	; (8006810 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8006806:	f004 ff5d 	bl	800b6c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800680a:	bf00      	nop
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	2002e248 	.word	0x2002e248

08006814 <RTC_WKUP_IRQHandler>:

void RTC_WKUP_IRQHandler(void)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8006818:	f7fc fb5a 	bl	8002ed0 <HW_TS_RTC_Wakeup_Handler>
}
 800681c:	bf00      	nop
 800681e:	bd80      	pop	{r7, pc}

08006820 <IPCC_C1_TX_IRQHandler>:

void IPCC_C1_TX_IRQHandler(void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8006824:	f7fb f84e 	bl	80018c4 <HW_IPCC_Tx_Handler>

  return;
 8006828:	bf00      	nop
}
 800682a:	bd80      	pop	{r7, pc}

0800682c <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8006830:	f7fb f810 	bl	8001854 <HW_IPCC_Rx_Handler>
  return;
 8006834:	bf00      	nop
}
 8006836:	bd80      	pop	{r7, pc}

08006838 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006844:	2300      	movs	r3, #0
 8006846:	617b      	str	r3, [r7, #20]
 8006848:	e00a      	b.n	8006860 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800684a:	f3af 8000 	nop.w
 800684e:	4601      	mov	r1, r0
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	1c5a      	adds	r2, r3, #1
 8006854:	60ba      	str	r2, [r7, #8]
 8006856:	b2ca      	uxtb	r2, r1
 8006858:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	3301      	adds	r3, #1
 800685e:	617b      	str	r3, [r7, #20]
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	429a      	cmp	r2, r3
 8006866:	dbf0      	blt.n	800684a <_read+0x12>
	}

return len;
 8006868:	687b      	ldr	r3, [r7, #4]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3718      	adds	r7, #24
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <_close>:
	}
	return len;
}

int _close(int file)
{
 8006872:	b480      	push	{r7}
 8006874:	b083      	sub	sp, #12
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
	return -1;
 800687a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800687e:	4618      	mov	r0, r3
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800688a:	b480      	push	{r7}
 800688c:	b083      	sub	sp, #12
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800689a:	605a      	str	r2, [r3, #4]
	return 0;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <_isatty>:

int _isatty(int file)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b083      	sub	sp, #12
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
	return 1;
 80068b2:	2301      	movs	r3, #1
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
	return 0;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
	...

080068dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80068e4:	4b11      	ldr	r3, [pc, #68]	; (800692c <_sbrk+0x50>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d102      	bne.n	80068f2 <_sbrk+0x16>
		heap_end = &end;
 80068ec:	4b0f      	ldr	r3, [pc, #60]	; (800692c <_sbrk+0x50>)
 80068ee:	4a10      	ldr	r2, [pc, #64]	; (8006930 <_sbrk+0x54>)
 80068f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80068f2:	4b0e      	ldr	r3, [pc, #56]	; (800692c <_sbrk+0x50>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80068f8:	4b0c      	ldr	r3, [pc, #48]	; (800692c <_sbrk+0x50>)
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4413      	add	r3, r2
 8006900:	466a      	mov	r2, sp
 8006902:	4293      	cmp	r3, r2
 8006904:	d907      	bls.n	8006916 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006906:	f00c fd67 	bl	80133d8 <__errno>
 800690a:	4602      	mov	r2, r0
 800690c:	230c      	movs	r3, #12
 800690e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006914:	e006      	b.n	8006924 <_sbrk+0x48>
	}

	heap_end += incr;
 8006916:	4b05      	ldr	r3, [pc, #20]	; (800692c <_sbrk+0x50>)
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4413      	add	r3, r2
 800691e:	4a03      	ldr	r2, [pc, #12]	; (800692c <_sbrk+0x50>)
 8006920:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006922:	68fb      	ldr	r3, [r7, #12]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	200003a4 	.word	0x200003a4
 8006930:	2002e3f0 	.word	0x2002e3f0

08006934 <veml_PushState>:
  HAL_I2C_Master_Transmit(&VEML_State.i2cHandle, VEML_ADDR, Data, 3, HAL_MAX_DELAY);
}



HAL_StatusTypeDef veml_PushState(){ //helper to push power/gain/it to VEML7700
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af04      	add	r7, sp, #16

	//main config register; gain and integration time
	HAL_StatusTypeDef resp = HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	71fb      	strb	r3, [r7, #7]
	uint8_t out_data[2] = {0x00, 0x00};
 800693e:	2300      	movs	r3, #0
 8006940:	713b      	strb	r3, [r7, #4]
 8006942:	2300      	movs	r3, #0
 8006944:	717b      	strb	r3, [r7, #5]
	out_data[1] |= (VEML_State.gain << 3);
 8006946:	797b      	ldrb	r3, [r7, #5]
 8006948:	b25a      	sxtb	r2, r3
 800694a:	4b33      	ldr	r3, [pc, #204]	; (8006a18 <veml_PushState+0xe4>)
 800694c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006950:	00db      	lsls	r3, r3, #3
 8006952:	b25b      	sxtb	r3, r3
 8006954:	4313      	orrs	r3, r2
 8006956:	b25b      	sxtb	r3, r3
 8006958:	b2db      	uxtb	r3, r3
 800695a:	717b      	strb	r3, [r7, #5]
	out_data[1] |= ((VEML_State.integrationTime & 0x0C) >> 2);
 800695c:	797b      	ldrb	r3, [r7, #5]
 800695e:	b25a      	sxtb	r2, r3
 8006960:	4b2d      	ldr	r3, [pc, #180]	; (8006a18 <veml_PushState+0xe4>)
 8006962:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8006966:	109b      	asrs	r3, r3, #2
 8006968:	b25b      	sxtb	r3, r3
 800696a:	f003 0303 	and.w	r3, r3, #3
 800696e:	b25b      	sxtb	r3, r3
 8006970:	4313      	orrs	r3, r2
 8006972:	b25b      	sxtb	r3, r3
 8006974:	b2db      	uxtb	r3, r3
 8006976:	717b      	strb	r3, [r7, #5]
	out_data[0] |= ((VEML_State.integrationTime & 0x03) << 6);
 8006978:	793b      	ldrb	r3, [r7, #4]
 800697a:	b25a      	sxtb	r2, r3
 800697c:	4b26      	ldr	r3, [pc, #152]	; (8006a18 <veml_PushState+0xe4>)
 800697e:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8006982:	019b      	lsls	r3, r3, #6
 8006984:	b25b      	sxtb	r3, r3
 8006986:	4313      	orrs	r3, r2
 8006988:	b25b      	sxtb	r3, r3
 800698a:	b2db      	uxtb	r3, r3
 800698c:	713b      	strb	r3, [r7, #4]
	out_data[0] |= (VEML7700_PERS_1 << 4);
 800698e:	793b      	ldrb	r3, [r7, #4]
 8006990:	713b      	strb	r3, [r7, #4]

	//out_data |= (VEML_State.gain << 11);
	//out_data |= (VEML_State.integrationTime << 6);
	//out_data |= (VEML7700_PERS_1 << 4);

	while (resp == HAL_ERROR){
 8006992:	e00e      	b.n	80069b2 <veml_PushState+0x7e>
	  resp = HAL_I2C_Mem_Write(&(VEML_State.i2cHandle),
 8006994:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006998:	9302      	str	r3, [sp, #8]
 800699a:	2302      	movs	r3, #2
 800699c:	9301      	str	r3, [sp, #4]
 800699e:	1d3b      	adds	r3, r7, #4
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	2301      	movs	r3, #1
 80069a4:	2200      	movs	r2, #0
 80069a6:	2120      	movs	r1, #32
 80069a8:	481b      	ldr	r0, [pc, #108]	; (8006a18 <veml_PushState+0xe4>)
 80069aa:	f001 f9dd 	bl	8007d68 <HAL_I2C_Mem_Write>
 80069ae:	4603      	mov	r3, r0
 80069b0:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 80069b2:	79fb      	ldrb	r3, [r7, #7]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d0ed      	beq.n	8006994 <veml_PushState+0x60>
	  						   HAL_MAX_DELAY);
	  //I2C_Write_16b(VEML7700_ALS_CONFIG, out_data);
	}

	//power save config register
	resp = HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	71fb      	strb	r3, [r7, #7]
	out_data[0] = 0x00;
 80069bc:	2300      	movs	r3, #0
 80069be:	713b      	strb	r3, [r7, #4]
	out_data[1] = 0x00;
 80069c0:	2300      	movs	r3, #0
 80069c2:	717b      	strb	r3, [r7, #5]

	out_data[0] |= (VEML_State.powerSaveMode << 1);
 80069c4:	793b      	ldrb	r3, [r7, #4]
 80069c6:	b25a      	sxtb	r2, r3
 80069c8:	4b13      	ldr	r3, [pc, #76]	; (8006a18 <veml_PushState+0xe4>)
 80069ca:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80069ce:	005b      	lsls	r3, r3, #1
 80069d0:	b25b      	sxtb	r3, r3
 80069d2:	4313      	orrs	r3, r2
 80069d4:	b25b      	sxtb	r3, r3
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	713b      	strb	r3, [r7, #4]
	out_data[0] |= VEML_State.powerSaveEnable;
 80069da:	793a      	ldrb	r2, [r7, #4]
 80069dc:	4b0e      	ldr	r3, [pc, #56]	; (8006a18 <veml_PushState+0xe4>)
 80069de:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80069e2:	4313      	orrs	r3, r2
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	713b      	strb	r3, [r7, #4]


	//out_data |= (VEML_State.powerSaveMode << 1);
	//out_data |= VEML_State.powerSaveEnable;

	while (resp == HAL_ERROR){
 80069e8:	e00e      	b.n	8006a08 <veml_PushState+0xd4>
	  resp = HAL_I2C_Mem_Write(&(VEML_State.i2cHandle),
 80069ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069ee:	9302      	str	r3, [sp, #8]
 80069f0:	2302      	movs	r3, #2
 80069f2:	9301      	str	r3, [sp, #4]
 80069f4:	1d3b      	adds	r3, r7, #4
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	2301      	movs	r3, #1
 80069fa:	2203      	movs	r2, #3
 80069fc:	2120      	movs	r1, #32
 80069fe:	4806      	ldr	r0, [pc, #24]	; (8006a18 <veml_PushState+0xe4>)
 8006a00:	f001 f9b2 	bl	8007d68 <HAL_I2C_Mem_Write>
 8006a04:	4603      	mov	r3, r0
 8006a06:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8006a08:	79fb      	ldrb	r3, [r7, #7]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d0ed      	beq.n	80069ea <veml_PushState+0xb6>
							   out_data, 2,
							   HAL_MAX_DELAY);
	  //I2C_Write_16b(VEML7700_ALS_CONFIG, out_data);
	}

	return resp;
 8006a0e:	79fb      	ldrb	r3, [r7, #7]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	2002e354 	.word	0x2002e354

08006a1c <veml_Setup>:

HAL_StatusTypeDef veml_Setup(I2C_HandleTypeDef i2cHandle, VEML7700_Mode_t Mode){
 8006a1c:	b084      	sub	sp, #16
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	f107 0c08 	add.w	ip, r7, #8
 8006a26:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	VEML_State.i2cHandle = i2cHandle;
 8006a2a:	4b28      	ldr	r3, [pc, #160]	; (8006acc <veml_Setup+0xb0>)
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f107 0108 	add.w	r1, r7, #8
 8006a32:	234c      	movs	r3, #76	; 0x4c
 8006a34:	461a      	mov	r2, r3
 8006a36:	f00c fcf9 	bl	801342c <memcpy>
	VEML_State.autoGain = 0;
 8006a3a:	4b24      	ldr	r3, [pc, #144]	; (8006acc <veml_Setup+0xb0>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	switch (Mode){
 8006a42:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d014      	beq.n	8006a74 <veml_Setup+0x58>
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d023      	beq.n	8006a96 <veml_Setup+0x7a>
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d132      	bne.n	8006ab8 <veml_Setup+0x9c>
		case VEML_5S_POLLING:
			VEML_State.powerSaveMode = VEML7700_POWERSAVE_MODE4;
 8006a52:	4b1e      	ldr	r3, [pc, #120]	; (8006acc <veml_Setup+0xb0>)
 8006a54:	2203      	movs	r2, #3
 8006a56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			VEML_State.powerSaveEnable = 0x01;
 8006a5a:	4b1c      	ldr	r3, [pc, #112]	; (8006acc <veml_Setup+0xb0>)
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			VEML_State.gain = VEML7700_GAIN_1_4;
 8006a62:	4b1a      	ldr	r3, [pc, #104]	; (8006acc <veml_Setup+0xb0>)
 8006a64:	2203      	movs	r2, #3
 8006a66:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
			VEML_State.integrationTime = VEML7700_IT_800MS;
 8006a6a:	4b18      	ldr	r3, [pc, #96]	; (8006acc <veml_Setup+0xb0>)
 8006a6c:	2203      	movs	r2, #3
 8006a6e:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
			break;
 8006a72:	e021      	b.n	8006ab8 <veml_Setup+0x9c>

		case VEML_100MS_POLLING:
			VEML_State.powerSaveMode = VEML7700_POWERSAVE_MODE1;
 8006a74:	4b15      	ldr	r3, [pc, #84]	; (8006acc <veml_Setup+0xb0>)
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			VEML_State.powerSaveEnable = 0x00;
 8006a7c:	4b13      	ldr	r3, [pc, #76]	; (8006acc <veml_Setup+0xb0>)
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			VEML_State.gain = VEML7700_GAIN_1_4;
 8006a84:	4b11      	ldr	r3, [pc, #68]	; (8006acc <veml_Setup+0xb0>)
 8006a86:	2203      	movs	r2, #3
 8006a88:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
			VEML_State.integrationTime = VEML7700_IT_100MS;
 8006a8c:	4b0f      	ldr	r3, [pc, #60]	; (8006acc <veml_Setup+0xb0>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
			break;
 8006a94:	e010      	b.n	8006ab8 <veml_Setup+0x9c>

		case VEML_25MS_POLLING:
			VEML_State.powerSaveMode = VEML7700_POWERSAVE_MODE1;
 8006a96:	4b0d      	ldr	r3, [pc, #52]	; (8006acc <veml_Setup+0xb0>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			VEML_State.powerSaveEnable = 0x00;
 8006a9e:	4b0b      	ldr	r3, [pc, #44]	; (8006acc <veml_Setup+0xb0>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			VEML_State.gain = VEML7700_GAIN_1_4;
 8006aa6:	4b09      	ldr	r3, [pc, #36]	; (8006acc <veml_Setup+0xb0>)
 8006aa8:	2203      	movs	r2, #3
 8006aaa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
			VEML_State.integrationTime = VEML7700_IT_25MS;
 8006aae:	4b07      	ldr	r3, [pc, #28]	; (8006acc <veml_Setup+0xb0>)
 8006ab0:	220c      	movs	r2, #12
 8006ab2:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
			break;
 8006ab6:	bf00      	nop
	}

	return veml_PushState();
 8006ab8:	f7ff ff3c 	bl	8006934 <veml_PushState>
 8006abc:	4603      	mov	r3, r0

}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ac6:	b004      	add	sp, #16
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	2002e354 	.word	0x2002e354

08006ad0 <autoGain>:
HAL_StatusTypeDef veml_Set_IntegrationTime(uint8_t integrationTime){
	VEML_State.integrationTime = integrationTime;
	return veml_PushState();
}

void autoGain(uint16_t raw_data){
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	80fb      	strh	r3, [r7, #6]

	if (VEML_State.autoGain){ //if we are autoGaining
 8006ada:	4b29      	ldr	r3, [pc, #164]	; (8006b80 <autoGain+0xb0>)
 8006adc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d049      	beq.n	8006b78 <autoGain+0xa8>

		//if raw value is > ~90% of 0xFFFF and we're not at min gain
		if (VEML_State.gain != VEML7700_GAIN_1_8 && raw_data > 0xE665) {
 8006ae4:	4b26      	ldr	r3, [pc, #152]	; (8006b80 <autoGain+0xb0>)
 8006ae6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d01f      	beq.n	8006b2e <autoGain+0x5e>
 8006aee:	88fb      	ldrh	r3, [r7, #6]
 8006af0:	f24e 6265 	movw	r2, #58981	; 0xe665
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d91a      	bls.n	8006b2e <autoGain+0x5e>
			switch (VEML_State.gain){
 8006af8:	4b21      	ldr	r3, [pc, #132]	; (8006b80 <autoGain+0xb0>)
 8006afa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d004      	beq.n	8006b0c <autoGain+0x3c>
 8006b02:	2b03      	cmp	r3, #3
 8006b04:	d00c      	beq.n	8006b20 <autoGain+0x50>
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d005      	beq.n	8006b16 <autoGain+0x46>
 8006b0a:	e00e      	b.n	8006b2a <autoGain+0x5a>
				case VEML7700_GAIN_2:
					VEML_State.gain = VEML7700_GAIN_1;
 8006b0c:	4b1c      	ldr	r3, [pc, #112]	; (8006b80 <autoGain+0xb0>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					break;
 8006b14:	e009      	b.n	8006b2a <autoGain+0x5a>
				case VEML7700_GAIN_1:
					VEML_State.gain = VEML7700_GAIN_1_4;
 8006b16:	4b1a      	ldr	r3, [pc, #104]	; (8006b80 <autoGain+0xb0>)
 8006b18:	2203      	movs	r2, #3
 8006b1a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
				    break;
 8006b1e:	e004      	b.n	8006b2a <autoGain+0x5a>
				case VEML7700_GAIN_1_4:
					VEML_State.gain = VEML7700_GAIN_1_8;
 8006b20:	4b17      	ldr	r3, [pc, #92]	; (8006b80 <autoGain+0xb0>)
 8006b22:	2202      	movs	r2, #2
 8006b24:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					break;
 8006b28:	bf00      	nop
			}
			veml_PushState();
 8006b2a:	f7ff ff03 	bl	8006934 <veml_PushState>
		}

		//if raw value is < ~45% of 0xFFFF and we're not at max gain
		if (VEML_State.gain != VEML7700_GAIN_2 && raw_data < 0x7332) {
 8006b2e:	4b14      	ldr	r3, [pc, #80]	; (8006b80 <autoGain+0xb0>)
 8006b30:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d01f      	beq.n	8006b78 <autoGain+0xa8>
 8006b38:	88fb      	ldrh	r3, [r7, #6]
 8006b3a:	f247 3231 	movw	r2, #29489	; 0x7331
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d81a      	bhi.n	8006b78 <autoGain+0xa8>
			switch (VEML_State.gain){
 8006b42:	4b0f      	ldr	r3, [pc, #60]	; (8006b80 <autoGain+0xb0>)
 8006b44:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d004      	beq.n	8006b56 <autoGain+0x86>
 8006b4c:	2b03      	cmp	r3, #3
 8006b4e:	d007      	beq.n	8006b60 <autoGain+0x90>
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00a      	beq.n	8006b6a <autoGain+0x9a>
 8006b54:	e00e      	b.n	8006b74 <autoGain+0xa4>
				case VEML7700_GAIN_1_8:
					VEML_State.gain = VEML7700_GAIN_1_4;
 8006b56:	4b0a      	ldr	r3, [pc, #40]	; (8006b80 <autoGain+0xb0>)
 8006b58:	2203      	movs	r2, #3
 8006b5a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					break;
 8006b5e:	e009      	b.n	8006b74 <autoGain+0xa4>
				case VEML7700_GAIN_1_4:
					VEML_State.gain = VEML7700_GAIN_1;
 8006b60:	4b07      	ldr	r3, [pc, #28]	; (8006b80 <autoGain+0xb0>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
				    break;
 8006b68:	e004      	b.n	8006b74 <autoGain+0xa4>
				case VEML7700_GAIN_1:
					VEML_State.gain = VEML7700_GAIN_2;
 8006b6a:	4b05      	ldr	r3, [pc, #20]	; (8006b80 <autoGain+0xb0>)
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					break;
 8006b72:	bf00      	nop
			}
			veml_PushState();
 8006b74:	f7ff fede 	bl	8006934 <veml_PushState>
		}
	}
}
 8006b78:	bf00      	nop
 8006b7a:	3708      	adds	r7, #8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	2002e354 	.word	0x2002e354

08006b84 <veml_norm_data>:

float veml_norm_data(uint16_t raw_data){
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	80fb      	strh	r3, [r7, #6]

	float lux = (float)raw_data;
 8006b8e:	88fb      	ldrh	r3, [r7, #6]
 8006b90:	ee07 3a90 	vmov	s15, r3
 8006b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b98:	edc7 7a03 	vstr	s15, [r7, #12]

	switch (VEML_State.gain){
 8006b9c:	4b3d      	ldr	r3, [pc, #244]	; (8006c94 <veml_norm_data+0x110>)
 8006b9e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d015      	beq.n	8006bd2 <veml_norm_data+0x4e>
 8006ba6:	2b03      	cmp	r3, #3
 8006ba8:	d00a      	beq.n	8006bc0 <veml_norm_data+0x3c>
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d11a      	bne.n	8006be4 <veml_norm_data+0x60>
		case VEML7700_GAIN_2:
			lux /= 2.0;
 8006bae:	ed97 7a03 	vldr	s14, [r7, #12]
 8006bb2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006bb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006bba:	edc7 7a03 	vstr	s15, [r7, #12]
			break;
 8006bbe:	e011      	b.n	8006be4 <veml_norm_data+0x60>
		case VEML7700_GAIN_1_4:
		    lux *= 4;
 8006bc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8006bc4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8006bc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bcc:	edc7 7a03 	vstr	s15, [r7, #12]
		    break;
 8006bd0:	e008      	b.n	8006be4 <veml_norm_data+0x60>
		case VEML7700_GAIN_1_8:
		    lux *= 8;
 8006bd2:	edd7 7a03 	vldr	s15, [r7, #12]
 8006bd6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8006bda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bde:	edc7 7a03 	vstr	s15, [r7, #12]
		    break;
 8006be2:	bf00      	nop
	}

	switch (VEML_State.integrationTime){
 8006be4:	4b2b      	ldr	r3, [pc, #172]	; (8006c94 <veml_norm_data+0x110>)
 8006be6:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8006bea:	3b01      	subs	r3, #1
 8006bec:	2b0b      	cmp	r3, #11
 8006bee:	d846      	bhi.n	8006c7e <veml_norm_data+0xfa>
 8006bf0:	a201      	add	r2, pc, #4	; (adr r2, 8006bf8 <veml_norm_data+0x74>)
 8006bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf6:	bf00      	nop
 8006bf8:	08006c49 	.word	0x08006c49
 8006bfc:	08006c5b 	.word	0x08006c5b
 8006c00:	08006c6d 	.word	0x08006c6d
 8006c04:	08006c7f 	.word	0x08006c7f
 8006c08:	08006c7f 	.word	0x08006c7f
 8006c0c:	08006c7f 	.word	0x08006c7f
 8006c10:	08006c7f 	.word	0x08006c7f
 8006c14:	08006c3b 	.word	0x08006c3b
 8006c18:	08006c7f 	.word	0x08006c7f
 8006c1c:	08006c7f 	.word	0x08006c7f
 8006c20:	08006c7f 	.word	0x08006c7f
 8006c24:	08006c29 	.word	0x08006c29
	  	case VEML7700_IT_25MS:
	  		lux *= 4;
 8006c28:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c2c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8006c30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c34:	edc7 7a03 	vstr	s15, [r7, #12]
	  		break;
 8006c38:	e021      	b.n	8006c7e <veml_norm_data+0xfa>
	  	case VEML7700_IT_50MS:
	  		lux *= 2;
 8006c3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c3e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006c42:	edc7 7a03 	vstr	s15, [r7, #12]
	  		break;
 8006c46:	e01a      	b.n	8006c7e <veml_norm_data+0xfa>
	  	case VEML7700_IT_200MS:
	  		lux /= 2.0;
 8006c48:	ed97 7a03 	vldr	s14, [r7, #12]
 8006c4c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006c50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c54:	edc7 7a03 	vstr	s15, [r7, #12]
	  		break;
 8006c58:	e011      	b.n	8006c7e <veml_norm_data+0xfa>
	  	case VEML7700_IT_400MS:
	  		lux /= 4.0;
 8006c5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8006c5e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8006c62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c66:	edc7 7a03 	vstr	s15, [r7, #12]
	  		break;
 8006c6a:	e008      	b.n	8006c7e <veml_norm_data+0xfa>
	  	case VEML7700_IT_800MS:
	  		lux /= 8.0;
 8006c6c:	ed97 7a03 	vldr	s14, [r7, #12]
 8006c70:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8006c74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c78:	edc7 7a03 	vstr	s15, [r7, #12]
	  		break;
 8006c7c:	bf00      	nop
	}

	return lux;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	ee07 3a90 	vmov	s15, r3
}
 8006c84:	eeb0 0a67 	vmov.f32	s0, s15
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	2002e354 	.word	0x2002e354

08006c98 <veml_Get_Lux>:

float veml_Get_Lux(){
 8006c98:	b5b0      	push	{r4, r5, r7, lr}
 8006c9a:	b088      	sub	sp, #32
 8006c9c:	af04      	add	r7, sp, #16

	const uint16_t max_tries = 300;
 8006c9e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8006ca2:	80fb      	strh	r3, [r7, #6]
	uint16_t current_tries = 0;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	81fb      	strh	r3, [r7, #14]

	uint8_t buffer[2];

	HAL_StatusTypeDef resp = HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	737b      	strb	r3, [r7, #13]

	while (resp == HAL_ERROR && current_tries < max_tries){
 8006cac:	e011      	b.n	8006cd2 <veml_Get_Lux+0x3a>
	  resp = HAL_I2C_Mem_Read(&(VEML_State.i2cHandle),
 8006cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cb2:	9302      	str	r3, [sp, #8]
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	9301      	str	r3, [sp, #4]
 8006cb8:	463b      	mov	r3, r7
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	2204      	movs	r2, #4
 8006cc0:	2120      	movs	r1, #32
 8006cc2:	4867      	ldr	r0, [pc, #412]	; (8006e60 <veml_Get_Lux+0x1c8>)
 8006cc4:	f001 f964 	bl	8007f90 <HAL_I2C_Mem_Read>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	737b      	strb	r3, [r7, #13]
							  HAL_MAX_DELAY);

	  //resp = HAL_I2C_Master_Receive(&VEML_State.i2cHandle,
	  //	  	  	  VEML_ADDR,&buffer, 2,
	//			  HAL_MAX_DELAY);
	  current_tries++;
 8006ccc:	89fb      	ldrh	r3, [r7, #14]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	81fb      	strh	r3, [r7, #14]
	while (resp == HAL_ERROR && current_tries < max_tries){
 8006cd2:	7b7b      	ldrb	r3, [r7, #13]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d103      	bne.n	8006ce0 <veml_Get_Lux+0x48>
 8006cd8:	89fa      	ldrh	r2, [r7, #14]
 8006cda:	88fb      	ldrh	r3, [r7, #6]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d3e6      	bcc.n	8006cae <veml_Get_Lux+0x16>
	}

	if (current_tries >= max_tries) {
 8006ce0:	89fa      	ldrh	r2, [r7, #14]
 8006ce2:	88fb      	ldrh	r3, [r7, #6]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d301      	bcc.n	8006cec <veml_Get_Lux+0x54>
	  return -1;
 8006ce8:	4b5e      	ldr	r3, [pc, #376]	; (8006e64 <veml_Get_Lux+0x1cc>)
 8006cea:	e090      	b.n	8006e0e <veml_Get_Lux+0x176>
	}

	uint16_t data = (buffer[1] << 8) | buffer[0];
 8006cec:	787b      	ldrb	r3, [r7, #1]
 8006cee:	021b      	lsls	r3, r3, #8
 8006cf0:	b21a      	sxth	r2, r3
 8006cf2:	783b      	ldrb	r3, [r7, #0]
 8006cf4:	b21b      	sxth	r3, r3
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	b21b      	sxth	r3, r3
 8006cfa:	80bb      	strh	r3, [r7, #4]

	autoGain(data);
 8006cfc:	88bb      	ldrh	r3, [r7, #4]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7ff fee6 	bl	8006ad0 <autoGain>

	float lux = (veml_norm_data(data) * 0.0576);
 8006d04:	88bb      	ldrh	r3, [r7, #4]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7ff ff3c 	bl	8006b84 <veml_norm_data>
 8006d0c:	ee10 3a10 	vmov	r3, s0
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7f9 fbf1 	bl	80004f8 <__aeabi_f2d>
 8006d16:	a342      	add	r3, pc, #264	; (adr r3, 8006e20 <veml_Get_Lux+0x188>)
 8006d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1c:	f7f9 fc44 	bl	80005a8 <__aeabi_dmul>
 8006d20:	4603      	mov	r3, r0
 8006d22:	460c      	mov	r4, r1
 8006d24:	4618      	mov	r0, r3
 8006d26:	4621      	mov	r1, r4
 8006d28:	f7f9 ff16 	bl	8000b58 <__aeabi_d2f>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	60bb      	str	r3, [r7, #8]

	if (VEML_State.gain == VEML7700_GAIN_1_8 && VEML_State.integrationTime == VEML7700_IT_25MS){
 8006d30:	4b4b      	ldr	r3, [pc, #300]	; (8006e60 <veml_Get_Lux+0x1c8>)
 8006d32:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d168      	bne.n	8006e0c <veml_Get_Lux+0x174>
 8006d3a:	4b49      	ldr	r3, [pc, #292]	; (8006e60 <veml_Get_Lux+0x1c8>)
 8006d3c:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8006d40:	2b0c      	cmp	r3, #12
 8006d42:	d163      	bne.n	8006e0c <veml_Get_Lux+0x174>
		lux = 6.0135e-13 * pow(lux, 4) - 9.3924e-9 * pow(lux, 3) + 8.1488e-5 * pow(lux, 2) + 1.0023 * lux;
 8006d44:	68b8      	ldr	r0, [r7, #8]
 8006d46:	f7f9 fbd7 	bl	80004f8 <__aeabi_f2d>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	460c      	mov	r4, r1
 8006d4e:	ed9f 1b36 	vldr	d1, [pc, #216]	; 8006e28 <veml_Get_Lux+0x190>
 8006d52:	ec44 3b10 	vmov	d0, r3, r4
 8006d56:	f00f f93b 	bl	8015fd0 <pow>
 8006d5a:	ec51 0b10 	vmov	r0, r1, d0
 8006d5e:	a334      	add	r3, pc, #208	; (adr r3, 8006e30 <veml_Get_Lux+0x198>)
 8006d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d64:	f7f9 fc20 	bl	80005a8 <__aeabi_dmul>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	460c      	mov	r4, r1
 8006d6c:	4625      	mov	r5, r4
 8006d6e:	461c      	mov	r4, r3
 8006d70:	68b8      	ldr	r0, [r7, #8]
 8006d72:	f7f9 fbc1 	bl	80004f8 <__aeabi_f2d>
 8006d76:	4602      	mov	r2, r0
 8006d78:	460b      	mov	r3, r1
 8006d7a:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 8006e38 <veml_Get_Lux+0x1a0>
 8006d7e:	ec43 2b10 	vmov	d0, r2, r3
 8006d82:	f00f f925 	bl	8015fd0 <pow>
 8006d86:	ec51 0b10 	vmov	r0, r1, d0
 8006d8a:	a32d      	add	r3, pc, #180	; (adr r3, 8006e40 <veml_Get_Lux+0x1a8>)
 8006d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d90:	f7f9 fc0a 	bl	80005a8 <__aeabi_dmul>
 8006d94:	4602      	mov	r2, r0
 8006d96:	460b      	mov	r3, r1
 8006d98:	4620      	mov	r0, r4
 8006d9a:	4629      	mov	r1, r5
 8006d9c:	f7f9 fa4c 	bl	8000238 <__aeabi_dsub>
 8006da0:	4603      	mov	r3, r0
 8006da2:	460c      	mov	r4, r1
 8006da4:	4625      	mov	r5, r4
 8006da6:	461c      	mov	r4, r3
 8006da8:	68b8      	ldr	r0, [r7, #8]
 8006daa:	f7f9 fba5 	bl	80004f8 <__aeabi_f2d>
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8006e48 <veml_Get_Lux+0x1b0>
 8006db6:	ec43 2b10 	vmov	d0, r2, r3
 8006dba:	f00f f909 	bl	8015fd0 <pow>
 8006dbe:	ec51 0b10 	vmov	r0, r1, d0
 8006dc2:	a323      	add	r3, pc, #140	; (adr r3, 8006e50 <veml_Get_Lux+0x1b8>)
 8006dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc8:	f7f9 fbee 	bl	80005a8 <__aeabi_dmul>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	4629      	mov	r1, r5
 8006dd4:	f7f9 fa32 	bl	800023c <__adddf3>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	460c      	mov	r4, r1
 8006ddc:	4625      	mov	r5, r4
 8006dde:	461c      	mov	r4, r3
 8006de0:	68b8      	ldr	r0, [r7, #8]
 8006de2:	f7f9 fb89 	bl	80004f8 <__aeabi_f2d>
 8006de6:	a31c      	add	r3, pc, #112	; (adr r3, 8006e58 <veml_Get_Lux+0x1c0>)
 8006de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dec:	f7f9 fbdc 	bl	80005a8 <__aeabi_dmul>
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	4620      	mov	r0, r4
 8006df6:	4629      	mov	r1, r5
 8006df8:	f7f9 fa20 	bl	800023c <__adddf3>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	460c      	mov	r4, r1
 8006e00:	4618      	mov	r0, r3
 8006e02:	4621      	mov	r1, r4
 8006e04:	f7f9 fea8 	bl	8000b58 <__aeabi_d2f>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	60bb      	str	r3, [r7, #8]
	}

	return lux;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	ee07 3a90 	vmov	s15, r3
}
 8006e12:	eeb0 0a67 	vmov.f32	s0, s15
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8006e1c:	f3af 8000 	nop.w
 8006e20:	487fcb92 	.word	0x487fcb92
 8006e24:	3fad7dbf 	.word	0x3fad7dbf
 8006e28:	00000000 	.word	0x00000000
 8006e2c:	40100000 	.word	0x40100000
 8006e30:	b18f283b 	.word	0xb18f283b
 8006e34:	3d65287a 	.word	0x3d65287a
 8006e38:	00000000 	.word	0x00000000
 8006e3c:	40080000 	.word	0x40080000
 8006e40:	c91ef46e 	.word	0xc91ef46e
 8006e44:	3e442b86 	.word	0x3e442b86
 8006e48:	00000000 	.word	0x00000000
 8006e4c:	40000000 	.word	0x40000000
 8006e50:	2e18cab0 	.word	0x2e18cab0
 8006e54:	3f155c91 	.word	0x3f155c91
 8006e58:	b98c7e28 	.word	0xb98c7e28
 8006e5c:	3ff0096b 	.word	0x3ff0096b
 8006e60:	2002e354 	.word	0x2002e354
 8006e64:	bf800000 	.word	0xbf800000

08006e68 <veml_Get_White_Lux>:

float veml_Get_White_Lux(){
 8006e68:	b5b0      	push	{r4, r5, r7, lr}
 8006e6a:	b088      	sub	sp, #32
 8006e6c:	af04      	add	r7, sp, #16

	const uint16_t max_tries = 300;
 8006e6e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8006e72:	80fb      	strh	r3, [r7, #6]
	uint16_t current_tries = 0;
 8006e74:	2300      	movs	r3, #0
 8006e76:	81fb      	strh	r3, [r7, #14]

	uint8_t buffer[2];

	HAL_StatusTypeDef resp = HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	737b      	strb	r3, [r7, #13]

	while (resp == HAL_ERROR && current_tries < max_tries){
 8006e7c:	e011      	b.n	8006ea2 <veml_Get_White_Lux+0x3a>
	  resp = HAL_I2C_Mem_Read(&(VEML_State.i2cHandle),
 8006e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e82:	9302      	str	r3, [sp, #8]
 8006e84:	2302      	movs	r3, #2
 8006e86:	9301      	str	r3, [sp, #4]
 8006e88:	463b      	mov	r3, r7
 8006e8a:	9300      	str	r3, [sp, #0]
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	2205      	movs	r2, #5
 8006e90:	2120      	movs	r1, #32
 8006e92:	4867      	ldr	r0, [pc, #412]	; (8007030 <veml_Get_White_Lux+0x1c8>)
 8006e94:	f001 f87c 	bl	8007f90 <HAL_I2C_Mem_Read>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	737b      	strb	r3, [r7, #13]
			  	  	  	  	  VEML_ADDR,
							  VEML7700_WHITE_DATA, 1,
							  buffer, 2,
							  HAL_MAX_DELAY);
	  current_tries++;
 8006e9c:	89fb      	ldrh	r3, [r7, #14]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	81fb      	strh	r3, [r7, #14]
	while (resp == HAL_ERROR && current_tries < max_tries){
 8006ea2:	7b7b      	ldrb	r3, [r7, #13]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d103      	bne.n	8006eb0 <veml_Get_White_Lux+0x48>
 8006ea8:	89fa      	ldrh	r2, [r7, #14]
 8006eaa:	88fb      	ldrh	r3, [r7, #6]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d3e6      	bcc.n	8006e7e <veml_Get_White_Lux+0x16>
	}

	if (current_tries >= max_tries) {
 8006eb0:	89fa      	ldrh	r2, [r7, #14]
 8006eb2:	88fb      	ldrh	r3, [r7, #6]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d301      	bcc.n	8006ebc <veml_Get_White_Lux+0x54>
	  return -1;
 8006eb8:	4b5e      	ldr	r3, [pc, #376]	; (8007034 <veml_Get_White_Lux+0x1cc>)
 8006eba:	e090      	b.n	8006fde <veml_Get_White_Lux+0x176>
	}

	uint16_t data = (buffer[1] << 8) | buffer[0];
 8006ebc:	787b      	ldrb	r3, [r7, #1]
 8006ebe:	021b      	lsls	r3, r3, #8
 8006ec0:	b21a      	sxth	r2, r3
 8006ec2:	783b      	ldrb	r3, [r7, #0]
 8006ec4:	b21b      	sxth	r3, r3
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	b21b      	sxth	r3, r3
 8006eca:	80bb      	strh	r3, [r7, #4]

	autoGain(data);
 8006ecc:	88bb      	ldrh	r3, [r7, #4]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7ff fdfe 	bl	8006ad0 <autoGain>

	float lux = (veml_norm_data(data) * 0.0576);
 8006ed4:	88bb      	ldrh	r3, [r7, #4]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7ff fe54 	bl	8006b84 <veml_norm_data>
 8006edc:	ee10 3a10 	vmov	r3, s0
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7f9 fb09 	bl	80004f8 <__aeabi_f2d>
 8006ee6:	a342      	add	r3, pc, #264	; (adr r3, 8006ff0 <veml_Get_White_Lux+0x188>)
 8006ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eec:	f7f9 fb5c 	bl	80005a8 <__aeabi_dmul>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	460c      	mov	r4, r1
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	4621      	mov	r1, r4
 8006ef8:	f7f9 fe2e 	bl	8000b58 <__aeabi_d2f>
 8006efc:	4603      	mov	r3, r0
 8006efe:	60bb      	str	r3, [r7, #8]

	if (VEML_State.gain == VEML7700_GAIN_1_8 && VEML_State.integrationTime == VEML7700_IT_25MS){
 8006f00:	4b4b      	ldr	r3, [pc, #300]	; (8007030 <veml_Get_White_Lux+0x1c8>)
 8006f02:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d168      	bne.n	8006fdc <veml_Get_White_Lux+0x174>
 8006f0a:	4b49      	ldr	r3, [pc, #292]	; (8007030 <veml_Get_White_Lux+0x1c8>)
 8006f0c:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8006f10:	2b0c      	cmp	r3, #12
 8006f12:	d163      	bne.n	8006fdc <veml_Get_White_Lux+0x174>
		lux = 6.0135e-13 * pow(lux, 4) - 9.3924e-9 * pow(lux, 3) + 8.1488e-5 * pow(lux, 2) + 1.0023 * lux;
 8006f14:	68b8      	ldr	r0, [r7, #8]
 8006f16:	f7f9 faef 	bl	80004f8 <__aeabi_f2d>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	460c      	mov	r4, r1
 8006f1e:	ed9f 1b36 	vldr	d1, [pc, #216]	; 8006ff8 <veml_Get_White_Lux+0x190>
 8006f22:	ec44 3b10 	vmov	d0, r3, r4
 8006f26:	f00f f853 	bl	8015fd0 <pow>
 8006f2a:	ec51 0b10 	vmov	r0, r1, d0
 8006f2e:	a334      	add	r3, pc, #208	; (adr r3, 8007000 <veml_Get_White_Lux+0x198>)
 8006f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f34:	f7f9 fb38 	bl	80005a8 <__aeabi_dmul>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	4625      	mov	r5, r4
 8006f3e:	461c      	mov	r4, r3
 8006f40:	68b8      	ldr	r0, [r7, #8]
 8006f42:	f7f9 fad9 	bl	80004f8 <__aeabi_f2d>
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 8007008 <veml_Get_White_Lux+0x1a0>
 8006f4e:	ec43 2b10 	vmov	d0, r2, r3
 8006f52:	f00f f83d 	bl	8015fd0 <pow>
 8006f56:	ec51 0b10 	vmov	r0, r1, d0
 8006f5a:	a32d      	add	r3, pc, #180	; (adr r3, 8007010 <veml_Get_White_Lux+0x1a8>)
 8006f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f60:	f7f9 fb22 	bl	80005a8 <__aeabi_dmul>
 8006f64:	4602      	mov	r2, r0
 8006f66:	460b      	mov	r3, r1
 8006f68:	4620      	mov	r0, r4
 8006f6a:	4629      	mov	r1, r5
 8006f6c:	f7f9 f964 	bl	8000238 <__aeabi_dsub>
 8006f70:	4603      	mov	r3, r0
 8006f72:	460c      	mov	r4, r1
 8006f74:	4625      	mov	r5, r4
 8006f76:	461c      	mov	r4, r3
 8006f78:	68b8      	ldr	r0, [r7, #8]
 8006f7a:	f7f9 fabd 	bl	80004f8 <__aeabi_f2d>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	460b      	mov	r3, r1
 8006f82:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8007018 <veml_Get_White_Lux+0x1b0>
 8006f86:	ec43 2b10 	vmov	d0, r2, r3
 8006f8a:	f00f f821 	bl	8015fd0 <pow>
 8006f8e:	ec51 0b10 	vmov	r0, r1, d0
 8006f92:	a323      	add	r3, pc, #140	; (adr r3, 8007020 <veml_Get_White_Lux+0x1b8>)
 8006f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f98:	f7f9 fb06 	bl	80005a8 <__aeabi_dmul>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	4629      	mov	r1, r5
 8006fa4:	f7f9 f94a 	bl	800023c <__adddf3>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	460c      	mov	r4, r1
 8006fac:	4625      	mov	r5, r4
 8006fae:	461c      	mov	r4, r3
 8006fb0:	68b8      	ldr	r0, [r7, #8]
 8006fb2:	f7f9 faa1 	bl	80004f8 <__aeabi_f2d>
 8006fb6:	a31c      	add	r3, pc, #112	; (adr r3, 8007028 <veml_Get_White_Lux+0x1c0>)
 8006fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbc:	f7f9 faf4 	bl	80005a8 <__aeabi_dmul>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	4629      	mov	r1, r5
 8006fc8:	f7f9 f938 	bl	800023c <__adddf3>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	460c      	mov	r4, r1
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	f7f9 fdc0 	bl	8000b58 <__aeabi_d2f>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	60bb      	str	r3, [r7, #8]
	}

	return lux;
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	ee07 3a90 	vmov	s15, r3

}
 8006fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bdb0      	pop	{r4, r5, r7, pc}
 8006fec:	f3af 8000 	nop.w
 8006ff0:	487fcb92 	.word	0x487fcb92
 8006ff4:	3fad7dbf 	.word	0x3fad7dbf
 8006ff8:	00000000 	.word	0x00000000
 8006ffc:	40100000 	.word	0x40100000
 8007000:	b18f283b 	.word	0xb18f283b
 8007004:	3d65287a 	.word	0x3d65287a
 8007008:	00000000 	.word	0x00000000
 800700c:	40080000 	.word	0x40080000
 8007010:	c91ef46e 	.word	0xc91ef46e
 8007014:	3e442b86 	.word	0x3e442b86
 8007018:	00000000 	.word	0x00000000
 800701c:	40000000 	.word	0x40000000
 8007020:	2e18cab0 	.word	0x2e18cab0
 8007024:	3f155c91 	.word	0x3f155c91
 8007028:	b98c7e28 	.word	0xb98c7e28
 800702c:	3ff0096b 	.word	0x3ff0096b
 8007030:	2002e354 	.word	0x2002e354
 8007034:	bf800000 	.word	0xbf800000

08007038 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007038:	b480      	push	{r7}
 800703a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800703c:	4b26      	ldr	r3, [pc, #152]	; (80070d8 <SystemInit+0xa0>)
 800703e:	2200      	movs	r2, #0
 8007040:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8007042:	4b25      	ldr	r3, [pc, #148]	; (80070d8 <SystemInit+0xa0>)
 8007044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007048:	4a23      	ldr	r2, [pc, #140]	; (80070d8 <SystemInit+0xa0>)
 800704a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800704e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800705c:	f043 0301 	orr.w	r3, r3, #1
 8007060:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8007062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007066:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800706a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800706c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007076:	4b19      	ldr	r3, [pc, #100]	; (80070dc <SystemInit+0xa4>)
 8007078:	4013      	ands	r3, r2
 800707a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800707c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007080:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007084:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007088:	f023 0305 	bic.w	r3, r3, #5
 800708c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8007090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007094:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007098:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800709c:	f023 0301 	bic.w	r3, r3, #1
 80070a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80070a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070a8:	4a0d      	ldr	r2, [pc, #52]	; (80070e0 <SystemInit+0xa8>)
 80070aa:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80070ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070b0:	4a0b      	ldr	r2, [pc, #44]	; (80070e0 <SystemInit+0xa8>)
 80070b2:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80070b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80070c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070c8:	2200      	movs	r2, #0
 80070ca:	619a      	str	r2, [r3, #24]
}
 80070cc:	bf00      	nop
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	e000ed00 	.word	0xe000ed00
 80070dc:	faf6fefb 	.word	0xfaf6fefb
 80070e0:	22041000 	.word	0x22041000

080070e4 <LL_DBGMCU_EnableDBGSleepMode>:
{
 80070e4:	b480      	push	{r7}
 80070e6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80070e8:	4b05      	ldr	r3, [pc, #20]	; (8007100 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	4a04      	ldr	r2, [pc, #16]	; (8007100 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80070ee:	f043 0301 	orr.w	r3, r3, #1
 80070f2:	6053      	str	r3, [r2, #4]
}
 80070f4:	bf00      	nop
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	e0042000 	.word	0xe0042000

08007104 <LL_DBGMCU_EnableDBGStopMode>:
{
 8007104:	b480      	push	{r7}
 8007106:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8007108:	4b05      	ldr	r3, [pc, #20]	; (8007120 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	4a04      	ldr	r2, [pc, #16]	; (8007120 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800710e:	f043 0302 	orr.w	r3, r3, #2
 8007112:	6053      	str	r3, [r2, #4]
}
 8007114:	bf00      	nop
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	e0042000 	.word	0xe0042000

08007124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800712a:	2300      	movs	r3, #0
 800712c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800712e:	4b0c      	ldr	r3, [pc, #48]	; (8007160 <HAL_Init+0x3c>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a0b      	ldr	r2, [pc, #44]	; (8007160 <HAL_Init+0x3c>)
 8007134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007138:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800713a:	2003      	movs	r0, #3
 800713c:	f000 f961 	bl	8007402 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007140:	2000      	movs	r0, #0
 8007142:	f7ff fad1 	bl	80066e8 <HAL_InitTick>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d002      	beq.n	8007152 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	71fb      	strb	r3, [r7, #7]
 8007150:	e001      	b.n	8007156 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007152:	f7ff f9c4 	bl	80064de <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007156:	79fb      	ldrb	r3, [r7, #7]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3708      	adds	r7, #8
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	58004000 	.word	0x58004000

08007164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007164:	b480      	push	{r7}
 8007166:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007168:	4b06      	ldr	r3, [pc, #24]	; (8007184 <HAL_IncTick+0x20>)
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	461a      	mov	r2, r3
 800716e:	4b06      	ldr	r3, [pc, #24]	; (8007188 <HAL_IncTick+0x24>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4413      	add	r3, r2
 8007174:	4a04      	ldr	r2, [pc, #16]	; (8007188 <HAL_IncTick+0x24>)
 8007176:	6013      	str	r3, [r2, #0]
}
 8007178:	bf00      	nop
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	2000001c 	.word	0x2000001c
 8007188:	2002e3a8 	.word	0x2002e3a8

0800718c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800718c:	b480      	push	{r7}
 800718e:	af00      	add	r7, sp, #0
  return uwTick;
 8007190:	4b03      	ldr	r3, [pc, #12]	; (80071a0 <HAL_GetTick+0x14>)
 8007192:	681b      	ldr	r3, [r3, #0]
}
 8007194:	4618      	mov	r0, r3
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	2002e3a8 	.word	0x2002e3a8

080071a4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80071a4:	b480      	push	{r7}
 80071a6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80071a8:	4b03      	ldr	r3, [pc, #12]	; (80071b8 <HAL_GetTickPrio+0x14>)
 80071aa:	681b      	ldr	r3, [r3, #0]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	20000018 	.word	0x20000018

080071bc <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80071bc:	b480      	push	{r7}
 80071be:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80071c0:	4b03      	ldr	r3, [pc, #12]	; (80071d0 <HAL_GetTickFreq+0x14>)
 80071c2:	781b      	ldrb	r3, [r3, #0]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	2000001c 	.word	0x2000001c

080071d4 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80071d8:	f7ff ff84 	bl	80070e4 <LL_DBGMCU_EnableDBGSleepMode>
}
 80071dc:	bf00      	nop
 80071de:	bd80      	pop	{r7, pc}

080071e0 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80071e4:	f7ff ff8e 	bl	8007104 <LL_DBGMCU_EnableDBGStopMode>
}
 80071e8:	bf00      	nop
 80071ea:	bd80      	pop	{r7, pc}

080071ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f003 0307 	and.w	r3, r3, #7
 80071fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80071fc:	4b0c      	ldr	r3, [pc, #48]	; (8007230 <__NVIC_SetPriorityGrouping+0x44>)
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007202:	68ba      	ldr	r2, [r7, #8]
 8007204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007208:	4013      	ands	r3, r2
 800720a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800721c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800721e:	4a04      	ldr	r2, [pc, #16]	; (8007230 <__NVIC_SetPriorityGrouping+0x44>)
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	60d3      	str	r3, [r2, #12]
}
 8007224:	bf00      	nop
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	e000ed00 	.word	0xe000ed00

08007234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007234:	b480      	push	{r7}
 8007236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007238:	4b04      	ldr	r3, [pc, #16]	; (800724c <__NVIC_GetPriorityGrouping+0x18>)
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	0a1b      	lsrs	r3, r3, #8
 800723e:	f003 0307 	and.w	r3, r3, #7
}
 8007242:	4618      	mov	r0, r3
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	e000ed00 	.word	0xe000ed00

08007250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	4603      	mov	r3, r0
 8007258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800725a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800725e:	2b00      	cmp	r3, #0
 8007260:	db0b      	blt.n	800727a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007262:	79fb      	ldrb	r3, [r7, #7]
 8007264:	f003 021f 	and.w	r2, r3, #31
 8007268:	4907      	ldr	r1, [pc, #28]	; (8007288 <__NVIC_EnableIRQ+0x38>)
 800726a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800726e:	095b      	lsrs	r3, r3, #5
 8007270:	2001      	movs	r0, #1
 8007272:	fa00 f202 	lsl.w	r2, r0, r2
 8007276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800727a:	bf00      	nop
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	e000e100 	.word	0xe000e100

0800728c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	4603      	mov	r3, r0
 8007294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800729a:	2b00      	cmp	r3, #0
 800729c:	db10      	blt.n	80072c0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800729e:	79fb      	ldrb	r3, [r7, #7]
 80072a0:	f003 021f 	and.w	r2, r3, #31
 80072a4:	4909      	ldr	r1, [pc, #36]	; (80072cc <__NVIC_DisableIRQ+0x40>)
 80072a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072aa:	095b      	lsrs	r3, r3, #5
 80072ac:	2001      	movs	r0, #1
 80072ae:	fa00 f202 	lsl.w	r2, r0, r2
 80072b2:	3320      	adds	r3, #32
 80072b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80072b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80072bc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	e000e100 	.word	0xe000e100

080072d0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	4603      	mov	r3, r0
 80072d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	db0c      	blt.n	80072fc <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80072e2:	79fb      	ldrb	r3, [r7, #7]
 80072e4:	f003 021f 	and.w	r2, r3, #31
 80072e8:	4907      	ldr	r1, [pc, #28]	; (8007308 <__NVIC_SetPendingIRQ+0x38>)
 80072ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072ee:	095b      	lsrs	r3, r3, #5
 80072f0:	2001      	movs	r0, #1
 80072f2:	fa00 f202 	lsl.w	r2, r0, r2
 80072f6:	3340      	adds	r3, #64	; 0x40
 80072f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	e000e100 	.word	0xe000e100

0800730c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	4603      	mov	r3, r0
 8007314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800731a:	2b00      	cmp	r3, #0
 800731c:	db0c      	blt.n	8007338 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800731e:	79fb      	ldrb	r3, [r7, #7]
 8007320:	f003 021f 	and.w	r2, r3, #31
 8007324:	4907      	ldr	r1, [pc, #28]	; (8007344 <__NVIC_ClearPendingIRQ+0x38>)
 8007326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800732a:	095b      	lsrs	r3, r3, #5
 800732c:	2001      	movs	r0, #1
 800732e:	fa00 f202 	lsl.w	r2, r0, r2
 8007332:	3360      	adds	r3, #96	; 0x60
 8007334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	e000e100 	.word	0xe000e100

08007348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	4603      	mov	r3, r0
 8007350:	6039      	str	r1, [r7, #0]
 8007352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007358:	2b00      	cmp	r3, #0
 800735a:	db0a      	blt.n	8007372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	b2da      	uxtb	r2, r3
 8007360:	490c      	ldr	r1, [pc, #48]	; (8007394 <__NVIC_SetPriority+0x4c>)
 8007362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007366:	0112      	lsls	r2, r2, #4
 8007368:	b2d2      	uxtb	r2, r2
 800736a:	440b      	add	r3, r1
 800736c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007370:	e00a      	b.n	8007388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	b2da      	uxtb	r2, r3
 8007376:	4908      	ldr	r1, [pc, #32]	; (8007398 <__NVIC_SetPriority+0x50>)
 8007378:	79fb      	ldrb	r3, [r7, #7]
 800737a:	f003 030f 	and.w	r3, r3, #15
 800737e:	3b04      	subs	r3, #4
 8007380:	0112      	lsls	r2, r2, #4
 8007382:	b2d2      	uxtb	r2, r2
 8007384:	440b      	add	r3, r1
 8007386:	761a      	strb	r2, [r3, #24]
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	e000e100 	.word	0xe000e100
 8007398:	e000ed00 	.word	0xe000ed00

0800739c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800739c:	b480      	push	{r7}
 800739e:	b089      	sub	sp, #36	; 0x24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f003 0307 	and.w	r3, r3, #7
 80073ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	f1c3 0307 	rsb	r3, r3, #7
 80073b6:	2b04      	cmp	r3, #4
 80073b8:	bf28      	it	cs
 80073ba:	2304      	movcs	r3, #4
 80073bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	3304      	adds	r3, #4
 80073c2:	2b06      	cmp	r3, #6
 80073c4:	d902      	bls.n	80073cc <NVIC_EncodePriority+0x30>
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	3b03      	subs	r3, #3
 80073ca:	e000      	b.n	80073ce <NVIC_EncodePriority+0x32>
 80073cc:	2300      	movs	r3, #0
 80073ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	fa02 f303 	lsl.w	r3, r2, r3
 80073da:	43da      	mvns	r2, r3
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	401a      	ands	r2, r3
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80073e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	fa01 f303 	lsl.w	r3, r1, r3
 80073ee:	43d9      	mvns	r1, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073f4:	4313      	orrs	r3, r2
         );
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3724      	adds	r7, #36	; 0x24
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b082      	sub	sp, #8
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f7ff feee 	bl	80071ec <__NVIC_SetPriorityGrouping>
}
 8007410:	bf00      	nop
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	4603      	mov	r3, r0
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
 8007424:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007426:	f7ff ff05 	bl	8007234 <__NVIC_GetPriorityGrouping>
 800742a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	68b9      	ldr	r1, [r7, #8]
 8007430:	6978      	ldr	r0, [r7, #20]
 8007432:	f7ff ffb3 	bl	800739c <NVIC_EncodePriority>
 8007436:	4602      	mov	r2, r0
 8007438:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800743c:	4611      	mov	r1, r2
 800743e:	4618      	mov	r0, r3
 8007440:	f7ff ff82 	bl	8007348 <__NVIC_SetPriority>
}
 8007444:	bf00      	nop
 8007446:	3718      	adds	r7, #24
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	4603      	mov	r3, r0
 8007454:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800745a:	4618      	mov	r0, r3
 800745c:	f7ff fef8 	bl	8007250 <__NVIC_EnableIRQ>
}
 8007460:	bf00      	nop
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	4603      	mov	r3, r0
 8007470:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007476:	4618      	mov	r0, r3
 8007478:	f7ff ff08 	bl	800728c <__NVIC_DisableIRQ>
}
 800747c:	bf00      	nop
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	4603      	mov	r3, r0
 800748c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800748e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007492:	4618      	mov	r0, r3
 8007494:	f7ff ff1c 	bl	80072d0 <__NVIC_SetPendingIRQ>
}
 8007498:	bf00      	nop
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	4603      	mov	r3, r0
 80074a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80074aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7ff ff2c 	bl	800730c <__NVIC_ClearPendingIRQ>
}
 80074b4:	bf00      	nop
 80074b6:	3708      	adds	r7, #8
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074bc:	b480      	push	{r7}
 80074be:	b087      	sub	sp, #28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80074c6:	2300      	movs	r3, #0
 80074c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80074ca:	e14c      	b.n	8007766 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	2101      	movs	r1, #1
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	fa01 f303 	lsl.w	r3, r1, r3
 80074d8:	4013      	ands	r3, r2
 80074da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f000 813e 	beq.w	8007760 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d00b      	beq.n	8007504 <HAL_GPIO_Init+0x48>
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d007      	beq.n	8007504 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80074f8:	2b11      	cmp	r3, #17
 80074fa:	d003      	beq.n	8007504 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	2b12      	cmp	r3, #18
 8007502:	d130      	bne.n	8007566 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	005b      	lsls	r3, r3, #1
 800750e:	2203      	movs	r2, #3
 8007510:	fa02 f303 	lsl.w	r3, r2, r3
 8007514:	43db      	mvns	r3, r3
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	4013      	ands	r3, r2
 800751a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	68da      	ldr	r2, [r3, #12]
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	005b      	lsls	r3, r3, #1
 8007524:	fa02 f303 	lsl.w	r3, r2, r3
 8007528:	693a      	ldr	r2, [r7, #16]
 800752a:	4313      	orrs	r3, r2
 800752c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800753a:	2201      	movs	r2, #1
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	fa02 f303 	lsl.w	r3, r2, r3
 8007542:	43db      	mvns	r3, r3
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	4013      	ands	r3, r2
 8007548:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	091b      	lsrs	r3, r3, #4
 8007550:	f003 0201 	and.w	r2, r3, #1
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	fa02 f303 	lsl.w	r3, r2, r3
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	4313      	orrs	r3, r2
 800755e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	005b      	lsls	r3, r3, #1
 8007570:	2203      	movs	r2, #3
 8007572:	fa02 f303 	lsl.w	r3, r2, r3
 8007576:	43db      	mvns	r3, r3
 8007578:	693a      	ldr	r2, [r7, #16]
 800757a:	4013      	ands	r3, r2
 800757c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	689a      	ldr	r2, [r3, #8]
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	005b      	lsls	r3, r3, #1
 8007586:	fa02 f303 	lsl.w	r3, r2, r3
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	4313      	orrs	r3, r2
 800758e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	2b02      	cmp	r3, #2
 800759c:	d003      	beq.n	80075a6 <HAL_GPIO_Init+0xea>
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	2b12      	cmp	r3, #18
 80075a4:	d123      	bne.n	80075ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	08da      	lsrs	r2, r3, #3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	3208      	adds	r2, #8
 80075ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	f003 0307 	and.w	r3, r3, #7
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	220f      	movs	r2, #15
 80075be:	fa02 f303 	lsl.w	r3, r2, r3
 80075c2:	43db      	mvns	r3, r3
 80075c4:	693a      	ldr	r2, [r7, #16]
 80075c6:	4013      	ands	r3, r2
 80075c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	691a      	ldr	r2, [r3, #16]
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	f003 0307 	and.w	r3, r3, #7
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	fa02 f303 	lsl.w	r3, r2, r3
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	4313      	orrs	r3, r2
 80075de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	08da      	lsrs	r2, r3, #3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	3208      	adds	r2, #8
 80075e8:	6939      	ldr	r1, [r7, #16]
 80075ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	005b      	lsls	r3, r3, #1
 80075f8:	2203      	movs	r2, #3
 80075fa:	fa02 f303 	lsl.w	r3, r2, r3
 80075fe:	43db      	mvns	r3, r3
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	4013      	ands	r3, r2
 8007604:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	f003 0203 	and.w	r2, r3, #3
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	005b      	lsls	r3, r3, #1
 8007612:	fa02 f303 	lsl.w	r3, r2, r3
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	4313      	orrs	r3, r2
 800761a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 8098 	beq.w	8007760 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8007630:	4a54      	ldr	r2, [pc, #336]	; (8007784 <HAL_GPIO_Init+0x2c8>)
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	089b      	lsrs	r3, r3, #2
 8007636:	3302      	adds	r3, #2
 8007638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800763c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	f003 0303 	and.w	r3, r3, #3
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	220f      	movs	r2, #15
 8007648:	fa02 f303 	lsl.w	r3, r2, r3
 800764c:	43db      	mvns	r3, r3
 800764e:	693a      	ldr	r2, [r7, #16]
 8007650:	4013      	ands	r3, r2
 8007652:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800765a:	d019      	beq.n	8007690 <HAL_GPIO_Init+0x1d4>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a4a      	ldr	r2, [pc, #296]	; (8007788 <HAL_GPIO_Init+0x2cc>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d013      	beq.n	800768c <HAL_GPIO_Init+0x1d0>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a49      	ldr	r2, [pc, #292]	; (800778c <HAL_GPIO_Init+0x2d0>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d00d      	beq.n	8007688 <HAL_GPIO_Init+0x1cc>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a48      	ldr	r2, [pc, #288]	; (8007790 <HAL_GPIO_Init+0x2d4>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d007      	beq.n	8007684 <HAL_GPIO_Init+0x1c8>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a47      	ldr	r2, [pc, #284]	; (8007794 <HAL_GPIO_Init+0x2d8>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d101      	bne.n	8007680 <HAL_GPIO_Init+0x1c4>
 800767c:	2304      	movs	r3, #4
 800767e:	e008      	b.n	8007692 <HAL_GPIO_Init+0x1d6>
 8007680:	2307      	movs	r3, #7
 8007682:	e006      	b.n	8007692 <HAL_GPIO_Init+0x1d6>
 8007684:	2303      	movs	r3, #3
 8007686:	e004      	b.n	8007692 <HAL_GPIO_Init+0x1d6>
 8007688:	2302      	movs	r3, #2
 800768a:	e002      	b.n	8007692 <HAL_GPIO_Init+0x1d6>
 800768c:	2301      	movs	r3, #1
 800768e:	e000      	b.n	8007692 <HAL_GPIO_Init+0x1d6>
 8007690:	2300      	movs	r3, #0
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	f002 0203 	and.w	r2, r2, #3
 8007698:	0092      	lsls	r2, r2, #2
 800769a:	4093      	lsls	r3, r2
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	4313      	orrs	r3, r2
 80076a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80076a2:	4938      	ldr	r1, [pc, #224]	; (8007784 <HAL_GPIO_Init+0x2c8>)
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	089b      	lsrs	r3, r3, #2
 80076a8:	3302      	adds	r3, #2
 80076aa:	693a      	ldr	r2, [r7, #16]
 80076ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80076b0:	4b39      	ldr	r3, [pc, #228]	; (8007798 <HAL_GPIO_Init+0x2dc>)
 80076b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	43db      	mvns	r3, r3
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	4013      	ands	r3, r2
 80076c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d003      	beq.n	80076d6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80076d6:	4a30      	ldr	r2, [pc, #192]	; (8007798 <HAL_GPIO_Init+0x2dc>)
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80076de:	4b2e      	ldr	r3, [pc, #184]	; (8007798 <HAL_GPIO_Init+0x2dc>)
 80076e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	43db      	mvns	r3, r3
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	4013      	ands	r3, r2
 80076ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d003      	beq.n	8007704 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	4313      	orrs	r3, r2
 8007702:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007704:	4a24      	ldr	r2, [pc, #144]	; (8007798 <HAL_GPIO_Init+0x2dc>)
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800770c:	4b22      	ldr	r3, [pc, #136]	; (8007798 <HAL_GPIO_Init+0x2dc>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	43db      	mvns	r3, r3
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	4013      	ands	r3, r2
 800771a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007724:	2b00      	cmp	r3, #0
 8007726:	d003      	beq.n	8007730 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	4313      	orrs	r3, r2
 800772e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007730:	4a19      	ldr	r2, [pc, #100]	; (8007798 <HAL_GPIO_Init+0x2dc>)
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007736:	4b18      	ldr	r3, [pc, #96]	; (8007798 <HAL_GPIO_Init+0x2dc>)
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	43db      	mvns	r3, r3
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	4013      	ands	r3, r2
 8007744:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d003      	beq.n	800775a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	4313      	orrs	r3, r2
 8007758:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800775a:	4a0f      	ldr	r2, [pc, #60]	; (8007798 <HAL_GPIO_Init+0x2dc>)
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	3301      	adds	r3, #1
 8007764:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	fa22 f303 	lsr.w	r3, r2, r3
 8007770:	2b00      	cmp	r3, #0
 8007772:	f47f aeab 	bne.w	80074cc <HAL_GPIO_Init+0x10>
  }
}
 8007776:	bf00      	nop
 8007778:	371c      	adds	r7, #28
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	40010000 	.word	0x40010000
 8007788:	48000400 	.word	0x48000400
 800778c:	48000800 	.word	0x48000800
 8007790:	48000c00 	.word	0x48000c00
 8007794:	48001000 	.word	0x48001000
 8007798:	58000800 	.word	0x58000800

0800779c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	460b      	mov	r3, r1
 80077a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	691a      	ldr	r2, [r3, #16]
 80077ac:	887b      	ldrh	r3, [r7, #2]
 80077ae:	4013      	ands	r3, r2
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d002      	beq.n	80077ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80077b4:	2301      	movs	r3, #1
 80077b6:	73fb      	strb	r3, [r7, #15]
 80077b8:	e001      	b.n	80077be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80077ba:	2300      	movs	r3, #0
 80077bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80077be:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3714      	adds	r7, #20
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	460b      	mov	r3, r1
 80077d6:	807b      	strh	r3, [r7, #2]
 80077d8:	4613      	mov	r3, r2
 80077da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80077dc:	787b      	ldrb	r3, [r7, #1]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80077e2:	887a      	ldrh	r2, [r7, #2]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80077e8:	e002      	b.n	80077f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80077ea:	887a      	ldrh	r2, [r7, #2]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80077f0:	bf00      	nop
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	4603      	mov	r3, r0
 8007804:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007806:	4b08      	ldr	r3, [pc, #32]	; (8007828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007808:	68da      	ldr	r2, [r3, #12]
 800780a:	88fb      	ldrh	r3, [r7, #6]
 800780c:	4013      	ands	r3, r2
 800780e:	2b00      	cmp	r3, #0
 8007810:	d006      	beq.n	8007820 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007812:	4a05      	ldr	r2, [pc, #20]	; (8007828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007814:	88fb      	ldrh	r3, [r7, #6]
 8007816:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007818:	88fb      	ldrh	r3, [r7, #6]
 800781a:	4618      	mov	r0, r3
 800781c:	f7fc fe58 	bl	80044d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8007820:	bf00      	nop
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	58000800 	.word	0x58000800

0800782c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8007832:	4b0a      	ldr	r3, [pc, #40]	; (800785c <HAL_HSEM_IRQHandler+0x30>)
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8007838:	4b08      	ldr	r3, [pc, #32]	; (800785c <HAL_HSEM_IRQHandler+0x30>)
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	43db      	mvns	r3, r3
 8007840:	4906      	ldr	r1, [pc, #24]	; (800785c <HAL_HSEM_IRQHandler+0x30>)
 8007842:	4013      	ands	r3, r2
 8007844:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8007846:	4a05      	ldr	r2, [pc, #20]	; (800785c <HAL_HSEM_IRQHandler+0x30>)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f807 	bl	8007860 <HAL_HSEM_FreeCallback>
}
 8007852:	bf00      	nop
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	58001500 	.word	0x58001500

08007860 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8007868:	bf00      	nop
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d101      	bne.n	8007886 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e081      	b.n	800798a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b00      	cmp	r3, #0
 8007890:	d106      	bne.n	80078a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7fe fe60 	bl	8006560 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2224      	movs	r2, #36	; 0x24
 80078a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f022 0201 	bic.w	r2, r2, #1
 80078b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80078c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	689a      	ldr	r2, [r3, #8]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80078d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d107      	bne.n	80078ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	689a      	ldr	r2, [r3, #8]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078ea:	609a      	str	r2, [r3, #8]
 80078ec:	e006      	b.n	80078fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	689a      	ldr	r2, [r3, #8]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80078fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	2b02      	cmp	r3, #2
 8007902:	d104      	bne.n	800790e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800790c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	6812      	ldr	r2, [r2, #0]
 8007918:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800791c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007920:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68da      	ldr	r2, [r3, #12]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007930:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	691a      	ldr	r2, [r3, #16]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	ea42 0103 	orr.w	r1, r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	021a      	lsls	r2, r3, #8
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	430a      	orrs	r2, r1
 800794a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	69d9      	ldr	r1, [r3, #28]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a1a      	ldr	r2, [r3, #32]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	430a      	orrs	r2, r1
 800795a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f042 0201 	orr.w	r2, r2, #1
 800796a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2220      	movs	r2, #32
 8007976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
	...

08007994 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b088      	sub	sp, #32
 8007998:	af02      	add	r7, sp, #8
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	607a      	str	r2, [r7, #4]
 800799e:	461a      	mov	r2, r3
 80079a0:	460b      	mov	r3, r1
 80079a2:	817b      	strh	r3, [r7, #10]
 80079a4:	4613      	mov	r3, r2
 80079a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	2b20      	cmp	r3, #32
 80079b2:	f040 80da 	bne.w	8007b6a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d101      	bne.n	80079c4 <HAL_I2C_Master_Transmit+0x30>
 80079c0:	2302      	movs	r3, #2
 80079c2:	e0d3      	b.n	8007b6c <HAL_I2C_Master_Transmit+0x1d8>
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80079cc:	f7ff fbde 	bl	800718c <HAL_GetTick>
 80079d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	2319      	movs	r3, #25
 80079d8:	2201      	movs	r2, #1
 80079da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f000 fcbc 	bl	800835c <I2C_WaitOnFlagUntilTimeout>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e0be      	b.n	8007b6c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2221      	movs	r2, #33	; 0x21
 80079f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2210      	movs	r2, #16
 80079fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	893a      	ldrh	r2, [r7, #8]
 8007a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	2bff      	cmp	r3, #255	; 0xff
 8007a1e:	d90e      	bls.n	8007a3e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	22ff      	movs	r2, #255	; 0xff
 8007a24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a2a:	b2da      	uxtb	r2, r3
 8007a2c:	8979      	ldrh	r1, [r7, #10]
 8007a2e:	4b51      	ldr	r3, [pc, #324]	; (8007b74 <HAL_I2C_Master_Transmit+0x1e0>)
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f000 fe1e 	bl	8008678 <I2C_TransferConfig>
 8007a3c:	e06c      	b.n	8007b18 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	8979      	ldrh	r1, [r7, #10]
 8007a50:	4b48      	ldr	r3, [pc, #288]	; (8007b74 <HAL_I2C_Master_Transmit+0x1e0>)
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f000 fe0d 	bl	8008678 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8007a5e:	e05b      	b.n	8007b18 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	6a39      	ldr	r1, [r7, #32]
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f000 fcb9 	bl	80083dc <I2C_WaitOnTXISFlagUntilTimeout>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d001      	beq.n	8007a74 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e07b      	b.n	8007b6c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a78:	781a      	ldrb	r2, [r3, #0]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a84:	1c5a      	adds	r2, r3, #1
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	3b01      	subs	r3, #1
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d034      	beq.n	8007b18 <HAL_I2C_Master_Transmit+0x184>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d130      	bne.n	8007b18 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	6a3b      	ldr	r3, [r7, #32]
 8007abc:	2200      	movs	r2, #0
 8007abe:	2180      	movs	r1, #128	; 0x80
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f000 fc4b 	bl	800835c <I2C_WaitOnFlagUntilTimeout>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d001      	beq.n	8007ad0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e04d      	b.n	8007b6c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	2bff      	cmp	r3, #255	; 0xff
 8007ad8:	d90e      	bls.n	8007af8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	22ff      	movs	r2, #255	; 0xff
 8007ade:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	8979      	ldrh	r1, [r7, #10]
 8007ae8:	2300      	movs	r3, #0
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f000 fdc1 	bl	8008678 <I2C_TransferConfig>
 8007af6:	e00f      	b.n	8007b18 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	8979      	ldrh	r1, [r7, #10]
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f000 fdb0 	bl	8008678 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d19e      	bne.n	8007a60 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	6a39      	ldr	r1, [r7, #32]
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f000 fc98 	bl	800845c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d001      	beq.n	8007b36 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e01a      	b.n	8007b6c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	6859      	ldr	r1, [r3, #4]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	4b0b      	ldr	r3, [pc, #44]	; (8007b78 <HAL_I2C_Master_Transmit+0x1e4>)
 8007b4a:	400b      	ands	r3, r1
 8007b4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2220      	movs	r2, #32
 8007b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007b66:	2300      	movs	r3, #0
 8007b68:	e000      	b.n	8007b6c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007b6a:	2302      	movs	r3, #2
  }
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3718      	adds	r7, #24
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	80002000 	.word	0x80002000
 8007b78:	fe00e800 	.word	0xfe00e800

08007b7c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b088      	sub	sp, #32
 8007b80:	af02      	add	r7, sp, #8
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	607a      	str	r2, [r7, #4]
 8007b86:	461a      	mov	r2, r3
 8007b88:	460b      	mov	r3, r1
 8007b8a:	817b      	strh	r3, [r7, #10]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b20      	cmp	r3, #32
 8007b9a:	f040 80db 	bne.w	8007d54 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d101      	bne.n	8007bac <HAL_I2C_Master_Receive+0x30>
 8007ba8:	2302      	movs	r3, #2
 8007baa:	e0d4      	b.n	8007d56 <HAL_I2C_Master_Receive+0x1da>
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007bb4:	f7ff faea 	bl	800718c <HAL_GetTick>
 8007bb8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	2319      	movs	r3, #25
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f000 fbc8 	bl	800835c <I2C_WaitOnFlagUntilTimeout>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d001      	beq.n	8007bd6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e0bf      	b.n	8007d56 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2222      	movs	r2, #34	; 0x22
 8007bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2210      	movs	r2, #16
 8007be2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	893a      	ldrh	r2, [r7, #8]
 8007bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	2bff      	cmp	r3, #255	; 0xff
 8007c06:	d90e      	bls.n	8007c26 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	22ff      	movs	r2, #255	; 0xff
 8007c0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c12:	b2da      	uxtb	r2, r3
 8007c14:	8979      	ldrh	r1, [r7, #10]
 8007c16:	4b52      	ldr	r3, [pc, #328]	; (8007d60 <HAL_I2C_Master_Receive+0x1e4>)
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f000 fd2a 	bl	8008678 <I2C_TransferConfig>
 8007c24:	e06d      	b.n	8007d02 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	8979      	ldrh	r1, [r7, #10]
 8007c38:	4b49      	ldr	r3, [pc, #292]	; (8007d60 <HAL_I2C_Master_Receive+0x1e4>)
 8007c3a:	9300      	str	r3, [sp, #0]
 8007c3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f000 fd19 	bl	8008678 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8007c46:	e05c      	b.n	8007d02 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	6a39      	ldr	r1, [r7, #32]
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f000 fc41 	bl	80084d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d001      	beq.n	8007c5c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e07c      	b.n	8007d56 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c66:	b2d2      	uxtb	r2, r2
 8007c68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6e:	1c5a      	adds	r2, r3, #1
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	3b01      	subs	r3, #1
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d034      	beq.n	8007d02 <HAL_I2C_Master_Receive+0x186>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d130      	bne.n	8007d02 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	9300      	str	r3, [sp, #0]
 8007ca4:	6a3b      	ldr	r3, [r7, #32]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2180      	movs	r1, #128	; 0x80
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f000 fb56 	bl	800835c <I2C_WaitOnFlagUntilTimeout>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d001      	beq.n	8007cba <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e04d      	b.n	8007d56 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	2bff      	cmp	r3, #255	; 0xff
 8007cc2:	d90e      	bls.n	8007ce2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	22ff      	movs	r2, #255	; 0xff
 8007cc8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cce:	b2da      	uxtb	r2, r3
 8007cd0:	8979      	ldrh	r1, [r7, #10]
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	9300      	str	r3, [sp, #0]
 8007cd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f000 fccc 	bl	8008678 <I2C_TransferConfig>
 8007ce0:	e00f      	b.n	8007d02 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cf0:	b2da      	uxtb	r2, r3
 8007cf2:	8979      	ldrh	r1, [r7, #10]
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 fcbb 	bl	8008678 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d19d      	bne.n	8007c48 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	6a39      	ldr	r1, [r7, #32]
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f000 fba3 	bl	800845c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d001      	beq.n	8007d20 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e01a      	b.n	8007d56 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2220      	movs	r2, #32
 8007d26:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	6859      	ldr	r1, [r3, #4]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	4b0c      	ldr	r3, [pc, #48]	; (8007d64 <HAL_I2C_Master_Receive+0x1e8>)
 8007d34:	400b      	ands	r3, r1
 8007d36:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2220      	movs	r2, #32
 8007d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d50:	2300      	movs	r3, #0
 8007d52:	e000      	b.n	8007d56 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007d54:	2302      	movs	r3, #2
  }
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3718      	adds	r7, #24
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	80002400 	.word	0x80002400
 8007d64:	fe00e800 	.word	0xfe00e800

08007d68 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b088      	sub	sp, #32
 8007d6c:	af02      	add	r7, sp, #8
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	4608      	mov	r0, r1
 8007d72:	4611      	mov	r1, r2
 8007d74:	461a      	mov	r2, r3
 8007d76:	4603      	mov	r3, r0
 8007d78:	817b      	strh	r3, [r7, #10]
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	813b      	strh	r3, [r7, #8]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b20      	cmp	r3, #32
 8007d8c:	f040 80f9 	bne.w	8007f82 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d90:	6a3b      	ldr	r3, [r7, #32]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d002      	beq.n	8007d9c <HAL_I2C_Mem_Write+0x34>
 8007d96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d105      	bne.n	8007da8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007da2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e0ed      	b.n	8007f84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d101      	bne.n	8007db6 <HAL_I2C_Mem_Write+0x4e>
 8007db2:	2302      	movs	r3, #2
 8007db4:	e0e6      	b.n	8007f84 <HAL_I2C_Mem_Write+0x21c>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007dbe:	f7ff f9e5 	bl	800718c <HAL_GetTick>
 8007dc2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	2319      	movs	r3, #25
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f000 fac3 	bl	800835c <I2C_WaitOnFlagUntilTimeout>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d001      	beq.n	8007de0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e0d1      	b.n	8007f84 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2221      	movs	r2, #33	; 0x21
 8007de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2240      	movs	r2, #64	; 0x40
 8007dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6a3a      	ldr	r2, [r7, #32]
 8007dfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007e00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007e08:	88f8      	ldrh	r0, [r7, #6]
 8007e0a:	893a      	ldrh	r2, [r7, #8]
 8007e0c:	8979      	ldrh	r1, [r7, #10]
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	9301      	str	r3, [sp, #4]
 8007e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e14:	9300      	str	r3, [sp, #0]
 8007e16:	4603      	mov	r3, r0
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f000 f9d3 	bl	80081c4 <I2C_RequestMemoryWrite>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d005      	beq.n	8007e30 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e0a9      	b.n	8007f84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	2bff      	cmp	r3, #255	; 0xff
 8007e38:	d90e      	bls.n	8007e58 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	22ff      	movs	r2, #255	; 0xff
 8007e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e44:	b2da      	uxtb	r2, r3
 8007e46:	8979      	ldrh	r1, [r7, #10]
 8007e48:	2300      	movs	r3, #0
 8007e4a:	9300      	str	r3, [sp, #0]
 8007e4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f000 fc11 	bl	8008678 <I2C_TransferConfig>
 8007e56:	e00f      	b.n	8007e78 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e66:	b2da      	uxtb	r2, r3
 8007e68:	8979      	ldrh	r1, [r7, #10]
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	9300      	str	r3, [sp, #0]
 8007e6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f000 fc00 	bl	8008678 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f000 faad 	bl	80083dc <I2C_WaitOnTXISFlagUntilTimeout>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e07b      	b.n	8007f84 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e90:	781a      	ldrb	r2, [r3, #0]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9c:	1c5a      	adds	r2, r3, #1
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d034      	beq.n	8007f30 <HAL_I2C_Mem_Write+0x1c8>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d130      	bne.n	8007f30 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	9300      	str	r3, [sp, #0]
 8007ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	2180      	movs	r1, #128	; 0x80
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f000 fa3f 	bl	800835c <I2C_WaitOnFlagUntilTimeout>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d001      	beq.n	8007ee8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e04d      	b.n	8007f84 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	2bff      	cmp	r3, #255	; 0xff
 8007ef0:	d90e      	bls.n	8007f10 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	22ff      	movs	r2, #255	; 0xff
 8007ef6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	8979      	ldrh	r1, [r7, #10]
 8007f00:	2300      	movs	r3, #0
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f000 fbb5 	bl	8008678 <I2C_TransferConfig>
 8007f0e:	e00f      	b.n	8007f30 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f1e:	b2da      	uxtb	r2, r3
 8007f20:	8979      	ldrh	r1, [r7, #10]
 8007f22:	2300      	movs	r3, #0
 8007f24:	9300      	str	r3, [sp, #0]
 8007f26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f000 fba4 	bl	8008678 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d19e      	bne.n	8007e78 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f000 fa8c 	bl	800845c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e01a      	b.n	8007f84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2220      	movs	r2, #32
 8007f54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	6859      	ldr	r1, [r3, #4]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	4b0a      	ldr	r3, [pc, #40]	; (8007f8c <HAL_I2C_Mem_Write+0x224>)
 8007f62:	400b      	ands	r3, r1
 8007f64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2220      	movs	r2, #32
 8007f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	e000      	b.n	8007f84 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007f82:	2302      	movs	r3, #2
  }
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3718      	adds	r7, #24
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	fe00e800 	.word	0xfe00e800

08007f90 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b088      	sub	sp, #32
 8007f94:	af02      	add	r7, sp, #8
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	4608      	mov	r0, r1
 8007f9a:	4611      	mov	r1, r2
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	817b      	strh	r3, [r7, #10]
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	813b      	strh	r3, [r7, #8]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b20      	cmp	r3, #32
 8007fb4:	f040 80fd 	bne.w	80081b2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fb8:	6a3b      	ldr	r3, [r7, #32]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d002      	beq.n	8007fc4 <HAL_I2C_Mem_Read+0x34>
 8007fbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d105      	bne.n	8007fd0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e0f1      	b.n	80081b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d101      	bne.n	8007fde <HAL_I2C_Mem_Read+0x4e>
 8007fda:	2302      	movs	r3, #2
 8007fdc:	e0ea      	b.n	80081b4 <HAL_I2C_Mem_Read+0x224>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007fe6:	f7ff f8d1 	bl	800718c <HAL_GetTick>
 8007fea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	2319      	movs	r3, #25
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f000 f9af 	bl	800835c <I2C_WaitOnFlagUntilTimeout>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d001      	beq.n	8008008 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e0d5      	b.n	80081b4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2222      	movs	r2, #34	; 0x22
 800800c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2240      	movs	r2, #64	; 0x40
 8008014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2200      	movs	r2, #0
 800801c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6a3a      	ldr	r2, [r7, #32]
 8008022:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008028:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008030:	88f8      	ldrh	r0, [r7, #6]
 8008032:	893a      	ldrh	r2, [r7, #8]
 8008034:	8979      	ldrh	r1, [r7, #10]
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	9301      	str	r3, [sp, #4]
 800803a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	4603      	mov	r3, r0
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f000 f913 	bl	800826c <I2C_RequestMemoryRead>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d005      	beq.n	8008058 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	e0ad      	b.n	80081b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800805c:	b29b      	uxth	r3, r3
 800805e:	2bff      	cmp	r3, #255	; 0xff
 8008060:	d90e      	bls.n	8008080 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	22ff      	movs	r2, #255	; 0xff
 8008066:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800806c:	b2da      	uxtb	r2, r3
 800806e:	8979      	ldrh	r1, [r7, #10]
 8008070:	4b52      	ldr	r3, [pc, #328]	; (80081bc <HAL_I2C_Mem_Read+0x22c>)
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f000 fafd 	bl	8008678 <I2C_TransferConfig>
 800807e:	e00f      	b.n	80080a0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008084:	b29a      	uxth	r2, r3
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800808e:	b2da      	uxtb	r2, r3
 8008090:	8979      	ldrh	r1, [r7, #10]
 8008092:	4b4a      	ldr	r3, [pc, #296]	; (80081bc <HAL_I2C_Mem_Read+0x22c>)
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f000 faec 	bl	8008678 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	9300      	str	r3, [sp, #0]
 80080a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a6:	2200      	movs	r2, #0
 80080a8:	2104      	movs	r1, #4
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f000 f956 	bl	800835c <I2C_WaitOnFlagUntilTimeout>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	e07c      	b.n	80081b4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c4:	b2d2      	uxtb	r2, r2
 80080c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080cc:	1c5a      	adds	r2, r3, #1
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080d6:	3b01      	subs	r3, #1
 80080d8:	b29a      	uxth	r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	3b01      	subs	r3, #1
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d034      	beq.n	8008160 <HAL_I2C_Mem_Read+0x1d0>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d130      	bne.n	8008160 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008104:	2200      	movs	r2, #0
 8008106:	2180      	movs	r1, #128	; 0x80
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f000 f927 	bl	800835c <I2C_WaitOnFlagUntilTimeout>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d001      	beq.n	8008118 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e04d      	b.n	80081b4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800811c:	b29b      	uxth	r3, r3
 800811e:	2bff      	cmp	r3, #255	; 0xff
 8008120:	d90e      	bls.n	8008140 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	22ff      	movs	r2, #255	; 0xff
 8008126:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800812c:	b2da      	uxtb	r2, r3
 800812e:	8979      	ldrh	r1, [r7, #10]
 8008130:	2300      	movs	r3, #0
 8008132:	9300      	str	r3, [sp, #0]
 8008134:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f000 fa9d 	bl	8008678 <I2C_TransferConfig>
 800813e:	e00f      	b.n	8008160 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008144:	b29a      	uxth	r2, r3
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800814e:	b2da      	uxtb	r2, r3
 8008150:	8979      	ldrh	r1, [r7, #10]
 8008152:	2300      	movs	r3, #0
 8008154:	9300      	str	r3, [sp, #0]
 8008156:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f000 fa8c 	bl	8008678 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008164:	b29b      	uxth	r3, r3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d19a      	bne.n	80080a0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800816a:	697a      	ldr	r2, [r7, #20]
 800816c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f000 f974 	bl	800845c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d001      	beq.n	800817e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e01a      	b.n	80081b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2220      	movs	r2, #32
 8008184:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	6859      	ldr	r1, [r3, #4]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	4b0b      	ldr	r3, [pc, #44]	; (80081c0 <HAL_I2C_Mem_Read+0x230>)
 8008192:	400b      	ands	r3, r1
 8008194:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2220      	movs	r2, #32
 800819a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	e000      	b.n	80081b4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80081b2:	2302      	movs	r3, #2
  }
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3718      	adds	r7, #24
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	80002400 	.word	0x80002400
 80081c0:	fe00e800 	.word	0xfe00e800

080081c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b086      	sub	sp, #24
 80081c8:	af02      	add	r7, sp, #8
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	4608      	mov	r0, r1
 80081ce:	4611      	mov	r1, r2
 80081d0:	461a      	mov	r2, r3
 80081d2:	4603      	mov	r3, r0
 80081d4:	817b      	strh	r3, [r7, #10]
 80081d6:	460b      	mov	r3, r1
 80081d8:	813b      	strh	r3, [r7, #8]
 80081da:	4613      	mov	r3, r2
 80081dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80081de:	88fb      	ldrh	r3, [r7, #6]
 80081e0:	b2da      	uxtb	r2, r3
 80081e2:	8979      	ldrh	r1, [r7, #10]
 80081e4:	4b20      	ldr	r3, [pc, #128]	; (8008268 <I2C_RequestMemoryWrite+0xa4>)
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f000 fa43 	bl	8008678 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081f2:	69fa      	ldr	r2, [r7, #28]
 80081f4:	69b9      	ldr	r1, [r7, #24]
 80081f6:	68f8      	ldr	r0, [r7, #12]
 80081f8:	f000 f8f0 	bl	80083dc <I2C_WaitOnTXISFlagUntilTimeout>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d001      	beq.n	8008206 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e02c      	b.n	8008260 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008206:	88fb      	ldrh	r3, [r7, #6]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d105      	bne.n	8008218 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800820c:	893b      	ldrh	r3, [r7, #8]
 800820e:	b2da      	uxtb	r2, r3
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	629a      	str	r2, [r3, #40]	; 0x28
 8008216:	e015      	b.n	8008244 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008218:	893b      	ldrh	r3, [r7, #8]
 800821a:	0a1b      	lsrs	r3, r3, #8
 800821c:	b29b      	uxth	r3, r3
 800821e:	b2da      	uxtb	r2, r3
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008226:	69fa      	ldr	r2, [r7, #28]
 8008228:	69b9      	ldr	r1, [r7, #24]
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f000 f8d6 	bl	80083dc <I2C_WaitOnTXISFlagUntilTimeout>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d001      	beq.n	800823a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e012      	b.n	8008260 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800823a:	893b      	ldrh	r3, [r7, #8]
 800823c:	b2da      	uxtb	r2, r3
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	9300      	str	r3, [sp, #0]
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	2200      	movs	r2, #0
 800824c:	2180      	movs	r1, #128	; 0x80
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f000 f884 	bl	800835c <I2C_WaitOnFlagUntilTimeout>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d001      	beq.n	800825e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e000      	b.n	8008260 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	80002000 	.word	0x80002000

0800826c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	af02      	add	r7, sp, #8
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	4608      	mov	r0, r1
 8008276:	4611      	mov	r1, r2
 8008278:	461a      	mov	r2, r3
 800827a:	4603      	mov	r3, r0
 800827c:	817b      	strh	r3, [r7, #10]
 800827e:	460b      	mov	r3, r1
 8008280:	813b      	strh	r3, [r7, #8]
 8008282:	4613      	mov	r3, r2
 8008284:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008286:	88fb      	ldrh	r3, [r7, #6]
 8008288:	b2da      	uxtb	r2, r3
 800828a:	8979      	ldrh	r1, [r7, #10]
 800828c:	4b20      	ldr	r3, [pc, #128]	; (8008310 <I2C_RequestMemoryRead+0xa4>)
 800828e:	9300      	str	r3, [sp, #0]
 8008290:	2300      	movs	r3, #0
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f000 f9f0 	bl	8008678 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008298:	69fa      	ldr	r2, [r7, #28]
 800829a:	69b9      	ldr	r1, [r7, #24]
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f000 f89d 	bl	80083dc <I2C_WaitOnTXISFlagUntilTimeout>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d001      	beq.n	80082ac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e02c      	b.n	8008306 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80082ac:	88fb      	ldrh	r3, [r7, #6]
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d105      	bne.n	80082be <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80082b2:	893b      	ldrh	r3, [r7, #8]
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	629a      	str	r2, [r3, #40]	; 0x28
 80082bc:	e015      	b.n	80082ea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80082be:	893b      	ldrh	r3, [r7, #8]
 80082c0:	0a1b      	lsrs	r3, r3, #8
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082cc:	69fa      	ldr	r2, [r7, #28]
 80082ce:	69b9      	ldr	r1, [r7, #24]
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f000 f883 	bl	80083dc <I2C_WaitOnTXISFlagUntilTimeout>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d001      	beq.n	80082e0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	e012      	b.n	8008306 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80082e0:	893b      	ldrh	r3, [r7, #8]
 80082e2:	b2da      	uxtb	r2, r3
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	2200      	movs	r2, #0
 80082f2:	2140      	movs	r1, #64	; 0x40
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	f000 f831 	bl	800835c <I2C_WaitOnFlagUntilTimeout>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d001      	beq.n	8008304 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	e000      	b.n	8008306 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	80002000 	.word	0x80002000

08008314 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	f003 0302 	and.w	r3, r3, #2
 8008326:	2b02      	cmp	r3, #2
 8008328:	d103      	bne.n	8008332 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	2200      	movs	r2, #0
 8008330:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	699b      	ldr	r3, [r3, #24]
 8008338:	f003 0301 	and.w	r3, r3, #1
 800833c:	2b01      	cmp	r3, #1
 800833e:	d007      	beq.n	8008350 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	699a      	ldr	r2, [r3, #24]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f042 0201 	orr.w	r2, r2, #1
 800834e:	619a      	str	r2, [r3, #24]
  }
}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	603b      	str	r3, [r7, #0]
 8008368:	4613      	mov	r3, r2
 800836a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800836c:	e022      	b.n	80083b4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008374:	d01e      	beq.n	80083b4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008376:	f7fe ff09 	bl	800718c <HAL_GetTick>
 800837a:	4602      	mov	r2, r0
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	1ad3      	subs	r3, r2, r3
 8008380:	683a      	ldr	r2, [r7, #0]
 8008382:	429a      	cmp	r2, r3
 8008384:	d302      	bcc.n	800838c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d113      	bne.n	80083b4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008390:	f043 0220 	orr.w	r2, r3, #32
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2220      	movs	r2, #32
 800839c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e00f      	b.n	80083d4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	699a      	ldr	r2, [r3, #24]
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	4013      	ands	r3, r2
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	bf0c      	ite	eq
 80083c4:	2301      	moveq	r3, #1
 80083c6:	2300      	movne	r3, #0
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	461a      	mov	r2, r3
 80083cc:	79fb      	ldrb	r3, [r7, #7]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d0cd      	beq.n	800836e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80083e8:	e02c      	b.n	8008444 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	68b9      	ldr	r1, [r7, #8]
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f000 f8dc 	bl	80085ac <I2C_IsAcknowledgeFailed>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d001      	beq.n	80083fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e02a      	b.n	8008454 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008404:	d01e      	beq.n	8008444 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008406:	f7fe fec1 	bl	800718c <HAL_GetTick>
 800840a:	4602      	mov	r2, r0
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	68ba      	ldr	r2, [r7, #8]
 8008412:	429a      	cmp	r2, r3
 8008414:	d302      	bcc.n	800841c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d113      	bne.n	8008444 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008420:	f043 0220 	orr.w	r2, r3, #32
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2220      	movs	r2, #32
 800842c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	e007      	b.n	8008454 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	699b      	ldr	r3, [r3, #24]
 800844a:	f003 0302 	and.w	r3, r3, #2
 800844e:	2b02      	cmp	r3, #2
 8008450:	d1cb      	bne.n	80083ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008468:	e028      	b.n	80084bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	68b9      	ldr	r1, [r7, #8]
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	f000 f89c 	bl	80085ac <I2C_IsAcknowledgeFailed>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	e026      	b.n	80084cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800847e:	f7fe fe85 	bl	800718c <HAL_GetTick>
 8008482:	4602      	mov	r2, r0
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	1ad3      	subs	r3, r2, r3
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	429a      	cmp	r2, r3
 800848c:	d302      	bcc.n	8008494 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d113      	bne.n	80084bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008498:	f043 0220 	orr.w	r2, r3, #32
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2220      	movs	r2, #32
 80084a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e007      	b.n	80084cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	699b      	ldr	r3, [r3, #24]
 80084c2:	f003 0320 	and.w	r3, r3, #32
 80084c6:	2b20      	cmp	r3, #32
 80084c8:	d1cf      	bne.n	800846a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80084e0:	e055      	b.n	800858e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	68b9      	ldr	r1, [r7, #8]
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f000 f860 	bl	80085ac <I2C_IsAcknowledgeFailed>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d001      	beq.n	80084f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e053      	b.n	800859e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	699b      	ldr	r3, [r3, #24]
 80084fc:	f003 0320 	and.w	r3, r3, #32
 8008500:	2b20      	cmp	r3, #32
 8008502:	d129      	bne.n	8008558 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	699b      	ldr	r3, [r3, #24]
 800850a:	f003 0304 	and.w	r3, r3, #4
 800850e:	2b04      	cmp	r3, #4
 8008510:	d105      	bne.n	800851e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008516:	2b00      	cmp	r3, #0
 8008518:	d001      	beq.n	800851e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800851a:	2300      	movs	r3, #0
 800851c:	e03f      	b.n	800859e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2220      	movs	r2, #32
 8008524:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	6859      	ldr	r1, [r3, #4]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	4b1d      	ldr	r3, [pc, #116]	; (80085a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8008532:	400b      	ands	r3, r1
 8008534:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2200      	movs	r2, #0
 800853a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2220      	movs	r2, #32
 8008540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2200      	movs	r2, #0
 8008548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	e022      	b.n	800859e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008558:	f7fe fe18 	bl	800718c <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	68ba      	ldr	r2, [r7, #8]
 8008564:	429a      	cmp	r2, r3
 8008566:	d302      	bcc.n	800856e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10f      	bne.n	800858e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008572:	f043 0220 	orr.w	r2, r3, #32
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2220      	movs	r2, #32
 800857e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e007      	b.n	800859e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	699b      	ldr	r3, [r3, #24]
 8008594:	f003 0304 	and.w	r3, r3, #4
 8008598:	2b04      	cmp	r3, #4
 800859a:	d1a2      	bne.n	80084e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	fe00e800 	.word	0xfe00e800

080085ac <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	f003 0310 	and.w	r3, r3, #16
 80085c2:	2b10      	cmp	r3, #16
 80085c4:	d151      	bne.n	800866a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80085c6:	e022      	b.n	800860e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085ce:	d01e      	beq.n	800860e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085d0:	f7fe fddc 	bl	800718c <HAL_GetTick>
 80085d4:	4602      	mov	r2, r0
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	1ad3      	subs	r3, r2, r3
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d302      	bcc.n	80085e6 <I2C_IsAcknowledgeFailed+0x3a>
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d113      	bne.n	800860e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ea:	f043 0220 	orr.w	r2, r3, #32
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2220      	movs	r2, #32
 80085f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e02e      	b.n	800866c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	699b      	ldr	r3, [r3, #24]
 8008614:	f003 0320 	and.w	r3, r3, #32
 8008618:	2b20      	cmp	r3, #32
 800861a:	d1d5      	bne.n	80085c8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2210      	movs	r2, #16
 8008622:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2220      	movs	r2, #32
 800862a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f7ff fe71 	bl	8008314 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	6859      	ldr	r1, [r3, #4]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	4b0d      	ldr	r3, [pc, #52]	; (8008674 <I2C_IsAcknowledgeFailed+0xc8>)
 800863e:	400b      	ands	r3, r1
 8008640:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008646:	f043 0204 	orr.w	r2, r3, #4
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2220      	movs	r2, #32
 8008652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e000      	b.n	800866c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	fe00e800 	.word	0xfe00e800

08008678 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	607b      	str	r3, [r7, #4]
 8008682:	460b      	mov	r3, r1
 8008684:	817b      	strh	r3, [r7, #10]
 8008686:	4613      	mov	r3, r2
 8008688:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	685a      	ldr	r2, [r3, #4]
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	0d5b      	lsrs	r3, r3, #21
 8008694:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008698:	4b0d      	ldr	r3, [pc, #52]	; (80086d0 <I2C_TransferConfig+0x58>)
 800869a:	430b      	orrs	r3, r1
 800869c:	43db      	mvns	r3, r3
 800869e:	ea02 0103 	and.w	r1, r2, r3
 80086a2:	897b      	ldrh	r3, [r7, #10]
 80086a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80086a8:	7a7b      	ldrb	r3, [r7, #9]
 80086aa:	041b      	lsls	r3, r3, #16
 80086ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80086b0:	431a      	orrs	r2, r3
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	431a      	orrs	r2, r3
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	431a      	orrs	r2, r3
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	430a      	orrs	r2, r1
 80086c0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80086c2:	bf00      	nop
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	03ff63ff 	.word	0x03ff63ff

080086d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b20      	cmp	r3, #32
 80086e8:	d138      	bne.n	800875c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d101      	bne.n	80086f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80086f4:	2302      	movs	r3, #2
 80086f6:	e032      	b.n	800875e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2224      	movs	r2, #36	; 0x24
 8008704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f022 0201 	bic.w	r2, r2, #1
 8008716:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008726:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6819      	ldr	r1, [r3, #0]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	430a      	orrs	r2, r1
 8008736:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f042 0201 	orr.w	r2, r2, #1
 8008746:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2220      	movs	r2, #32
 800874c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008758:	2300      	movs	r3, #0
 800875a:	e000      	b.n	800875e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800875c:	2302      	movs	r3, #2
  }
}
 800875e:	4618      	mov	r0, r3
 8008760:	370c      	adds	r7, #12
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr

0800876a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800876a:	b480      	push	{r7}
 800876c:	b085      	sub	sp, #20
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
 8008772:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800877a:	b2db      	uxtb	r3, r3
 800877c:	2b20      	cmp	r3, #32
 800877e:	d139      	bne.n	80087f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008786:	2b01      	cmp	r3, #1
 8008788:	d101      	bne.n	800878e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800878a:	2302      	movs	r3, #2
 800878c:	e033      	b.n	80087f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2224      	movs	r2, #36	; 0x24
 800879a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f022 0201 	bic.w	r2, r2, #1
 80087ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80087bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	021b      	lsls	r3, r3, #8
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f042 0201 	orr.w	r2, r2, #1
 80087de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2220      	movs	r2, #32
 80087e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80087f0:	2300      	movs	r3, #0
 80087f2:	e000      	b.n	80087f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80087f4:	2302      	movs	r3, #2
  }
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3714      	adds	r7, #20
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
	...

08008804 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008804:	b480      	push	{r7}
 8008806:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008808:	4b05      	ldr	r3, [pc, #20]	; (8008820 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a04      	ldr	r2, [pc, #16]	; (8008820 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800880e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008812:	6013      	str	r3, [r2, #0]
}
 8008814:	bf00      	nop
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	58000400 	.word	0x58000400

08008824 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008824:	b480      	push	{r7}
 8008826:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008828:	4b04      	ldr	r3, [pc, #16]	; (800883c <HAL_PWREx_GetVoltageRange+0x18>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8008830:	4618      	mov	r0, r3
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	58000400 	.word	0x58000400

08008840 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8008840:	b480      	push	{r7}
 8008842:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8008844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800884e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008852:	d101      	bne.n	8008858 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8008854:	2301      	movs	r3, #1
 8008856:	e000      	b.n	800885a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <LL_RCC_HSE_Enable>:
{
 8008864:	b480      	push	{r7}
 8008866:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8008868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008876:	6013      	str	r3, [r2, #0]
}
 8008878:	bf00      	nop
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr

08008882 <LL_RCC_HSE_Disable>:
{
 8008882:	b480      	push	{r7}
 8008884:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8008886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008894:	6013      	str	r3, [r2, #0]
}
 8008896:	bf00      	nop
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <LL_RCC_HSE_IsReady>:
{
 80088a0:	b480      	push	{r7}
 80088a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80088a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088b2:	d101      	bne.n	80088b8 <LL_RCC_HSE_IsReady+0x18>
 80088b4:	2301      	movs	r3, #1
 80088b6:	e000      	b.n	80088ba <LL_RCC_HSE_IsReady+0x1a>
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <LL_RCC_HSI_Enable>:
{
 80088c4:	b480      	push	{r7}
 80088c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80088c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80088d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088d6:	6013      	str	r3, [r2, #0]
}
 80088d8:	bf00      	nop
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr

080088e2 <LL_RCC_HSI_Disable>:
{
 80088e2:	b480      	push	{r7}
 80088e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80088e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80088f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088f4:	6013      	str	r3, [r2, #0]
}
 80088f6:	bf00      	nop
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <LL_RCC_HSI_IsReady>:
{
 8008900:	b480      	push	{r7}
 8008902:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800890e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008912:	d101      	bne.n	8008918 <LL_RCC_HSI_IsReady+0x18>
 8008914:	2301      	movs	r3, #1
 8008916:	e000      	b.n	800891a <LL_RCC_HSI_IsReady+0x1a>
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <LL_RCC_HSI_SetCalibTrimming>:
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800892c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	061b      	lsls	r3, r3, #24
 800893a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800893e:	4313      	orrs	r3, r2
 8008940:	604b      	str	r3, [r1, #4]
}
 8008942:	bf00      	nop
 8008944:	370c      	adds	r7, #12
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr

0800894e <LL_RCC_HSI48_Enable>:
{
 800894e:	b480      	push	{r7}
 8008950:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8008952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008956:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800895a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800895e:	f043 0301 	orr.w	r3, r3, #1
 8008962:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8008966:	bf00      	nop
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <LL_RCC_HSI48_Disable>:
{
 8008970:	b480      	push	{r7}
 8008972:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8008974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008978:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800897c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008980:	f023 0301 	bic.w	r3, r3, #1
 8008984:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8008988:	bf00      	nop
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr

08008992 <LL_RCC_HSI48_IsReady>:
{
 8008992:	b480      	push	{r7}
 8008994:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8008996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800899a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800899e:	f003 0302 	and.w	r3, r3, #2
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	d101      	bne.n	80089aa <LL_RCC_HSI48_IsReady+0x18>
 80089a6:	2301      	movs	r3, #1
 80089a8:	e000      	b.n	80089ac <LL_RCC_HSI48_IsReady+0x1a>
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr

080089b6 <LL_RCC_LSE_Enable>:
{
 80089b6:	b480      	push	{r7}
 80089b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80089ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80089c6:	f043 0301 	orr.w	r3, r3, #1
 80089ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80089ce:	bf00      	nop
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <LL_RCC_LSE_Disable>:
{
 80089d8:	b480      	push	{r7}
 80089da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80089dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80089e8:	f023 0301 	bic.w	r3, r3, #1
 80089ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80089f0:	bf00      	nop
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr

080089fa <LL_RCC_LSE_EnableBypass>:
{
 80089fa:	b480      	push	{r7}
 80089fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80089fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a0a:	f043 0304 	orr.w	r3, r3, #4
 8008a0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008a12:	bf00      	nop
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <LL_RCC_LSE_DisableBypass>:
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a2c:	f023 0304 	bic.w	r3, r3, #4
 8008a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008a34:	bf00      	nop
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <LL_RCC_LSE_IsReady>:
{
 8008a3e:	b480      	push	{r7}
 8008a40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a4a:	f003 0302 	and.w	r3, r3, #2
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d101      	bne.n	8008a56 <LL_RCC_LSE_IsReady+0x18>
 8008a52:	2301      	movs	r3, #1
 8008a54:	e000      	b.n	8008a58 <LL_RCC_LSE_IsReady+0x1a>
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr

08008a62 <LL_RCC_LSI1_Enable>:
{
 8008a62:	b480      	push	{r7}
 8008a64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8008a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a72:	f043 0301 	orr.w	r3, r3, #1
 8008a76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008a7a:	bf00      	nop
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <LL_RCC_LSI1_Disable>:
{
 8008a84:	b480      	push	{r7}
 8008a86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8008a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a94:	f023 0301 	bic.w	r3, r3, #1
 8008a98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008a9c:	bf00      	nop
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr

08008aa6 <LL_RCC_LSI1_IsReady>:
{
 8008aa6:	b480      	push	{r7}
 8008aa8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8008aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ab2:	f003 0302 	and.w	r3, r3, #2
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d101      	bne.n	8008abe <LL_RCC_LSI1_IsReady+0x18>
 8008aba:	2301      	movs	r3, #1
 8008abc:	e000      	b.n	8008ac0 <LL_RCC_LSI1_IsReady+0x1a>
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr

08008aca <LL_RCC_LSI2_Enable>:
{
 8008aca:	b480      	push	{r7}
 8008acc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8008ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ad6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ada:	f043 0304 	orr.w	r3, r3, #4
 8008ade:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008ae2:	bf00      	nop
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <LL_RCC_LSI2_Disable>:
{
 8008aec:	b480      	push	{r7}
 8008aee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8008af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008af8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008afc:	f023 0304 	bic.w	r3, r3, #4
 8008b00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008b04:	bf00      	nop
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr

08008b0e <LL_RCC_LSI2_IsReady>:
{
 8008b0e:	b480      	push	{r7}
 8008b10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8008b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b1a:	f003 0308 	and.w	r3, r3, #8
 8008b1e:	2b08      	cmp	r3, #8
 8008b20:	d101      	bne.n	8008b26 <LL_RCC_LSI2_IsReady+0x18>
 8008b22:	2301      	movs	r3, #1
 8008b24:	e000      	b.n	8008b28 <LL_RCC_LSI2_IsReady+0x1a>
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <LL_RCC_LSI2_SetTrimming>:
{
 8008b32:	b480      	push	{r7}
 8008b34:	b083      	sub	sp, #12
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8008b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b42:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	021b      	lsls	r3, r3, #8
 8008b4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <LL_RCC_MSI_Enable>:
{
 8008b60:	b480      	push	{r7}
 8008b62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8008b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b6e:	f043 0301 	orr.w	r3, r3, #1
 8008b72:	6013      	str	r3, [r2, #0]
}
 8008b74:	bf00      	nop
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr

08008b7e <LL_RCC_MSI_Disable>:
{
 8008b7e:	b480      	push	{r7}
 8008b80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8008b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b8c:	f023 0301 	bic.w	r3, r3, #1
 8008b90:	6013      	str	r3, [r2, #0]
}
 8008b92:	bf00      	nop
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <LL_RCC_MSI_IsReady>:
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8008ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f003 0302 	and.w	r3, r3, #2
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d101      	bne.n	8008bb2 <LL_RCC_MSI_IsReady+0x16>
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e000      	b.n	8008bb4 <LL_RCC_MSI_IsReady+0x18>
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <LL_RCC_MSI_SetRange>:
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b083      	sub	sp, #12
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8008bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008bd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	600b      	str	r3, [r1, #0]
}
 8008bda:	bf00      	nop
 8008bdc:	370c      	adds	r7, #12
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr

08008be6 <LL_RCC_MSI_GetRange>:
{
 8008be6:	b480      	push	{r7}
 8008be8:	b083      	sub	sp, #12
 8008bea:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8008bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bf6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2bb0      	cmp	r3, #176	; 0xb0
 8008bfc:	d901      	bls.n	8008c02 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8008bfe:	23b0      	movs	r3, #176	; 0xb0
 8008c00:	607b      	str	r3, [r7, #4]
  return msiRange;
 8008c02:	687b      	ldr	r3, [r7, #4]
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <LL_RCC_MSI_SetCalibTrimming>:
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8008c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	021b      	lsls	r3, r3, #8
 8008c26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	604b      	str	r3, [r1, #4]
}
 8008c2e:	bf00      	nop
 8008c30:	370c      	adds	r7, #12
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr

08008c3a <LL_RCC_SetSysClkSource>:
{
 8008c3a:	b480      	push	{r7}
 8008c3c:	b083      	sub	sp, #12
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8008c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	f023 0203 	bic.w	r2, r3, #3
 8008c4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	608b      	str	r3, [r1, #8]
}
 8008c56:	bf00      	nop
 8008c58:	370c      	adds	r7, #12
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr

08008c62 <LL_RCC_GetSysClkSource>:
{
 8008c62:	b480      	push	{r7}
 8008c64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	f003 030c 	and.w	r3, r3, #12
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr

08008c7a <LL_RCC_SetAHBPrescaler>:
{
 8008c7a:	b480      	push	{r7}
 8008c7c:	b083      	sub	sp, #12
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8008c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	608b      	str	r3, [r1, #8]
}
 8008c96:	bf00      	nop
 8008c98:	370c      	adds	r7, #12
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <LL_C2_RCC_SetAHBPrescaler>:
{
 8008ca2:	b480      	push	{r7}
 8008ca4:	b083      	sub	sp, #12
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8008caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008cb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008cb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8008cc2:	bf00      	nop
 8008cc4:	370c      	adds	r7, #12
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr

08008cce <LL_RCC_SetAHB4Prescaler>:
{
 8008cce:	b480      	push	{r7}
 8008cd0:	b083      	sub	sp, #12
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8008cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cda:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008cde:	f023 020f 	bic.w	r2, r3, #15
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	091b      	lsrs	r3, r3, #4
 8008ce6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008cea:	4313      	orrs	r3, r2
 8008cec:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <LL_RCC_SetAPB1Prescaler>:
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8008d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008d0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	608b      	str	r3, [r1, #8]
}
 8008d18:	bf00      	nop
 8008d1a:	370c      	adds	r7, #12
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <LL_RCC_SetAPB2Prescaler>:
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8008d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008d36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	608b      	str	r3, [r1, #8]
}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <LL_RCC_GetAHBPrescaler>:
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <LL_C2_RCC_GetAHBPrescaler>:
{
 8008d64:	b480      	push	{r7}
 8008d66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8008d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d6c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr

08008d7e <LL_RCC_GetAHB4Prescaler>:
{
 8008d7e:	b480      	push	{r7}
 8008d80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8008d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d86:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008d8a:	011b      	lsls	r3, r3, #4
 8008d8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr

08008d9a <LL_RCC_GetAPB1Prescaler>:
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <LL_RCC_GetAPB2Prescaler>:
{
 8008db2:	b480      	push	{r7}
 8008db4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8008db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr

08008dca <LL_RCC_PLL_Enable>:
{
 8008dca:	b480      	push	{r7}
 8008dcc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008dd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ddc:	6013      	str	r3, [r2, #0]
}
 8008dde:	bf00      	nop
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <LL_RCC_PLL_Disable>:
{
 8008de8:	b480      	push	{r7}
 8008dea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8008dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008df6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008dfa:	6013      	str	r3, [r2, #0]
}
 8008dfc:	bf00      	nop
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr

08008e06 <LL_RCC_PLL_IsReady>:
{
 8008e06:	b480      	push	{r7}
 8008e08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8008e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e18:	d101      	bne.n	8008e1e <LL_RCC_PLL_IsReady+0x18>
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e000      	b.n	8008e20 <LL_RCC_PLL_IsReady+0x1a>
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr

08008e2a <LL_RCC_PLL_GetN>:
{
 8008e2a:	b480      	push	{r7}
 8008e2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	0a1b      	lsrs	r3, r3, #8
 8008e36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <LL_RCC_PLL_GetR>:
{
 8008e44:	b480      	push	{r7}
 8008e46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8008e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <LL_RCC_PLL_GetDivider>:
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <LL_RCC_PLL_GetMainSource>:
{
 8008e74:	b480      	push	{r7}
 8008e76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	f003 0303 	and.w	r3, r3, #3
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <LL_RCC_IsActiveFlag_HPRE>:
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8008e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e9e:	d101      	bne.n	8008ea4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e000      	b.n	8008ea6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8008eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008eb8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ec0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ec4:	d101      	bne.n	8008eca <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e000      	b.n	8008ecc <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr

08008ed6 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8008ed6:	b480      	push	{r7}
 8008ed8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8008eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ede:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008eea:	d101      	bne.n	8008ef0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8008eec:	2301      	movs	r3, #1
 8008eee:	e000      	b.n	8008ef2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <LL_RCC_IsActiveFlag_PPRE1>:
{
 8008efc:	b480      	push	{r7}
 8008efe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8008f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f0e:	d101      	bne.n	8008f14 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8008f10:	2301      	movs	r3, #1
 8008f12:	e000      	b.n	8008f16 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8008f20:	b480      	push	{r7}
 8008f22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8008f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f32:	d101      	bne.n	8008f38 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8008f34:	2301      	movs	r3, #1
 8008f36:	e000      	b.n	8008f3a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f44:	b590      	push	{r4, r7, lr}
 8008f46:	b08d      	sub	sp, #52	; 0x34
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d101      	bne.n	8008f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	e37e      	b.n	8009654 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f003 0320 	and.w	r3, r3, #32
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	f000 8092 	beq.w	8009088 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f64:	f7ff fe7d 	bl	8008c62 <LL_RCC_GetSysClkSource>
 8008f68:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008f6a:	f7ff ff83 	bl	8008e74 <LL_RCC_PLL_GetMainSource>
 8008f6e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d005      	beq.n	8008f82 <HAL_RCC_OscConfig+0x3e>
 8008f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f78:	2b0c      	cmp	r3, #12
 8008f7a:	d14c      	bne.n	8009016 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8008f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d149      	bne.n	8009016 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008f82:	f7ff fe0b 	bl	8008b9c <LL_RCC_MSI_IsReady>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d005      	beq.n	8008f98 <HAL_RCC_OscConfig+0x54>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	69db      	ldr	r3, [r3, #28]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d101      	bne.n	8008f98 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	e35d      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008f9c:	f7ff fe23 	bl	8008be6 <LL_RCC_MSI_GetRange>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	429c      	cmp	r4, r3
 8008fa4:	d914      	bls.n	8008fd0 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 fd5c 	bl	8009a68 <RCC_SetFlashLatencyFromMSIRange>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d001      	beq.n	8008fba <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e34c      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7ff fdfd 	bl	8008bbe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6a1b      	ldr	r3, [r3, #32]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7ff fe21 	bl	8008c10 <LL_RCC_MSI_SetCalibTrimming>
 8008fce:	e013      	b.n	8008ff8 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7ff fdf2 	bl	8008bbe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7ff fe16 	bl	8008c10 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f000 fd3d 	bl	8009a68 <RCC_SetFlashLatencyFromMSIRange>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d001      	beq.n	8008ff8 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e32d      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008ff8:	f000 fcda 	bl	80099b0 <HAL_RCC_GetHCLKFreq>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	4bb3      	ldr	r3, [pc, #716]	; (80092cc <HAL_RCC_OscConfig+0x388>)
 8009000:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009002:	4bb3      	ldr	r3, [pc, #716]	; (80092d0 <HAL_RCC_OscConfig+0x38c>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4618      	mov	r0, r3
 8009008:	f7fd fb6e 	bl	80066e8 <HAL_InitTick>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	d039      	beq.n	8009086 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	e31e      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	69db      	ldr	r3, [r3, #28]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d01e      	beq.n	800905c <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800901e:	f7ff fd9f 	bl	8008b60 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009022:	f7fe f8b3 	bl	800718c <HAL_GetTick>
 8009026:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8009028:	e008      	b.n	800903c <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800902a:	f7fe f8af 	bl	800718c <HAL_GetTick>
 800902e:	4602      	mov	r2, r0
 8009030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009032:	1ad3      	subs	r3, r2, r3
 8009034:	2b02      	cmp	r3, #2
 8009036:	d901      	bls.n	800903c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8009038:	2303      	movs	r3, #3
 800903a:	e30b      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 800903c:	f7ff fdae 	bl	8008b9c <LL_RCC_MSI_IsReady>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d0f1      	beq.n	800902a <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904a:	4618      	mov	r0, r3
 800904c:	f7ff fdb7 	bl	8008bbe <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6a1b      	ldr	r3, [r3, #32]
 8009054:	4618      	mov	r0, r3
 8009056:	f7ff fddb 	bl	8008c10 <LL_RCC_MSI_SetCalibTrimming>
 800905a:	e015      	b.n	8009088 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800905c:	f7ff fd8f 	bl	8008b7e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009060:	f7fe f894 	bl	800718c <HAL_GetTick>
 8009064:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8009066:	e008      	b.n	800907a <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009068:	f7fe f890 	bl	800718c <HAL_GetTick>
 800906c:	4602      	mov	r2, r0
 800906e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009070:	1ad3      	subs	r3, r2, r3
 8009072:	2b02      	cmp	r3, #2
 8009074:	d901      	bls.n	800907a <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8009076:	2303      	movs	r3, #3
 8009078:	e2ec      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800907a:	f7ff fd8f 	bl	8008b9c <LL_RCC_MSI_IsReady>
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1f1      	bne.n	8009068 <HAL_RCC_OscConfig+0x124>
 8009084:	e000      	b.n	8009088 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009086:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 0301 	and.w	r3, r3, #1
 8009090:	2b00      	cmp	r3, #0
 8009092:	d04e      	beq.n	8009132 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009094:	f7ff fde5 	bl	8008c62 <LL_RCC_GetSysClkSource>
 8009098:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800909a:	f7ff feeb 	bl	8008e74 <LL_RCC_PLL_GetMainSource>
 800909e:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80090a0:	6a3b      	ldr	r3, [r7, #32]
 80090a2:	2b08      	cmp	r3, #8
 80090a4:	d005      	beq.n	80090b2 <HAL_RCC_OscConfig+0x16e>
 80090a6:	6a3b      	ldr	r3, [r7, #32]
 80090a8:	2b0c      	cmp	r3, #12
 80090aa:	d10d      	bne.n	80090c8 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	2b03      	cmp	r3, #3
 80090b0:	d10a      	bne.n	80090c8 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090b2:	f7ff fbf5 	bl	80088a0 <LL_RCC_HSE_IsReady>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d039      	beq.n	8009130 <HAL_RCC_OscConfig+0x1ec>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d135      	bne.n	8009130 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	e2c5      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090d0:	d102      	bne.n	80090d8 <HAL_RCC_OscConfig+0x194>
 80090d2:	f7ff fbc7 	bl	8008864 <LL_RCC_HSE_Enable>
 80090d6:	e001      	b.n	80090dc <HAL_RCC_OscConfig+0x198>
 80090d8:	f7ff fbd3 	bl	8008882 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d012      	beq.n	800910a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090e4:	f7fe f852 	bl	800718c <HAL_GetTick>
 80090e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80090ea:	e008      	b.n	80090fe <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80090ec:	f7fe f84e 	bl	800718c <HAL_GetTick>
 80090f0:	4602      	mov	r2, r0
 80090f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f4:	1ad3      	subs	r3, r2, r3
 80090f6:	2b64      	cmp	r3, #100	; 0x64
 80090f8:	d901      	bls.n	80090fe <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80090fa:	2303      	movs	r3, #3
 80090fc:	e2aa      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80090fe:	f7ff fbcf 	bl	80088a0 <LL_RCC_HSE_IsReady>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d0f1      	beq.n	80090ec <HAL_RCC_OscConfig+0x1a8>
 8009108:	e013      	b.n	8009132 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800910a:	f7fe f83f 	bl	800718c <HAL_GetTick>
 800910e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8009110:	e008      	b.n	8009124 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009112:	f7fe f83b 	bl	800718c <HAL_GetTick>
 8009116:	4602      	mov	r2, r0
 8009118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911a:	1ad3      	subs	r3, r2, r3
 800911c:	2b64      	cmp	r3, #100	; 0x64
 800911e:	d901      	bls.n	8009124 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8009120:	2303      	movs	r3, #3
 8009122:	e297      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8009124:	f7ff fbbc 	bl	80088a0 <LL_RCC_HSE_IsReady>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1f1      	bne.n	8009112 <HAL_RCC_OscConfig+0x1ce>
 800912e:	e000      	b.n	8009132 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 0302 	and.w	r3, r3, #2
 800913a:	2b00      	cmp	r3, #0
 800913c:	d051      	beq.n	80091e2 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800913e:	f7ff fd90 	bl	8008c62 <LL_RCC_GetSysClkSource>
 8009142:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009144:	f7ff fe96 	bl	8008e74 <LL_RCC_PLL_GetMainSource>
 8009148:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	2b04      	cmp	r3, #4
 800914e:	d005      	beq.n	800915c <HAL_RCC_OscConfig+0x218>
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	2b0c      	cmp	r3, #12
 8009154:	d113      	bne.n	800917e <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	2b02      	cmp	r3, #2
 800915a:	d110      	bne.n	800917e <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800915c:	f7ff fbd0 	bl	8008900 <LL_RCC_HSI_IsReady>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d005      	beq.n	8009172 <HAL_RCC_OscConfig+0x22e>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d101      	bne.n	8009172 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e270      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	4618      	mov	r0, r3
 8009178:	f7ff fbd4 	bl	8008924 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800917c:	e031      	b.n	80091e2 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d019      	beq.n	80091ba <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009186:	f7ff fb9d 	bl	80088c4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800918a:	f7fd ffff 	bl	800718c <HAL_GetTick>
 800918e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8009190:	e008      	b.n	80091a4 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009192:	f7fd fffb 	bl	800718c <HAL_GetTick>
 8009196:	4602      	mov	r2, r0
 8009198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919a:	1ad3      	subs	r3, r2, r3
 800919c:	2b02      	cmp	r3, #2
 800919e:	d901      	bls.n	80091a4 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80091a0:	2303      	movs	r3, #3
 80091a2:	e257      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80091a4:	f7ff fbac 	bl	8008900 <LL_RCC_HSI_IsReady>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d0f1      	beq.n	8009192 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7ff fbb6 	bl	8008924 <LL_RCC_HSI_SetCalibTrimming>
 80091b8:	e013      	b.n	80091e2 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80091ba:	f7ff fb92 	bl	80088e2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091be:	f7fd ffe5 	bl	800718c <HAL_GetTick>
 80091c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80091c4:	e008      	b.n	80091d8 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80091c6:	f7fd ffe1 	bl	800718c <HAL_GetTick>
 80091ca:	4602      	mov	r2, r0
 80091cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ce:	1ad3      	subs	r3, r2, r3
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	d901      	bls.n	80091d8 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80091d4:	2303      	movs	r3, #3
 80091d6:	e23d      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80091d8:	f7ff fb92 	bl	8008900 <LL_RCC_HSI_IsReady>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1f1      	bne.n	80091c6 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f003 0308 	and.w	r3, r3, #8
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d106      	bne.n	80091fc <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	f000 80a3 	beq.w	8009342 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	695b      	ldr	r3, [r3, #20]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d076      	beq.n	80092f2 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f003 0310 	and.w	r3, r3, #16
 800920c:	2b00      	cmp	r3, #0
 800920e:	d046      	beq.n	800929e <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8009210:	f7ff fc49 	bl	8008aa6 <LL_RCC_LSI1_IsReady>
 8009214:	4603      	mov	r3, r0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d113      	bne.n	8009242 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800921a:	f7ff fc22 	bl	8008a62 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800921e:	f7fd ffb5 	bl	800718c <HAL_GetTick>
 8009222:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8009224:	e008      	b.n	8009238 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009226:	f7fd ffb1 	bl	800718c <HAL_GetTick>
 800922a:	4602      	mov	r2, r0
 800922c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922e:	1ad3      	subs	r3, r2, r3
 8009230:	2b02      	cmp	r3, #2
 8009232:	d901      	bls.n	8009238 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8009234:	2303      	movs	r3, #3
 8009236:	e20d      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8009238:	f7ff fc35 	bl	8008aa6 <LL_RCC_LSI1_IsReady>
 800923c:	4603      	mov	r3, r0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d0f1      	beq.n	8009226 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8009242:	f7ff fc42 	bl	8008aca <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009246:	f7fd ffa1 	bl	800718c <HAL_GetTick>
 800924a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800924c:	e008      	b.n	8009260 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800924e:	f7fd ff9d 	bl	800718c <HAL_GetTick>
 8009252:	4602      	mov	r2, r0
 8009254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	2b03      	cmp	r3, #3
 800925a:	d901      	bls.n	8009260 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 800925c:	2303      	movs	r3, #3
 800925e:	e1f9      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8009260:	f7ff fc55 	bl	8008b0e <LL_RCC_LSI2_IsReady>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d0f1      	beq.n	800924e <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	699b      	ldr	r3, [r3, #24]
 800926e:	4618      	mov	r0, r3
 8009270:	f7ff fc5f 	bl	8008b32 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8009274:	f7ff fc06 	bl	8008a84 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009278:	f7fd ff88 	bl	800718c <HAL_GetTick>
 800927c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800927e:	e008      	b.n	8009292 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009280:	f7fd ff84 	bl	800718c <HAL_GetTick>
 8009284:	4602      	mov	r2, r0
 8009286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009288:	1ad3      	subs	r3, r2, r3
 800928a:	2b02      	cmp	r3, #2
 800928c:	d901      	bls.n	8009292 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 800928e:	2303      	movs	r3, #3
 8009290:	e1e0      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8009292:	f7ff fc08 	bl	8008aa6 <LL_RCC_LSI1_IsReady>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1f1      	bne.n	8009280 <HAL_RCC_OscConfig+0x33c>
 800929c:	e051      	b.n	8009342 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800929e:	f7ff fbe0 	bl	8008a62 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092a2:	f7fd ff73 	bl	800718c <HAL_GetTick>
 80092a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80092a8:	e008      	b.n	80092bc <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80092aa:	f7fd ff6f 	bl	800718c <HAL_GetTick>
 80092ae:	4602      	mov	r2, r0
 80092b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b2:	1ad3      	subs	r3, r2, r3
 80092b4:	2b02      	cmp	r3, #2
 80092b6:	d901      	bls.n	80092bc <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80092b8:	2303      	movs	r3, #3
 80092ba:	e1cb      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80092bc:	f7ff fbf3 	bl	8008aa6 <LL_RCC_LSI1_IsReady>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d0f1      	beq.n	80092aa <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80092c6:	f7ff fc11 	bl	8008aec <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80092ca:	e00c      	b.n	80092e6 <HAL_RCC_OscConfig+0x3a2>
 80092cc:	20000014 	.word	0x20000014
 80092d0:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80092d4:	f7fd ff5a 	bl	800718c <HAL_GetTick>
 80092d8:	4602      	mov	r2, r0
 80092da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092dc:	1ad3      	subs	r3, r2, r3
 80092de:	2b03      	cmp	r3, #3
 80092e0:	d901      	bls.n	80092e6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80092e2:	2303      	movs	r3, #3
 80092e4:	e1b6      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80092e6:	f7ff fc12 	bl	8008b0e <LL_RCC_LSI2_IsReady>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d1f1      	bne.n	80092d4 <HAL_RCC_OscConfig+0x390>
 80092f0:	e027      	b.n	8009342 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80092f2:	f7ff fbfb 	bl	8008aec <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092f6:	f7fd ff49 	bl	800718c <HAL_GetTick>
 80092fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80092fc:	e008      	b.n	8009310 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80092fe:	f7fd ff45 	bl	800718c <HAL_GetTick>
 8009302:	4602      	mov	r2, r0
 8009304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009306:	1ad3      	subs	r3, r2, r3
 8009308:	2b03      	cmp	r3, #3
 800930a:	d901      	bls.n	8009310 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800930c:	2303      	movs	r3, #3
 800930e:	e1a1      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8009310:	f7ff fbfd 	bl	8008b0e <LL_RCC_LSI2_IsReady>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1f1      	bne.n	80092fe <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800931a:	f7ff fbb3 	bl	8008a84 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800931e:	f7fd ff35 	bl	800718c <HAL_GetTick>
 8009322:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8009324:	e008      	b.n	8009338 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009326:	f7fd ff31 	bl	800718c <HAL_GetTick>
 800932a:	4602      	mov	r2, r0
 800932c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932e:	1ad3      	subs	r3, r2, r3
 8009330:	2b02      	cmp	r3, #2
 8009332:	d901      	bls.n	8009338 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8009334:	2303      	movs	r3, #3
 8009336:	e18d      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8009338:	f7ff fbb5 	bl	8008aa6 <LL_RCC_LSI1_IsReady>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1f1      	bne.n	8009326 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f003 0304 	and.w	r3, r3, #4
 800934a:	2b00      	cmp	r3, #0
 800934c:	d05b      	beq.n	8009406 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800934e:	4bb5      	ldr	r3, [pc, #724]	; (8009624 <HAL_RCC_OscConfig+0x6e0>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009356:	2b00      	cmp	r3, #0
 8009358:	d114      	bne.n	8009384 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800935a:	f7ff fa53 	bl	8008804 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800935e:	f7fd ff15 	bl	800718c <HAL_GetTick>
 8009362:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009364:	e008      	b.n	8009378 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009366:	f7fd ff11 	bl	800718c <HAL_GetTick>
 800936a:	4602      	mov	r2, r0
 800936c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936e:	1ad3      	subs	r3, r2, r3
 8009370:	2b02      	cmp	r3, #2
 8009372:	d901      	bls.n	8009378 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8009374:	2303      	movs	r3, #3
 8009376:	e16d      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009378:	4baa      	ldr	r3, [pc, #680]	; (8009624 <HAL_RCC_OscConfig+0x6e0>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009380:	2b00      	cmp	r3, #0
 8009382:	d0f0      	beq.n	8009366 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	2b01      	cmp	r3, #1
 800938a:	d102      	bne.n	8009392 <HAL_RCC_OscConfig+0x44e>
 800938c:	f7ff fb13 	bl	80089b6 <LL_RCC_LSE_Enable>
 8009390:	e00c      	b.n	80093ac <HAL_RCC_OscConfig+0x468>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	2b05      	cmp	r3, #5
 8009398:	d104      	bne.n	80093a4 <HAL_RCC_OscConfig+0x460>
 800939a:	f7ff fb2e 	bl	80089fa <LL_RCC_LSE_EnableBypass>
 800939e:	f7ff fb0a 	bl	80089b6 <LL_RCC_LSE_Enable>
 80093a2:	e003      	b.n	80093ac <HAL_RCC_OscConfig+0x468>
 80093a4:	f7ff fb18 	bl	80089d8 <LL_RCC_LSE_Disable>
 80093a8:	f7ff fb38 	bl	8008a1c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d014      	beq.n	80093de <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093b4:	f7fd feea 	bl	800718c <HAL_GetTick>
 80093b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80093ba:	e00a      	b.n	80093d2 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093bc:	f7fd fee6 	bl	800718c <HAL_GetTick>
 80093c0:	4602      	mov	r2, r0
 80093c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c4:	1ad3      	subs	r3, r2, r3
 80093c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d901      	bls.n	80093d2 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80093ce:	2303      	movs	r3, #3
 80093d0:	e140      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80093d2:	f7ff fb34 	bl	8008a3e <LL_RCC_LSE_IsReady>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d0ef      	beq.n	80093bc <HAL_RCC_OscConfig+0x478>
 80093dc:	e013      	b.n	8009406 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093de:	f7fd fed5 	bl	800718c <HAL_GetTick>
 80093e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80093e4:	e00a      	b.n	80093fc <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093e6:	f7fd fed1 	bl	800718c <HAL_GetTick>
 80093ea:	4602      	mov	r2, r0
 80093ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ee:	1ad3      	subs	r3, r2, r3
 80093f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d901      	bls.n	80093fc <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80093f8:	2303      	movs	r3, #3
 80093fa:	e12b      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80093fc:	f7ff fb1f 	bl	8008a3e <LL_RCC_LSE_IsReady>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1ef      	bne.n	80093e6 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800940e:	2b00      	cmp	r3, #0
 8009410:	d02c      	beq.n	800946c <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009416:	2b00      	cmp	r3, #0
 8009418:	d014      	beq.n	8009444 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800941a:	f7ff fa98 	bl	800894e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800941e:	f7fd feb5 	bl	800718c <HAL_GetTick>
 8009422:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8009424:	e008      	b.n	8009438 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009426:	f7fd feb1 	bl	800718c <HAL_GetTick>
 800942a:	4602      	mov	r2, r0
 800942c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942e:	1ad3      	subs	r3, r2, r3
 8009430:	2b02      	cmp	r3, #2
 8009432:	d901      	bls.n	8009438 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8009434:	2303      	movs	r3, #3
 8009436:	e10d      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8009438:	f7ff faab 	bl	8008992 <LL_RCC_HSI48_IsReady>
 800943c:	4603      	mov	r3, r0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d0f1      	beq.n	8009426 <HAL_RCC_OscConfig+0x4e2>
 8009442:	e013      	b.n	800946c <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009444:	f7ff fa94 	bl	8008970 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009448:	f7fd fea0 	bl	800718c <HAL_GetTick>
 800944c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800944e:	e008      	b.n	8009462 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009450:	f7fd fe9c 	bl	800718c <HAL_GetTick>
 8009454:	4602      	mov	r2, r0
 8009456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	2b02      	cmp	r3, #2
 800945c:	d901      	bls.n	8009462 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 800945e:	2303      	movs	r3, #3
 8009460:	e0f8      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8009462:	f7ff fa96 	bl	8008992 <LL_RCC_HSI48_IsReady>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d1f1      	bne.n	8009450 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009470:	2b00      	cmp	r3, #0
 8009472:	f000 80ee 	beq.w	8009652 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009476:	f7ff fbf4 	bl	8008c62 <LL_RCC_GetSysClkSource>
 800947a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800947c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009488:	2b02      	cmp	r3, #2
 800948a:	f040 80af 	bne.w	80095ec <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f003 0203 	and.w	r2, r3, #3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009498:	429a      	cmp	r2, r3
 800949a:	d123      	bne.n	80094e4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d11c      	bne.n	80094e4 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	0a1b      	lsrs	r3, r3, #8
 80094ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d114      	bne.n	80094e4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d10d      	bne.n	80094e4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d106      	bne.n	80094e4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d05d      	beq.n	80095a0 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	2b0c      	cmp	r3, #12
 80094e8:	d058      	beq.n	800959c <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80094ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d001      	beq.n	80094fc <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	e0ab      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80094fc:	f7ff fc74 	bl	8008de8 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009500:	f7fd fe44 	bl	800718c <HAL_GetTick>
 8009504:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009506:	e008      	b.n	800951a <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009508:	f7fd fe40 	bl	800718c <HAL_GetTick>
 800950c:	4602      	mov	r2, r0
 800950e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	2b02      	cmp	r3, #2
 8009514:	d901      	bls.n	800951a <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8009516:	2303      	movs	r3, #3
 8009518:	e09c      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800951a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009524:	2b00      	cmp	r3, #0
 8009526:	d1ef      	bne.n	8009508 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800952c:	68da      	ldr	r2, [r3, #12]
 800952e:	4b3e      	ldr	r3, [pc, #248]	; (8009628 <HAL_RCC_OscConfig+0x6e4>)
 8009530:	4013      	ands	r3, r2
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800953a:	4311      	orrs	r1, r2
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009540:	0212      	lsls	r2, r2, #8
 8009542:	4311      	orrs	r1, r2
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009548:	4311      	orrs	r1, r2
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800954e:	4311      	orrs	r1, r2
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009554:	430a      	orrs	r2, r1
 8009556:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800955a:	4313      	orrs	r3, r2
 800955c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800955e:	f7ff fc34 	bl	8008dca <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800956c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009570:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009572:	f7fd fe0b 	bl	800718c <HAL_GetTick>
 8009576:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009578:	e008      	b.n	800958c <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800957a:	f7fd fe07 	bl	800718c <HAL_GetTick>
 800957e:	4602      	mov	r2, r0
 8009580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009582:	1ad3      	subs	r3, r2, r3
 8009584:	2b02      	cmp	r3, #2
 8009586:	d901      	bls.n	800958c <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8009588:	2303      	movs	r3, #3
 800958a:	e063      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800958c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009596:	2b00      	cmp	r3, #0
 8009598:	d0ef      	beq.n	800957a <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800959a:	e05a      	b.n	8009652 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	e059      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80095a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d151      	bne.n	8009652 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80095ae:	f7ff fc0c 	bl	8008dca <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80095b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095c0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80095c2:	f7fd fde3 	bl	800718c <HAL_GetTick>
 80095c6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80095c8:	e008      	b.n	80095dc <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095ca:	f7fd fddf 	bl	800718c <HAL_GetTick>
 80095ce:	4602      	mov	r2, r0
 80095d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d2:	1ad3      	subs	r3, r2, r3
 80095d4:	2b02      	cmp	r3, #2
 80095d6:	d901      	bls.n	80095dc <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 80095d8:	2303      	movs	r3, #3
 80095da:	e03b      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80095dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d0ef      	beq.n	80095ca <HAL_RCC_OscConfig+0x686>
 80095ea:	e032      	b.n	8009652 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	2b0c      	cmp	r3, #12
 80095f0:	d02d      	beq.n	800964e <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095f2:	f7ff fbf9 	bl	8008de8 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80095f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009600:	f023 0303 	bic.w	r3, r3, #3
 8009604:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8009606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009610:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8009614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009618:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800961a:	f7fd fdb7 	bl	800718c <HAL_GetTick>
 800961e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009620:	e00d      	b.n	800963e <HAL_RCC_OscConfig+0x6fa>
 8009622:	bf00      	nop
 8009624:	58000400 	.word	0x58000400
 8009628:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800962c:	f7fd fdae 	bl	800718c <HAL_GetTick>
 8009630:	4602      	mov	r2, r0
 8009632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009634:	1ad3      	subs	r3, r2, r3
 8009636:	2b02      	cmp	r3, #2
 8009638:	d901      	bls.n	800963e <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 800963a:	2303      	movs	r3, #3
 800963c:	e00a      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800963e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009648:	2b00      	cmp	r3, #0
 800964a:	d1ef      	bne.n	800962c <HAL_RCC_OscConfig+0x6e8>
 800964c:	e001      	b.n	8009652 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	e000      	b.n	8009654 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8009652:	2300      	movs	r3, #0
}
 8009654:	4618      	mov	r0, r3
 8009656:	3734      	adds	r7, #52	; 0x34
 8009658:	46bd      	mov	sp, r7
 800965a:	bd90      	pop	{r4, r7, pc}

0800965c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d101      	bne.n	8009670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800966c:	2301      	movs	r3, #1
 800966e:	e12d      	b.n	80098cc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009670:	4b98      	ldr	r3, [pc, #608]	; (80098d4 <HAL_RCC_ClockConfig+0x278>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f003 0307 	and.w	r3, r3, #7
 8009678:	683a      	ldr	r2, [r7, #0]
 800967a:	429a      	cmp	r2, r3
 800967c:	d91b      	bls.n	80096b6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800967e:	4b95      	ldr	r3, [pc, #596]	; (80098d4 <HAL_RCC_ClockConfig+0x278>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f023 0207 	bic.w	r2, r3, #7
 8009686:	4993      	ldr	r1, [pc, #588]	; (80098d4 <HAL_RCC_ClockConfig+0x278>)
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	4313      	orrs	r3, r2
 800968c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800968e:	f7fd fd7d 	bl	800718c <HAL_GetTick>
 8009692:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009694:	e008      	b.n	80096a8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009696:	f7fd fd79 	bl	800718c <HAL_GetTick>
 800969a:	4602      	mov	r2, r0
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	1ad3      	subs	r3, r2, r3
 80096a0:	2b02      	cmp	r3, #2
 80096a2:	d901      	bls.n	80096a8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80096a4:	2303      	movs	r3, #3
 80096a6:	e111      	b.n	80098cc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80096a8:	4b8a      	ldr	r3, [pc, #552]	; (80098d4 <HAL_RCC_ClockConfig+0x278>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 0307 	and.w	r3, r3, #7
 80096b0:	683a      	ldr	r2, [r7, #0]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d1ef      	bne.n	8009696 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 0302 	and.w	r3, r3, #2
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d016      	beq.n	80096f0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7ff fad7 	bl	8008c7a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80096cc:	f7fd fd5e 	bl	800718c <HAL_GetTick>
 80096d0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80096d2:	e008      	b.n	80096e6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80096d4:	f7fd fd5a 	bl	800718c <HAL_GetTick>
 80096d8:	4602      	mov	r2, r0
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	1ad3      	subs	r3, r2, r3
 80096de:	2b02      	cmp	r3, #2
 80096e0:	d901      	bls.n	80096e6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80096e2:	2303      	movs	r3, #3
 80096e4:	e0f2      	b.n	80098cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80096e6:	f7ff fbd1 	bl	8008e8c <LL_RCC_IsActiveFlag_HPRE>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d0f1      	beq.n	80096d4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f003 0320 	and.w	r3, r3, #32
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d016      	beq.n	800972a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	695b      	ldr	r3, [r3, #20]
 8009700:	4618      	mov	r0, r3
 8009702:	f7ff face 	bl	8008ca2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009706:	f7fd fd41 	bl	800718c <HAL_GetTick>
 800970a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800970c:	e008      	b.n	8009720 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800970e:	f7fd fd3d 	bl	800718c <HAL_GetTick>
 8009712:	4602      	mov	r2, r0
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	1ad3      	subs	r3, r2, r3
 8009718:	2b02      	cmp	r3, #2
 800971a:	d901      	bls.n	8009720 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800971c:	2303      	movs	r3, #3
 800971e:	e0d5      	b.n	80098cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8009720:	f7ff fbc6 	bl	8008eb0 <LL_RCC_IsActiveFlag_C2HPRE>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d0f1      	beq.n	800970e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009732:	2b00      	cmp	r3, #0
 8009734:	d016      	beq.n	8009764 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	699b      	ldr	r3, [r3, #24]
 800973a:	4618      	mov	r0, r3
 800973c:	f7ff fac7 	bl	8008cce <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009740:	f7fd fd24 	bl	800718c <HAL_GetTick>
 8009744:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8009746:	e008      	b.n	800975a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009748:	f7fd fd20 	bl	800718c <HAL_GetTick>
 800974c:	4602      	mov	r2, r0
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	2b02      	cmp	r3, #2
 8009754:	d901      	bls.n	800975a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8009756:	2303      	movs	r3, #3
 8009758:	e0b8      	b.n	80098cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800975a:	f7ff fbbc 	bl	8008ed6 <LL_RCC_IsActiveFlag_SHDHPRE>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d0f1      	beq.n	8009748 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f003 0304 	and.w	r3, r3, #4
 800976c:	2b00      	cmp	r3, #0
 800976e:	d016      	beq.n	800979e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	4618      	mov	r0, r3
 8009776:	f7ff fac1 	bl	8008cfc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800977a:	f7fd fd07 	bl	800718c <HAL_GetTick>
 800977e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8009780:	e008      	b.n	8009794 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009782:	f7fd fd03 	bl	800718c <HAL_GetTick>
 8009786:	4602      	mov	r2, r0
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	1ad3      	subs	r3, r2, r3
 800978c:	2b02      	cmp	r3, #2
 800978e:	d901      	bls.n	8009794 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8009790:	2303      	movs	r3, #3
 8009792:	e09b      	b.n	80098cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8009794:	f7ff fbb2 	bl	8008efc <LL_RCC_IsActiveFlag_PPRE1>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d0f1      	beq.n	8009782 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f003 0308 	and.w	r3, r3, #8
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d017      	beq.n	80097da <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	00db      	lsls	r3, r3, #3
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7ff fab7 	bl	8008d24 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80097b6:	f7fd fce9 	bl	800718c <HAL_GetTick>
 80097ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80097bc:	e008      	b.n	80097d0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80097be:	f7fd fce5 	bl	800718c <HAL_GetTick>
 80097c2:	4602      	mov	r2, r0
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	d901      	bls.n	80097d0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80097cc:	2303      	movs	r3, #3
 80097ce:	e07d      	b.n	80098cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80097d0:	f7ff fba6 	bl	8008f20 <LL_RCC_IsActiveFlag_PPRE2>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d0f1      	beq.n	80097be <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f003 0301 	and.w	r3, r3, #1
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d043      	beq.n	800986e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	d106      	bne.n	80097fc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80097ee:	f7ff f857 	bl	80088a0 <LL_RCC_HSE_IsReady>
 80097f2:	4603      	mov	r3, r0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d11e      	bne.n	8009836 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	e067      	b.n	80098cc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	2b03      	cmp	r3, #3
 8009802:	d106      	bne.n	8009812 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8009804:	f7ff faff 	bl	8008e06 <LL_RCC_PLL_IsReady>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d113      	bne.n	8009836 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	e05c      	b.n	80098cc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d106      	bne.n	8009828 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800981a:	f7ff f9bf 	bl	8008b9c <LL_RCC_MSI_IsReady>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	d108      	bne.n	8009836 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	e051      	b.n	80098cc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8009828:	f7ff f86a 	bl	8008900 <LL_RCC_HSI_IsReady>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d101      	bne.n	8009836 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009832:	2301      	movs	r3, #1
 8009834:	e04a      	b.n	80098cc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	4618      	mov	r0, r3
 800983c:	f7ff f9fd 	bl	8008c3a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009840:	f7fd fca4 	bl	800718c <HAL_GetTick>
 8009844:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009846:	e00a      	b.n	800985e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009848:	f7fd fca0 	bl	800718c <HAL_GetTick>
 800984c:	4602      	mov	r2, r0
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	f241 3288 	movw	r2, #5000	; 0x1388
 8009856:	4293      	cmp	r3, r2
 8009858:	d901      	bls.n	800985e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800985a:	2303      	movs	r3, #3
 800985c:	e036      	b.n	80098cc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800985e:	f7ff fa00 	bl	8008c62 <LL_RCC_GetSysClkSource>
 8009862:	4602      	mov	r2, r0
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	429a      	cmp	r2, r3
 800986c:	d1ec      	bne.n	8009848 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800986e:	4b19      	ldr	r3, [pc, #100]	; (80098d4 <HAL_RCC_ClockConfig+0x278>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f003 0307 	and.w	r3, r3, #7
 8009876:	683a      	ldr	r2, [r7, #0]
 8009878:	429a      	cmp	r2, r3
 800987a:	d21b      	bcs.n	80098b4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800987c:	4b15      	ldr	r3, [pc, #84]	; (80098d4 <HAL_RCC_ClockConfig+0x278>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f023 0207 	bic.w	r2, r3, #7
 8009884:	4913      	ldr	r1, [pc, #76]	; (80098d4 <HAL_RCC_ClockConfig+0x278>)
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	4313      	orrs	r3, r2
 800988a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800988c:	f7fd fc7e 	bl	800718c <HAL_GetTick>
 8009890:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009892:	e008      	b.n	80098a6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009894:	f7fd fc7a 	bl	800718c <HAL_GetTick>
 8009898:	4602      	mov	r2, r0
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	1ad3      	subs	r3, r2, r3
 800989e:	2b02      	cmp	r3, #2
 80098a0:	d901      	bls.n	80098a6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80098a2:	2303      	movs	r3, #3
 80098a4:	e012      	b.n	80098cc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80098a6:	4b0b      	ldr	r3, [pc, #44]	; (80098d4 <HAL_RCC_ClockConfig+0x278>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f003 0307 	and.w	r3, r3, #7
 80098ae:	683a      	ldr	r2, [r7, #0]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d1ef      	bne.n	8009894 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80098b4:	f000 f87c 	bl	80099b0 <HAL_RCC_GetHCLKFreq>
 80098b8:	4602      	mov	r2, r0
 80098ba:	4b07      	ldr	r3, [pc, #28]	; (80098d8 <HAL_RCC_ClockConfig+0x27c>)
 80098bc:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80098be:	f7fd fc71 	bl	80071a4 <HAL_GetTickPrio>
 80098c2:	4603      	mov	r3, r0
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7fc ff0f 	bl	80066e8 <HAL_InitTick>
 80098ca:	4603      	mov	r3, r0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3710      	adds	r7, #16
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	58004000 	.word	0x58004000
 80098d8:	20000014 	.word	0x20000014

080098dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80098dc:	b590      	push	{r4, r7, lr}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098e2:	f7ff f9be 	bl	8008c62 <LL_RCC_GetSysClkSource>
 80098e6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10a      	bne.n	8009904 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80098ee:	f7ff f97a 	bl	8008be6 <LL_RCC_MSI_GetRange>
 80098f2:	4603      	mov	r3, r0
 80098f4:	091b      	lsrs	r3, r3, #4
 80098f6:	f003 030f 	and.w	r3, r3, #15
 80098fa:	4a2a      	ldr	r2, [pc, #168]	; (80099a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80098fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009900:	60fb      	str	r3, [r7, #12]
 8009902:	e04a      	b.n	800999a <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2b04      	cmp	r3, #4
 8009908:	d102      	bne.n	8009910 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800990a:	4b27      	ldr	r3, [pc, #156]	; (80099a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800990c:	60fb      	str	r3, [r7, #12]
 800990e:	e044      	b.n	800999a <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2b08      	cmp	r3, #8
 8009914:	d10a      	bne.n	800992c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8009916:	f7fe ff93 	bl	8008840 <LL_RCC_HSE_IsEnabledDiv2>
 800991a:	4603      	mov	r3, r0
 800991c:	2b01      	cmp	r3, #1
 800991e:	d102      	bne.n	8009926 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8009920:	4b21      	ldr	r3, [pc, #132]	; (80099a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009922:	60fb      	str	r3, [r7, #12]
 8009924:	e039      	b.n	800999a <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8009926:	4b21      	ldr	r3, [pc, #132]	; (80099ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8009928:	60fb      	str	r3, [r7, #12]
 800992a:	e036      	b.n	800999a <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800992c:	f7ff faa2 	bl	8008e74 <LL_RCC_PLL_GetMainSource>
 8009930:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	2b02      	cmp	r3, #2
 8009936:	d002      	beq.n	800993e <HAL_RCC_GetSysClockFreq+0x62>
 8009938:	2b03      	cmp	r3, #3
 800993a:	d003      	beq.n	8009944 <HAL_RCC_GetSysClockFreq+0x68>
 800993c:	e00d      	b.n	800995a <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800993e:	4b1a      	ldr	r3, [pc, #104]	; (80099a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009940:	60bb      	str	r3, [r7, #8]
        break;
 8009942:	e015      	b.n	8009970 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8009944:	f7fe ff7c 	bl	8008840 <LL_RCC_HSE_IsEnabledDiv2>
 8009948:	4603      	mov	r3, r0
 800994a:	2b01      	cmp	r3, #1
 800994c:	d102      	bne.n	8009954 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800994e:	4b16      	ldr	r3, [pc, #88]	; (80099a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009950:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8009952:	e00d      	b.n	8009970 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8009954:	4b15      	ldr	r3, [pc, #84]	; (80099ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8009956:	60bb      	str	r3, [r7, #8]
        break;
 8009958:	e00a      	b.n	8009970 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800995a:	f7ff f944 	bl	8008be6 <LL_RCC_MSI_GetRange>
 800995e:	4603      	mov	r3, r0
 8009960:	091b      	lsrs	r3, r3, #4
 8009962:	f003 030f 	and.w	r3, r3, #15
 8009966:	4a0f      	ldr	r2, [pc, #60]	; (80099a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800996c:	60bb      	str	r3, [r7, #8]
        break;
 800996e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8009970:	f7ff fa5b 	bl	8008e2a <LL_RCC_PLL_GetN>
 8009974:	4602      	mov	r2, r0
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	fb03 f402 	mul.w	r4, r3, r2
 800997c:	f7ff fa6e 	bl	8008e5c <LL_RCC_PLL_GetDivider>
 8009980:	4603      	mov	r3, r0
 8009982:	091b      	lsrs	r3, r3, #4
 8009984:	3301      	adds	r3, #1
 8009986:	fbb4 f4f3 	udiv	r4, r4, r3
 800998a:	f7ff fa5b 	bl	8008e44 <LL_RCC_PLL_GetR>
 800998e:	4603      	mov	r3, r0
 8009990:	0f5b      	lsrs	r3, r3, #29
 8009992:	3301      	adds	r3, #1
 8009994:	fbb4 f3f3 	udiv	r3, r4, r3
 8009998:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800999a:	68fb      	ldr	r3, [r7, #12]
}
 800999c:	4618      	mov	r0, r3
 800999e:	3714      	adds	r7, #20
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd90      	pop	{r4, r7, pc}
 80099a4:	08019190 	.word	0x08019190
 80099a8:	00f42400 	.word	0x00f42400
 80099ac:	01e84800 	.word	0x01e84800

080099b0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80099b0:	b598      	push	{r3, r4, r7, lr}
 80099b2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80099b4:	f7ff ff92 	bl	80098dc <HAL_RCC_GetSysClockFreq>
 80099b8:	4604      	mov	r4, r0
 80099ba:	f7ff f9c7 	bl	8008d4c <LL_RCC_GetAHBPrescaler>
 80099be:	4603      	mov	r3, r0
 80099c0:	091b      	lsrs	r3, r3, #4
 80099c2:	f003 030f 	and.w	r3, r3, #15
 80099c6:	4a03      	ldr	r2, [pc, #12]	; (80099d4 <HAL_RCC_GetHCLKFreq+0x24>)
 80099c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099cc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	bd98      	pop	{r3, r4, r7, pc}
 80099d4:	08019130 	.word	0x08019130

080099d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80099d8:	b598      	push	{r3, r4, r7, lr}
 80099da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80099dc:	f7ff ffe8 	bl	80099b0 <HAL_RCC_GetHCLKFreq>
 80099e0:	4604      	mov	r4, r0
 80099e2:	f7ff f9e6 	bl	8008db2 <LL_RCC_GetAPB2Prescaler>
 80099e6:	4603      	mov	r3, r0
 80099e8:	0adb      	lsrs	r3, r3, #11
 80099ea:	f003 0307 	and.w	r3, r3, #7
 80099ee:	4a04      	ldr	r2, [pc, #16]	; (8009a00 <HAL_RCC_GetPCLK2Freq+0x28>)
 80099f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099f4:	f003 031f 	and.w	r3, r3, #31
 80099f8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	bd98      	pop	{r3, r4, r7, pc}
 8009a00:	08019170 	.word	0x08019170

08009a04 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	226f      	movs	r2, #111	; 0x6f
 8009a12:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8009a14:	f7ff f925 	bl	8008c62 <LL_RCC_GetSysClkSource>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8009a1e:	f7ff f995 	bl	8008d4c <LL_RCC_GetAHBPrescaler>
 8009a22:	4602      	mov	r2, r0
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8009a28:	f7ff f9b7 	bl	8008d9a <LL_RCC_GetAPB1Prescaler>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8009a32:	f7ff f9be 	bl	8008db2 <LL_RCC_GetAPB2Prescaler>
 8009a36:	4602      	mov	r2, r0
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8009a3c:	f7ff f992 	bl	8008d64 <LL_C2_RCC_GetAHBPrescaler>
 8009a40:	4602      	mov	r2, r0
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8009a46:	f7ff f99a 	bl	8008d7e <LL_RCC_GetAHB4Prescaler>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8009a50:	4b04      	ldr	r3, [pc, #16]	; (8009a64 <HAL_RCC_GetClockConfig+0x60>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f003 0207 	and.w	r2, r3, #7
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	601a      	str	r2, [r3, #0]
}
 8009a5c:	bf00      	nop
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	58004000 	.word	0x58004000

08009a68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8009a68:	b590      	push	{r4, r7, lr}
 8009a6a:	b085      	sub	sp, #20
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2bb0      	cmp	r3, #176	; 0xb0
 8009a74:	d903      	bls.n	8009a7e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8009a76:	4b15      	ldr	r3, [pc, #84]	; (8009acc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8009a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a7a:	60fb      	str	r3, [r7, #12]
 8009a7c:	e007      	b.n	8009a8e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	091b      	lsrs	r3, r3, #4
 8009a82:	f003 030f 	and.w	r3, r3, #15
 8009a86:	4a11      	ldr	r2, [pc, #68]	; (8009acc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8009a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a8c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8009a8e:	f7ff f976 	bl	8008d7e <LL_RCC_GetAHB4Prescaler>
 8009a92:	4603      	mov	r3, r0
 8009a94:	091b      	lsrs	r3, r3, #4
 8009a96:	f003 030f 	and.w	r3, r3, #15
 8009a9a:	4a0d      	ldr	r2, [pc, #52]	; (8009ad0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8009a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009aa6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	4a0a      	ldr	r2, [pc, #40]	; (8009ad4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8009aac:	fba2 2303 	umull	r2, r3, r2, r3
 8009ab0:	0c9c      	lsrs	r4, r3, #18
 8009ab2:	f7fe feb7 	bl	8008824 <HAL_PWREx_GetVoltageRange>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	4619      	mov	r1, r3
 8009aba:	4620      	mov	r0, r4
 8009abc:	f000 f80c 	bl	8009ad8 <RCC_SetFlashLatency>
 8009ac0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3714      	adds	r7, #20
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd90      	pop	{r4, r7, pc}
 8009aca:	bf00      	nop
 8009acc:	08019190 	.word	0x08019190
 8009ad0:	08019130 	.word	0x08019130
 8009ad4:	431bde83 	.word	0x431bde83

08009ad8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8009ad8:	b590      	push	{r4, r7, lr}
 8009ada:	b093      	sub	sp, #76	; 0x4c
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8009ae2:	4b39      	ldr	r3, [pc, #228]	; (8009bc8 <RCC_SetFlashLatency+0xf0>)
 8009ae4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8009ae8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009aea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8009aee:	4a37      	ldr	r2, [pc, #220]	; (8009bcc <RCC_SetFlashLatency+0xf4>)
 8009af0:	f107 031c 	add.w	r3, r7, #28
 8009af4:	ca07      	ldmia	r2, {r0, r1, r2}
 8009af6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8009afa:	4b35      	ldr	r3, [pc, #212]	; (8009bd0 <RCC_SetFlashLatency+0xf8>)
 8009afc:	f107 040c 	add.w	r4, r7, #12
 8009b00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009b02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8009b06:	2300      	movs	r3, #0
 8009b08:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b10:	d11c      	bne.n	8009b4c <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009b12:	2300      	movs	r3, #0
 8009b14:	643b      	str	r3, [r7, #64]	; 0x40
 8009b16:	e015      	b.n	8009b44 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8009b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009b20:	4413      	add	r3, r2
 8009b22:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d808      	bhi.n	8009b3e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009b34:	4413      	add	r3, r2
 8009b36:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8009b3a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8009b3c:	e022      	b.n	8009b84 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b40:	3301      	adds	r3, #1
 8009b42:	643b      	str	r3, [r7, #64]	; 0x40
 8009b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b46:	2b03      	cmp	r3, #3
 8009b48:	d9e6      	bls.n	8009b18 <RCC_SetFlashLatency+0x40>
 8009b4a:	e01b      	b.n	8009b84 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b50:	e015      	b.n	8009b7e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8009b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009b5a:	4413      	add	r3, r2
 8009b5c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d808      	bhi.n	8009b78 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009b6e:	4413      	add	r3, r2
 8009b70:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8009b74:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8009b76:	e005      	b.n	8009b84 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b80:	2b02      	cmp	r3, #2
 8009b82:	d9e6      	bls.n	8009b52 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8009b84:	4b13      	ldr	r3, [pc, #76]	; (8009bd4 <RCC_SetFlashLatency+0xfc>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f023 0207 	bic.w	r2, r3, #7
 8009b8c:	4911      	ldr	r1, [pc, #68]	; (8009bd4 <RCC_SetFlashLatency+0xfc>)
 8009b8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b90:	4313      	orrs	r3, r2
 8009b92:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009b94:	f7fd fafa 	bl	800718c <HAL_GetTick>
 8009b98:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8009b9a:	e008      	b.n	8009bae <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009b9c:	f7fd faf6 	bl	800718c <HAL_GetTick>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba4:	1ad3      	subs	r3, r2, r3
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d901      	bls.n	8009bae <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8009baa:	2303      	movs	r3, #3
 8009bac:	e007      	b.n	8009bbe <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8009bae:	4b09      	ldr	r3, [pc, #36]	; (8009bd4 <RCC_SetFlashLatency+0xfc>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f003 0307 	and.w	r3, r3, #7
 8009bb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d1ef      	bne.n	8009b9c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8009bbc:	2300      	movs	r3, #0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	374c      	adds	r7, #76	; 0x4c
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd90      	pop	{r4, r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	08017f64 	.word	0x08017f64
 8009bcc:	08017f74 	.word	0x08017f74
 8009bd0:	08017f80 	.word	0x08017f80
 8009bd4:	58004000 	.word	0x58004000

08009bd8 <LL_RCC_LSE_IsEnabled>:
{
 8009bd8:	b480      	push	{r7}
 8009bda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8009bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009be4:	f003 0301 	and.w	r3, r3, #1
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d101      	bne.n	8009bf0 <LL_RCC_LSE_IsEnabled+0x18>
 8009bec:	2301      	movs	r3, #1
 8009bee:	e000      	b.n	8009bf2 <LL_RCC_LSE_IsEnabled+0x1a>
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <LL_RCC_LSE_IsReady>:
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c08:	f003 0302 	and.w	r3, r3, #2
 8009c0c:	2b02      	cmp	r3, #2
 8009c0e:	d101      	bne.n	8009c14 <LL_RCC_LSE_IsReady+0x18>
 8009c10:	2301      	movs	r3, #1
 8009c12:	e000      	b.n	8009c16 <LL_RCC_LSE_IsReady+0x1a>
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <LL_RCC_SetRFWKPClockSource>:
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8009c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009c34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8009c40:	bf00      	nop
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <LL_RCC_SetSMPSClockSource>:
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8009c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5a:	f023 0203 	bic.w	r2, r3, #3
 8009c5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4313      	orrs	r3, r2
 8009c66:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009c68:	bf00      	nop
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <LL_RCC_SetSMPSPrescaler>:
{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8009c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009c86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009c90:	bf00      	nop
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <LL_RCC_SetUSARTClockSource>:
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8009ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cac:	f023 0203 	bic.w	r2, r3, #3
 8009cb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <LL_RCC_SetLPUARTClockSource>:
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8009cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cd8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009cdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009ce8:	bf00      	nop
 8009cea:	370c      	adds	r7, #12
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <LL_RCC_SetI2CClockSource>:
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8009cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	091b      	lsrs	r3, r3, #4
 8009d08:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8009d0c:	43db      	mvns	r3, r3
 8009d0e:	401a      	ands	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	011b      	lsls	r3, r3, #4
 8009d14:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8009d18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009d22:	bf00      	nop
 8009d24:	370c      	adds	r7, #12
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr

08009d2e <LL_RCC_SetLPTIMClockSource>:
{
 8009d2e:	b480      	push	{r7}
 8009d30:	b083      	sub	sp, #12
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8009d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	0c1b      	lsrs	r3, r3, #16
 8009d42:	041b      	lsls	r3, r3, #16
 8009d44:	43db      	mvns	r3, r3
 8009d46:	401a      	ands	r2, r3
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	041b      	lsls	r3, r3, #16
 8009d4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009d50:	4313      	orrs	r3, r2
 8009d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009d56:	bf00      	nop
 8009d58:	370c      	adds	r7, #12
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr

08009d62 <LL_RCC_SetSAIClockSource>:
{
 8009d62:	b480      	push	{r7}
 8009d64:	b083      	sub	sp, #12
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8009d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009d76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009d82:	bf00      	nop
 8009d84:	370c      	adds	r7, #12
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr

08009d8e <LL_RCC_SetRNGClockSource>:
{
 8009d8e:	b480      	push	{r7}
 8009d90:	b083      	sub	sp, #12
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8009d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d9e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009da2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	4313      	orrs	r3, r2
 8009daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009dae:	bf00      	nop
 8009db0:	370c      	adds	r7, #12
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr

08009dba <LL_RCC_SetCLK48ClockSource>:
{
 8009dba:	b480      	push	{r7}
 8009dbc:	b083      	sub	sp, #12
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8009dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009dce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009dda:	bf00      	nop
 8009ddc:	370c      	adds	r7, #12
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr

08009de6 <LL_RCC_SetUSBClockSource>:
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b082      	sub	sp, #8
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f7ff ffe3 	bl	8009dba <LL_RCC_SetCLK48ClockSource>
}
 8009df4:	bf00      	nop
 8009df6:	3708      	adds	r7, #8
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <LL_RCC_SetADCClockSource>:
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8009e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e0c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009e10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	4313      	orrs	r3, r2
 8009e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009e1c:	bf00      	nop
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <LL_RCC_SetRTCClockSource>:
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8009e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4313      	orrs	r3, r2
 8009e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009e48:	bf00      	nop
 8009e4a:	370c      	adds	r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <LL_RCC_GetRTCClockSource>:
{
 8009e54:	b480      	push	{r7}
 8009e56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8009e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e60:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr

08009e6e <LL_RCC_ForceBackupDomainReset>:
{
 8009e6e:	b480      	push	{r7}
 8009e70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009e86:	bf00      	nop
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <LL_RCC_ReleaseBackupDomainReset>:
{
 8009e90:	b480      	push	{r7}
 8009e92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009ea8:	bf00      	nop
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr

08009eb2 <LL_RCC_PLLSAI1_Enable>:
{
 8009eb2:	b480      	push	{r7}
 8009eb4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8009eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009ec0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009ec4:	6013      	str	r3, [r2, #0]
}
 8009ec6:	bf00      	nop
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <LL_RCC_PLLSAI1_Disable>:
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8009ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009ede:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009ee2:	6013      	str	r3, [r2, #0]
}
 8009ee4:	bf00      	nop
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr

08009eee <LL_RCC_PLLSAI1_IsReady>:
{
 8009eee:	b480      	push	{r7}
 8009ef0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8009ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009efc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f00:	d101      	bne.n	8009f06 <LL_RCC_PLLSAI1_IsReady+0x18>
 8009f02:	2301      	movs	r3, #1
 8009f04:	e000      	b.n	8009f08 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8009f06:	2300      	movs	r3, #0
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr

08009f12 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b088      	sub	sp, #32
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8009f1e:	2300      	movs	r3, #0
 8009f20:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d033      	beq.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f36:	d00c      	beq.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8009f38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f3c:	d802      	bhi.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d010      	beq.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009f42:	e017      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8009f44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009f48:	d017      	beq.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x68>
 8009f4a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009f4e:	d016      	beq.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8009f50:	e010      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8009f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f60:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8009f62:	e00d      	b.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	3304      	adds	r3, #4
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f000 f947 	bl	800a1fc <RCCEx_PLLSAI1_ConfigNP>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009f72:	e005      	b.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8009f74:	2301      	movs	r3, #1
 8009f76:	77fb      	strb	r3, [r7, #31]
        break;
 8009f78:	e002      	b.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8009f7a:	bf00      	nop
 8009f7c:	e000      	b.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8009f7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f80:	7ffb      	ldrb	r3, [r7, #31]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d105      	bne.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7ff fee9 	bl	8009d62 <LL_RCC_SetSAIClockSource>
 8009f90:	e001      	b.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f92:	7ffb      	ldrb	r3, [r7, #31]
 8009f94:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d046      	beq.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8009fa2:	f7ff ff57 	bl	8009e54 <LL_RCC_GetRTCClockSource>
 8009fa6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fac:	69ba      	ldr	r2, [r7, #24]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d03c      	beq.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8009fb2:	f7fe fc27 	bl	8008804 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8009fb6:	69bb      	ldr	r3, [r7, #24]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d105      	bne.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7ff ff31 	bl	8009e28 <LL_RCC_SetRTCClockSource>
 8009fc6:	e02e      	b.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8009fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fd0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8009fd2:	f7ff ff4c 	bl	8009e6e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8009fd6:	f7ff ff5b 	bl	8009e90 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8009fe8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8009ff2:	f7ff fdf1 	bl	8009bd8 <LL_RCC_LSE_IsEnabled>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d114      	bne.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009ffc:	f7fd f8c6 	bl	800718c <HAL_GetTick>
 800a000:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800a002:	e00b      	b.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a004:	f7fd f8c2 	bl	800718c <HAL_GetTick>
 800a008:	4602      	mov	r2, r0
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	1ad3      	subs	r3, r2, r3
 800a00e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a012:	4293      	cmp	r3, r2
 800a014:	d902      	bls.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800a016:	2303      	movs	r3, #3
 800a018:	77fb      	strb	r3, [r7, #31]
              break;
 800a01a:	e004      	b.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 800a01c:	f7ff fdee 	bl	8009bfc <LL_RCC_LSE_IsReady>
 800a020:	4603      	mov	r3, r0
 800a022:	2b01      	cmp	r3, #1
 800a024:	d1ee      	bne.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800a026:	7ffb      	ldrb	r3, [r7, #31]
 800a028:	77bb      	strb	r3, [r7, #30]
 800a02a:	e001      	b.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a02c:	7ffb      	ldrb	r3, [r7, #31]
 800a02e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f003 0301 	and.w	r3, r3, #1
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d004      	beq.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	699b      	ldr	r3, [r3, #24]
 800a040:	4618      	mov	r0, r3
 800a042:	f7ff fe2b 	bl	8009c9c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f003 0302 	and.w	r3, r3, #2
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d004      	beq.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	69db      	ldr	r3, [r3, #28]
 800a056:	4618      	mov	r0, r3
 800a058:	f7ff fe36 	bl	8009cc8 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f003 0310 	and.w	r3, r3, #16
 800a064:	2b00      	cmp	r3, #0
 800a066:	d004      	beq.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7ff fe5e 	bl	8009d2e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f003 0320 	and.w	r3, r3, #32
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d004      	beq.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a082:	4618      	mov	r0, r3
 800a084:	f7ff fe53 	bl	8009d2e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f003 0304 	and.w	r3, r3, #4
 800a090:	2b00      	cmp	r3, #0
 800a092:	d004      	beq.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a1b      	ldr	r3, [r3, #32]
 800a098:	4618      	mov	r0, r3
 800a09a:	f7ff fe2b 	bl	8009cf4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f003 0308 	and.w	r3, r3, #8
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d004      	beq.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7ff fe20 	bl	8009cf4 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d022      	beq.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7ff fe8e 	bl	8009de6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0d2:	d107      	bne.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800a0d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a0de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a0e2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a0ec:	d10b      	bne.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	3304      	adds	r3, #4
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f000 f8dd 	bl	800a2b2 <RCCEx_PLLSAI1_ConfigNQ>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800a0fc:	7ffb      	ldrb	r3, [r7, #31]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d001      	beq.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 800a102:	7ffb      	ldrb	r3, [r7, #31]
 800a104:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d02b      	beq.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a11a:	d008      	beq.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a120:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a124:	d003      	beq.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d105      	bne.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x228>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a132:	4618      	mov	r0, r3
 800a134:	f7ff fe2b 	bl	8009d8e <LL_RCC_SetRNGClockSource>
 800a138:	e00a      	b.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a13e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a142:	60fb      	str	r3, [r7, #12]
 800a144:	2000      	movs	r0, #0
 800a146:	f7ff fe22 	bl	8009d8e <LL_RCC_SetRNGClockSource>
 800a14a:	68f8      	ldr	r0, [r7, #12]
 800a14c:	f7ff fe35 	bl	8009dba <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a154:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800a158:	d107      	bne.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800a15a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a164:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a168:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a172:	2b00      	cmp	r3, #0
 800a174:	d022      	beq.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7ff fe3e 	bl	8009dfc <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a188:	d107      	bne.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a18a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a18e:	68db      	ldr	r3, [r3, #12]
 800a190:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a198:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a19e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1a2:	d10b      	bne.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	3304      	adds	r3, #4
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f000 f8dd 	bl	800a368 <RCCEx_PLLSAI1_ConfigNR>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800a1b2:	7ffb      	ldrb	r3, [r7, #31]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d001      	beq.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 800a1b8:	7ffb      	ldrb	r3, [r7, #31]
 800a1ba:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d004      	beq.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7ff fd27 	bl	8009c20 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d009      	beq.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7ff fd46 	bl	8009c74 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f7ff fd2d 	bl	8009c4c <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800a1f2:	7fbb      	ldrb	r3, [r7, #30]
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3720      	adds	r7, #32
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a204:	2300      	movs	r3, #0
 800a206:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800a208:	f7ff fe62 	bl	8009ed0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a20c:	f7fc ffbe 	bl	800718c <HAL_GetTick>
 800a210:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a212:	e009      	b.n	800a228 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a214:	f7fc ffba 	bl	800718c <HAL_GetTick>
 800a218:	4602      	mov	r2, r0
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	1ad3      	subs	r3, r2, r3
 800a21e:	2b02      	cmp	r3, #2
 800a220:	d902      	bls.n	800a228 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800a222:	2303      	movs	r3, #3
 800a224:	73fb      	strb	r3, [r7, #15]
      break;
 800a226:	e004      	b.n	800a232 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a228:	f7ff fe61 	bl	8009eee <LL_RCC_PLLSAI1_IsReady>
 800a22c:	4603      	mov	r3, r0
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d1f0      	bne.n	800a214 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800a232:	7bfb      	ldrb	r3, [r7, #15]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d137      	bne.n	800a2a8 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800a238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	021b      	lsls	r3, r3, #8
 800a248:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a24c:	4313      	orrs	r3, r2
 800a24e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800a250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a254:	691b      	ldr	r3, [r3, #16]
 800a256:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a262:	4313      	orrs	r3, r2
 800a264:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800a266:	f7ff fe24 	bl	8009eb2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a26a:	f7fc ff8f 	bl	800718c <HAL_GetTick>
 800a26e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a270:	e009      	b.n	800a286 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a272:	f7fc ff8b 	bl	800718c <HAL_GetTick>
 800a276:	4602      	mov	r2, r0
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	1ad3      	subs	r3, r2, r3
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	d902      	bls.n	800a286 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800a280:	2303      	movs	r3, #3
 800a282:	73fb      	strb	r3, [r7, #15]
        break;
 800a284:	e004      	b.n	800a290 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a286:	f7ff fe32 	bl	8009eee <LL_RCC_PLLSAI1_IsReady>
 800a28a:	4603      	mov	r3, r0
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d1f0      	bne.n	800a272 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800a290:	7bfb      	ldrb	r3, [r7, #15]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d108      	bne.n	800a2a8 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800a296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a29a:	691a      	ldr	r2, [r3, #16]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800a2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b084      	sub	sp, #16
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800a2be:	f7ff fe07 	bl	8009ed0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a2c2:	f7fc ff63 	bl	800718c <HAL_GetTick>
 800a2c6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a2c8:	e009      	b.n	800a2de <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a2ca:	f7fc ff5f 	bl	800718c <HAL_GetTick>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	1ad3      	subs	r3, r2, r3
 800a2d4:	2b02      	cmp	r3, #2
 800a2d6:	d902      	bls.n	800a2de <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800a2d8:	2303      	movs	r3, #3
 800a2da:	73fb      	strb	r3, [r7, #15]
      break;
 800a2dc:	e004      	b.n	800a2e8 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a2de:	f7ff fe06 	bl	8009eee <LL_RCC_PLLSAI1_IsReady>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d1f0      	bne.n	800a2ca <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800a2e8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d137      	bne.n	800a35e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800a2ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2f2:	691b      	ldr	r3, [r3, #16]
 800a2f4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	021b      	lsls	r3, r3, #8
 800a2fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a302:	4313      	orrs	r3, r2
 800a304:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800a306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a30a:	691b      	ldr	r3, [r3, #16]
 800a30c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	689b      	ldr	r3, [r3, #8]
 800a314:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a318:	4313      	orrs	r3, r2
 800a31a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800a31c:	f7ff fdc9 	bl	8009eb2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a320:	f7fc ff34 	bl	800718c <HAL_GetTick>
 800a324:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a326:	e009      	b.n	800a33c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a328:	f7fc ff30 	bl	800718c <HAL_GetTick>
 800a32c:	4602      	mov	r2, r0
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	1ad3      	subs	r3, r2, r3
 800a332:	2b02      	cmp	r3, #2
 800a334:	d902      	bls.n	800a33c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800a336:	2303      	movs	r3, #3
 800a338:	73fb      	strb	r3, [r7, #15]
        break;
 800a33a:	e004      	b.n	800a346 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a33c:	f7ff fdd7 	bl	8009eee <LL_RCC_PLLSAI1_IsReady>
 800a340:	4603      	mov	r3, r0
 800a342:	2b01      	cmp	r3, #1
 800a344:	d1f0      	bne.n	800a328 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800a346:	7bfb      	ldrb	r3, [r7, #15]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d108      	bne.n	800a35e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800a34c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a350:	691a      	ldr	r2, [r3, #16]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	691b      	ldr	r3, [r3, #16]
 800a356:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a35a:	4313      	orrs	r3, r2
 800a35c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800a35e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a360:	4618      	mov	r0, r3
 800a362:	3710      	adds	r7, #16
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a370:	2300      	movs	r3, #0
 800a372:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800a374:	f7ff fdac 	bl	8009ed0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a378:	f7fc ff08 	bl	800718c <HAL_GetTick>
 800a37c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a37e:	e009      	b.n	800a394 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a380:	f7fc ff04 	bl	800718c <HAL_GetTick>
 800a384:	4602      	mov	r2, r0
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	1ad3      	subs	r3, r2, r3
 800a38a:	2b02      	cmp	r3, #2
 800a38c:	d902      	bls.n	800a394 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800a38e:	2303      	movs	r3, #3
 800a390:	73fb      	strb	r3, [r7, #15]
      break;
 800a392:	e004      	b.n	800a39e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a394:	f7ff fdab 	bl	8009eee <LL_RCC_PLLSAI1_IsReady>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d1f0      	bne.n	800a380 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d137      	bne.n	800a414 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800a3a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a3a8:	691b      	ldr	r3, [r3, #16]
 800a3aa:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	021b      	lsls	r3, r3, #8
 800a3b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800a3bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a3c0:	691b      	ldr	r3, [r3, #16]
 800a3c2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	68db      	ldr	r3, [r3, #12]
 800a3ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800a3d2:	f7ff fd6e 	bl	8009eb2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3d6:	f7fc fed9 	bl	800718c <HAL_GetTick>
 800a3da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a3dc:	e009      	b.n	800a3f2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a3de:	f7fc fed5 	bl	800718c <HAL_GetTick>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	1ad3      	subs	r3, r2, r3
 800a3e8:	2b02      	cmp	r3, #2
 800a3ea:	d902      	bls.n	800a3f2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800a3ec:	2303      	movs	r3, #3
 800a3ee:	73fb      	strb	r3, [r7, #15]
        break;
 800a3f0:	e004      	b.n	800a3fc <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a3f2:	f7ff fd7c 	bl	8009eee <LL_RCC_PLLSAI1_IsReady>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d1f0      	bne.n	800a3de <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800a3fc:	7bfb      	ldrb	r3, [r7, #15]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d108      	bne.n	800a414 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800a402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a406:	691a      	ldr	r2, [r3, #16]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	691b      	ldr	r3, [r3, #16]
 800a40c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a410:	4313      	orrs	r3, r2
 800a412:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800a414:	7bfb      	ldrb	r3, [r7, #15]
}
 800a416:	4618      	mov	r0, r3
 800a418:	3710      	adds	r7, #16
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}

0800a41e <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a41e:	b580      	push	{r7, lr}
 800a420:	b082      	sub	sp, #8
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d101      	bne.n	800a430 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	e090      	b.n	800a552 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a436:	b2db      	uxtb	r3, r3
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d106      	bne.n	800a44a <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f7fc f86b 	bl	8006520 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2202      	movs	r2, #2
 800a44e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	22ca      	movs	r2, #202	; 0xca
 800a458:	625a      	str	r2, [r3, #36]	; 0x24
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	2253      	movs	r2, #83	; 0x53
 800a460:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 faba 	bl	800a9dc <RTC_EnterInitMode>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d009      	beq.n	800a482 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	22ff      	movs	r2, #255	; 0xff
 800a474:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2204      	movs	r2, #4
 800a47a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	e067      	b.n	800a552 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	6812      	ldr	r2, [r2, #0]
 800a48c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a494:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	6899      	ldr	r1, [r3, #8]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	685a      	ldr	r2, [r3, #4]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	691b      	ldr	r3, [r3, #16]
 800a4a4:	431a      	orrs	r2, r3
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	699b      	ldr	r3, [r3, #24]
 800a4aa:	431a      	orrs	r2, r3
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	430a      	orrs	r2, r1
 800a4b2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	687a      	ldr	r2, [r7, #4]
 800a4ba:	68d2      	ldr	r2, [r2, #12]
 800a4bc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	6919      	ldr	r1, [r3, #16]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	041a      	lsls	r2, r3, #16
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	430a      	orrs	r2, r1
 800a4d0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	68da      	ldr	r2, [r3, #12]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a4e0:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f022 0203 	bic.w	r2, r2, #3
 800a4f0:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	69da      	ldr	r2, [r3, #28]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	695b      	ldr	r3, [r3, #20]
 800a500:	431a      	orrs	r2, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	430a      	orrs	r2, r1
 800a508:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	f003 0320 	and.w	r3, r3, #32
 800a514:	2b00      	cmp	r3, #0
 800a516:	d113      	bne.n	800a540 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 fa39 	bl	800a990 <HAL_RTC_WaitForSynchro>
 800a51e:	4603      	mov	r3, r0
 800a520:	2b00      	cmp	r3, #0
 800a522:	d00d      	beq.n	800a540 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	22ff      	movs	r2, #255	; 0xff
 800a52a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2204      	movs	r2, #4
 800a530:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800a53c:	2301      	movs	r3, #1
 800a53e:	e008      	b.n	800a552 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	22ff      	movs	r2, #255	; 0xff
 800a546:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2201      	movs	r2, #1
 800a54c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800a550:	2300      	movs	r3, #0
  }
}
 800a552:	4618      	mov	r0, r3
 800a554:	3708      	adds	r7, #8
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}

0800a55a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a55a:	b590      	push	{r4, r7, lr}
 800a55c:	b087      	sub	sp, #28
 800a55e:	af00      	add	r7, sp, #0
 800a560:	60f8      	str	r0, [r7, #12]
 800a562:	60b9      	str	r1, [r7, #8]
 800a564:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d101      	bne.n	800a574 <HAL_RTC_SetTime+0x1a>
 800a570:	2302      	movs	r3, #2
 800a572:	e0b2      	b.n	800a6da <HAL_RTC_SetTime+0x180>
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2201      	movs	r2, #1
 800a578:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2202      	movs	r2, #2
 800a580:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d126      	bne.n	800a5d8 <HAL_RTC_SetTime+0x7e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a594:	2b00      	cmp	r3, #0
 800a596:	d102      	bne.n	800a59e <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	2200      	movs	r2, #0
 800a59c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f000 fa44 	bl	800aa30 <RTC_ByteToBcd2>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	785b      	ldrb	r3, [r3, #1]
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f000 fa3d 	bl	800aa30 <RTC_ByteToBcd2>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a5ba:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	789b      	ldrb	r3, [r3, #2]
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f000 fa35 	bl	800aa30 <RTC_ByteToBcd2>
 800a5c6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800a5c8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	78db      	ldrb	r3, [r3, #3]
 800a5d0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	617b      	str	r3, [r7, #20]
 800a5d6:	e018      	b.n	800a60a <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	689b      	ldr	r3, [r3, #8]
 800a5de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d102      	bne.n	800a5ec <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	785b      	ldrb	r3, [r3, #1]
 800a5f6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a5f8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800a5fa:	68ba      	ldr	r2, [r7, #8]
 800a5fc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800a5fe:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	78db      	ldrb	r3, [r3, #3]
 800a604:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a606:	4313      	orrs	r3, r2
 800a608:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	22ca      	movs	r2, #202	; 0xca
 800a610:	625a      	str	r2, [r3, #36]	; 0x24
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2253      	movs	r2, #83	; 0x53
 800a618:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	f000 f9de 	bl	800a9dc <RTC_EnterInitMode>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00d      	beq.n	800a642 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	22ff      	movs	r2, #255	; 0xff
 800a62c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2204      	movs	r2, #4
 800a632:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2200      	movs	r2, #0
 800a63a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	e04b      	b.n	800a6da <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a64c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a650:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	689a      	ldr	r2, [r3, #8]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a660:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	6899      	ldr	r1, [r3, #8]
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	68da      	ldr	r2, [r3, #12]
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	691b      	ldr	r3, [r3, #16]
 800a670:	431a      	orrs	r2, r3
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	430a      	orrs	r2, r1
 800a678:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	68da      	ldr	r2, [r3, #12]
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a688:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	f003 0320 	and.w	r3, r3, #32
 800a694:	2b00      	cmp	r3, #0
 800a696:	d113      	bne.n	800a6c0 <HAL_RTC_SetTime+0x166>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a698:	68f8      	ldr	r0, [r7, #12]
 800a69a:	f000 f979 	bl	800a990 <HAL_RTC_WaitForSynchro>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d00d      	beq.n	800a6c0 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	22ff      	movs	r2, #255	; 0xff
 800a6aa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2204      	movs	r2, #4
 800a6b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e00c      	b.n	800a6da <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	22ff      	movs	r2, #255	; 0xff
 800a6c6:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 800a6d8:	2300      	movs	r3, #0
  }
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	371c      	adds	r7, #28
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd90      	pop	{r4, r7, pc}

0800a6e2 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b086      	sub	sp, #24
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	60f8      	str	r0, [r7, #12]
 800a6ea:	60b9      	str	r1, [r7, #8]
 800a6ec:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	691b      	ldr	r3, [r3, #16]
 800a6fe:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a710:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a714:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	0c1b      	lsrs	r3, r3, #16
 800a71a:	b2db      	uxtb	r3, r3
 800a71c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a720:	b2da      	uxtb	r2, r3
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	0a1b      	lsrs	r3, r3, #8
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a730:	b2da      	uxtb	r2, r3
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a73e:	b2da      	uxtb	r2, r3
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	0c1b      	lsrs	r3, r3, #16
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a74e:	b2da      	uxtb	r2, r3
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d11a      	bne.n	800a790 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	4618      	mov	r0, r3
 800a760:	f000 f986 	bl	800aa70 <RTC_Bcd2ToByte>
 800a764:	4603      	mov	r3, r0
 800a766:	461a      	mov	r2, r3
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	785b      	ldrb	r3, [r3, #1]
 800a770:	4618      	mov	r0, r3
 800a772:	f000 f97d 	bl	800aa70 <RTC_Bcd2ToByte>
 800a776:	4603      	mov	r3, r0
 800a778:	461a      	mov	r2, r3
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	789b      	ldrb	r3, [r3, #2]
 800a782:	4618      	mov	r0, r3
 800a784:	f000 f974 	bl	800aa70 <RTC_Bcd2ToByte>
 800a788:	4603      	mov	r3, r0
 800a78a:	461a      	mov	r2, r3
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a790:	2300      	movs	r3, #0
}
 800a792:	4618      	mov	r0, r3
 800a794:	3718      	adds	r7, #24
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a79a:	b590      	push	{r4, r7, lr}
 800a79c:	b087      	sub	sp, #28
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	60f8      	str	r0, [r7, #12]
 800a7a2:	60b9      	str	r1, [r7, #8]
 800a7a4:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d101      	bne.n	800a7b4 <HAL_RTC_SetDate+0x1a>
 800a7b0:	2302      	movs	r3, #2
 800a7b2:	e09c      	b.n	800a8ee <HAL_RTC_SetDate+0x154>
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2202      	movs	r2, #2
 800a7c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d10e      	bne.n	800a7e8 <HAL_RTC_SetDate+0x4e>
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	785b      	ldrb	r3, [r3, #1]
 800a7ce:	f003 0310 	and.w	r3, r3, #16
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d008      	beq.n	800a7e8 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	785b      	ldrb	r3, [r3, #1]
 800a7da:	f023 0310 	bic.w	r3, r3, #16
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	330a      	adds	r3, #10
 800a7e2:	b2da      	uxtb	r2, r3
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d11c      	bne.n	800a828 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	78db      	ldrb	r3, [r3, #3]
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f000 f91c 	bl	800aa30 <RTC_ByteToBcd2>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	785b      	ldrb	r3, [r3, #1]
 800a800:	4618      	mov	r0, r3
 800a802:	f000 f915 	bl	800aa30 <RTC_ByteToBcd2>
 800a806:	4603      	mov	r3, r0
 800a808:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a80a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	789b      	ldrb	r3, [r3, #2]
 800a810:	4618      	mov	r0, r3
 800a812:	f000 f90d 	bl	800aa30 <RTC_ByteToBcd2>
 800a816:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800a818:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a822:	4313      	orrs	r3, r2
 800a824:	617b      	str	r3, [r7, #20]
 800a826:	e00e      	b.n	800a846 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	78db      	ldrb	r3, [r3, #3]
 800a82c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	785b      	ldrb	r3, [r3, #1]
 800a832:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a834:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800a836:	68ba      	ldr	r2, [r7, #8]
 800a838:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800a83a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a842:	4313      	orrs	r3, r2
 800a844:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	22ca      	movs	r2, #202	; 0xca
 800a84c:	625a      	str	r2, [r3, #36]	; 0x24
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	2253      	movs	r2, #83	; 0x53
 800a854:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f000 f8c0 	bl	800a9dc <RTC_EnterInitMode>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d00d      	beq.n	800a87e <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	22ff      	movs	r2, #255	; 0xff
 800a868:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2204      	movs	r2, #4
 800a86e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2200      	movs	r2, #0
 800a876:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800a87a:	2301      	movs	r3, #1
 800a87c:	e037      	b.n	800a8ee <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a888:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a88c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	68da      	ldr	r2, [r3, #12]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a89c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	f003 0320 	and.w	r3, r3, #32
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d113      	bne.n	800a8d4 <HAL_RTC_SetDate+0x13a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a8ac:	68f8      	ldr	r0, [r7, #12]
 800a8ae:	f000 f86f 	bl	800a990 <HAL_RTC_WaitForSynchro>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d00d      	beq.n	800a8d4 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	22ff      	movs	r2, #255	; 0xff
 800a8be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2204      	movs	r2, #4
 800a8c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e00c      	b.n	800a8ee <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	22ff      	movs	r2, #255	; 0xff
 800a8da:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800a8ec:	2300      	movs	r3, #0
  }
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	371c      	adds	r7, #28
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd90      	pop	{r4, r7, pc}

0800a8f6 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a8f6:	b580      	push	{r7, lr}
 800a8f8:	b086      	sub	sp, #24
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	60f8      	str	r0, [r7, #12]
 800a8fe:	60b9      	str	r1, [r7, #8]
 800a900:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a90c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a910:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	0c1b      	lsrs	r3, r3, #16
 800a916:	b2da      	uxtb	r2, r3
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	0a1b      	lsrs	r3, r3, #8
 800a920:	b2db      	uxtb	r3, r3
 800a922:	f003 031f 	and.w	r3, r3, #31
 800a926:	b2da      	uxtb	r2, r3
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a934:	b2da      	uxtb	r2, r3
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	0b5b      	lsrs	r3, r3, #13
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	f003 0307 	and.w	r3, r3, #7
 800a944:	b2da      	uxtb	r2, r3
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d11a      	bne.n	800a986 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	78db      	ldrb	r3, [r3, #3]
 800a954:	4618      	mov	r0, r3
 800a956:	f000 f88b 	bl	800aa70 <RTC_Bcd2ToByte>
 800a95a:	4603      	mov	r3, r0
 800a95c:	461a      	mov	r2, r3
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	785b      	ldrb	r3, [r3, #1]
 800a966:	4618      	mov	r0, r3
 800a968:	f000 f882 	bl	800aa70 <RTC_Bcd2ToByte>
 800a96c:	4603      	mov	r3, r0
 800a96e:	461a      	mov	r2, r3
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	789b      	ldrb	r3, [r3, #2]
 800a978:	4618      	mov	r0, r3
 800a97a:	f000 f879 	bl	800aa70 <RTC_Bcd2ToByte>
 800a97e:	4603      	mov	r3, r0
 800a980:	461a      	mov	r2, r3
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a986:	2300      	movs	r3, #0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3718      	adds	r7, #24
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68da      	ldr	r2, [r3, #12]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a9a6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800a9a8:	f7fc fbf0 	bl	800718c <HAL_GetTick>
 800a9ac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a9ae:	e009      	b.n	800a9c4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a9b0:	f7fc fbec 	bl	800718c <HAL_GetTick>
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	1ad3      	subs	r3, r2, r3
 800a9ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a9be:	d901      	bls.n	800a9c4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800a9c0:	2303      	movs	r3, #3
 800a9c2:	e007      	b.n	800a9d4 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	68db      	ldr	r3, [r3, #12]
 800a9ca:	f003 0320 	and.w	r3, r3, #32
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d0ee      	beq.n	800a9b0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800a9d2:	2300      	movs	r3, #0
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3710      	adds	r7, #16
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	68db      	ldr	r3, [r3, #12]
 800a9ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d119      	bne.n	800aa26 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a9fa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a9fc:	f7fc fbc6 	bl	800718c <HAL_GetTick>
 800aa00:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800aa02:	e009      	b.n	800aa18 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800aa04:	f7fc fbc2 	bl	800718c <HAL_GetTick>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	1ad3      	subs	r3, r2, r3
 800aa0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa12:	d901      	bls.n	800aa18 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800aa14:	2303      	movs	r3, #3
 800aa16:	e007      	b.n	800aa28 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	68db      	ldr	r3, [r3, #12]
 800aa1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d0ee      	beq.n	800aa04 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800aa26:	2300      	movs	r3, #0
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3710      	adds	r7, #16
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b085      	sub	sp, #20
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	4603      	mov	r3, r0
 800aa38:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800aa3e:	79fb      	ldrb	r3, [r7, #7]
 800aa40:	72fb      	strb	r3, [r7, #11]

  while(Param >= 10U)
 800aa42:	e005      	b.n	800aa50 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	3301      	adds	r3, #1
 800aa48:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800aa4a:	7afb      	ldrb	r3, [r7, #11]
 800aa4c:	3b0a      	subs	r3, #10
 800aa4e:	72fb      	strb	r3, [r7, #11]
  while(Param >= 10U)
 800aa50:	7afb      	ldrb	r3, [r7, #11]
 800aa52:	2b09      	cmp	r3, #9
 800aa54:	d8f6      	bhi.n	800aa44 <RTC_ByteToBcd2+0x14>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	011b      	lsls	r3, r3, #4
 800aa5c:	b2da      	uxtb	r2, r3
 800aa5e:	7afb      	ldrb	r3, [r7, #11]
 800aa60:	4313      	orrs	r3, r2
 800aa62:	b2db      	uxtb	r3, r3
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3714      	adds	r7, #20
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b085      	sub	sp, #20
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	4603      	mov	r3, r0
 800aa78:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800aa7a:	79fb      	ldrb	r3, [r7, #7]
 800aa7c:	091b      	lsrs	r3, r3, #4
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	461a      	mov	r2, r3
 800aa82:	4613      	mov	r3, r2
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	4413      	add	r3, r2
 800aa88:	005b      	lsls	r3, r3, #1
 800aa8a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	b2da      	uxtb	r2, r3
 800aa90:	79fb      	ldrb	r3, [r7, #7]
 800aa92:	f003 030f 	and.w	r3, r3, #15
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	4413      	add	r3, r2
 800aa9a:	b2db      	uxtb	r3, r3
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3714      	adds	r7, #20
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d101      	bne.n	800aabe <HAL_RTCEx_EnableBypassShadow+0x16>
 800aaba:	2302      	movs	r3, #2
 800aabc:	e024      	b.n	800ab08 <HAL_RTCEx_EnableBypassShadow+0x60>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2201      	movs	r2, #1
 800aac2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2202      	movs	r2, #2
 800aaca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	22ca      	movs	r2, #202	; 0xca
 800aad4:	625a      	str	r2, [r3, #36]	; 0x24
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2253      	movs	r2, #83	; 0x53
 800aadc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	689a      	ldr	r2, [r3, #8]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f042 0220 	orr.w	r2, r2, #32
 800aaec:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	22ff      	movs	r2, #255	; 0xff
 800aaf4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2201      	movs	r2, #1
 800aafa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	370c      	adds	r7, #12
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d101      	bne.n	800ab26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ab22:	2301      	movs	r3, #1
 800ab24:	e095      	b.n	800ac52 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d108      	bne.n	800ab40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ab36:	d009      	beq.n	800ab4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	61da      	str	r2, [r3, #28]
 800ab3e:	e005      	b.n	800ab4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2200      	movs	r2, #0
 800ab44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d106      	bne.n	800ab6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2200      	movs	r2, #0
 800ab62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f7fb fd2c 	bl	80065c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2202      	movs	r2, #2
 800ab70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ab8c:	d902      	bls.n	800ab94 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	60fb      	str	r3, [r7, #12]
 800ab92:	e002      	b.n	800ab9a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ab94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800aba2:	d007      	beq.n	800abb4 <HAL_SPI_Init+0xa0>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800abac:	d002      	beq.n	800abb4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800abc4:	431a      	orrs	r2, r3
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	691b      	ldr	r3, [r3, #16]
 800abca:	f003 0302 	and.w	r3, r3, #2
 800abce:	431a      	orrs	r2, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	695b      	ldr	r3, [r3, #20]
 800abd4:	f003 0301 	and.w	r3, r3, #1
 800abd8:	431a      	orrs	r2, r3
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	699b      	ldr	r3, [r3, #24]
 800abde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800abe2:	431a      	orrs	r2, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	69db      	ldr	r3, [r3, #28]
 800abe8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800abec:	431a      	orrs	r2, r3
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6a1b      	ldr	r3, [r3, #32]
 800abf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abf6:	ea42 0103 	orr.w	r1, r2, r3
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abfe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	430a      	orrs	r2, r1
 800ac08:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	699b      	ldr	r3, [r3, #24]
 800ac0e:	0c1b      	lsrs	r3, r3, #16
 800ac10:	f003 0204 	and.w	r2, r3, #4
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac18:	f003 0310 	and.w	r3, r3, #16
 800ac1c:	431a      	orrs	r2, r3
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac22:	f003 0308 	and.w	r3, r3, #8
 800ac26:	431a      	orrs	r2, r3
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ac30:	ea42 0103 	orr.w	r1, r2, r3
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	430a      	orrs	r2, r1
 800ac40:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ac50:	2300      	movs	r3, #0
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3710      	adds	r7, #16
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b088      	sub	sp, #32
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	60f8      	str	r0, [r7, #12]
 800ac62:	60b9      	str	r1, [r7, #8]
 800ac64:	603b      	str	r3, [r7, #0]
 800ac66:	4613      	mov	r3, r2
 800ac68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d101      	bne.n	800ac7c <HAL_SPI_Transmit+0x22>
 800ac78:	2302      	movs	r3, #2
 800ac7a:	e158      	b.n	800af2e <HAL_SPI_Transmit+0x2d4>
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	2201      	movs	r2, #1
 800ac80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ac84:	f7fc fa82 	bl	800718c <HAL_GetTick>
 800ac88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ac8a:	88fb      	ldrh	r3, [r7, #6]
 800ac8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ac94:	b2db      	uxtb	r3, r3
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d002      	beq.n	800aca0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ac9a:	2302      	movs	r3, #2
 800ac9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ac9e:	e13d      	b.n	800af1c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d002      	beq.n	800acac <HAL_SPI_Transmit+0x52>
 800aca6:	88fb      	ldrh	r3, [r7, #6]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d102      	bne.n	800acb2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800acac:	2301      	movs	r3, #1
 800acae:	77fb      	strb	r3, [r7, #31]
    goto error;
 800acb0:	e134      	b.n	800af1c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2203      	movs	r2, #3
 800acb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2200      	movs	r2, #0
 800acbe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	68ba      	ldr	r2, [r7, #8]
 800acc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	88fa      	ldrh	r2, [r7, #6]
 800acca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	88fa      	ldrh	r2, [r7, #6]
 800acd0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2200      	movs	r2, #0
 800acd6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2200      	movs	r2, #0
 800acdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2200      	movs	r2, #0
 800ace4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2200      	movs	r2, #0
 800acec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2200      	movs	r2, #0
 800acf2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800acfc:	d10f      	bne.n	800ad1e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad28:	2b40      	cmp	r3, #64	; 0x40
 800ad2a:	d007      	beq.n	800ad3c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	68db      	ldr	r3, [r3, #12]
 800ad40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ad44:	d94b      	bls.n	800adde <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d002      	beq.n	800ad54 <HAL_SPI_Transmit+0xfa>
 800ad4e:	8afb      	ldrh	r3, [r7, #22]
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d13e      	bne.n	800add2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad58:	881a      	ldrh	r2, [r3, #0]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad64:	1c9a      	adds	r2, r3, #2
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	3b01      	subs	r3, #1
 800ad72:	b29a      	uxth	r2, r3
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ad78:	e02b      	b.n	800add2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	689b      	ldr	r3, [r3, #8]
 800ad80:	f003 0302 	and.w	r3, r3, #2
 800ad84:	2b02      	cmp	r3, #2
 800ad86:	d112      	bne.n	800adae <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad8c:	881a      	ldrh	r2, [r3, #0]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad98:	1c9a      	adds	r2, r3, #2
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	3b01      	subs	r3, #1
 800ada6:	b29a      	uxth	r2, r3
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	87da      	strh	r2, [r3, #62]	; 0x3e
 800adac:	e011      	b.n	800add2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800adae:	f7fc f9ed 	bl	800718c <HAL_GetTick>
 800adb2:	4602      	mov	r2, r0
 800adb4:	69bb      	ldr	r3, [r7, #24]
 800adb6:	1ad3      	subs	r3, r2, r3
 800adb8:	683a      	ldr	r2, [r7, #0]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d803      	bhi.n	800adc6 <HAL_SPI_Transmit+0x16c>
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adc4:	d102      	bne.n	800adcc <HAL_SPI_Transmit+0x172>
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d102      	bne.n	800add2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800adcc:	2303      	movs	r3, #3
 800adce:	77fb      	strb	r3, [r7, #31]
          goto error;
 800add0:	e0a4      	b.n	800af1c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800add6:	b29b      	uxth	r3, r3
 800add8:	2b00      	cmp	r3, #0
 800adda:	d1ce      	bne.n	800ad7a <HAL_SPI_Transmit+0x120>
 800addc:	e07c      	b.n	800aed8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d002      	beq.n	800adec <HAL_SPI_Transmit+0x192>
 800ade6:	8afb      	ldrh	r3, [r7, #22]
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d170      	bne.n	800aece <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d912      	bls.n	800ae1c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adfa:	881a      	ldrh	r2, [r3, #0]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae06:	1c9a      	adds	r2, r3, #2
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	3b02      	subs	r3, #2
 800ae14:	b29a      	uxth	r2, r3
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ae1a:	e058      	b.n	800aece <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	330c      	adds	r3, #12
 800ae26:	7812      	ldrb	r2, [r2, #0]
 800ae28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae2e:	1c5a      	adds	r2, r3, #1
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	3b01      	subs	r3, #1
 800ae3c:	b29a      	uxth	r2, r3
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800ae42:	e044      	b.n	800aece <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	689b      	ldr	r3, [r3, #8]
 800ae4a:	f003 0302 	and.w	r3, r3, #2
 800ae4e:	2b02      	cmp	r3, #2
 800ae50:	d12b      	bne.n	800aeaa <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d912      	bls.n	800ae82 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae60:	881a      	ldrh	r2, [r3, #0]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae6c:	1c9a      	adds	r2, r3, #2
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	3b02      	subs	r3, #2
 800ae7a:	b29a      	uxth	r2, r3
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ae80:	e025      	b.n	800aece <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	330c      	adds	r3, #12
 800ae8c:	7812      	ldrb	r2, [r2, #0]
 800ae8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae94:	1c5a      	adds	r2, r3, #1
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	3b01      	subs	r3, #1
 800aea2:	b29a      	uxth	r2, r3
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aea8:	e011      	b.n	800aece <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aeaa:	f7fc f96f 	bl	800718c <HAL_GetTick>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	69bb      	ldr	r3, [r7, #24]
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	683a      	ldr	r2, [r7, #0]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d803      	bhi.n	800aec2 <HAL_SPI_Transmit+0x268>
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aec0:	d102      	bne.n	800aec8 <HAL_SPI_Transmit+0x26e>
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d102      	bne.n	800aece <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800aec8:	2303      	movs	r3, #3
 800aeca:	77fb      	strb	r3, [r7, #31]
          goto error;
 800aecc:	e026      	b.n	800af1c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d1b5      	bne.n	800ae44 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aed8:	69ba      	ldr	r2, [r7, #24]
 800aeda:	6839      	ldr	r1, [r7, #0]
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	f000 f941 	bl	800b164 <SPI_EndRxTxTransaction>
 800aee2:	4603      	mov	r3, r0
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d002      	beq.n	800aeee <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2220      	movs	r2, #32
 800aeec:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d10a      	bne.n	800af0c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aef6:	2300      	movs	r3, #0
 800aef8:	613b      	str	r3, [r7, #16]
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	68db      	ldr	r3, [r3, #12]
 800af00:	613b      	str	r3, [r7, #16]
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	613b      	str	r3, [r7, #16]
 800af0a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af10:	2b00      	cmp	r3, #0
 800af12:	d002      	beq.n	800af1a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800af14:	2301      	movs	r3, #1
 800af16:	77fb      	strb	r3, [r7, #31]
 800af18:	e000      	b.n	800af1c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800af1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2201      	movs	r2, #1
 800af20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2200      	movs	r2, #0
 800af28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800af2c:	7ffb      	ldrb	r3, [r7, #31]
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3720      	adds	r7, #32
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
	...

0800af38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b088      	sub	sp, #32
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	603b      	str	r3, [r7, #0]
 800af44:	4613      	mov	r3, r2
 800af46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800af48:	f7fc f920 	bl	800718c <HAL_GetTick>
 800af4c:	4602      	mov	r2, r0
 800af4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af50:	1a9b      	subs	r3, r3, r2
 800af52:	683a      	ldr	r2, [r7, #0]
 800af54:	4413      	add	r3, r2
 800af56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800af58:	f7fc f918 	bl	800718c <HAL_GetTick>
 800af5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800af5e:	4b39      	ldr	r3, [pc, #228]	; (800b044 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	015b      	lsls	r3, r3, #5
 800af64:	0d1b      	lsrs	r3, r3, #20
 800af66:	69fa      	ldr	r2, [r7, #28]
 800af68:	fb02 f303 	mul.w	r3, r2, r3
 800af6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800af6e:	e054      	b.n	800b01a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af76:	d050      	beq.n	800b01a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800af78:	f7fc f908 	bl	800718c <HAL_GetTick>
 800af7c:	4602      	mov	r2, r0
 800af7e:	69bb      	ldr	r3, [r7, #24]
 800af80:	1ad3      	subs	r3, r2, r3
 800af82:	69fa      	ldr	r2, [r7, #28]
 800af84:	429a      	cmp	r2, r3
 800af86:	d902      	bls.n	800af8e <SPI_WaitFlagStateUntilTimeout+0x56>
 800af88:	69fb      	ldr	r3, [r7, #28]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d13d      	bne.n	800b00a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	685a      	ldr	r2, [r3, #4]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800af9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800afa6:	d111      	bne.n	800afcc <SPI_WaitFlagStateUntilTimeout+0x94>
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	689b      	ldr	r3, [r3, #8]
 800afac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afb0:	d004      	beq.n	800afbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afba:	d107      	bne.n	800afcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800afca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afd4:	d10f      	bne.n	800aff6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800afe4:	601a      	str	r2, [r3, #0]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aff4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2201      	movs	r2, #1
 800affa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2200      	movs	r2, #0
 800b002:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b006:	2303      	movs	r3, #3
 800b008:	e017      	b.n	800b03a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d101      	bne.n	800b014 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b010:	2300      	movs	r3, #0
 800b012:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	3b01      	subs	r3, #1
 800b018:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	689a      	ldr	r2, [r3, #8]
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	4013      	ands	r3, r2
 800b024:	68ba      	ldr	r2, [r7, #8]
 800b026:	429a      	cmp	r2, r3
 800b028:	bf0c      	ite	eq
 800b02a:	2301      	moveq	r3, #1
 800b02c:	2300      	movne	r3, #0
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	461a      	mov	r2, r3
 800b032:	79fb      	ldrb	r3, [r7, #7]
 800b034:	429a      	cmp	r2, r3
 800b036:	d19b      	bne.n	800af70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b038:	2300      	movs	r3, #0
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3720      	adds	r7, #32
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	20000014 	.word	0x20000014

0800b048 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b088      	sub	sp, #32
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	607a      	str	r2, [r7, #4]
 800b054:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b056:	f7fc f899 	bl	800718c <HAL_GetTick>
 800b05a:	4602      	mov	r2, r0
 800b05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b05e:	1a9b      	subs	r3, r3, r2
 800b060:	683a      	ldr	r2, [r7, #0]
 800b062:	4413      	add	r3, r2
 800b064:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b066:	f7fc f891 	bl	800718c <HAL_GetTick>
 800b06a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b06c:	4b3c      	ldr	r3, [pc, #240]	; (800b160 <SPI_WaitFifoStateUntilTimeout+0x118>)
 800b06e:	681a      	ldr	r2, [r3, #0]
 800b070:	4613      	mov	r3, r2
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	4413      	add	r3, r2
 800b076:	00da      	lsls	r2, r3, #3
 800b078:	1ad3      	subs	r3, r2, r3
 800b07a:	0d1b      	lsrs	r3, r3, #20
 800b07c:	69fa      	ldr	r2, [r7, #28]
 800b07e:	fb02 f303 	mul.w	r3, r2, r3
 800b082:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800b084:	e05f      	b.n	800b146 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b08c:	d106      	bne.n	800b09c <SPI_WaitFifoStateUntilTimeout+0x54>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d103      	bne.n	800b09c <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	330c      	adds	r3, #12
 800b09a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0a2:	d050      	beq.n	800b146 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b0a4:	f7fc f872 	bl	800718c <HAL_GetTick>
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	69bb      	ldr	r3, [r7, #24]
 800b0ac:	1ad3      	subs	r3, r2, r3
 800b0ae:	69fa      	ldr	r2, [r7, #28]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d902      	bls.n	800b0ba <SPI_WaitFifoStateUntilTimeout+0x72>
 800b0b4:	69fb      	ldr	r3, [r7, #28]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d13d      	bne.n	800b136 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	685a      	ldr	r2, [r3, #4]
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b0c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b0d2:	d111      	bne.n	800b0f8 <SPI_WaitFifoStateUntilTimeout+0xb0>
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0dc:	d004      	beq.n	800b0e8 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0e6:	d107      	bne.n	800b0f8 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b0f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b100:	d10f      	bne.n	800b122 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b110:	601a      	str	r2, [r3, #0]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b120:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2201      	movs	r2, #1
 800b126:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2200      	movs	r2, #0
 800b12e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b132:	2303      	movs	r3, #3
 800b134:	e010      	b.n	800b158 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d101      	bne.n	800b140 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 800b13c:	2300      	movs	r3, #0
 800b13e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	3b01      	subs	r3, #1
 800b144:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	689a      	ldr	r2, [r3, #8]
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	4013      	ands	r3, r2
 800b150:	687a      	ldr	r2, [r7, #4]
 800b152:	429a      	cmp	r2, r3
 800b154:	d197      	bne.n	800b086 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800b156:	2300      	movs	r3, #0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3720      	adds	r7, #32
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	20000014 	.word	0x20000014

0800b164 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b086      	sub	sp, #24
 800b168:	af02      	add	r7, sp, #8
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	60b9      	str	r1, [r7, #8]
 800b16e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	9300      	str	r3, [sp, #0]
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	2200      	movs	r2, #0
 800b178:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	f7ff ff63 	bl	800b048 <SPI_WaitFifoStateUntilTimeout>
 800b182:	4603      	mov	r3, r0
 800b184:	2b00      	cmp	r3, #0
 800b186:	d007      	beq.n	800b198 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b18c:	f043 0220 	orr.w	r2, r3, #32
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b194:	2303      	movs	r3, #3
 800b196:	e027      	b.n	800b1e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	9300      	str	r3, [sp, #0]
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	2180      	movs	r1, #128	; 0x80
 800b1a2:	68f8      	ldr	r0, [r7, #12]
 800b1a4:	f7ff fec8 	bl	800af38 <SPI_WaitFlagStateUntilTimeout>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d007      	beq.n	800b1be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1b2:	f043 0220 	orr.w	r2, r3, #32
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b1ba:	2303      	movs	r3, #3
 800b1bc:	e014      	b.n	800b1e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	9300      	str	r3, [sp, #0]
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b1ca:	68f8      	ldr	r0, [r7, #12]
 800b1cc:	f7ff ff3c 	bl	800b048 <SPI_WaitFifoStateUntilTimeout>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d007      	beq.n	800b1e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1da:	f043 0220 	orr.w	r2, r3, #32
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b1e2:	2303      	movs	r3, #3
 800b1e4:	e000      	b.n	800b1e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b1e6:	2300      	movs	r3, #0
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3710      	adds	r7, #16
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d101      	bne.n	800b202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b1fe:	2301      	movs	r3, #1
 800b200:	e049      	b.n	800b296 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b208:	b2db      	uxtb	r3, r3
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d106      	bne.n	800b21c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f7fb fa04 	bl	8006624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2202      	movs	r2, #2
 800b220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	3304      	adds	r3, #4
 800b22c:	4619      	mov	r1, r3
 800b22e:	4610      	mov	r0, r2
 800b230:	f000 fd5a 	bl	800bce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2201      	movs	r2, #1
 800b238:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2201      	movs	r2, #1
 800b240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2201      	movs	r2, #1
 800b248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2201      	movs	r2, #1
 800b250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2201      	movs	r2, #1
 800b258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2201      	movs	r2, #1
 800b260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2201      	movs	r2, #1
 800b268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2201      	movs	r2, #1
 800b270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2201      	movs	r2, #1
 800b278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2201      	movs	r2, #1
 800b280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2201      	movs	r2, #1
 800b288:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2201      	movs	r2, #1
 800b290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b294:	2300      	movs	r3, #0
}
 800b296:	4618      	mov	r0, r3
 800b298:	3708      	adds	r7, #8
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
	...

0800b2a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b085      	sub	sp, #20
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d001      	beq.n	800b2b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e036      	b.n	800b326 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2202      	movs	r2, #2
 800b2bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	68da      	ldr	r2, [r3, #12]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f042 0201 	orr.w	r2, r2, #1
 800b2ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4a17      	ldr	r2, [pc, #92]	; (800b334 <HAL_TIM_Base_Start_IT+0x94>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d004      	beq.n	800b2e4 <HAL_TIM_Base_Start_IT+0x44>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2e2:	d115      	bne.n	800b310 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	689a      	ldr	r2, [r3, #8]
 800b2ea:	4b13      	ldr	r3, [pc, #76]	; (800b338 <HAL_TIM_Base_Start_IT+0x98>)
 800b2ec:	4013      	ands	r3, r2
 800b2ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2b06      	cmp	r3, #6
 800b2f4:	d015      	beq.n	800b322 <HAL_TIM_Base_Start_IT+0x82>
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2fc:	d011      	beq.n	800b322 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	681a      	ldr	r2, [r3, #0]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f042 0201 	orr.w	r2, r2, #1
 800b30c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b30e:	e008      	b.n	800b322 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f042 0201 	orr.w	r2, r2, #1
 800b31e:	601a      	str	r2, [r3, #0]
 800b320:	e000      	b.n	800b324 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b322:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b324:	2300      	movs	r3, #0
}
 800b326:	4618      	mov	r0, r3
 800b328:	3714      	adds	r7, #20
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	40012c00 	.word	0x40012c00
 800b338:	00010007 	.word	0x00010007

0800b33c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d101      	bne.n	800b34e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b34a:	2301      	movs	r3, #1
 800b34c:	e049      	b.n	800b3e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b354:	b2db      	uxtb	r3, r3
 800b356:	2b00      	cmp	r3, #0
 800b358:	d106      	bne.n	800b368 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2200      	movs	r2, #0
 800b35e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 f841 	bl	800b3ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2202      	movs	r2, #2
 800b36c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	3304      	adds	r3, #4
 800b378:	4619      	mov	r1, r3
 800b37a:	4610      	mov	r0, r2
 800b37c:	f000 fcb4 	bl	800bce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2201      	movs	r2, #1
 800b384:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2201      	movs	r2, #1
 800b38c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2201      	movs	r2, #1
 800b394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2201      	movs	r2, #1
 800b3dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b3e0:	2300      	movs	r3, #0
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3708      	adds	r7, #8
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b3ea:	b480      	push	{r7}
 800b3ec:	b083      	sub	sp, #12
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b3f2:	bf00      	nop
 800b3f4:	370c      	adds	r7, #12
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr
	...

0800b400 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d109      	bne.n	800b424 <HAL_TIM_PWM_Start+0x24>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b416:	b2db      	uxtb	r3, r3
 800b418:	2b01      	cmp	r3, #1
 800b41a:	bf14      	ite	ne
 800b41c:	2301      	movne	r3, #1
 800b41e:	2300      	moveq	r3, #0
 800b420:	b2db      	uxtb	r3, r3
 800b422:	e03c      	b.n	800b49e <HAL_TIM_PWM_Start+0x9e>
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	2b04      	cmp	r3, #4
 800b428:	d109      	bne.n	800b43e <HAL_TIM_PWM_Start+0x3e>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b430:	b2db      	uxtb	r3, r3
 800b432:	2b01      	cmp	r3, #1
 800b434:	bf14      	ite	ne
 800b436:	2301      	movne	r3, #1
 800b438:	2300      	moveq	r3, #0
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	e02f      	b.n	800b49e <HAL_TIM_PWM_Start+0x9e>
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	2b08      	cmp	r3, #8
 800b442:	d109      	bne.n	800b458 <HAL_TIM_PWM_Start+0x58>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b44a:	b2db      	uxtb	r3, r3
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	bf14      	ite	ne
 800b450:	2301      	movne	r3, #1
 800b452:	2300      	moveq	r3, #0
 800b454:	b2db      	uxtb	r3, r3
 800b456:	e022      	b.n	800b49e <HAL_TIM_PWM_Start+0x9e>
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	2b0c      	cmp	r3, #12
 800b45c:	d109      	bne.n	800b472 <HAL_TIM_PWM_Start+0x72>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b464:	b2db      	uxtb	r3, r3
 800b466:	2b01      	cmp	r3, #1
 800b468:	bf14      	ite	ne
 800b46a:	2301      	movne	r3, #1
 800b46c:	2300      	moveq	r3, #0
 800b46e:	b2db      	uxtb	r3, r3
 800b470:	e015      	b.n	800b49e <HAL_TIM_PWM_Start+0x9e>
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	2b10      	cmp	r3, #16
 800b476:	d109      	bne.n	800b48c <HAL_TIM_PWM_Start+0x8c>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	2b01      	cmp	r3, #1
 800b482:	bf14      	ite	ne
 800b484:	2301      	movne	r3, #1
 800b486:	2300      	moveq	r3, #0
 800b488:	b2db      	uxtb	r3, r3
 800b48a:	e008      	b.n	800b49e <HAL_TIM_PWM_Start+0x9e>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b492:	b2db      	uxtb	r3, r3
 800b494:	2b01      	cmp	r3, #1
 800b496:	bf14      	ite	ne
 800b498:	2301      	movne	r3, #1
 800b49a:	2300      	moveq	r3, #0
 800b49c:	b2db      	uxtb	r3, r3
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d001      	beq.n	800b4a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	e079      	b.n	800b59a <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d104      	bne.n	800b4b6 <HAL_TIM_PWM_Start+0xb6>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2202      	movs	r2, #2
 800b4b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b4b4:	e023      	b.n	800b4fe <HAL_TIM_PWM_Start+0xfe>
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	2b04      	cmp	r3, #4
 800b4ba:	d104      	bne.n	800b4c6 <HAL_TIM_PWM_Start+0xc6>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2202      	movs	r2, #2
 800b4c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b4c4:	e01b      	b.n	800b4fe <HAL_TIM_PWM_Start+0xfe>
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	2b08      	cmp	r3, #8
 800b4ca:	d104      	bne.n	800b4d6 <HAL_TIM_PWM_Start+0xd6>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2202      	movs	r2, #2
 800b4d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b4d4:	e013      	b.n	800b4fe <HAL_TIM_PWM_Start+0xfe>
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	2b0c      	cmp	r3, #12
 800b4da:	d104      	bne.n	800b4e6 <HAL_TIM_PWM_Start+0xe6>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2202      	movs	r2, #2
 800b4e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b4e4:	e00b      	b.n	800b4fe <HAL_TIM_PWM_Start+0xfe>
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	2b10      	cmp	r3, #16
 800b4ea:	d104      	bne.n	800b4f6 <HAL_TIM_PWM_Start+0xf6>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2202      	movs	r2, #2
 800b4f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b4f4:	e003      	b.n	800b4fe <HAL_TIM_PWM_Start+0xfe>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2202      	movs	r2, #2
 800b4fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	2201      	movs	r2, #1
 800b504:	6839      	ldr	r1, [r7, #0]
 800b506:	4618      	mov	r0, r3
 800b508:	f000 ff6c 	bl	800c3e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a24      	ldr	r2, [pc, #144]	; (800b5a4 <HAL_TIM_PWM_Start+0x1a4>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d009      	beq.n	800b52a <HAL_TIM_PWM_Start+0x12a>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4a23      	ldr	r2, [pc, #140]	; (800b5a8 <HAL_TIM_PWM_Start+0x1a8>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d004      	beq.n	800b52a <HAL_TIM_PWM_Start+0x12a>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4a21      	ldr	r2, [pc, #132]	; (800b5ac <HAL_TIM_PWM_Start+0x1ac>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d101      	bne.n	800b52e <HAL_TIM_PWM_Start+0x12e>
 800b52a:	2301      	movs	r3, #1
 800b52c:	e000      	b.n	800b530 <HAL_TIM_PWM_Start+0x130>
 800b52e:	2300      	movs	r3, #0
 800b530:	2b00      	cmp	r3, #0
 800b532:	d007      	beq.n	800b544 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b542:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4a16      	ldr	r2, [pc, #88]	; (800b5a4 <HAL_TIM_PWM_Start+0x1a4>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d004      	beq.n	800b558 <HAL_TIM_PWM_Start+0x158>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b556:	d115      	bne.n	800b584 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	689a      	ldr	r2, [r3, #8]
 800b55e:	4b14      	ldr	r3, [pc, #80]	; (800b5b0 <HAL_TIM_PWM_Start+0x1b0>)
 800b560:	4013      	ands	r3, r2
 800b562:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2b06      	cmp	r3, #6
 800b568:	d015      	beq.n	800b596 <HAL_TIM_PWM_Start+0x196>
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b570:	d011      	beq.n	800b596 <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	681a      	ldr	r2, [r3, #0]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f042 0201 	orr.w	r2, r2, #1
 800b580:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b582:	e008      	b.n	800b596 <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f042 0201 	orr.w	r2, r2, #1
 800b592:	601a      	str	r2, [r3, #0]
 800b594:	e000      	b.n	800b598 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b596:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3710      	adds	r7, #16
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	40012c00 	.word	0x40012c00
 800b5a8:	40014400 	.word	0x40014400
 800b5ac:	40014800 	.word	0x40014800
 800b5b0:	00010007 	.word	0x00010007

0800b5b4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b082      	sub	sp, #8
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	6839      	ldr	r1, [r7, #0]
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f000 ff0c 	bl	800c3e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a39      	ldr	r2, [pc, #228]	; (800b6b8 <HAL_TIM_PWM_Stop+0x104>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d009      	beq.n	800b5ea <HAL_TIM_PWM_Stop+0x36>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a38      	ldr	r2, [pc, #224]	; (800b6bc <HAL_TIM_PWM_Stop+0x108>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d004      	beq.n	800b5ea <HAL_TIM_PWM_Stop+0x36>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4a36      	ldr	r2, [pc, #216]	; (800b6c0 <HAL_TIM_PWM_Stop+0x10c>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d101      	bne.n	800b5ee <HAL_TIM_PWM_Stop+0x3a>
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	e000      	b.n	800b5f0 <HAL_TIM_PWM_Stop+0x3c>
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d017      	beq.n	800b624 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	6a1a      	ldr	r2, [r3, #32]
 800b5fa:	f241 1311 	movw	r3, #4369	; 0x1111
 800b5fe:	4013      	ands	r3, r2
 800b600:	2b00      	cmp	r3, #0
 800b602:	d10f      	bne.n	800b624 <HAL_TIM_PWM_Stop+0x70>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	6a1a      	ldr	r2, [r3, #32]
 800b60a:	f240 4344 	movw	r3, #1092	; 0x444
 800b60e:	4013      	ands	r3, r2
 800b610:	2b00      	cmp	r3, #0
 800b612:	d107      	bne.n	800b624 <HAL_TIM_PWM_Stop+0x70>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b622:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	6a1a      	ldr	r2, [r3, #32]
 800b62a:	f241 1311 	movw	r3, #4369	; 0x1111
 800b62e:	4013      	ands	r3, r2
 800b630:	2b00      	cmp	r3, #0
 800b632:	d10f      	bne.n	800b654 <HAL_TIM_PWM_Stop+0xa0>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	6a1a      	ldr	r2, [r3, #32]
 800b63a:	f240 4344 	movw	r3, #1092	; 0x444
 800b63e:	4013      	ands	r3, r2
 800b640:	2b00      	cmp	r3, #0
 800b642:	d107      	bne.n	800b654 <HAL_TIM_PWM_Stop+0xa0>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	681a      	ldr	r2, [r3, #0]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f022 0201 	bic.w	r2, r2, #1
 800b652:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d104      	bne.n	800b664 <HAL_TIM_PWM_Stop+0xb0>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2201      	movs	r2, #1
 800b65e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b662:	e023      	b.n	800b6ac <HAL_TIM_PWM_Stop+0xf8>
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	2b04      	cmp	r3, #4
 800b668:	d104      	bne.n	800b674 <HAL_TIM_PWM_Stop+0xc0>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2201      	movs	r2, #1
 800b66e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b672:	e01b      	b.n	800b6ac <HAL_TIM_PWM_Stop+0xf8>
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	2b08      	cmp	r3, #8
 800b678:	d104      	bne.n	800b684 <HAL_TIM_PWM_Stop+0xd0>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2201      	movs	r2, #1
 800b67e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b682:	e013      	b.n	800b6ac <HAL_TIM_PWM_Stop+0xf8>
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	2b0c      	cmp	r3, #12
 800b688:	d104      	bne.n	800b694 <HAL_TIM_PWM_Stop+0xe0>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2201      	movs	r2, #1
 800b68e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b692:	e00b      	b.n	800b6ac <HAL_TIM_PWM_Stop+0xf8>
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	2b10      	cmp	r3, #16
 800b698:	d104      	bne.n	800b6a4 <HAL_TIM_PWM_Stop+0xf0>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2201      	movs	r2, #1
 800b69e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b6a2:	e003      	b.n	800b6ac <HAL_TIM_PWM_Stop+0xf8>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800b6ac:	2300      	movs	r3, #0
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3708      	adds	r7, #8
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	40012c00 	.word	0x40012c00
 800b6bc:	40014400 	.word	0x40014400
 800b6c0:	40014800 	.word	0x40014800

0800b6c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	691b      	ldr	r3, [r3, #16]
 800b6d2:	f003 0302 	and.w	r3, r3, #2
 800b6d6:	2b02      	cmp	r3, #2
 800b6d8:	d122      	bne.n	800b720 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	68db      	ldr	r3, [r3, #12]
 800b6e0:	f003 0302 	and.w	r3, r3, #2
 800b6e4:	2b02      	cmp	r3, #2
 800b6e6:	d11b      	bne.n	800b720 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f06f 0202 	mvn.w	r2, #2
 800b6f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	699b      	ldr	r3, [r3, #24]
 800b6fe:	f003 0303 	and.w	r3, r3, #3
 800b702:	2b00      	cmp	r3, #0
 800b704:	d003      	beq.n	800b70e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 facf 	bl	800bcaa <HAL_TIM_IC_CaptureCallback>
 800b70c:	e005      	b.n	800b71a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 fac1 	bl	800bc96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 fad2 	bl	800bcbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2200      	movs	r2, #0
 800b71e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	691b      	ldr	r3, [r3, #16]
 800b726:	f003 0304 	and.w	r3, r3, #4
 800b72a:	2b04      	cmp	r3, #4
 800b72c:	d122      	bne.n	800b774 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	f003 0304 	and.w	r3, r3, #4
 800b738:	2b04      	cmp	r3, #4
 800b73a:	d11b      	bne.n	800b774 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f06f 0204 	mvn.w	r2, #4
 800b744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2202      	movs	r2, #2
 800b74a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	699b      	ldr	r3, [r3, #24]
 800b752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b756:	2b00      	cmp	r3, #0
 800b758:	d003      	beq.n	800b762 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 faa5 	bl	800bcaa <HAL_TIM_IC_CaptureCallback>
 800b760:	e005      	b.n	800b76e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 fa97 	bl	800bc96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 faa8 	bl	800bcbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2200      	movs	r2, #0
 800b772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	691b      	ldr	r3, [r3, #16]
 800b77a:	f003 0308 	and.w	r3, r3, #8
 800b77e:	2b08      	cmp	r3, #8
 800b780:	d122      	bne.n	800b7c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	68db      	ldr	r3, [r3, #12]
 800b788:	f003 0308 	and.w	r3, r3, #8
 800b78c:	2b08      	cmp	r3, #8
 800b78e:	d11b      	bne.n	800b7c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f06f 0208 	mvn.w	r2, #8
 800b798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2204      	movs	r2, #4
 800b79e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	69db      	ldr	r3, [r3, #28]
 800b7a6:	f003 0303 	and.w	r3, r3, #3
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d003      	beq.n	800b7b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 fa7b 	bl	800bcaa <HAL_TIM_IC_CaptureCallback>
 800b7b4:	e005      	b.n	800b7c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 fa6d 	bl	800bc96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f000 fa7e 	bl	800bcbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	691b      	ldr	r3, [r3, #16]
 800b7ce:	f003 0310 	and.w	r3, r3, #16
 800b7d2:	2b10      	cmp	r3, #16
 800b7d4:	d122      	bne.n	800b81c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	68db      	ldr	r3, [r3, #12]
 800b7dc:	f003 0310 	and.w	r3, r3, #16
 800b7e0:	2b10      	cmp	r3, #16
 800b7e2:	d11b      	bne.n	800b81c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f06f 0210 	mvn.w	r2, #16
 800b7ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2208      	movs	r2, #8
 800b7f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	69db      	ldr	r3, [r3, #28]
 800b7fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d003      	beq.n	800b80a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f000 fa51 	bl	800bcaa <HAL_TIM_IC_CaptureCallback>
 800b808:	e005      	b.n	800b816 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 fa43 	bl	800bc96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 fa54 	bl	800bcbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2200      	movs	r2, #0
 800b81a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	691b      	ldr	r3, [r3, #16]
 800b822:	f003 0301 	and.w	r3, r3, #1
 800b826:	2b01      	cmp	r3, #1
 800b828:	d10e      	bne.n	800b848 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	f003 0301 	and.w	r3, r3, #1
 800b834:	2b01      	cmp	r3, #1
 800b836:	d107      	bne.n	800b848 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f06f 0201 	mvn.w	r2, #1
 800b840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f7fa fc7c 	bl	8006140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	691b      	ldr	r3, [r3, #16]
 800b84e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b852:	2b80      	cmp	r3, #128	; 0x80
 800b854:	d10e      	bne.n	800b874 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	68db      	ldr	r3, [r3, #12]
 800b85c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b860:	2b80      	cmp	r3, #128	; 0x80
 800b862:	d107      	bne.n	800b874 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b86c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 fed8 	bl	800c624 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	691b      	ldr	r3, [r3, #16]
 800b87a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b87e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b882:	d10e      	bne.n	800b8a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	68db      	ldr	r3, [r3, #12]
 800b88a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b88e:	2b80      	cmp	r3, #128	; 0x80
 800b890:	d107      	bne.n	800b8a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b89a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f000 fecb 	bl	800c638 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	691b      	ldr	r3, [r3, #16]
 800b8a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8ac:	2b40      	cmp	r3, #64	; 0x40
 800b8ae:	d10e      	bne.n	800b8ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	68db      	ldr	r3, [r3, #12]
 800b8b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8ba:	2b40      	cmp	r3, #64	; 0x40
 800b8bc:	d107      	bne.n	800b8ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b8c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 fa02 	bl	800bcd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	691b      	ldr	r3, [r3, #16]
 800b8d4:	f003 0320 	and.w	r3, r3, #32
 800b8d8:	2b20      	cmp	r3, #32
 800b8da:	d10e      	bne.n	800b8fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	68db      	ldr	r3, [r3, #12]
 800b8e2:	f003 0320 	and.w	r3, r3, #32
 800b8e6:	2b20      	cmp	r3, #32
 800b8e8:	d107      	bne.n	800b8fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f06f 0220 	mvn.w	r2, #32
 800b8f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f000 fe8b 	bl	800c610 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b8fa:	bf00      	nop
 800b8fc:	3708      	adds	r7, #8
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
	...

0800b904 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b916:	2b01      	cmp	r3, #1
 800b918:	d101      	bne.n	800b91e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b91a:	2302      	movs	r3, #2
 800b91c:	e0fd      	b.n	800bb1a <HAL_TIM_PWM_ConfigChannel+0x216>
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2201      	movs	r2, #1
 800b922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2b14      	cmp	r3, #20
 800b92a:	f200 80f0 	bhi.w	800bb0e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800b92e:	a201      	add	r2, pc, #4	; (adr r2, 800b934 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b934:	0800b989 	.word	0x0800b989
 800b938:	0800bb0f 	.word	0x0800bb0f
 800b93c:	0800bb0f 	.word	0x0800bb0f
 800b940:	0800bb0f 	.word	0x0800bb0f
 800b944:	0800b9c9 	.word	0x0800b9c9
 800b948:	0800bb0f 	.word	0x0800bb0f
 800b94c:	0800bb0f 	.word	0x0800bb0f
 800b950:	0800bb0f 	.word	0x0800bb0f
 800b954:	0800ba0b 	.word	0x0800ba0b
 800b958:	0800bb0f 	.word	0x0800bb0f
 800b95c:	0800bb0f 	.word	0x0800bb0f
 800b960:	0800bb0f 	.word	0x0800bb0f
 800b964:	0800ba4b 	.word	0x0800ba4b
 800b968:	0800bb0f 	.word	0x0800bb0f
 800b96c:	0800bb0f 	.word	0x0800bb0f
 800b970:	0800bb0f 	.word	0x0800bb0f
 800b974:	0800ba8d 	.word	0x0800ba8d
 800b978:	0800bb0f 	.word	0x0800bb0f
 800b97c:	0800bb0f 	.word	0x0800bb0f
 800b980:	0800bb0f 	.word	0x0800bb0f
 800b984:	0800bacd 	.word	0x0800bacd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	68b9      	ldr	r1, [r7, #8]
 800b98e:	4618      	mov	r0, r3
 800b990:	f000 fa0e 	bl	800bdb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	699a      	ldr	r2, [r3, #24]
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f042 0208 	orr.w	r2, r2, #8
 800b9a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	699a      	ldr	r2, [r3, #24]
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f022 0204 	bic.w	r2, r2, #4
 800b9b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	6999      	ldr	r1, [r3, #24]
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	691a      	ldr	r2, [r3, #16]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	430a      	orrs	r2, r1
 800b9c4:	619a      	str	r2, [r3, #24]
      break;
 800b9c6:	e0a3      	b.n	800bb10 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	68b9      	ldr	r1, [r7, #8]
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f000 fa6a 	bl	800bea8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	699a      	ldr	r2, [r3, #24]
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b9e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	699a      	ldr	r2, [r3, #24]
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	6999      	ldr	r1, [r3, #24]
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	691b      	ldr	r3, [r3, #16]
 800b9fe:	021a      	lsls	r2, r3, #8
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	430a      	orrs	r2, r1
 800ba06:	619a      	str	r2, [r3, #24]
      break;
 800ba08:	e082      	b.n	800bb10 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	68b9      	ldr	r1, [r7, #8]
 800ba10:	4618      	mov	r0, r3
 800ba12:	f000 fac3 	bl	800bf9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	69da      	ldr	r2, [r3, #28]
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f042 0208 	orr.w	r2, r2, #8
 800ba24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	69da      	ldr	r2, [r3, #28]
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f022 0204 	bic.w	r2, r2, #4
 800ba34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	69d9      	ldr	r1, [r3, #28]
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	691a      	ldr	r2, [r3, #16]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	430a      	orrs	r2, r1
 800ba46:	61da      	str	r2, [r3, #28]
      break;
 800ba48:	e062      	b.n	800bb10 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	68b9      	ldr	r1, [r7, #8]
 800ba50:	4618      	mov	r0, r3
 800ba52:	f000 fb1b 	bl	800c08c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	69da      	ldr	r2, [r3, #28]
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	69da      	ldr	r2, [r3, #28]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	69d9      	ldr	r1, [r3, #28]
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	691b      	ldr	r3, [r3, #16]
 800ba80:	021a      	lsls	r2, r3, #8
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	430a      	orrs	r2, r1
 800ba88:	61da      	str	r2, [r3, #28]
      break;
 800ba8a:	e041      	b.n	800bb10 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	68b9      	ldr	r1, [r7, #8]
 800ba92:	4618      	mov	r0, r3
 800ba94:	f000 fb58 	bl	800c148 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f042 0208 	orr.w	r2, r2, #8
 800baa6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f022 0204 	bic.w	r2, r2, #4
 800bab6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	691a      	ldr	r2, [r3, #16]
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	430a      	orrs	r2, r1
 800bac8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800baca:	e021      	b.n	800bb10 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	68b9      	ldr	r1, [r7, #8]
 800bad2:	4618      	mov	r0, r3
 800bad4:	f000 fb90 	bl	800c1f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bae6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800baf6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	691b      	ldr	r3, [r3, #16]
 800bb02:	021a      	lsls	r2, r3, #8
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	430a      	orrs	r2, r1
 800bb0a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bb0c:	e000      	b.n	800bb10 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800bb0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2200      	movs	r2, #0
 800bb14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb18:	2300      	movs	r3, #0
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3710      	adds	r7, #16
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop

0800bb24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b084      	sub	sp, #16
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d101      	bne.n	800bb3c <HAL_TIM_ConfigClockSource+0x18>
 800bb38:	2302      	movs	r3, #2
 800bb3a:	e0a8      	b.n	800bc8e <HAL_TIM_ConfigClockSource+0x16a>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2201      	movs	r2, #1
 800bb40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2202      	movs	r2, #2
 800bb48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	689b      	ldr	r3, [r3, #8]
 800bb52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800bb5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bb5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bb66:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	68fa      	ldr	r2, [r7, #12]
 800bb6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	2b40      	cmp	r3, #64	; 0x40
 800bb76:	d067      	beq.n	800bc48 <HAL_TIM_ConfigClockSource+0x124>
 800bb78:	2b40      	cmp	r3, #64	; 0x40
 800bb7a:	d80b      	bhi.n	800bb94 <HAL_TIM_ConfigClockSource+0x70>
 800bb7c:	2b10      	cmp	r3, #16
 800bb7e:	d073      	beq.n	800bc68 <HAL_TIM_ConfigClockSource+0x144>
 800bb80:	2b10      	cmp	r3, #16
 800bb82:	d802      	bhi.n	800bb8a <HAL_TIM_ConfigClockSource+0x66>
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d06f      	beq.n	800bc68 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800bb88:	e078      	b.n	800bc7c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800bb8a:	2b20      	cmp	r3, #32
 800bb8c:	d06c      	beq.n	800bc68 <HAL_TIM_ConfigClockSource+0x144>
 800bb8e:	2b30      	cmp	r3, #48	; 0x30
 800bb90:	d06a      	beq.n	800bc68 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800bb92:	e073      	b.n	800bc7c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800bb94:	2b70      	cmp	r3, #112	; 0x70
 800bb96:	d00d      	beq.n	800bbb4 <HAL_TIM_ConfigClockSource+0x90>
 800bb98:	2b70      	cmp	r3, #112	; 0x70
 800bb9a:	d804      	bhi.n	800bba6 <HAL_TIM_ConfigClockSource+0x82>
 800bb9c:	2b50      	cmp	r3, #80	; 0x50
 800bb9e:	d033      	beq.n	800bc08 <HAL_TIM_ConfigClockSource+0xe4>
 800bba0:	2b60      	cmp	r3, #96	; 0x60
 800bba2:	d041      	beq.n	800bc28 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800bba4:	e06a      	b.n	800bc7c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800bba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbaa:	d066      	beq.n	800bc7a <HAL_TIM_ConfigClockSource+0x156>
 800bbac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbb0:	d017      	beq.n	800bbe2 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800bbb2:	e063      	b.n	800bc7c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6818      	ldr	r0, [r3, #0]
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	6899      	ldr	r1, [r3, #8]
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	685a      	ldr	r2, [r3, #4]
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	68db      	ldr	r3, [r3, #12]
 800bbc4:	f000 fbee 	bl	800c3a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	689b      	ldr	r3, [r3, #8]
 800bbce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bbd6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	68fa      	ldr	r2, [r7, #12]
 800bbde:	609a      	str	r2, [r3, #8]
      break;
 800bbe0:	e04c      	b.n	800bc7c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6818      	ldr	r0, [r3, #0]
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	6899      	ldr	r1, [r3, #8]
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	685a      	ldr	r2, [r3, #4]
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	68db      	ldr	r3, [r3, #12]
 800bbf2:	f000 fbd7 	bl	800c3a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	689a      	ldr	r2, [r3, #8]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bc04:	609a      	str	r2, [r3, #8]
      break;
 800bc06:	e039      	b.n	800bc7c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6818      	ldr	r0, [r3, #0]
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	6859      	ldr	r1, [r3, #4]
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	68db      	ldr	r3, [r3, #12]
 800bc14:	461a      	mov	r2, r3
 800bc16:	f000 fb49 	bl	800c2ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	2150      	movs	r1, #80	; 0x50
 800bc20:	4618      	mov	r0, r3
 800bc22:	f000 fba2 	bl	800c36a <TIM_ITRx_SetConfig>
      break;
 800bc26:	e029      	b.n	800bc7c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6818      	ldr	r0, [r3, #0]
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	6859      	ldr	r1, [r3, #4]
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	461a      	mov	r2, r3
 800bc36:	f000 fb68 	bl	800c30a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	2160      	movs	r1, #96	; 0x60
 800bc40:	4618      	mov	r0, r3
 800bc42:	f000 fb92 	bl	800c36a <TIM_ITRx_SetConfig>
      break;
 800bc46:	e019      	b.n	800bc7c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6818      	ldr	r0, [r3, #0]
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	6859      	ldr	r1, [r3, #4]
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	68db      	ldr	r3, [r3, #12]
 800bc54:	461a      	mov	r2, r3
 800bc56:	f000 fb29 	bl	800c2ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	2140      	movs	r1, #64	; 0x40
 800bc60:	4618      	mov	r0, r3
 800bc62:	f000 fb82 	bl	800c36a <TIM_ITRx_SetConfig>
      break;
 800bc66:	e009      	b.n	800bc7c <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681a      	ldr	r2, [r3, #0]
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4619      	mov	r1, r3
 800bc72:	4610      	mov	r0, r2
 800bc74:	f000 fb79 	bl	800c36a <TIM_ITRx_SetConfig>
        break;
 800bc78:	e000      	b.n	800bc7c <HAL_TIM_ConfigClockSource+0x158>
      break;
 800bc7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2200      	movs	r2, #0
 800bc88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc8c:	2300      	movs	r3, #0
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3710      	adds	r7, #16
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}

0800bc96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc96:	b480      	push	{r7}
 800bc98:	b083      	sub	sp, #12
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc9e:	bf00      	nop
 800bca0:	370c      	adds	r7, #12
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr

0800bcaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bcaa:	b480      	push	{r7}
 800bcac:	b083      	sub	sp, #12
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bcb2:	bf00      	nop
 800bcb4:	370c      	adds	r7, #12
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr

0800bcbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bcbe:	b480      	push	{r7}
 800bcc0:	b083      	sub	sp, #12
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bcc6:	bf00      	nop
 800bcc8:	370c      	adds	r7, #12
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr

0800bcd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bcd2:	b480      	push	{r7}
 800bcd4:	b083      	sub	sp, #12
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bcda:	bf00      	nop
 800bcdc:	370c      	adds	r7, #12
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr
	...

0800bce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b085      	sub	sp, #20
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	4a2a      	ldr	r2, [pc, #168]	; (800bda4 <TIM_Base_SetConfig+0xbc>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d003      	beq.n	800bd08 <TIM_Base_SetConfig+0x20>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd06:	d108      	bne.n	800bd1a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	68fa      	ldr	r2, [r7, #12]
 800bd16:	4313      	orrs	r3, r2
 800bd18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4a21      	ldr	r2, [pc, #132]	; (800bda4 <TIM_Base_SetConfig+0xbc>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d00b      	beq.n	800bd3a <TIM_Base_SetConfig+0x52>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd28:	d007      	beq.n	800bd3a <TIM_Base_SetConfig+0x52>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	4a1e      	ldr	r2, [pc, #120]	; (800bda8 <TIM_Base_SetConfig+0xc0>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d003      	beq.n	800bd3a <TIM_Base_SetConfig+0x52>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	4a1d      	ldr	r2, [pc, #116]	; (800bdac <TIM_Base_SetConfig+0xc4>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d108      	bne.n	800bd4c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	68db      	ldr	r3, [r3, #12]
 800bd46:	68fa      	ldr	r2, [r7, #12]
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	695b      	ldr	r3, [r3, #20]
 800bd56:	4313      	orrs	r3, r2
 800bd58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	68fa      	ldr	r2, [r7, #12]
 800bd5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	689a      	ldr	r2, [r3, #8]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	4a0c      	ldr	r2, [pc, #48]	; (800bda4 <TIM_Base_SetConfig+0xbc>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d007      	beq.n	800bd88 <TIM_Base_SetConfig+0xa0>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	4a0b      	ldr	r2, [pc, #44]	; (800bda8 <TIM_Base_SetConfig+0xc0>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d003      	beq.n	800bd88 <TIM_Base_SetConfig+0xa0>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	4a0a      	ldr	r2, [pc, #40]	; (800bdac <TIM_Base_SetConfig+0xc4>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d103      	bne.n	800bd90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	691a      	ldr	r2, [r3, #16]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2201      	movs	r2, #1
 800bd94:	615a      	str	r2, [r3, #20]
}
 800bd96:	bf00      	nop
 800bd98:	3714      	adds	r7, #20
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr
 800bda2:	bf00      	nop
 800bda4:	40012c00 	.word	0x40012c00
 800bda8:	40014400 	.word	0x40014400
 800bdac:	40014800 	.word	0x40014800

0800bdb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b087      	sub	sp, #28
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6a1b      	ldr	r3, [r3, #32]
 800bdbe:	f023 0201 	bic.w	r2, r3, #1
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6a1b      	ldr	r3, [r3, #32]
 800bdca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	685b      	ldr	r3, [r3, #4]
 800bdd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	699b      	ldr	r3, [r3, #24]
 800bdd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bdde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bde2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f023 0303 	bic.w	r3, r3, #3
 800bdea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	68fa      	ldr	r2, [r7, #12]
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	f023 0302 	bic.w	r3, r3, #2
 800bdfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	689b      	ldr	r3, [r3, #8]
 800be02:	697a      	ldr	r2, [r7, #20]
 800be04:	4313      	orrs	r3, r2
 800be06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	4a24      	ldr	r2, [pc, #144]	; (800be9c <TIM_OC1_SetConfig+0xec>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d007      	beq.n	800be20 <TIM_OC1_SetConfig+0x70>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	4a23      	ldr	r2, [pc, #140]	; (800bea0 <TIM_OC1_SetConfig+0xf0>)
 800be14:	4293      	cmp	r3, r2
 800be16:	d003      	beq.n	800be20 <TIM_OC1_SetConfig+0x70>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	4a22      	ldr	r2, [pc, #136]	; (800bea4 <TIM_OC1_SetConfig+0xf4>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d10c      	bne.n	800be3a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	f023 0308 	bic.w	r3, r3, #8
 800be26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	697a      	ldr	r2, [r7, #20]
 800be2e:	4313      	orrs	r3, r2
 800be30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	f023 0304 	bic.w	r3, r3, #4
 800be38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	4a17      	ldr	r2, [pc, #92]	; (800be9c <TIM_OC1_SetConfig+0xec>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d007      	beq.n	800be52 <TIM_OC1_SetConfig+0xa2>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	4a17      	ldr	r2, [pc, #92]	; (800bea4 <TIM_OC1_SetConfig+0xf4>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d003      	beq.n	800be52 <TIM_OC1_SetConfig+0xa2>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	4a14      	ldr	r2, [pc, #80]	; (800bea0 <TIM_OC1_SetConfig+0xf0>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d111      	bne.n	800be76 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800be60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	695b      	ldr	r3, [r3, #20]
 800be66:	693a      	ldr	r2, [r7, #16]
 800be68:	4313      	orrs	r3, r2
 800be6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	699b      	ldr	r3, [r3, #24]
 800be70:	693a      	ldr	r2, [r7, #16]
 800be72:	4313      	orrs	r3, r2
 800be74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	693a      	ldr	r2, [r7, #16]
 800be7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	68fa      	ldr	r2, [r7, #12]
 800be80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	685a      	ldr	r2, [r3, #4]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	697a      	ldr	r2, [r7, #20]
 800be8e:	621a      	str	r2, [r3, #32]
}
 800be90:	bf00      	nop
 800be92:	371c      	adds	r7, #28
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr
 800be9c:	40012c00 	.word	0x40012c00
 800bea0:	40014800 	.word	0x40014800
 800bea4:	40014400 	.word	0x40014400

0800bea8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b087      	sub	sp, #28
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6a1b      	ldr	r3, [r3, #32]
 800beb6:	f023 0210 	bic.w	r2, r3, #16
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6a1b      	ldr	r3, [r3, #32]
 800bec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	699b      	ldr	r3, [r3, #24]
 800bece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800beda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bee2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	021b      	lsls	r3, r3, #8
 800beea:	68fa      	ldr	r2, [r7, #12]
 800beec:	4313      	orrs	r3, r2
 800beee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	f023 0320 	bic.w	r3, r3, #32
 800bef6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	689b      	ldr	r3, [r3, #8]
 800befc:	011b      	lsls	r3, r3, #4
 800befe:	697a      	ldr	r2, [r7, #20]
 800bf00:	4313      	orrs	r3, r2
 800bf02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	4a22      	ldr	r2, [pc, #136]	; (800bf90 <TIM_OC2_SetConfig+0xe8>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d10d      	bne.n	800bf28 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	68db      	ldr	r3, [r3, #12]
 800bf18:	011b      	lsls	r3, r3, #4
 800bf1a:	697a      	ldr	r2, [r7, #20]
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	4a19      	ldr	r2, [pc, #100]	; (800bf90 <TIM_OC2_SetConfig+0xe8>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d007      	beq.n	800bf40 <TIM_OC2_SetConfig+0x98>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	4a18      	ldr	r2, [pc, #96]	; (800bf94 <TIM_OC2_SetConfig+0xec>)
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d003      	beq.n	800bf40 <TIM_OC2_SetConfig+0x98>
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	4a17      	ldr	r2, [pc, #92]	; (800bf98 <TIM_OC2_SetConfig+0xf0>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d113      	bne.n	800bf68 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bf46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	695b      	ldr	r3, [r3, #20]
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	693a      	ldr	r2, [r7, #16]
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	699b      	ldr	r3, [r3, #24]
 800bf60:	009b      	lsls	r3, r3, #2
 800bf62:	693a      	ldr	r2, [r7, #16]
 800bf64:	4313      	orrs	r3, r2
 800bf66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	693a      	ldr	r2, [r7, #16]
 800bf6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	68fa      	ldr	r2, [r7, #12]
 800bf72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	685a      	ldr	r2, [r3, #4]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	697a      	ldr	r2, [r7, #20]
 800bf80:	621a      	str	r2, [r3, #32]
}
 800bf82:	bf00      	nop
 800bf84:	371c      	adds	r7, #28
 800bf86:	46bd      	mov	sp, r7
 800bf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8c:	4770      	bx	lr
 800bf8e:	bf00      	nop
 800bf90:	40012c00 	.word	0x40012c00
 800bf94:	40014400 	.word	0x40014400
 800bf98:	40014800 	.word	0x40014800

0800bf9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b087      	sub	sp, #28
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6a1b      	ldr	r3, [r3, #32]
 800bfaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6a1b      	ldr	r3, [r3, #32]
 800bfb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	685b      	ldr	r3, [r3, #4]
 800bfbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	69db      	ldr	r3, [r3, #28]
 800bfc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bfca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	f023 0303 	bic.w	r3, r3, #3
 800bfd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	68fa      	ldr	r2, [r7, #12]
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bfe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	689b      	ldr	r3, [r3, #8]
 800bfee:	021b      	lsls	r3, r3, #8
 800bff0:	697a      	ldr	r2, [r7, #20]
 800bff2:	4313      	orrs	r3, r2
 800bff4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	4a21      	ldr	r2, [pc, #132]	; (800c080 <TIM_OC3_SetConfig+0xe4>)
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d10d      	bne.n	800c01a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c004:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	68db      	ldr	r3, [r3, #12]
 800c00a:	021b      	lsls	r3, r3, #8
 800c00c:	697a      	ldr	r2, [r7, #20]
 800c00e:	4313      	orrs	r3, r2
 800c010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	4a18      	ldr	r2, [pc, #96]	; (800c080 <TIM_OC3_SetConfig+0xe4>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d007      	beq.n	800c032 <TIM_OC3_SetConfig+0x96>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	4a17      	ldr	r2, [pc, #92]	; (800c084 <TIM_OC3_SetConfig+0xe8>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d003      	beq.n	800c032 <TIM_OC3_SetConfig+0x96>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	4a16      	ldr	r2, [pc, #88]	; (800c088 <TIM_OC3_SetConfig+0xec>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d113      	bne.n	800c05a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	695b      	ldr	r3, [r3, #20]
 800c046:	011b      	lsls	r3, r3, #4
 800c048:	693a      	ldr	r2, [r7, #16]
 800c04a:	4313      	orrs	r3, r2
 800c04c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	699b      	ldr	r3, [r3, #24]
 800c052:	011b      	lsls	r3, r3, #4
 800c054:	693a      	ldr	r2, [r7, #16]
 800c056:	4313      	orrs	r3, r2
 800c058:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	693a      	ldr	r2, [r7, #16]
 800c05e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	68fa      	ldr	r2, [r7, #12]
 800c064:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	685a      	ldr	r2, [r3, #4]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	697a      	ldr	r2, [r7, #20]
 800c072:	621a      	str	r2, [r3, #32]
}
 800c074:	bf00      	nop
 800c076:	371c      	adds	r7, #28
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr
 800c080:	40012c00 	.word	0x40012c00
 800c084:	40014400 	.word	0x40014400
 800c088:	40014800 	.word	0x40014800

0800c08c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b087      	sub	sp, #28
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6a1b      	ldr	r3, [r3, #32]
 800c09a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6a1b      	ldr	r3, [r3, #32]
 800c0a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	685b      	ldr	r3, [r3, #4]
 800c0ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	69db      	ldr	r3, [r3, #28]
 800c0b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c0ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c0be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	021b      	lsls	r3, r3, #8
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c0da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	689b      	ldr	r3, [r3, #8]
 800c0e0:	031b      	lsls	r3, r3, #12
 800c0e2:	693a      	ldr	r2, [r7, #16]
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	4a14      	ldr	r2, [pc, #80]	; (800c13c <TIM_OC4_SetConfig+0xb0>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d007      	beq.n	800c100 <TIM_OC4_SetConfig+0x74>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	4a13      	ldr	r2, [pc, #76]	; (800c140 <TIM_OC4_SetConfig+0xb4>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d003      	beq.n	800c100 <TIM_OC4_SetConfig+0x74>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	4a12      	ldr	r2, [pc, #72]	; (800c144 <TIM_OC4_SetConfig+0xb8>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d109      	bne.n	800c114 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c106:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	695b      	ldr	r3, [r3, #20]
 800c10c:	019b      	lsls	r3, r3, #6
 800c10e:	697a      	ldr	r2, [r7, #20]
 800c110:	4313      	orrs	r3, r2
 800c112:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	697a      	ldr	r2, [r7, #20]
 800c118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	68fa      	ldr	r2, [r7, #12]
 800c11e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	685a      	ldr	r2, [r3, #4]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	693a      	ldr	r2, [r7, #16]
 800c12c:	621a      	str	r2, [r3, #32]
}
 800c12e:	bf00      	nop
 800c130:	371c      	adds	r7, #28
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr
 800c13a:	bf00      	nop
 800c13c:	40012c00 	.word	0x40012c00
 800c140:	40014400 	.word	0x40014400
 800c144:	40014800 	.word	0x40014800

0800c148 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c148:	b480      	push	{r7}
 800c14a:	b087      	sub	sp, #28
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6a1b      	ldr	r3, [r3, #32]
 800c156:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6a1b      	ldr	r3, [r3, #32]
 800c162:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c16e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c17a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	68fa      	ldr	r2, [r7, #12]
 800c182:	4313      	orrs	r3, r2
 800c184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c18c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	689b      	ldr	r3, [r3, #8]
 800c192:	041b      	lsls	r3, r3, #16
 800c194:	693a      	ldr	r2, [r7, #16]
 800c196:	4313      	orrs	r3, r2
 800c198:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4a13      	ldr	r2, [pc, #76]	; (800c1ec <TIM_OC5_SetConfig+0xa4>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d007      	beq.n	800c1b2 <TIM_OC5_SetConfig+0x6a>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	4a12      	ldr	r2, [pc, #72]	; (800c1f0 <TIM_OC5_SetConfig+0xa8>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d003      	beq.n	800c1b2 <TIM_OC5_SetConfig+0x6a>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	4a11      	ldr	r2, [pc, #68]	; (800c1f4 <TIM_OC5_SetConfig+0xac>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d109      	bne.n	800c1c6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c1b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	695b      	ldr	r3, [r3, #20]
 800c1be:	021b      	lsls	r3, r3, #8
 800c1c0:	697a      	ldr	r2, [r7, #20]
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	697a      	ldr	r2, [r7, #20]
 800c1ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	68fa      	ldr	r2, [r7, #12]
 800c1d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	685a      	ldr	r2, [r3, #4]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	693a      	ldr	r2, [r7, #16]
 800c1de:	621a      	str	r2, [r3, #32]
}
 800c1e0:	bf00      	nop
 800c1e2:	371c      	adds	r7, #28
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr
 800c1ec:	40012c00 	.word	0x40012c00
 800c1f0:	40014400 	.word	0x40014400
 800c1f4:	40014800 	.word	0x40014800

0800c1f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b087      	sub	sp, #28
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6a1b      	ldr	r3, [r3, #32]
 800c206:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6a1b      	ldr	r3, [r3, #32]
 800c212:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c21e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c22a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	021b      	lsls	r3, r3, #8
 800c232:	68fa      	ldr	r2, [r7, #12]
 800c234:	4313      	orrs	r3, r2
 800c236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c23e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	689b      	ldr	r3, [r3, #8]
 800c244:	051b      	lsls	r3, r3, #20
 800c246:	693a      	ldr	r2, [r7, #16]
 800c248:	4313      	orrs	r3, r2
 800c24a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	4a14      	ldr	r2, [pc, #80]	; (800c2a0 <TIM_OC6_SetConfig+0xa8>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d007      	beq.n	800c264 <TIM_OC6_SetConfig+0x6c>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	4a13      	ldr	r2, [pc, #76]	; (800c2a4 <TIM_OC6_SetConfig+0xac>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d003      	beq.n	800c264 <TIM_OC6_SetConfig+0x6c>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	4a12      	ldr	r2, [pc, #72]	; (800c2a8 <TIM_OC6_SetConfig+0xb0>)
 800c260:	4293      	cmp	r3, r2
 800c262:	d109      	bne.n	800c278 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c26a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	695b      	ldr	r3, [r3, #20]
 800c270:	029b      	lsls	r3, r3, #10
 800c272:	697a      	ldr	r2, [r7, #20]
 800c274:	4313      	orrs	r3, r2
 800c276:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	697a      	ldr	r2, [r7, #20]
 800c27c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	68fa      	ldr	r2, [r7, #12]
 800c282:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	685a      	ldr	r2, [r3, #4]
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	693a      	ldr	r2, [r7, #16]
 800c290:	621a      	str	r2, [r3, #32]
}
 800c292:	bf00      	nop
 800c294:	371c      	adds	r7, #28
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr
 800c29e:	bf00      	nop
 800c2a0:	40012c00 	.word	0x40012c00
 800c2a4:	40014400 	.word	0x40014400
 800c2a8:	40014800 	.word	0x40014800

0800c2ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b087      	sub	sp, #28
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	60f8      	str	r0, [r7, #12]
 800c2b4:	60b9      	str	r1, [r7, #8]
 800c2b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	6a1b      	ldr	r3, [r3, #32]
 800c2bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	6a1b      	ldr	r3, [r3, #32]
 800c2c2:	f023 0201 	bic.w	r2, r3, #1
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	699b      	ldr	r3, [r3, #24]
 800c2ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c2d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	011b      	lsls	r3, r3, #4
 800c2dc:	693a      	ldr	r2, [r7, #16]
 800c2de:	4313      	orrs	r3, r2
 800c2e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	f023 030a 	bic.w	r3, r3, #10
 800c2e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c2ea:	697a      	ldr	r2, [r7, #20]
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	693a      	ldr	r2, [r7, #16]
 800c2f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	697a      	ldr	r2, [r7, #20]
 800c2fc:	621a      	str	r2, [r3, #32]
}
 800c2fe:	bf00      	nop
 800c300:	371c      	adds	r7, #28
 800c302:	46bd      	mov	sp, r7
 800c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c308:	4770      	bx	lr

0800c30a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c30a:	b480      	push	{r7}
 800c30c:	b087      	sub	sp, #28
 800c30e:	af00      	add	r7, sp, #0
 800c310:	60f8      	str	r0, [r7, #12]
 800c312:	60b9      	str	r1, [r7, #8]
 800c314:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	6a1b      	ldr	r3, [r3, #32]
 800c31a:	f023 0210 	bic.w	r2, r3, #16
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	699b      	ldr	r3, [r3, #24]
 800c326:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	6a1b      	ldr	r3, [r3, #32]
 800c32c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c334:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	031b      	lsls	r3, r3, #12
 800c33a:	697a      	ldr	r2, [r7, #20]
 800c33c:	4313      	orrs	r3, r2
 800c33e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c346:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	011b      	lsls	r3, r3, #4
 800c34c:	693a      	ldr	r2, [r7, #16]
 800c34e:	4313      	orrs	r3, r2
 800c350:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	697a      	ldr	r2, [r7, #20]
 800c356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	693a      	ldr	r2, [r7, #16]
 800c35c:	621a      	str	r2, [r3, #32]
}
 800c35e:	bf00      	nop
 800c360:	371c      	adds	r7, #28
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr

0800c36a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c36a:	b480      	push	{r7}
 800c36c:	b085      	sub	sp, #20
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]
 800c372:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	689b      	ldr	r3, [r3, #8]
 800c378:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c384:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c386:	683a      	ldr	r2, [r7, #0]
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	4313      	orrs	r3, r2
 800c38c:	f043 0307 	orr.w	r3, r3, #7
 800c390:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	68fa      	ldr	r2, [r7, #12]
 800c396:	609a      	str	r2, [r3, #8]
}
 800c398:	bf00      	nop
 800c39a:	3714      	adds	r7, #20
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr

0800c3a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b087      	sub	sp, #28
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	607a      	str	r2, [r7, #4]
 800c3b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	689b      	ldr	r3, [r3, #8]
 800c3b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c3be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	021a      	lsls	r2, r3, #8
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	431a      	orrs	r2, r3
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	4313      	orrs	r3, r2
 800c3cc:	697a      	ldr	r2, [r7, #20]
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	697a      	ldr	r2, [r7, #20]
 800c3d6:	609a      	str	r2, [r3, #8]
}
 800c3d8:	bf00      	nop
 800c3da:	371c      	adds	r7, #28
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr

0800c3e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b087      	sub	sp, #28
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	60f8      	str	r0, [r7, #12]
 800c3ec:	60b9      	str	r1, [r7, #8]
 800c3ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	f003 031f 	and.w	r3, r3, #31
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	fa02 f303 	lsl.w	r3, r2, r3
 800c3fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	6a1a      	ldr	r2, [r3, #32]
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	43db      	mvns	r3, r3
 800c406:	401a      	ands	r2, r3
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	6a1a      	ldr	r2, [r3, #32]
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	f003 031f 	and.w	r3, r3, #31
 800c416:	6879      	ldr	r1, [r7, #4]
 800c418:	fa01 f303 	lsl.w	r3, r1, r3
 800c41c:	431a      	orrs	r2, r3
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	621a      	str	r2, [r3, #32]
}
 800c422:	bf00      	nop
 800c424:	371c      	adds	r7, #28
 800c426:	46bd      	mov	sp, r7
 800c428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42c:	4770      	bx	lr
	...

0800c430 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c430:	b480      	push	{r7}
 800c432:	b085      	sub	sp, #20
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c440:	2b01      	cmp	r3, #1
 800c442:	d101      	bne.n	800c448 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c444:	2302      	movs	r3, #2
 800c446:	e04a      	b.n	800c4de <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2201      	movs	r2, #1
 800c44c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2202      	movs	r2, #2
 800c454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	689b      	ldr	r3, [r3, #8]
 800c466:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4a1f      	ldr	r2, [pc, #124]	; (800c4ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d108      	bne.n	800c484 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c478:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	685b      	ldr	r3, [r3, #4]
 800c47e:	68fa      	ldr	r2, [r7, #12]
 800c480:	4313      	orrs	r3, r2
 800c482:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c48a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	68fa      	ldr	r2, [r7, #12]
 800c492:	4313      	orrs	r3, r2
 800c494:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	68fa      	ldr	r2, [r7, #12]
 800c49c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	4a12      	ldr	r2, [pc, #72]	; (800c4ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	d004      	beq.n	800c4b2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4b0:	d10c      	bne.n	800c4cc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	689b      	ldr	r3, [r3, #8]
 800c4be:	68ba      	ldr	r2, [r7, #8]
 800c4c0:	4313      	orrs	r3, r2
 800c4c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	68ba      	ldr	r2, [r7, #8]
 800c4ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c4dc:	2300      	movs	r3, #0
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3714      	adds	r7, #20
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e8:	4770      	bx	lr
 800c4ea:	bf00      	nop
 800c4ec:	40012c00 	.word	0x40012c00

0800c4f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b085      	sub	sp, #20
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c504:	2b01      	cmp	r3, #1
 800c506:	d101      	bne.n	800c50c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c508:	2302      	movs	r3, #2
 800c50a:	e078      	b.n	800c5fe <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2201      	movs	r2, #1
 800c510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	68db      	ldr	r3, [r3, #12]
 800c51e:	4313      	orrs	r3, r2
 800c520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	689b      	ldr	r3, [r3, #8]
 800c52c:	4313      	orrs	r3, r2
 800c52e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	685b      	ldr	r3, [r3, #4]
 800c53a:	4313      	orrs	r3, r2
 800c53c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4313      	orrs	r3, r2
 800c54a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	691b      	ldr	r3, [r3, #16]
 800c556:	4313      	orrs	r3, r2
 800c558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	695b      	ldr	r3, [r3, #20]
 800c564:	4313      	orrs	r3, r2
 800c566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c572:	4313      	orrs	r3, r2
 800c574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	699b      	ldr	r3, [r3, #24]
 800c580:	041b      	lsls	r3, r3, #16
 800c582:	4313      	orrs	r3, r2
 800c584:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	4a20      	ldr	r2, [pc, #128]	; (800c60c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800c58c:	4293      	cmp	r3, r2
 800c58e:	d106      	bne.n	800c59e <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	69db      	ldr	r3, [r3, #28]
 800c59a:	4313      	orrs	r3, r2
 800c59c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	4a1a      	ldr	r2, [pc, #104]	; (800c60c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d121      	bne.n	800c5ec <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5b2:	051b      	lsls	r3, r3, #20
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	6a1b      	ldr	r3, [r3, #32]
 800c5c2:	4313      	orrs	r3, r2
 800c5c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4a0c      	ldr	r2, [pc, #48]	; (800c60c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d106      	bne.n	800c5ec <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5e8:	4313      	orrs	r3, r2
 800c5ea:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	68fa      	ldr	r2, [r7, #12]
 800c5f2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c5fc:	2300      	movs	r3, #0
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3714      	adds	r7, #20
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr
 800c60a:	bf00      	nop
 800c60c:	40012c00 	.word	0x40012c00

0800c610 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c610:	b480      	push	{r7}
 800c612:	b083      	sub	sp, #12
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c618:	bf00      	nop
 800c61a:	370c      	adds	r7, #12
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr

0800c624 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c62c:	bf00      	nop
 800c62e:	370c      	adds	r7, #12
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr

0800c638 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c638:	b480      	push	{r7}
 800c63a:	b083      	sub	sp, #12
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c640:	bf00      	nop
 800c642:	370c      	adds	r7, #12
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr

0800c64c <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800c64c:	b480      	push	{r7}
 800c64e:	af00      	add	r7, sp, #0
  return;
 800c650:	bf00      	nop
}
 800c652:	46bd      	mov	sp, r7
 800c654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c658:	4770      	bx	lr

0800c65a <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800c65a:	b480      	push	{r7}
 800c65c:	af00      	add	r7, sp, #0
  return;
 800c65e:	bf00      	nop
}
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr

0800c668 <EDS_STM_Init>:
__weak void DIS_Init( void )
{
  return;
}
__weak void EDS_STM_Init( void )
{
 800c668:	b480      	push	{r7}
 800c66a:	af00      	add	r7, sp, #0
  return;
 800c66c:	bf00      	nop
}
 800c66e:	46bd      	mov	sp, r7
 800c670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c674:	4770      	bx	lr

0800c676 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800c676:	b480      	push	{r7}
 800c678:	af00      	add	r7, sp, #0
  return;
 800c67a:	bf00      	nop
}
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr

0800c684 <HTS_Init>:
__weak void HRS_Init( void )
{
  return;
}
__weak void HTS_Init( void )
{
 800c684:	b480      	push	{r7}
 800c686:	af00      	add	r7, sp, #0
  return;
 800c688:	bf00      	nop
}
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr

0800c692 <IAS_Init>:
__weak void IAS_Init( void )
{
 800c692:	b480      	push	{r7}
 800c694:	af00      	add	r7, sp, #0
  return;
 800c696:	bf00      	nop
}
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr

0800c6a0 <LLS_Init>:
__weak void LLS_Init( void )
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	af00      	add	r7, sp, #0
  return;
 800c6a4:	bf00      	nop
}
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr

0800c6ae <TPS_Init>:
__weak void TPS_Init( void )
{
 800c6ae:	b480      	push	{r7}
 800c6b0:	af00      	add	r7, sp, #0
  return;
 800c6b2:	bf00      	nop
}
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr

0800c6bc <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800c6bc:	b480      	push	{r7}
 800c6be:	af00      	add	r7, sp, #0
  return;
 800c6c0:	bf00      	nop
}
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c8:	4770      	bx	lr

0800c6ca <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800c6ca:	b480      	push	{r7}
 800c6cc:	af00      	add	r7, sp, #0
  return;
 800c6ce:	bf00      	nop
}
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr

0800c6d8 <MESH_Init>:
__weak void MESH_Init( void )
{
 800c6d8:	b480      	push	{r7}
 800c6da:	af00      	add	r7, sp, #0
  return;
 800c6dc:	bf00      	nop
}
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr

0800c6e6 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800c6e6:	b480      	push	{r7}
 800c6e8:	af00      	add	r7, sp, #0
  return;
 800c6ea:	bf00      	nop
}
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr

0800c6f4 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	af00      	add	r7, sp, #0
  return;
 800c6f8:	bf00      	nop
}
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr
	...

0800c704 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800c704:	b580      	push	{r7, lr}
 800c706:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800c708:	4b04      	ldr	r3, [pc, #16]	; (800c71c <SVCCTL_Init+0x18>)
 800c70a:	2200      	movs	r2, #0
 800c70c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800c70e:	4b04      	ldr	r3, [pc, #16]	; (800c720 <SVCCTL_Init+0x1c>)
 800c710:	2200      	movs	r2, #0
 800c712:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800c714:	f000 f806 	bl	800c724 <SVCCTL_SvcInit>

  return;
 800c718:	bf00      	nop
}
 800c71a:	bd80      	pop	{r7, pc}
 800c71c:	2000031c 	.word	0x2000031c
 800c720:	2000033c 	.word	0x2000033c

0800c724 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	af00      	add	r7, sp, #0
  BLS_Init();
 800c728:	f7ff ff90 	bl	800c64c <BLS_Init>

  CRS_STM_Init();
 800c72c:	f7ff ff95 	bl	800c65a <CRS_STM_Init>

  //DIS_Init();

  EDS_STM_Init();
 800c730:	f7ff ff9a 	bl	800c668 <EDS_STM_Init>

  HIDS_Init();
 800c734:	f7ff ff9f 	bl	800c676 <HIDS_Init>

  //HRS_Init();

  HTS_Init();
 800c738:	f7ff ffa4 	bl	800c684 <HTS_Init>

  IAS_Init();
 800c73c:	f7ff ffa9 	bl	800c692 <IAS_Init>

  LLS_Init();
 800c740:	f7ff ffae 	bl	800c6a0 <LLS_Init>

  TPS_Init();
 800c744:	f7ff ffb3 	bl	800c6ae <TPS_Init>

  MOTENV_STM_Init();
 800c748:	f7ff ffb8 	bl	800c6bc <MOTENV_STM_Init>

  P2PS_STM_Init();
 800c74c:	f001 fdd4 	bl	800e2f8 <P2PS_STM_Init>

  OTAS_STM_Init();
 800c750:	f7ff ffbb 	bl	800c6ca <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800c754:	f7ff ffc7 	bl	800c6e6 <BVOPUS_STM_Init>

  MESH_Init();
 800c758:	f7ff ffbe 	bl	800c6d8 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800c75c:	f7ff ffca 	bl	800c6f4 <SVCCTL_InitCustomSvc>
  
  return;
 800c760:	bf00      	nop
}
 800c762:	bd80      	pop	{r7, pc}

0800c764 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800c764:	b480      	push	{r7}
 800c766:	b083      	sub	sp, #12
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800c76c:	4b09      	ldr	r3, [pc, #36]	; (800c794 <SVCCTL_RegisterSvcHandler+0x30>)
 800c76e:	7f1b      	ldrb	r3, [r3, #28]
 800c770:	4619      	mov	r1, r3
 800c772:	4a08      	ldr	r2, [pc, #32]	; (800c794 <SVCCTL_RegisterSvcHandler+0x30>)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800c77a:	4b06      	ldr	r3, [pc, #24]	; (800c794 <SVCCTL_RegisterSvcHandler+0x30>)
 800c77c:	7f1b      	ldrb	r3, [r3, #28]
 800c77e:	3301      	adds	r3, #1
 800c780:	b2da      	uxtb	r2, r3
 800c782:	4b04      	ldr	r3, [pc, #16]	; (800c794 <SVCCTL_RegisterSvcHandler+0x30>)
 800c784:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800c786:	bf00      	nop
}
 800c788:	370c      	adds	r7, #12
 800c78a:	46bd      	mov	sp, r7
 800c78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c790:	4770      	bx	lr
 800c792:	bf00      	nop
 800c794:	2000031c 	.word	0x2000031c

0800c798 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b086      	sub	sp, #24
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	3301      	adds	r3, #1
 800c7a4:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	2bff      	cmp	r3, #255	; 0xff
 800c7b0:	d000      	beq.n	800c7b4 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800c7b2:	e025      	b.n	800c800 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	3302      	adds	r3, #2
 800c7b8:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	881b      	ldrh	r3, [r3, #0]
 800c7be:	b29b      	uxth	r3, r3
 800c7c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c7c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c7c8:	d000      	beq.n	800c7cc <SVCCTL_UserEvtRx+0x34>
          break;
 800c7ca:	e018      	b.n	800c7fe <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	757b      	strb	r3, [r7, #21]
 800c7d0:	e00d      	b.n	800c7ee <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800c7d2:	7d7b      	ldrb	r3, [r7, #21]
 800c7d4:	4a18      	ldr	r2, [pc, #96]	; (800c838 <SVCCTL_UserEvtRx+0xa0>)
 800c7d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	4798      	blx	r3
 800c7de:	4603      	mov	r3, r0
 800c7e0:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800c7e2:	7dfb      	ldrb	r3, [r7, #23]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d108      	bne.n	800c7fa <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800c7e8:	7d7b      	ldrb	r3, [r7, #21]
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	757b      	strb	r3, [r7, #21]
 800c7ee:	4b12      	ldr	r3, [pc, #72]	; (800c838 <SVCCTL_UserEvtRx+0xa0>)
 800c7f0:	7f1b      	ldrb	r3, [r3, #28]
 800c7f2:	7d7a      	ldrb	r2, [r7, #21]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d3ec      	bcc.n	800c7d2 <SVCCTL_UserEvtRx+0x3a>
          break;
 800c7f8:	e000      	b.n	800c7fc <SVCCTL_UserEvtRx+0x64>
              break;
 800c7fa:	bf00      	nop
          break;
 800c7fc:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800c7fe:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800c800:	7dfb      	ldrb	r3, [r7, #23]
 800c802:	2b01      	cmp	r3, #1
 800c804:	d009      	beq.n	800c81a <SVCCTL_UserEvtRx+0x82>
 800c806:	2b02      	cmp	r3, #2
 800c808:	d00a      	beq.n	800c820 <SVCCTL_UserEvtRx+0x88>
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d10b      	bne.n	800c826 <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f7f4 fa8c 	bl	8000d2c <SVCCTL_App_Notification>
 800c814:	4603      	mov	r3, r0
 800c816:	75bb      	strb	r3, [r7, #22]
      break;
 800c818:	e008      	b.n	800c82c <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800c81a:	2301      	movs	r3, #1
 800c81c:	75bb      	strb	r3, [r7, #22]
      break;
 800c81e:	e005      	b.n	800c82c <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800c820:	2300      	movs	r3, #0
 800c822:	75bb      	strb	r3, [r7, #22]
      break;
 800c824:	e002      	b.n	800c82c <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800c826:	2301      	movs	r3, #1
 800c828:	75bb      	strb	r3, [r7, #22]
      break;
 800c82a:	bf00      	nop
  }

  return (return_status);
 800c82c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c82e:	4618      	mov	r0, r3
 800c830:	3718      	adds	r7, #24
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	bf00      	nop
 800c838:	2000031c 	.word	0x2000031c

0800c83c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b088      	sub	sp, #32
 800c840:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800c842:	2300      	movs	r3, #0
 800c844:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c846:	f107 0308 	add.w	r3, r7, #8
 800c84a:	2218      	movs	r2, #24
 800c84c:	2100      	movs	r1, #0
 800c84e:	4618      	mov	r0, r3
 800c850:	f000 ff9c 	bl	800d78c <Osal_MemSet>
  rq.ogf = 0x3f;
 800c854:	233f      	movs	r3, #63	; 0x3f
 800c856:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800c858:	2381      	movs	r3, #129	; 0x81
 800c85a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c85c:	1dfb      	adds	r3, r7, #7
 800c85e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c860:	2301      	movs	r3, #1
 800c862:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c864:	f107 0308 	add.w	r3, r7, #8
 800c868:	2100      	movs	r1, #0
 800c86a:	4618      	mov	r0, r3
 800c86c:	f001 f836 	bl	800d8dc <hci_send_req>
 800c870:	4603      	mov	r3, r0
 800c872:	2b00      	cmp	r3, #0
 800c874:	da01      	bge.n	800c87a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800c876:	23ff      	movs	r3, #255	; 0xff
 800c878:	e000      	b.n	800c87c <aci_gap_set_non_discoverable+0x40>
  return status;
 800c87a:	79fb      	ldrb	r3, [r7, #7]
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3720      	adds	r7, #32
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}

0800c884 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800c884:	b5b0      	push	{r4, r5, r7, lr}
 800c886:	b0ce      	sub	sp, #312	; 0x138
 800c888:	af00      	add	r7, sp, #0
 800c88a:	4605      	mov	r5, r0
 800c88c:	460c      	mov	r4, r1
 800c88e:	4610      	mov	r0, r2
 800c890:	4619      	mov	r1, r3
 800c892:	1dfb      	adds	r3, r7, #7
 800c894:	462a      	mov	r2, r5
 800c896:	701a      	strb	r2, [r3, #0]
 800c898:	1d3b      	adds	r3, r7, #4
 800c89a:	4622      	mov	r2, r4
 800c89c:	801a      	strh	r2, [r3, #0]
 800c89e:	1cbb      	adds	r3, r7, #2
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	801a      	strh	r2, [r3, #0]
 800c8a4:	1dbb      	adds	r3, r7, #6
 800c8a6:	460a      	mov	r2, r1
 800c8a8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800c8aa:	f107 0310 	add.w	r3, r7, #16
 800c8ae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800c8b2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800c8b6:	3308      	adds	r3, #8
 800c8b8:	f107 0210 	add.w	r2, r7, #16
 800c8bc:	4413      	add	r3, r2
 800c8be:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800c8c2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800c8c6:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800c8ca:	4413      	add	r3, r2
 800c8cc:	3309      	adds	r3, #9
 800c8ce:	f107 0210 	add.w	r2, r7, #16
 800c8d2:	4413      	add	r3, r2
 800c8d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c8d8:	f107 030f 	add.w	r3, r7, #15
 800c8dc:	2200      	movs	r2, #0
 800c8de:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800c8e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c8ea:	1dfa      	adds	r2, r7, #7
 800c8ec:	7812      	ldrb	r2, [r2, #0]
 800c8ee:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c8f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800c8fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c8fe:	1d3a      	adds	r2, r7, #4
 800c900:	8812      	ldrh	r2, [r2, #0]
 800c902:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800c906:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c90a:	3302      	adds	r3, #2
 800c90c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800c910:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c914:	1cba      	adds	r2, r7, #2
 800c916:	8812      	ldrh	r2, [r2, #0]
 800c918:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800c91c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c920:	3302      	adds	r3, #2
 800c922:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800c926:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c92a:	1dba      	adds	r2, r7, #6
 800c92c:	7812      	ldrb	r2, [r2, #0]
 800c92e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800c930:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c934:	3301      	adds	r3, #1
 800c936:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800c93a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c93e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800c942:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800c944:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c948:	3301      	adds	r3, #1
 800c94a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800c94e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c952:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800c956:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800c958:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c95c:	3301      	adds	r3, #1
 800c95e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800c962:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c966:	3308      	adds	r3, #8
 800c968:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800c96c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800c970:	4618      	mov	r0, r3
 800c972:	f000 fefb 	bl	800d76c <Osal_MemCpy>
    index_input += Local_Name_Length;
 800c976:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800c97a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c97e:	4413      	add	r3, r2
 800c980:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800c984:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c988:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800c98c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800c98e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c992:	3301      	adds	r3, #1
 800c994:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800c998:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c99c:	3301      	adds	r3, #1
 800c99e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800c9a2:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f000 fee0 	bl	800d76c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800c9ac:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800c9b0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c9b4:	4413      	add	r3, r2
 800c9b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800c9ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c9be:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800c9c2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800c9c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c9c8:	3302      	adds	r3, #2
 800c9ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800c9ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c9d2:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800c9d6:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800c9d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c9dc:	3302      	adds	r3, #2
 800c9de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c9e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c9e6:	2218      	movs	r2, #24
 800c9e8:	2100      	movs	r1, #0
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f000 fece 	bl	800d78c <Osal_MemSet>
  rq.ogf = 0x3f;
 800c9f0:	233f      	movs	r3, #63	; 0x3f
 800c9f2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800c9f6:	2383      	movs	r3, #131	; 0x83
 800c9f8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c9fc:	f107 0310 	add.w	r3, r7, #16
 800ca00:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ca04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca08:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ca0c:	f107 030f 	add.w	r3, r7, #15
 800ca10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ca14:	2301      	movs	r3, #1
 800ca16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ca1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ca1e:	2100      	movs	r1, #0
 800ca20:	4618      	mov	r0, r3
 800ca22:	f000 ff5b 	bl	800d8dc <hci_send_req>
 800ca26:	4603      	mov	r3, r0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	da01      	bge.n	800ca30 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 800ca2c:	23ff      	movs	r3, #255	; 0xff
 800ca2e:	e002      	b.n	800ca36 <aci_gap_set_discoverable+0x1b2>
  return status;
 800ca30:	f107 030f 	add.w	r3, r7, #15
 800ca34:	781b      	ldrb	r3, [r3, #0]
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bdb0      	pop	{r4, r5, r7, pc}

0800ca40 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b0cc      	sub	sp, #304	; 0x130
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	4602      	mov	r2, r0
 800ca48:	1dfb      	adds	r3, r7, #7
 800ca4a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800ca4c:	f107 0310 	add.w	r3, r7, #16
 800ca50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ca54:	f107 030f 	add.w	r3, r7, #15
 800ca58:	2200      	movs	r2, #0
 800ca5a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800ca62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ca66:	1dfa      	adds	r2, r7, #7
 800ca68:	7812      	ldrb	r2, [r2, #0]
 800ca6a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ca6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca70:	3301      	adds	r3, #1
 800ca72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ca76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ca7a:	2218      	movs	r2, #24
 800ca7c:	2100      	movs	r1, #0
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f000 fe84 	bl	800d78c <Osal_MemSet>
  rq.ogf = 0x3f;
 800ca84:	233f      	movs	r3, #63	; 0x3f
 800ca86:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800ca8a:	2385      	movs	r3, #133	; 0x85
 800ca8c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ca90:	f107 0310 	add.w	r3, r7, #16
 800ca94:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ca98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca9c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800caa0:	f107 030f 	add.w	r3, r7, #15
 800caa4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800caa8:	2301      	movs	r3, #1
 800caaa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800caae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cab2:	2100      	movs	r1, #0
 800cab4:	4618      	mov	r0, r3
 800cab6:	f000 ff11 	bl	800d8dc <hci_send_req>
 800caba:	4603      	mov	r3, r0
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	da01      	bge.n	800cac4 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800cac0:	23ff      	movs	r3, #255	; 0xff
 800cac2:	e002      	b.n	800caca <aci_gap_set_io_capability+0x8a>
  return status;
 800cac4:	f107 030f 	add.w	r3, r7, #15
 800cac8:	781b      	ldrb	r3, [r3, #0]
}
 800caca:	4618      	mov	r0, r3
 800cacc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800cad4:	b5b0      	push	{r4, r5, r7, lr}
 800cad6:	b0cc      	sub	sp, #304	; 0x130
 800cad8:	af00      	add	r7, sp, #0
 800cada:	4605      	mov	r5, r0
 800cadc:	460c      	mov	r4, r1
 800cade:	4610      	mov	r0, r2
 800cae0:	4619      	mov	r1, r3
 800cae2:	1dfb      	adds	r3, r7, #7
 800cae4:	462a      	mov	r2, r5
 800cae6:	701a      	strb	r2, [r3, #0]
 800cae8:	1dbb      	adds	r3, r7, #6
 800caea:	4622      	mov	r2, r4
 800caec:	701a      	strb	r2, [r3, #0]
 800caee:	1d7b      	adds	r3, r7, #5
 800caf0:	4602      	mov	r2, r0
 800caf2:	701a      	strb	r2, [r3, #0]
 800caf4:	1d3b      	adds	r3, r7, #4
 800caf6:	460a      	mov	r2, r1
 800caf8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800cafa:	f107 0310 	add.w	r3, r7, #16
 800cafe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800cb02:	f107 030f 	add.w	r3, r7, #15
 800cb06:	2200      	movs	r2, #0
 800cb08:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800cb10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb14:	1dfa      	adds	r2, r7, #7
 800cb16:	7812      	ldrb	r2, [r2, #0]
 800cb18:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cb1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb1e:	3301      	adds	r3, #1
 800cb20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800cb24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb28:	1dba      	adds	r2, r7, #6
 800cb2a:	7812      	ldrb	r2, [r2, #0]
 800cb2c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800cb2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb32:	3301      	adds	r3, #1
 800cb34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800cb38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb3c:	1d7a      	adds	r2, r7, #5
 800cb3e:	7812      	ldrb	r2, [r2, #0]
 800cb40:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800cb42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb46:	3301      	adds	r3, #1
 800cb48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800cb4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb50:	1d3a      	adds	r2, r7, #4
 800cb52:	7812      	ldrb	r2, [r2, #0]
 800cb54:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800cb56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800cb60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb64:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800cb68:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800cb6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb6e:	3301      	adds	r3, #1
 800cb70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800cb74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb78:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800cb7c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800cb7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb82:	3301      	adds	r3, #1
 800cb84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800cb88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb8c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800cb90:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800cb92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb96:	3301      	adds	r3, #1
 800cb98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800cb9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cba0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800cba4:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800cba8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cbac:	3304      	adds	r3, #4
 800cbae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800cbb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cbb6:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800cbba:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800cbbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cbc0:	3301      	adds	r3, #1
 800cbc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cbc6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cbca:	2218      	movs	r2, #24
 800cbcc:	2100      	movs	r1, #0
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f000 fddc 	bl	800d78c <Osal_MemSet>
  rq.ogf = 0x3f;
 800cbd4:	233f      	movs	r3, #63	; 0x3f
 800cbd6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800cbda:	2386      	movs	r3, #134	; 0x86
 800cbdc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800cbe0:	f107 0310 	add.w	r3, r7, #16
 800cbe4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cbe8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cbec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800cbf0:	f107 030f 	add.w	r3, r7, #15
 800cbf4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cbfe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cc02:	2100      	movs	r1, #0
 800cc04:	4618      	mov	r0, r3
 800cc06:	f000 fe69 	bl	800d8dc <hci_send_req>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	da01      	bge.n	800cc14 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800cc10:	23ff      	movs	r3, #255	; 0xff
 800cc12:	e002      	b.n	800cc1a <aci_gap_set_authentication_requirement+0x146>
  return status;
 800cc14:	f107 030f 	add.w	r3, r7, #15
 800cc18:	781b      	ldrb	r3, [r3, #0]
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bdb0      	pop	{r4, r5, r7, pc}

0800cc24 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800cc24:	b590      	push	{r4, r7, lr}
 800cc26:	b0cd      	sub	sp, #308	; 0x134
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	4604      	mov	r4, r0
 800cc2c:	4608      	mov	r0, r1
 800cc2e:	4611      	mov	r1, r2
 800cc30:	463a      	mov	r2, r7
 800cc32:	6013      	str	r3, [r2, #0]
 800cc34:	1dfb      	adds	r3, r7, #7
 800cc36:	4622      	mov	r2, r4
 800cc38:	701a      	strb	r2, [r3, #0]
 800cc3a:	1dbb      	adds	r3, r7, #6
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	701a      	strb	r2, [r3, #0]
 800cc40:	1d7b      	adds	r3, r7, #5
 800cc42:	460a      	mov	r2, r1
 800cc44:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800cc46:	f107 0310 	add.w	r3, r7, #16
 800cc4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800cc4e:	f107 0308 	add.w	r3, r7, #8
 800cc52:	2207      	movs	r2, #7
 800cc54:	2100      	movs	r1, #0
 800cc56:	4618      	mov	r0, r3
 800cc58:	f000 fd98 	bl	800d78c <Osal_MemSet>
  int index_input = 0;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800cc62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cc66:	1dfa      	adds	r2, r7, #7
 800cc68:	7812      	ldrb	r2, [r2, #0]
 800cc6a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cc6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cc70:	3301      	adds	r3, #1
 800cc72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800cc76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cc7a:	1dba      	adds	r2, r7, #6
 800cc7c:	7812      	ldrb	r2, [r2, #0]
 800cc7e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800cc80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cc84:	3301      	adds	r3, #1
 800cc86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800cc8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cc8e:	1d7a      	adds	r2, r7, #5
 800cc90:	7812      	ldrb	r2, [r2, #0]
 800cc92:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800cc94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cc98:	3301      	adds	r3, #1
 800cc9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cc9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cca2:	2218      	movs	r2, #24
 800cca4:	2100      	movs	r1, #0
 800cca6:	4618      	mov	r0, r3
 800cca8:	f000 fd70 	bl	800d78c <Osal_MemSet>
  rq.ogf = 0x3f;
 800ccac:	233f      	movs	r3, #63	; 0x3f
 800ccae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800ccb2:	238a      	movs	r3, #138	; 0x8a
 800ccb4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ccb8:	f107 0310 	add.w	r3, r7, #16
 800ccbc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ccc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ccc4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800ccc8:	f107 0308 	add.w	r3, r7, #8
 800cccc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800ccd0:	2307      	movs	r3, #7
 800ccd2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ccd6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ccda:	2100      	movs	r1, #0
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f000 fdfd 	bl	800d8dc <hci_send_req>
 800cce2:	4603      	mov	r3, r0
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	da01      	bge.n	800ccec <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 800cce8:	23ff      	movs	r3, #255	; 0xff
 800ccea:	e021      	b.n	800cd30 <aci_gap_init+0x10c>
  if ( resp.Status )
 800ccec:	f107 0308 	add.w	r3, r7, #8
 800ccf0:	781b      	ldrb	r3, [r3, #0]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d003      	beq.n	800ccfe <aci_gap_init+0xda>
    return resp.Status;
 800ccf6:	f107 0308 	add.w	r3, r7, #8
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	e018      	b.n	800cd30 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 800ccfe:	f107 0308 	add.w	r3, r7, #8
 800cd02:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cd06:	b29a      	uxth	r2, r3
 800cd08:	463b      	mov	r3, r7
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800cd0e:	f107 0308 	add.w	r3, r7, #8
 800cd12:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800cd16:	b29a      	uxth	r2, r3
 800cd18:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800cd1c:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800cd1e:	f107 0308 	add.w	r3, r7, #8
 800cd22:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800cd26:	b29a      	uxth	r2, r3
 800cd28:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800cd2c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800cd2e:	2300      	movs	r3, #0
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd90      	pop	{r4, r7, pc}

0800cd3a <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800cd3a:	b580      	push	{r7, lr}
 800cd3c:	b0cc      	sub	sp, #304	; 0x130
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	4602      	mov	r2, r0
 800cd42:	463b      	mov	r3, r7
 800cd44:	6019      	str	r1, [r3, #0]
 800cd46:	1dfb      	adds	r3, r7, #7
 800cd48:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800cd4a:	f107 0310 	add.w	r3, r7, #16
 800cd4e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800cd52:	f107 030f 	add.w	r3, r7, #15
 800cd56:	2200      	movs	r2, #0
 800cd58:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800cd60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cd64:	1dfa      	adds	r2, r7, #7
 800cd66:	7812      	ldrb	r2, [r2, #0]
 800cd68:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cd6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cd6e:	3301      	adds	r3, #1
 800cd70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800cd74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cd78:	1c58      	adds	r0, r3, #1
 800cd7a:	1dfb      	adds	r3, r7, #7
 800cd7c:	781a      	ldrb	r2, [r3, #0]
 800cd7e:	463b      	mov	r3, r7
 800cd80:	6819      	ldr	r1, [r3, #0]
 800cd82:	f000 fcf3 	bl	800d76c <Osal_MemCpy>
  index_input += AdvDataLen;
 800cd86:	1dfb      	adds	r3, r7, #7
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800cd8e:	4413      	add	r3, r2
 800cd90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cd94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cd98:	2218      	movs	r2, #24
 800cd9a:	2100      	movs	r1, #0
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f000 fcf5 	bl	800d78c <Osal_MemSet>
  rq.ogf = 0x3f;
 800cda2:	233f      	movs	r3, #63	; 0x3f
 800cda4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800cda8:	238e      	movs	r3, #142	; 0x8e
 800cdaa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800cdae:	f107 0310 	add.w	r3, r7, #16
 800cdb2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cdb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cdba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800cdbe:	f107 030f 	add.w	r3, r7, #15
 800cdc2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cdcc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cdd0:	2100      	movs	r1, #0
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f000 fd82 	bl	800d8dc <hci_send_req>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	da01      	bge.n	800cde2 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 800cdde:	23ff      	movs	r3, #255	; 0xff
 800cde0:	e002      	b.n	800cde8 <aci_gap_update_adv_data+0xae>
  return status;
 800cde2:	f107 030f 	add.w	r3, r7, #15
 800cde6:	781b      	ldrb	r3, [r3, #0]
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}

0800cdf2 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800cdf2:	b580      	push	{r7, lr}
 800cdf4:	b088      	sub	sp, #32
 800cdf6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cdfc:	f107 0308 	add.w	r3, r7, #8
 800ce00:	2218      	movs	r2, #24
 800ce02:	2100      	movs	r1, #0
 800ce04:	4618      	mov	r0, r3
 800ce06:	f000 fcc1 	bl	800d78c <Osal_MemSet>
  rq.ogf = 0x3f;
 800ce0a:	233f      	movs	r3, #63	; 0x3f
 800ce0c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800ce0e:	2392      	movs	r3, #146	; 0x92
 800ce10:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ce12:	1dfb      	adds	r3, r7, #7
 800ce14:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ce16:	2301      	movs	r3, #1
 800ce18:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ce1a:	f107 0308 	add.w	r3, r7, #8
 800ce1e:	2100      	movs	r1, #0
 800ce20:	4618      	mov	r0, r3
 800ce22:	f000 fd5b 	bl	800d8dc <hci_send_req>
 800ce26:	4603      	mov	r3, r0
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	da01      	bge.n	800ce30 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ce2c:	23ff      	movs	r3, #255	; 0xff
 800ce2e:	e000      	b.n	800ce32 <aci_gap_configure_whitelist+0x40>
  return status;
 800ce30:	79fb      	ldrb	r3, [r7, #7]
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3720      	adds	r7, #32
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}

0800ce3a <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 800ce3a:	b580      	push	{r7, lr}
 800ce3c:	b0cc      	sub	sp, #304	; 0x130
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	4602      	mov	r2, r0
 800ce42:	1dbb      	adds	r3, r7, #6
 800ce44:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 800ce46:	f107 0310 	add.w	r3, r7, #16
 800ce4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ce4e:	f107 030f 	add.w	r3, r7, #15
 800ce52:	2200      	movs	r2, #0
 800ce54:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ce56:	2300      	movs	r3, #0
 800ce58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800ce5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ce60:	1dba      	adds	r2, r7, #6
 800ce62:	8812      	ldrh	r2, [r2, #0]
 800ce64:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ce66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ce6a:	3302      	adds	r3, #2
 800ce6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ce70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ce74:	2218      	movs	r2, #24
 800ce76:	2100      	movs	r1, #0
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f000 fc87 	bl	800d78c <Osal_MemSet>
  rq.ogf = 0x3f;
 800ce7e:	233f      	movs	r3, #63	; 0x3f
 800ce80:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 800ce84:	2395      	movs	r3, #149	; 0x95
 800ce86:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ce8a:	f107 0310 	add.w	r3, r7, #16
 800ce8e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ce92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ce96:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ce9a:	f107 030f 	add.w	r3, r7, #15
 800ce9e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800cea2:	2301      	movs	r3, #1
 800cea4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cea8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ceac:	2100      	movs	r1, #0
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f000 fd14 	bl	800d8dc <hci_send_req>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	da01      	bge.n	800cebe <aci_gap_allow_rebond+0x84>
    return BLE_STATUS_TIMEOUT;
 800ceba:	23ff      	movs	r3, #255	; 0xff
 800cebc:	e002      	b.n	800cec4 <aci_gap_allow_rebond+0x8a>
  return status;
 800cebe:	f107 030f 	add.w	r3, r7, #15
 800cec2:	781b      	ldrb	r3, [r3, #0]
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}

0800cece <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800cece:	b580      	push	{r7, lr}
 800ced0:	b0cc      	sub	sp, #304	; 0x130
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	4602      	mov	r2, r0
 800ced6:	1dbb      	adds	r3, r7, #6
 800ced8:	801a      	strh	r2, [r3, #0]
 800ceda:	1d7b      	adds	r3, r7, #5
 800cedc:	460a      	mov	r2, r1
 800cede:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800cee0:	f107 0310 	add.w	r3, r7, #16
 800cee4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800cee8:	f107 030f 	add.w	r3, r7, #15
 800ceec:	2200      	movs	r2, #0
 800ceee:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cef0:	2300      	movs	r3, #0
 800cef2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800cef6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cefa:	1dba      	adds	r2, r7, #6
 800cefc:	8812      	ldrh	r2, [r2, #0]
 800cefe:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800cf00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cf04:	3302      	adds	r3, #2
 800cf06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800cf0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cf0e:	1d7a      	adds	r2, r7, #5
 800cf10:	7812      	ldrb	r2, [r2, #0]
 800cf12:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800cf14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cf18:	3301      	adds	r3, #1
 800cf1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cf1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cf22:	2218      	movs	r2, #24
 800cf24:	2100      	movs	r1, #0
 800cf26:	4618      	mov	r0, r3
 800cf28:	f000 fc30 	bl	800d78c <Osal_MemSet>
  rq.ogf = 0x3f;
 800cf2c:	233f      	movs	r3, #63	; 0x3f
 800cf2e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800cf32:	23a5      	movs	r3, #165	; 0xa5
 800cf34:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800cf38:	f107 0310 	add.w	r3, r7, #16
 800cf3c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cf40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cf44:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800cf48:	f107 030f 	add.w	r3, r7, #15
 800cf4c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800cf50:	2301      	movs	r3, #1
 800cf52:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cf56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cf5a:	2100      	movs	r1, #0
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f000 fcbd 	bl	800d8dc <hci_send_req>
 800cf62:	4603      	mov	r3, r0
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	da01      	bge.n	800cf6c <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 800cf68:	23ff      	movs	r3, #255	; 0xff
 800cf6a:	e002      	b.n	800cf72 <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 800cf6c:	f107 030f 	add.w	r3, r7, #15
 800cf70:	781b      	ldrb	r3, [r3, #0]
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b088      	sub	sp, #32
 800cf80:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800cf82:	2300      	movs	r3, #0
 800cf84:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cf86:	f107 0308 	add.w	r3, r7, #8
 800cf8a:	2218      	movs	r2, #24
 800cf8c:	2100      	movs	r1, #0
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f000 fbfc 	bl	800d78c <Osal_MemSet>
  rq.ogf = 0x3f;
 800cf94:	233f      	movs	r3, #63	; 0x3f
 800cf96:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800cf98:	f240 1301 	movw	r3, #257	; 0x101
 800cf9c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800cf9e:	1dfb      	adds	r3, r7, #7
 800cfa0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cfa6:	f107 0308 	add.w	r3, r7, #8
 800cfaa:	2100      	movs	r1, #0
 800cfac:	4618      	mov	r0, r3
 800cfae:	f000 fc95 	bl	800d8dc <hci_send_req>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	da01      	bge.n	800cfbc <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800cfb8:	23ff      	movs	r3, #255	; 0xff
 800cfba:	e000      	b.n	800cfbe <aci_gatt_init+0x42>
  return status;
 800cfbc:	79fb      	ldrb	r3, [r7, #7]
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3720      	adds	r7, #32
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}

0800cfc6 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800cfc6:	b590      	push	{r4, r7, lr}
 800cfc8:	b0cf      	sub	sp, #316	; 0x13c
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	4604      	mov	r4, r0
 800cfce:	4638      	mov	r0, r7
 800cfd0:	6001      	str	r1, [r0, #0]
 800cfd2:	4610      	mov	r0, r2
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	1dfb      	adds	r3, r7, #7
 800cfd8:	4622      	mov	r2, r4
 800cfda:	701a      	strb	r2, [r3, #0]
 800cfdc:	1dbb      	adds	r3, r7, #6
 800cfde:	4602      	mov	r2, r0
 800cfe0:	701a      	strb	r2, [r3, #0]
 800cfe2:	1d7b      	adds	r3, r7, #5
 800cfe4:	460a      	mov	r2, r1
 800cfe6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800cfe8:	f107 0310 	add.w	r3, r7, #16
 800cfec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800cff0:	1dfb      	adds	r3, r7, #7
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	2b01      	cmp	r3, #1
 800cff6:	d007      	beq.n	800d008 <aci_gatt_add_service+0x42>
 800cff8:	1dfb      	adds	r3, r7, #7
 800cffa:	781b      	ldrb	r3, [r3, #0]
 800cffc:	2b02      	cmp	r3, #2
 800cffe:	d101      	bne.n	800d004 <aci_gatt_add_service+0x3e>
 800d000:	2311      	movs	r3, #17
 800d002:	e002      	b.n	800d00a <aci_gatt_add_service+0x44>
 800d004:	2301      	movs	r3, #1
 800d006:	e000      	b.n	800d00a <aci_gatt_add_service+0x44>
 800d008:	2303      	movs	r3, #3
 800d00a:	f107 0210 	add.w	r2, r7, #16
 800d00e:	4413      	add	r3, r2
 800d010:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d014:	f107 030c 	add.w	r3, r7, #12
 800d018:	2203      	movs	r2, #3
 800d01a:	2100      	movs	r1, #0
 800d01c:	4618      	mov	r0, r3
 800d01e:	f000 fbb5 	bl	800d78c <Osal_MemSet>
  int index_input = 0;
 800d022:	2300      	movs	r3, #0
 800d024:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800d028:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d02c:	1dfa      	adds	r2, r7, #7
 800d02e:	7812      	ldrb	r2, [r2, #0]
 800d030:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d032:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d036:	3301      	adds	r3, #1
 800d038:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800d03c:	1dfb      	adds	r3, r7, #7
 800d03e:	781b      	ldrb	r3, [r3, #0]
 800d040:	2b01      	cmp	r3, #1
 800d042:	d002      	beq.n	800d04a <aci_gatt_add_service+0x84>
 800d044:	2b02      	cmp	r3, #2
 800d046:	d004      	beq.n	800d052 <aci_gatt_add_service+0x8c>
 800d048:	e007      	b.n	800d05a <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 800d04a:	2302      	movs	r3, #2
 800d04c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800d050:	e005      	b.n	800d05e <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800d052:	2310      	movs	r3, #16
 800d054:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800d058:	e001      	b.n	800d05e <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800d05a:	2347      	movs	r3, #71	; 0x47
 800d05c:	e05d      	b.n	800d11a <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800d05e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d062:	1c58      	adds	r0, r3, #1
 800d064:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800d068:	463b      	mov	r3, r7
 800d06a:	6819      	ldr	r1, [r3, #0]
 800d06c:	f000 fb7e 	bl	800d76c <Osal_MemCpy>
    index_input += size;
 800d070:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800d074:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d078:	4413      	add	r3, r2
 800d07a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800d07e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d082:	1dba      	adds	r2, r7, #6
 800d084:	7812      	ldrb	r2, [r2, #0]
 800d086:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800d088:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d08c:	3301      	adds	r3, #1
 800d08e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800d092:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d096:	1d7a      	adds	r2, r7, #5
 800d098:	7812      	ldrb	r2, [r2, #0]
 800d09a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800d09c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d0a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d0aa:	2218      	movs	r2, #24
 800d0ac:	2100      	movs	r1, #0
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f000 fb6c 	bl	800d78c <Osal_MemSet>
  rq.ogf = 0x3f;
 800d0b4:	233f      	movs	r3, #63	; 0x3f
 800d0b6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800d0ba:	f44f 7381 	mov.w	r3, #258	; 0x102
 800d0be:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d0c2:	f107 0310 	add.w	r3, r7, #16
 800d0c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d0ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d0ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800d0d2:	f107 030c 	add.w	r3, r7, #12
 800d0d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800d0da:	2303      	movs	r3, #3
 800d0dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d0e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d0e4:	2100      	movs	r1, #0
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f000 fbf8 	bl	800d8dc <hci_send_req>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	da01      	bge.n	800d0f6 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800d0f2:	23ff      	movs	r3, #255	; 0xff
 800d0f4:	e011      	b.n	800d11a <aci_gatt_add_service+0x154>
  if ( resp.Status )
 800d0f6:	f107 030c 	add.w	r3, r7, #12
 800d0fa:	781b      	ldrb	r3, [r3, #0]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d003      	beq.n	800d108 <aci_gatt_add_service+0x142>
    return resp.Status;
 800d100:	f107 030c 	add.w	r3, r7, #12
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	e008      	b.n	800d11a <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 800d108:	f107 030c 	add.w	r3, r7, #12
 800d10c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d110:	b29a      	uxth	r2, r3
 800d112:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d116:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d118:	2300      	movs	r3, #0
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800d120:	46bd      	mov	sp, r7
 800d122:	bd90      	pop	{r4, r7, pc}

0800d124 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800d124:	b590      	push	{r4, r7, lr}
 800d126:	b0d1      	sub	sp, #324	; 0x144
 800d128:	af00      	add	r7, sp, #0
 800d12a:	4604      	mov	r4, r0
 800d12c:	4608      	mov	r0, r1
 800d12e:	f107 0108 	add.w	r1, r7, #8
 800d132:	600a      	str	r2, [r1, #0]
 800d134:	4619      	mov	r1, r3
 800d136:	f107 030e 	add.w	r3, r7, #14
 800d13a:	4622      	mov	r2, r4
 800d13c:	801a      	strh	r2, [r3, #0]
 800d13e:	f107 030d 	add.w	r3, r7, #13
 800d142:	4602      	mov	r2, r0
 800d144:	701a      	strb	r2, [r3, #0]
 800d146:	1dbb      	adds	r3, r7, #6
 800d148:	460a      	mov	r2, r1
 800d14a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800d14c:	f107 0318 	add.w	r3, r7, #24
 800d150:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800d154:	f107 030d 	add.w	r3, r7, #13
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	2b01      	cmp	r3, #1
 800d15c:	d008      	beq.n	800d170 <aci_gatt_add_char+0x4c>
 800d15e:	f107 030d 	add.w	r3, r7, #13
 800d162:	781b      	ldrb	r3, [r3, #0]
 800d164:	2b02      	cmp	r3, #2
 800d166:	d101      	bne.n	800d16c <aci_gatt_add_char+0x48>
 800d168:	2313      	movs	r3, #19
 800d16a:	e002      	b.n	800d172 <aci_gatt_add_char+0x4e>
 800d16c:	2303      	movs	r3, #3
 800d16e:	e000      	b.n	800d172 <aci_gatt_add_char+0x4e>
 800d170:	2305      	movs	r3, #5
 800d172:	f107 0218 	add.w	r2, r7, #24
 800d176:	4413      	add	r3, r2
 800d178:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d17c:	f107 0314 	add.w	r3, r7, #20
 800d180:	2203      	movs	r2, #3
 800d182:	2100      	movs	r1, #0
 800d184:	4618      	mov	r0, r3
 800d186:	f000 fb01 	bl	800d78c <Osal_MemSet>
  int index_input = 0;
 800d18a:	2300      	movs	r3, #0
 800d18c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800d190:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800d194:	f107 020e 	add.w	r2, r7, #14
 800d198:	8812      	ldrh	r2, [r2, #0]
 800d19a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d19c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d1a0:	3302      	adds	r3, #2
 800d1a2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800d1a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800d1aa:	f107 020d 	add.w	r2, r7, #13
 800d1ae:	7812      	ldrb	r2, [r2, #0]
 800d1b0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d1b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800d1bc:	f107 030d 	add.w	r3, r7, #13
 800d1c0:	781b      	ldrb	r3, [r3, #0]
 800d1c2:	2b01      	cmp	r3, #1
 800d1c4:	d002      	beq.n	800d1cc <aci_gatt_add_char+0xa8>
 800d1c6:	2b02      	cmp	r3, #2
 800d1c8:	d004      	beq.n	800d1d4 <aci_gatt_add_char+0xb0>
 800d1ca:	e007      	b.n	800d1dc <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 800d1cc:	2302      	movs	r3, #2
 800d1ce:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800d1d2:	e005      	b.n	800d1e0 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 800d1d4:	2310      	movs	r3, #16
 800d1d6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800d1da:	e001      	b.n	800d1e0 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800d1dc:	2347      	movs	r3, #71	; 0x47
 800d1de:	e086      	b.n	800d2ee <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800d1e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800d1e4:	1cd8      	adds	r0, r3, #3
 800d1e6:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800d1ea:	f107 0308 	add.w	r3, r7, #8
 800d1ee:	6819      	ldr	r1, [r3, #0]
 800d1f0:	f000 fabc 	bl	800d76c <Osal_MemCpy>
    index_input += size;
 800d1f4:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800d1f8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800d1fc:	4413      	add	r3, r2
 800d1fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800d202:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d206:	1dba      	adds	r2, r7, #6
 800d208:	8812      	ldrh	r2, [r2, #0]
 800d20a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800d20c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d210:	3302      	adds	r3, #2
 800d212:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800d216:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d21a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800d21e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800d220:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d224:	3301      	adds	r3, #1
 800d226:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800d22a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d22e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800d232:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800d234:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d238:	3301      	adds	r3, #1
 800d23a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800d23e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d242:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800d246:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800d248:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d24c:	3301      	adds	r3, #1
 800d24e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800d252:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d256:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800d25a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800d25c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d260:	3301      	adds	r3, #1
 800d262:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800d266:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d26a:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800d26e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800d270:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d274:	3301      	adds	r3, #1
 800d276:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d27a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d27e:	2218      	movs	r2, #24
 800d280:	2100      	movs	r1, #0
 800d282:	4618      	mov	r0, r3
 800d284:	f000 fa82 	bl	800d78c <Osal_MemSet>
  rq.ogf = 0x3f;
 800d288:	233f      	movs	r3, #63	; 0x3f
 800d28a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800d28e:	f44f 7382 	mov.w	r3, #260	; 0x104
 800d292:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800d296:	f107 0318 	add.w	r3, r7, #24
 800d29a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800d29e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d2a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800d2a6:	f107 0314 	add.w	r3, r7, #20
 800d2aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800d2ae:	2303      	movs	r3, #3
 800d2b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d2b4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d2b8:	2100      	movs	r1, #0
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f000 fb0e 	bl	800d8dc <hci_send_req>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	da01      	bge.n	800d2ca <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 800d2c6:	23ff      	movs	r3, #255	; 0xff
 800d2c8:	e011      	b.n	800d2ee <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 800d2ca:	f107 0314 	add.w	r3, r7, #20
 800d2ce:	781b      	ldrb	r3, [r3, #0]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d003      	beq.n	800d2dc <aci_gatt_add_char+0x1b8>
    return resp.Status;
 800d2d4:	f107 0314 	add.w	r3, r7, #20
 800d2d8:	781b      	ldrb	r3, [r3, #0]
 800d2da:	e008      	b.n	800d2ee <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 800d2dc:	f107 0314 	add.w	r3, r7, #20
 800d2e0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d2e4:	b29a      	uxth	r2, r3
 800d2e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800d2ea:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d2ec:	2300      	movs	r3, #0
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd90      	pop	{r4, r7, pc}

0800d2f8 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800d2f8:	b5b0      	push	{r4, r5, r7, lr}
 800d2fa:	b0cc      	sub	sp, #304	; 0x130
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	4605      	mov	r5, r0
 800d300:	460c      	mov	r4, r1
 800d302:	4610      	mov	r0, r2
 800d304:	4619      	mov	r1, r3
 800d306:	1dbb      	adds	r3, r7, #6
 800d308:	462a      	mov	r2, r5
 800d30a:	801a      	strh	r2, [r3, #0]
 800d30c:	1d3b      	adds	r3, r7, #4
 800d30e:	4622      	mov	r2, r4
 800d310:	801a      	strh	r2, [r3, #0]
 800d312:	1cfb      	adds	r3, r7, #3
 800d314:	4602      	mov	r2, r0
 800d316:	701a      	strb	r2, [r3, #0]
 800d318:	1cbb      	adds	r3, r7, #2
 800d31a:	460a      	mov	r2, r1
 800d31c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800d31e:	f107 0310 	add.w	r3, r7, #16
 800d322:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d326:	f107 030f 	add.w	r3, r7, #15
 800d32a:	2200      	movs	r2, #0
 800d32c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d32e:	2300      	movs	r3, #0
 800d330:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800d334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d338:	1dba      	adds	r2, r7, #6
 800d33a:	8812      	ldrh	r2, [r2, #0]
 800d33c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d33e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d342:	3302      	adds	r3, #2
 800d344:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800d348:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d34c:	1d3a      	adds	r2, r7, #4
 800d34e:	8812      	ldrh	r2, [r2, #0]
 800d350:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800d352:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d356:	3302      	adds	r3, #2
 800d358:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800d35c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d360:	1cfa      	adds	r2, r7, #3
 800d362:	7812      	ldrb	r2, [r2, #0]
 800d364:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800d366:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d36a:	3301      	adds	r3, #1
 800d36c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800d370:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d374:	1cba      	adds	r2, r7, #2
 800d376:	7812      	ldrb	r2, [r2, #0]
 800d378:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d37a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d37e:	3301      	adds	r3, #1
 800d380:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800d384:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d388:	1d98      	adds	r0, r3, #6
 800d38a:	1cbb      	adds	r3, r7, #2
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	461a      	mov	r2, r3
 800d390:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800d394:	f000 f9ea 	bl	800d76c <Osal_MemCpy>
  index_input += Char_Value_Length;
 800d398:	1cbb      	adds	r3, r7, #2
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d3a0:	4413      	add	r3, r2
 800d3a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d3a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d3aa:	2218      	movs	r2, #24
 800d3ac:	2100      	movs	r1, #0
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f000 f9ec 	bl	800d78c <Osal_MemSet>
  rq.ogf = 0x3f;
 800d3b4:	233f      	movs	r3, #63	; 0x3f
 800d3b6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800d3ba:	f44f 7383 	mov.w	r3, #262	; 0x106
 800d3be:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d3c2:	f107 0310 	add.w	r3, r7, #16
 800d3c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d3ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d3ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d3d2:	f107 030f 	add.w	r3, r7, #15
 800d3d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d3da:	2301      	movs	r3, #1
 800d3dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d3e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d3e4:	2100      	movs	r1, #0
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f000 fa78 	bl	800d8dc <hci_send_req>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	da01      	bge.n	800d3f6 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800d3f2:	23ff      	movs	r3, #255	; 0xff
 800d3f4:	e002      	b.n	800d3fc <aci_gatt_update_char_value+0x104>
  return status;
 800d3f6:	f107 030f 	add.w	r3, r7, #15
 800d3fa:	781b      	ldrb	r3, [r3, #0]
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d402:	46bd      	mov	sp, r7
 800d404:	bdb0      	pop	{r4, r5, r7, pc}

0800d406 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800d406:	b580      	push	{r7, lr}
 800d408:	b0cc      	sub	sp, #304	; 0x130
 800d40a:	af00      	add	r7, sp, #0
 800d40c:	463b      	mov	r3, r7
 800d40e:	601a      	str	r2, [r3, #0]
 800d410:	1dfb      	adds	r3, r7, #7
 800d412:	4602      	mov	r2, r0
 800d414:	701a      	strb	r2, [r3, #0]
 800d416:	1dbb      	adds	r3, r7, #6
 800d418:	460a      	mov	r2, r1
 800d41a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800d41c:	f107 0310 	add.w	r3, r7, #16
 800d420:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d424:	f107 030f 	add.w	r3, r7, #15
 800d428:	2200      	movs	r2, #0
 800d42a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d42c:	2300      	movs	r3, #0
 800d42e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800d432:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d436:	1dfa      	adds	r2, r7, #7
 800d438:	7812      	ldrb	r2, [r2, #0]
 800d43a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d43c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d440:	3301      	adds	r3, #1
 800d442:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800d446:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d44a:	1dba      	adds	r2, r7, #6
 800d44c:	7812      	ldrb	r2, [r2, #0]
 800d44e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d450:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d454:	3301      	adds	r3, #1
 800d456:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800d45a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d45e:	1c98      	adds	r0, r3, #2
 800d460:	1dbb      	adds	r3, r7, #6
 800d462:	781a      	ldrb	r2, [r3, #0]
 800d464:	463b      	mov	r3, r7
 800d466:	6819      	ldr	r1, [r3, #0]
 800d468:	f000 f980 	bl	800d76c <Osal_MemCpy>
  index_input += Length;
 800d46c:	1dbb      	adds	r3, r7, #6
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d474:	4413      	add	r3, r2
 800d476:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d47a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d47e:	2218      	movs	r2, #24
 800d480:	2100      	movs	r1, #0
 800d482:	4618      	mov	r0, r3
 800d484:	f000 f982 	bl	800d78c <Osal_MemSet>
  rq.ogf = 0x3f;
 800d488:	233f      	movs	r3, #63	; 0x3f
 800d48a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800d48e:	230c      	movs	r3, #12
 800d490:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d494:	f107 0310 	add.w	r3, r7, #16
 800d498:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d49c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d4a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d4a4:	f107 030f 	add.w	r3, r7, #15
 800d4a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d4b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d4b6:	2100      	movs	r1, #0
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f000 fa0f 	bl	800d8dc <hci_send_req>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	da01      	bge.n	800d4c8 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800d4c4:	23ff      	movs	r3, #255	; 0xff
 800d4c6:	e002      	b.n	800d4ce <aci_hal_write_config_data+0xc8>
  return status;
 800d4c8:	f107 030f 	add.w	r3, r7, #15
 800d4cc:	781b      	ldrb	r3, [r3, #0]
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}

0800d4d8 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b0cc      	sub	sp, #304	; 0x130
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	4602      	mov	r2, r0
 800d4e0:	1dfb      	adds	r3, r7, #7
 800d4e2:	701a      	strb	r2, [r3, #0]
 800d4e4:	1dbb      	adds	r3, r7, #6
 800d4e6:	460a      	mov	r2, r1
 800d4e8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800d4ea:	f107 0310 	add.w	r3, r7, #16
 800d4ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d4f2:	f107 030f 	add.w	r3, r7, #15
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800d500:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d504:	1dfa      	adds	r2, r7, #7
 800d506:	7812      	ldrb	r2, [r2, #0]
 800d508:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d50a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d50e:	3301      	adds	r3, #1
 800d510:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800d514:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d518:	1dba      	adds	r2, r7, #6
 800d51a:	7812      	ldrb	r2, [r2, #0]
 800d51c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d51e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d522:	3301      	adds	r3, #1
 800d524:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d528:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d52c:	2218      	movs	r2, #24
 800d52e:	2100      	movs	r1, #0
 800d530:	4618      	mov	r0, r3
 800d532:	f000 f92b 	bl	800d78c <Osal_MemSet>
  rq.ogf = 0x3f;
 800d536:	233f      	movs	r3, #63	; 0x3f
 800d538:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800d53c:	230f      	movs	r3, #15
 800d53e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d542:	f107 0310 	add.w	r3, r7, #16
 800d546:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d54a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d54e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d552:	f107 030f 	add.w	r3, r7, #15
 800d556:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d55a:	2301      	movs	r3, #1
 800d55c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d560:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d564:	2100      	movs	r1, #0
 800d566:	4618      	mov	r0, r3
 800d568:	f000 f9b8 	bl	800d8dc <hci_send_req>
 800d56c:	4603      	mov	r3, r0
 800d56e:	2b00      	cmp	r3, #0
 800d570:	da01      	bge.n	800d576 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800d572:	23ff      	movs	r3, #255	; 0xff
 800d574:	e002      	b.n	800d57c <aci_hal_set_tx_power_level+0xa4>
  return status;
 800d576:	f107 030f 	add.w	r3, r7, #15
 800d57a:	781b      	ldrb	r3, [r3, #0]
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}

0800d586 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800d586:	b580      	push	{r7, lr}
 800d588:	b088      	sub	sp, #32
 800d58a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d58c:	2300      	movs	r3, #0
 800d58e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d590:	f107 0308 	add.w	r3, r7, #8
 800d594:	2218      	movs	r2, #24
 800d596:	2100      	movs	r1, #0
 800d598:	4618      	mov	r0, r3
 800d59a:	f000 f8f7 	bl	800d78c <Osal_MemSet>
  rq.ogf = 0x03;
 800d59e:	2303      	movs	r3, #3
 800d5a0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800d5a2:	2303      	movs	r3, #3
 800d5a4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d5a6:	1dfb      	adds	r3, r7, #7
 800d5a8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d5ae:	f107 0308 	add.w	r3, r7, #8
 800d5b2:	2100      	movs	r1, #0
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f000 f991 	bl	800d8dc <hci_send_req>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	da01      	bge.n	800d5c4 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800d5c0:	23ff      	movs	r3, #255	; 0xff
 800d5c2:	e000      	b.n	800d5c6 <hci_reset+0x40>
  return status;
 800d5c4:	79fb      	ldrb	r3, [r7, #7]
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3720      	adds	r7, #32
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}

0800d5ce <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800d5ce:	b580      	push	{r7, lr}
 800d5d0:	b0ce      	sub	sp, #312	; 0x138
 800d5d2:	af00      	add	r7, sp, #0
 800d5d4:	f107 0308 	add.w	r3, r7, #8
 800d5d8:	6019      	str	r1, [r3, #0]
 800d5da:	1d3b      	adds	r3, r7, #4
 800d5dc:	601a      	str	r2, [r3, #0]
 800d5de:	f107 030e 	add.w	r3, r7, #14
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800d5e6:	f107 0318 	add.w	r3, r7, #24
 800d5ea:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d5ee:	f107 0310 	add.w	r3, r7, #16
 800d5f2:	2205      	movs	r2, #5
 800d5f4:	2100      	movs	r1, #0
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f000 f8c8 	bl	800d78c <Osal_MemSet>
  int index_input = 0;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800d602:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d606:	f107 020e 	add.w	r2, r7, #14
 800d60a:	8812      	ldrh	r2, [r2, #0]
 800d60c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d60e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d612:	3302      	adds	r3, #2
 800d614:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d618:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d61c:	2218      	movs	r2, #24
 800d61e:	2100      	movs	r1, #0
 800d620:	4618      	mov	r0, r3
 800d622:	f000 f8b3 	bl	800d78c <Osal_MemSet>
  rq.ogf = 0x08;
 800d626:	2308      	movs	r3, #8
 800d628:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800d62c:	2330      	movs	r3, #48	; 0x30
 800d62e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800d632:	f107 0318 	add.w	r3, r7, #24
 800d636:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800d63a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d63e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800d642:	f107 0310 	add.w	r3, r7, #16
 800d646:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800d64a:	2305      	movs	r3, #5
 800d64c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d650:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d654:	2100      	movs	r1, #0
 800d656:	4618      	mov	r0, r3
 800d658:	f000 f940 	bl	800d8dc <hci_send_req>
 800d65c:	4603      	mov	r3, r0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	da01      	bge.n	800d666 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 800d662:	23ff      	movs	r3, #255	; 0xff
 800d664:	e016      	b.n	800d694 <hci_le_read_phy+0xc6>
  if ( resp.Status )
 800d666:	f107 0310 	add.w	r3, r7, #16
 800d66a:	781b      	ldrb	r3, [r3, #0]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d003      	beq.n	800d678 <hci_le_read_phy+0xaa>
    return resp.Status;
 800d670:	f107 0310 	add.w	r3, r7, #16
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	e00d      	b.n	800d694 <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 800d678:	f107 0310 	add.w	r3, r7, #16
 800d67c:	78da      	ldrb	r2, [r3, #3]
 800d67e:	f107 0308 	add.w	r3, r7, #8
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800d686:	f107 0310 	add.w	r3, r7, #16
 800d68a:	791a      	ldrb	r2, [r3, #4]
 800d68c:	1d3b      	adds	r3, r7, #4
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d692:	2300      	movs	r3, #0
}
 800d694:	4618      	mov	r0, r3
 800d696:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}

0800d69e <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800d69e:	b590      	push	{r4, r7, lr}
 800d6a0:	b0cd      	sub	sp, #308	; 0x134
 800d6a2:	af00      	add	r7, sp, #0
 800d6a4:	4604      	mov	r4, r0
 800d6a6:	4608      	mov	r0, r1
 800d6a8:	4611      	mov	r1, r2
 800d6aa:	1dfb      	adds	r3, r7, #7
 800d6ac:	4622      	mov	r2, r4
 800d6ae:	701a      	strb	r2, [r3, #0]
 800d6b0:	1dbb      	adds	r3, r7, #6
 800d6b2:	4602      	mov	r2, r0
 800d6b4:	701a      	strb	r2, [r3, #0]
 800d6b6:	1d7b      	adds	r3, r7, #5
 800d6b8:	460a      	mov	r2, r1
 800d6ba:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800d6bc:	f107 0310 	add.w	r3, r7, #16
 800d6c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d6c4:	f107 030f 	add.w	r3, r7, #15
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800d6d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d6d6:	1dfa      	adds	r2, r7, #7
 800d6d8:	7812      	ldrb	r2, [r2, #0]
 800d6da:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d6dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d6e0:	3301      	adds	r3, #1
 800d6e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800d6e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d6ea:	1dba      	adds	r2, r7, #6
 800d6ec:	7812      	ldrb	r2, [r2, #0]
 800d6ee:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d6f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d6f4:	3301      	adds	r3, #1
 800d6f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800d6fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d6fe:	1d7a      	adds	r2, r7, #5
 800d700:	7812      	ldrb	r2, [r2, #0]
 800d702:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d704:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d708:	3301      	adds	r3, #1
 800d70a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d70e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d712:	2218      	movs	r2, #24
 800d714:	2100      	movs	r1, #0
 800d716:	4618      	mov	r0, r3
 800d718:	f000 f838 	bl	800d78c <Osal_MemSet>
  rq.ogf = 0x08;
 800d71c:	2308      	movs	r3, #8
 800d71e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800d722:	2331      	movs	r3, #49	; 0x31
 800d724:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d728:	f107 0310 	add.w	r3, r7, #16
 800d72c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d730:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d734:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d738:	f107 030f 	add.w	r3, r7, #15
 800d73c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d740:	2301      	movs	r3, #1
 800d742:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d746:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d74a:	2100      	movs	r1, #0
 800d74c:	4618      	mov	r0, r3
 800d74e:	f000 f8c5 	bl	800d8dc <hci_send_req>
 800d752:	4603      	mov	r3, r0
 800d754:	2b00      	cmp	r3, #0
 800d756:	da01      	bge.n	800d75c <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 800d758:	23ff      	movs	r3, #255	; 0xff
 800d75a:	e002      	b.n	800d762 <hci_le_set_default_phy+0xc4>
  return status;
 800d75c:	f107 030f 	add.w	r3, r7, #15
 800d760:	781b      	ldrb	r3, [r3, #0]
}
 800d762:	4618      	mov	r0, r3
 800d764:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd90      	pop	{r4, r7, pc}

0800d76c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b084      	sub	sp, #16
 800d770:	af00      	add	r7, sp, #0
 800d772:	60f8      	str	r0, [r7, #12]
 800d774:	60b9      	str	r1, [r7, #8]
 800d776:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800d778:	687a      	ldr	r2, [r7, #4]
 800d77a:	68b9      	ldr	r1, [r7, #8]
 800d77c:	68f8      	ldr	r0, [r7, #12]
 800d77e:	f005 fe55 	bl	801342c <memcpy>
 800d782:	4603      	mov	r3, r0
}
 800d784:	4618      	mov	r0, r3
 800d786:	3710      	adds	r7, #16
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}

0800d78c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b084      	sub	sp, #16
 800d790:	af00      	add	r7, sp, #0
 800d792:	60f8      	str	r0, [r7, #12]
 800d794:	60b9      	str	r1, [r7, #8]
 800d796:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800d798:	687a      	ldr	r2, [r7, #4]
 800d79a:	68b9      	ldr	r1, [r7, #8]
 800d79c:	68f8      	ldr	r0, [r7, #12]
 800d79e:	f005 fe50 	bl	8013442 <memset>
 800d7a2:	4603      	mov	r3, r0
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3710      	adds	r7, #16
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b088      	sub	sp, #32
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800d7b4:	f107 030c 	add.w	r3, r7, #12
 800d7b8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800d7c0:	69fb      	ldr	r3, [r7, #28]
 800d7c2:	2121      	movs	r1, #33	; 0x21
 800d7c4:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800d7c8:	f000 fa1e 	bl	800dc08 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800d7cc:	69fb      	ldr	r3, [r7, #28]
 800d7ce:	330b      	adds	r3, #11
 800d7d0:	78db      	ldrb	r3, [r3, #3]
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3720      	adds	r7, #32
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}

0800d7da <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800d7da:	b580      	push	{r7, lr}
 800d7dc:	b088      	sub	sp, #32
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800d7e2:	f107 030c 	add.w	r3, r7, #12
 800d7e6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800d7ee:	69fb      	ldr	r3, [r7, #28]
 800d7f0:	210f      	movs	r1, #15
 800d7f2:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800d7f6:	f000 fa07 	bl	800dc08 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800d7fa:	69fb      	ldr	r3, [r7, #28]
 800d7fc:	330b      	adds	r3, #11
 800d7fe:	78db      	ldrb	r3, [r3, #3]
}
 800d800:	4618      	mov	r0, r3
 800d802:	3720      	adds	r7, #32
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}

0800d808 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b082      	sub	sp, #8
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	685b      	ldr	r3, [r3, #4]
 800d816:	4a08      	ldr	r2, [pc, #32]	; (800d838 <hci_init+0x30>)
 800d818:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800d81a:	4a08      	ldr	r2, [pc, #32]	; (800d83c <hci_init+0x34>)
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800d820:	4806      	ldr	r0, [pc, #24]	; (800d83c <hci_init+0x34>)
 800d822:	f000 f973 	bl	800db0c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	4618      	mov	r0, r3
 800d82c:	f000 f8d4 	bl	800d9d8 <TlInit>

  return;
 800d830:	bf00      	nop
}
 800d832:	3708      	adds	r7, #8
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}
 800d838:	200003d0 	.word	0x200003d0
 800d83c:	200003a8 	.word	0x200003a8

0800d840 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b084      	sub	sp, #16
 800d844:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800d846:	4822      	ldr	r0, [pc, #136]	; (800d8d0 <hci_user_evt_proc+0x90>)
 800d848:	f000 ff04 	bl	800e654 <LST_is_empty>
 800d84c:	4603      	mov	r3, r0
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d12b      	bne.n	800d8aa <hci_user_evt_proc+0x6a>
 800d852:	4b20      	ldr	r3, [pc, #128]	; (800d8d4 <hci_user_evt_proc+0x94>)
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d027      	beq.n	800d8aa <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800d85a:	f107 030c 	add.w	r3, r7, #12
 800d85e:	4619      	mov	r1, r3
 800d860:	481b      	ldr	r0, [pc, #108]	; (800d8d0 <hci_user_evt_proc+0x90>)
 800d862:	f000 ff7e 	bl	800e762 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800d866:	4b1c      	ldr	r3, [pc, #112]	; (800d8d8 <hci_user_evt_proc+0x98>)
 800d868:	69db      	ldr	r3, [r3, #28]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d00c      	beq.n	800d888 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800d872:	2301      	movs	r3, #1
 800d874:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800d876:	4b18      	ldr	r3, [pc, #96]	; (800d8d8 <hci_user_evt_proc+0x98>)
 800d878:	69db      	ldr	r3, [r3, #28]
 800d87a:	1d3a      	adds	r2, r7, #4
 800d87c:	4610      	mov	r0, r2
 800d87e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800d880:	793a      	ldrb	r2, [r7, #4]
 800d882:	4b14      	ldr	r3, [pc, #80]	; (800d8d4 <hci_user_evt_proc+0x94>)
 800d884:	701a      	strb	r2, [r3, #0]
 800d886:	e002      	b.n	800d88e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800d888:	4b12      	ldr	r3, [pc, #72]	; (800d8d4 <hci_user_evt_proc+0x94>)
 800d88a:	2201      	movs	r2, #1
 800d88c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800d88e:	4b11      	ldr	r3, [pc, #68]	; (800d8d4 <hci_user_evt_proc+0x94>)
 800d890:	781b      	ldrb	r3, [r3, #0]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d004      	beq.n	800d8a0 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	4618      	mov	r0, r3
 800d89a:	f000 fc03 	bl	800e0a4 <TL_MM_EvtDone>
 800d89e:	e004      	b.n	800d8aa <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	4619      	mov	r1, r3
 800d8a4:	480a      	ldr	r0, [pc, #40]	; (800d8d0 <hci_user_evt_proc+0x90>)
 800d8a6:	f000 fef5 	bl	800e694 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800d8aa:	4809      	ldr	r0, [pc, #36]	; (800d8d0 <hci_user_evt_proc+0x90>)
 800d8ac:	f000 fed2 	bl	800e654 <LST_is_empty>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d107      	bne.n	800d8c6 <hci_user_evt_proc+0x86>
 800d8b6:	4b07      	ldr	r3, [pc, #28]	; (800d8d4 <hci_user_evt_proc+0x94>)
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d003      	beq.n	800d8c6 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800d8be:	4804      	ldr	r0, [pc, #16]	; (800d8d0 <hci_user_evt_proc+0x90>)
 800d8c0:	f7f3 fde8 	bl	8001494 <hci_notify_asynch_evt>
  }


  return;
 800d8c4:	bf00      	nop
 800d8c6:	bf00      	nop
}
 800d8c8:	3710      	adds	r7, #16
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}
 800d8ce:	bf00      	nop
 800d8d0:	20000344 	.word	0x20000344
 800d8d4:	20000350 	.word	0x20000350
 800d8d8:	200003a8 	.word	0x200003a8

0800d8dc <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b088      	sub	sp, #32
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800d8e8:	2000      	movs	r0, #0
 800d8ea:	f000 f8cb 	bl	800da84 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	885b      	ldrh	r3, [r3, #2]
 800d8f6:	b21b      	sxth	r3, r3
 800d8f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d8fc:	b21a      	sxth	r2, r3
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	881b      	ldrh	r3, [r3, #0]
 800d902:	029b      	lsls	r3, r3, #10
 800d904:	b21b      	sxth	r3, r3
 800d906:	4313      	orrs	r3, r2
 800d908:	b21b      	sxth	r3, r3
 800d90a:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	68db      	ldr	r3, [r3, #12]
 800d910:	b2d9      	uxtb	r1, r3
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	689a      	ldr	r2, [r3, #8]
 800d916:	8bbb      	ldrh	r3, [r7, #28]
 800d918:	4618      	mov	r0, r3
 800d91a:	f000 f88d 	bl	800da38 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800d91e:	e04e      	b.n	800d9be <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800d920:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800d924:	f7f3 fdd6 	bl	80014d4 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800d928:	e043      	b.n	800d9b2 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800d92a:	f107 030c 	add.w	r3, r7, #12
 800d92e:	4619      	mov	r1, r3
 800d930:	4828      	ldr	r0, [pc, #160]	; (800d9d4 <hci_send_req+0xf8>)
 800d932:	f000 ff16 	bl	800e762 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	7a5b      	ldrb	r3, [r3, #9]
 800d93a:	2b0f      	cmp	r3, #15
 800d93c:	d114      	bne.n	800d968 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	330b      	adds	r3, #11
 800d942:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	885b      	ldrh	r3, [r3, #2]
 800d948:	b29b      	uxth	r3, r3
 800d94a:	8bba      	ldrh	r2, [r7, #28]
 800d94c:	429a      	cmp	r2, r3
 800d94e:	d104      	bne.n	800d95a <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	691b      	ldr	r3, [r3, #16]
 800d954:	693a      	ldr	r2, [r7, #16]
 800d956:	7812      	ldrb	r2, [r2, #0]
 800d958:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800d95a:	693b      	ldr	r3, [r7, #16]
 800d95c:	785b      	ldrb	r3, [r3, #1]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d027      	beq.n	800d9b2 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800d962:	2301      	movs	r3, #1
 800d964:	77fb      	strb	r3, [r7, #31]
 800d966:	e024      	b.n	800d9b2 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	330b      	adds	r3, #11
 800d96c:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800d96e:	69bb      	ldr	r3, [r7, #24]
 800d970:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d974:	b29b      	uxth	r3, r3
 800d976:	8bba      	ldrh	r2, [r7, #28]
 800d978:	429a      	cmp	r2, r3
 800d97a:	d114      	bne.n	800d9a6 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	7a9b      	ldrb	r3, [r3, #10]
 800d980:	3b03      	subs	r3, #3
 800d982:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	695a      	ldr	r2, [r3, #20]
 800d988:	7dfb      	ldrb	r3, [r7, #23]
 800d98a:	429a      	cmp	r2, r3
 800d98c:	bfa8      	it	ge
 800d98e:	461a      	movge	r2, r3
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6918      	ldr	r0, [r3, #16]
 800d998:	69bb      	ldr	r3, [r7, #24]
 800d99a:	1cd9      	adds	r1, r3, #3
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	695b      	ldr	r3, [r3, #20]
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	f005 fd43 	bl	801342c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800d9a6:	69bb      	ldr	r3, [r7, #24]
 800d9a8:	781b      	ldrb	r3, [r3, #0]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d001      	beq.n	800d9b2 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800d9b2:	4808      	ldr	r0, [pc, #32]	; (800d9d4 <hci_send_req+0xf8>)
 800d9b4:	f000 fe4e 	bl	800e654 <LST_is_empty>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d0b5      	beq.n	800d92a <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800d9be:	7ffb      	ldrb	r3, [r7, #31]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d0ad      	beq.n	800d920 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800d9c4:	2001      	movs	r0, #1
 800d9c6:	f000 f85d 	bl	800da84 <NotifyCmdStatus>

  return 0;
 800d9ca:	2300      	movs	r3, #0
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3720      	adds	r7, #32
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}
 800d9d4:	200003c8 	.word	0x200003c8

0800d9d8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b086      	sub	sp, #24
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800d9e0:	480f      	ldr	r0, [pc, #60]	; (800da20 <TlInit+0x48>)
 800d9e2:	f000 fe27 	bl	800e634 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800d9e6:	4a0f      	ldr	r2, [pc, #60]	; (800da24 <TlInit+0x4c>)
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800d9ec:	480e      	ldr	r0, [pc, #56]	; (800da28 <TlInit+0x50>)
 800d9ee:	f000 fe21 	bl	800e634 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800d9f2:	4b0e      	ldr	r3, [pc, #56]	; (800da2c <TlInit+0x54>)
 800d9f4:	2201      	movs	r2, #1
 800d9f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800d9f8:	4b0d      	ldr	r3, [pc, #52]	; (800da30 <TlInit+0x58>)
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d00a      	beq.n	800da16 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800da04:	4b0b      	ldr	r3, [pc, #44]	; (800da34 <TlInit+0x5c>)
 800da06:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800da08:	4b09      	ldr	r3, [pc, #36]	; (800da30 <TlInit+0x58>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	f107 0208 	add.w	r2, r7, #8
 800da10:	4610      	mov	r0, r2
 800da12:	4798      	blx	r3
  }

  return;
 800da14:	bf00      	nop
 800da16:	bf00      	nop
}
 800da18:	3718      	adds	r7, #24
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	200003c8 	.word	0x200003c8
 800da24:	2000034c 	.word	0x2000034c
 800da28:	20000344 	.word	0x20000344
 800da2c:	20000350 	.word	0x20000350
 800da30:	200003a8 	.word	0x200003a8
 800da34:	0800dac5 	.word	0x0800dac5

0800da38 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b082      	sub	sp, #8
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	4603      	mov	r3, r0
 800da40:	603a      	str	r2, [r7, #0]
 800da42:	80fb      	strh	r3, [r7, #6]
 800da44:	460b      	mov	r3, r1
 800da46:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800da48:	4b0c      	ldr	r3, [pc, #48]	; (800da7c <SendCmd+0x44>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	88fa      	ldrh	r2, [r7, #6]
 800da4e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800da52:	4b0a      	ldr	r3, [pc, #40]	; (800da7c <SendCmd+0x44>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	797a      	ldrb	r2, [r7, #5]
 800da58:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800da5a:	4b08      	ldr	r3, [pc, #32]	; (800da7c <SendCmd+0x44>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	330c      	adds	r3, #12
 800da60:	797a      	ldrb	r2, [r7, #5]
 800da62:	6839      	ldr	r1, [r7, #0]
 800da64:	4618      	mov	r0, r3
 800da66:	f005 fce1 	bl	801342c <memcpy>

  hciContext.io.Send(0,0);
 800da6a:	4b05      	ldr	r3, [pc, #20]	; (800da80 <SendCmd+0x48>)
 800da6c:	691b      	ldr	r3, [r3, #16]
 800da6e:	2100      	movs	r1, #0
 800da70:	2000      	movs	r0, #0
 800da72:	4798      	blx	r3

  return;
 800da74:	bf00      	nop
}
 800da76:	3708      	adds	r7, #8
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}
 800da7c:	2000034c 	.word	0x2000034c
 800da80:	200003a8 	.word	0x200003a8

0800da84 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b082      	sub	sp, #8
 800da88:	af00      	add	r7, sp, #0
 800da8a:	4603      	mov	r3, r0
 800da8c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800da8e:	79fb      	ldrb	r3, [r7, #7]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d108      	bne.n	800daa6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800da94:	4b0a      	ldr	r3, [pc, #40]	; (800dac0 <NotifyCmdStatus+0x3c>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d00d      	beq.n	800dab8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800da9c:	4b08      	ldr	r3, [pc, #32]	; (800dac0 <NotifyCmdStatus+0x3c>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	2000      	movs	r0, #0
 800daa2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800daa4:	e008      	b.n	800dab8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800daa6:	4b06      	ldr	r3, [pc, #24]	; (800dac0 <NotifyCmdStatus+0x3c>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d004      	beq.n	800dab8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800daae:	4b04      	ldr	r3, [pc, #16]	; (800dac0 <NotifyCmdStatus+0x3c>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	2001      	movs	r0, #1
 800dab4:	4798      	blx	r3
  return;
 800dab6:	bf00      	nop
 800dab8:	bf00      	nop
}
 800daba:	3708      	adds	r7, #8
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}
 800dac0:	200003d0 	.word	0x200003d0

0800dac4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b082      	sub	sp, #8
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	7a5b      	ldrb	r3, [r3, #9]
 800dad0:	2b0f      	cmp	r3, #15
 800dad2:	d003      	beq.n	800dadc <TlEvtReceived+0x18>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	7a5b      	ldrb	r3, [r3, #9]
 800dad8:	2b0e      	cmp	r3, #14
 800dada:	d107      	bne.n	800daec <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800dadc:	6879      	ldr	r1, [r7, #4]
 800dade:	4809      	ldr	r0, [pc, #36]	; (800db04 <TlEvtReceived+0x40>)
 800dae0:	f000 fdfc 	bl	800e6dc <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800dae4:	2000      	movs	r0, #0
 800dae6:	f7f3 fce5 	bl	80014b4 <hci_cmd_resp_release>
 800daea:	e006      	b.n	800dafa <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800daec:	6879      	ldr	r1, [r7, #4]
 800daee:	4806      	ldr	r0, [pc, #24]	; (800db08 <TlEvtReceived+0x44>)
 800daf0:	f000 fdf4 	bl	800e6dc <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800daf4:	4804      	ldr	r0, [pc, #16]	; (800db08 <TlEvtReceived+0x44>)
 800daf6:	f7f3 fccd 	bl	8001494 <hci_notify_asynch_evt>
  }

  return;
 800dafa:	bf00      	nop
}
 800dafc:	3708      	adds	r7, #8
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	200003c8 	.word	0x200003c8
 800db08:	20000344 	.word	0x20000344

0800db0c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800db0c:	b480      	push	{r7}
 800db0e:	b083      	sub	sp, #12
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	4a05      	ldr	r2, [pc, #20]	; (800db2c <hci_register_io_bus+0x20>)
 800db18:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	4a04      	ldr	r2, [pc, #16]	; (800db30 <hci_register_io_bus+0x24>)
 800db1e:	611a      	str	r2, [r3, #16]

  return;
 800db20:	bf00      	nop
}
 800db22:	370c      	adds	r7, #12
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr
 800db2c:	0800de1d 	.word	0x0800de1d
 800db30:	0800de85 	.word	0x0800de85

0800db34 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b082      	sub	sp, #8
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	685b      	ldr	r3, [r3, #4]
 800db42:	4a08      	ldr	r2, [pc, #32]	; (800db64 <shci_init+0x30>)
 800db44:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800db46:	4a08      	ldr	r2, [pc, #32]	; (800db68 <shci_init+0x34>)
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800db4c:	4806      	ldr	r0, [pc, #24]	; (800db68 <shci_init+0x34>)
 800db4e:	f000 f911 	bl	800dd74 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	4618      	mov	r0, r3
 800db58:	f000 f894 	bl	800dc84 <TlInit>

  return;
 800db5c:	bf00      	nop
}
 800db5e:	3708      	adds	r7, #8
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}
 800db64:	200003f4 	.word	0x200003f4
 800db68:	200003d4 	.word	0x200003d4

0800db6c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b084      	sub	sp, #16
 800db70:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800db72:	4822      	ldr	r0, [pc, #136]	; (800dbfc <shci_user_evt_proc+0x90>)
 800db74:	f000 fd6e 	bl	800e654 <LST_is_empty>
 800db78:	4603      	mov	r3, r0
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d12b      	bne.n	800dbd6 <shci_user_evt_proc+0x6a>
 800db7e:	4b20      	ldr	r3, [pc, #128]	; (800dc00 <shci_user_evt_proc+0x94>)
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d027      	beq.n	800dbd6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800db86:	f107 030c 	add.w	r3, r7, #12
 800db8a:	4619      	mov	r1, r3
 800db8c:	481b      	ldr	r0, [pc, #108]	; (800dbfc <shci_user_evt_proc+0x90>)
 800db8e:	f000 fde8 	bl	800e762 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800db92:	4b1c      	ldr	r3, [pc, #112]	; (800dc04 <shci_user_evt_proc+0x98>)
 800db94:	69db      	ldr	r3, [r3, #28]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d00c      	beq.n	800dbb4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800db9e:	2301      	movs	r3, #1
 800dba0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800dba2:	4b18      	ldr	r3, [pc, #96]	; (800dc04 <shci_user_evt_proc+0x98>)
 800dba4:	69db      	ldr	r3, [r3, #28]
 800dba6:	1d3a      	adds	r2, r7, #4
 800dba8:	4610      	mov	r0, r2
 800dbaa:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800dbac:	793a      	ldrb	r2, [r7, #4]
 800dbae:	4b14      	ldr	r3, [pc, #80]	; (800dc00 <shci_user_evt_proc+0x94>)
 800dbb0:	701a      	strb	r2, [r3, #0]
 800dbb2:	e002      	b.n	800dbba <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800dbb4:	4b12      	ldr	r3, [pc, #72]	; (800dc00 <shci_user_evt_proc+0x94>)
 800dbb6:	2201      	movs	r2, #1
 800dbb8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800dbba:	4b11      	ldr	r3, [pc, #68]	; (800dc00 <shci_user_evt_proc+0x94>)
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d004      	beq.n	800dbcc <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f000 fa6d 	bl	800e0a4 <TL_MM_EvtDone>
 800dbca:	e004      	b.n	800dbd6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	4619      	mov	r1, r3
 800dbd0:	480a      	ldr	r0, [pc, #40]	; (800dbfc <shci_user_evt_proc+0x90>)
 800dbd2:	f000 fd5f 	bl	800e694 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800dbd6:	4809      	ldr	r0, [pc, #36]	; (800dbfc <shci_user_evt_proc+0x90>)
 800dbd8:	f000 fd3c 	bl	800e654 <LST_is_empty>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d107      	bne.n	800dbf2 <shci_user_evt_proc+0x86>
 800dbe2:	4b07      	ldr	r3, [pc, #28]	; (800dc00 <shci_user_evt_proc+0x94>)
 800dbe4:	781b      	ldrb	r3, [r3, #0]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d003      	beq.n	800dbf2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800dbea:	4804      	ldr	r0, [pc, #16]	; (800dbfc <shci_user_evt_proc+0x90>)
 800dbec:	f7f4 f9e0 	bl	8001fb0 <shci_notify_asynch_evt>
  }


  return;
 800dbf0:	bf00      	nop
 800dbf2:	bf00      	nop
}
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	2000035c 	.word	0x2000035c
 800dc00:	2000036c 	.word	0x2000036c
 800dc04:	200003d4 	.word	0x200003d4

0800dc08 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b084      	sub	sp, #16
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	60ba      	str	r2, [r7, #8]
 800dc10:	607b      	str	r3, [r7, #4]
 800dc12:	4603      	mov	r3, r0
 800dc14:	81fb      	strh	r3, [r7, #14]
 800dc16:	460b      	mov	r3, r1
 800dc18:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800dc1a:	2000      	movs	r0, #0
 800dc1c:	f000 f864 	bl	800dce8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800dc20:	4b16      	ldr	r3, [pc, #88]	; (800dc7c <shci_send+0x74>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	89fa      	ldrh	r2, [r7, #14]
 800dc26:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800dc2a:	4b14      	ldr	r3, [pc, #80]	; (800dc7c <shci_send+0x74>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	7b7a      	ldrb	r2, [r7, #13]
 800dc30:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800dc32:	4b12      	ldr	r3, [pc, #72]	; (800dc7c <shci_send+0x74>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	330c      	adds	r3, #12
 800dc38:	7b7a      	ldrb	r2, [r7, #13]
 800dc3a:	68b9      	ldr	r1, [r7, #8]
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f005 fbf5 	bl	801342c <memcpy>

  shciContext.io.Send(0,0);
 800dc42:	4b0f      	ldr	r3, [pc, #60]	; (800dc80 <shci_send+0x78>)
 800dc44:	691b      	ldr	r3, [r3, #16]
 800dc46:	2100      	movs	r1, #0
 800dc48:	2000      	movs	r0, #0
 800dc4a:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800dc4c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800dc50:	f7f4 f9ce 	bl	8001ff0 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f103 0008 	add.w	r0, r3, #8
 800dc5a:	4b08      	ldr	r3, [pc, #32]	; (800dc7c <shci_send+0x74>)
 800dc5c:	6819      	ldr	r1, [r3, #0]
 800dc5e:	4b07      	ldr	r3, [pc, #28]	; (800dc7c <shci_send+0x74>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	789b      	ldrb	r3, [r3, #2]
 800dc64:	3303      	adds	r3, #3
 800dc66:	461a      	mov	r2, r3
 800dc68:	f005 fbe0 	bl	801342c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800dc6c:	2001      	movs	r0, #1
 800dc6e:	f000 f83b 	bl	800dce8 <Cmd_SetStatus>

  return;
 800dc72:	bf00      	nop
}
 800dc74:	3710      	adds	r7, #16
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}
 800dc7a:	bf00      	nop
 800dc7c:	20000368 	.word	0x20000368
 800dc80:	200003d4 	.word	0x200003d4

0800dc84 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b086      	sub	sp, #24
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800dc8c:	4a10      	ldr	r2, [pc, #64]	; (800dcd0 <TlInit+0x4c>)
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800dc92:	4810      	ldr	r0, [pc, #64]	; (800dcd4 <TlInit+0x50>)
 800dc94:	f000 fcce 	bl	800e634 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800dc98:	2001      	movs	r0, #1
 800dc9a:	f000 f825 	bl	800dce8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800dc9e:	4b0e      	ldr	r3, [pc, #56]	; (800dcd8 <TlInit+0x54>)
 800dca0:	2201      	movs	r2, #1
 800dca2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800dca4:	4b0d      	ldr	r3, [pc, #52]	; (800dcdc <TlInit+0x58>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d00c      	beq.n	800dcc6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800dcb0:	4b0b      	ldr	r3, [pc, #44]	; (800dce0 <TlInit+0x5c>)
 800dcb2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800dcb4:	4b0b      	ldr	r3, [pc, #44]	; (800dce4 <TlInit+0x60>)
 800dcb6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800dcb8:	4b08      	ldr	r3, [pc, #32]	; (800dcdc <TlInit+0x58>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	f107 020c 	add.w	r2, r7, #12
 800dcc0:	4610      	mov	r0, r2
 800dcc2:	4798      	blx	r3
  }

  return;
 800dcc4:	bf00      	nop
 800dcc6:	bf00      	nop
}
 800dcc8:	3718      	adds	r7, #24
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
 800dcce:	bf00      	nop
 800dcd0:	20000368 	.word	0x20000368
 800dcd4:	2000035c 	.word	0x2000035c
 800dcd8:	2000036c 	.word	0x2000036c
 800dcdc:	200003d4 	.word	0x200003d4
 800dce0:	0800dd39 	.word	0x0800dd39
 800dce4:	0800dd51 	.word	0x0800dd51

0800dce8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b082      	sub	sp, #8
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	4603      	mov	r3, r0
 800dcf0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800dcf2:	79fb      	ldrb	r3, [r7, #7]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d10b      	bne.n	800dd10 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800dcf8:	4b0d      	ldr	r3, [pc, #52]	; (800dd30 <Cmd_SetStatus+0x48>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d003      	beq.n	800dd08 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800dd00:	4b0b      	ldr	r3, [pc, #44]	; (800dd30 <Cmd_SetStatus+0x48>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	2000      	movs	r0, #0
 800dd06:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800dd08:	4b0a      	ldr	r3, [pc, #40]	; (800dd34 <Cmd_SetStatus+0x4c>)
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800dd0e:	e00b      	b.n	800dd28 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800dd10:	4b08      	ldr	r3, [pc, #32]	; (800dd34 <Cmd_SetStatus+0x4c>)
 800dd12:	2201      	movs	r2, #1
 800dd14:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800dd16:	4b06      	ldr	r3, [pc, #24]	; (800dd30 <Cmd_SetStatus+0x48>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d004      	beq.n	800dd28 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800dd1e:	4b04      	ldr	r3, [pc, #16]	; (800dd30 <Cmd_SetStatus+0x48>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	2001      	movs	r0, #1
 800dd24:	4798      	blx	r3
  return;
 800dd26:	bf00      	nop
 800dd28:	bf00      	nop
}
 800dd2a:	3708      	adds	r7, #8
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}
 800dd30:	200003f4 	.word	0x200003f4
 800dd34:	20000364 	.word	0x20000364

0800dd38 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b082      	sub	sp, #8
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800dd40:	2000      	movs	r0, #0
 800dd42:	f7f4 f945 	bl	8001fd0 <shci_cmd_resp_release>

  return;
 800dd46:	bf00      	nop
}
 800dd48:	3708      	adds	r7, #8
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}
	...

0800dd50 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b082      	sub	sp, #8
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800dd58:	6879      	ldr	r1, [r7, #4]
 800dd5a:	4805      	ldr	r0, [pc, #20]	; (800dd70 <TlUserEvtReceived+0x20>)
 800dd5c:	f000 fcbe 	bl	800e6dc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800dd60:	4803      	ldr	r0, [pc, #12]	; (800dd70 <TlUserEvtReceived+0x20>)
 800dd62:	f7f4 f925 	bl	8001fb0 <shci_notify_asynch_evt>

  return;
 800dd66:	bf00      	nop
}
 800dd68:	3708      	adds	r7, #8
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	2000035c 	.word	0x2000035c

0800dd74 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800dd74:	b480      	push	{r7}
 800dd76:	b083      	sub	sp, #12
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	4a05      	ldr	r2, [pc, #20]	; (800dd94 <shci_register_io_bus+0x20>)
 800dd80:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	4a04      	ldr	r2, [pc, #16]	; (800dd98 <shci_register_io_bus+0x24>)
 800dd86:	611a      	str	r2, [r3, #16]

  return;
 800dd88:	bf00      	nop
}
 800dd8a:	370c      	adds	r7, #12
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd92:	4770      	bx	lr
 800dd94:	0800df31 	.word	0x0800df31
 800dd98:	0800df85 	.word	0x0800df85

0800dd9c <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800dda0:	f7f3 fdda 	bl	8001958 <HW_IPCC_Enable>

  return;
 800dda4:	bf00      	nop
}
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <TL_Init>:


void TL_Init( void )
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800ddac:	4b10      	ldr	r3, [pc, #64]	; (800ddf0 <TL_Init+0x48>)
 800ddae:	4a11      	ldr	r2, [pc, #68]	; (800ddf4 <TL_Init+0x4c>)
 800ddb0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800ddb2:	4b0f      	ldr	r3, [pc, #60]	; (800ddf0 <TL_Init+0x48>)
 800ddb4:	4a10      	ldr	r2, [pc, #64]	; (800ddf8 <TL_Init+0x50>)
 800ddb6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800ddb8:	4b0d      	ldr	r3, [pc, #52]	; (800ddf0 <TL_Init+0x48>)
 800ddba:	4a10      	ldr	r2, [pc, #64]	; (800ddfc <TL_Init+0x54>)
 800ddbc:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800ddbe:	4b0c      	ldr	r3, [pc, #48]	; (800ddf0 <TL_Init+0x48>)
 800ddc0:	4a0f      	ldr	r2, [pc, #60]	; (800de00 <TL_Init+0x58>)
 800ddc2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 800ddc4:	4b0a      	ldr	r3, [pc, #40]	; (800ddf0 <TL_Init+0x48>)
 800ddc6:	4a0f      	ldr	r2, [pc, #60]	; (800de04 <TL_Init+0x5c>)
 800ddc8:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800ddca:	4b09      	ldr	r3, [pc, #36]	; (800ddf0 <TL_Init+0x48>)
 800ddcc:	4a0e      	ldr	r2, [pc, #56]	; (800de08 <TL_Init+0x60>)
 800ddce:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800ddd0:	4b07      	ldr	r3, [pc, #28]	; (800ddf0 <TL_Init+0x48>)
 800ddd2:	4a0e      	ldr	r2, [pc, #56]	; (800de0c <TL_Init+0x64>)
 800ddd4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800ddd6:	4b06      	ldr	r3, [pc, #24]	; (800ddf0 <TL_Init+0x48>)
 800ddd8:	4a0d      	ldr	r2, [pc, #52]	; (800de10 <TL_Init+0x68>)
 800ddda:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800dddc:	4b04      	ldr	r3, [pc, #16]	; (800ddf0 <TL_Init+0x48>)
 800ddde:	4a0d      	ldr	r2, [pc, #52]	; (800de14 <TL_Init+0x6c>)
 800dde0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800dde2:	4b03      	ldr	r3, [pc, #12]	; (800ddf0 <TL_Init+0x48>)
 800dde4:	4a0c      	ldr	r2, [pc, #48]	; (800de18 <TL_Init+0x70>)
 800dde6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800dde8:	f7f3 fdca 	bl	8001980 <HW_IPCC_Init>

  return;
 800ddec:	bf00      	nop
}
 800ddee:	bd80      	pop	{r7, pc}
 800ddf0:	20030000 	.word	0x20030000
 800ddf4:	20030134 	.word	0x20030134
 800ddf8:	20030154 	.word	0x20030154
 800ddfc:	20030164 	.word	0x20030164
 800de00:	20030170 	.word	0x20030170
 800de04:	20030178 	.word	0x20030178
 800de08:	20030180 	.word	0x20030180
 800de0c:	20030188 	.word	0x20030188
 800de10:	200301a4 	.word	0x200301a4
 800de14:	200301a8 	.word	0x200301a8
 800de18:	200301b4 	.word	0x200301b4

0800de1c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b084      	sub	sp, #16
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800de28:	4811      	ldr	r0, [pc, #68]	; (800de70 <TL_BLE_Init+0x54>)
 800de2a:	f000 fc03 	bl	800e634 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800de2e:	4b11      	ldr	r3, [pc, #68]	; (800de74 <TL_BLE_Init+0x58>)
 800de30:	685b      	ldr	r3, [r3, #4]
 800de32:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	689a      	ldr	r2, [r3, #8]
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	68da      	ldr	r2, [r3, #12]
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	4a0c      	ldr	r2, [pc, #48]	; (800de78 <TL_BLE_Init+0x5c>)
 800de48:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	4a08      	ldr	r2, [pc, #32]	; (800de70 <TL_BLE_Init+0x54>)
 800de4e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800de50:	f7f3 fdac 	bl	80019ac <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	4a08      	ldr	r2, [pc, #32]	; (800de7c <TL_BLE_Init+0x60>)
 800de5a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	4a07      	ldr	r2, [pc, #28]	; (800de80 <TL_BLE_Init+0x64>)
 800de62:	6013      	str	r3, [r2, #0]

  return 0;
 800de64:	2300      	movs	r3, #0
}
 800de66:	4618      	mov	r0, r3
 800de68:	3710      	adds	r7, #16
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
 800de6e:	bf00      	nop
 800de70:	200301d0 	.word	0x200301d0
 800de74:	20030000 	.word	0x20030000
 800de78:	20030a48 	.word	0x20030a48
 800de7c:	20000400 	.word	0x20000400
 800de80:	20000404 	.word	0x20000404

0800de84 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b082      	sub	sp, #8
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
 800de8c:	460b      	mov	r3, r1
 800de8e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800de90:	4b09      	ldr	r3, [pc, #36]	; (800deb8 <TL_BLE_SendCmd+0x34>)
 800de92:	685b      	ldr	r3, [r3, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	2201      	movs	r2, #1
 800de98:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800de9a:	4b07      	ldr	r3, [pc, #28]	; (800deb8 <TL_BLE_SendCmd+0x34>)
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	4619      	mov	r1, r3
 800dea2:	2001      	movs	r0, #1
 800dea4:	f000 f96c 	bl	800e180 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800dea8:	f7f3 fd8a 	bl	80019c0 <HW_IPCC_BLE_SendCmd>

  return 0;
 800deac:	2300      	movs	r3, #0
}
 800deae:	4618      	mov	r0, r3
 800deb0:	3708      	adds	r7, #8
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}
 800deb6:	bf00      	nop
 800deb8:	20030000 	.word	0x20030000

0800debc <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b082      	sub	sp, #8
 800dec0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800dec2:	e01c      	b.n	800defe <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800dec4:	1d3b      	adds	r3, r7, #4
 800dec6:	4619      	mov	r1, r3
 800dec8:	4812      	ldr	r0, [pc, #72]	; (800df14 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800deca:	f000 fc4a 	bl	800e762 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	7a5b      	ldrb	r3, [r3, #9]
 800ded2:	2b0f      	cmp	r3, #15
 800ded4:	d003      	beq.n	800dede <HW_IPCC_BLE_RxEvtNot+0x22>
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	7a5b      	ldrb	r3, [r3, #9]
 800deda:	2b0e      	cmp	r3, #14
 800dedc:	d105      	bne.n	800deea <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	4619      	mov	r1, r3
 800dee2:	2002      	movs	r0, #2
 800dee4:	f000 f94c 	bl	800e180 <OutputDbgTrace>
 800dee8:	e004      	b.n	800def4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	4619      	mov	r1, r3
 800deee:	2003      	movs	r0, #3
 800def0:	f000 f946 	bl	800e180 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800def4:	4b08      	ldr	r3, [pc, #32]	; (800df18 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	687a      	ldr	r2, [r7, #4]
 800defa:	4610      	mov	r0, r2
 800defc:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800defe:	4805      	ldr	r0, [pc, #20]	; (800df14 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800df00:	f000 fba8 	bl	800e654 <LST_is_empty>
 800df04:	4603      	mov	r3, r0
 800df06:	2b00      	cmp	r3, #0
 800df08:	d0dc      	beq.n	800dec4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800df0a:	bf00      	nop
}
 800df0c:	3708      	adds	r7, #8
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
 800df12:	bf00      	nop
 800df14:	200301d0 	.word	0x200301d0
 800df18:	20000400 	.word	0x20000400

0800df1c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800df20:	4b02      	ldr	r3, [pc, #8]	; (800df2c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	4798      	blx	r3

  return;
 800df26:	bf00      	nop
}
 800df28:	bd80      	pop	{r7, pc}
 800df2a:	bf00      	nop
 800df2c:	20000404 	.word	0x20000404

0800df30 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b084      	sub	sp, #16
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800df3c:	480d      	ldr	r0, [pc, #52]	; (800df74 <TL_SYS_Init+0x44>)
 800df3e:	f000 fb79 	bl	800e634 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800df42:	4b0d      	ldr	r3, [pc, #52]	; (800df78 <TL_SYS_Init+0x48>)
 800df44:	68db      	ldr	r3, [r3, #12]
 800df46:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	689a      	ldr	r2, [r3, #8]
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	4a08      	ldr	r2, [pc, #32]	; (800df74 <TL_SYS_Init+0x44>)
 800df54:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800df56:	f7f3 fd55 	bl	8001a04 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	4a07      	ldr	r2, [pc, #28]	; (800df7c <TL_SYS_Init+0x4c>)
 800df60:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	4a06      	ldr	r2, [pc, #24]	; (800df80 <TL_SYS_Init+0x50>)
 800df68:	6013      	str	r3, [r2, #0]

  return 0;
 800df6a:	2300      	movs	r3, #0
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3710      	adds	r7, #16
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}
 800df74:	200301d8 	.word	0x200301d8
 800df78:	20030000 	.word	0x20030000
 800df7c:	20000408 	.word	0x20000408
 800df80:	2000040c 	.word	0x2000040c

0800df84 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b082      	sub	sp, #8
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
 800df8c:	460b      	mov	r3, r1
 800df8e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800df90:	4b09      	ldr	r3, [pc, #36]	; (800dfb8 <TL_SYS_SendCmd+0x34>)
 800df92:	68db      	ldr	r3, [r3, #12]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	2210      	movs	r2, #16
 800df98:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800df9a:	4b07      	ldr	r3, [pc, #28]	; (800dfb8 <TL_SYS_SendCmd+0x34>)
 800df9c:	68db      	ldr	r3, [r3, #12]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	2004      	movs	r0, #4
 800dfa4:	f000 f8ec 	bl	800e180 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800dfa8:	f7f3 fd36 	bl	8001a18 <HW_IPCC_SYS_SendCmd>

  return 0;
 800dfac:	2300      	movs	r3, #0
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3708      	adds	r7, #8
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	20030000 	.word	0x20030000

0800dfbc <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800dfc0:	4b07      	ldr	r3, [pc, #28]	; (800dfe0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800dfc2:	68db      	ldr	r3, [r3, #12]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	4619      	mov	r1, r3
 800dfc8:	2005      	movs	r0, #5
 800dfca:	f000 f8d9 	bl	800e180 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800dfce:	4b05      	ldr	r3, [pc, #20]	; (800dfe4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	4a03      	ldr	r2, [pc, #12]	; (800dfe0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800dfd4:	68d2      	ldr	r2, [r2, #12]
 800dfd6:	6812      	ldr	r2, [r2, #0]
 800dfd8:	4610      	mov	r0, r2
 800dfda:	4798      	blx	r3

  return;
 800dfdc:	bf00      	nop
}
 800dfde:	bd80      	pop	{r7, pc}
 800dfe0:	20030000 	.word	0x20030000
 800dfe4:	20000408 	.word	0x20000408

0800dfe8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b082      	sub	sp, #8
 800dfec:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800dfee:	e00e      	b.n	800e00e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800dff0:	1d3b      	adds	r3, r7, #4
 800dff2:	4619      	mov	r1, r3
 800dff4:	480b      	ldr	r0, [pc, #44]	; (800e024 <HW_IPCC_SYS_EvtNot+0x3c>)
 800dff6:	f000 fbb4 	bl	800e762 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	4619      	mov	r1, r3
 800dffe:	2006      	movs	r0, #6
 800e000:	f000 f8be 	bl	800e180 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800e004:	4b08      	ldr	r3, [pc, #32]	; (800e028 <HW_IPCC_SYS_EvtNot+0x40>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	687a      	ldr	r2, [r7, #4]
 800e00a:	4610      	mov	r0, r2
 800e00c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800e00e:	4805      	ldr	r0, [pc, #20]	; (800e024 <HW_IPCC_SYS_EvtNot+0x3c>)
 800e010:	f000 fb20 	bl	800e654 <LST_is_empty>
 800e014:	4603      	mov	r3, r0
 800e016:	2b00      	cmp	r3, #0
 800e018:	d0ea      	beq.n	800dff0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800e01a:	bf00      	nop
}
 800e01c:	3708      	adds	r7, #8
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}
 800e022:	bf00      	nop
 800e024:	200301d8 	.word	0x200301d8
 800e028:	2000040c 	.word	0x2000040c

0800e02c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b082      	sub	sp, #8
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800e034:	4817      	ldr	r0, [pc, #92]	; (800e094 <TL_MM_Init+0x68>)
 800e036:	f000 fafd 	bl	800e634 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800e03a:	4817      	ldr	r0, [pc, #92]	; (800e098 <TL_MM_Init+0x6c>)
 800e03c:	f000 fafa 	bl	800e634 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800e040:	4b16      	ldr	r3, [pc, #88]	; (800e09c <TL_MM_Init+0x70>)
 800e042:	691b      	ldr	r3, [r3, #16]
 800e044:	4a16      	ldr	r2, [pc, #88]	; (800e0a0 <TL_MM_Init+0x74>)
 800e046:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800e048:	4b15      	ldr	r3, [pc, #84]	; (800e0a0 <TL_MM_Init+0x74>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	687a      	ldr	r2, [r7, #4]
 800e04e:	6892      	ldr	r2, [r2, #8]
 800e050:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800e052:	4b13      	ldr	r3, [pc, #76]	; (800e0a0 <TL_MM_Init+0x74>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	687a      	ldr	r2, [r7, #4]
 800e058:	68d2      	ldr	r2, [r2, #12]
 800e05a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800e05c:	4b10      	ldr	r3, [pc, #64]	; (800e0a0 <TL_MM_Init+0x74>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	4a0c      	ldr	r2, [pc, #48]	; (800e094 <TL_MM_Init+0x68>)
 800e062:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800e064:	4b0e      	ldr	r3, [pc, #56]	; (800e0a0 <TL_MM_Init+0x74>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	687a      	ldr	r2, [r7, #4]
 800e06a:	6812      	ldr	r2, [r2, #0]
 800e06c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800e06e:	4b0c      	ldr	r3, [pc, #48]	; (800e0a0 <TL_MM_Init+0x74>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	687a      	ldr	r2, [r7, #4]
 800e074:	6852      	ldr	r2, [r2, #4]
 800e076:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800e078:	4b09      	ldr	r3, [pc, #36]	; (800e0a0 <TL_MM_Init+0x74>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	687a      	ldr	r2, [r7, #4]
 800e07e:	6912      	ldr	r2, [r2, #16]
 800e080:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800e082:	4b07      	ldr	r3, [pc, #28]	; (800e0a0 <TL_MM_Init+0x74>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	687a      	ldr	r2, [r7, #4]
 800e088:	6952      	ldr	r2, [r2, #20]
 800e08a:	619a      	str	r2, [r3, #24]

  return;
 800e08c:	bf00      	nop
}
 800e08e:	3708      	adds	r7, #8
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}
 800e094:	200301c0 	.word	0x200301c0
 800e098:	200003f8 	.word	0x200003f8
 800e09c:	20030000 	.word	0x20030000
 800e0a0:	20000410 	.word	0x20000410

0800e0a4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b082      	sub	sp, #8
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800e0ac:	6879      	ldr	r1, [r7, #4]
 800e0ae:	4807      	ldr	r0, [pc, #28]	; (800e0cc <TL_MM_EvtDone+0x28>)
 800e0b0:	f000 fb14 	bl	800e6dc <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800e0b4:	6879      	ldr	r1, [r7, #4]
 800e0b6:	2000      	movs	r0, #0
 800e0b8:	f000 f862 	bl	800e180 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800e0bc:	4804      	ldr	r0, [pc, #16]	; (800e0d0 <TL_MM_EvtDone+0x2c>)
 800e0be:	f7f3 fcd1 	bl	8001a64 <HW_IPCC_MM_SendFreeBuf>

  return;
 800e0c2:	bf00      	nop
}
 800e0c4:	3708      	adds	r7, #8
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}
 800e0ca:	bf00      	nop
 800e0cc:	200003f8 	.word	0x200003f8
 800e0d0:	0800e0d5 	.word	0x0800e0d5

0800e0d4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b082      	sub	sp, #8
 800e0d8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800e0da:	e00c      	b.n	800e0f6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800e0dc:	1d3b      	adds	r3, r7, #4
 800e0de:	4619      	mov	r1, r3
 800e0e0:	480a      	ldr	r0, [pc, #40]	; (800e10c <SendFreeBuf+0x38>)
 800e0e2:	f000 fb3e 	bl	800e762 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800e0e6:	4b0a      	ldr	r3, [pc, #40]	; (800e110 <SendFreeBuf+0x3c>)
 800e0e8:	691b      	ldr	r3, [r3, #16]
 800e0ea:	691b      	ldr	r3, [r3, #16]
 800e0ec:	687a      	ldr	r2, [r7, #4]
 800e0ee:	4611      	mov	r1, r2
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f000 faf3 	bl	800e6dc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800e0f6:	4805      	ldr	r0, [pc, #20]	; (800e10c <SendFreeBuf+0x38>)
 800e0f8:	f000 faac 	bl	800e654 <LST_is_empty>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d0ec      	beq.n	800e0dc <SendFreeBuf+0x8>
  }

  return;
 800e102:	bf00      	nop
}
 800e104:	3708      	adds	r7, #8
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}
 800e10a:	bf00      	nop
 800e10c:	200003f8 	.word	0x200003f8
 800e110:	20030000 	.word	0x20030000

0800e114 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800e114:	b580      	push	{r7, lr}
 800e116:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800e118:	4805      	ldr	r0, [pc, #20]	; (800e130 <TL_TRACES_Init+0x1c>)
 800e11a:	f000 fa8b 	bl	800e634 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800e11e:	4b05      	ldr	r3, [pc, #20]	; (800e134 <TL_TRACES_Init+0x20>)
 800e120:	695b      	ldr	r3, [r3, #20]
 800e122:	4a03      	ldr	r2, [pc, #12]	; (800e130 <TL_TRACES_Init+0x1c>)
 800e124:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800e126:	f7f3 fcd3 	bl	8001ad0 <HW_IPCC_TRACES_Init>

  return;
 800e12a:	bf00      	nop
}
 800e12c:	bd80      	pop	{r7, pc}
 800e12e:	bf00      	nop
 800e130:	200301c8 	.word	0x200301c8
 800e134:	20030000 	.word	0x20030000

0800e138 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b082      	sub	sp, #8
 800e13c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800e13e:	e008      	b.n	800e152 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800e140:	1d3b      	adds	r3, r7, #4
 800e142:	4619      	mov	r1, r3
 800e144:	4808      	ldr	r0, [pc, #32]	; (800e168 <HW_IPCC_TRACES_EvtNot+0x30>)
 800e146:	f000 fb0c 	bl	800e762 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	4618      	mov	r0, r3
 800e14e:	f000 f80d 	bl	800e16c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800e152:	4805      	ldr	r0, [pc, #20]	; (800e168 <HW_IPCC_TRACES_EvtNot+0x30>)
 800e154:	f000 fa7e 	bl	800e654 <LST_is_empty>
 800e158:	4603      	mov	r3, r0
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d0f0      	beq.n	800e140 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800e15e:	bf00      	nop
}
 800e160:	3708      	adds	r7, #8
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
 800e166:	bf00      	nop
 800e168:	200301c8 	.word	0x200301c8

0800e16c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800e16c:	b480      	push	{r7}
 800e16e:	b083      	sub	sp, #12
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800e174:	bf00      	nop
 800e176:	370c      	adds	r7, #12
 800e178:	46bd      	mov	sp, r7
 800e17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17e:	4770      	bx	lr

0800e180 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800e180:	b480      	push	{r7}
 800e182:	b085      	sub	sp, #20
 800e184:	af00      	add	r7, sp, #0
 800e186:	4603      	mov	r3, r0
 800e188:	6039      	str	r1, [r7, #0]
 800e18a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800e18c:	79fb      	ldrb	r3, [r7, #7]
 800e18e:	2b06      	cmp	r3, #6
 800e190:	d849      	bhi.n	800e226 <OutputDbgTrace+0xa6>
 800e192:	a201      	add	r2, pc, #4	; (adr r2, 800e198 <OutputDbgTrace+0x18>)
 800e194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e198:	0800e1b5 	.word	0x0800e1b5
 800e19c:	0800e1d7 	.word	0x0800e1d7
 800e1a0:	0800e1dd 	.word	0x0800e1dd
 800e1a4:	0800e1f7 	.word	0x0800e1f7
 800e1a8:	0800e203 	.word	0x0800e203
 800e1ac:	0800e209 	.word	0x0800e209
 800e1b0:	0800e21b 	.word	0x0800e21b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	7a5b      	ldrb	r3, [r3, #9]
 800e1bc:	2b0f      	cmp	r3, #15
 800e1be:	d004      	beq.n	800e1ca <OutputDbgTrace+0x4a>
 800e1c0:	2bff      	cmp	r3, #255	; 0xff
 800e1c2:	d004      	beq.n	800e1ce <OutputDbgTrace+0x4e>
 800e1c4:	2b0e      	cmp	r3, #14
 800e1c6:	d004      	beq.n	800e1d2 <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800e1c8:	e004      	b.n	800e1d4 <OutputDbgTrace+0x54>
          break;
 800e1ca:	bf00      	nop
 800e1cc:	e02c      	b.n	800e228 <OutputDbgTrace+0xa8>
          break;
 800e1ce:	bf00      	nop
 800e1d0:	e02a      	b.n	800e228 <OutputDbgTrace+0xa8>
          break;
 800e1d2:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800e1d4:	e028      	b.n	800e228 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800e1da:	e025      	b.n	800e228 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	7a5b      	ldrb	r3, [r3, #9]
 800e1e4:	2b0e      	cmp	r3, #14
 800e1e6:	d002      	beq.n	800e1ee <OutputDbgTrace+0x6e>
 800e1e8:	2b0f      	cmp	r3, #15
 800e1ea:	d002      	beq.n	800e1f2 <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800e1ec:	e002      	b.n	800e1f4 <OutputDbgTrace+0x74>
          break;
 800e1ee:	bf00      	nop
 800e1f0:	e01a      	b.n	800e228 <OutputDbgTrace+0xa8>
          break;
 800e1f2:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e1f4:	e018      	b.n	800e228 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	7a5b      	ldrb	r3, [r3, #9]
 800e1fe:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e200:	e012      	b.n	800e228 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800e206:	e00f      	b.n	800e228 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	7a5b      	ldrb	r3, [r3, #9]
 800e210:	2b0e      	cmp	r3, #14
 800e212:	d000      	beq.n	800e216 <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800e214:	e000      	b.n	800e218 <OutputDbgTrace+0x98>
          break;
 800e216:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e218:	e006      	b.n	800e228 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	7a5b      	ldrb	r3, [r3, #9]
 800e222:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e224:	e000      	b.n	800e228 <OutputDbgTrace+0xa8>

    default:
      break;
 800e226:	bf00      	nop
  }

  return;
 800e228:	bf00      	nop
}
 800e22a:	3714      	adds	r7, #20
 800e22c:	46bd      	mov	sp, r7
 800e22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e232:	4770      	bx	lr

0800e234 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b08a      	sub	sp, #40	; 0x28
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800e23c:	2300      	movs	r3, #0
 800e23e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	3301      	adds	r3, #1
 800e246:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800e248:	6a3b      	ldr	r3, [r7, #32]
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	2bff      	cmp	r3, #255	; 0xff
 800e24e:	d000      	beq.n	800e252 <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800e250:	e04a      	b.n	800e2e8 <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800e252:	6a3b      	ldr	r3, [r7, #32]
 800e254:	3302      	adds	r3, #2
 800e256:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 800e258:	69fb      	ldr	r3, [r7, #28]
 800e25a:	881b      	ldrh	r3, [r3, #0]
 800e25c:	b29b      	uxth	r3, r3
 800e25e:	461a      	mov	r2, r3
 800e260:	f640 4301 	movw	r3, #3073	; 0xc01
 800e264:	429a      	cmp	r2, r3
 800e266:	d000      	beq.n	800e26a <PeerToPeer_Event_Handler+0x36>
          break;
 800e268:	e03d      	b.n	800e2e6 <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800e26a:	69fb      	ldr	r3, [r7, #28]
 800e26c:	3302      	adds	r3, #2
 800e26e:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800e270:	69bb      	ldr	r3, [r7, #24]
 800e272:	885b      	ldrh	r3, [r3, #2]
 800e274:	b29b      	uxth	r3, r3
 800e276:	461a      	mov	r2, r3
 800e278:	4b1e      	ldr	r3, [pc, #120]	; (800e2f4 <PeerToPeer_Event_Handler+0xc0>)
 800e27a:	889b      	ldrh	r3, [r3, #4]
 800e27c:	3302      	adds	r3, #2
 800e27e:	429a      	cmp	r2, r3
 800e280:	d118      	bne.n	800e2b4 <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 800e282:	2301      	movs	r3, #1
 800e284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800e288:	69bb      	ldr	r3, [r7, #24]
 800e28a:	7a1b      	ldrb	r3, [r3, #8]
 800e28c:	f003 0301 	and.w	r3, r3, #1
 800e290:	2b00      	cmp	r3, #0
 800e292:	d007      	beq.n	800e2a4 <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800e294:	2300      	movs	r3, #0
 800e296:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800e298:	f107 0308 	add.w	r3, r7, #8
 800e29c:	4618      	mov	r0, r3
 800e29e:	f7f3 f967 	bl	8001570 <P2PS_STM_App_Notification>
        break;
 800e2a2:	e01f      	b.n	800e2e4 <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800e2a8:	f107 0308 	add.w	r3, r7, #8
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f7f3 f95f 	bl	8001570 <P2PS_STM_App_Notification>
        break;
 800e2b2:	e017      	b.n	800e2e4 <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800e2b4:	69bb      	ldr	r3, [r7, #24]
 800e2b6:	885b      	ldrh	r3, [r3, #2]
 800e2b8:	b29b      	uxth	r3, r3
 800e2ba:	461a      	mov	r2, r3
 800e2bc:	4b0d      	ldr	r3, [pc, #52]	; (800e2f4 <PeerToPeer_Event_Handler+0xc0>)
 800e2be:	885b      	ldrh	r3, [r3, #2]
 800e2c0:	3301      	adds	r3, #1
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	d10e      	bne.n	800e2e4 <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800e2c6:	2303      	movs	r3, #3
 800e2c8:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800e2ca:	69bb      	ldr	r3, [r7, #24]
 800e2cc:	88db      	ldrh	r3, [r3, #6]
 800e2ce:	b29b      	uxth	r3, r3
 800e2d0:	b2db      	uxtb	r3, r3
 800e2d2:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800e2d4:	69bb      	ldr	r3, [r7, #24]
 800e2d6:	3308      	adds	r3, #8
 800e2d8:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);
 800e2da:	f107 0308 	add.w	r3, r7, #8
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f7f3 f946 	bl	8001570 <P2PS_STM_App_Notification>
        break;
 800e2e4:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800e2e6:	bf00      	nop
  }

  return(return_value);
 800e2e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3728      	adds	r7, #40	; 0x28
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}
 800e2f4:	20000354 	.word	0x20000354

0800e2f8 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b08a      	sub	sp, #40	; 0x28
 800e2fc:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800e2fe:	484a      	ldr	r0, [pc, #296]	; (800e428 <P2PS_STM_Init+0x130>)
 800e300:	f7fe fa30 	bl	800c764 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800e304:	238f      	movs	r3, #143	; 0x8f
 800e306:	703b      	strb	r3, [r7, #0]
 800e308:	23e5      	movs	r3, #229	; 0xe5
 800e30a:	707b      	strb	r3, [r7, #1]
 800e30c:	23b3      	movs	r3, #179	; 0xb3
 800e30e:	70bb      	strb	r3, [r7, #2]
 800e310:	23d5      	movs	r3, #213	; 0xd5
 800e312:	70fb      	strb	r3, [r7, #3]
 800e314:	232e      	movs	r3, #46	; 0x2e
 800e316:	713b      	strb	r3, [r7, #4]
 800e318:	237f      	movs	r3, #127	; 0x7f
 800e31a:	717b      	strb	r3, [r7, #5]
 800e31c:	234a      	movs	r3, #74	; 0x4a
 800e31e:	71bb      	strb	r3, [r7, #6]
 800e320:	2398      	movs	r3, #152	; 0x98
 800e322:	71fb      	strb	r3, [r7, #7]
 800e324:	232a      	movs	r3, #42	; 0x2a
 800e326:	723b      	strb	r3, [r7, #8]
 800e328:	2348      	movs	r3, #72	; 0x48
 800e32a:	727b      	strb	r3, [r7, #9]
 800e32c:	237a      	movs	r3, #122	; 0x7a
 800e32e:	72bb      	strb	r3, [r7, #10]
 800e330:	23cc      	movs	r3, #204	; 0xcc
 800e332:	72fb      	strb	r3, [r7, #11]
 800e334:	2340      	movs	r3, #64	; 0x40
 800e336:	733b      	strb	r3, [r7, #12]
 800e338:	23fe      	movs	r3, #254	; 0xfe
 800e33a:	737b      	strb	r3, [r7, #13]
 800e33c:	2300      	movs	r3, #0
 800e33e:	73bb      	strb	r3, [r7, #14]
 800e340:	2300      	movs	r3, #0
 800e342:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800e344:	4639      	mov	r1, r7
 800e346:	4b39      	ldr	r3, [pc, #228]	; (800e42c <P2PS_STM_Init+0x134>)
 800e348:	9300      	str	r3, [sp, #0]
 800e34a:	2308      	movs	r3, #8
 800e34c:	2201      	movs	r2, #1
 800e34e:	2002      	movs	r0, #2
 800e350:	f7fe fe39 	bl	800cfc6 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800e354:	2319      	movs	r3, #25
 800e356:	703b      	strb	r3, [r7, #0]
 800e358:	23ed      	movs	r3, #237	; 0xed
 800e35a:	707b      	strb	r3, [r7, #1]
 800e35c:	2382      	movs	r3, #130	; 0x82
 800e35e:	70bb      	strb	r3, [r7, #2]
 800e360:	23ae      	movs	r3, #174	; 0xae
 800e362:	70fb      	strb	r3, [r7, #3]
 800e364:	23ed      	movs	r3, #237	; 0xed
 800e366:	713b      	strb	r3, [r7, #4]
 800e368:	2321      	movs	r3, #33	; 0x21
 800e36a:	717b      	strb	r3, [r7, #5]
 800e36c:	234c      	movs	r3, #76	; 0x4c
 800e36e:	71bb      	strb	r3, [r7, #6]
 800e370:	239d      	movs	r3, #157	; 0x9d
 800e372:	71fb      	strb	r3, [r7, #7]
 800e374:	2341      	movs	r3, #65	; 0x41
 800e376:	723b      	strb	r3, [r7, #8]
 800e378:	2345      	movs	r3, #69	; 0x45
 800e37a:	727b      	strb	r3, [r7, #9]
 800e37c:	2322      	movs	r3, #34	; 0x22
 800e37e:	72bb      	strb	r3, [r7, #10]
 800e380:	238e      	movs	r3, #142	; 0x8e
 800e382:	72fb      	strb	r3, [r7, #11]
 800e384:	2341      	movs	r3, #65	; 0x41
 800e386:	733b      	strb	r3, [r7, #12]
 800e388:	23fe      	movs	r3, #254	; 0xfe
 800e38a:	737b      	strb	r3, [r7, #13]
 800e38c:	2300      	movs	r3, #0
 800e38e:	73bb      	strb	r3, [r7, #14]
 800e390:	2300      	movs	r3, #0
 800e392:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800e394:	4b25      	ldr	r3, [pc, #148]	; (800e42c <P2PS_STM_Init+0x134>)
 800e396:	8818      	ldrh	r0, [r3, #0]
 800e398:	463a      	mov	r2, r7
 800e39a:	4b25      	ldr	r3, [pc, #148]	; (800e430 <P2PS_STM_Init+0x138>)
 800e39c:	9305      	str	r3, [sp, #20]
 800e39e:	2301      	movs	r3, #1
 800e3a0:	9304      	str	r3, [sp, #16]
 800e3a2:	230a      	movs	r3, #10
 800e3a4:	9303      	str	r3, [sp, #12]
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	9302      	str	r3, [sp, #8]
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	9301      	str	r3, [sp, #4]
 800e3ae:	2306      	movs	r3, #6
 800e3b0:	9300      	str	r3, [sp, #0]
 800e3b2:	2314      	movs	r3, #20
 800e3b4:	2102      	movs	r1, #2
 800e3b6:	f7fe feb5 	bl	800d124 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800e3ba:	2319      	movs	r3, #25
 800e3bc:	703b      	strb	r3, [r7, #0]
 800e3be:	23ed      	movs	r3, #237	; 0xed
 800e3c0:	707b      	strb	r3, [r7, #1]
 800e3c2:	2382      	movs	r3, #130	; 0x82
 800e3c4:	70bb      	strb	r3, [r7, #2]
 800e3c6:	23ae      	movs	r3, #174	; 0xae
 800e3c8:	70fb      	strb	r3, [r7, #3]
 800e3ca:	23ed      	movs	r3, #237	; 0xed
 800e3cc:	713b      	strb	r3, [r7, #4]
 800e3ce:	2321      	movs	r3, #33	; 0x21
 800e3d0:	717b      	strb	r3, [r7, #5]
 800e3d2:	234c      	movs	r3, #76	; 0x4c
 800e3d4:	71bb      	strb	r3, [r7, #6]
 800e3d6:	239d      	movs	r3, #157	; 0x9d
 800e3d8:	71fb      	strb	r3, [r7, #7]
 800e3da:	2341      	movs	r3, #65	; 0x41
 800e3dc:	723b      	strb	r3, [r7, #8]
 800e3de:	2345      	movs	r3, #69	; 0x45
 800e3e0:	727b      	strb	r3, [r7, #9]
 800e3e2:	2322      	movs	r3, #34	; 0x22
 800e3e4:	72bb      	strb	r3, [r7, #10]
 800e3e6:	238e      	movs	r3, #142	; 0x8e
 800e3e8:	72fb      	strb	r3, [r7, #11]
 800e3ea:	2342      	movs	r3, #66	; 0x42
 800e3ec:	733b      	strb	r3, [r7, #12]
 800e3ee:	23fe      	movs	r3, #254	; 0xfe
 800e3f0:	737b      	strb	r3, [r7, #13]
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	73bb      	strb	r3, [r7, #14]
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800e3fa:	4b0c      	ldr	r3, [pc, #48]	; (800e42c <P2PS_STM_Init+0x134>)
 800e3fc:	8818      	ldrh	r0, [r3, #0]
 800e3fe:	463a      	mov	r2, r7
 800e400:	4b0c      	ldr	r3, [pc, #48]	; (800e434 <P2PS_STM_Init+0x13c>)
 800e402:	9305      	str	r3, [sp, #20]
 800e404:	2301      	movs	r3, #1
 800e406:	9304      	str	r3, [sp, #16]
 800e408:	230a      	movs	r3, #10
 800e40a:	9303      	str	r3, [sp, #12]
 800e40c:	2301      	movs	r3, #1
 800e40e:	9302      	str	r3, [sp, #8]
 800e410:	2300      	movs	r3, #0
 800e412:	9301      	str	r3, [sp, #4]
 800e414:	2310      	movs	r3, #16
 800e416:	9300      	str	r3, [sp, #0]
 800e418:	2314      	movs	r3, #20
 800e41a:	2102      	movs	r1, #2
 800e41c:	f7fe fe82 	bl	800d124 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif


  return;
 800e420:	bf00      	nop
}
 800e422:	3710      	adds	r7, #16
 800e424:	46bd      	mov	sp, r7
 800e426:	bd80      	pop	{r7, pc}
 800e428:	0800e235 	.word	0x0800e235
 800e42c:	20000354 	.word	0x20000354
 800e430:	20000356 	.word	0x20000356
 800e434:	20000358 	.word	0x20000358

0800e438 <P2PS_STM_App_Update_Int8>:

  return result;
}

tBleStatus P2PS_STM_App_Update_Int8(uint16_t UUID, uint8_t *pPayload, uint8_t num_bytes)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b086      	sub	sp, #24
 800e43c:	af02      	add	r7, sp, #8
 800e43e:	4603      	mov	r3, r0
 800e440:	6039      	str	r1, [r7, #0]
 800e442:	80fb      	strh	r3, [r7, #6]
 800e444:	4613      	mov	r3, r2
 800e446:	717b      	strb	r3, [r7, #5]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800e448:	2342      	movs	r3, #66	; 0x42
 800e44a:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800e44c:	88fb      	ldrh	r3, [r7, #6]
 800e44e:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800e452:	4293      	cmp	r3, r2
 800e454:	d000      	beq.n	800e458 <P2PS_STM_App_Update_Int8+0x20>
                             (uint8_t *)  pPayload);

      break;

    default:
      break;
 800e456:	e00d      	b.n	800e474 <P2PS_STM_App_Update_Int8+0x3c>
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800e458:	4b09      	ldr	r3, [pc, #36]	; (800e480 <P2PS_STM_App_Update_Int8+0x48>)
 800e45a:	8818      	ldrh	r0, [r3, #0]
 800e45c:	4b08      	ldr	r3, [pc, #32]	; (800e480 <P2PS_STM_App_Update_Int8+0x48>)
 800e45e:	8899      	ldrh	r1, [r3, #4]
 800e460:	797a      	ldrb	r2, [r7, #5]
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	9300      	str	r3, [sp, #0]
 800e466:	4613      	mov	r3, r2
 800e468:	2200      	movs	r2, #0
 800e46a:	f7fe ff45 	bl	800d2f8 <aci_gatt_update_char_value>
 800e46e:	4603      	mov	r3, r0
 800e470:	73fb      	strb	r3, [r7, #15]
      break;
 800e472:	bf00      	nop
  }

  return result;
 800e474:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 800e476:	4618      	mov	r0, r3
 800e478:	3710      	adds	r7, #16
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}
 800e47e:	bf00      	nop
 800e480:	20000354 	.word	0x20000354

0800e484 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b086      	sub	sp, #24
 800e488:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e48a:	f3ef 8310 	mrs	r3, PRIMASK
 800e48e:	60fb      	str	r3, [r7, #12]
  return(result);
 800e490:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800e492:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e494:	b672      	cpsid	i

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800e496:	1cbb      	adds	r3, r7, #2
 800e498:	4619      	mov	r1, r3
 800e49a:	4812      	ldr	r0, [pc, #72]	; (800e4e4 <DbgTrace_TxCpltCallback+0x60>)
 800e49c:	f000 fbd7 	bl	800ec4e <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800e4a0:	1cbb      	adds	r3, r7, #2
 800e4a2:	4619      	mov	r1, r3
 800e4a4:	480f      	ldr	r0, [pc, #60]	; (800e4e4 <DbgTrace_TxCpltCallback+0x60>)
 800e4a6:	f000 fcc6 	bl	800ee36 <CircularQueue_Sense>
 800e4aa:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d00b      	beq.n	800e4ca <DbgTrace_TxCpltCallback+0x46>
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800e4bc:	887b      	ldrh	r3, [r7, #2]
 800e4be:	4a0a      	ldr	r2, [pc, #40]	; (800e4e8 <DbgTrace_TxCpltCallback+0x64>)
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	6938      	ldr	r0, [r7, #16]
 800e4c4:	f7f3 fc78 	bl	8001db8 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800e4c8:	e007      	b.n	800e4da <DbgTrace_TxCpltCallback+0x56>
    DbgTracePeripheralReady = SET;
 800e4ca:	4b08      	ldr	r3, [pc, #32]	; (800e4ec <DbgTrace_TxCpltCallback+0x68>)
 800e4cc:	2201      	movs	r2, #1
 800e4ce:	701a      	strb	r2, [r3, #0]
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	607b      	str	r3, [r7, #4]
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f383 8810 	msr	PRIMASK, r3
}
 800e4da:	bf00      	nop
 800e4dc:	3718      	adds	r7, #24
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}
 800e4e2:	bf00      	nop
 800e4e4:	20000414 	.word	0x20000414
 800e4e8:	0800e485 	.word	0x0800e485
 800e4ec:	2000001d 	.word	0x2000001d

0800e4f0 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800e4f6:	f7f3 fc58 	bl	8001daa <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800e4fa:	2302      	movs	r3, #2
 800e4fc:	9300      	str	r3, [sp, #0]
 800e4fe:	2300      	movs	r3, #0
 800e500:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e504:	4903      	ldr	r1, [pc, #12]	; (800e514 <DbgTraceInit+0x24>)
 800e506:	4804      	ldr	r0, [pc, #16]	; (800e518 <DbgTraceInit+0x28>)
 800e508:	f000 f948 	bl	800e79c <CircularQueue_Init>
#endif 
#endif
  return;
 800e50c:	bf00      	nop
}
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}
 800e512:	bf00      	nop
 800e514:	20000434 	.word	0x20000434
 800e518:	20000414 	.word	0x20000414

0800e51c <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b084      	sub	sp, #16
 800e520:	af00      	add	r7, sp, #0
 800e522:	60f8      	str	r0, [r7, #12]
 800e524:	60b9      	str	r1, [r7, #8]
 800e526:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800e528:	687a      	ldr	r2, [r7, #4]
 800e52a:	68b9      	ldr	r1, [r7, #8]
 800e52c:	68f8      	ldr	r0, [r7, #12]
 800e52e:	f000 f805 	bl	800e53c <DbgTraceWrite>
 800e532:	4603      	mov	r3, r0
}
 800e534:	4618      	mov	r0, r3
 800e536:	3710      	adds	r7, #16
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}

0800e53c <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b08a      	sub	sp, #40	; 0x28
 800e540:	af00      	add	r7, sp, #0
 800e542:	60f8      	str	r0, [r7, #12]
 800e544:	60b9      	str	r1, [r7, #8]
 800e546:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800e548:	2300      	movs	r3, #0
 800e54a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e54c:	f3ef 8310 	mrs	r3, PRIMASK
 800e550:	61bb      	str	r3, [r7, #24]
  return(result);
 800e552:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800e554:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e55c:	d102      	bne.n	800e564 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800e55e:	2300      	movs	r3, #0
 800e560:	627b      	str	r3, [r7, #36]	; 0x24
 800e562:	e034      	b.n	800e5ce <DbgTraceWrite+0x92>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	2b01      	cmp	r3, #1
 800e568:	d006      	beq.n	800e578 <DbgTraceWrite+0x3c>
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	2b02      	cmp	r3, #2
 800e56e:	d003      	beq.n	800e578 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800e570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e574:	627b      	str	r3, [r7, #36]	; 0x24
 800e576:	e02a      	b.n	800e5ce <DbgTraceWrite+0x92>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d027      	beq.n	800e5ce <DbgTraceWrite+0x92>
  {
    chars_written = bufSize;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800e582:	b672      	cpsid	i
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	b29a      	uxth	r2, r3
 800e588:	2301      	movs	r3, #1
 800e58a:	68b9      	ldr	r1, [r7, #8]
 800e58c:	4812      	ldr	r0, [pc, #72]	; (800e5d8 <DbgTraceWrite+0x9c>)
 800e58e:	f000 f937 	bl	800e800 <CircularQueue_Add>
 800e592:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800e594:	69fb      	ldr	r3, [r7, #28]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d014      	beq.n	800e5c4 <DbgTraceWrite+0x88>
 800e59a:	4b10      	ldr	r3, [pc, #64]	; (800e5dc <DbgTraceWrite+0xa0>)
 800e59c:	781b      	ldrb	r3, [r3, #0]
 800e59e:	b2db      	uxtb	r3, r3
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d00f      	beq.n	800e5c4 <DbgTraceWrite+0x88>
    {
      DbgTracePeripheralReady = RESET;
 800e5a4:	4b0d      	ldr	r3, [pc, #52]	; (800e5dc <DbgTraceWrite+0xa0>)
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	701a      	strb	r2, [r3, #0]
 800e5aa:	6a3b      	ldr	r3, [r7, #32]
 800e5ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	f383 8810 	msr	PRIMASK, r3
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	4a09      	ldr	r2, [pc, #36]	; (800e5e0 <DbgTraceWrite+0xa4>)
 800e5ba:	4619      	mov	r1, r3
 800e5bc:	69f8      	ldr	r0, [r7, #28]
 800e5be:	f7f3 fbfb 	bl	8001db8 <DbgOutputTraces>
 800e5c2:	e004      	b.n	800e5ce <DbgTraceWrite+0x92>
 800e5c4:	6a3b      	ldr	r3, [r7, #32]
 800e5c6:	613b      	str	r3, [r7, #16]
 800e5c8:	693b      	ldr	r3, [r7, #16]
 800e5ca:	f383 8810 	msr	PRIMASK, r3
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800e5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3728      	adds	r7, #40	; 0x28
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}
 800e5d8:	20000414 	.word	0x20000414
 800e5dc:	2000001d 	.word	0x2000001d
 800e5e0:	0800e485 	.word	0x0800e485

0800e5e4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800e5e4:	b480      	push	{r7}
 800e5e6:	b085      	sub	sp, #20
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800e5ee:	4b0f      	ldr	r3, [pc, #60]	; (800e62c <OTP_Read+0x48>)
 800e5f0:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800e5f2:	e002      	b.n	800e5fa <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	3b08      	subs	r3, #8
 800e5f8:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	3307      	adds	r3, #7
 800e5fe:	781b      	ldrb	r3, [r3, #0]
 800e600:	79fa      	ldrb	r2, [r7, #7]
 800e602:	429a      	cmp	r2, r3
 800e604:	d003      	beq.n	800e60e <OTP_Read+0x2a>
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	4a09      	ldr	r2, [pc, #36]	; (800e630 <OTP_Read+0x4c>)
 800e60a:	4293      	cmp	r3, r2
 800e60c:	d1f2      	bne.n	800e5f4 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	3307      	adds	r3, #7
 800e612:	781b      	ldrb	r3, [r3, #0]
 800e614:	79fa      	ldrb	r2, [r7, #7]
 800e616:	429a      	cmp	r2, r3
 800e618:	d001      	beq.n	800e61e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800e61a:	2300      	movs	r3, #0
 800e61c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800e61e:	68fb      	ldr	r3, [r7, #12]
}
 800e620:	4618      	mov	r0, r3
 800e622:	3714      	adds	r7, #20
 800e624:	46bd      	mov	sp, r7
 800e626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62a:	4770      	bx	lr
 800e62c:	1fff73f8 	.word	0x1fff73f8
 800e630:	1fff7000 	.word	0x1fff7000

0800e634 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800e634:	b480      	push	{r7}
 800e636:	b083      	sub	sp, #12
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	687a      	ldr	r2, [r7, #4]
 800e640:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	687a      	ldr	r2, [r7, #4]
 800e646:	605a      	str	r2, [r3, #4]
}
 800e648:	bf00      	nop
 800e64a:	370c      	adds	r7, #12
 800e64c:	46bd      	mov	sp, r7
 800e64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e652:	4770      	bx	lr

0800e654 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800e654:	b480      	push	{r7}
 800e656:	b087      	sub	sp, #28
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e65c:	f3ef 8310 	mrs	r3, PRIMASK
 800e660:	60fb      	str	r3, [r7, #12]
  return(result);
 800e662:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e664:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800e666:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	687a      	ldr	r2, [r7, #4]
 800e66e:	429a      	cmp	r2, r3
 800e670:	d102      	bne.n	800e678 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800e672:	2301      	movs	r3, #1
 800e674:	75fb      	strb	r3, [r7, #23]
 800e676:	e001      	b.n	800e67c <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800e678:	2300      	movs	r3, #0
 800e67a:	75fb      	strb	r3, [r7, #23]
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800e686:	7dfb      	ldrb	r3, [r7, #23]
}
 800e688:	4618      	mov	r0, r3
 800e68a:	371c      	adds	r7, #28
 800e68c:	46bd      	mov	sp, r7
 800e68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e692:	4770      	bx	lr

0800e694 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800e694:	b480      	push	{r7}
 800e696:	b087      	sub	sp, #28
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
 800e69c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e69e:	f3ef 8310 	mrs	r3, PRIMASK
 800e6a2:	60fb      	str	r3, [r7, #12]
  return(result);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e6a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e6a8:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681a      	ldr	r2, [r3, #0]
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	687a      	ldr	r2, [r7, #4]
 800e6b6:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	683a      	ldr	r2, [r7, #0]
 800e6bc:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	683a      	ldr	r2, [r7, #0]
 800e6c4:	605a      	str	r2, [r3, #4]
 800e6c6:	697b      	ldr	r3, [r7, #20]
 800e6c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e6d0:	bf00      	nop
 800e6d2:	371c      	adds	r7, #28
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6da:	4770      	bx	lr

0800e6dc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800e6dc:	b480      	push	{r7}
 800e6de:	b087      	sub	sp, #28
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
 800e6e4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6e6:	f3ef 8310 	mrs	r3, PRIMASK
 800e6ea:	60fb      	str	r3, [r7, #12]
  return(result);
 800e6ec:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e6ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e6f0:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	687a      	ldr	r2, [r7, #4]
 800e6f6:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	685a      	ldr	r2, [r3, #4]
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	683a      	ldr	r2, [r7, #0]
 800e704:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	685b      	ldr	r3, [r3, #4]
 800e70a:	683a      	ldr	r2, [r7, #0]
 800e70c:	601a      	str	r2, [r3, #0]
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e718:	bf00      	nop
 800e71a:	371c      	adds	r7, #28
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr

0800e724 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800e724:	b480      	push	{r7}
 800e726:	b087      	sub	sp, #28
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e72c:	f3ef 8310 	mrs	r3, PRIMASK
 800e730:	60fb      	str	r3, [r7, #12]
  return(result);
 800e732:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e734:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e736:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	685b      	ldr	r3, [r3, #4]
 800e73c:	687a      	ldr	r2, [r7, #4]
 800e73e:	6812      	ldr	r2, [r2, #0]
 800e740:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	687a      	ldr	r2, [r7, #4]
 800e748:	6852      	ldr	r2, [r2, #4]
 800e74a:	605a      	str	r2, [r3, #4]
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e756:	bf00      	nop
 800e758:	371c      	adds	r7, #28
 800e75a:	46bd      	mov	sp, r7
 800e75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e760:	4770      	bx	lr

0800e762 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800e762:	b580      	push	{r7, lr}
 800e764:	b086      	sub	sp, #24
 800e766:	af00      	add	r7, sp, #0
 800e768:	6078      	str	r0, [r7, #4]
 800e76a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e76c:	f3ef 8310 	mrs	r3, PRIMASK
 800e770:	60fb      	str	r3, [r7, #12]
  return(result);
 800e772:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e774:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e776:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	4618      	mov	r0, r3
 800e786:	f7ff ffcd 	bl	800e724 <LST_remove_node>
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e78e:	693b      	ldr	r3, [r7, #16]
 800e790:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e794:	bf00      	nop
 800e796:	3718      	adds	r7, #24
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}

0800e79c <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800e79c:	b480      	push	{r7}
 800e79e:	b085      	sub	sp, #20
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	60f8      	str	r0, [r7, #12]
 800e7a4:	60b9      	str	r1, [r7, #8]
 800e7a6:	607a      	str	r2, [r7, #4]
 800e7a8:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	68ba      	ldr	r2, [r7, #8]
 800e7ae:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	2200      	movs	r2, #0
 800e7c0:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	687a      	ldr	r2, [r7, #4]
 800e7cc:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	887a      	ldrh	r2, [r7, #2]
 800e7d2:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	7e3a      	ldrb	r2, [r7, #24]
 800e7d8:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800e7da:	7e3b      	ldrb	r3, [r7, #24]
 800e7dc:	f003 0302 	and.w	r3, r3, #2
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d006      	beq.n	800e7f2 <CircularQueue_Init+0x56>
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	891b      	ldrh	r3, [r3, #8]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d002      	beq.n	800e7f2 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800e7ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e7f0:	e000      	b.n	800e7f4 <CircularQueue_Init+0x58>
  }
  return 0;
 800e7f2:	2300      	movs	r3, #0
}
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	3714      	adds	r7, #20
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fe:	4770      	bx	lr

0800e800 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b08e      	sub	sp, #56	; 0x38
 800e804:	af00      	add	r7, sp, #0
 800e806:	60f8      	str	r0, [r7, #12]
 800e808:	60b9      	str	r1, [r7, #8]
 800e80a:	603b      	str	r3, [r7, #0]
 800e80c:	4613      	mov	r3, r2
 800e80e:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800e810:	2300      	movs	r3, #0
 800e812:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800e814:	2300      	movs	r3, #0
 800e816:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800e818:	2300      	movs	r3, #0
 800e81a:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800e81c:	2300      	movs	r3, #0
 800e81e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e820:	2300      	movs	r3, #0
 800e822:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800e824:	2300      	movs	r3, #0
 800e826:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800e828:	2300      	movs	r3, #0
 800e82a:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	891b      	ldrh	r3, [r3, #8]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d101      	bne.n	800e838 <CircularQueue_Add+0x38>
 800e834:	2302      	movs	r3, #2
 800e836:	e000      	b.n	800e83a <CircularQueue_Add+0x3a>
 800e838:	2300      	movs	r3, #0
 800e83a:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	695b      	ldr	r3, [r3, #20]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d02a      	beq.n	800e89a <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	891b      	ldrh	r3, [r3, #8]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d123      	bne.n	800e894 <CircularQueue_Add+0x94>
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	681a      	ldr	r2, [r3, #0]
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	691b      	ldr	r3, [r3, #16]
 800e854:	4413      	add	r3, r2
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	b29a      	uxth	r2, r3
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	6819      	ldr	r1, [r3, #0]
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	691b      	ldr	r3, [r3, #16]
 800e862:	1c58      	adds	r0, r3, #1
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	685b      	ldr	r3, [r3, #4]
 800e868:	4298      	cmp	r0, r3
 800e86a:	d306      	bcc.n	800e87a <CircularQueue_Add+0x7a>
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	6918      	ldr	r0, [r3, #16]
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	685b      	ldr	r3, [r3, #4]
 800e874:	1ac3      	subs	r3, r0, r3
 800e876:	3301      	adds	r3, #1
 800e878:	e002      	b.n	800e880 <CircularQueue_Add+0x80>
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	691b      	ldr	r3, [r3, #16]
 800e87e:	3301      	adds	r3, #1
 800e880:	440b      	add	r3, r1
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	b29b      	uxth	r3, r3
 800e886:	021b      	lsls	r3, r3, #8
 800e888:	b29b      	uxth	r3, r3
 800e88a:	4413      	add	r3, r2
 800e88c:	b29b      	uxth	r3, r3
 800e88e:	3302      	adds	r3, #2
 800e890:	b29b      	uxth	r3, r3
 800e892:	e001      	b.n	800e898 <CircularQueue_Add+0x98>
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	891b      	ldrh	r3, [r3, #8]
 800e898:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	891b      	ldrh	r3, [r3, #8]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d002      	beq.n	800e8a8 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	891b      	ldrh	r3, [r3, #8]
 800e8a6:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	691a      	ldr	r2, [r3, #16]
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	68db      	ldr	r3, [r3, #12]
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	d307      	bcc.n	800e8c4 <CircularQueue_Add+0xc4>
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	685a      	ldr	r2, [r3, #4]
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	6919      	ldr	r1, [r3, #16]
 800e8bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e8be:	440b      	add	r3, r1
 800e8c0:	1ad3      	subs	r3, r2, r3
 800e8c2:	e000      	b.n	800e8c6 <CircularQueue_Add+0xc6>
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800e8c8:	88fa      	ldrh	r2, [r7, #6]
 800e8ca:	7ffb      	ldrb	r3, [r7, #31]
 800e8cc:	4413      	add	r3, r2
 800e8ce:	461a      	mov	r2, r3
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	fb03 f302 	mul.w	r3, r3, r2
 800e8d6:	69ba      	ldr	r2, [r7, #24]
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d80b      	bhi.n	800e8f4 <CircularQueue_Add+0xf4>
 800e8dc:	88fa      	ldrh	r2, [r7, #6]
 800e8de:	7ffb      	ldrb	r3, [r7, #31]
 800e8e0:	4413      	add	r3, r2
 800e8e2:	461a      	mov	r2, r3
 800e8e4:	69bb      	ldr	r3, [r7, #24]
 800e8e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800e8ea:	fb02 f201 	mul.w	r2, r2, r1
 800e8ee:	1a9b      	subs	r3, r3, r2
 800e8f0:	b2db      	uxtb	r3, r3
 800e8f2:	e000      	b.n	800e8f6 <CircularQueue_Add+0xf6>
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800e8f8:	7dfa      	ldrb	r2, [r7, #23]
 800e8fa:	7ffb      	ldrb	r3, [r7, #31]
 800e8fc:	429a      	cmp	r2, r3
 800e8fe:	bf8c      	ite	hi
 800e900:	2301      	movhi	r3, #1
 800e902:	2300      	movls	r3, #0
 800e904:	b2db      	uxtb	r3, r3
 800e906:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800e908:	7fbb      	ldrb	r3, [r7, #30]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d008      	beq.n	800e920 <CircularQueue_Add+0x120>
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	7f1b      	ldrb	r3, [r3, #28]
 800e912:	f003 0301 	and.w	r3, r3, #1
 800e916:	2b00      	cmp	r3, #0
 800e918:	d002      	beq.n	800e920 <CircularQueue_Add+0x120>
 800e91a:	7dfb      	ldrb	r3, [r7, #23]
 800e91c:	b29b      	uxth	r3, r3
 800e91e:	e000      	b.n	800e922 <CircularQueue_Add+0x122>
 800e920:	8bbb      	ldrh	r3, [r7, #28]
 800e922:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800e924:	7fbb      	ldrb	r3, [r7, #30]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d008      	beq.n	800e93c <CircularQueue_Add+0x13c>
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	7f1b      	ldrb	r3, [r3, #28]
 800e92e:	f003 0302 	and.w	r3, r3, #2
 800e932:	2b00      	cmp	r3, #0
 800e934:	d002      	beq.n	800e93c <CircularQueue_Add+0x13c>
 800e936:	7ffb      	ldrb	r3, [r7, #31]
 800e938:	b29b      	uxth	r3, r3
 800e93a:	e000      	b.n	800e93e <CircularQueue_Add+0x13e>
 800e93c:	8bbb      	ldrh	r3, [r7, #28]
 800e93e:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800e940:	88fb      	ldrh	r3, [r7, #6]
 800e942:	2b00      	cmp	r3, #0
 800e944:	f000 817e 	beq.w	800ec44 <CircularQueue_Add+0x444>
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	695a      	ldr	r2, [r3, #20]
 800e94c:	88f9      	ldrh	r1, [r7, #6]
 800e94e:	7ffb      	ldrb	r3, [r7, #31]
 800e950:	440b      	add	r3, r1
 800e952:	4619      	mov	r1, r3
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	fb03 f301 	mul.w	r3, r3, r1
 800e95a:	441a      	add	r2, r3
 800e95c:	8bbb      	ldrh	r3, [r7, #28]
 800e95e:	441a      	add	r2, r3
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	685b      	ldr	r3, [r3, #4]
 800e964:	429a      	cmp	r2, r3
 800e966:	f200 816d 	bhi.w	800ec44 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800e96a:	2300      	movs	r3, #0
 800e96c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e96e:	e14a      	b.n	800ec06 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	691a      	ldr	r2, [r3, #16]
 800e974:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e976:	441a      	add	r2, r3
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	685b      	ldr	r3, [r3, #4]
 800e97c:	429a      	cmp	r2, r3
 800e97e:	d307      	bcc.n	800e990 <CircularQueue_Add+0x190>
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	691a      	ldr	r2, [r3, #16]
 800e984:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e986:	441a      	add	r2, r3
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	685b      	ldr	r3, [r3, #4]
 800e98c:	1ad3      	subs	r3, r2, r3
 800e98e:	e003      	b.n	800e998 <CircularQueue_Add+0x198>
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	691a      	ldr	r2, [r3, #16]
 800e994:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e996:	4413      	add	r3, r2
 800e998:	68fa      	ldr	r2, [r7, #12]
 800e99a:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	691b      	ldr	r3, [r3, #16]
 800e9a0:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	891b      	ldrh	r3, [r3, #8]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d130      	bne.n	800ea0c <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	681a      	ldr	r2, [r3, #0]
 800e9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9b0:	1c59      	adds	r1, r3, #1
 800e9b2:	6339      	str	r1, [r7, #48]	; 0x30
 800e9b4:	4413      	add	r3, r2
 800e9b6:	88fa      	ldrh	r2, [r7, #6]
 800e9b8:	b2d2      	uxtb	r2, r2
 800e9ba:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	685b      	ldr	r3, [r3, #4]
 800e9c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	d304      	bcc.n	800e9d0 <CircularQueue_Add+0x1d0>
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	685b      	ldr	r3, [r3, #4]
 800e9ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9cc:	1ad3      	subs	r3, r2, r3
 800e9ce:	e000      	b.n	800e9d2 <CircularQueue_Add+0x1d2>
 800e9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d2:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800e9d4:	88fb      	ldrh	r3, [r7, #6]
 800e9d6:	0a1b      	lsrs	r3, r3, #8
 800e9d8:	b298      	uxth	r0, r3
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	681a      	ldr	r2, [r3, #0]
 800e9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e0:	1c59      	adds	r1, r3, #1
 800e9e2:	6339      	str	r1, [r7, #48]	; 0x30
 800e9e4:	4413      	add	r3, r2
 800e9e6:	b2c2      	uxtb	r2, r0
 800e9e8:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	685b      	ldr	r3, [r3, #4]
 800e9ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	d304      	bcc.n	800e9fe <CircularQueue_Add+0x1fe>
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9fa:	1ad3      	subs	r3, r2, r3
 800e9fc:	e000      	b.n	800ea00 <CircularQueue_Add+0x200>
 800e9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea00:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	695b      	ldr	r3, [r3, #20]
 800ea06:	1c9a      	adds	r2, r3, #2
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800ea0c:	88fa      	ldrh	r2, [r7, #6]
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	6859      	ldr	r1, [r3, #4]
 800ea12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea14:	1acb      	subs	r3, r1, r3
 800ea16:	4293      	cmp	r3, r2
 800ea18:	bf28      	it	cs
 800ea1a:	4613      	movcs	r3, r2
 800ea1c:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800ea1e:	88fb      	ldrh	r3, [r7, #6]
 800ea20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea22:	429a      	cmp	r2, r3
 800ea24:	d007      	beq.n	800ea36 <CircularQueue_Add+0x236>
 800ea26:	88fb      	ldrh	r3, [r7, #6]
 800ea28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	d225      	bcs.n	800ea7a <CircularQueue_Add+0x27a>
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	7f1b      	ldrb	r3, [r3, #28]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d121      	bne.n	800ea7a <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	681a      	ldr	r2, [r3, #0]
 800ea3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea3c:	18d0      	adds	r0, r2, r3
 800ea3e:	88fb      	ldrh	r3, [r7, #6]
 800ea40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea42:	fb02 f303 	mul.w	r3, r2, r3
 800ea46:	68ba      	ldr	r2, [r7, #8]
 800ea48:	4413      	add	r3, r2
 800ea4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	f004 fced 	bl	801342c <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	695a      	ldr	r2, [r3, #20]
 800ea56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea58:	441a      	add	r2, r3
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800ea5e:	2300      	movs	r3, #0
 800ea60:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800ea62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea64:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800ea66:	88fa      	ldrh	r2, [r7, #6]
 800ea68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea6a:	1ad3      	subs	r3, r2, r3
 800ea6c:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800ea6e:	7ffb      	ldrb	r3, [r7, #31]
 800ea70:	b29a      	uxth	r2, r3
 800ea72:	88fb      	ldrh	r3, [r7, #6]
 800ea74:	4413      	add	r3, r2
 800ea76:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ea78:	e0a4      	b.n	800ebc4 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800ea7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	f000 80a1 	beq.w	800ebc4 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	7f1b      	ldrb	r3, [r3, #28]
 800ea86:	f003 0301 	and.w	r3, r3, #1
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d03a      	beq.n	800eb04 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	891b      	ldrh	r3, [r3, #8]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d10d      	bne.n	800eab2 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	681a      	ldr	r2, [r3, #0]
 800ea9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea9c:	3b02      	subs	r3, #2
 800ea9e:	4413      	add	r3, r2
 800eaa0:	22ff      	movs	r2, #255	; 0xff
 800eaa2:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	681a      	ldr	r2, [r3, #0]
 800eaa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaaa:	3b01      	subs	r3, #1
 800eaac:	4413      	add	r3, r2
 800eaae:	22ff      	movs	r2, #255	; 0xff
 800eab0:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	695a      	ldr	r2, [r3, #20]
 800eab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eab8:	441a      	add	r2, r3
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800eabe:	2300      	movs	r3, #0
 800eac0:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800eac2:	88fb      	ldrh	r3, [r7, #6]
 800eac4:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800eac6:	2300      	movs	r3, #0
 800eac8:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	891b      	ldrh	r3, [r3, #8]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d16f      	bne.n	800ebb2 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	681a      	ldr	r2, [r3, #0]
 800ead6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead8:	1c59      	adds	r1, r3, #1
 800eada:	6339      	str	r1, [r7, #48]	; 0x30
 800eadc:	4413      	add	r3, r2
 800eade:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eae0:	b2d2      	uxtb	r2, r2
 800eae2:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800eae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae6:	0a18      	lsrs	r0, r3, #8
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	681a      	ldr	r2, [r3, #0]
 800eaec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaee:	1c59      	adds	r1, r3, #1
 800eaf0:	6339      	str	r1, [r7, #48]	; 0x30
 800eaf2:	4413      	add	r3, r2
 800eaf4:	b2c2      	uxtb	r2, r0
 800eaf6:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	695b      	ldr	r3, [r3, #20]
 800eafc:	1c9a      	adds	r2, r3, #2
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	615a      	str	r2, [r3, #20]
 800eb02:	e056      	b.n	800ebb2 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	7f1b      	ldrb	r3, [r3, #28]
 800eb08:	f003 0302 	and.w	r3, r3, #2
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d050      	beq.n	800ebb2 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	891b      	ldrh	r3, [r3, #8]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d14a      	bne.n	800ebae <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	681a      	ldr	r2, [r3, #0]
 800eb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb1e:	3b02      	subs	r3, #2
 800eb20:	4413      	add	r3, r2
 800eb22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb24:	b2d2      	uxtb	r2, r2
 800eb26:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800eb28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb2a:	0a19      	lsrs	r1, r3, #8
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	681a      	ldr	r2, [r3, #0]
 800eb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb32:	3b01      	subs	r3, #1
 800eb34:	4413      	add	r3, r2
 800eb36:	b2ca      	uxtb	r2, r1
 800eb38:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	681a      	ldr	r2, [r3, #0]
 800eb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb40:	18d0      	adds	r0, r2, r3
 800eb42:	88fb      	ldrh	r3, [r7, #6]
 800eb44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb46:	fb02 f303 	mul.w	r3, r2, r3
 800eb4a:	68ba      	ldr	r2, [r7, #8]
 800eb4c:	4413      	add	r3, r2
 800eb4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb50:	4619      	mov	r1, r3
 800eb52:	f004 fc6b 	bl	801342c <memcpy>
             q->byteCount += NbBytesToCopy; 
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	695a      	ldr	r2, [r3, #20]
 800eb5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb5c:	441a      	add	r2, r3
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800eb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb64:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800eb66:	88fa      	ldrh	r2, [r7, #6]
 800eb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb6a:	1ad3      	subs	r3, r2, r3
 800eb6c:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	699b      	ldr	r3, [r3, #24]
 800eb72:	1c5a      	adds	r2, r3, #1
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800eb78:	2300      	movs	r3, #0
 800eb7a:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	681a      	ldr	r2, [r3, #0]
 800eb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb82:	1c59      	adds	r1, r3, #1
 800eb84:	6339      	str	r1, [r7, #48]	; 0x30
 800eb86:	4413      	add	r3, r2
 800eb88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb8a:	b2d2      	uxtb	r2, r2
 800eb8c:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800eb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb90:	0a18      	lsrs	r0, r3, #8
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	681a      	ldr	r2, [r3, #0]
 800eb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb98:	1c59      	adds	r1, r3, #1
 800eb9a:	6339      	str	r1, [r7, #48]	; 0x30
 800eb9c:	4413      	add	r3, r2
 800eb9e:	b2c2      	uxtb	r2, r0
 800eba0:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	695b      	ldr	r3, [r3, #20]
 800eba6:	1c9a      	adds	r2, r3, #2
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	615a      	str	r2, [r3, #20]
 800ebac:	e001      	b.n	800ebb2 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	e049      	b.n	800ec46 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800ebb2:	7ffb      	ldrb	r3, [r7, #31]
 800ebb4:	b29a      	uxth	r2, r3
 800ebb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb8:	b29b      	uxth	r3, r3
 800ebba:	4413      	add	r3, r2
 800ebbc:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800ebc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d015      	beq.n	800ebf6 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	681a      	ldr	r2, [r3, #0]
 800ebce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd0:	18d0      	adds	r0, r2, r3
 800ebd2:	88fb      	ldrh	r3, [r7, #6]
 800ebd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ebd6:	fb02 f203 	mul.w	r2, r2, r3
 800ebda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebdc:	4413      	add	r3, r2
 800ebde:	68ba      	ldr	r2, [r7, #8]
 800ebe0:	4413      	add	r3, r2
 800ebe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebe4:	4619      	mov	r1, r3
 800ebe6:	f004 fc21 	bl	801342c <memcpy>
        q->byteCount += NbBytesToCopy;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	695a      	ldr	r2, [r3, #20]
 800ebee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf0:	441a      	add	r2, r3
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	699b      	ldr	r3, [r3, #24]
 800ebfa:	1c5a      	adds	r2, r3, #1
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800ec00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec02:	3301      	adds	r3, #1
 800ec04:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	429a      	cmp	r2, r3
 800ec0c:	f4ff aeb0 	bcc.w	800e970 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	681a      	ldr	r2, [r3, #0]
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	6919      	ldr	r1, [r3, #16]
 800ec18:	7ffb      	ldrb	r3, [r7, #31]
 800ec1a:	4419      	add	r1, r3
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	685b      	ldr	r3, [r3, #4]
 800ec20:	4299      	cmp	r1, r3
 800ec22:	d307      	bcc.n	800ec34 <CircularQueue_Add+0x434>
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	6919      	ldr	r1, [r3, #16]
 800ec28:	7ffb      	ldrb	r3, [r7, #31]
 800ec2a:	4419      	add	r1, r3
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	685b      	ldr	r3, [r3, #4]
 800ec30:	1acb      	subs	r3, r1, r3
 800ec32:	e003      	b.n	800ec3c <CircularQueue_Add+0x43c>
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	6919      	ldr	r1, [r3, #16]
 800ec38:	7ffb      	ldrb	r3, [r7, #31]
 800ec3a:	440b      	add	r3, r1
 800ec3c:	4413      	add	r3, r2
 800ec3e:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800ec40:	6a3b      	ldr	r3, [r7, #32]
 800ec42:	e000      	b.n	800ec46 <CircularQueue_Add+0x446>
    return NULL;
 800ec44:	2300      	movs	r3, #0
}
 800ec46:	4618      	mov	r0, r3
 800ec48:	3738      	adds	r7, #56	; 0x38
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}

0800ec4e <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed  
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800ec4e:	b480      	push	{r7}
 800ec50:	b085      	sub	sp, #20
 800ec52:	af00      	add	r7, sp, #0
 800ec54:	6078      	str	r0, [r7, #4]
 800ec56:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800ec58:	2300      	movs	r3, #0
 800ec5a:	72fb      	strb	r3, [r7, #11]
  uint8_t* ptr= NULL;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	891b      	ldrh	r3, [r3, #8]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d101      	bne.n	800ec6c <CircularQueue_Remove+0x1e>
 800ec68:	2302      	movs	r3, #2
 800ec6a:	e000      	b.n	800ec6e <CircularQueue_Remove+0x20>
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	72fb      	strb	r3, [r7, #11]
  *elementSize = 0;
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	2200      	movs	r2, #0
 800ec74:	801a      	strh	r2, [r3, #0]
  if (q->byteCount > 0) 
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	695b      	ldr	r3, [r3, #20]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	f000 80d4 	beq.w	800ee28 <CircularQueue_Remove+0x1da>
  {
    /* retreive element Size */
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	891b      	ldrh	r3, [r3, #8]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d121      	bne.n	800eccc <CircularQueue_Remove+0x7e>
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681a      	ldr	r2, [r3, #0]
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	68db      	ldr	r3, [r3, #12]
 800ec90:	4413      	add	r3, r2
 800ec92:	781b      	ldrb	r3, [r3, #0]
 800ec94:	b29a      	uxth	r2, r3
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6819      	ldr	r1, [r3, #0]
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	68db      	ldr	r3, [r3, #12]
 800ec9e:	1c58      	adds	r0, r3, #1
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	4298      	cmp	r0, r3
 800eca6:	d306      	bcc.n	800ecb6 <CircularQueue_Remove+0x68>
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	68d8      	ldr	r0, [r3, #12]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	685b      	ldr	r3, [r3, #4]
 800ecb0:	1ac3      	subs	r3, r0, r3
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	e002      	b.n	800ecbc <CircularQueue_Remove+0x6e>
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	68db      	ldr	r3, [r3, #12]
 800ecba:	3301      	adds	r3, #1
 800ecbc:	440b      	add	r3, r1
 800ecbe:	781b      	ldrb	r3, [r3, #0]
 800ecc0:	b29b      	uxth	r3, r3
 800ecc2:	021b      	lsls	r3, r3, #8
 800ecc4:	b29b      	uxth	r3, r3
 800ecc6:	4413      	add	r3, r2
 800ecc8:	b29b      	uxth	r3, r3
 800ecca:	e001      	b.n	800ecd0 <CircularQueue_Remove+0x82>
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	891b      	ldrh	r3, [r3, #8]
 800ecd0:	683a      	ldr	r2, [r7, #0]
 800ecd2:	8013      	strh	r3, [r2, #0]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	7f1b      	ldrb	r3, [r3, #28]
 800ecd8:	f003 0301 	and.w	r3, r3, #1
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d059      	beq.n	800ed94 <CircularQueue_Remove+0x146>
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	7f1b      	ldrb	r3, [r3, #28]
 800ece4:	f003 0302 	and.w	r3, r3, #2
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d153      	bne.n	800ed94 <CircularQueue_Remove+0x146>
     {
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	881b      	ldrh	r3, [r3, #0]
 800ecf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ecf4:	4293      	cmp	r3, r2
 800ecf6:	d103      	bne.n	800ed00 <CircularQueue_Remove+0xb2>
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	891b      	ldrh	r3, [r3, #8]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d012      	beq.n	800ed26 <CircularQueue_Remove+0xd8>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	68da      	ldr	r2, [r3, #12]
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	691b      	ldr	r3, [r3, #16]
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800ed08:	429a      	cmp	r2, r3
 800ed0a:	d943      	bls.n	800ed94 <CircularQueue_Remove+0x146>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	891b      	ldrh	r3, [r3, #8]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d03f      	beq.n	800ed94 <CircularQueue_Remove+0x146>
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	685a      	ldr	r2, [r3, #4]
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	68db      	ldr	r3, [r3, #12]
 800ed1c:	1ad3      	subs	r3, r2, r3
 800ed1e:	687a      	ldr	r2, [r7, #4]
 800ed20:	8912      	ldrh	r2, [r2, #8]
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d236      	bcs.n	800ed94 <CircularQueue_Remove+0x146>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	695a      	ldr	r2, [r3, #20]
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	68d9      	ldr	r1, [r3, #12]
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	685b      	ldr	r3, [r3, #4]
 800ed32:	1acb      	subs	r3, r1, r3
 800ed34:	441a      	add	r2, r3
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	891b      	ldrh	r3, [r3, #8]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d121      	bne.n	800ed8c <CircularQueue_Remove+0x13e>
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681a      	ldr	r2, [r3, #0]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	68db      	ldr	r3, [r3, #12]
 800ed50:	4413      	add	r3, r2
 800ed52:	781b      	ldrb	r3, [r3, #0]
 800ed54:	b29a      	uxth	r2, r3
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	6819      	ldr	r1, [r3, #0]
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	68db      	ldr	r3, [r3, #12]
 800ed5e:	1c58      	adds	r0, r3, #1
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	685b      	ldr	r3, [r3, #4]
 800ed64:	4298      	cmp	r0, r3
 800ed66:	d306      	bcc.n	800ed76 <CircularQueue_Remove+0x128>
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	68d8      	ldr	r0, [r3, #12]
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	685b      	ldr	r3, [r3, #4]
 800ed70:	1ac3      	subs	r3, r0, r3
 800ed72:	3301      	adds	r3, #1
 800ed74:	e002      	b.n	800ed7c <CircularQueue_Remove+0x12e>
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	68db      	ldr	r3, [r3, #12]
 800ed7a:	3301      	adds	r3, #1
 800ed7c:	440b      	add	r3, r1
 800ed7e:	781b      	ldrb	r3, [r3, #0]
 800ed80:	b29b      	uxth	r3, r3
 800ed82:	021b      	lsls	r3, r3, #8
 800ed84:	b29b      	uxth	r3, r3
 800ed86:	4413      	add	r3, r2
 800ed88:	b29b      	uxth	r3, r3
 800ed8a:	e001      	b.n	800ed90 <CircularQueue_Remove+0x142>
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	891b      	ldrh	r3, [r3, #8]
 800ed90:	683a      	ldr	r2, [r7, #0]
 800ed92:	8013      	strh	r3, [r2, #0]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681a      	ldr	r2, [r3, #0]
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	68d9      	ldr	r1, [r3, #12]
 800ed9c:	7afb      	ldrb	r3, [r7, #11]
 800ed9e:	4419      	add	r1, r3
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	4299      	cmp	r1, r3
 800eda6:	d307      	bcc.n	800edb8 <CircularQueue_Remove+0x16a>
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	68d9      	ldr	r1, [r3, #12]
 800edac:	7afb      	ldrb	r3, [r7, #11]
 800edae:	4419      	add	r1, r3
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	685b      	ldr	r3, [r3, #4]
 800edb4:	1acb      	subs	r3, r1, r3
 800edb6:	e003      	b.n	800edc0 <CircularQueue_Remove+0x172>
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	68d9      	ldr	r1, [r3, #12]
 800edbc:	7afb      	ldrb	r3, [r7, #11]
 800edbe:	440b      	add	r3, r1
 800edc0:	4413      	add	r3, r2
 800edc2:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	695b      	ldr	r3, [r3, #20]
 800edc8:	683a      	ldr	r2, [r7, #0]
 800edca:	8812      	ldrh	r2, [r2, #0]
 800edcc:	4611      	mov	r1, r2
 800edce:	7afa      	ldrb	r2, [r7, #11]
 800edd0:	440a      	add	r2, r1
 800edd2:	1a9a      	subs	r2, r3, r2
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	695b      	ldr	r3, [r3, #20]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d01e      	beq.n	800ee1e <CircularQueue_Remove+0x1d0>
    {
      q->first = MOD((q->first+ *elementSize + elemSizeStorageRoom ), q->queueMaxSize);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	68db      	ldr	r3, [r3, #12]
 800ede4:	683a      	ldr	r2, [r7, #0]
 800ede6:	8812      	ldrh	r2, [r2, #0]
 800ede8:	441a      	add	r2, r3
 800edea:	7afb      	ldrb	r3, [r7, #11]
 800edec:	441a      	add	r2, r3
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	685b      	ldr	r3, [r3, #4]
 800edf2:	429a      	cmp	r2, r3
 800edf4:	d30a      	bcc.n	800ee0c <CircularQueue_Remove+0x1be>
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	68db      	ldr	r3, [r3, #12]
 800edfa:	683a      	ldr	r2, [r7, #0]
 800edfc:	8812      	ldrh	r2, [r2, #0]
 800edfe:	441a      	add	r2, r3
 800ee00:	7afb      	ldrb	r3, [r7, #11]
 800ee02:	441a      	add	r2, r3
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	685b      	ldr	r3, [r3, #4]
 800ee08:	1ad3      	subs	r3, r2, r3
 800ee0a:	e006      	b.n	800ee1a <CircularQueue_Remove+0x1cc>
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	68db      	ldr	r3, [r3, #12]
 800ee10:	683a      	ldr	r2, [r7, #0]
 800ee12:	8812      	ldrh	r2, [r2, #0]
 800ee14:	441a      	add	r2, r3
 800ee16:	7afb      	ldrb	r3, [r7, #11]
 800ee18:	4413      	add	r3, r2
 800ee1a:	687a      	ldr	r2, [r7, #4]
 800ee1c:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	699b      	ldr	r3, [r3, #24]
 800ee22:	1e5a      	subs	r2, r3, #1
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	619a      	str	r2, [r3, #24]
  }
  return ptr;
 800ee28:	68fb      	ldr	r3, [r7, #12]
}
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	3714      	adds	r7, #20
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee34:	4770      	bx	lr

0800ee36 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed  
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800ee36:	b480      	push	{r7}
 800ee38:	b087      	sub	sp, #28
 800ee3a:	af00      	add	r7, sp, #0
 800ee3c:	6078      	str	r0, [r7, #4]
 800ee3e:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800ee40:	2300      	movs	r3, #0
 800ee42:	73fb      	strb	r3, [r7, #15]
  uint8_t* x= NULL;
 800ee44:	2300      	movs	r3, #0
 800ee46:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	891b      	ldrh	r3, [r3, #8]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d101      	bne.n	800ee54 <CircularQueue_Sense+0x1e>
 800ee50:	2302      	movs	r3, #2
 800ee52:	e000      	b.n	800ee56 <CircularQueue_Sense+0x20>
 800ee54:	2300      	movs	r3, #0
 800ee56:	73fb      	strb	r3, [r7, #15]
  *elementSize = 0;
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	801a      	strh	r2, [r3, #0]
  uint32_t FirstElemetPos = 0;
 800ee5e:	2300      	movs	r3, #0
 800ee60:	613b      	str	r3, [r7, #16]
    
  if (q->byteCount > 0) 
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	695b      	ldr	r3, [r3, #20]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	f000 8093 	beq.w	800ef92 <CircularQueue_Sense+0x15c>
  {
    FirstElemetPos = q->first;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	68db      	ldr	r3, [r3, #12]
 800ee70:	613b      	str	r3, [r7, #16]
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	891b      	ldrh	r3, [r3, #8]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d121      	bne.n	800eebe <CircularQueue_Sense+0x88>
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681a      	ldr	r2, [r3, #0]
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	68db      	ldr	r3, [r3, #12]
 800ee82:	4413      	add	r3, r2
 800ee84:	781b      	ldrb	r3, [r3, #0]
 800ee86:	b29a      	uxth	r2, r3
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6819      	ldr	r1, [r3, #0]
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	68db      	ldr	r3, [r3, #12]
 800ee90:	1c58      	adds	r0, r3, #1
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	685b      	ldr	r3, [r3, #4]
 800ee96:	4298      	cmp	r0, r3
 800ee98:	d306      	bcc.n	800eea8 <CircularQueue_Sense+0x72>
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	68d8      	ldr	r0, [r3, #12]
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	685b      	ldr	r3, [r3, #4]
 800eea2:	1ac3      	subs	r3, r0, r3
 800eea4:	3301      	adds	r3, #1
 800eea6:	e002      	b.n	800eeae <CircularQueue_Sense+0x78>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	68db      	ldr	r3, [r3, #12]
 800eeac:	3301      	adds	r3, #1
 800eeae:	440b      	add	r3, r1
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	b29b      	uxth	r3, r3
 800eeb4:	021b      	lsls	r3, r3, #8
 800eeb6:	b29b      	uxth	r3, r3
 800eeb8:	4413      	add	r3, r2
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	e001      	b.n	800eec2 <CircularQueue_Sense+0x8c>
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	891b      	ldrh	r3, [r3, #8]
 800eec2:	683a      	ldr	r2, [r7, #0]
 800eec4:	8013      	strh	r3, [r2, #0]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	7f1b      	ldrb	r3, [r3, #28]
 800eeca:	f003 0301 	and.w	r3, r3, #1
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d04a      	beq.n	800ef68 <CircularQueue_Sense+0x132>
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	7f1b      	ldrb	r3, [r3, #28]
 800eed6:	f003 0302 	and.w	r3, r3, #2
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d144      	bne.n	800ef68 <CircularQueue_Sense+0x132>
    { 
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	881b      	ldrh	r3, [r3, #0]
 800eee2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eee6:	4293      	cmp	r3, r2
 800eee8:	d103      	bne.n	800eef2 <CircularQueue_Sense+0xbc>
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	891b      	ldrh	r3, [r3, #8]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d012      	beq.n	800ef18 <CircularQueue_Sense+0xe2>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	68da      	ldr	r2, [r3, #12]
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	691b      	ldr	r3, [r3, #16]
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800eefa:	429a      	cmp	r2, r3
 800eefc:	d934      	bls.n	800ef68 <CircularQueue_Sense+0x132>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	891b      	ldrh	r3, [r3, #8]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d030      	beq.n	800ef68 <CircularQueue_Sense+0x132>
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	685a      	ldr	r2, [r3, #4]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	68db      	ldr	r3, [r3, #12]
 800ef0e:	1ad3      	subs	r3, r2, r3
 800ef10:	687a      	ldr	r2, [r7, #4]
 800ef12:	8912      	ldrh	r2, [r2, #8]
 800ef14:	4293      	cmp	r3, r2
 800ef16:	d227      	bcs.n	800ef68 <CircularQueue_Sense+0x132>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800ef18:	2300      	movs	r3, #0
 800ef1a:	613b      	str	r3, [r7, #16]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	891b      	ldrh	r3, [r3, #8]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d11d      	bne.n	800ef60 <CircularQueue_Sense+0x12a>
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681a      	ldr	r2, [r3, #0]
 800ef28:	693b      	ldr	r3, [r7, #16]
 800ef2a:	4413      	add	r3, r2
 800ef2c:	781b      	ldrb	r3, [r3, #0]
 800ef2e:	b29a      	uxth	r2, r3
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6819      	ldr	r1, [r3, #0]
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	1c58      	adds	r0, r3, #1
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	685b      	ldr	r3, [r3, #4]
 800ef3c:	4298      	cmp	r0, r3
 800ef3e:	d305      	bcc.n	800ef4c <CircularQueue_Sense+0x116>
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	685b      	ldr	r3, [r3, #4]
 800ef44:	6938      	ldr	r0, [r7, #16]
 800ef46:	1ac3      	subs	r3, r0, r3
 800ef48:	3301      	adds	r3, #1
 800ef4a:	e001      	b.n	800ef50 <CircularQueue_Sense+0x11a>
 800ef4c:	693b      	ldr	r3, [r7, #16]
 800ef4e:	3301      	adds	r3, #1
 800ef50:	440b      	add	r3, r1
 800ef52:	781b      	ldrb	r3, [r3, #0]
 800ef54:	b29b      	uxth	r3, r3
 800ef56:	021b      	lsls	r3, r3, #8
 800ef58:	b29b      	uxth	r3, r3
 800ef5a:	4413      	add	r3, r2
 800ef5c:	b29b      	uxth	r3, r3
 800ef5e:	e001      	b.n	800ef64 <CircularQueue_Sense+0x12e>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	891b      	ldrh	r3, [r3, #8]
 800ef64:	683a      	ldr	r2, [r7, #0]
 800ef66:	8013      	strh	r3, [r2, #0]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681a      	ldr	r2, [r3, #0]
 800ef6c:	7bf9      	ldrb	r1, [r7, #15]
 800ef6e:	693b      	ldr	r3, [r7, #16]
 800ef70:	4419      	add	r1, r3
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	685b      	ldr	r3, [r3, #4]
 800ef76:	4299      	cmp	r1, r3
 800ef78:	d306      	bcc.n	800ef88 <CircularQueue_Sense+0x152>
 800ef7a:	7bf9      	ldrb	r1, [r7, #15]
 800ef7c:	693b      	ldr	r3, [r7, #16]
 800ef7e:	4419      	add	r1, r3
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	685b      	ldr	r3, [r3, #4]
 800ef84:	1acb      	subs	r3, r1, r3
 800ef86:	e002      	b.n	800ef8e <CircularQueue_Sense+0x158>
 800ef88:	7bf9      	ldrb	r1, [r7, #15]
 800ef8a:	693b      	ldr	r3, [r7, #16]
 800ef8c:	440b      	add	r3, r1
 800ef8e:	4413      	add	r3, r2
 800ef90:	617b      	str	r3, [r7, #20]
  }
  return x;
 800ef92:	697b      	ldr	r3, [r7, #20]
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	371c      	adds	r7, #28
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9e:	4770      	bx	lr

0800efa0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800efa0:	b480      	push	{r7}
 800efa2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800efa4:	bf00      	nop
 800efa6:	46bd      	mov	sp, r7
 800efa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efac:	4770      	bx	lr
	...

0800efb0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800efb0:	b480      	push	{r7}
 800efb2:	b085      	sub	sp, #20
 800efb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800efb6:	f3ef 8305 	mrs	r3, IPSR
 800efba:	60bb      	str	r3, [r7, #8]
  return(result);
 800efbc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d10f      	bne.n	800efe2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800efc2:	f3ef 8310 	mrs	r3, PRIMASK
 800efc6:	607b      	str	r3, [r7, #4]
  return(result);
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d105      	bne.n	800efda <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800efce:	f3ef 8311 	mrs	r3, BASEPRI
 800efd2:	603b      	str	r3, [r7, #0]
  return(result);
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d007      	beq.n	800efea <osKernelInitialize+0x3a>
 800efda:	4b0e      	ldr	r3, [pc, #56]	; (800f014 <osKernelInitialize+0x64>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	2b02      	cmp	r3, #2
 800efe0:	d103      	bne.n	800efea <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800efe2:	f06f 0305 	mvn.w	r3, #5
 800efe6:	60fb      	str	r3, [r7, #12]
 800efe8:	e00c      	b.n	800f004 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800efea:	4b0a      	ldr	r3, [pc, #40]	; (800f014 <osKernelInitialize+0x64>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d105      	bne.n	800effe <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800eff2:	4b08      	ldr	r3, [pc, #32]	; (800f014 <osKernelInitialize+0x64>)
 800eff4:	2201      	movs	r2, #1
 800eff6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800eff8:	2300      	movs	r3, #0
 800effa:	60fb      	str	r3, [r7, #12]
 800effc:	e002      	b.n	800f004 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800effe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f002:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f004:	68fb      	ldr	r3, [r7, #12]
}
 800f006:	4618      	mov	r0, r3
 800f008:	3714      	adds	r7, #20
 800f00a:	46bd      	mov	sp, r7
 800f00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f010:	4770      	bx	lr
 800f012:	bf00      	nop
 800f014:	20001434 	.word	0x20001434

0800f018 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f018:	b580      	push	{r7, lr}
 800f01a:	b084      	sub	sp, #16
 800f01c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f01e:	f3ef 8305 	mrs	r3, IPSR
 800f022:	60bb      	str	r3, [r7, #8]
  return(result);
 800f024:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f026:	2b00      	cmp	r3, #0
 800f028:	d10f      	bne.n	800f04a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f02a:	f3ef 8310 	mrs	r3, PRIMASK
 800f02e:	607b      	str	r3, [r7, #4]
  return(result);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d105      	bne.n	800f042 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f036:	f3ef 8311 	mrs	r3, BASEPRI
 800f03a:	603b      	str	r3, [r7, #0]
  return(result);
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d007      	beq.n	800f052 <osKernelStart+0x3a>
 800f042:	4b0f      	ldr	r3, [pc, #60]	; (800f080 <osKernelStart+0x68>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	2b02      	cmp	r3, #2
 800f048:	d103      	bne.n	800f052 <osKernelStart+0x3a>
    stat = osErrorISR;
 800f04a:	f06f 0305 	mvn.w	r3, #5
 800f04e:	60fb      	str	r3, [r7, #12]
 800f050:	e010      	b.n	800f074 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f052:	4b0b      	ldr	r3, [pc, #44]	; (800f080 <osKernelStart+0x68>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	2b01      	cmp	r3, #1
 800f058:	d109      	bne.n	800f06e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f05a:	f7ff ffa1 	bl	800efa0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f05e:	4b08      	ldr	r3, [pc, #32]	; (800f080 <osKernelStart+0x68>)
 800f060:	2202      	movs	r2, #2
 800f062:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f064:	f002 fd5c 	bl	8011b20 <vTaskStartScheduler>
      stat = osOK;
 800f068:	2300      	movs	r3, #0
 800f06a:	60fb      	str	r3, [r7, #12]
 800f06c:	e002      	b.n	800f074 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800f06e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f072:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f074:	68fb      	ldr	r3, [r7, #12]
}
 800f076:	4618      	mov	r0, r3
 800f078:	3710      	adds	r7, #16
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd80      	pop	{r7, pc}
 800f07e:	bf00      	nop
 800f080:	20001434 	.word	0x20001434

0800f084 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f084:	b580      	push	{r7, lr}
 800f086:	b090      	sub	sp, #64	; 0x40
 800f088:	af04      	add	r7, sp, #16
 800f08a:	60f8      	str	r0, [r7, #12]
 800f08c:	60b9      	str	r1, [r7, #8]
 800f08e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f090:	2300      	movs	r3, #0
 800f092:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f094:	f3ef 8305 	mrs	r3, IPSR
 800f098:	61fb      	str	r3, [r7, #28]
  return(result);
 800f09a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	f040 808f 	bne.w	800f1c0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f0a2:	f3ef 8310 	mrs	r3, PRIMASK
 800f0a6:	61bb      	str	r3, [r7, #24]
  return(result);
 800f0a8:	69bb      	ldr	r3, [r7, #24]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d105      	bne.n	800f0ba <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f0ae:	f3ef 8311 	mrs	r3, BASEPRI
 800f0b2:	617b      	str	r3, [r7, #20]
  return(result);
 800f0b4:	697b      	ldr	r3, [r7, #20]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d003      	beq.n	800f0c2 <osThreadNew+0x3e>
 800f0ba:	4b44      	ldr	r3, [pc, #272]	; (800f1cc <osThreadNew+0x148>)
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	2b02      	cmp	r3, #2
 800f0c0:	d07e      	beq.n	800f1c0 <osThreadNew+0x13c>
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d07b      	beq.n	800f1c0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800f0c8:	2380      	movs	r3, #128	; 0x80
 800f0ca:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800f0cc:	2318      	movs	r3, #24
 800f0ce:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800f0d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f0d8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d045      	beq.n	800f16c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d002      	beq.n	800f0ee <osThreadNew+0x6a>
        name = attr->name;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	699b      	ldr	r3, [r3, #24]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d002      	beq.n	800f0fc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	699b      	ldr	r3, [r3, #24]
 800f0fa:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d008      	beq.n	800f114 <osThreadNew+0x90>
 800f102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f104:	2b38      	cmp	r3, #56	; 0x38
 800f106:	d805      	bhi.n	800f114 <osThreadNew+0x90>
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	685b      	ldr	r3, [r3, #4]
 800f10c:	f003 0301 	and.w	r3, r3, #1
 800f110:	2b00      	cmp	r3, #0
 800f112:	d001      	beq.n	800f118 <osThreadNew+0x94>
        return (NULL);
 800f114:	2300      	movs	r3, #0
 800f116:	e054      	b.n	800f1c2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	695b      	ldr	r3, [r3, #20]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d003      	beq.n	800f128 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	695b      	ldr	r3, [r3, #20]
 800f124:	089b      	lsrs	r3, r3, #2
 800f126:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	689b      	ldr	r3, [r3, #8]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d00e      	beq.n	800f14e <osThreadNew+0xca>
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	68db      	ldr	r3, [r3, #12]
 800f134:	2b5b      	cmp	r3, #91	; 0x5b
 800f136:	d90a      	bls.n	800f14e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d006      	beq.n	800f14e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	695b      	ldr	r3, [r3, #20]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d002      	beq.n	800f14e <osThreadNew+0xca>
        mem = 1;
 800f148:	2301      	movs	r3, #1
 800f14a:	623b      	str	r3, [r7, #32]
 800f14c:	e010      	b.n	800f170 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	689b      	ldr	r3, [r3, #8]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d10c      	bne.n	800f170 <osThreadNew+0xec>
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	68db      	ldr	r3, [r3, #12]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d108      	bne.n	800f170 <osThreadNew+0xec>
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	691b      	ldr	r3, [r3, #16]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d104      	bne.n	800f170 <osThreadNew+0xec>
          mem = 0;
 800f166:	2300      	movs	r3, #0
 800f168:	623b      	str	r3, [r7, #32]
 800f16a:	e001      	b.n	800f170 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800f16c:	2300      	movs	r3, #0
 800f16e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800f170:	6a3b      	ldr	r3, [r7, #32]
 800f172:	2b01      	cmp	r3, #1
 800f174:	d110      	bne.n	800f198 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800f17a:	687a      	ldr	r2, [r7, #4]
 800f17c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f17e:	9202      	str	r2, [sp, #8]
 800f180:	9301      	str	r3, [sp, #4]
 800f182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f184:	9300      	str	r3, [sp, #0]
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f18a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f18c:	68f8      	ldr	r0, [r7, #12]
 800f18e:	f002 faf5 	bl	801177c <xTaskCreateStatic>
 800f192:	4603      	mov	r3, r0
 800f194:	613b      	str	r3, [r7, #16]
 800f196:	e013      	b.n	800f1c0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800f198:	6a3b      	ldr	r3, [r7, #32]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d110      	bne.n	800f1c0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a0:	b29a      	uxth	r2, r3
 800f1a2:	f107 0310 	add.w	r3, r7, #16
 800f1a6:	9301      	str	r3, [sp, #4]
 800f1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1aa:	9300      	str	r3, [sp, #0]
 800f1ac:	68bb      	ldr	r3, [r7, #8]
 800f1ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f1b0:	68f8      	ldr	r0, [r7, #12]
 800f1b2:	f002 fb3d 	bl	8011830 <xTaskCreate>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	2b01      	cmp	r3, #1
 800f1ba:	d001      	beq.n	800f1c0 <osThreadNew+0x13c>
          hTask = NULL;
 800f1bc:	2300      	movs	r3, #0
 800f1be:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f1c0:	693b      	ldr	r3, [r7, #16]
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	3730      	adds	r7, #48	; 0x30
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}
 800f1ca:	bf00      	nop
 800f1cc:	20001434 	.word	0x20001434

0800f1d0 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b08a      	sub	sp, #40	; 0x28
 800f1d4:	af02      	add	r7, sp, #8
 800f1d6:	6078      	str	r0, [r7, #4]
 800f1d8:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800f1de:	69fb      	ldr	r3, [r7, #28]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d002      	beq.n	800f1ea <osThreadFlagsSet+0x1a>
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	da03      	bge.n	800f1f2 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800f1ea:	f06f 0303 	mvn.w	r3, #3
 800f1ee:	60fb      	str	r3, [r7, #12]
 800f1f0:	e046      	b.n	800f280 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800f1f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f1f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f1f8:	f3ef 8305 	mrs	r3, IPSR
 800f1fc:	61bb      	str	r3, [r7, #24]
  return(result);
 800f1fe:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800f200:	2b00      	cmp	r3, #0
 800f202:	d10f      	bne.n	800f224 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f204:	f3ef 8310 	mrs	r3, PRIMASK
 800f208:	617b      	str	r3, [r7, #20]
  return(result);
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d105      	bne.n	800f21c <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f210:	f3ef 8311 	mrs	r3, BASEPRI
 800f214:	613b      	str	r3, [r7, #16]
  return(result);
 800f216:	693b      	ldr	r3, [r7, #16]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d024      	beq.n	800f266 <osThreadFlagsSet+0x96>
 800f21c:	4b1b      	ldr	r3, [pc, #108]	; (800f28c <osThreadFlagsSet+0xbc>)
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	2b02      	cmp	r3, #2
 800f222:	d120      	bne.n	800f266 <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800f224:	2300      	movs	r3, #0
 800f226:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800f228:	f107 0308 	add.w	r3, r7, #8
 800f22c:	9300      	str	r3, [sp, #0]
 800f22e:	2300      	movs	r3, #0
 800f230:	2201      	movs	r2, #1
 800f232:	6839      	ldr	r1, [r7, #0]
 800f234:	69f8      	ldr	r0, [r7, #28]
 800f236:	f003 fbf7 	bl	8012a28 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800f23a:	f107 020c 	add.w	r2, r7, #12
 800f23e:	2300      	movs	r3, #0
 800f240:	9300      	str	r3, [sp, #0]
 800f242:	4613      	mov	r3, r2
 800f244:	2200      	movs	r2, #0
 800f246:	2100      	movs	r1, #0
 800f248:	69f8      	ldr	r0, [r7, #28]
 800f24a:	f003 fbed 	bl	8012a28 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d015      	beq.n	800f280 <osThreadFlagsSet+0xb0>
 800f254:	4b0e      	ldr	r3, [pc, #56]	; (800f290 <osThreadFlagsSet+0xc0>)
 800f256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f25a:	601a      	str	r2, [r3, #0]
 800f25c:	f3bf 8f4f 	dsb	sy
 800f260:	f3bf 8f6f 	isb	sy
 800f264:	e00c      	b.n	800f280 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800f266:	2300      	movs	r3, #0
 800f268:	2201      	movs	r2, #1
 800f26a:	6839      	ldr	r1, [r7, #0]
 800f26c:	69f8      	ldr	r0, [r7, #28]
 800f26e:	f003 fb25 	bl	80128bc <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800f272:	f107 030c 	add.w	r3, r7, #12
 800f276:	2200      	movs	r2, #0
 800f278:	2100      	movs	r1, #0
 800f27a:	69f8      	ldr	r0, [r7, #28]
 800f27c:	f003 fb1e 	bl	80128bc <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800f280:	68fb      	ldr	r3, [r7, #12]
}
 800f282:	4618      	mov	r0, r3
 800f284:	3720      	adds	r7, #32
 800f286:	46bd      	mov	sp, r7
 800f288:	bd80      	pop	{r7, pc}
 800f28a:	bf00      	nop
 800f28c:	20001434 	.word	0x20001434
 800f290:	e000ed04 	.word	0xe000ed04

0800f294 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800f294:	b580      	push	{r7, lr}
 800f296:	b08e      	sub	sp, #56	; 0x38
 800f298:	af00      	add	r7, sp, #0
 800f29a:	60f8      	str	r0, [r7, #12]
 800f29c:	60b9      	str	r1, [r7, #8]
 800f29e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f2a0:	f3ef 8305 	mrs	r3, IPSR
 800f2a4:	61fb      	str	r3, [r7, #28]
  return(result);
 800f2a6:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d10f      	bne.n	800f2cc <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f2ac:	f3ef 8310 	mrs	r3, PRIMASK
 800f2b0:	61bb      	str	r3, [r7, #24]
  return(result);
 800f2b2:	69bb      	ldr	r3, [r7, #24]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d105      	bne.n	800f2c4 <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f2b8:	f3ef 8311 	mrs	r3, BASEPRI
 800f2bc:	617b      	str	r3, [r7, #20]
  return(result);
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d007      	beq.n	800f2d4 <osThreadFlagsWait+0x40>
 800f2c4:	4b3c      	ldr	r3, [pc, #240]	; (800f3b8 <osThreadFlagsWait+0x124>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	2b02      	cmp	r3, #2
 800f2ca:	d103      	bne.n	800f2d4 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800f2cc:	f06f 0305 	mvn.w	r3, #5
 800f2d0:	637b      	str	r3, [r7, #52]	; 0x34
 800f2d2:	e06b      	b.n	800f3ac <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	da03      	bge.n	800f2e2 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800f2da:	f06f 0303 	mvn.w	r3, #3
 800f2de:	637b      	str	r3, [r7, #52]	; 0x34
 800f2e0:	e064      	b.n	800f3ac <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	f003 0302 	and.w	r3, r3, #2
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d002      	beq.n	800f2f2 <osThreadFlagsWait+0x5e>
      clear = 0U;
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	633b      	str	r3, [r7, #48]	; 0x30
 800f2f0:	e001      	b.n	800f2f6 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800f2fe:	f002 fd55 	bl	8011dac <xTaskGetTickCount>
 800f302:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800f304:	f107 0210 	add.w	r2, r7, #16
 800f308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f30a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f30c:	2000      	movs	r0, #0
 800f30e:	f003 fa7b 	bl	8012808 <xTaskNotifyWait>
 800f312:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800f314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f316:	2b01      	cmp	r3, #1
 800f318:	d137      	bne.n	800f38a <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800f31a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	4013      	ands	r3, r2
 800f320:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800f322:	693b      	ldr	r3, [r7, #16]
 800f324:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f326:	4313      	orrs	r3, r2
 800f328:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	f003 0301 	and.w	r3, r3, #1
 800f330:	2b00      	cmp	r3, #0
 800f332:	d00c      	beq.n	800f34e <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800f334:	68fa      	ldr	r2, [r7, #12]
 800f336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f338:	4013      	ands	r3, r2
 800f33a:	68fa      	ldr	r2, [r7, #12]
 800f33c:	429a      	cmp	r2, r3
 800f33e:	d032      	beq.n	800f3a6 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d10f      	bne.n	800f366 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800f346:	f06f 0302 	mvn.w	r3, #2
 800f34a:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800f34c:	e02e      	b.n	800f3ac <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800f34e:	68fa      	ldr	r2, [r7, #12]
 800f350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f352:	4013      	ands	r3, r2
 800f354:	2b00      	cmp	r3, #0
 800f356:	d128      	bne.n	800f3aa <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d103      	bne.n	800f366 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800f35e:	f06f 0302 	mvn.w	r3, #2
 800f362:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800f364:	e022      	b.n	800f3ac <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800f366:	f002 fd21 	bl	8011dac <xTaskGetTickCount>
 800f36a:	4602      	mov	r2, r0
 800f36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f36e:	1ad3      	subs	r3, r2, r3
 800f370:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800f372:	6a3a      	ldr	r2, [r7, #32]
 800f374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f376:	429a      	cmp	r2, r3
 800f378:	d902      	bls.n	800f380 <osThreadFlagsWait+0xec>
          tout  = 0;
 800f37a:	2300      	movs	r3, #0
 800f37c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f37e:	e00e      	b.n	800f39e <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800f380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f382:	6a3b      	ldr	r3, [r7, #32]
 800f384:	1ad3      	subs	r3, r2, r3
 800f386:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f388:	e009      	b.n	800f39e <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d103      	bne.n	800f398 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800f390:	f06f 0302 	mvn.w	r3, #2
 800f394:	637b      	str	r3, [r7, #52]	; 0x34
 800f396:	e002      	b.n	800f39e <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800f398:	f06f 0301 	mvn.w	r3, #1
 800f39c:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800f39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d1af      	bne.n	800f304 <osThreadFlagsWait+0x70>
 800f3a4:	e002      	b.n	800f3ac <osThreadFlagsWait+0x118>
            break;
 800f3a6:	bf00      	nop
 800f3a8:	e000      	b.n	800f3ac <osThreadFlagsWait+0x118>
            break;
 800f3aa:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800f3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	3738      	adds	r7, #56	; 0x38
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}
 800f3b6:	bf00      	nop
 800f3b8:	20001434 	.word	0x20001434

0800f3bc <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b086      	sub	sp, #24
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f3c4:	f3ef 8305 	mrs	r3, IPSR
 800f3c8:	613b      	str	r3, [r7, #16]
  return(result);
 800f3ca:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d10f      	bne.n	800f3f0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f3d0:	f3ef 8310 	mrs	r3, PRIMASK
 800f3d4:	60fb      	str	r3, [r7, #12]
  return(result);
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d105      	bne.n	800f3e8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f3dc:	f3ef 8311 	mrs	r3, BASEPRI
 800f3e0:	60bb      	str	r3, [r7, #8]
  return(result);
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d007      	beq.n	800f3f8 <osDelay+0x3c>
 800f3e8:	4b0a      	ldr	r3, [pc, #40]	; (800f414 <osDelay+0x58>)
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	2b02      	cmp	r3, #2
 800f3ee:	d103      	bne.n	800f3f8 <osDelay+0x3c>
    stat = osErrorISR;
 800f3f0:	f06f 0305 	mvn.w	r3, #5
 800f3f4:	617b      	str	r3, [r7, #20]
 800f3f6:	e007      	b.n	800f408 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d002      	beq.n	800f408 <osDelay+0x4c>
      vTaskDelay(ticks);
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	f002 fb58 	bl	8011ab8 <vTaskDelay>
    }
  }

  return (stat);
 800f408:	697b      	ldr	r3, [r7, #20]
}
 800f40a:	4618      	mov	r0, r3
 800f40c:	3718      	adds	r7, #24
 800f40e:	46bd      	mov	sp, r7
 800f410:	bd80      	pop	{r7, pc}
 800f412:	bf00      	nop
 800f414:	20001434 	.word	0x20001434

0800f418 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800f418:	b580      	push	{r7, lr}
 800f41a:	b08a      	sub	sp, #40	; 0x28
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800f420:	2300      	movs	r3, #0
 800f422:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f424:	f3ef 8305 	mrs	r3, IPSR
 800f428:	613b      	str	r3, [r7, #16]
  return(result);
 800f42a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	f040 8085 	bne.w	800f53c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f432:	f3ef 8310 	mrs	r3, PRIMASK
 800f436:	60fb      	str	r3, [r7, #12]
  return(result);
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d105      	bne.n	800f44a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f43e:	f3ef 8311 	mrs	r3, BASEPRI
 800f442:	60bb      	str	r3, [r7, #8]
  return(result);
 800f444:	68bb      	ldr	r3, [r7, #8]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d003      	beq.n	800f452 <osMutexNew+0x3a>
 800f44a:	4b3f      	ldr	r3, [pc, #252]	; (800f548 <osMutexNew+0x130>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	2b02      	cmp	r3, #2
 800f450:	d074      	beq.n	800f53c <osMutexNew+0x124>
    if (attr != NULL) {
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d003      	beq.n	800f460 <osMutexNew+0x48>
      type = attr->attr_bits;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	685b      	ldr	r3, [r3, #4]
 800f45c:	623b      	str	r3, [r7, #32]
 800f45e:	e001      	b.n	800f464 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800f460:	2300      	movs	r3, #0
 800f462:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800f464:	6a3b      	ldr	r3, [r7, #32]
 800f466:	f003 0301 	and.w	r3, r3, #1
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d002      	beq.n	800f474 <osMutexNew+0x5c>
      rmtx = 1U;
 800f46e:	2301      	movs	r3, #1
 800f470:	61fb      	str	r3, [r7, #28]
 800f472:	e001      	b.n	800f478 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800f474:	2300      	movs	r3, #0
 800f476:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800f478:	6a3b      	ldr	r3, [r7, #32]
 800f47a:	f003 0308 	and.w	r3, r3, #8
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d15c      	bne.n	800f53c <osMutexNew+0x124>
      mem = -1;
 800f482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f486:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d015      	beq.n	800f4ba <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	689b      	ldr	r3, [r3, #8]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d006      	beq.n	800f4a4 <osMutexNew+0x8c>
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	68db      	ldr	r3, [r3, #12]
 800f49a:	2b4f      	cmp	r3, #79	; 0x4f
 800f49c:	d902      	bls.n	800f4a4 <osMutexNew+0x8c>
          mem = 1;
 800f49e:	2301      	movs	r3, #1
 800f4a0:	61bb      	str	r3, [r7, #24]
 800f4a2:	e00c      	b.n	800f4be <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	689b      	ldr	r3, [r3, #8]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d108      	bne.n	800f4be <osMutexNew+0xa6>
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	68db      	ldr	r3, [r3, #12]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d104      	bne.n	800f4be <osMutexNew+0xa6>
            mem = 0;
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	61bb      	str	r3, [r7, #24]
 800f4b8:	e001      	b.n	800f4be <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800f4be:	69bb      	ldr	r3, [r7, #24]
 800f4c0:	2b01      	cmp	r3, #1
 800f4c2:	d112      	bne.n	800f4ea <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800f4c4:	69fb      	ldr	r3, [r7, #28]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d007      	beq.n	800f4da <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	689b      	ldr	r3, [r3, #8]
 800f4ce:	4619      	mov	r1, r3
 800f4d0:	2004      	movs	r0, #4
 800f4d2:	f001 fa20 	bl	8010916 <xQueueCreateMutexStatic>
 800f4d6:	6278      	str	r0, [r7, #36]	; 0x24
 800f4d8:	e016      	b.n	800f508 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	689b      	ldr	r3, [r3, #8]
 800f4de:	4619      	mov	r1, r3
 800f4e0:	2001      	movs	r0, #1
 800f4e2:	f001 fa18 	bl	8010916 <xQueueCreateMutexStatic>
 800f4e6:	6278      	str	r0, [r7, #36]	; 0x24
 800f4e8:	e00e      	b.n	800f508 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800f4ea:	69bb      	ldr	r3, [r7, #24]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d10b      	bne.n	800f508 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800f4f0:	69fb      	ldr	r3, [r7, #28]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d004      	beq.n	800f500 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800f4f6:	2004      	movs	r0, #4
 800f4f8:	f001 f9f5 	bl	80108e6 <xQueueCreateMutex>
 800f4fc:	6278      	str	r0, [r7, #36]	; 0x24
 800f4fe:	e003      	b.n	800f508 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800f500:	2001      	movs	r0, #1
 800f502:	f001 f9f0 	bl	80108e6 <xQueueCreateMutex>
 800f506:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800f508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d00c      	beq.n	800f528 <osMutexNew+0x110>
        if (attr != NULL) {
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d003      	beq.n	800f51c <osMutexNew+0x104>
          name = attr->name;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	617b      	str	r3, [r7, #20]
 800f51a:	e001      	b.n	800f520 <osMutexNew+0x108>
        } else {
          name = NULL;
 800f51c:	2300      	movs	r3, #0
 800f51e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800f520:	6979      	ldr	r1, [r7, #20]
 800f522:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f524:	f002 f8a4 	bl	8011670 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800f528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d006      	beq.n	800f53c <osMutexNew+0x124>
 800f52e:	69fb      	ldr	r3, [r7, #28]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d003      	beq.n	800f53c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800f534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f536:	f043 0301 	orr.w	r3, r3, #1
 800f53a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800f53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f53e:	4618      	mov	r0, r3
 800f540:	3728      	adds	r7, #40	; 0x28
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}
 800f546:	bf00      	nop
 800f548:	20001434 	.word	0x20001434

0800f54c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b088      	sub	sp, #32
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
 800f554:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	f023 0301 	bic.w	r3, r3, #1
 800f55c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	f003 0301 	and.w	r3, r3, #1
 800f564:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800f566:	2300      	movs	r3, #0
 800f568:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f56a:	f3ef 8305 	mrs	r3, IPSR
 800f56e:	613b      	str	r3, [r7, #16]
  return(result);
 800f570:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800f572:	2b00      	cmp	r3, #0
 800f574:	d10f      	bne.n	800f596 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f576:	f3ef 8310 	mrs	r3, PRIMASK
 800f57a:	60fb      	str	r3, [r7, #12]
  return(result);
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d105      	bne.n	800f58e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f582:	f3ef 8311 	mrs	r3, BASEPRI
 800f586:	60bb      	str	r3, [r7, #8]
  return(result);
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d007      	beq.n	800f59e <osMutexAcquire+0x52>
 800f58e:	4b1d      	ldr	r3, [pc, #116]	; (800f604 <osMutexAcquire+0xb8>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	2b02      	cmp	r3, #2
 800f594:	d103      	bne.n	800f59e <osMutexAcquire+0x52>
    stat = osErrorISR;
 800f596:	f06f 0305 	mvn.w	r3, #5
 800f59a:	61fb      	str	r3, [r7, #28]
 800f59c:	e02c      	b.n	800f5f8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800f59e:	69bb      	ldr	r3, [r7, #24]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d103      	bne.n	800f5ac <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800f5a4:	f06f 0303 	mvn.w	r3, #3
 800f5a8:	61fb      	str	r3, [r7, #28]
 800f5aa:	e025      	b.n	800f5f8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d011      	beq.n	800f5d6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800f5b2:	6839      	ldr	r1, [r7, #0]
 800f5b4:	69b8      	ldr	r0, [r7, #24]
 800f5b6:	f001 f9fc 	bl	80109b2 <xQueueTakeMutexRecursive>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	2b01      	cmp	r3, #1
 800f5be:	d01b      	beq.n	800f5f8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d003      	beq.n	800f5ce <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800f5c6:	f06f 0301 	mvn.w	r3, #1
 800f5ca:	61fb      	str	r3, [r7, #28]
 800f5cc:	e014      	b.n	800f5f8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800f5ce:	f06f 0302 	mvn.w	r3, #2
 800f5d2:	61fb      	str	r3, [r7, #28]
 800f5d4:	e010      	b.n	800f5f8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800f5d6:	6839      	ldr	r1, [r7, #0]
 800f5d8:	69b8      	ldr	r0, [r7, #24]
 800f5da:	f001 fd79 	bl	80110d0 <xQueueSemaphoreTake>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	2b01      	cmp	r3, #1
 800f5e2:	d009      	beq.n	800f5f8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d003      	beq.n	800f5f2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800f5ea:	f06f 0301 	mvn.w	r3, #1
 800f5ee:	61fb      	str	r3, [r7, #28]
 800f5f0:	e002      	b.n	800f5f8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800f5f2:	f06f 0302 	mvn.w	r3, #2
 800f5f6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f5f8:	69fb      	ldr	r3, [r7, #28]
}
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	3720      	adds	r7, #32
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}
 800f602:	bf00      	nop
 800f604:	20001434 	.word	0x20001434

0800f608 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800f608:	b580      	push	{r7, lr}
 800f60a:	b088      	sub	sp, #32
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f023 0301 	bic.w	r3, r3, #1
 800f616:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f003 0301 	and.w	r3, r3, #1
 800f61e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800f620:	2300      	movs	r3, #0
 800f622:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f624:	f3ef 8305 	mrs	r3, IPSR
 800f628:	613b      	str	r3, [r7, #16]
  return(result);
 800f62a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d10f      	bne.n	800f650 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f630:	f3ef 8310 	mrs	r3, PRIMASK
 800f634:	60fb      	str	r3, [r7, #12]
  return(result);
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d105      	bne.n	800f648 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f63c:	f3ef 8311 	mrs	r3, BASEPRI
 800f640:	60bb      	str	r3, [r7, #8]
  return(result);
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d007      	beq.n	800f658 <osMutexRelease+0x50>
 800f648:	4b16      	ldr	r3, [pc, #88]	; (800f6a4 <osMutexRelease+0x9c>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	2b02      	cmp	r3, #2
 800f64e:	d103      	bne.n	800f658 <osMutexRelease+0x50>
    stat = osErrorISR;
 800f650:	f06f 0305 	mvn.w	r3, #5
 800f654:	61fb      	str	r3, [r7, #28]
 800f656:	e01f      	b.n	800f698 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800f658:	69bb      	ldr	r3, [r7, #24]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d103      	bne.n	800f666 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800f65e:	f06f 0303 	mvn.w	r3, #3
 800f662:	61fb      	str	r3, [r7, #28]
 800f664:	e018      	b.n	800f698 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d009      	beq.n	800f680 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800f66c:	69b8      	ldr	r0, [r7, #24]
 800f66e:	f001 f96d 	bl	801094c <xQueueGiveMutexRecursive>
 800f672:	4603      	mov	r3, r0
 800f674:	2b01      	cmp	r3, #1
 800f676:	d00f      	beq.n	800f698 <osMutexRelease+0x90>
        stat = osErrorResource;
 800f678:	f06f 0302 	mvn.w	r3, #2
 800f67c:	61fb      	str	r3, [r7, #28]
 800f67e:	e00b      	b.n	800f698 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800f680:	2300      	movs	r3, #0
 800f682:	2200      	movs	r2, #0
 800f684:	2100      	movs	r1, #0
 800f686:	69b8      	ldr	r0, [r7, #24]
 800f688:	f001 fa2e 	bl	8010ae8 <xQueueGenericSend>
 800f68c:	4603      	mov	r3, r0
 800f68e:	2b01      	cmp	r3, #1
 800f690:	d002      	beq.n	800f698 <osMutexRelease+0x90>
        stat = osErrorResource;
 800f692:	f06f 0302 	mvn.w	r3, #2
 800f696:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800f698:	69fb      	ldr	r3, [r7, #28]
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	3720      	adds	r7, #32
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}
 800f6a2:	bf00      	nop
 800f6a4:	20001434 	.word	0x20001434

0800f6a8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b08c      	sub	sp, #48	; 0x30
 800f6ac:	af02      	add	r7, sp, #8
 800f6ae:	60f8      	str	r0, [r7, #12]
 800f6b0:	60b9      	str	r1, [r7, #8]
 800f6b2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f6b8:	f3ef 8305 	mrs	r3, IPSR
 800f6bc:	61bb      	str	r3, [r7, #24]
  return(result);
 800f6be:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	f040 8087 	bne.w	800f7d4 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f6c6:	f3ef 8310 	mrs	r3, PRIMASK
 800f6ca:	617b      	str	r3, [r7, #20]
  return(result);
 800f6cc:	697b      	ldr	r3, [r7, #20]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d105      	bne.n	800f6de <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f6d2:	f3ef 8311 	mrs	r3, BASEPRI
 800f6d6:	613b      	str	r3, [r7, #16]
  return(result);
 800f6d8:	693b      	ldr	r3, [r7, #16]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d003      	beq.n	800f6e6 <osSemaphoreNew+0x3e>
 800f6de:	4b40      	ldr	r3, [pc, #256]	; (800f7e0 <osSemaphoreNew+0x138>)
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	2b02      	cmp	r3, #2
 800f6e4:	d076      	beq.n	800f7d4 <osSemaphoreNew+0x12c>
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d073      	beq.n	800f7d4 <osSemaphoreNew+0x12c>
 800f6ec:	68ba      	ldr	r2, [r7, #8]
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	429a      	cmp	r2, r3
 800f6f2:	d86f      	bhi.n	800f7d4 <osSemaphoreNew+0x12c>
    mem = -1;
 800f6f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f6f8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d015      	beq.n	800f72c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	689b      	ldr	r3, [r3, #8]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d006      	beq.n	800f716 <osSemaphoreNew+0x6e>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	68db      	ldr	r3, [r3, #12]
 800f70c:	2b4f      	cmp	r3, #79	; 0x4f
 800f70e:	d902      	bls.n	800f716 <osSemaphoreNew+0x6e>
        mem = 1;
 800f710:	2301      	movs	r3, #1
 800f712:	623b      	str	r3, [r7, #32]
 800f714:	e00c      	b.n	800f730 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	689b      	ldr	r3, [r3, #8]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d108      	bne.n	800f730 <osSemaphoreNew+0x88>
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	68db      	ldr	r3, [r3, #12]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d104      	bne.n	800f730 <osSemaphoreNew+0x88>
          mem = 0;
 800f726:	2300      	movs	r3, #0
 800f728:	623b      	str	r3, [r7, #32]
 800f72a:	e001      	b.n	800f730 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800f72c:	2300      	movs	r3, #0
 800f72e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800f730:	6a3b      	ldr	r3, [r7, #32]
 800f732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f736:	d04d      	beq.n	800f7d4 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	2b01      	cmp	r3, #1
 800f73c:	d129      	bne.n	800f792 <osSemaphoreNew+0xea>
        if (mem == 1) {
 800f73e:	6a3b      	ldr	r3, [r7, #32]
 800f740:	2b01      	cmp	r3, #1
 800f742:	d10b      	bne.n	800f75c <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	689a      	ldr	r2, [r3, #8]
 800f748:	2303      	movs	r3, #3
 800f74a:	9300      	str	r3, [sp, #0]
 800f74c:	4613      	mov	r3, r2
 800f74e:	2200      	movs	r2, #0
 800f750:	2100      	movs	r1, #0
 800f752:	2001      	movs	r0, #1
 800f754:	f000 ffd8 	bl	8010708 <xQueueGenericCreateStatic>
 800f758:	6278      	str	r0, [r7, #36]	; 0x24
 800f75a:	e005      	b.n	800f768 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800f75c:	2203      	movs	r2, #3
 800f75e:	2100      	movs	r1, #0
 800f760:	2001      	movs	r0, #1
 800f762:	f001 f844 	bl	80107ee <xQueueGenericCreate>
 800f766:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d022      	beq.n	800f7b4 <osSemaphoreNew+0x10c>
 800f76e:	68bb      	ldr	r3, [r7, #8]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d01f      	beq.n	800f7b4 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f774:	2300      	movs	r3, #0
 800f776:	2200      	movs	r2, #0
 800f778:	2100      	movs	r1, #0
 800f77a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f77c:	f001 f9b4 	bl	8010ae8 <xQueueGenericSend>
 800f780:	4603      	mov	r3, r0
 800f782:	2b01      	cmp	r3, #1
 800f784:	d016      	beq.n	800f7b4 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800f786:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f788:	f001 fe27 	bl	80113da <vQueueDelete>
            hSemaphore = NULL;
 800f78c:	2300      	movs	r3, #0
 800f78e:	627b      	str	r3, [r7, #36]	; 0x24
 800f790:	e010      	b.n	800f7b4 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800f792:	6a3b      	ldr	r3, [r7, #32]
 800f794:	2b01      	cmp	r3, #1
 800f796:	d108      	bne.n	800f7aa <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	689b      	ldr	r3, [r3, #8]
 800f79c:	461a      	mov	r2, r3
 800f79e:	68b9      	ldr	r1, [r7, #8]
 800f7a0:	68f8      	ldr	r0, [r7, #12]
 800f7a2:	f001 f93b 	bl	8010a1c <xQueueCreateCountingSemaphoreStatic>
 800f7a6:	6278      	str	r0, [r7, #36]	; 0x24
 800f7a8:	e004      	b.n	800f7b4 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f7aa:	68b9      	ldr	r1, [r7, #8]
 800f7ac:	68f8      	ldr	r0, [r7, #12]
 800f7ae:	f001 f96a 	bl	8010a86 <xQueueCreateCountingSemaphore>
 800f7b2:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d00c      	beq.n	800f7d4 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d003      	beq.n	800f7c8 <osSemaphoreNew+0x120>
          name = attr->name;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	61fb      	str	r3, [r7, #28]
 800f7c6:	e001      	b.n	800f7cc <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f7cc:	69f9      	ldr	r1, [r7, #28]
 800f7ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f7d0:	f001 ff4e 	bl	8011670 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3728      	adds	r7, #40	; 0x28
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}
 800f7de:	bf00      	nop
 800f7e0:	20001434 	.word	0x20001434

0800f7e4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b088      	sub	sp, #32
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
 800f7ec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800f7f6:	69bb      	ldr	r3, [r7, #24]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d103      	bne.n	800f804 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f7fc:	f06f 0303 	mvn.w	r3, #3
 800f800:	61fb      	str	r3, [r7, #28]
 800f802:	e04b      	b.n	800f89c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f804:	f3ef 8305 	mrs	r3, IPSR
 800f808:	617b      	str	r3, [r7, #20]
  return(result);
 800f80a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d10f      	bne.n	800f830 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f810:	f3ef 8310 	mrs	r3, PRIMASK
 800f814:	613b      	str	r3, [r7, #16]
  return(result);
 800f816:	693b      	ldr	r3, [r7, #16]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d105      	bne.n	800f828 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f81c:	f3ef 8311 	mrs	r3, BASEPRI
 800f820:	60fb      	str	r3, [r7, #12]
  return(result);
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d026      	beq.n	800f876 <osSemaphoreAcquire+0x92>
 800f828:	4b1f      	ldr	r3, [pc, #124]	; (800f8a8 <osSemaphoreAcquire+0xc4>)
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	2b02      	cmp	r3, #2
 800f82e:	d122      	bne.n	800f876 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d003      	beq.n	800f83e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800f836:	f06f 0303 	mvn.w	r3, #3
 800f83a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800f83c:	e02d      	b.n	800f89a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800f83e:	2300      	movs	r3, #0
 800f840:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f842:	f107 0308 	add.w	r3, r7, #8
 800f846:	461a      	mov	r2, r3
 800f848:	2100      	movs	r1, #0
 800f84a:	69b8      	ldr	r0, [r7, #24]
 800f84c:	f001 fd48 	bl	80112e0 <xQueueReceiveFromISR>
 800f850:	4603      	mov	r3, r0
 800f852:	2b01      	cmp	r3, #1
 800f854:	d003      	beq.n	800f85e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800f856:	f06f 0302 	mvn.w	r3, #2
 800f85a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800f85c:	e01d      	b.n	800f89a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d01a      	beq.n	800f89a <osSemaphoreAcquire+0xb6>
 800f864:	4b11      	ldr	r3, [pc, #68]	; (800f8ac <osSemaphoreAcquire+0xc8>)
 800f866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f86a:	601a      	str	r2, [r3, #0]
 800f86c:	f3bf 8f4f 	dsb	sy
 800f870:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800f874:	e011      	b.n	800f89a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f876:	6839      	ldr	r1, [r7, #0]
 800f878:	69b8      	ldr	r0, [r7, #24]
 800f87a:	f001 fc29 	bl	80110d0 <xQueueSemaphoreTake>
 800f87e:	4603      	mov	r3, r0
 800f880:	2b01      	cmp	r3, #1
 800f882:	d00b      	beq.n	800f89c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d003      	beq.n	800f892 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800f88a:	f06f 0301 	mvn.w	r3, #1
 800f88e:	61fb      	str	r3, [r7, #28]
 800f890:	e004      	b.n	800f89c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800f892:	f06f 0302 	mvn.w	r3, #2
 800f896:	61fb      	str	r3, [r7, #28]
 800f898:	e000      	b.n	800f89c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800f89a:	bf00      	nop
      }
    }
  }

  return (stat);
 800f89c:	69fb      	ldr	r3, [r7, #28]
}
 800f89e:	4618      	mov	r0, r3
 800f8a0:	3720      	adds	r7, #32
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	bd80      	pop	{r7, pc}
 800f8a6:	bf00      	nop
 800f8a8:	20001434 	.word	0x20001434
 800f8ac:	e000ed04 	.word	0xe000ed04

0800f8b0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b088      	sub	sp, #32
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f8bc:	2300      	movs	r3, #0
 800f8be:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800f8c0:	69bb      	ldr	r3, [r7, #24]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d103      	bne.n	800f8ce <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f8c6:	f06f 0303 	mvn.w	r3, #3
 800f8ca:	61fb      	str	r3, [r7, #28]
 800f8cc:	e03e      	b.n	800f94c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f8ce:	f3ef 8305 	mrs	r3, IPSR
 800f8d2:	617b      	str	r3, [r7, #20]
  return(result);
 800f8d4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d10f      	bne.n	800f8fa <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f8da:	f3ef 8310 	mrs	r3, PRIMASK
 800f8de:	613b      	str	r3, [r7, #16]
  return(result);
 800f8e0:	693b      	ldr	r3, [r7, #16]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d105      	bne.n	800f8f2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f8e6:	f3ef 8311 	mrs	r3, BASEPRI
 800f8ea:	60fb      	str	r3, [r7, #12]
  return(result);
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d01e      	beq.n	800f930 <osSemaphoreRelease+0x80>
 800f8f2:	4b19      	ldr	r3, [pc, #100]	; (800f958 <osSemaphoreRelease+0xa8>)
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	2b02      	cmp	r3, #2
 800f8f8:	d11a      	bne.n	800f930 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f8fe:	f107 0308 	add.w	r3, r7, #8
 800f902:	4619      	mov	r1, r3
 800f904:	69b8      	ldr	r0, [r7, #24]
 800f906:	f001 fa7d 	bl	8010e04 <xQueueGiveFromISR>
 800f90a:	4603      	mov	r3, r0
 800f90c:	2b01      	cmp	r3, #1
 800f90e:	d003      	beq.n	800f918 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800f910:	f06f 0302 	mvn.w	r3, #2
 800f914:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f916:	e018      	b.n	800f94a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d015      	beq.n	800f94a <osSemaphoreRelease+0x9a>
 800f91e:	4b0f      	ldr	r3, [pc, #60]	; (800f95c <osSemaphoreRelease+0xac>)
 800f920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f924:	601a      	str	r2, [r3, #0]
 800f926:	f3bf 8f4f 	dsb	sy
 800f92a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f92e:	e00c      	b.n	800f94a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f930:	2300      	movs	r3, #0
 800f932:	2200      	movs	r2, #0
 800f934:	2100      	movs	r1, #0
 800f936:	69b8      	ldr	r0, [r7, #24]
 800f938:	f001 f8d6 	bl	8010ae8 <xQueueGenericSend>
 800f93c:	4603      	mov	r3, r0
 800f93e:	2b01      	cmp	r3, #1
 800f940:	d004      	beq.n	800f94c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800f942:	f06f 0302 	mvn.w	r3, #2
 800f946:	61fb      	str	r3, [r7, #28]
 800f948:	e000      	b.n	800f94c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f94a:	bf00      	nop
    }
  }

  return (stat);
 800f94c:	69fb      	ldr	r3, [r7, #28]
}
 800f94e:	4618      	mov	r0, r3
 800f950:	3720      	adds	r7, #32
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}
 800f956:	bf00      	nop
 800f958:	20001434 	.word	0x20001434
 800f95c:	e000ed04 	.word	0xe000ed04

0800f960 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f960:	b580      	push	{r7, lr}
 800f962:	b08c      	sub	sp, #48	; 0x30
 800f964:	af02      	add	r7, sp, #8
 800f966:	60f8      	str	r0, [r7, #12]
 800f968:	60b9      	str	r1, [r7, #8]
 800f96a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f96c:	2300      	movs	r3, #0
 800f96e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f970:	f3ef 8305 	mrs	r3, IPSR
 800f974:	61bb      	str	r3, [r7, #24]
  return(result);
 800f976:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d170      	bne.n	800fa5e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f97c:	f3ef 8310 	mrs	r3, PRIMASK
 800f980:	617b      	str	r3, [r7, #20]
  return(result);
 800f982:	697b      	ldr	r3, [r7, #20]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d105      	bne.n	800f994 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f988:	f3ef 8311 	mrs	r3, BASEPRI
 800f98c:	613b      	str	r3, [r7, #16]
  return(result);
 800f98e:	693b      	ldr	r3, [r7, #16]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d003      	beq.n	800f99c <osMessageQueueNew+0x3c>
 800f994:	4b34      	ldr	r3, [pc, #208]	; (800fa68 <osMessageQueueNew+0x108>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	2b02      	cmp	r3, #2
 800f99a:	d060      	beq.n	800fa5e <osMessageQueueNew+0xfe>
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d05d      	beq.n	800fa5e <osMessageQueueNew+0xfe>
 800f9a2:	68bb      	ldr	r3, [r7, #8]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d05a      	beq.n	800fa5e <osMessageQueueNew+0xfe>
    mem = -1;
 800f9a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f9ac:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d029      	beq.n	800fa08 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	689b      	ldr	r3, [r3, #8]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d012      	beq.n	800f9e2 <osMessageQueueNew+0x82>
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	68db      	ldr	r3, [r3, #12]
 800f9c0:	2b4f      	cmp	r3, #79	; 0x4f
 800f9c2:	d90e      	bls.n	800f9e2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d00a      	beq.n	800f9e2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	695a      	ldr	r2, [r3, #20]
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	68b9      	ldr	r1, [r7, #8]
 800f9d4:	fb01 f303 	mul.w	r3, r1, r3
 800f9d8:	429a      	cmp	r2, r3
 800f9da:	d302      	bcc.n	800f9e2 <osMessageQueueNew+0x82>
        mem = 1;
 800f9dc:	2301      	movs	r3, #1
 800f9de:	623b      	str	r3, [r7, #32]
 800f9e0:	e014      	b.n	800fa0c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	689b      	ldr	r3, [r3, #8]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d110      	bne.n	800fa0c <osMessageQueueNew+0xac>
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	68db      	ldr	r3, [r3, #12]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d10c      	bne.n	800fa0c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d108      	bne.n	800fa0c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	695b      	ldr	r3, [r3, #20]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d104      	bne.n	800fa0c <osMessageQueueNew+0xac>
          mem = 0;
 800fa02:	2300      	movs	r3, #0
 800fa04:	623b      	str	r3, [r7, #32]
 800fa06:	e001      	b.n	800fa0c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800fa0c:	6a3b      	ldr	r3, [r7, #32]
 800fa0e:	2b01      	cmp	r3, #1
 800fa10:	d10c      	bne.n	800fa2c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	691a      	ldr	r2, [r3, #16]
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	6899      	ldr	r1, [r3, #8]
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	9300      	str	r3, [sp, #0]
 800fa1e:	460b      	mov	r3, r1
 800fa20:	68b9      	ldr	r1, [r7, #8]
 800fa22:	68f8      	ldr	r0, [r7, #12]
 800fa24:	f000 fe70 	bl	8010708 <xQueueGenericCreateStatic>
 800fa28:	6278      	str	r0, [r7, #36]	; 0x24
 800fa2a:	e008      	b.n	800fa3e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800fa2c:	6a3b      	ldr	r3, [r7, #32]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d105      	bne.n	800fa3e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800fa32:	2200      	movs	r2, #0
 800fa34:	68b9      	ldr	r1, [r7, #8]
 800fa36:	68f8      	ldr	r0, [r7, #12]
 800fa38:	f000 fed9 	bl	80107ee <xQueueGenericCreate>
 800fa3c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800fa3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d00c      	beq.n	800fa5e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d003      	beq.n	800fa52 <osMessageQueueNew+0xf2>
        name = attr->name;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	61fb      	str	r3, [r7, #28]
 800fa50:	e001      	b.n	800fa56 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800fa52:	2300      	movs	r3, #0
 800fa54:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800fa56:	69f9      	ldr	r1, [r7, #28]
 800fa58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa5a:	f001 fe09 	bl	8011670 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800fa5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	3728      	adds	r7, #40	; 0x28
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}
 800fa68:	20001434 	.word	0x20001434

0800fa6c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b08a      	sub	sp, #40	; 0x28
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	60f8      	str	r0, [r7, #12]
 800fa74:	60b9      	str	r1, [r7, #8]
 800fa76:	603b      	str	r3, [r7, #0]
 800fa78:	4613      	mov	r3, r2
 800fa7a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800fa80:	2300      	movs	r3, #0
 800fa82:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa84:	f3ef 8305 	mrs	r3, IPSR
 800fa88:	61fb      	str	r3, [r7, #28]
  return(result);
 800fa8a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d10f      	bne.n	800fab0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fa90:	f3ef 8310 	mrs	r3, PRIMASK
 800fa94:	61bb      	str	r3, [r7, #24]
  return(result);
 800fa96:	69bb      	ldr	r3, [r7, #24]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d105      	bne.n	800faa8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fa9c:	f3ef 8311 	mrs	r3, BASEPRI
 800faa0:	617b      	str	r3, [r7, #20]
  return(result);
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d02c      	beq.n	800fb02 <osMessageQueuePut+0x96>
 800faa8:	4b28      	ldr	r3, [pc, #160]	; (800fb4c <osMessageQueuePut+0xe0>)
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	2b02      	cmp	r3, #2
 800faae:	d128      	bne.n	800fb02 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fab0:	6a3b      	ldr	r3, [r7, #32]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d005      	beq.n	800fac2 <osMessageQueuePut+0x56>
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d002      	beq.n	800fac2 <osMessageQueuePut+0x56>
 800fabc:	683b      	ldr	r3, [r7, #0]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d003      	beq.n	800faca <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800fac2:	f06f 0303 	mvn.w	r3, #3
 800fac6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fac8:	e039      	b.n	800fb3e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800faca:	2300      	movs	r3, #0
 800facc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800face:	f107 0210 	add.w	r2, r7, #16
 800fad2:	2300      	movs	r3, #0
 800fad4:	68b9      	ldr	r1, [r7, #8]
 800fad6:	6a38      	ldr	r0, [r7, #32]
 800fad8:	f001 f900 	bl	8010cdc <xQueueGenericSendFromISR>
 800fadc:	4603      	mov	r3, r0
 800fade:	2b01      	cmp	r3, #1
 800fae0:	d003      	beq.n	800faea <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800fae2:	f06f 0302 	mvn.w	r3, #2
 800fae6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fae8:	e029      	b.n	800fb3e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800faea:	693b      	ldr	r3, [r7, #16]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d026      	beq.n	800fb3e <osMessageQueuePut+0xd2>
 800faf0:	4b17      	ldr	r3, [pc, #92]	; (800fb50 <osMessageQueuePut+0xe4>)
 800faf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800faf6:	601a      	str	r2, [r3, #0]
 800faf8:	f3bf 8f4f 	dsb	sy
 800fafc:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fb00:	e01d      	b.n	800fb3e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fb02:	6a3b      	ldr	r3, [r7, #32]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d002      	beq.n	800fb0e <osMessageQueuePut+0xa2>
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d103      	bne.n	800fb16 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800fb0e:	f06f 0303 	mvn.w	r3, #3
 800fb12:	627b      	str	r3, [r7, #36]	; 0x24
 800fb14:	e014      	b.n	800fb40 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fb16:	2300      	movs	r3, #0
 800fb18:	683a      	ldr	r2, [r7, #0]
 800fb1a:	68b9      	ldr	r1, [r7, #8]
 800fb1c:	6a38      	ldr	r0, [r7, #32]
 800fb1e:	f000 ffe3 	bl	8010ae8 <xQueueGenericSend>
 800fb22:	4603      	mov	r3, r0
 800fb24:	2b01      	cmp	r3, #1
 800fb26:	d00b      	beq.n	800fb40 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d003      	beq.n	800fb36 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800fb2e:	f06f 0301 	mvn.w	r3, #1
 800fb32:	627b      	str	r3, [r7, #36]	; 0x24
 800fb34:	e004      	b.n	800fb40 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800fb36:	f06f 0302 	mvn.w	r3, #2
 800fb3a:	627b      	str	r3, [r7, #36]	; 0x24
 800fb3c:	e000      	b.n	800fb40 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fb3e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800fb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fb42:	4618      	mov	r0, r3
 800fb44:	3728      	adds	r7, #40	; 0x28
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}
 800fb4a:	bf00      	nop
 800fb4c:	20001434 	.word	0x20001434
 800fb50:	e000ed04 	.word	0xe000ed04

0800fb54 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b08a      	sub	sp, #40	; 0x28
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	60f8      	str	r0, [r7, #12]
 800fb5c:	60b9      	str	r1, [r7, #8]
 800fb5e:	607a      	str	r2, [r7, #4]
 800fb60:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800fb66:	2300      	movs	r3, #0
 800fb68:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb6a:	f3ef 8305 	mrs	r3, IPSR
 800fb6e:	61fb      	str	r3, [r7, #28]
  return(result);
 800fb70:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d10f      	bne.n	800fb96 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fb76:	f3ef 8310 	mrs	r3, PRIMASK
 800fb7a:	61bb      	str	r3, [r7, #24]
  return(result);
 800fb7c:	69bb      	ldr	r3, [r7, #24]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d105      	bne.n	800fb8e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fb82:	f3ef 8311 	mrs	r3, BASEPRI
 800fb86:	617b      	str	r3, [r7, #20]
  return(result);
 800fb88:	697b      	ldr	r3, [r7, #20]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d02c      	beq.n	800fbe8 <osMessageQueueGet+0x94>
 800fb8e:	4b28      	ldr	r3, [pc, #160]	; (800fc30 <osMessageQueueGet+0xdc>)
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	2b02      	cmp	r3, #2
 800fb94:	d128      	bne.n	800fbe8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fb96:	6a3b      	ldr	r3, [r7, #32]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d005      	beq.n	800fba8 <osMessageQueueGet+0x54>
 800fb9c:	68bb      	ldr	r3, [r7, #8]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d002      	beq.n	800fba8 <osMessageQueueGet+0x54>
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d003      	beq.n	800fbb0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800fba8:	f06f 0303 	mvn.w	r3, #3
 800fbac:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fbae:	e038      	b.n	800fc22 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800fbb4:	f107 0310 	add.w	r3, r7, #16
 800fbb8:	461a      	mov	r2, r3
 800fbba:	68b9      	ldr	r1, [r7, #8]
 800fbbc:	6a38      	ldr	r0, [r7, #32]
 800fbbe:	f001 fb8f 	bl	80112e0 <xQueueReceiveFromISR>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	2b01      	cmp	r3, #1
 800fbc6:	d003      	beq.n	800fbd0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800fbc8:	f06f 0302 	mvn.w	r3, #2
 800fbcc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fbce:	e028      	b.n	800fc22 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800fbd0:	693b      	ldr	r3, [r7, #16]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d025      	beq.n	800fc22 <osMessageQueueGet+0xce>
 800fbd6:	4b17      	ldr	r3, [pc, #92]	; (800fc34 <osMessageQueueGet+0xe0>)
 800fbd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbdc:	601a      	str	r2, [r3, #0]
 800fbde:	f3bf 8f4f 	dsb	sy
 800fbe2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fbe6:	e01c      	b.n	800fc22 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fbe8:	6a3b      	ldr	r3, [r7, #32]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d002      	beq.n	800fbf4 <osMessageQueueGet+0xa0>
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d103      	bne.n	800fbfc <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800fbf4:	f06f 0303 	mvn.w	r3, #3
 800fbf8:	627b      	str	r3, [r7, #36]	; 0x24
 800fbfa:	e013      	b.n	800fc24 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fbfc:	683a      	ldr	r2, [r7, #0]
 800fbfe:	68b9      	ldr	r1, [r7, #8]
 800fc00:	6a38      	ldr	r0, [r7, #32]
 800fc02:	f001 f989 	bl	8010f18 <xQueueReceive>
 800fc06:	4603      	mov	r3, r0
 800fc08:	2b01      	cmp	r3, #1
 800fc0a:	d00b      	beq.n	800fc24 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d003      	beq.n	800fc1a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800fc12:	f06f 0301 	mvn.w	r3, #1
 800fc16:	627b      	str	r3, [r7, #36]	; 0x24
 800fc18:	e004      	b.n	800fc24 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800fc1a:	f06f 0302 	mvn.w	r3, #2
 800fc1e:	627b      	str	r3, [r7, #36]	; 0x24
 800fc20:	e000      	b.n	800fc24 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fc22:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800fc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fc26:	4618      	mov	r0, r3
 800fc28:	3728      	adds	r7, #40	; 0x28
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}
 800fc2e:	bf00      	nop
 800fc30:	20001434 	.word	0x20001434
 800fc34:	e000ed04 	.word	0xe000ed04

0800fc38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800fc38:	b480      	push	{r7}
 800fc3a:	b085      	sub	sp, #20
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	60f8      	str	r0, [r7, #12]
 800fc40:	60b9      	str	r1, [r7, #8]
 800fc42:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	4a07      	ldr	r2, [pc, #28]	; (800fc64 <vApplicationGetIdleTaskMemory+0x2c>)
 800fc48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800fc4a:	68bb      	ldr	r3, [r7, #8]
 800fc4c:	4a06      	ldr	r2, [pc, #24]	; (800fc68 <vApplicationGetIdleTaskMemory+0x30>)
 800fc4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2280      	movs	r2, #128	; 0x80
 800fc54:	601a      	str	r2, [r3, #0]
}
 800fc56:	bf00      	nop
 800fc58:	3714      	adds	r7, #20
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc60:	4770      	bx	lr
 800fc62:	bf00      	nop
 800fc64:	20001438 	.word	0x20001438
 800fc68:	20001494 	.word	0x20001494

0800fc6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800fc6c:	b480      	push	{r7}
 800fc6e:	b085      	sub	sp, #20
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	60f8      	str	r0, [r7, #12]
 800fc74:	60b9      	str	r1, [r7, #8]
 800fc76:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	4a07      	ldr	r2, [pc, #28]	; (800fc98 <vApplicationGetTimerTaskMemory+0x2c>)
 800fc7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800fc7e:	68bb      	ldr	r3, [r7, #8]
 800fc80:	4a06      	ldr	r2, [pc, #24]	; (800fc9c <vApplicationGetTimerTaskMemory+0x30>)
 800fc82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fc8a:	601a      	str	r2, [r3, #0]
}
 800fc8c:	bf00      	nop
 800fc8e:	3714      	adds	r7, #20
 800fc90:	46bd      	mov	sp, r7
 800fc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc96:	4770      	bx	lr
 800fc98:	20001694 	.word	0x20001694
 800fc9c:	200016f0 	.word	0x200016f0

0800fca0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fca0:	b480      	push	{r7}
 800fca2:	b085      	sub	sp, #20
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	60f8      	str	r0, [r7, #12]
 800fca8:	60b9      	str	r1, [r7, #8]
 800fcaa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	3b04      	subs	r3, #4
 800fcb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fcb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	3b04      	subs	r3, #4
 800fcbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fcc0:	68bb      	ldr	r3, [r7, #8]
 800fcc2:	f023 0201 	bic.w	r2, r3, #1
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	3b04      	subs	r3, #4
 800fcce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fcd0:	4a0c      	ldr	r2, [pc, #48]	; (800fd04 <pxPortInitialiseStack+0x64>)
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	3b14      	subs	r3, #20
 800fcda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fcdc:	687a      	ldr	r2, [r7, #4]
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	3b04      	subs	r3, #4
 800fce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	f06f 0202 	mvn.w	r2, #2
 800fcee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	3b20      	subs	r3, #32
 800fcf4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
}
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3714      	adds	r7, #20
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd02:	4770      	bx	lr
 800fd04:	0800fd09 	.word	0x0800fd09

0800fd08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fd08:	b480      	push	{r7}
 800fd0a:	b085      	sub	sp, #20
 800fd0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fd0e:	2300      	movs	r3, #0
 800fd10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fd12:	4b11      	ldr	r3, [pc, #68]	; (800fd58 <prvTaskExitError+0x50>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd1a:	d009      	beq.n	800fd30 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fd1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd20:	f383 8811 	msr	BASEPRI, r3
 800fd24:	f3bf 8f6f 	isb	sy
 800fd28:	f3bf 8f4f 	dsb	sy
 800fd2c:	60fb      	str	r3, [r7, #12]
 800fd2e:	e7fe      	b.n	800fd2e <prvTaskExitError+0x26>
 800fd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd34:	f383 8811 	msr	BASEPRI, r3
 800fd38:	f3bf 8f6f 	isb	sy
 800fd3c:	f3bf 8f4f 	dsb	sy
 800fd40:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fd42:	bf00      	nop
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d0fc      	beq.n	800fd44 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fd4a:	bf00      	nop
 800fd4c:	3714      	adds	r7, #20
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd54:	4770      	bx	lr
 800fd56:	bf00      	nop
 800fd58:	20000020 	.word	0x20000020
 800fd5c:	00000000 	.word	0x00000000

0800fd60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fd60:	4b07      	ldr	r3, [pc, #28]	; (800fd80 <pxCurrentTCBConst2>)
 800fd62:	6819      	ldr	r1, [r3, #0]
 800fd64:	6808      	ldr	r0, [r1, #0]
 800fd66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd6a:	f380 8809 	msr	PSP, r0
 800fd6e:	f3bf 8f6f 	isb	sy
 800fd72:	f04f 0000 	mov.w	r0, #0
 800fd76:	f380 8811 	msr	BASEPRI, r0
 800fd7a:	4770      	bx	lr
 800fd7c:	f3af 8000 	nop.w

0800fd80 <pxCurrentTCBConst2>:
 800fd80:	2002da30 	.word	0x2002da30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fd84:	bf00      	nop
 800fd86:	bf00      	nop

0800fd88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fd88:	4808      	ldr	r0, [pc, #32]	; (800fdac <prvPortStartFirstTask+0x24>)
 800fd8a:	6800      	ldr	r0, [r0, #0]
 800fd8c:	6800      	ldr	r0, [r0, #0]
 800fd8e:	f380 8808 	msr	MSP, r0
 800fd92:	f04f 0000 	mov.w	r0, #0
 800fd96:	f380 8814 	msr	CONTROL, r0
 800fd9a:	b662      	cpsie	i
 800fd9c:	b661      	cpsie	f
 800fd9e:	f3bf 8f4f 	dsb	sy
 800fda2:	f3bf 8f6f 	isb	sy
 800fda6:	df00      	svc	0
 800fda8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fdaa:	bf00      	nop
 800fdac:	e000ed08 	.word	0xe000ed08

0800fdb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b086      	sub	sp, #24
 800fdb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fdb6:	4b44      	ldr	r3, [pc, #272]	; (800fec8 <xPortStartScheduler+0x118>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	4a44      	ldr	r2, [pc, #272]	; (800fecc <xPortStartScheduler+0x11c>)
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	d109      	bne.n	800fdd4 <xPortStartScheduler+0x24>
 800fdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc4:	f383 8811 	msr	BASEPRI, r3
 800fdc8:	f3bf 8f6f 	isb	sy
 800fdcc:	f3bf 8f4f 	dsb	sy
 800fdd0:	613b      	str	r3, [r7, #16]
 800fdd2:	e7fe      	b.n	800fdd2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fdd4:	4b3c      	ldr	r3, [pc, #240]	; (800fec8 <xPortStartScheduler+0x118>)
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	4a3d      	ldr	r2, [pc, #244]	; (800fed0 <xPortStartScheduler+0x120>)
 800fdda:	4293      	cmp	r3, r2
 800fddc:	d109      	bne.n	800fdf2 <xPortStartScheduler+0x42>
 800fdde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fde2:	f383 8811 	msr	BASEPRI, r3
 800fde6:	f3bf 8f6f 	isb	sy
 800fdea:	f3bf 8f4f 	dsb	sy
 800fdee:	60fb      	str	r3, [r7, #12]
 800fdf0:	e7fe      	b.n	800fdf0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fdf2:	4b38      	ldr	r3, [pc, #224]	; (800fed4 <xPortStartScheduler+0x124>)
 800fdf4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	781b      	ldrb	r3, [r3, #0]
 800fdfa:	b2db      	uxtb	r3, r3
 800fdfc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fdfe:	697b      	ldr	r3, [r7, #20]
 800fe00:	22ff      	movs	r2, #255	; 0xff
 800fe02:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	781b      	ldrb	r3, [r3, #0]
 800fe08:	b2db      	uxtb	r3, r3
 800fe0a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fe0c:	78fb      	ldrb	r3, [r7, #3]
 800fe0e:	b2db      	uxtb	r3, r3
 800fe10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fe14:	b2da      	uxtb	r2, r3
 800fe16:	4b30      	ldr	r3, [pc, #192]	; (800fed8 <xPortStartScheduler+0x128>)
 800fe18:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fe1a:	4b30      	ldr	r3, [pc, #192]	; (800fedc <xPortStartScheduler+0x12c>)
 800fe1c:	2207      	movs	r2, #7
 800fe1e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fe20:	e009      	b.n	800fe36 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800fe22:	4b2e      	ldr	r3, [pc, #184]	; (800fedc <xPortStartScheduler+0x12c>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	3b01      	subs	r3, #1
 800fe28:	4a2c      	ldr	r2, [pc, #176]	; (800fedc <xPortStartScheduler+0x12c>)
 800fe2a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fe2c:	78fb      	ldrb	r3, [r7, #3]
 800fe2e:	b2db      	uxtb	r3, r3
 800fe30:	005b      	lsls	r3, r3, #1
 800fe32:	b2db      	uxtb	r3, r3
 800fe34:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fe36:	78fb      	ldrb	r3, [r7, #3]
 800fe38:	b2db      	uxtb	r3, r3
 800fe3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe3e:	2b80      	cmp	r3, #128	; 0x80
 800fe40:	d0ef      	beq.n	800fe22 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fe42:	4b26      	ldr	r3, [pc, #152]	; (800fedc <xPortStartScheduler+0x12c>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	f1c3 0307 	rsb	r3, r3, #7
 800fe4a:	2b04      	cmp	r3, #4
 800fe4c:	d009      	beq.n	800fe62 <xPortStartScheduler+0xb2>
 800fe4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe52:	f383 8811 	msr	BASEPRI, r3
 800fe56:	f3bf 8f6f 	isb	sy
 800fe5a:	f3bf 8f4f 	dsb	sy
 800fe5e:	60bb      	str	r3, [r7, #8]
 800fe60:	e7fe      	b.n	800fe60 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fe62:	4b1e      	ldr	r3, [pc, #120]	; (800fedc <xPortStartScheduler+0x12c>)
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	021b      	lsls	r3, r3, #8
 800fe68:	4a1c      	ldr	r2, [pc, #112]	; (800fedc <xPortStartScheduler+0x12c>)
 800fe6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fe6c:	4b1b      	ldr	r3, [pc, #108]	; (800fedc <xPortStartScheduler+0x12c>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fe74:	4a19      	ldr	r2, [pc, #100]	; (800fedc <xPortStartScheduler+0x12c>)
 800fe76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	b2da      	uxtb	r2, r3
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fe80:	4b17      	ldr	r3, [pc, #92]	; (800fee0 <xPortStartScheduler+0x130>)
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	4a16      	ldr	r2, [pc, #88]	; (800fee0 <xPortStartScheduler+0x130>)
 800fe86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fe8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fe8c:	4b14      	ldr	r3, [pc, #80]	; (800fee0 <xPortStartScheduler+0x130>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	4a13      	ldr	r2, [pc, #76]	; (800fee0 <xPortStartScheduler+0x130>)
 800fe92:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fe96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fe98:	f000 f8d6 	bl	8010048 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fe9c:	4b11      	ldr	r3, [pc, #68]	; (800fee4 <xPortStartScheduler+0x134>)
 800fe9e:	2200      	movs	r2, #0
 800fea0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fea2:	f000 f8f5 	bl	8010090 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fea6:	4b10      	ldr	r3, [pc, #64]	; (800fee8 <xPortStartScheduler+0x138>)
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	4a0f      	ldr	r2, [pc, #60]	; (800fee8 <xPortStartScheduler+0x138>)
 800feac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800feb0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800feb2:	f7ff ff69 	bl	800fd88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800feb6:	f002 f841 	bl	8011f3c <vTaskSwitchContext>
	prvTaskExitError();
 800feba:	f7ff ff25 	bl	800fd08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800febe:	2300      	movs	r3, #0
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	3718      	adds	r7, #24
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}
 800fec8:	e000ed00 	.word	0xe000ed00
 800fecc:	410fc271 	.word	0x410fc271
 800fed0:	410fc270 	.word	0x410fc270
 800fed4:	e000e400 	.word	0xe000e400
 800fed8:	20001af0 	.word	0x20001af0
 800fedc:	20001af4 	.word	0x20001af4
 800fee0:	e000ed20 	.word	0xe000ed20
 800fee4:	20000020 	.word	0x20000020
 800fee8:	e000ef34 	.word	0xe000ef34

0800feec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800feec:	b480      	push	{r7}
 800feee:	b083      	sub	sp, #12
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fef6:	f383 8811 	msr	BASEPRI, r3
 800fefa:	f3bf 8f6f 	isb	sy
 800fefe:	f3bf 8f4f 	dsb	sy
 800ff02:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ff04:	4b0e      	ldr	r3, [pc, #56]	; (800ff40 <vPortEnterCritical+0x54>)
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	3301      	adds	r3, #1
 800ff0a:	4a0d      	ldr	r2, [pc, #52]	; (800ff40 <vPortEnterCritical+0x54>)
 800ff0c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ff0e:	4b0c      	ldr	r3, [pc, #48]	; (800ff40 <vPortEnterCritical+0x54>)
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	2b01      	cmp	r3, #1
 800ff14:	d10e      	bne.n	800ff34 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ff16:	4b0b      	ldr	r3, [pc, #44]	; (800ff44 <vPortEnterCritical+0x58>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	b2db      	uxtb	r3, r3
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d009      	beq.n	800ff34 <vPortEnterCritical+0x48>
 800ff20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff24:	f383 8811 	msr	BASEPRI, r3
 800ff28:	f3bf 8f6f 	isb	sy
 800ff2c:	f3bf 8f4f 	dsb	sy
 800ff30:	603b      	str	r3, [r7, #0]
 800ff32:	e7fe      	b.n	800ff32 <vPortEnterCritical+0x46>
	}
}
 800ff34:	bf00      	nop
 800ff36:	370c      	adds	r7, #12
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3e:	4770      	bx	lr
 800ff40:	20000020 	.word	0x20000020
 800ff44:	e000ed04 	.word	0xe000ed04

0800ff48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ff48:	b480      	push	{r7}
 800ff4a:	b083      	sub	sp, #12
 800ff4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ff4e:	4b11      	ldr	r3, [pc, #68]	; (800ff94 <vPortExitCritical+0x4c>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d109      	bne.n	800ff6a <vPortExitCritical+0x22>
 800ff56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff5a:	f383 8811 	msr	BASEPRI, r3
 800ff5e:	f3bf 8f6f 	isb	sy
 800ff62:	f3bf 8f4f 	dsb	sy
 800ff66:	607b      	str	r3, [r7, #4]
 800ff68:	e7fe      	b.n	800ff68 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800ff6a:	4b0a      	ldr	r3, [pc, #40]	; (800ff94 <vPortExitCritical+0x4c>)
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	3b01      	subs	r3, #1
 800ff70:	4a08      	ldr	r2, [pc, #32]	; (800ff94 <vPortExitCritical+0x4c>)
 800ff72:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ff74:	4b07      	ldr	r3, [pc, #28]	; (800ff94 <vPortExitCritical+0x4c>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d104      	bne.n	800ff86 <vPortExitCritical+0x3e>
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ff80:	683b      	ldr	r3, [r7, #0]
 800ff82:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ff86:	bf00      	nop
 800ff88:	370c      	adds	r7, #12
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff90:	4770      	bx	lr
 800ff92:	bf00      	nop
 800ff94:	20000020 	.word	0x20000020
	...

0800ffa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ffa0:	f3ef 8009 	mrs	r0, PSP
 800ffa4:	f3bf 8f6f 	isb	sy
 800ffa8:	4b15      	ldr	r3, [pc, #84]	; (8010000 <pxCurrentTCBConst>)
 800ffaa:	681a      	ldr	r2, [r3, #0]
 800ffac:	f01e 0f10 	tst.w	lr, #16
 800ffb0:	bf08      	it	eq
 800ffb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ffb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffba:	6010      	str	r0, [r2, #0]
 800ffbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ffc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ffc4:	f380 8811 	msr	BASEPRI, r0
 800ffc8:	f3bf 8f4f 	dsb	sy
 800ffcc:	f3bf 8f6f 	isb	sy
 800ffd0:	f001 ffb4 	bl	8011f3c <vTaskSwitchContext>
 800ffd4:	f04f 0000 	mov.w	r0, #0
 800ffd8:	f380 8811 	msr	BASEPRI, r0
 800ffdc:	bc09      	pop	{r0, r3}
 800ffde:	6819      	ldr	r1, [r3, #0]
 800ffe0:	6808      	ldr	r0, [r1, #0]
 800ffe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffe6:	f01e 0f10 	tst.w	lr, #16
 800ffea:	bf08      	it	eq
 800ffec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fff0:	f380 8809 	msr	PSP, r0
 800fff4:	f3bf 8f6f 	isb	sy
 800fff8:	4770      	bx	lr
 800fffa:	bf00      	nop
 800fffc:	f3af 8000 	nop.w

08010000 <pxCurrentTCBConst>:
 8010000:	2002da30 	.word	0x2002da30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010004:	bf00      	nop
 8010006:	bf00      	nop

08010008 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b082      	sub	sp, #8
 801000c:	af00      	add	r7, sp, #0
	__asm volatile
 801000e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010012:	f383 8811 	msr	BASEPRI, r3
 8010016:	f3bf 8f6f 	isb	sy
 801001a:	f3bf 8f4f 	dsb	sy
 801001e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010020:	f001 fed4 	bl	8011dcc <xTaskIncrementTick>
 8010024:	4603      	mov	r3, r0
 8010026:	2b00      	cmp	r3, #0
 8010028:	d003      	beq.n	8010032 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801002a:	4b06      	ldr	r3, [pc, #24]	; (8010044 <SysTick_Handler+0x3c>)
 801002c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010030:	601a      	str	r2, [r3, #0]
 8010032:	2300      	movs	r3, #0
 8010034:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801003c:	bf00      	nop
 801003e:	3708      	adds	r7, #8
 8010040:	46bd      	mov	sp, r7
 8010042:	bd80      	pop	{r7, pc}
 8010044:	e000ed04 	.word	0xe000ed04

08010048 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010048:	b480      	push	{r7}
 801004a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801004c:	4b0b      	ldr	r3, [pc, #44]	; (801007c <vPortSetupTimerInterrupt+0x34>)
 801004e:	2200      	movs	r2, #0
 8010050:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010052:	4b0b      	ldr	r3, [pc, #44]	; (8010080 <vPortSetupTimerInterrupt+0x38>)
 8010054:	2200      	movs	r2, #0
 8010056:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010058:	4b0a      	ldr	r3, [pc, #40]	; (8010084 <vPortSetupTimerInterrupt+0x3c>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	4a0a      	ldr	r2, [pc, #40]	; (8010088 <vPortSetupTimerInterrupt+0x40>)
 801005e:	fba2 2303 	umull	r2, r3, r2, r3
 8010062:	099b      	lsrs	r3, r3, #6
 8010064:	4a09      	ldr	r2, [pc, #36]	; (801008c <vPortSetupTimerInterrupt+0x44>)
 8010066:	3b01      	subs	r3, #1
 8010068:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801006a:	4b04      	ldr	r3, [pc, #16]	; (801007c <vPortSetupTimerInterrupt+0x34>)
 801006c:	2207      	movs	r2, #7
 801006e:	601a      	str	r2, [r3, #0]
}
 8010070:	bf00      	nop
 8010072:	46bd      	mov	sp, r7
 8010074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010078:	4770      	bx	lr
 801007a:	bf00      	nop
 801007c:	e000e010 	.word	0xe000e010
 8010080:	e000e018 	.word	0xe000e018
 8010084:	20000014 	.word	0x20000014
 8010088:	10624dd3 	.word	0x10624dd3
 801008c:	e000e014 	.word	0xe000e014

08010090 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010090:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80100a0 <vPortEnableVFP+0x10>
 8010094:	6801      	ldr	r1, [r0, #0]
 8010096:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801009a:	6001      	str	r1, [r0, #0]
 801009c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801009e:	bf00      	nop
 80100a0:	e000ed88 	.word	0xe000ed88

080100a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80100a4:	b480      	push	{r7}
 80100a6:	b085      	sub	sp, #20
 80100a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80100aa:	f3ef 8305 	mrs	r3, IPSR
 80100ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	2b0f      	cmp	r3, #15
 80100b4:	d913      	bls.n	80100de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80100b6:	4a16      	ldr	r2, [pc, #88]	; (8010110 <vPortValidateInterruptPriority+0x6c>)
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	4413      	add	r3, r2
 80100bc:	781b      	ldrb	r3, [r3, #0]
 80100be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80100c0:	4b14      	ldr	r3, [pc, #80]	; (8010114 <vPortValidateInterruptPriority+0x70>)
 80100c2:	781b      	ldrb	r3, [r3, #0]
 80100c4:	7afa      	ldrb	r2, [r7, #11]
 80100c6:	429a      	cmp	r2, r3
 80100c8:	d209      	bcs.n	80100de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80100ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ce:	f383 8811 	msr	BASEPRI, r3
 80100d2:	f3bf 8f6f 	isb	sy
 80100d6:	f3bf 8f4f 	dsb	sy
 80100da:	607b      	str	r3, [r7, #4]
 80100dc:	e7fe      	b.n	80100dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80100de:	4b0e      	ldr	r3, [pc, #56]	; (8010118 <vPortValidateInterruptPriority+0x74>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80100e6:	4b0d      	ldr	r3, [pc, #52]	; (801011c <vPortValidateInterruptPriority+0x78>)
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	429a      	cmp	r2, r3
 80100ec:	d909      	bls.n	8010102 <vPortValidateInterruptPriority+0x5e>
 80100ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100f2:	f383 8811 	msr	BASEPRI, r3
 80100f6:	f3bf 8f6f 	isb	sy
 80100fa:	f3bf 8f4f 	dsb	sy
 80100fe:	603b      	str	r3, [r7, #0]
 8010100:	e7fe      	b.n	8010100 <vPortValidateInterruptPriority+0x5c>
	}
 8010102:	bf00      	nop
 8010104:	3714      	adds	r7, #20
 8010106:	46bd      	mov	sp, r7
 8010108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010c:	4770      	bx	lr
 801010e:	bf00      	nop
 8010110:	e000e3f0 	.word	0xe000e3f0
 8010114:	20001af0 	.word	0x20001af0
 8010118:	e000ed0c 	.word	0xe000ed0c
 801011c:	20001af4 	.word	0x20001af4

08010120 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b08a      	sub	sp, #40	; 0x28
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010128:	2300      	movs	r3, #0
 801012a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801012c:	f001 fd5c 	bl	8011be8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010130:	4b57      	ldr	r3, [pc, #348]	; (8010290 <pvPortMalloc+0x170>)
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d101      	bne.n	801013c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010138:	f000 f90c 	bl	8010354 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801013c:	4b55      	ldr	r3, [pc, #340]	; (8010294 <pvPortMalloc+0x174>)
 801013e:	681a      	ldr	r2, [r3, #0]
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	4013      	ands	r3, r2
 8010144:	2b00      	cmp	r3, #0
 8010146:	f040 808c 	bne.w	8010262 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d01c      	beq.n	801018a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8010150:	2208      	movs	r2, #8
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	4413      	add	r3, r2
 8010156:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	f003 0307 	and.w	r3, r3, #7
 801015e:	2b00      	cmp	r3, #0
 8010160:	d013      	beq.n	801018a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f023 0307 	bic.w	r3, r3, #7
 8010168:	3308      	adds	r3, #8
 801016a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f003 0307 	and.w	r3, r3, #7
 8010172:	2b00      	cmp	r3, #0
 8010174:	d009      	beq.n	801018a <pvPortMalloc+0x6a>
 8010176:	f04f 0350 	mov.w	r3, #80	; 0x50
 801017a:	f383 8811 	msr	BASEPRI, r3
 801017e:	f3bf 8f6f 	isb	sy
 8010182:	f3bf 8f4f 	dsb	sy
 8010186:	617b      	str	r3, [r7, #20]
 8010188:	e7fe      	b.n	8010188 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d068      	beq.n	8010262 <pvPortMalloc+0x142>
 8010190:	4b41      	ldr	r3, [pc, #260]	; (8010298 <pvPortMalloc+0x178>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	687a      	ldr	r2, [r7, #4]
 8010196:	429a      	cmp	r2, r3
 8010198:	d863      	bhi.n	8010262 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801019a:	4b40      	ldr	r3, [pc, #256]	; (801029c <pvPortMalloc+0x17c>)
 801019c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801019e:	4b3f      	ldr	r3, [pc, #252]	; (801029c <pvPortMalloc+0x17c>)
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80101a4:	e004      	b.n	80101b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80101a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80101aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80101b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b2:	685b      	ldr	r3, [r3, #4]
 80101b4:	687a      	ldr	r2, [r7, #4]
 80101b6:	429a      	cmp	r2, r3
 80101b8:	d903      	bls.n	80101c2 <pvPortMalloc+0xa2>
 80101ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d1f1      	bne.n	80101a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80101c2:	4b33      	ldr	r3, [pc, #204]	; (8010290 <pvPortMalloc+0x170>)
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101c8:	429a      	cmp	r2, r3
 80101ca:	d04a      	beq.n	8010262 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80101cc:	6a3b      	ldr	r3, [r7, #32]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	2208      	movs	r2, #8
 80101d2:	4413      	add	r3, r2
 80101d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80101d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101d8:	681a      	ldr	r2, [r3, #0]
 80101da:	6a3b      	ldr	r3, [r7, #32]
 80101dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80101de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101e0:	685a      	ldr	r2, [r3, #4]
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	1ad2      	subs	r2, r2, r3
 80101e6:	2308      	movs	r3, #8
 80101e8:	005b      	lsls	r3, r3, #1
 80101ea:	429a      	cmp	r2, r3
 80101ec:	d91e      	bls.n	801022c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80101ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	4413      	add	r3, r2
 80101f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80101f6:	69bb      	ldr	r3, [r7, #24]
 80101f8:	f003 0307 	and.w	r3, r3, #7
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d009      	beq.n	8010214 <pvPortMalloc+0xf4>
 8010200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010204:	f383 8811 	msr	BASEPRI, r3
 8010208:	f3bf 8f6f 	isb	sy
 801020c:	f3bf 8f4f 	dsb	sy
 8010210:	613b      	str	r3, [r7, #16]
 8010212:	e7fe      	b.n	8010212 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010216:	685a      	ldr	r2, [r3, #4]
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	1ad2      	subs	r2, r2, r3
 801021c:	69bb      	ldr	r3, [r7, #24]
 801021e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010222:	687a      	ldr	r2, [r7, #4]
 8010224:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010226:	69b8      	ldr	r0, [r7, #24]
 8010228:	f000 f8f8 	bl	801041c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801022c:	4b1a      	ldr	r3, [pc, #104]	; (8010298 <pvPortMalloc+0x178>)
 801022e:	681a      	ldr	r2, [r3, #0]
 8010230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010232:	685b      	ldr	r3, [r3, #4]
 8010234:	1ad3      	subs	r3, r2, r3
 8010236:	4a18      	ldr	r2, [pc, #96]	; (8010298 <pvPortMalloc+0x178>)
 8010238:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801023a:	4b17      	ldr	r3, [pc, #92]	; (8010298 <pvPortMalloc+0x178>)
 801023c:	681a      	ldr	r2, [r3, #0]
 801023e:	4b18      	ldr	r3, [pc, #96]	; (80102a0 <pvPortMalloc+0x180>)
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	429a      	cmp	r2, r3
 8010244:	d203      	bcs.n	801024e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010246:	4b14      	ldr	r3, [pc, #80]	; (8010298 <pvPortMalloc+0x178>)
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	4a15      	ldr	r2, [pc, #84]	; (80102a0 <pvPortMalloc+0x180>)
 801024c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801024e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010250:	685a      	ldr	r2, [r3, #4]
 8010252:	4b10      	ldr	r3, [pc, #64]	; (8010294 <pvPortMalloc+0x174>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	431a      	orrs	r2, r3
 8010258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801025a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801025c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801025e:	2200      	movs	r2, #0
 8010260:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010262:	f001 fd07 	bl	8011c74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010266:	69fb      	ldr	r3, [r7, #28]
 8010268:	f003 0307 	and.w	r3, r3, #7
 801026c:	2b00      	cmp	r3, #0
 801026e:	d009      	beq.n	8010284 <pvPortMalloc+0x164>
 8010270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010274:	f383 8811 	msr	BASEPRI, r3
 8010278:	f3bf 8f6f 	isb	sy
 801027c:	f3bf 8f4f 	dsb	sy
 8010280:	60fb      	str	r3, [r7, #12]
 8010282:	e7fe      	b.n	8010282 <pvPortMalloc+0x162>
	return pvReturn;
 8010284:	69fb      	ldr	r3, [r7, #28]
}
 8010286:	4618      	mov	r0, r3
 8010288:	3728      	adds	r7, #40	; 0x28
 801028a:	46bd      	mov	sp, r7
 801028c:	bd80      	pop	{r7, pc}
 801028e:	bf00      	nop
 8010290:	2002da20 	.word	0x2002da20
 8010294:	2002da2c 	.word	0x2002da2c
 8010298:	2002da24 	.word	0x2002da24
 801029c:	2002da18 	.word	0x2002da18
 80102a0:	2002da28 	.word	0x2002da28

080102a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b086      	sub	sp, #24
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d046      	beq.n	8010344 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80102b6:	2308      	movs	r3, #8
 80102b8:	425b      	negs	r3, r3
 80102ba:	697a      	ldr	r2, [r7, #20]
 80102bc:	4413      	add	r3, r2
 80102be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80102c0:	697b      	ldr	r3, [r7, #20]
 80102c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80102c4:	693b      	ldr	r3, [r7, #16]
 80102c6:	685a      	ldr	r2, [r3, #4]
 80102c8:	4b20      	ldr	r3, [pc, #128]	; (801034c <vPortFree+0xa8>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	4013      	ands	r3, r2
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d109      	bne.n	80102e6 <vPortFree+0x42>
 80102d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d6:	f383 8811 	msr	BASEPRI, r3
 80102da:	f3bf 8f6f 	isb	sy
 80102de:	f3bf 8f4f 	dsb	sy
 80102e2:	60fb      	str	r3, [r7, #12]
 80102e4:	e7fe      	b.n	80102e4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80102e6:	693b      	ldr	r3, [r7, #16]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d009      	beq.n	8010302 <vPortFree+0x5e>
 80102ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102f2:	f383 8811 	msr	BASEPRI, r3
 80102f6:	f3bf 8f6f 	isb	sy
 80102fa:	f3bf 8f4f 	dsb	sy
 80102fe:	60bb      	str	r3, [r7, #8]
 8010300:	e7fe      	b.n	8010300 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010302:	693b      	ldr	r3, [r7, #16]
 8010304:	685a      	ldr	r2, [r3, #4]
 8010306:	4b11      	ldr	r3, [pc, #68]	; (801034c <vPortFree+0xa8>)
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	4013      	ands	r3, r2
 801030c:	2b00      	cmp	r3, #0
 801030e:	d019      	beq.n	8010344 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010310:	693b      	ldr	r3, [r7, #16]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d115      	bne.n	8010344 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010318:	693b      	ldr	r3, [r7, #16]
 801031a:	685a      	ldr	r2, [r3, #4]
 801031c:	4b0b      	ldr	r3, [pc, #44]	; (801034c <vPortFree+0xa8>)
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	43db      	mvns	r3, r3
 8010322:	401a      	ands	r2, r3
 8010324:	693b      	ldr	r3, [r7, #16]
 8010326:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010328:	f001 fc5e 	bl	8011be8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801032c:	693b      	ldr	r3, [r7, #16]
 801032e:	685a      	ldr	r2, [r3, #4]
 8010330:	4b07      	ldr	r3, [pc, #28]	; (8010350 <vPortFree+0xac>)
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	4413      	add	r3, r2
 8010336:	4a06      	ldr	r2, [pc, #24]	; (8010350 <vPortFree+0xac>)
 8010338:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801033a:	6938      	ldr	r0, [r7, #16]
 801033c:	f000 f86e 	bl	801041c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010340:	f001 fc98 	bl	8011c74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010344:	bf00      	nop
 8010346:	3718      	adds	r7, #24
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}
 801034c:	2002da2c 	.word	0x2002da2c
 8010350:	2002da24 	.word	0x2002da24

08010354 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010354:	b480      	push	{r7}
 8010356:	b085      	sub	sp, #20
 8010358:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801035a:	4b29      	ldr	r3, [pc, #164]	; (8010400 <prvHeapInit+0xac>)
 801035c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801035e:	4b29      	ldr	r3, [pc, #164]	; (8010404 <prvHeapInit+0xb0>)
 8010360:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	f003 0307 	and.w	r3, r3, #7
 8010368:	2b00      	cmp	r3, #0
 801036a:	d00c      	beq.n	8010386 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	3307      	adds	r3, #7
 8010370:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	f023 0307 	bic.w	r3, r3, #7
 8010378:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801037a:	68ba      	ldr	r2, [r7, #8]
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	1ad3      	subs	r3, r2, r3
 8010380:	4a20      	ldr	r2, [pc, #128]	; (8010404 <prvHeapInit+0xb0>)
 8010382:	4413      	add	r3, r2
 8010384:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801038a:	4a1f      	ldr	r2, [pc, #124]	; (8010408 <prvHeapInit+0xb4>)
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010390:	4b1d      	ldr	r3, [pc, #116]	; (8010408 <prvHeapInit+0xb4>)
 8010392:	2200      	movs	r2, #0
 8010394:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	68ba      	ldr	r2, [r7, #8]
 801039a:	4413      	add	r3, r2
 801039c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801039e:	2208      	movs	r2, #8
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	1a9b      	subs	r3, r3, r2
 80103a4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	f023 0307 	bic.w	r3, r3, #7
 80103ac:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	4a16      	ldr	r2, [pc, #88]	; (801040c <prvHeapInit+0xb8>)
 80103b2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80103b4:	4b15      	ldr	r3, [pc, #84]	; (801040c <prvHeapInit+0xb8>)
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	2200      	movs	r2, #0
 80103ba:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80103bc:	4b13      	ldr	r3, [pc, #76]	; (801040c <prvHeapInit+0xb8>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	2200      	movs	r2, #0
 80103c2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	68fa      	ldr	r2, [r7, #12]
 80103cc:	1ad2      	subs	r2, r2, r3
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80103d2:	4b0e      	ldr	r3, [pc, #56]	; (801040c <prvHeapInit+0xb8>)
 80103d4:	681a      	ldr	r2, [r3, #0]
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	685b      	ldr	r3, [r3, #4]
 80103de:	4a0c      	ldr	r2, [pc, #48]	; (8010410 <prvHeapInit+0xbc>)
 80103e0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	685b      	ldr	r3, [r3, #4]
 80103e6:	4a0b      	ldr	r2, [pc, #44]	; (8010414 <prvHeapInit+0xc0>)
 80103e8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80103ea:	4b0b      	ldr	r3, [pc, #44]	; (8010418 <prvHeapInit+0xc4>)
 80103ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80103f0:	601a      	str	r2, [r3, #0]
}
 80103f2:	bf00      	nop
 80103f4:	3714      	adds	r7, #20
 80103f6:	46bd      	mov	sp, r7
 80103f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fc:	4770      	bx	lr
 80103fe:	bf00      	nop
 8010400:	0002bf20 	.word	0x0002bf20
 8010404:	20001af8 	.word	0x20001af8
 8010408:	2002da18 	.word	0x2002da18
 801040c:	2002da20 	.word	0x2002da20
 8010410:	2002da28 	.word	0x2002da28
 8010414:	2002da24 	.word	0x2002da24
 8010418:	2002da2c 	.word	0x2002da2c

0801041c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801041c:	b480      	push	{r7}
 801041e:	b085      	sub	sp, #20
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010424:	4b28      	ldr	r3, [pc, #160]	; (80104c8 <prvInsertBlockIntoFreeList+0xac>)
 8010426:	60fb      	str	r3, [r7, #12]
 8010428:	e002      	b.n	8010430 <prvInsertBlockIntoFreeList+0x14>
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	60fb      	str	r3, [r7, #12]
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	687a      	ldr	r2, [r7, #4]
 8010436:	429a      	cmp	r2, r3
 8010438:	d8f7      	bhi.n	801042a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	685b      	ldr	r3, [r3, #4]
 8010442:	68ba      	ldr	r2, [r7, #8]
 8010444:	4413      	add	r3, r2
 8010446:	687a      	ldr	r2, [r7, #4]
 8010448:	429a      	cmp	r2, r3
 801044a:	d108      	bne.n	801045e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	685a      	ldr	r2, [r3, #4]
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	685b      	ldr	r3, [r3, #4]
 8010454:	441a      	add	r2, r3
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	685b      	ldr	r3, [r3, #4]
 8010466:	68ba      	ldr	r2, [r7, #8]
 8010468:	441a      	add	r2, r3
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	429a      	cmp	r2, r3
 8010470:	d118      	bne.n	80104a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	681a      	ldr	r2, [r3, #0]
 8010476:	4b15      	ldr	r3, [pc, #84]	; (80104cc <prvInsertBlockIntoFreeList+0xb0>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	429a      	cmp	r2, r3
 801047c:	d00d      	beq.n	801049a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	685a      	ldr	r2, [r3, #4]
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	685b      	ldr	r3, [r3, #4]
 8010488:	441a      	add	r2, r3
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	681a      	ldr	r2, [r3, #0]
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	601a      	str	r2, [r3, #0]
 8010498:	e008      	b.n	80104ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801049a:	4b0c      	ldr	r3, [pc, #48]	; (80104cc <prvInsertBlockIntoFreeList+0xb0>)
 801049c:	681a      	ldr	r2, [r3, #0]
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	601a      	str	r2, [r3, #0]
 80104a2:	e003      	b.n	80104ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	681a      	ldr	r2, [r3, #0]
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80104ac:	68fa      	ldr	r2, [r7, #12]
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	429a      	cmp	r2, r3
 80104b2:	d002      	beq.n	80104ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	687a      	ldr	r2, [r7, #4]
 80104b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80104ba:	bf00      	nop
 80104bc:	3714      	adds	r7, #20
 80104be:	46bd      	mov	sp, r7
 80104c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c4:	4770      	bx	lr
 80104c6:	bf00      	nop
 80104c8:	2002da18 	.word	0x2002da18
 80104cc:	2002da20 	.word	0x2002da20

080104d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80104d0:	b480      	push	{r7}
 80104d2:	b083      	sub	sp, #12
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f103 0208 	add.w	r2, r3, #8
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80104e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f103 0208 	add.w	r2, r3, #8
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f103 0208 	add.w	r2, r3, #8
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	2200      	movs	r2, #0
 8010502:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010504:	bf00      	nop
 8010506:	370c      	adds	r7, #12
 8010508:	46bd      	mov	sp, r7
 801050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050e:	4770      	bx	lr

08010510 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010510:	b480      	push	{r7}
 8010512:	b083      	sub	sp, #12
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2200      	movs	r2, #0
 801051c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801051e:	bf00      	nop
 8010520:	370c      	adds	r7, #12
 8010522:	46bd      	mov	sp, r7
 8010524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010528:	4770      	bx	lr

0801052a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801052a:	b480      	push	{r7}
 801052c:	b085      	sub	sp, #20
 801052e:	af00      	add	r7, sp, #0
 8010530:	6078      	str	r0, [r7, #4]
 8010532:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	685b      	ldr	r3, [r3, #4]
 8010538:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	68fa      	ldr	r2, [r7, #12]
 801053e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	689a      	ldr	r2, [r3, #8]
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	689b      	ldr	r3, [r3, #8]
 801054c:	683a      	ldr	r2, [r7, #0]
 801054e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	683a      	ldr	r2, [r7, #0]
 8010554:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	687a      	ldr	r2, [r7, #4]
 801055a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	1c5a      	adds	r2, r3, #1
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	601a      	str	r2, [r3, #0]
}
 8010566:	bf00      	nop
 8010568:	3714      	adds	r7, #20
 801056a:	46bd      	mov	sp, r7
 801056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010570:	4770      	bx	lr

08010572 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010572:	b480      	push	{r7}
 8010574:	b085      	sub	sp, #20
 8010576:	af00      	add	r7, sp, #0
 8010578:	6078      	str	r0, [r7, #4]
 801057a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801057c:	683b      	ldr	r3, [r7, #0]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010588:	d103      	bne.n	8010592 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	691b      	ldr	r3, [r3, #16]
 801058e:	60fb      	str	r3, [r7, #12]
 8010590:	e00c      	b.n	80105ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	3308      	adds	r3, #8
 8010596:	60fb      	str	r3, [r7, #12]
 8010598:	e002      	b.n	80105a0 <vListInsert+0x2e>
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	685b      	ldr	r3, [r3, #4]
 801059e:	60fb      	str	r3, [r7, #12]
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	685b      	ldr	r3, [r3, #4]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	68ba      	ldr	r2, [r7, #8]
 80105a8:	429a      	cmp	r2, r3
 80105aa:	d2f6      	bcs.n	801059a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	685a      	ldr	r2, [r3, #4]
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80105b4:	683b      	ldr	r3, [r7, #0]
 80105b6:	685b      	ldr	r3, [r3, #4]
 80105b8:	683a      	ldr	r2, [r7, #0]
 80105ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	68fa      	ldr	r2, [r7, #12]
 80105c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	683a      	ldr	r2, [r7, #0]
 80105c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	687a      	ldr	r2, [r7, #4]
 80105cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	1c5a      	adds	r2, r3, #1
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	601a      	str	r2, [r3, #0]
}
 80105d8:	bf00      	nop
 80105da:	3714      	adds	r7, #20
 80105dc:	46bd      	mov	sp, r7
 80105de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e2:	4770      	bx	lr

080105e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80105e4:	b480      	push	{r7}
 80105e6:	b085      	sub	sp, #20
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	691b      	ldr	r3, [r3, #16]
 80105f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	685b      	ldr	r3, [r3, #4]
 80105f6:	687a      	ldr	r2, [r7, #4]
 80105f8:	6892      	ldr	r2, [r2, #8]
 80105fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	689b      	ldr	r3, [r3, #8]
 8010600:	687a      	ldr	r2, [r7, #4]
 8010602:	6852      	ldr	r2, [r2, #4]
 8010604:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	685b      	ldr	r3, [r3, #4]
 801060a:	687a      	ldr	r2, [r7, #4]
 801060c:	429a      	cmp	r2, r3
 801060e:	d103      	bne.n	8010618 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	689a      	ldr	r2, [r3, #8]
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	2200      	movs	r2, #0
 801061c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	1e5a      	subs	r2, r3, #1
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	681b      	ldr	r3, [r3, #0]
}
 801062c:	4618      	mov	r0, r3
 801062e:	3714      	adds	r7, #20
 8010630:	46bd      	mov	sp, r7
 8010632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010636:	4770      	bx	lr

08010638 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b084      	sub	sp, #16
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
 8010640:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d109      	bne.n	8010660 <xQueueGenericReset+0x28>
 801064c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010650:	f383 8811 	msr	BASEPRI, r3
 8010654:	f3bf 8f6f 	isb	sy
 8010658:	f3bf 8f4f 	dsb	sy
 801065c:	60bb      	str	r3, [r7, #8]
 801065e:	e7fe      	b.n	801065e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8010660:	f7ff fc44 	bl	800feec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	681a      	ldr	r2, [r3, #0]
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801066c:	68f9      	ldr	r1, [r7, #12]
 801066e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010670:	fb01 f303 	mul.w	r3, r1, r3
 8010674:	441a      	add	r2, r3
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	2200      	movs	r2, #0
 801067e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	681a      	ldr	r2, [r3, #0]
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	681a      	ldr	r2, [r3, #0]
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010690:	3b01      	subs	r3, #1
 8010692:	68f9      	ldr	r1, [r7, #12]
 8010694:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010696:	fb01 f303 	mul.w	r3, r1, r3
 801069a:	441a      	add	r2, r3
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	22ff      	movs	r2, #255	; 0xff
 80106a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	22ff      	movs	r2, #255	; 0xff
 80106ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d114      	bne.n	80106e0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	691b      	ldr	r3, [r3, #16]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d01a      	beq.n	80106f4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	3310      	adds	r3, #16
 80106c2:	4618      	mov	r0, r3
 80106c4:	f001 fce4 	bl	8012090 <xTaskRemoveFromEventList>
 80106c8:	4603      	mov	r3, r0
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d012      	beq.n	80106f4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80106ce:	4b0d      	ldr	r3, [pc, #52]	; (8010704 <xQueueGenericReset+0xcc>)
 80106d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106d4:	601a      	str	r2, [r3, #0]
 80106d6:	f3bf 8f4f 	dsb	sy
 80106da:	f3bf 8f6f 	isb	sy
 80106de:	e009      	b.n	80106f4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	3310      	adds	r3, #16
 80106e4:	4618      	mov	r0, r3
 80106e6:	f7ff fef3 	bl	80104d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	3324      	adds	r3, #36	; 0x24
 80106ee:	4618      	mov	r0, r3
 80106f0:	f7ff feee 	bl	80104d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80106f4:	f7ff fc28 	bl	800ff48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80106f8:	2301      	movs	r3, #1
}
 80106fa:	4618      	mov	r0, r3
 80106fc:	3710      	adds	r7, #16
 80106fe:	46bd      	mov	sp, r7
 8010700:	bd80      	pop	{r7, pc}
 8010702:	bf00      	nop
 8010704:	e000ed04 	.word	0xe000ed04

08010708 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010708:	b580      	push	{r7, lr}
 801070a:	b08e      	sub	sp, #56	; 0x38
 801070c:	af02      	add	r7, sp, #8
 801070e:	60f8      	str	r0, [r7, #12]
 8010710:	60b9      	str	r1, [r7, #8]
 8010712:	607a      	str	r2, [r7, #4]
 8010714:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d109      	bne.n	8010730 <xQueueGenericCreateStatic+0x28>
 801071c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010720:	f383 8811 	msr	BASEPRI, r3
 8010724:	f3bf 8f6f 	isb	sy
 8010728:	f3bf 8f4f 	dsb	sy
 801072c:	62bb      	str	r3, [r7, #40]	; 0x28
 801072e:	e7fe      	b.n	801072e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010730:	683b      	ldr	r3, [r7, #0]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d109      	bne.n	801074a <xQueueGenericCreateStatic+0x42>
 8010736:	f04f 0350 	mov.w	r3, #80	; 0x50
 801073a:	f383 8811 	msr	BASEPRI, r3
 801073e:	f3bf 8f6f 	isb	sy
 8010742:	f3bf 8f4f 	dsb	sy
 8010746:	627b      	str	r3, [r7, #36]	; 0x24
 8010748:	e7fe      	b.n	8010748 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d002      	beq.n	8010756 <xQueueGenericCreateStatic+0x4e>
 8010750:	68bb      	ldr	r3, [r7, #8]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d001      	beq.n	801075a <xQueueGenericCreateStatic+0x52>
 8010756:	2301      	movs	r3, #1
 8010758:	e000      	b.n	801075c <xQueueGenericCreateStatic+0x54>
 801075a:	2300      	movs	r3, #0
 801075c:	2b00      	cmp	r3, #0
 801075e:	d109      	bne.n	8010774 <xQueueGenericCreateStatic+0x6c>
 8010760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010764:	f383 8811 	msr	BASEPRI, r3
 8010768:	f3bf 8f6f 	isb	sy
 801076c:	f3bf 8f4f 	dsb	sy
 8010770:	623b      	str	r3, [r7, #32]
 8010772:	e7fe      	b.n	8010772 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d102      	bne.n	8010780 <xQueueGenericCreateStatic+0x78>
 801077a:	68bb      	ldr	r3, [r7, #8]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d101      	bne.n	8010784 <xQueueGenericCreateStatic+0x7c>
 8010780:	2301      	movs	r3, #1
 8010782:	e000      	b.n	8010786 <xQueueGenericCreateStatic+0x7e>
 8010784:	2300      	movs	r3, #0
 8010786:	2b00      	cmp	r3, #0
 8010788:	d109      	bne.n	801079e <xQueueGenericCreateStatic+0x96>
 801078a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801078e:	f383 8811 	msr	BASEPRI, r3
 8010792:	f3bf 8f6f 	isb	sy
 8010796:	f3bf 8f4f 	dsb	sy
 801079a:	61fb      	str	r3, [r7, #28]
 801079c:	e7fe      	b.n	801079c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801079e:	2350      	movs	r3, #80	; 0x50
 80107a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80107a2:	697b      	ldr	r3, [r7, #20]
 80107a4:	2b50      	cmp	r3, #80	; 0x50
 80107a6:	d009      	beq.n	80107bc <xQueueGenericCreateStatic+0xb4>
 80107a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ac:	f383 8811 	msr	BASEPRI, r3
 80107b0:	f3bf 8f6f 	isb	sy
 80107b4:	f3bf 8f4f 	dsb	sy
 80107b8:	61bb      	str	r3, [r7, #24]
 80107ba:	e7fe      	b.n	80107ba <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80107bc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80107c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d00d      	beq.n	80107e4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80107c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ca:	2201      	movs	r2, #1
 80107cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80107d0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80107d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107d6:	9300      	str	r3, [sp, #0]
 80107d8:	4613      	mov	r3, r2
 80107da:	687a      	ldr	r2, [r7, #4]
 80107dc:	68b9      	ldr	r1, [r7, #8]
 80107de:	68f8      	ldr	r0, [r7, #12]
 80107e0:	f000 f844 	bl	801086c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80107e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80107e6:	4618      	mov	r0, r3
 80107e8:	3730      	adds	r7, #48	; 0x30
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd80      	pop	{r7, pc}

080107ee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80107ee:	b580      	push	{r7, lr}
 80107f0:	b08a      	sub	sp, #40	; 0x28
 80107f2:	af02      	add	r7, sp, #8
 80107f4:	60f8      	str	r0, [r7, #12]
 80107f6:	60b9      	str	r1, [r7, #8]
 80107f8:	4613      	mov	r3, r2
 80107fa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d109      	bne.n	8010816 <xQueueGenericCreate+0x28>
 8010802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010806:	f383 8811 	msr	BASEPRI, r3
 801080a:	f3bf 8f6f 	isb	sy
 801080e:	f3bf 8f4f 	dsb	sy
 8010812:	613b      	str	r3, [r7, #16]
 8010814:	e7fe      	b.n	8010814 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010816:	68bb      	ldr	r3, [r7, #8]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d102      	bne.n	8010822 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801081c:	2300      	movs	r3, #0
 801081e:	61fb      	str	r3, [r7, #28]
 8010820:	e004      	b.n	801082c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	68ba      	ldr	r2, [r7, #8]
 8010826:	fb02 f303 	mul.w	r3, r2, r3
 801082a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801082c:	69fb      	ldr	r3, [r7, #28]
 801082e:	3350      	adds	r3, #80	; 0x50
 8010830:	4618      	mov	r0, r3
 8010832:	f7ff fc75 	bl	8010120 <pvPortMalloc>
 8010836:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010838:	69bb      	ldr	r3, [r7, #24]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d011      	beq.n	8010862 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801083e:	69bb      	ldr	r3, [r7, #24]
 8010840:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010842:	697b      	ldr	r3, [r7, #20]
 8010844:	3350      	adds	r3, #80	; 0x50
 8010846:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010848:	69bb      	ldr	r3, [r7, #24]
 801084a:	2200      	movs	r2, #0
 801084c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010850:	79fa      	ldrb	r2, [r7, #7]
 8010852:	69bb      	ldr	r3, [r7, #24]
 8010854:	9300      	str	r3, [sp, #0]
 8010856:	4613      	mov	r3, r2
 8010858:	697a      	ldr	r2, [r7, #20]
 801085a:	68b9      	ldr	r1, [r7, #8]
 801085c:	68f8      	ldr	r0, [r7, #12]
 801085e:	f000 f805 	bl	801086c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010862:	69bb      	ldr	r3, [r7, #24]
	}
 8010864:	4618      	mov	r0, r3
 8010866:	3720      	adds	r7, #32
 8010868:	46bd      	mov	sp, r7
 801086a:	bd80      	pop	{r7, pc}

0801086c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b084      	sub	sp, #16
 8010870:	af00      	add	r7, sp, #0
 8010872:	60f8      	str	r0, [r7, #12]
 8010874:	60b9      	str	r1, [r7, #8]
 8010876:	607a      	str	r2, [r7, #4]
 8010878:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801087a:	68bb      	ldr	r3, [r7, #8]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d103      	bne.n	8010888 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010880:	69bb      	ldr	r3, [r7, #24]
 8010882:	69ba      	ldr	r2, [r7, #24]
 8010884:	601a      	str	r2, [r3, #0]
 8010886:	e002      	b.n	801088e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010888:	69bb      	ldr	r3, [r7, #24]
 801088a:	687a      	ldr	r2, [r7, #4]
 801088c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801088e:	69bb      	ldr	r3, [r7, #24]
 8010890:	68fa      	ldr	r2, [r7, #12]
 8010892:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010894:	69bb      	ldr	r3, [r7, #24]
 8010896:	68ba      	ldr	r2, [r7, #8]
 8010898:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801089a:	2101      	movs	r1, #1
 801089c:	69b8      	ldr	r0, [r7, #24]
 801089e:	f7ff fecb 	bl	8010638 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80108a2:	69bb      	ldr	r3, [r7, #24]
 80108a4:	78fa      	ldrb	r2, [r7, #3]
 80108a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80108aa:	bf00      	nop
 80108ac:	3710      	adds	r7, #16
 80108ae:	46bd      	mov	sp, r7
 80108b0:	bd80      	pop	{r7, pc}

080108b2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80108b2:	b580      	push	{r7, lr}
 80108b4:	b082      	sub	sp, #8
 80108b6:	af00      	add	r7, sp, #0
 80108b8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d00e      	beq.n	80108de <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2200      	movs	r2, #0
 80108c4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	2200      	movs	r2, #0
 80108ca:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	2200      	movs	r2, #0
 80108d0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80108d2:	2300      	movs	r3, #0
 80108d4:	2200      	movs	r2, #0
 80108d6:	2100      	movs	r1, #0
 80108d8:	6878      	ldr	r0, [r7, #4]
 80108da:	f000 f905 	bl	8010ae8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80108de:	bf00      	nop
 80108e0:	3708      	adds	r7, #8
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bd80      	pop	{r7, pc}

080108e6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80108e6:	b580      	push	{r7, lr}
 80108e8:	b086      	sub	sp, #24
 80108ea:	af00      	add	r7, sp, #0
 80108ec:	4603      	mov	r3, r0
 80108ee:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80108f0:	2301      	movs	r3, #1
 80108f2:	617b      	str	r3, [r7, #20]
 80108f4:	2300      	movs	r3, #0
 80108f6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80108f8:	79fb      	ldrb	r3, [r7, #7]
 80108fa:	461a      	mov	r2, r3
 80108fc:	6939      	ldr	r1, [r7, #16]
 80108fe:	6978      	ldr	r0, [r7, #20]
 8010900:	f7ff ff75 	bl	80107ee <xQueueGenericCreate>
 8010904:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010906:	68f8      	ldr	r0, [r7, #12]
 8010908:	f7ff ffd3 	bl	80108b2 <prvInitialiseMutex>

		return xNewQueue;
 801090c:	68fb      	ldr	r3, [r7, #12]
	}
 801090e:	4618      	mov	r0, r3
 8010910:	3718      	adds	r7, #24
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}

08010916 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8010916:	b580      	push	{r7, lr}
 8010918:	b088      	sub	sp, #32
 801091a:	af02      	add	r7, sp, #8
 801091c:	4603      	mov	r3, r0
 801091e:	6039      	str	r1, [r7, #0]
 8010920:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010922:	2301      	movs	r3, #1
 8010924:	617b      	str	r3, [r7, #20]
 8010926:	2300      	movs	r3, #0
 8010928:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801092a:	79fb      	ldrb	r3, [r7, #7]
 801092c:	9300      	str	r3, [sp, #0]
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	2200      	movs	r2, #0
 8010932:	6939      	ldr	r1, [r7, #16]
 8010934:	6978      	ldr	r0, [r7, #20]
 8010936:	f7ff fee7 	bl	8010708 <xQueueGenericCreateStatic>
 801093a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801093c:	68f8      	ldr	r0, [r7, #12]
 801093e:	f7ff ffb8 	bl	80108b2 <prvInitialiseMutex>

		return xNewQueue;
 8010942:	68fb      	ldr	r3, [r7, #12]
	}
 8010944:	4618      	mov	r0, r3
 8010946:	3718      	adds	r7, #24
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}

0801094c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 801094c:	b590      	push	{r4, r7, lr}
 801094e:	b087      	sub	sp, #28
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8010958:	693b      	ldr	r3, [r7, #16]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d109      	bne.n	8010972 <xQueueGiveMutexRecursive+0x26>
 801095e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010962:	f383 8811 	msr	BASEPRI, r3
 8010966:	f3bf 8f6f 	isb	sy
 801096a:	f3bf 8f4f 	dsb	sy
 801096e:	60fb      	str	r3, [r7, #12]
 8010970:	e7fe      	b.n	8010970 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8010972:	693b      	ldr	r3, [r7, #16]
 8010974:	689c      	ldr	r4, [r3, #8]
 8010976:	f001 fd69 	bl	801244c <xTaskGetCurrentTaskHandle>
 801097a:	4603      	mov	r3, r0
 801097c:	429c      	cmp	r4, r3
 801097e:	d111      	bne.n	80109a4 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8010980:	693b      	ldr	r3, [r7, #16]
 8010982:	68db      	ldr	r3, [r3, #12]
 8010984:	1e5a      	subs	r2, r3, #1
 8010986:	693b      	ldr	r3, [r7, #16]
 8010988:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 801098a:	693b      	ldr	r3, [r7, #16]
 801098c:	68db      	ldr	r3, [r3, #12]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d105      	bne.n	801099e <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8010992:	2300      	movs	r3, #0
 8010994:	2200      	movs	r2, #0
 8010996:	2100      	movs	r1, #0
 8010998:	6938      	ldr	r0, [r7, #16]
 801099a:	f000 f8a5 	bl	8010ae8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 801099e:	2301      	movs	r3, #1
 80109a0:	617b      	str	r3, [r7, #20]
 80109a2:	e001      	b.n	80109a8 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80109a4:	2300      	movs	r3, #0
 80109a6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80109a8:	697b      	ldr	r3, [r7, #20]
	}
 80109aa:	4618      	mov	r0, r3
 80109ac:	371c      	adds	r7, #28
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd90      	pop	{r4, r7, pc}

080109b2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80109b2:	b590      	push	{r4, r7, lr}
 80109b4:	b087      	sub	sp, #28
 80109b6:	af00      	add	r7, sp, #0
 80109b8:	6078      	str	r0, [r7, #4]
 80109ba:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80109c0:	693b      	ldr	r3, [r7, #16]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d109      	bne.n	80109da <xQueueTakeMutexRecursive+0x28>
 80109c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ca:	f383 8811 	msr	BASEPRI, r3
 80109ce:	f3bf 8f6f 	isb	sy
 80109d2:	f3bf 8f4f 	dsb	sy
 80109d6:	60fb      	str	r3, [r7, #12]
 80109d8:	e7fe      	b.n	80109d8 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80109da:	693b      	ldr	r3, [r7, #16]
 80109dc:	689c      	ldr	r4, [r3, #8]
 80109de:	f001 fd35 	bl	801244c <xTaskGetCurrentTaskHandle>
 80109e2:	4603      	mov	r3, r0
 80109e4:	429c      	cmp	r4, r3
 80109e6:	d107      	bne.n	80109f8 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80109e8:	693b      	ldr	r3, [r7, #16]
 80109ea:	68db      	ldr	r3, [r3, #12]
 80109ec:	1c5a      	adds	r2, r3, #1
 80109ee:	693b      	ldr	r3, [r7, #16]
 80109f0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80109f2:	2301      	movs	r3, #1
 80109f4:	617b      	str	r3, [r7, #20]
 80109f6:	e00c      	b.n	8010a12 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80109f8:	6839      	ldr	r1, [r7, #0]
 80109fa:	6938      	ldr	r0, [r7, #16]
 80109fc:	f000 fb68 	bl	80110d0 <xQueueSemaphoreTake>
 8010a00:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8010a02:	697b      	ldr	r3, [r7, #20]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d004      	beq.n	8010a12 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010a08:	693b      	ldr	r3, [r7, #16]
 8010a0a:	68db      	ldr	r3, [r3, #12]
 8010a0c:	1c5a      	adds	r2, r3, #1
 8010a0e:	693b      	ldr	r3, [r7, #16]
 8010a10:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8010a12:	697b      	ldr	r3, [r7, #20]
	}
 8010a14:	4618      	mov	r0, r3
 8010a16:	371c      	adds	r7, #28
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd90      	pop	{r4, r7, pc}

08010a1c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b08a      	sub	sp, #40	; 0x28
 8010a20:	af02      	add	r7, sp, #8
 8010a22:	60f8      	str	r0, [r7, #12]
 8010a24:	60b9      	str	r1, [r7, #8]
 8010a26:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d109      	bne.n	8010a42 <xQueueCreateCountingSemaphoreStatic+0x26>
 8010a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a32:	f383 8811 	msr	BASEPRI, r3
 8010a36:	f3bf 8f6f 	isb	sy
 8010a3a:	f3bf 8f4f 	dsb	sy
 8010a3e:	61bb      	str	r3, [r7, #24]
 8010a40:	e7fe      	b.n	8010a40 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010a42:	68ba      	ldr	r2, [r7, #8]
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	429a      	cmp	r2, r3
 8010a48:	d909      	bls.n	8010a5e <xQueueCreateCountingSemaphoreStatic+0x42>
 8010a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a4e:	f383 8811 	msr	BASEPRI, r3
 8010a52:	f3bf 8f6f 	isb	sy
 8010a56:	f3bf 8f4f 	dsb	sy
 8010a5a:	617b      	str	r3, [r7, #20]
 8010a5c:	e7fe      	b.n	8010a5c <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010a5e:	2302      	movs	r3, #2
 8010a60:	9300      	str	r3, [sp, #0]
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	2200      	movs	r2, #0
 8010a66:	2100      	movs	r1, #0
 8010a68:	68f8      	ldr	r0, [r7, #12]
 8010a6a:	f7ff fe4d 	bl	8010708 <xQueueGenericCreateStatic>
 8010a6e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8010a70:	69fb      	ldr	r3, [r7, #28]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d002      	beq.n	8010a7c <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010a76:	69fb      	ldr	r3, [r7, #28]
 8010a78:	68ba      	ldr	r2, [r7, #8]
 8010a7a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010a7c:	69fb      	ldr	r3, [r7, #28]
	}
 8010a7e:	4618      	mov	r0, r3
 8010a80:	3720      	adds	r7, #32
 8010a82:	46bd      	mov	sp, r7
 8010a84:	bd80      	pop	{r7, pc}

08010a86 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8010a86:	b580      	push	{r7, lr}
 8010a88:	b086      	sub	sp, #24
 8010a8a:	af00      	add	r7, sp, #0
 8010a8c:	6078      	str	r0, [r7, #4]
 8010a8e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d109      	bne.n	8010aaa <xQueueCreateCountingSemaphore+0x24>
 8010a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a9a:	f383 8811 	msr	BASEPRI, r3
 8010a9e:	f3bf 8f6f 	isb	sy
 8010aa2:	f3bf 8f4f 	dsb	sy
 8010aa6:	613b      	str	r3, [r7, #16]
 8010aa8:	e7fe      	b.n	8010aa8 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010aaa:	683a      	ldr	r2, [r7, #0]
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	429a      	cmp	r2, r3
 8010ab0:	d909      	bls.n	8010ac6 <xQueueCreateCountingSemaphore+0x40>
 8010ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ab6:	f383 8811 	msr	BASEPRI, r3
 8010aba:	f3bf 8f6f 	isb	sy
 8010abe:	f3bf 8f4f 	dsb	sy
 8010ac2:	60fb      	str	r3, [r7, #12]
 8010ac4:	e7fe      	b.n	8010ac4 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010ac6:	2202      	movs	r2, #2
 8010ac8:	2100      	movs	r1, #0
 8010aca:	6878      	ldr	r0, [r7, #4]
 8010acc:	f7ff fe8f 	bl	80107ee <xQueueGenericCreate>
 8010ad0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8010ad2:	697b      	ldr	r3, [r7, #20]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d002      	beq.n	8010ade <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010ad8:	697b      	ldr	r3, [r7, #20]
 8010ada:	683a      	ldr	r2, [r7, #0]
 8010adc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010ade:	697b      	ldr	r3, [r7, #20]
	}
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	3718      	adds	r7, #24
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	bd80      	pop	{r7, pc}

08010ae8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b08e      	sub	sp, #56	; 0x38
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	60f8      	str	r0, [r7, #12]
 8010af0:	60b9      	str	r1, [r7, #8]
 8010af2:	607a      	str	r2, [r7, #4]
 8010af4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010af6:	2300      	movs	r3, #0
 8010af8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d109      	bne.n	8010b18 <xQueueGenericSend+0x30>
 8010b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b08:	f383 8811 	msr	BASEPRI, r3
 8010b0c:	f3bf 8f6f 	isb	sy
 8010b10:	f3bf 8f4f 	dsb	sy
 8010b14:	62bb      	str	r3, [r7, #40]	; 0x28
 8010b16:	e7fe      	b.n	8010b16 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010b18:	68bb      	ldr	r3, [r7, #8]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d103      	bne.n	8010b26 <xQueueGenericSend+0x3e>
 8010b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d101      	bne.n	8010b2a <xQueueGenericSend+0x42>
 8010b26:	2301      	movs	r3, #1
 8010b28:	e000      	b.n	8010b2c <xQueueGenericSend+0x44>
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d109      	bne.n	8010b44 <xQueueGenericSend+0x5c>
 8010b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b34:	f383 8811 	msr	BASEPRI, r3
 8010b38:	f3bf 8f6f 	isb	sy
 8010b3c:	f3bf 8f4f 	dsb	sy
 8010b40:	627b      	str	r3, [r7, #36]	; 0x24
 8010b42:	e7fe      	b.n	8010b42 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010b44:	683b      	ldr	r3, [r7, #0]
 8010b46:	2b02      	cmp	r3, #2
 8010b48:	d103      	bne.n	8010b52 <xQueueGenericSend+0x6a>
 8010b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b4e:	2b01      	cmp	r3, #1
 8010b50:	d101      	bne.n	8010b56 <xQueueGenericSend+0x6e>
 8010b52:	2301      	movs	r3, #1
 8010b54:	e000      	b.n	8010b58 <xQueueGenericSend+0x70>
 8010b56:	2300      	movs	r3, #0
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d109      	bne.n	8010b70 <xQueueGenericSend+0x88>
 8010b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b60:	f383 8811 	msr	BASEPRI, r3
 8010b64:	f3bf 8f6f 	isb	sy
 8010b68:	f3bf 8f4f 	dsb	sy
 8010b6c:	623b      	str	r3, [r7, #32]
 8010b6e:	e7fe      	b.n	8010b6e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010b70:	f001 fc7c 	bl	801246c <xTaskGetSchedulerState>
 8010b74:	4603      	mov	r3, r0
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d102      	bne.n	8010b80 <xQueueGenericSend+0x98>
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d101      	bne.n	8010b84 <xQueueGenericSend+0x9c>
 8010b80:	2301      	movs	r3, #1
 8010b82:	e000      	b.n	8010b86 <xQueueGenericSend+0x9e>
 8010b84:	2300      	movs	r3, #0
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d109      	bne.n	8010b9e <xQueueGenericSend+0xb6>
 8010b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b8e:	f383 8811 	msr	BASEPRI, r3
 8010b92:	f3bf 8f6f 	isb	sy
 8010b96:	f3bf 8f4f 	dsb	sy
 8010b9a:	61fb      	str	r3, [r7, #28]
 8010b9c:	e7fe      	b.n	8010b9c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010b9e:	f7ff f9a5 	bl	800feec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010baa:	429a      	cmp	r2, r3
 8010bac:	d302      	bcc.n	8010bb4 <xQueueGenericSend+0xcc>
 8010bae:	683b      	ldr	r3, [r7, #0]
 8010bb0:	2b02      	cmp	r3, #2
 8010bb2:	d129      	bne.n	8010c08 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010bb4:	683a      	ldr	r2, [r7, #0]
 8010bb6:	68b9      	ldr	r1, [r7, #8]
 8010bb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010bba:	f000 fc48 	bl	801144e <prvCopyDataToQueue>
 8010bbe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d010      	beq.n	8010bea <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bca:	3324      	adds	r3, #36	; 0x24
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f001 fa5f 	bl	8012090 <xTaskRemoveFromEventList>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d013      	beq.n	8010c00 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010bd8:	4b3f      	ldr	r3, [pc, #252]	; (8010cd8 <xQueueGenericSend+0x1f0>)
 8010bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bde:	601a      	str	r2, [r3, #0]
 8010be0:	f3bf 8f4f 	dsb	sy
 8010be4:	f3bf 8f6f 	isb	sy
 8010be8:	e00a      	b.n	8010c00 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d007      	beq.n	8010c00 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010bf0:	4b39      	ldr	r3, [pc, #228]	; (8010cd8 <xQueueGenericSend+0x1f0>)
 8010bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bf6:	601a      	str	r2, [r3, #0]
 8010bf8:	f3bf 8f4f 	dsb	sy
 8010bfc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010c00:	f7ff f9a2 	bl	800ff48 <vPortExitCritical>
				return pdPASS;
 8010c04:	2301      	movs	r3, #1
 8010c06:	e063      	b.n	8010cd0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d103      	bne.n	8010c16 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010c0e:	f7ff f99b 	bl	800ff48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010c12:	2300      	movs	r3, #0
 8010c14:	e05c      	b.n	8010cd0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d106      	bne.n	8010c2a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010c1c:	f107 0314 	add.w	r3, r7, #20
 8010c20:	4618      	mov	r0, r3
 8010c22:	f001 fa99 	bl	8012158 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010c26:	2301      	movs	r3, #1
 8010c28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010c2a:	f7ff f98d 	bl	800ff48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010c2e:	f000 ffdb 	bl	8011be8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010c32:	f7ff f95b 	bl	800feec <vPortEnterCritical>
 8010c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010c3c:	b25b      	sxtb	r3, r3
 8010c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010c42:	d103      	bne.n	8010c4c <xQueueGenericSend+0x164>
 8010c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c46:	2200      	movs	r2, #0
 8010c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c52:	b25b      	sxtb	r3, r3
 8010c54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010c58:	d103      	bne.n	8010c62 <xQueueGenericSend+0x17a>
 8010c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010c62:	f7ff f971 	bl	800ff48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010c66:	1d3a      	adds	r2, r7, #4
 8010c68:	f107 0314 	add.w	r3, r7, #20
 8010c6c:	4611      	mov	r1, r2
 8010c6e:	4618      	mov	r0, r3
 8010c70:	f001 fa88 	bl	8012184 <xTaskCheckForTimeOut>
 8010c74:	4603      	mov	r3, r0
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d124      	bne.n	8010cc4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010c7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c7c:	f000 fcdf 	bl	801163e <prvIsQueueFull>
 8010c80:	4603      	mov	r3, r0
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d018      	beq.n	8010cb8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c88:	3310      	adds	r3, #16
 8010c8a:	687a      	ldr	r2, [r7, #4]
 8010c8c:	4611      	mov	r1, r2
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f001 f9b0 	bl	8011ff4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c96:	f000 fc6a 	bl	801156e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010c9a:	f000 ffeb 	bl	8011c74 <xTaskResumeAll>
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	f47f af7c 	bne.w	8010b9e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8010ca6:	4b0c      	ldr	r3, [pc, #48]	; (8010cd8 <xQueueGenericSend+0x1f0>)
 8010ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010cac:	601a      	str	r2, [r3, #0]
 8010cae:	f3bf 8f4f 	dsb	sy
 8010cb2:	f3bf 8f6f 	isb	sy
 8010cb6:	e772      	b.n	8010b9e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010cba:	f000 fc58 	bl	801156e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010cbe:	f000 ffd9 	bl	8011c74 <xTaskResumeAll>
 8010cc2:	e76c      	b.n	8010b9e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010cc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010cc6:	f000 fc52 	bl	801156e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010cca:	f000 ffd3 	bl	8011c74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010cce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	3738      	adds	r7, #56	; 0x38
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd80      	pop	{r7, pc}
 8010cd8:	e000ed04 	.word	0xe000ed04

08010cdc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b08e      	sub	sp, #56	; 0x38
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	60f8      	str	r0, [r7, #12]
 8010ce4:	60b9      	str	r1, [r7, #8]
 8010ce6:	607a      	str	r2, [r7, #4]
 8010ce8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d109      	bne.n	8010d08 <xQueueGenericSendFromISR+0x2c>
 8010cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cf8:	f383 8811 	msr	BASEPRI, r3
 8010cfc:	f3bf 8f6f 	isb	sy
 8010d00:	f3bf 8f4f 	dsb	sy
 8010d04:	627b      	str	r3, [r7, #36]	; 0x24
 8010d06:	e7fe      	b.n	8010d06 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010d08:	68bb      	ldr	r3, [r7, #8]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d103      	bne.n	8010d16 <xQueueGenericSendFromISR+0x3a>
 8010d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d101      	bne.n	8010d1a <xQueueGenericSendFromISR+0x3e>
 8010d16:	2301      	movs	r3, #1
 8010d18:	e000      	b.n	8010d1c <xQueueGenericSendFromISR+0x40>
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d109      	bne.n	8010d34 <xQueueGenericSendFromISR+0x58>
 8010d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d24:	f383 8811 	msr	BASEPRI, r3
 8010d28:	f3bf 8f6f 	isb	sy
 8010d2c:	f3bf 8f4f 	dsb	sy
 8010d30:	623b      	str	r3, [r7, #32]
 8010d32:	e7fe      	b.n	8010d32 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010d34:	683b      	ldr	r3, [r7, #0]
 8010d36:	2b02      	cmp	r3, #2
 8010d38:	d103      	bne.n	8010d42 <xQueueGenericSendFromISR+0x66>
 8010d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d3e:	2b01      	cmp	r3, #1
 8010d40:	d101      	bne.n	8010d46 <xQueueGenericSendFromISR+0x6a>
 8010d42:	2301      	movs	r3, #1
 8010d44:	e000      	b.n	8010d48 <xQueueGenericSendFromISR+0x6c>
 8010d46:	2300      	movs	r3, #0
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d109      	bne.n	8010d60 <xQueueGenericSendFromISR+0x84>
 8010d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d50:	f383 8811 	msr	BASEPRI, r3
 8010d54:	f3bf 8f6f 	isb	sy
 8010d58:	f3bf 8f4f 	dsb	sy
 8010d5c:	61fb      	str	r3, [r7, #28]
 8010d5e:	e7fe      	b.n	8010d5e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010d60:	f7ff f9a0 	bl	80100a4 <vPortValidateInterruptPriority>
	__asm volatile
 8010d64:	f3ef 8211 	mrs	r2, BASEPRI
 8010d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d6c:	f383 8811 	msr	BASEPRI, r3
 8010d70:	f3bf 8f6f 	isb	sy
 8010d74:	f3bf 8f4f 	dsb	sy
 8010d78:	61ba      	str	r2, [r7, #24]
 8010d7a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010d7c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d88:	429a      	cmp	r2, r3
 8010d8a:	d302      	bcc.n	8010d92 <xQueueGenericSendFromISR+0xb6>
 8010d8c:	683b      	ldr	r3, [r7, #0]
 8010d8e:	2b02      	cmp	r3, #2
 8010d90:	d12c      	bne.n	8010dec <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010d98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010d9c:	683a      	ldr	r2, [r7, #0]
 8010d9e:	68b9      	ldr	r1, [r7, #8]
 8010da0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010da2:	f000 fb54 	bl	801144e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010da6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010dae:	d112      	bne.n	8010dd6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d016      	beq.n	8010de6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dba:	3324      	adds	r3, #36	; 0x24
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	f001 f967 	bl	8012090 <xTaskRemoveFromEventList>
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d00e      	beq.n	8010de6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d00b      	beq.n	8010de6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	2201      	movs	r2, #1
 8010dd2:	601a      	str	r2, [r3, #0]
 8010dd4:	e007      	b.n	8010de6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010dd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010dda:	3301      	adds	r3, #1
 8010ddc:	b2db      	uxtb	r3, r3
 8010dde:	b25a      	sxtb	r2, r3
 8010de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010de6:	2301      	movs	r3, #1
 8010de8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010dea:	e001      	b.n	8010df0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010dec:	2300      	movs	r3, #0
 8010dee:	637b      	str	r3, [r7, #52]	; 0x34
 8010df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010df2:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010df4:	693b      	ldr	r3, [r7, #16]
 8010df6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	3738      	adds	r7, #56	; 0x38
 8010e00:	46bd      	mov	sp, r7
 8010e02:	bd80      	pop	{r7, pc}

08010e04 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b08e      	sub	sp, #56	; 0x38
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
 8010e0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d109      	bne.n	8010e2c <xQueueGiveFromISR+0x28>
	__asm volatile
 8010e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e1c:	f383 8811 	msr	BASEPRI, r3
 8010e20:	f3bf 8f6f 	isb	sy
 8010e24:	f3bf 8f4f 	dsb	sy
 8010e28:	623b      	str	r3, [r7, #32]
 8010e2a:	e7fe      	b.n	8010e2a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d009      	beq.n	8010e48 <xQueueGiveFromISR+0x44>
 8010e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e38:	f383 8811 	msr	BASEPRI, r3
 8010e3c:	f3bf 8f6f 	isb	sy
 8010e40:	f3bf 8f4f 	dsb	sy
 8010e44:	61fb      	str	r3, [r7, #28]
 8010e46:	e7fe      	b.n	8010e46 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d103      	bne.n	8010e58 <xQueueGiveFromISR+0x54>
 8010e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e52:	689b      	ldr	r3, [r3, #8]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d101      	bne.n	8010e5c <xQueueGiveFromISR+0x58>
 8010e58:	2301      	movs	r3, #1
 8010e5a:	e000      	b.n	8010e5e <xQueueGiveFromISR+0x5a>
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d109      	bne.n	8010e76 <xQueueGiveFromISR+0x72>
 8010e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e66:	f383 8811 	msr	BASEPRI, r3
 8010e6a:	f3bf 8f6f 	isb	sy
 8010e6e:	f3bf 8f4f 	dsb	sy
 8010e72:	61bb      	str	r3, [r7, #24]
 8010e74:	e7fe      	b.n	8010e74 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010e76:	f7ff f915 	bl	80100a4 <vPortValidateInterruptPriority>
	__asm volatile
 8010e7a:	f3ef 8211 	mrs	r2, BASEPRI
 8010e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e82:	f383 8811 	msr	BASEPRI, r3
 8010e86:	f3bf 8f6f 	isb	sy
 8010e8a:	f3bf 8f4f 	dsb	sy
 8010e8e:	617a      	str	r2, [r7, #20]
 8010e90:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010e92:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010e94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e9a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ea2:	429a      	cmp	r2, r3
 8010ea4:	d22b      	bcs.n	8010efe <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eb2:	1c5a      	adds	r2, r3, #1
 8010eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eb6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010eb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010ec0:	d112      	bne.n	8010ee8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d016      	beq.n	8010ef8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ecc:	3324      	adds	r3, #36	; 0x24
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f001 f8de 	bl	8012090 <xTaskRemoveFromEventList>
 8010ed4:	4603      	mov	r3, r0
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d00e      	beq.n	8010ef8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010eda:	683b      	ldr	r3, [r7, #0]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d00b      	beq.n	8010ef8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010ee0:	683b      	ldr	r3, [r7, #0]
 8010ee2:	2201      	movs	r2, #1
 8010ee4:	601a      	str	r2, [r3, #0]
 8010ee6:	e007      	b.n	8010ef8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010eec:	3301      	adds	r3, #1
 8010eee:	b2db      	uxtb	r3, r3
 8010ef0:	b25a      	sxtb	r2, r3
 8010ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010ef8:	2301      	movs	r3, #1
 8010efa:	637b      	str	r3, [r7, #52]	; 0x34
 8010efc:	e001      	b.n	8010f02 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010efe:	2300      	movs	r3, #0
 8010f00:	637b      	str	r3, [r7, #52]	; 0x34
 8010f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f04:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010f0e:	4618      	mov	r0, r3
 8010f10:	3738      	adds	r7, #56	; 0x38
 8010f12:	46bd      	mov	sp, r7
 8010f14:	bd80      	pop	{r7, pc}
	...

08010f18 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b08c      	sub	sp, #48	; 0x30
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	60f8      	str	r0, [r7, #12]
 8010f20:	60b9      	str	r1, [r7, #8]
 8010f22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010f24:	2300      	movs	r3, #0
 8010f26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d109      	bne.n	8010f46 <xQueueReceive+0x2e>
	__asm volatile
 8010f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f36:	f383 8811 	msr	BASEPRI, r3
 8010f3a:	f3bf 8f6f 	isb	sy
 8010f3e:	f3bf 8f4f 	dsb	sy
 8010f42:	623b      	str	r3, [r7, #32]
 8010f44:	e7fe      	b.n	8010f44 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010f46:	68bb      	ldr	r3, [r7, #8]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d103      	bne.n	8010f54 <xQueueReceive+0x3c>
 8010f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d101      	bne.n	8010f58 <xQueueReceive+0x40>
 8010f54:	2301      	movs	r3, #1
 8010f56:	e000      	b.n	8010f5a <xQueueReceive+0x42>
 8010f58:	2300      	movs	r3, #0
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d109      	bne.n	8010f72 <xQueueReceive+0x5a>
 8010f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f62:	f383 8811 	msr	BASEPRI, r3
 8010f66:	f3bf 8f6f 	isb	sy
 8010f6a:	f3bf 8f4f 	dsb	sy
 8010f6e:	61fb      	str	r3, [r7, #28]
 8010f70:	e7fe      	b.n	8010f70 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010f72:	f001 fa7b 	bl	801246c <xTaskGetSchedulerState>
 8010f76:	4603      	mov	r3, r0
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d102      	bne.n	8010f82 <xQueueReceive+0x6a>
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d101      	bne.n	8010f86 <xQueueReceive+0x6e>
 8010f82:	2301      	movs	r3, #1
 8010f84:	e000      	b.n	8010f88 <xQueueReceive+0x70>
 8010f86:	2300      	movs	r3, #0
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d109      	bne.n	8010fa0 <xQueueReceive+0x88>
 8010f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f90:	f383 8811 	msr	BASEPRI, r3
 8010f94:	f3bf 8f6f 	isb	sy
 8010f98:	f3bf 8f4f 	dsb	sy
 8010f9c:	61bb      	str	r3, [r7, #24]
 8010f9e:	e7fe      	b.n	8010f9e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010fa0:	f7fe ffa4 	bl	800feec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fa8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d01f      	beq.n	8010ff0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010fb0:	68b9      	ldr	r1, [r7, #8]
 8010fb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010fb4:	f000 fab5 	bl	8011522 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fba:	1e5a      	subs	r2, r3, #1
 8010fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fbe:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fc2:	691b      	ldr	r3, [r3, #16]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d00f      	beq.n	8010fe8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fca:	3310      	adds	r3, #16
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f001 f85f 	bl	8012090 <xTaskRemoveFromEventList>
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d007      	beq.n	8010fe8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010fd8:	4b3c      	ldr	r3, [pc, #240]	; (80110cc <xQueueReceive+0x1b4>)
 8010fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fde:	601a      	str	r2, [r3, #0]
 8010fe0:	f3bf 8f4f 	dsb	sy
 8010fe4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010fe8:	f7fe ffae 	bl	800ff48 <vPortExitCritical>
				return pdPASS;
 8010fec:	2301      	movs	r3, #1
 8010fee:	e069      	b.n	80110c4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d103      	bne.n	8010ffe <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010ff6:	f7fe ffa7 	bl	800ff48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	e062      	b.n	80110c4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011000:	2b00      	cmp	r3, #0
 8011002:	d106      	bne.n	8011012 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011004:	f107 0310 	add.w	r3, r7, #16
 8011008:	4618      	mov	r0, r3
 801100a:	f001 f8a5 	bl	8012158 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801100e:	2301      	movs	r3, #1
 8011010:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011012:	f7fe ff99 	bl	800ff48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011016:	f000 fde7 	bl	8011be8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801101a:	f7fe ff67 	bl	800feec <vPortEnterCritical>
 801101e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011020:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011024:	b25b      	sxtb	r3, r3
 8011026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801102a:	d103      	bne.n	8011034 <xQueueReceive+0x11c>
 801102c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801102e:	2200      	movs	r2, #0
 8011030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011036:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801103a:	b25b      	sxtb	r3, r3
 801103c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011040:	d103      	bne.n	801104a <xQueueReceive+0x132>
 8011042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011044:	2200      	movs	r2, #0
 8011046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801104a:	f7fe ff7d 	bl	800ff48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801104e:	1d3a      	adds	r2, r7, #4
 8011050:	f107 0310 	add.w	r3, r7, #16
 8011054:	4611      	mov	r1, r2
 8011056:	4618      	mov	r0, r3
 8011058:	f001 f894 	bl	8012184 <xTaskCheckForTimeOut>
 801105c:	4603      	mov	r3, r0
 801105e:	2b00      	cmp	r3, #0
 8011060:	d123      	bne.n	80110aa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011064:	f000 fad5 	bl	8011612 <prvIsQueueEmpty>
 8011068:	4603      	mov	r3, r0
 801106a:	2b00      	cmp	r3, #0
 801106c:	d017      	beq.n	801109e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801106e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011070:	3324      	adds	r3, #36	; 0x24
 8011072:	687a      	ldr	r2, [r7, #4]
 8011074:	4611      	mov	r1, r2
 8011076:	4618      	mov	r0, r3
 8011078:	f000 ffbc 	bl	8011ff4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801107c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801107e:	f000 fa76 	bl	801156e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011082:	f000 fdf7 	bl	8011c74 <xTaskResumeAll>
 8011086:	4603      	mov	r3, r0
 8011088:	2b00      	cmp	r3, #0
 801108a:	d189      	bne.n	8010fa0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 801108c:	4b0f      	ldr	r3, [pc, #60]	; (80110cc <xQueueReceive+0x1b4>)
 801108e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011092:	601a      	str	r2, [r3, #0]
 8011094:	f3bf 8f4f 	dsb	sy
 8011098:	f3bf 8f6f 	isb	sy
 801109c:	e780      	b.n	8010fa0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801109e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80110a0:	f000 fa65 	bl	801156e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80110a4:	f000 fde6 	bl	8011c74 <xTaskResumeAll>
 80110a8:	e77a      	b.n	8010fa0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80110aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80110ac:	f000 fa5f 	bl	801156e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80110b0:	f000 fde0 	bl	8011c74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80110b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80110b6:	f000 faac 	bl	8011612 <prvIsQueueEmpty>
 80110ba:	4603      	mov	r3, r0
 80110bc:	2b00      	cmp	r3, #0
 80110be:	f43f af6f 	beq.w	8010fa0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80110c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80110c4:	4618      	mov	r0, r3
 80110c6:	3730      	adds	r7, #48	; 0x30
 80110c8:	46bd      	mov	sp, r7
 80110ca:	bd80      	pop	{r7, pc}
 80110cc:	e000ed04 	.word	0xe000ed04

080110d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b08e      	sub	sp, #56	; 0x38
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
 80110d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80110da:	2300      	movs	r3, #0
 80110dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80110e2:	2300      	movs	r3, #0
 80110e4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80110e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d109      	bne.n	8011100 <xQueueSemaphoreTake+0x30>
 80110ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110f0:	f383 8811 	msr	BASEPRI, r3
 80110f4:	f3bf 8f6f 	isb	sy
 80110f8:	f3bf 8f4f 	dsb	sy
 80110fc:	623b      	str	r3, [r7, #32]
 80110fe:	e7fe      	b.n	80110fe <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011104:	2b00      	cmp	r3, #0
 8011106:	d009      	beq.n	801111c <xQueueSemaphoreTake+0x4c>
 8011108:	f04f 0350 	mov.w	r3, #80	; 0x50
 801110c:	f383 8811 	msr	BASEPRI, r3
 8011110:	f3bf 8f6f 	isb	sy
 8011114:	f3bf 8f4f 	dsb	sy
 8011118:	61fb      	str	r3, [r7, #28]
 801111a:	e7fe      	b.n	801111a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801111c:	f001 f9a6 	bl	801246c <xTaskGetSchedulerState>
 8011120:	4603      	mov	r3, r0
 8011122:	2b00      	cmp	r3, #0
 8011124:	d102      	bne.n	801112c <xQueueSemaphoreTake+0x5c>
 8011126:	683b      	ldr	r3, [r7, #0]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d101      	bne.n	8011130 <xQueueSemaphoreTake+0x60>
 801112c:	2301      	movs	r3, #1
 801112e:	e000      	b.n	8011132 <xQueueSemaphoreTake+0x62>
 8011130:	2300      	movs	r3, #0
 8011132:	2b00      	cmp	r3, #0
 8011134:	d109      	bne.n	801114a <xQueueSemaphoreTake+0x7a>
 8011136:	f04f 0350 	mov.w	r3, #80	; 0x50
 801113a:	f383 8811 	msr	BASEPRI, r3
 801113e:	f3bf 8f6f 	isb	sy
 8011142:	f3bf 8f4f 	dsb	sy
 8011146:	61bb      	str	r3, [r7, #24]
 8011148:	e7fe      	b.n	8011148 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801114a:	f7fe fecf 	bl	800feec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801114e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011152:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011156:	2b00      	cmp	r3, #0
 8011158:	d024      	beq.n	80111a4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801115a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801115c:	1e5a      	subs	r2, r3, #1
 801115e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011160:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d104      	bne.n	8011174 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801116a:	f001 faf1 	bl	8012750 <pvTaskIncrementMutexHeldCount>
 801116e:	4602      	mov	r2, r0
 8011170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011172:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011176:	691b      	ldr	r3, [r3, #16]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d00f      	beq.n	801119c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801117c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801117e:	3310      	adds	r3, #16
 8011180:	4618      	mov	r0, r3
 8011182:	f000 ff85 	bl	8012090 <xTaskRemoveFromEventList>
 8011186:	4603      	mov	r3, r0
 8011188:	2b00      	cmp	r3, #0
 801118a:	d007      	beq.n	801119c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801118c:	4b53      	ldr	r3, [pc, #332]	; (80112dc <xQueueSemaphoreTake+0x20c>)
 801118e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011192:	601a      	str	r2, [r3, #0]
 8011194:	f3bf 8f4f 	dsb	sy
 8011198:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801119c:	f7fe fed4 	bl	800ff48 <vPortExitCritical>
				return pdPASS;
 80111a0:	2301      	movs	r3, #1
 80111a2:	e096      	b.n	80112d2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80111a4:	683b      	ldr	r3, [r7, #0]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d110      	bne.n	80111cc <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80111aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d009      	beq.n	80111c4 <xQueueSemaphoreTake+0xf4>
 80111b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111b4:	f383 8811 	msr	BASEPRI, r3
 80111b8:	f3bf 8f6f 	isb	sy
 80111bc:	f3bf 8f4f 	dsb	sy
 80111c0:	617b      	str	r3, [r7, #20]
 80111c2:	e7fe      	b.n	80111c2 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80111c4:	f7fe fec0 	bl	800ff48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80111c8:	2300      	movs	r3, #0
 80111ca:	e082      	b.n	80112d2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80111cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d106      	bne.n	80111e0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80111d2:	f107 030c 	add.w	r3, r7, #12
 80111d6:	4618      	mov	r0, r3
 80111d8:	f000 ffbe 	bl	8012158 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80111dc:	2301      	movs	r3, #1
 80111de:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80111e0:	f7fe feb2 	bl	800ff48 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80111e4:	f000 fd00 	bl	8011be8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80111e8:	f7fe fe80 	bl	800feec <vPortEnterCritical>
 80111ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80111f2:	b25b      	sxtb	r3, r3
 80111f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80111f8:	d103      	bne.n	8011202 <xQueueSemaphoreTake+0x132>
 80111fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111fc:	2200      	movs	r2, #0
 80111fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011204:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011208:	b25b      	sxtb	r3, r3
 801120a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801120e:	d103      	bne.n	8011218 <xQueueSemaphoreTake+0x148>
 8011210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011212:	2200      	movs	r2, #0
 8011214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011218:	f7fe fe96 	bl	800ff48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801121c:	463a      	mov	r2, r7
 801121e:	f107 030c 	add.w	r3, r7, #12
 8011222:	4611      	mov	r1, r2
 8011224:	4618      	mov	r0, r3
 8011226:	f000 ffad 	bl	8012184 <xTaskCheckForTimeOut>
 801122a:	4603      	mov	r3, r0
 801122c:	2b00      	cmp	r3, #0
 801122e:	d132      	bne.n	8011296 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011230:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011232:	f000 f9ee 	bl	8011612 <prvIsQueueEmpty>
 8011236:	4603      	mov	r3, r0
 8011238:	2b00      	cmp	r3, #0
 801123a:	d026      	beq.n	801128a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801123c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d109      	bne.n	8011258 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8011244:	f7fe fe52 	bl	800feec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801124a:	689b      	ldr	r3, [r3, #8]
 801124c:	4618      	mov	r0, r3
 801124e:	f001 f92b 	bl	80124a8 <xTaskPriorityInherit>
 8011252:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011254:	f7fe fe78 	bl	800ff48 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801125a:	3324      	adds	r3, #36	; 0x24
 801125c:	683a      	ldr	r2, [r7, #0]
 801125e:	4611      	mov	r1, r2
 8011260:	4618      	mov	r0, r3
 8011262:	f000 fec7 	bl	8011ff4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011266:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011268:	f000 f981 	bl	801156e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801126c:	f000 fd02 	bl	8011c74 <xTaskResumeAll>
 8011270:	4603      	mov	r3, r0
 8011272:	2b00      	cmp	r3, #0
 8011274:	f47f af69 	bne.w	801114a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8011278:	4b18      	ldr	r3, [pc, #96]	; (80112dc <xQueueSemaphoreTake+0x20c>)
 801127a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801127e:	601a      	str	r2, [r3, #0]
 8011280:	f3bf 8f4f 	dsb	sy
 8011284:	f3bf 8f6f 	isb	sy
 8011288:	e75f      	b.n	801114a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801128a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801128c:	f000 f96f 	bl	801156e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011290:	f000 fcf0 	bl	8011c74 <xTaskResumeAll>
 8011294:	e759      	b.n	801114a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011296:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011298:	f000 f969 	bl	801156e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801129c:	f000 fcea 	bl	8011c74 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80112a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112a2:	f000 f9b6 	bl	8011612 <prvIsQueueEmpty>
 80112a6:	4603      	mov	r3, r0
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	f43f af4e 	beq.w	801114a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80112ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d00d      	beq.n	80112d0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80112b4:	f7fe fe1a 	bl	800feec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80112b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112ba:	f000 f8b0 	bl	801141e <prvGetDisinheritPriorityAfterTimeout>
 80112be:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80112c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112c2:	689b      	ldr	r3, [r3, #8]
 80112c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80112c6:	4618      	mov	r0, r3
 80112c8:	f001 f9c2 	bl	8012650 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80112cc:	f7fe fe3c 	bl	800ff48 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80112d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80112d2:	4618      	mov	r0, r3
 80112d4:	3738      	adds	r7, #56	; 0x38
 80112d6:	46bd      	mov	sp, r7
 80112d8:	bd80      	pop	{r7, pc}
 80112da:	bf00      	nop
 80112dc:	e000ed04 	.word	0xe000ed04

080112e0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b08e      	sub	sp, #56	; 0x38
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	60f8      	str	r0, [r7, #12]
 80112e8:	60b9      	str	r1, [r7, #8]
 80112ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80112f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d109      	bne.n	801130a <xQueueReceiveFromISR+0x2a>
 80112f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112fa:	f383 8811 	msr	BASEPRI, r3
 80112fe:	f3bf 8f6f 	isb	sy
 8011302:	f3bf 8f4f 	dsb	sy
 8011306:	623b      	str	r3, [r7, #32]
 8011308:	e7fe      	b.n	8011308 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d103      	bne.n	8011318 <xQueueReceiveFromISR+0x38>
 8011310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011314:	2b00      	cmp	r3, #0
 8011316:	d101      	bne.n	801131c <xQueueReceiveFromISR+0x3c>
 8011318:	2301      	movs	r3, #1
 801131a:	e000      	b.n	801131e <xQueueReceiveFromISR+0x3e>
 801131c:	2300      	movs	r3, #0
 801131e:	2b00      	cmp	r3, #0
 8011320:	d109      	bne.n	8011336 <xQueueReceiveFromISR+0x56>
 8011322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011326:	f383 8811 	msr	BASEPRI, r3
 801132a:	f3bf 8f6f 	isb	sy
 801132e:	f3bf 8f4f 	dsb	sy
 8011332:	61fb      	str	r3, [r7, #28]
 8011334:	e7fe      	b.n	8011334 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011336:	f7fe feb5 	bl	80100a4 <vPortValidateInterruptPriority>
	__asm volatile
 801133a:	f3ef 8211 	mrs	r2, BASEPRI
 801133e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011342:	f383 8811 	msr	BASEPRI, r3
 8011346:	f3bf 8f6f 	isb	sy
 801134a:	f3bf 8f4f 	dsb	sy
 801134e:	61ba      	str	r2, [r7, #24]
 8011350:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011352:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011354:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801135a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801135c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801135e:	2b00      	cmp	r3, #0
 8011360:	d02f      	beq.n	80113c2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011364:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801136c:	68b9      	ldr	r1, [r7, #8]
 801136e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011370:	f000 f8d7 	bl	8011522 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011376:	1e5a      	subs	r2, r3, #1
 8011378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801137a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801137c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011380:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011384:	d112      	bne.n	80113ac <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011388:	691b      	ldr	r3, [r3, #16]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d016      	beq.n	80113bc <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801138e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011390:	3310      	adds	r3, #16
 8011392:	4618      	mov	r0, r3
 8011394:	f000 fe7c 	bl	8012090 <xTaskRemoveFromEventList>
 8011398:	4603      	mov	r3, r0
 801139a:	2b00      	cmp	r3, #0
 801139c:	d00e      	beq.n	80113bc <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d00b      	beq.n	80113bc <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	2201      	movs	r2, #1
 80113a8:	601a      	str	r2, [r3, #0]
 80113aa:	e007      	b.n	80113bc <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80113ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80113b0:	3301      	adds	r3, #1
 80113b2:	b2db      	uxtb	r3, r3
 80113b4:	b25a      	sxtb	r2, r3
 80113b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80113bc:	2301      	movs	r3, #1
 80113be:	637b      	str	r3, [r7, #52]	; 0x34
 80113c0:	e001      	b.n	80113c6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80113c2:	2300      	movs	r3, #0
 80113c4:	637b      	str	r3, [r7, #52]	; 0x34
 80113c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113c8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80113ca:	693b      	ldr	r3, [r7, #16]
 80113cc:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80113d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80113d2:	4618      	mov	r0, r3
 80113d4:	3738      	adds	r7, #56	; 0x38
 80113d6:	46bd      	mov	sp, r7
 80113d8:	bd80      	pop	{r7, pc}

080113da <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80113da:	b580      	push	{r7, lr}
 80113dc:	b084      	sub	sp, #16
 80113de:	af00      	add	r7, sp, #0
 80113e0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d109      	bne.n	8011400 <vQueueDelete+0x26>
	__asm volatile
 80113ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113f0:	f383 8811 	msr	BASEPRI, r3
 80113f4:	f3bf 8f6f 	isb	sy
 80113f8:	f3bf 8f4f 	dsb	sy
 80113fc:	60bb      	str	r3, [r7, #8]
 80113fe:	e7fe      	b.n	80113fe <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011400:	68f8      	ldr	r0, [r7, #12]
 8011402:	f000 f95d 	bl	80116c0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801140c:	2b00      	cmp	r3, #0
 801140e:	d102      	bne.n	8011416 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8011410:	68f8      	ldr	r0, [r7, #12]
 8011412:	f7fe ff47 	bl	80102a4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011416:	bf00      	nop
 8011418:	3710      	adds	r7, #16
 801141a:	46bd      	mov	sp, r7
 801141c:	bd80      	pop	{r7, pc}

0801141e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801141e:	b480      	push	{r7}
 8011420:	b085      	sub	sp, #20
 8011422:	af00      	add	r7, sp, #0
 8011424:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801142a:	2b00      	cmp	r3, #0
 801142c:	d006      	beq.n	801143c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8011438:	60fb      	str	r3, [r7, #12]
 801143a:	e001      	b.n	8011440 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801143c:	2300      	movs	r3, #0
 801143e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011440:	68fb      	ldr	r3, [r7, #12]
	}
 8011442:	4618      	mov	r0, r3
 8011444:	3714      	adds	r7, #20
 8011446:	46bd      	mov	sp, r7
 8011448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801144c:	4770      	bx	lr

0801144e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801144e:	b580      	push	{r7, lr}
 8011450:	b086      	sub	sp, #24
 8011452:	af00      	add	r7, sp, #0
 8011454:	60f8      	str	r0, [r7, #12]
 8011456:	60b9      	str	r1, [r7, #8]
 8011458:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801145a:	2300      	movs	r3, #0
 801145c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011462:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011468:	2b00      	cmp	r3, #0
 801146a:	d10d      	bne.n	8011488 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d14d      	bne.n	8011510 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	689b      	ldr	r3, [r3, #8]
 8011478:	4618      	mov	r0, r3
 801147a:	f001 f87d 	bl	8012578 <xTaskPriorityDisinherit>
 801147e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	2200      	movs	r2, #0
 8011484:	609a      	str	r2, [r3, #8]
 8011486:	e043      	b.n	8011510 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d119      	bne.n	80114c2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	6858      	ldr	r0, [r3, #4]
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011496:	461a      	mov	r2, r3
 8011498:	68b9      	ldr	r1, [r7, #8]
 801149a:	f001 ffc7 	bl	801342c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	685a      	ldr	r2, [r3, #4]
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114a6:	441a      	add	r2, r3
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	685a      	ldr	r2, [r3, #4]
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	689b      	ldr	r3, [r3, #8]
 80114b4:	429a      	cmp	r2, r3
 80114b6:	d32b      	bcc.n	8011510 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	681a      	ldr	r2, [r3, #0]
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	605a      	str	r2, [r3, #4]
 80114c0:	e026      	b.n	8011510 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	68d8      	ldr	r0, [r3, #12]
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114ca:	461a      	mov	r2, r3
 80114cc:	68b9      	ldr	r1, [r7, #8]
 80114ce:	f001 ffad 	bl	801342c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	68da      	ldr	r2, [r3, #12]
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114da:	425b      	negs	r3, r3
 80114dc:	441a      	add	r2, r3
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	68da      	ldr	r2, [r3, #12]
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	429a      	cmp	r2, r3
 80114ec:	d207      	bcs.n	80114fe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	689a      	ldr	r2, [r3, #8]
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114f6:	425b      	negs	r3, r3
 80114f8:	441a      	add	r2, r3
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	2b02      	cmp	r3, #2
 8011502:	d105      	bne.n	8011510 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011504:	693b      	ldr	r3, [r7, #16]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d002      	beq.n	8011510 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801150a:	693b      	ldr	r3, [r7, #16]
 801150c:	3b01      	subs	r3, #1
 801150e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011510:	693b      	ldr	r3, [r7, #16]
 8011512:	1c5a      	adds	r2, r3, #1
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011518:	697b      	ldr	r3, [r7, #20]
}
 801151a:	4618      	mov	r0, r3
 801151c:	3718      	adds	r7, #24
 801151e:	46bd      	mov	sp, r7
 8011520:	bd80      	pop	{r7, pc}

08011522 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011522:	b580      	push	{r7, lr}
 8011524:	b082      	sub	sp, #8
 8011526:	af00      	add	r7, sp, #0
 8011528:	6078      	str	r0, [r7, #4]
 801152a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011530:	2b00      	cmp	r3, #0
 8011532:	d018      	beq.n	8011566 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	68da      	ldr	r2, [r3, #12]
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801153c:	441a      	add	r2, r3
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	68da      	ldr	r2, [r3, #12]
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	689b      	ldr	r3, [r3, #8]
 801154a:	429a      	cmp	r2, r3
 801154c:	d303      	bcc.n	8011556 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681a      	ldr	r2, [r3, #0]
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	68d9      	ldr	r1, [r3, #12]
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801155e:	461a      	mov	r2, r3
 8011560:	6838      	ldr	r0, [r7, #0]
 8011562:	f001 ff63 	bl	801342c <memcpy>
	}
}
 8011566:	bf00      	nop
 8011568:	3708      	adds	r7, #8
 801156a:	46bd      	mov	sp, r7
 801156c:	bd80      	pop	{r7, pc}

0801156e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801156e:	b580      	push	{r7, lr}
 8011570:	b084      	sub	sp, #16
 8011572:	af00      	add	r7, sp, #0
 8011574:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011576:	f7fe fcb9 	bl	800feec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011580:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011582:	e011      	b.n	80115a8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011588:	2b00      	cmp	r3, #0
 801158a:	d012      	beq.n	80115b2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	3324      	adds	r3, #36	; 0x24
 8011590:	4618      	mov	r0, r3
 8011592:	f000 fd7d 	bl	8012090 <xTaskRemoveFromEventList>
 8011596:	4603      	mov	r3, r0
 8011598:	2b00      	cmp	r3, #0
 801159a:	d001      	beq.n	80115a0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801159c:	f000 fe52 	bl	8012244 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80115a0:	7bfb      	ldrb	r3, [r7, #15]
 80115a2:	3b01      	subs	r3, #1
 80115a4:	b2db      	uxtb	r3, r3
 80115a6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80115a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	dce9      	bgt.n	8011584 <prvUnlockQueue+0x16>
 80115b0:	e000      	b.n	80115b4 <prvUnlockQueue+0x46>
					break;
 80115b2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	22ff      	movs	r2, #255	; 0xff
 80115b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80115bc:	f7fe fcc4 	bl	800ff48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80115c0:	f7fe fc94 	bl	800feec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80115ca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80115cc:	e011      	b.n	80115f2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	691b      	ldr	r3, [r3, #16]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d012      	beq.n	80115fc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	3310      	adds	r3, #16
 80115da:	4618      	mov	r0, r3
 80115dc:	f000 fd58 	bl	8012090 <xTaskRemoveFromEventList>
 80115e0:	4603      	mov	r3, r0
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d001      	beq.n	80115ea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80115e6:	f000 fe2d 	bl	8012244 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80115ea:	7bbb      	ldrb	r3, [r7, #14]
 80115ec:	3b01      	subs	r3, #1
 80115ee:	b2db      	uxtb	r3, r3
 80115f0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80115f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	dce9      	bgt.n	80115ce <prvUnlockQueue+0x60>
 80115fa:	e000      	b.n	80115fe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80115fc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	22ff      	movs	r2, #255	; 0xff
 8011602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011606:	f7fe fc9f 	bl	800ff48 <vPortExitCritical>
}
 801160a:	bf00      	nop
 801160c:	3710      	adds	r7, #16
 801160e:	46bd      	mov	sp, r7
 8011610:	bd80      	pop	{r7, pc}

08011612 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011612:	b580      	push	{r7, lr}
 8011614:	b084      	sub	sp, #16
 8011616:	af00      	add	r7, sp, #0
 8011618:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801161a:	f7fe fc67 	bl	800feec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011622:	2b00      	cmp	r3, #0
 8011624:	d102      	bne.n	801162c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011626:	2301      	movs	r3, #1
 8011628:	60fb      	str	r3, [r7, #12]
 801162a:	e001      	b.n	8011630 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801162c:	2300      	movs	r3, #0
 801162e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011630:	f7fe fc8a 	bl	800ff48 <vPortExitCritical>

	return xReturn;
 8011634:	68fb      	ldr	r3, [r7, #12]
}
 8011636:	4618      	mov	r0, r3
 8011638:	3710      	adds	r7, #16
 801163a:	46bd      	mov	sp, r7
 801163c:	bd80      	pop	{r7, pc}

0801163e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801163e:	b580      	push	{r7, lr}
 8011640:	b084      	sub	sp, #16
 8011642:	af00      	add	r7, sp, #0
 8011644:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011646:	f7fe fc51 	bl	800feec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011652:	429a      	cmp	r2, r3
 8011654:	d102      	bne.n	801165c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011656:	2301      	movs	r3, #1
 8011658:	60fb      	str	r3, [r7, #12]
 801165a:	e001      	b.n	8011660 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801165c:	2300      	movs	r3, #0
 801165e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011660:	f7fe fc72 	bl	800ff48 <vPortExitCritical>

	return xReturn;
 8011664:	68fb      	ldr	r3, [r7, #12]
}
 8011666:	4618      	mov	r0, r3
 8011668:	3710      	adds	r7, #16
 801166a:	46bd      	mov	sp, r7
 801166c:	bd80      	pop	{r7, pc}
	...

08011670 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011670:	b480      	push	{r7}
 8011672:	b085      	sub	sp, #20
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
 8011678:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801167a:	2300      	movs	r3, #0
 801167c:	60fb      	str	r3, [r7, #12]
 801167e:	e014      	b.n	80116aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011680:	4a0e      	ldr	r2, [pc, #56]	; (80116bc <vQueueAddToRegistry+0x4c>)
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d10b      	bne.n	80116a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801168c:	490b      	ldr	r1, [pc, #44]	; (80116bc <vQueueAddToRegistry+0x4c>)
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	683a      	ldr	r2, [r7, #0]
 8011692:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011696:	4a09      	ldr	r2, [pc, #36]	; (80116bc <vQueueAddToRegistry+0x4c>)
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	00db      	lsls	r3, r3, #3
 801169c:	4413      	add	r3, r2
 801169e:	687a      	ldr	r2, [r7, #4]
 80116a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80116a2:	e005      	b.n	80116b0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	3301      	adds	r3, #1
 80116a8:	60fb      	str	r3, [r7, #12]
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	2b07      	cmp	r3, #7
 80116ae:	d9e7      	bls.n	8011680 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80116b0:	bf00      	nop
 80116b2:	3714      	adds	r7, #20
 80116b4:	46bd      	mov	sp, r7
 80116b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ba:	4770      	bx	lr
 80116bc:	2002e3ac 	.word	0x2002e3ac

080116c0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80116c0:	b480      	push	{r7}
 80116c2:	b085      	sub	sp, #20
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80116c8:	2300      	movs	r3, #0
 80116ca:	60fb      	str	r3, [r7, #12]
 80116cc:	e016      	b.n	80116fc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80116ce:	4a10      	ldr	r2, [pc, #64]	; (8011710 <vQueueUnregisterQueue+0x50>)
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	00db      	lsls	r3, r3, #3
 80116d4:	4413      	add	r3, r2
 80116d6:	685b      	ldr	r3, [r3, #4]
 80116d8:	687a      	ldr	r2, [r7, #4]
 80116da:	429a      	cmp	r2, r3
 80116dc:	d10b      	bne.n	80116f6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80116de:	4a0c      	ldr	r2, [pc, #48]	; (8011710 <vQueueUnregisterQueue+0x50>)
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	2100      	movs	r1, #0
 80116e4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80116e8:	4a09      	ldr	r2, [pc, #36]	; (8011710 <vQueueUnregisterQueue+0x50>)
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	00db      	lsls	r3, r3, #3
 80116ee:	4413      	add	r3, r2
 80116f0:	2200      	movs	r2, #0
 80116f2:	605a      	str	r2, [r3, #4]
				break;
 80116f4:	e005      	b.n	8011702 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	3301      	adds	r3, #1
 80116fa:	60fb      	str	r3, [r7, #12]
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	2b07      	cmp	r3, #7
 8011700:	d9e5      	bls.n	80116ce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011702:	bf00      	nop
 8011704:	3714      	adds	r7, #20
 8011706:	46bd      	mov	sp, r7
 8011708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170c:	4770      	bx	lr
 801170e:	bf00      	nop
 8011710:	2002e3ac 	.word	0x2002e3ac

08011714 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011714:	b580      	push	{r7, lr}
 8011716:	b086      	sub	sp, #24
 8011718:	af00      	add	r7, sp, #0
 801171a:	60f8      	str	r0, [r7, #12]
 801171c:	60b9      	str	r1, [r7, #8]
 801171e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011724:	f7fe fbe2 	bl	800feec <vPortEnterCritical>
 8011728:	697b      	ldr	r3, [r7, #20]
 801172a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801172e:	b25b      	sxtb	r3, r3
 8011730:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011734:	d103      	bne.n	801173e <vQueueWaitForMessageRestricted+0x2a>
 8011736:	697b      	ldr	r3, [r7, #20]
 8011738:	2200      	movs	r2, #0
 801173a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801173e:	697b      	ldr	r3, [r7, #20]
 8011740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011744:	b25b      	sxtb	r3, r3
 8011746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801174a:	d103      	bne.n	8011754 <vQueueWaitForMessageRestricted+0x40>
 801174c:	697b      	ldr	r3, [r7, #20]
 801174e:	2200      	movs	r2, #0
 8011750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011754:	f7fe fbf8 	bl	800ff48 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011758:	697b      	ldr	r3, [r7, #20]
 801175a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801175c:	2b00      	cmp	r3, #0
 801175e:	d106      	bne.n	801176e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011760:	697b      	ldr	r3, [r7, #20]
 8011762:	3324      	adds	r3, #36	; 0x24
 8011764:	687a      	ldr	r2, [r7, #4]
 8011766:	68b9      	ldr	r1, [r7, #8]
 8011768:	4618      	mov	r0, r3
 801176a:	f000 fc67 	bl	801203c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801176e:	6978      	ldr	r0, [r7, #20]
 8011770:	f7ff fefd 	bl	801156e <prvUnlockQueue>
	}
 8011774:	bf00      	nop
 8011776:	3718      	adds	r7, #24
 8011778:	46bd      	mov	sp, r7
 801177a:	bd80      	pop	{r7, pc}

0801177c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801177c:	b580      	push	{r7, lr}
 801177e:	b08e      	sub	sp, #56	; 0x38
 8011780:	af04      	add	r7, sp, #16
 8011782:	60f8      	str	r0, [r7, #12]
 8011784:	60b9      	str	r1, [r7, #8]
 8011786:	607a      	str	r2, [r7, #4]
 8011788:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801178a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801178c:	2b00      	cmp	r3, #0
 801178e:	d109      	bne.n	80117a4 <xTaskCreateStatic+0x28>
 8011790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011794:	f383 8811 	msr	BASEPRI, r3
 8011798:	f3bf 8f6f 	isb	sy
 801179c:	f3bf 8f4f 	dsb	sy
 80117a0:	623b      	str	r3, [r7, #32]
 80117a2:	e7fe      	b.n	80117a2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80117a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d109      	bne.n	80117be <xTaskCreateStatic+0x42>
 80117aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117ae:	f383 8811 	msr	BASEPRI, r3
 80117b2:	f3bf 8f6f 	isb	sy
 80117b6:	f3bf 8f4f 	dsb	sy
 80117ba:	61fb      	str	r3, [r7, #28]
 80117bc:	e7fe      	b.n	80117bc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80117be:	235c      	movs	r3, #92	; 0x5c
 80117c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80117c2:	693b      	ldr	r3, [r7, #16]
 80117c4:	2b5c      	cmp	r3, #92	; 0x5c
 80117c6:	d009      	beq.n	80117dc <xTaskCreateStatic+0x60>
 80117c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117cc:	f383 8811 	msr	BASEPRI, r3
 80117d0:	f3bf 8f6f 	isb	sy
 80117d4:	f3bf 8f4f 	dsb	sy
 80117d8:	61bb      	str	r3, [r7, #24]
 80117da:	e7fe      	b.n	80117da <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80117dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80117de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d01e      	beq.n	8011822 <xTaskCreateStatic+0xa6>
 80117e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d01b      	beq.n	8011822 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80117ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117ec:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80117ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80117f2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80117f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117f6:	2202      	movs	r2, #2
 80117f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80117fc:	2300      	movs	r3, #0
 80117fe:	9303      	str	r3, [sp, #12]
 8011800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011802:	9302      	str	r3, [sp, #8]
 8011804:	f107 0314 	add.w	r3, r7, #20
 8011808:	9301      	str	r3, [sp, #4]
 801180a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801180c:	9300      	str	r3, [sp, #0]
 801180e:	683b      	ldr	r3, [r7, #0]
 8011810:	687a      	ldr	r2, [r7, #4]
 8011812:	68b9      	ldr	r1, [r7, #8]
 8011814:	68f8      	ldr	r0, [r7, #12]
 8011816:	f000 f850 	bl	80118ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801181a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801181c:	f000 f8dc 	bl	80119d8 <prvAddNewTaskToReadyList>
 8011820:	e001      	b.n	8011826 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8011822:	2300      	movs	r3, #0
 8011824:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011826:	697b      	ldr	r3, [r7, #20]
	}
 8011828:	4618      	mov	r0, r3
 801182a:	3728      	adds	r7, #40	; 0x28
 801182c:	46bd      	mov	sp, r7
 801182e:	bd80      	pop	{r7, pc}

08011830 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011830:	b580      	push	{r7, lr}
 8011832:	b08c      	sub	sp, #48	; 0x30
 8011834:	af04      	add	r7, sp, #16
 8011836:	60f8      	str	r0, [r7, #12]
 8011838:	60b9      	str	r1, [r7, #8]
 801183a:	603b      	str	r3, [r7, #0]
 801183c:	4613      	mov	r3, r2
 801183e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011840:	88fb      	ldrh	r3, [r7, #6]
 8011842:	009b      	lsls	r3, r3, #2
 8011844:	4618      	mov	r0, r3
 8011846:	f7fe fc6b 	bl	8010120 <pvPortMalloc>
 801184a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801184c:	697b      	ldr	r3, [r7, #20]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d00e      	beq.n	8011870 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011852:	205c      	movs	r0, #92	; 0x5c
 8011854:	f7fe fc64 	bl	8010120 <pvPortMalloc>
 8011858:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801185a:	69fb      	ldr	r3, [r7, #28]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d003      	beq.n	8011868 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011860:	69fb      	ldr	r3, [r7, #28]
 8011862:	697a      	ldr	r2, [r7, #20]
 8011864:	631a      	str	r2, [r3, #48]	; 0x30
 8011866:	e005      	b.n	8011874 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011868:	6978      	ldr	r0, [r7, #20]
 801186a:	f7fe fd1b 	bl	80102a4 <vPortFree>
 801186e:	e001      	b.n	8011874 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011870:	2300      	movs	r3, #0
 8011872:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011874:	69fb      	ldr	r3, [r7, #28]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d017      	beq.n	80118aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801187a:	69fb      	ldr	r3, [r7, #28]
 801187c:	2200      	movs	r2, #0
 801187e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011882:	88fa      	ldrh	r2, [r7, #6]
 8011884:	2300      	movs	r3, #0
 8011886:	9303      	str	r3, [sp, #12]
 8011888:	69fb      	ldr	r3, [r7, #28]
 801188a:	9302      	str	r3, [sp, #8]
 801188c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801188e:	9301      	str	r3, [sp, #4]
 8011890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011892:	9300      	str	r3, [sp, #0]
 8011894:	683b      	ldr	r3, [r7, #0]
 8011896:	68b9      	ldr	r1, [r7, #8]
 8011898:	68f8      	ldr	r0, [r7, #12]
 801189a:	f000 f80e 	bl	80118ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801189e:	69f8      	ldr	r0, [r7, #28]
 80118a0:	f000 f89a 	bl	80119d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80118a4:	2301      	movs	r3, #1
 80118a6:	61bb      	str	r3, [r7, #24]
 80118a8:	e002      	b.n	80118b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80118aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80118ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80118b0:	69bb      	ldr	r3, [r7, #24]
	}
 80118b2:	4618      	mov	r0, r3
 80118b4:	3720      	adds	r7, #32
 80118b6:	46bd      	mov	sp, r7
 80118b8:	bd80      	pop	{r7, pc}

080118ba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80118ba:	b580      	push	{r7, lr}
 80118bc:	b088      	sub	sp, #32
 80118be:	af00      	add	r7, sp, #0
 80118c0:	60f8      	str	r0, [r7, #12]
 80118c2:	60b9      	str	r1, [r7, #8]
 80118c4:	607a      	str	r2, [r7, #4]
 80118c6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80118c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	009b      	lsls	r3, r3, #2
 80118d0:	461a      	mov	r2, r3
 80118d2:	21a5      	movs	r1, #165	; 0xa5
 80118d4:	f001 fdb5 	bl	8013442 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80118d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80118e2:	3b01      	subs	r3, #1
 80118e4:	009b      	lsls	r3, r3, #2
 80118e6:	4413      	add	r3, r2
 80118e8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80118ea:	69bb      	ldr	r3, [r7, #24]
 80118ec:	f023 0307 	bic.w	r3, r3, #7
 80118f0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80118f2:	69bb      	ldr	r3, [r7, #24]
 80118f4:	f003 0307 	and.w	r3, r3, #7
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d009      	beq.n	8011910 <prvInitialiseNewTask+0x56>
 80118fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011900:	f383 8811 	msr	BASEPRI, r3
 8011904:	f3bf 8f6f 	isb	sy
 8011908:	f3bf 8f4f 	dsb	sy
 801190c:	617b      	str	r3, [r7, #20]
 801190e:	e7fe      	b.n	801190e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011910:	68bb      	ldr	r3, [r7, #8]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d01f      	beq.n	8011956 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011916:	2300      	movs	r3, #0
 8011918:	61fb      	str	r3, [r7, #28]
 801191a:	e012      	b.n	8011942 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801191c:	68ba      	ldr	r2, [r7, #8]
 801191e:	69fb      	ldr	r3, [r7, #28]
 8011920:	4413      	add	r3, r2
 8011922:	7819      	ldrb	r1, [r3, #0]
 8011924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011926:	69fb      	ldr	r3, [r7, #28]
 8011928:	4413      	add	r3, r2
 801192a:	3334      	adds	r3, #52	; 0x34
 801192c:	460a      	mov	r2, r1
 801192e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011930:	68ba      	ldr	r2, [r7, #8]
 8011932:	69fb      	ldr	r3, [r7, #28]
 8011934:	4413      	add	r3, r2
 8011936:	781b      	ldrb	r3, [r3, #0]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d006      	beq.n	801194a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801193c:	69fb      	ldr	r3, [r7, #28]
 801193e:	3301      	adds	r3, #1
 8011940:	61fb      	str	r3, [r7, #28]
 8011942:	69fb      	ldr	r3, [r7, #28]
 8011944:	2b0f      	cmp	r3, #15
 8011946:	d9e9      	bls.n	801191c <prvInitialiseNewTask+0x62>
 8011948:	e000      	b.n	801194c <prvInitialiseNewTask+0x92>
			{
				break;
 801194a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801194c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801194e:	2200      	movs	r2, #0
 8011950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011954:	e003      	b.n	801195e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011958:	2200      	movs	r2, #0
 801195a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801195e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011960:	2b37      	cmp	r3, #55	; 0x37
 8011962:	d901      	bls.n	8011968 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011964:	2337      	movs	r3, #55	; 0x37
 8011966:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801196a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801196c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801196e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011970:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011972:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011976:	2200      	movs	r2, #0
 8011978:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801197a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801197c:	3304      	adds	r3, #4
 801197e:	4618      	mov	r0, r3
 8011980:	f7fe fdc6 	bl	8010510 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011986:	3318      	adds	r3, #24
 8011988:	4618      	mov	r0, r3
 801198a:	f7fe fdc1 	bl	8010510 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801198e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011992:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011996:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801199a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801199c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801199e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80119a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80119a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119a6:	2200      	movs	r2, #0
 80119a8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80119aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119ac:	2200      	movs	r2, #0
 80119ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80119b2:	683a      	ldr	r2, [r7, #0]
 80119b4:	68f9      	ldr	r1, [r7, #12]
 80119b6:	69b8      	ldr	r0, [r7, #24]
 80119b8:	f7fe f972 	bl	800fca0 <pxPortInitialiseStack>
 80119bc:	4602      	mov	r2, r0
 80119be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80119c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d002      	beq.n	80119ce <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80119c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80119cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80119ce:	bf00      	nop
 80119d0:	3720      	adds	r7, #32
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}
	...

080119d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b082      	sub	sp, #8
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80119e0:	f7fe fa84 	bl	800feec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80119e4:	4b2d      	ldr	r3, [pc, #180]	; (8011a9c <prvAddNewTaskToReadyList+0xc4>)
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	3301      	adds	r3, #1
 80119ea:	4a2c      	ldr	r2, [pc, #176]	; (8011a9c <prvAddNewTaskToReadyList+0xc4>)
 80119ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80119ee:	4b2c      	ldr	r3, [pc, #176]	; (8011aa0 <prvAddNewTaskToReadyList+0xc8>)
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d109      	bne.n	8011a0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80119f6:	4a2a      	ldr	r2, [pc, #168]	; (8011aa0 <prvAddNewTaskToReadyList+0xc8>)
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80119fc:	4b27      	ldr	r3, [pc, #156]	; (8011a9c <prvAddNewTaskToReadyList+0xc4>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	2b01      	cmp	r3, #1
 8011a02:	d110      	bne.n	8011a26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011a04:	f000 fc68 	bl	80122d8 <prvInitialiseTaskLists>
 8011a08:	e00d      	b.n	8011a26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011a0a:	4b26      	ldr	r3, [pc, #152]	; (8011aa4 <prvAddNewTaskToReadyList+0xcc>)
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d109      	bne.n	8011a26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011a12:	4b23      	ldr	r3, [pc, #140]	; (8011aa0 <prvAddNewTaskToReadyList+0xc8>)
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a1c:	429a      	cmp	r2, r3
 8011a1e:	d802      	bhi.n	8011a26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011a20:	4a1f      	ldr	r2, [pc, #124]	; (8011aa0 <prvAddNewTaskToReadyList+0xc8>)
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011a26:	4b20      	ldr	r3, [pc, #128]	; (8011aa8 <prvAddNewTaskToReadyList+0xd0>)
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	3301      	adds	r3, #1
 8011a2c:	4a1e      	ldr	r2, [pc, #120]	; (8011aa8 <prvAddNewTaskToReadyList+0xd0>)
 8011a2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011a30:	4b1d      	ldr	r3, [pc, #116]	; (8011aa8 <prvAddNewTaskToReadyList+0xd0>)
 8011a32:	681a      	ldr	r2, [r3, #0]
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a3c:	4b1b      	ldr	r3, [pc, #108]	; (8011aac <prvAddNewTaskToReadyList+0xd4>)
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	429a      	cmp	r2, r3
 8011a42:	d903      	bls.n	8011a4c <prvAddNewTaskToReadyList+0x74>
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a48:	4a18      	ldr	r2, [pc, #96]	; (8011aac <prvAddNewTaskToReadyList+0xd4>)
 8011a4a:	6013      	str	r3, [r2, #0]
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a50:	4613      	mov	r3, r2
 8011a52:	009b      	lsls	r3, r3, #2
 8011a54:	4413      	add	r3, r2
 8011a56:	009b      	lsls	r3, r3, #2
 8011a58:	4a15      	ldr	r2, [pc, #84]	; (8011ab0 <prvAddNewTaskToReadyList+0xd8>)
 8011a5a:	441a      	add	r2, r3
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	3304      	adds	r3, #4
 8011a60:	4619      	mov	r1, r3
 8011a62:	4610      	mov	r0, r2
 8011a64:	f7fe fd61 	bl	801052a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011a68:	f7fe fa6e 	bl	800ff48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011a6c:	4b0d      	ldr	r3, [pc, #52]	; (8011aa4 <prvAddNewTaskToReadyList+0xcc>)
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d00e      	beq.n	8011a92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011a74:	4b0a      	ldr	r3, [pc, #40]	; (8011aa0 <prvAddNewTaskToReadyList+0xc8>)
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a7e:	429a      	cmp	r2, r3
 8011a80:	d207      	bcs.n	8011a92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011a82:	4b0c      	ldr	r3, [pc, #48]	; (8011ab4 <prvAddNewTaskToReadyList+0xdc>)
 8011a84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a88:	601a      	str	r2, [r3, #0]
 8011a8a:	f3bf 8f4f 	dsb	sy
 8011a8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011a92:	bf00      	nop
 8011a94:	3708      	adds	r7, #8
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}
 8011a9a:	bf00      	nop
 8011a9c:	2002df04 	.word	0x2002df04
 8011aa0:	2002da30 	.word	0x2002da30
 8011aa4:	2002df10 	.word	0x2002df10
 8011aa8:	2002df20 	.word	0x2002df20
 8011aac:	2002df0c 	.word	0x2002df0c
 8011ab0:	2002da34 	.word	0x2002da34
 8011ab4:	e000ed04 	.word	0xe000ed04

08011ab8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b084      	sub	sp, #16
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d016      	beq.n	8011af8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011aca:	4b13      	ldr	r3, [pc, #76]	; (8011b18 <vTaskDelay+0x60>)
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d009      	beq.n	8011ae6 <vTaskDelay+0x2e>
 8011ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ad6:	f383 8811 	msr	BASEPRI, r3
 8011ada:	f3bf 8f6f 	isb	sy
 8011ade:	f3bf 8f4f 	dsb	sy
 8011ae2:	60bb      	str	r3, [r7, #8]
 8011ae4:	e7fe      	b.n	8011ae4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8011ae6:	f000 f87f 	bl	8011be8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011aea:	2100      	movs	r1, #0
 8011aec:	6878      	ldr	r0, [r7, #4]
 8011aee:	f001 f899 	bl	8012c24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011af2:	f000 f8bf 	bl	8011c74 <xTaskResumeAll>
 8011af6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d107      	bne.n	8011b0e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8011afe:	4b07      	ldr	r3, [pc, #28]	; (8011b1c <vTaskDelay+0x64>)
 8011b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b04:	601a      	str	r2, [r3, #0]
 8011b06:	f3bf 8f4f 	dsb	sy
 8011b0a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011b0e:	bf00      	nop
 8011b10:	3710      	adds	r7, #16
 8011b12:	46bd      	mov	sp, r7
 8011b14:	bd80      	pop	{r7, pc}
 8011b16:	bf00      	nop
 8011b18:	2002df2c 	.word	0x2002df2c
 8011b1c:	e000ed04 	.word	0xe000ed04

08011b20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b08a      	sub	sp, #40	; 0x28
 8011b24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011b26:	2300      	movs	r3, #0
 8011b28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011b2e:	463a      	mov	r2, r7
 8011b30:	1d39      	adds	r1, r7, #4
 8011b32:	f107 0308 	add.w	r3, r7, #8
 8011b36:	4618      	mov	r0, r3
 8011b38:	f7fe f87e 	bl	800fc38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011b3c:	6839      	ldr	r1, [r7, #0]
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	68ba      	ldr	r2, [r7, #8]
 8011b42:	9202      	str	r2, [sp, #8]
 8011b44:	9301      	str	r3, [sp, #4]
 8011b46:	2300      	movs	r3, #0
 8011b48:	9300      	str	r3, [sp, #0]
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	460a      	mov	r2, r1
 8011b4e:	4920      	ldr	r1, [pc, #128]	; (8011bd0 <vTaskStartScheduler+0xb0>)
 8011b50:	4820      	ldr	r0, [pc, #128]	; (8011bd4 <vTaskStartScheduler+0xb4>)
 8011b52:	f7ff fe13 	bl	801177c <xTaskCreateStatic>
 8011b56:	4602      	mov	r2, r0
 8011b58:	4b1f      	ldr	r3, [pc, #124]	; (8011bd8 <vTaskStartScheduler+0xb8>)
 8011b5a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011b5c:	4b1e      	ldr	r3, [pc, #120]	; (8011bd8 <vTaskStartScheduler+0xb8>)
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d002      	beq.n	8011b6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011b64:	2301      	movs	r3, #1
 8011b66:	617b      	str	r3, [r7, #20]
 8011b68:	e001      	b.n	8011b6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011b6e:	697b      	ldr	r3, [r7, #20]
 8011b70:	2b01      	cmp	r3, #1
 8011b72:	d102      	bne.n	8011b7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011b74:	f001 f8aa 	bl	8012ccc <xTimerCreateTimerTask>
 8011b78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011b7a:	697b      	ldr	r3, [r7, #20]
 8011b7c:	2b01      	cmp	r3, #1
 8011b7e:	d115      	bne.n	8011bac <vTaskStartScheduler+0x8c>
 8011b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b84:	f383 8811 	msr	BASEPRI, r3
 8011b88:	f3bf 8f6f 	isb	sy
 8011b8c:	f3bf 8f4f 	dsb	sy
 8011b90:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011b92:	4b12      	ldr	r3, [pc, #72]	; (8011bdc <vTaskStartScheduler+0xbc>)
 8011b94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011b98:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011b9a:	4b11      	ldr	r3, [pc, #68]	; (8011be0 <vTaskStartScheduler+0xc0>)
 8011b9c:	2201      	movs	r2, #1
 8011b9e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011ba0:	4b10      	ldr	r3, [pc, #64]	; (8011be4 <vTaskStartScheduler+0xc4>)
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011ba6:	f7fe f903 	bl	800fdb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011baa:	e00d      	b.n	8011bc8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011bac:	697b      	ldr	r3, [r7, #20]
 8011bae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011bb2:	d109      	bne.n	8011bc8 <vTaskStartScheduler+0xa8>
 8011bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bb8:	f383 8811 	msr	BASEPRI, r3
 8011bbc:	f3bf 8f6f 	isb	sy
 8011bc0:	f3bf 8f4f 	dsb	sy
 8011bc4:	60fb      	str	r3, [r7, #12]
 8011bc6:	e7fe      	b.n	8011bc6 <vTaskStartScheduler+0xa6>
}
 8011bc8:	bf00      	nop
 8011bca:	3718      	adds	r7, #24
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	bd80      	pop	{r7, pc}
 8011bd0:	08017f90 	.word	0x08017f90
 8011bd4:	0801225d 	.word	0x0801225d
 8011bd8:	2002df28 	.word	0x2002df28
 8011bdc:	2002df24 	.word	0x2002df24
 8011be0:	2002df10 	.word	0x2002df10
 8011be4:	2002df08 	.word	0x2002df08

08011be8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011be8:	b480      	push	{r7}
 8011bea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011bec:	4b04      	ldr	r3, [pc, #16]	; (8011c00 <vTaskSuspendAll+0x18>)
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	3301      	adds	r3, #1
 8011bf2:	4a03      	ldr	r2, [pc, #12]	; (8011c00 <vTaskSuspendAll+0x18>)
 8011bf4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8011bf6:	bf00      	nop
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfe:	4770      	bx	lr
 8011c00:	2002df2c 	.word	0x2002df2c

08011c04 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8011c04:	b480      	push	{r7}
 8011c06:	b083      	sub	sp, #12
 8011c08:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8011c0e:	4b14      	ldr	r3, [pc, #80]	; (8011c60 <prvGetExpectedIdleTime+0x5c>)
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d001      	beq.n	8011c1a <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8011c16:	2301      	movs	r3, #1
 8011c18:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8011c1a:	4b12      	ldr	r3, [pc, #72]	; (8011c64 <prvGetExpectedIdleTime+0x60>)
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d002      	beq.n	8011c2a <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8011c24:	2300      	movs	r3, #0
 8011c26:	607b      	str	r3, [r7, #4]
 8011c28:	e012      	b.n	8011c50 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8011c2a:	4b0f      	ldr	r3, [pc, #60]	; (8011c68 <prvGetExpectedIdleTime+0x64>)
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	2b01      	cmp	r3, #1
 8011c30:	d902      	bls.n	8011c38 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8011c32:	2300      	movs	r3, #0
 8011c34:	607b      	str	r3, [r7, #4]
 8011c36:	e00b      	b.n	8011c50 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8011c38:	683b      	ldr	r3, [r7, #0]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d002      	beq.n	8011c44 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8011c3e:	2300      	movs	r3, #0
 8011c40:	607b      	str	r3, [r7, #4]
 8011c42:	e005      	b.n	8011c50 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8011c44:	4b09      	ldr	r3, [pc, #36]	; (8011c6c <prvGetExpectedIdleTime+0x68>)
 8011c46:	681a      	ldr	r2, [r3, #0]
 8011c48:	4b09      	ldr	r3, [pc, #36]	; (8011c70 <prvGetExpectedIdleTime+0x6c>)
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	1ad3      	subs	r3, r2, r3
 8011c4e:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8011c50:	687b      	ldr	r3, [r7, #4]
	}
 8011c52:	4618      	mov	r0, r3
 8011c54:	370c      	adds	r7, #12
 8011c56:	46bd      	mov	sp, r7
 8011c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5c:	4770      	bx	lr
 8011c5e:	bf00      	nop
 8011c60:	2002df0c 	.word	0x2002df0c
 8011c64:	2002da30 	.word	0x2002da30
 8011c68:	2002da34 	.word	0x2002da34
 8011c6c:	2002df24 	.word	0x2002df24
 8011c70:	2002df08 	.word	0x2002df08

08011c74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b084      	sub	sp, #16
 8011c78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011c7e:	2300      	movs	r3, #0
 8011c80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011c82:	4b41      	ldr	r3, [pc, #260]	; (8011d88 <xTaskResumeAll+0x114>)
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d109      	bne.n	8011c9e <xTaskResumeAll+0x2a>
 8011c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c8e:	f383 8811 	msr	BASEPRI, r3
 8011c92:	f3bf 8f6f 	isb	sy
 8011c96:	f3bf 8f4f 	dsb	sy
 8011c9a:	603b      	str	r3, [r7, #0]
 8011c9c:	e7fe      	b.n	8011c9c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011c9e:	f7fe f925 	bl	800feec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011ca2:	4b39      	ldr	r3, [pc, #228]	; (8011d88 <xTaskResumeAll+0x114>)
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	3b01      	subs	r3, #1
 8011ca8:	4a37      	ldr	r2, [pc, #220]	; (8011d88 <xTaskResumeAll+0x114>)
 8011caa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011cac:	4b36      	ldr	r3, [pc, #216]	; (8011d88 <xTaskResumeAll+0x114>)
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d162      	bne.n	8011d7a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011cb4:	4b35      	ldr	r3, [pc, #212]	; (8011d8c <xTaskResumeAll+0x118>)
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d05e      	beq.n	8011d7a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011cbc:	e02f      	b.n	8011d1e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011cbe:	4b34      	ldr	r3, [pc, #208]	; (8011d90 <xTaskResumeAll+0x11c>)
 8011cc0:	68db      	ldr	r3, [r3, #12]
 8011cc2:	68db      	ldr	r3, [r3, #12]
 8011cc4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	3318      	adds	r3, #24
 8011cca:	4618      	mov	r0, r3
 8011ccc:	f7fe fc8a 	bl	80105e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	3304      	adds	r3, #4
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	f7fe fc85 	bl	80105e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cde:	4b2d      	ldr	r3, [pc, #180]	; (8011d94 <xTaskResumeAll+0x120>)
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	429a      	cmp	r2, r3
 8011ce4:	d903      	bls.n	8011cee <xTaskResumeAll+0x7a>
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cea:	4a2a      	ldr	r2, [pc, #168]	; (8011d94 <xTaskResumeAll+0x120>)
 8011cec:	6013      	str	r3, [r2, #0]
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cf2:	4613      	mov	r3, r2
 8011cf4:	009b      	lsls	r3, r3, #2
 8011cf6:	4413      	add	r3, r2
 8011cf8:	009b      	lsls	r3, r3, #2
 8011cfa:	4a27      	ldr	r2, [pc, #156]	; (8011d98 <xTaskResumeAll+0x124>)
 8011cfc:	441a      	add	r2, r3
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	3304      	adds	r3, #4
 8011d02:	4619      	mov	r1, r3
 8011d04:	4610      	mov	r0, r2
 8011d06:	f7fe fc10 	bl	801052a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d0e:	4b23      	ldr	r3, [pc, #140]	; (8011d9c <xTaskResumeAll+0x128>)
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d14:	429a      	cmp	r2, r3
 8011d16:	d302      	bcc.n	8011d1e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8011d18:	4b21      	ldr	r3, [pc, #132]	; (8011da0 <xTaskResumeAll+0x12c>)
 8011d1a:	2201      	movs	r2, #1
 8011d1c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011d1e:	4b1c      	ldr	r3, [pc, #112]	; (8011d90 <xTaskResumeAll+0x11c>)
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d1cb      	bne.n	8011cbe <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d001      	beq.n	8011d30 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011d2c:	f000 fb6e 	bl	801240c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011d30:	4b1c      	ldr	r3, [pc, #112]	; (8011da4 <xTaskResumeAll+0x130>)
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d010      	beq.n	8011d5e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011d3c:	f000 f846 	bl	8011dcc <xTaskIncrementTick>
 8011d40:	4603      	mov	r3, r0
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d002      	beq.n	8011d4c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8011d46:	4b16      	ldr	r3, [pc, #88]	; (8011da0 <xTaskResumeAll+0x12c>)
 8011d48:	2201      	movs	r2, #1
 8011d4a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	3b01      	subs	r3, #1
 8011d50:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d1f1      	bne.n	8011d3c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8011d58:	4b12      	ldr	r3, [pc, #72]	; (8011da4 <xTaskResumeAll+0x130>)
 8011d5a:	2200      	movs	r2, #0
 8011d5c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011d5e:	4b10      	ldr	r3, [pc, #64]	; (8011da0 <xTaskResumeAll+0x12c>)
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d009      	beq.n	8011d7a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011d66:	2301      	movs	r3, #1
 8011d68:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011d6a:	4b0f      	ldr	r3, [pc, #60]	; (8011da8 <xTaskResumeAll+0x134>)
 8011d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d70:	601a      	str	r2, [r3, #0]
 8011d72:	f3bf 8f4f 	dsb	sy
 8011d76:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011d7a:	f7fe f8e5 	bl	800ff48 <vPortExitCritical>

	return xAlreadyYielded;
 8011d7e:	68bb      	ldr	r3, [r7, #8]
}
 8011d80:	4618      	mov	r0, r3
 8011d82:	3710      	adds	r7, #16
 8011d84:	46bd      	mov	sp, r7
 8011d86:	bd80      	pop	{r7, pc}
 8011d88:	2002df2c 	.word	0x2002df2c
 8011d8c:	2002df04 	.word	0x2002df04
 8011d90:	2002dec4 	.word	0x2002dec4
 8011d94:	2002df0c 	.word	0x2002df0c
 8011d98:	2002da34 	.word	0x2002da34
 8011d9c:	2002da30 	.word	0x2002da30
 8011da0:	2002df18 	.word	0x2002df18
 8011da4:	2002df14 	.word	0x2002df14
 8011da8:	e000ed04 	.word	0xe000ed04

08011dac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011dac:	b480      	push	{r7}
 8011dae:	b083      	sub	sp, #12
 8011db0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011db2:	4b05      	ldr	r3, [pc, #20]	; (8011dc8 <xTaskGetTickCount+0x1c>)
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011db8:	687b      	ldr	r3, [r7, #4]
}
 8011dba:	4618      	mov	r0, r3
 8011dbc:	370c      	adds	r7, #12
 8011dbe:	46bd      	mov	sp, r7
 8011dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc4:	4770      	bx	lr
 8011dc6:	bf00      	nop
 8011dc8:	2002df08 	.word	0x2002df08

08011dcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b086      	sub	sp, #24
 8011dd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011dd6:	4b4e      	ldr	r3, [pc, #312]	; (8011f10 <xTaskIncrementTick+0x144>)
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	f040 8088 	bne.w	8011ef0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011de0:	4b4c      	ldr	r3, [pc, #304]	; (8011f14 <xTaskIncrementTick+0x148>)
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	3301      	adds	r3, #1
 8011de6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011de8:	4a4a      	ldr	r2, [pc, #296]	; (8011f14 <xTaskIncrementTick+0x148>)
 8011dea:	693b      	ldr	r3, [r7, #16]
 8011dec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011dee:	693b      	ldr	r3, [r7, #16]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d11f      	bne.n	8011e34 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8011df4:	4b48      	ldr	r3, [pc, #288]	; (8011f18 <xTaskIncrementTick+0x14c>)
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d009      	beq.n	8011e12 <xTaskIncrementTick+0x46>
 8011dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e02:	f383 8811 	msr	BASEPRI, r3
 8011e06:	f3bf 8f6f 	isb	sy
 8011e0a:	f3bf 8f4f 	dsb	sy
 8011e0e:	603b      	str	r3, [r7, #0]
 8011e10:	e7fe      	b.n	8011e10 <xTaskIncrementTick+0x44>
 8011e12:	4b41      	ldr	r3, [pc, #260]	; (8011f18 <xTaskIncrementTick+0x14c>)
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	60fb      	str	r3, [r7, #12]
 8011e18:	4b40      	ldr	r3, [pc, #256]	; (8011f1c <xTaskIncrementTick+0x150>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	4a3e      	ldr	r2, [pc, #248]	; (8011f18 <xTaskIncrementTick+0x14c>)
 8011e1e:	6013      	str	r3, [r2, #0]
 8011e20:	4a3e      	ldr	r2, [pc, #248]	; (8011f1c <xTaskIncrementTick+0x150>)
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	6013      	str	r3, [r2, #0]
 8011e26:	4b3e      	ldr	r3, [pc, #248]	; (8011f20 <xTaskIncrementTick+0x154>)
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	3301      	adds	r3, #1
 8011e2c:	4a3c      	ldr	r2, [pc, #240]	; (8011f20 <xTaskIncrementTick+0x154>)
 8011e2e:	6013      	str	r3, [r2, #0]
 8011e30:	f000 faec 	bl	801240c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011e34:	4b3b      	ldr	r3, [pc, #236]	; (8011f24 <xTaskIncrementTick+0x158>)
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	693a      	ldr	r2, [r7, #16]
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	d349      	bcc.n	8011ed2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011e3e:	4b36      	ldr	r3, [pc, #216]	; (8011f18 <xTaskIncrementTick+0x14c>)
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d104      	bne.n	8011e52 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e48:	4b36      	ldr	r3, [pc, #216]	; (8011f24 <xTaskIncrementTick+0x158>)
 8011e4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011e4e:	601a      	str	r2, [r3, #0]
					break;
 8011e50:	e03f      	b.n	8011ed2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e52:	4b31      	ldr	r3, [pc, #196]	; (8011f18 <xTaskIncrementTick+0x14c>)
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	68db      	ldr	r3, [r3, #12]
 8011e58:	68db      	ldr	r3, [r3, #12]
 8011e5a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011e5c:	68bb      	ldr	r3, [r7, #8]
 8011e5e:	685b      	ldr	r3, [r3, #4]
 8011e60:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011e62:	693a      	ldr	r2, [r7, #16]
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	429a      	cmp	r2, r3
 8011e68:	d203      	bcs.n	8011e72 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011e6a:	4a2e      	ldr	r2, [pc, #184]	; (8011f24 <xTaskIncrementTick+0x158>)
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011e70:	e02f      	b.n	8011ed2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011e72:	68bb      	ldr	r3, [r7, #8]
 8011e74:	3304      	adds	r3, #4
 8011e76:	4618      	mov	r0, r3
 8011e78:	f7fe fbb4 	bl	80105e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011e7c:	68bb      	ldr	r3, [r7, #8]
 8011e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d004      	beq.n	8011e8e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011e84:	68bb      	ldr	r3, [r7, #8]
 8011e86:	3318      	adds	r3, #24
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f7fe fbab 	bl	80105e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011e8e:	68bb      	ldr	r3, [r7, #8]
 8011e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e92:	4b25      	ldr	r3, [pc, #148]	; (8011f28 <xTaskIncrementTick+0x15c>)
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	429a      	cmp	r2, r3
 8011e98:	d903      	bls.n	8011ea2 <xTaskIncrementTick+0xd6>
 8011e9a:	68bb      	ldr	r3, [r7, #8]
 8011e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e9e:	4a22      	ldr	r2, [pc, #136]	; (8011f28 <xTaskIncrementTick+0x15c>)
 8011ea0:	6013      	str	r3, [r2, #0]
 8011ea2:	68bb      	ldr	r3, [r7, #8]
 8011ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ea6:	4613      	mov	r3, r2
 8011ea8:	009b      	lsls	r3, r3, #2
 8011eaa:	4413      	add	r3, r2
 8011eac:	009b      	lsls	r3, r3, #2
 8011eae:	4a1f      	ldr	r2, [pc, #124]	; (8011f2c <xTaskIncrementTick+0x160>)
 8011eb0:	441a      	add	r2, r3
 8011eb2:	68bb      	ldr	r3, [r7, #8]
 8011eb4:	3304      	adds	r3, #4
 8011eb6:	4619      	mov	r1, r3
 8011eb8:	4610      	mov	r0, r2
 8011eba:	f7fe fb36 	bl	801052a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011ebe:	68bb      	ldr	r3, [r7, #8]
 8011ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ec2:	4b1b      	ldr	r3, [pc, #108]	; (8011f30 <xTaskIncrementTick+0x164>)
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ec8:	429a      	cmp	r2, r3
 8011eca:	d3b8      	bcc.n	8011e3e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8011ecc:	2301      	movs	r3, #1
 8011ece:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011ed0:	e7b5      	b.n	8011e3e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011ed2:	4b17      	ldr	r3, [pc, #92]	; (8011f30 <xTaskIncrementTick+0x164>)
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ed8:	4914      	ldr	r1, [pc, #80]	; (8011f2c <xTaskIncrementTick+0x160>)
 8011eda:	4613      	mov	r3, r2
 8011edc:	009b      	lsls	r3, r3, #2
 8011ede:	4413      	add	r3, r2
 8011ee0:	009b      	lsls	r3, r3, #2
 8011ee2:	440b      	add	r3, r1
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	2b01      	cmp	r3, #1
 8011ee8:	d907      	bls.n	8011efa <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8011eea:	2301      	movs	r3, #1
 8011eec:	617b      	str	r3, [r7, #20]
 8011eee:	e004      	b.n	8011efa <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011ef0:	4b10      	ldr	r3, [pc, #64]	; (8011f34 <xTaskIncrementTick+0x168>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	3301      	adds	r3, #1
 8011ef6:	4a0f      	ldr	r2, [pc, #60]	; (8011f34 <xTaskIncrementTick+0x168>)
 8011ef8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011efa:	4b0f      	ldr	r3, [pc, #60]	; (8011f38 <xTaskIncrementTick+0x16c>)
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d001      	beq.n	8011f06 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8011f02:	2301      	movs	r3, #1
 8011f04:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011f06:	697b      	ldr	r3, [r7, #20]
}
 8011f08:	4618      	mov	r0, r3
 8011f0a:	3718      	adds	r7, #24
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bd80      	pop	{r7, pc}
 8011f10:	2002df2c 	.word	0x2002df2c
 8011f14:	2002df08 	.word	0x2002df08
 8011f18:	2002debc 	.word	0x2002debc
 8011f1c:	2002dec0 	.word	0x2002dec0
 8011f20:	2002df1c 	.word	0x2002df1c
 8011f24:	2002df24 	.word	0x2002df24
 8011f28:	2002df0c 	.word	0x2002df0c
 8011f2c:	2002da34 	.word	0x2002da34
 8011f30:	2002da30 	.word	0x2002da30
 8011f34:	2002df14 	.word	0x2002df14
 8011f38:	2002df18 	.word	0x2002df18

08011f3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011f3c:	b480      	push	{r7}
 8011f3e:	b085      	sub	sp, #20
 8011f40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011f42:	4b27      	ldr	r3, [pc, #156]	; (8011fe0 <vTaskSwitchContext+0xa4>)
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d003      	beq.n	8011f52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011f4a:	4b26      	ldr	r3, [pc, #152]	; (8011fe4 <vTaskSwitchContext+0xa8>)
 8011f4c:	2201      	movs	r2, #1
 8011f4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011f50:	e040      	b.n	8011fd4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8011f52:	4b24      	ldr	r3, [pc, #144]	; (8011fe4 <vTaskSwitchContext+0xa8>)
 8011f54:	2200      	movs	r2, #0
 8011f56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f58:	4b23      	ldr	r3, [pc, #140]	; (8011fe8 <vTaskSwitchContext+0xac>)
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	60fb      	str	r3, [r7, #12]
 8011f5e:	e00f      	b.n	8011f80 <vTaskSwitchContext+0x44>
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d109      	bne.n	8011f7a <vTaskSwitchContext+0x3e>
 8011f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f6a:	f383 8811 	msr	BASEPRI, r3
 8011f6e:	f3bf 8f6f 	isb	sy
 8011f72:	f3bf 8f4f 	dsb	sy
 8011f76:	607b      	str	r3, [r7, #4]
 8011f78:	e7fe      	b.n	8011f78 <vTaskSwitchContext+0x3c>
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	3b01      	subs	r3, #1
 8011f7e:	60fb      	str	r3, [r7, #12]
 8011f80:	491a      	ldr	r1, [pc, #104]	; (8011fec <vTaskSwitchContext+0xb0>)
 8011f82:	68fa      	ldr	r2, [r7, #12]
 8011f84:	4613      	mov	r3, r2
 8011f86:	009b      	lsls	r3, r3, #2
 8011f88:	4413      	add	r3, r2
 8011f8a:	009b      	lsls	r3, r3, #2
 8011f8c:	440b      	add	r3, r1
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d0e5      	beq.n	8011f60 <vTaskSwitchContext+0x24>
 8011f94:	68fa      	ldr	r2, [r7, #12]
 8011f96:	4613      	mov	r3, r2
 8011f98:	009b      	lsls	r3, r3, #2
 8011f9a:	4413      	add	r3, r2
 8011f9c:	009b      	lsls	r3, r3, #2
 8011f9e:	4a13      	ldr	r2, [pc, #76]	; (8011fec <vTaskSwitchContext+0xb0>)
 8011fa0:	4413      	add	r3, r2
 8011fa2:	60bb      	str	r3, [r7, #8]
 8011fa4:	68bb      	ldr	r3, [r7, #8]
 8011fa6:	685b      	ldr	r3, [r3, #4]
 8011fa8:	685a      	ldr	r2, [r3, #4]
 8011faa:	68bb      	ldr	r3, [r7, #8]
 8011fac:	605a      	str	r2, [r3, #4]
 8011fae:	68bb      	ldr	r3, [r7, #8]
 8011fb0:	685a      	ldr	r2, [r3, #4]
 8011fb2:	68bb      	ldr	r3, [r7, #8]
 8011fb4:	3308      	adds	r3, #8
 8011fb6:	429a      	cmp	r2, r3
 8011fb8:	d104      	bne.n	8011fc4 <vTaskSwitchContext+0x88>
 8011fba:	68bb      	ldr	r3, [r7, #8]
 8011fbc:	685b      	ldr	r3, [r3, #4]
 8011fbe:	685a      	ldr	r2, [r3, #4]
 8011fc0:	68bb      	ldr	r3, [r7, #8]
 8011fc2:	605a      	str	r2, [r3, #4]
 8011fc4:	68bb      	ldr	r3, [r7, #8]
 8011fc6:	685b      	ldr	r3, [r3, #4]
 8011fc8:	68db      	ldr	r3, [r3, #12]
 8011fca:	4a09      	ldr	r2, [pc, #36]	; (8011ff0 <vTaskSwitchContext+0xb4>)
 8011fcc:	6013      	str	r3, [r2, #0]
 8011fce:	4a06      	ldr	r2, [pc, #24]	; (8011fe8 <vTaskSwitchContext+0xac>)
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	6013      	str	r3, [r2, #0]
}
 8011fd4:	bf00      	nop
 8011fd6:	3714      	adds	r7, #20
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fde:	4770      	bx	lr
 8011fe0:	2002df2c 	.word	0x2002df2c
 8011fe4:	2002df18 	.word	0x2002df18
 8011fe8:	2002df0c 	.word	0x2002df0c
 8011fec:	2002da34 	.word	0x2002da34
 8011ff0:	2002da30 	.word	0x2002da30

08011ff4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b084      	sub	sp, #16
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
 8011ffc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d109      	bne.n	8012018 <vTaskPlaceOnEventList+0x24>
 8012004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012008:	f383 8811 	msr	BASEPRI, r3
 801200c:	f3bf 8f6f 	isb	sy
 8012010:	f3bf 8f4f 	dsb	sy
 8012014:	60fb      	str	r3, [r7, #12]
 8012016:	e7fe      	b.n	8012016 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012018:	4b07      	ldr	r3, [pc, #28]	; (8012038 <vTaskPlaceOnEventList+0x44>)
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	3318      	adds	r3, #24
 801201e:	4619      	mov	r1, r3
 8012020:	6878      	ldr	r0, [r7, #4]
 8012022:	f7fe faa6 	bl	8010572 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012026:	2101      	movs	r1, #1
 8012028:	6838      	ldr	r0, [r7, #0]
 801202a:	f000 fdfb 	bl	8012c24 <prvAddCurrentTaskToDelayedList>
}
 801202e:	bf00      	nop
 8012030:	3710      	adds	r7, #16
 8012032:	46bd      	mov	sp, r7
 8012034:	bd80      	pop	{r7, pc}
 8012036:	bf00      	nop
 8012038:	2002da30 	.word	0x2002da30

0801203c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801203c:	b580      	push	{r7, lr}
 801203e:	b086      	sub	sp, #24
 8012040:	af00      	add	r7, sp, #0
 8012042:	60f8      	str	r0, [r7, #12]
 8012044:	60b9      	str	r1, [r7, #8]
 8012046:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d109      	bne.n	8012062 <vTaskPlaceOnEventListRestricted+0x26>
 801204e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012052:	f383 8811 	msr	BASEPRI, r3
 8012056:	f3bf 8f6f 	isb	sy
 801205a:	f3bf 8f4f 	dsb	sy
 801205e:	617b      	str	r3, [r7, #20]
 8012060:	e7fe      	b.n	8012060 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012062:	4b0a      	ldr	r3, [pc, #40]	; (801208c <vTaskPlaceOnEventListRestricted+0x50>)
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	3318      	adds	r3, #24
 8012068:	4619      	mov	r1, r3
 801206a:	68f8      	ldr	r0, [r7, #12]
 801206c:	f7fe fa5d 	bl	801052a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d002      	beq.n	801207c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8012076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801207a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801207c:	6879      	ldr	r1, [r7, #4]
 801207e:	68b8      	ldr	r0, [r7, #8]
 8012080:	f000 fdd0 	bl	8012c24 <prvAddCurrentTaskToDelayedList>
	}
 8012084:	bf00      	nop
 8012086:	3718      	adds	r7, #24
 8012088:	46bd      	mov	sp, r7
 801208a:	bd80      	pop	{r7, pc}
 801208c:	2002da30 	.word	0x2002da30

08012090 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b086      	sub	sp, #24
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	68db      	ldr	r3, [r3, #12]
 801209c:	68db      	ldr	r3, [r3, #12]
 801209e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80120a0:	693b      	ldr	r3, [r7, #16]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d109      	bne.n	80120ba <xTaskRemoveFromEventList+0x2a>
 80120a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120aa:	f383 8811 	msr	BASEPRI, r3
 80120ae:	f3bf 8f6f 	isb	sy
 80120b2:	f3bf 8f4f 	dsb	sy
 80120b6:	60fb      	str	r3, [r7, #12]
 80120b8:	e7fe      	b.n	80120b8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80120ba:	693b      	ldr	r3, [r7, #16]
 80120bc:	3318      	adds	r3, #24
 80120be:	4618      	mov	r0, r3
 80120c0:	f7fe fa90 	bl	80105e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80120c4:	4b1e      	ldr	r3, [pc, #120]	; (8012140 <xTaskRemoveFromEventList+0xb0>)
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d11f      	bne.n	801210c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80120cc:	693b      	ldr	r3, [r7, #16]
 80120ce:	3304      	adds	r3, #4
 80120d0:	4618      	mov	r0, r3
 80120d2:	f7fe fa87 	bl	80105e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80120d6:	693b      	ldr	r3, [r7, #16]
 80120d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120da:	4b1a      	ldr	r3, [pc, #104]	; (8012144 <xTaskRemoveFromEventList+0xb4>)
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	429a      	cmp	r2, r3
 80120e0:	d903      	bls.n	80120ea <xTaskRemoveFromEventList+0x5a>
 80120e2:	693b      	ldr	r3, [r7, #16]
 80120e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120e6:	4a17      	ldr	r2, [pc, #92]	; (8012144 <xTaskRemoveFromEventList+0xb4>)
 80120e8:	6013      	str	r3, [r2, #0]
 80120ea:	693b      	ldr	r3, [r7, #16]
 80120ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120ee:	4613      	mov	r3, r2
 80120f0:	009b      	lsls	r3, r3, #2
 80120f2:	4413      	add	r3, r2
 80120f4:	009b      	lsls	r3, r3, #2
 80120f6:	4a14      	ldr	r2, [pc, #80]	; (8012148 <xTaskRemoveFromEventList+0xb8>)
 80120f8:	441a      	add	r2, r3
 80120fa:	693b      	ldr	r3, [r7, #16]
 80120fc:	3304      	adds	r3, #4
 80120fe:	4619      	mov	r1, r3
 8012100:	4610      	mov	r0, r2
 8012102:	f7fe fa12 	bl	801052a <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8012106:	f000 f981 	bl	801240c <prvResetNextTaskUnblockTime>
 801210a:	e005      	b.n	8012118 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801210c:	693b      	ldr	r3, [r7, #16]
 801210e:	3318      	adds	r3, #24
 8012110:	4619      	mov	r1, r3
 8012112:	480e      	ldr	r0, [pc, #56]	; (801214c <xTaskRemoveFromEventList+0xbc>)
 8012114:	f7fe fa09 	bl	801052a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012118:	693b      	ldr	r3, [r7, #16]
 801211a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801211c:	4b0c      	ldr	r3, [pc, #48]	; (8012150 <xTaskRemoveFromEventList+0xc0>)
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012122:	429a      	cmp	r2, r3
 8012124:	d905      	bls.n	8012132 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012126:	2301      	movs	r3, #1
 8012128:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801212a:	4b0a      	ldr	r3, [pc, #40]	; (8012154 <xTaskRemoveFromEventList+0xc4>)
 801212c:	2201      	movs	r2, #1
 801212e:	601a      	str	r2, [r3, #0]
 8012130:	e001      	b.n	8012136 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8012132:	2300      	movs	r3, #0
 8012134:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012136:	697b      	ldr	r3, [r7, #20]
}
 8012138:	4618      	mov	r0, r3
 801213a:	3718      	adds	r7, #24
 801213c:	46bd      	mov	sp, r7
 801213e:	bd80      	pop	{r7, pc}
 8012140:	2002df2c 	.word	0x2002df2c
 8012144:	2002df0c 	.word	0x2002df0c
 8012148:	2002da34 	.word	0x2002da34
 801214c:	2002dec4 	.word	0x2002dec4
 8012150:	2002da30 	.word	0x2002da30
 8012154:	2002df18 	.word	0x2002df18

08012158 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012158:	b480      	push	{r7}
 801215a:	b083      	sub	sp, #12
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012160:	4b06      	ldr	r3, [pc, #24]	; (801217c <vTaskInternalSetTimeOutState+0x24>)
 8012162:	681a      	ldr	r2, [r3, #0]
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012168:	4b05      	ldr	r3, [pc, #20]	; (8012180 <vTaskInternalSetTimeOutState+0x28>)
 801216a:	681a      	ldr	r2, [r3, #0]
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	605a      	str	r2, [r3, #4]
}
 8012170:	bf00      	nop
 8012172:	370c      	adds	r7, #12
 8012174:	46bd      	mov	sp, r7
 8012176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217a:	4770      	bx	lr
 801217c:	2002df1c 	.word	0x2002df1c
 8012180:	2002df08 	.word	0x2002df08

08012184 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012184:	b580      	push	{r7, lr}
 8012186:	b088      	sub	sp, #32
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]
 801218c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d109      	bne.n	80121a8 <xTaskCheckForTimeOut+0x24>
 8012194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012198:	f383 8811 	msr	BASEPRI, r3
 801219c:	f3bf 8f6f 	isb	sy
 80121a0:	f3bf 8f4f 	dsb	sy
 80121a4:	613b      	str	r3, [r7, #16]
 80121a6:	e7fe      	b.n	80121a6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80121a8:	683b      	ldr	r3, [r7, #0]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d109      	bne.n	80121c2 <xTaskCheckForTimeOut+0x3e>
 80121ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121b2:	f383 8811 	msr	BASEPRI, r3
 80121b6:	f3bf 8f6f 	isb	sy
 80121ba:	f3bf 8f4f 	dsb	sy
 80121be:	60fb      	str	r3, [r7, #12]
 80121c0:	e7fe      	b.n	80121c0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80121c2:	f7fd fe93 	bl	800feec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80121c6:	4b1d      	ldr	r3, [pc, #116]	; (801223c <xTaskCheckForTimeOut+0xb8>)
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	685b      	ldr	r3, [r3, #4]
 80121d0:	69ba      	ldr	r2, [r7, #24]
 80121d2:	1ad3      	subs	r3, r2, r3
 80121d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80121d6:	683b      	ldr	r3, [r7, #0]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80121de:	d102      	bne.n	80121e6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80121e0:	2300      	movs	r3, #0
 80121e2:	61fb      	str	r3, [r7, #28]
 80121e4:	e023      	b.n	801222e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	681a      	ldr	r2, [r3, #0]
 80121ea:	4b15      	ldr	r3, [pc, #84]	; (8012240 <xTaskCheckForTimeOut+0xbc>)
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	429a      	cmp	r2, r3
 80121f0:	d007      	beq.n	8012202 <xTaskCheckForTimeOut+0x7e>
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	685b      	ldr	r3, [r3, #4]
 80121f6:	69ba      	ldr	r2, [r7, #24]
 80121f8:	429a      	cmp	r2, r3
 80121fa:	d302      	bcc.n	8012202 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80121fc:	2301      	movs	r3, #1
 80121fe:	61fb      	str	r3, [r7, #28]
 8012200:	e015      	b.n	801222e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012202:	683b      	ldr	r3, [r7, #0]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	697a      	ldr	r2, [r7, #20]
 8012208:	429a      	cmp	r2, r3
 801220a:	d20b      	bcs.n	8012224 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801220c:	683b      	ldr	r3, [r7, #0]
 801220e:	681a      	ldr	r2, [r3, #0]
 8012210:	697b      	ldr	r3, [r7, #20]
 8012212:	1ad2      	subs	r2, r2, r3
 8012214:	683b      	ldr	r3, [r7, #0]
 8012216:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012218:	6878      	ldr	r0, [r7, #4]
 801221a:	f7ff ff9d 	bl	8012158 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801221e:	2300      	movs	r3, #0
 8012220:	61fb      	str	r3, [r7, #28]
 8012222:	e004      	b.n	801222e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8012224:	683b      	ldr	r3, [r7, #0]
 8012226:	2200      	movs	r2, #0
 8012228:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801222a:	2301      	movs	r3, #1
 801222c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801222e:	f7fd fe8b 	bl	800ff48 <vPortExitCritical>

	return xReturn;
 8012232:	69fb      	ldr	r3, [r7, #28]
}
 8012234:	4618      	mov	r0, r3
 8012236:	3720      	adds	r7, #32
 8012238:	46bd      	mov	sp, r7
 801223a:	bd80      	pop	{r7, pc}
 801223c:	2002df08 	.word	0x2002df08
 8012240:	2002df1c 	.word	0x2002df1c

08012244 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012244:	b480      	push	{r7}
 8012246:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012248:	4b03      	ldr	r3, [pc, #12]	; (8012258 <vTaskMissedYield+0x14>)
 801224a:	2201      	movs	r2, #1
 801224c:	601a      	str	r2, [r3, #0]
}
 801224e:	bf00      	nop
 8012250:	46bd      	mov	sp, r7
 8012252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012256:	4770      	bx	lr
 8012258:	2002df18 	.word	0x2002df18

0801225c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b084      	sub	sp, #16
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012264:	f000 f878 	bl	8012358 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012268:	4b17      	ldr	r3, [pc, #92]	; (80122c8 <prvIdleTask+0x6c>)
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	2b01      	cmp	r3, #1
 801226e:	d907      	bls.n	8012280 <prvIdleTask+0x24>
			{
				taskYIELD();
 8012270:	4b16      	ldr	r3, [pc, #88]	; (80122cc <prvIdleTask+0x70>)
 8012272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012276:	601a      	str	r2, [r3, #0]
 8012278:	f3bf 8f4f 	dsb	sy
 801227c:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8012280:	f7ff fcc0 	bl	8011c04 <prvGetExpectedIdleTime>
 8012284:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	2b01      	cmp	r3, #1
 801228a:	d9eb      	bls.n	8012264 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 801228c:	f7ff fcac 	bl	8011be8 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8012290:	4b0f      	ldr	r3, [pc, #60]	; (80122d0 <prvIdleTask+0x74>)
 8012292:	681a      	ldr	r2, [r3, #0]
 8012294:	4b0f      	ldr	r3, [pc, #60]	; (80122d4 <prvIdleTask+0x78>)
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	429a      	cmp	r2, r3
 801229a:	d209      	bcs.n	80122b0 <prvIdleTask+0x54>
 801229c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122a0:	f383 8811 	msr	BASEPRI, r3
 80122a4:	f3bf 8f6f 	isb	sy
 80122a8:	f3bf 8f4f 	dsb	sy
 80122ac:	60bb      	str	r3, [r7, #8]
 80122ae:	e7fe      	b.n	80122ae <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 80122b0:	f7ff fca8 	bl	8011c04 <prvGetExpectedIdleTime>
 80122b4:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	2b01      	cmp	r3, #1
 80122ba:	d902      	bls.n	80122c2 <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 80122bc:	68f8      	ldr	r0, [r7, #12]
 80122be:	f7f0 faa6 	bl	800280e <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 80122c2:	f7ff fcd7 	bl	8011c74 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 80122c6:	e7cd      	b.n	8012264 <prvIdleTask+0x8>
 80122c8:	2002da34 	.word	0x2002da34
 80122cc:	e000ed04 	.word	0xe000ed04
 80122d0:	2002df24 	.word	0x2002df24
 80122d4:	2002df08 	.word	0x2002df08

080122d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	b082      	sub	sp, #8
 80122dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80122de:	2300      	movs	r3, #0
 80122e0:	607b      	str	r3, [r7, #4]
 80122e2:	e00c      	b.n	80122fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80122e4:	687a      	ldr	r2, [r7, #4]
 80122e6:	4613      	mov	r3, r2
 80122e8:	009b      	lsls	r3, r3, #2
 80122ea:	4413      	add	r3, r2
 80122ec:	009b      	lsls	r3, r3, #2
 80122ee:	4a12      	ldr	r2, [pc, #72]	; (8012338 <prvInitialiseTaskLists+0x60>)
 80122f0:	4413      	add	r3, r2
 80122f2:	4618      	mov	r0, r3
 80122f4:	f7fe f8ec 	bl	80104d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	3301      	adds	r3, #1
 80122fc:	607b      	str	r3, [r7, #4]
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	2b37      	cmp	r3, #55	; 0x37
 8012302:	d9ef      	bls.n	80122e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012304:	480d      	ldr	r0, [pc, #52]	; (801233c <prvInitialiseTaskLists+0x64>)
 8012306:	f7fe f8e3 	bl	80104d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801230a:	480d      	ldr	r0, [pc, #52]	; (8012340 <prvInitialiseTaskLists+0x68>)
 801230c:	f7fe f8e0 	bl	80104d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012310:	480c      	ldr	r0, [pc, #48]	; (8012344 <prvInitialiseTaskLists+0x6c>)
 8012312:	f7fe f8dd 	bl	80104d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012316:	480c      	ldr	r0, [pc, #48]	; (8012348 <prvInitialiseTaskLists+0x70>)
 8012318:	f7fe f8da 	bl	80104d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801231c:	480b      	ldr	r0, [pc, #44]	; (801234c <prvInitialiseTaskLists+0x74>)
 801231e:	f7fe f8d7 	bl	80104d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012322:	4b0b      	ldr	r3, [pc, #44]	; (8012350 <prvInitialiseTaskLists+0x78>)
 8012324:	4a05      	ldr	r2, [pc, #20]	; (801233c <prvInitialiseTaskLists+0x64>)
 8012326:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012328:	4b0a      	ldr	r3, [pc, #40]	; (8012354 <prvInitialiseTaskLists+0x7c>)
 801232a:	4a05      	ldr	r2, [pc, #20]	; (8012340 <prvInitialiseTaskLists+0x68>)
 801232c:	601a      	str	r2, [r3, #0]
}
 801232e:	bf00      	nop
 8012330:	3708      	adds	r7, #8
 8012332:	46bd      	mov	sp, r7
 8012334:	bd80      	pop	{r7, pc}
 8012336:	bf00      	nop
 8012338:	2002da34 	.word	0x2002da34
 801233c:	2002de94 	.word	0x2002de94
 8012340:	2002dea8 	.word	0x2002dea8
 8012344:	2002dec4 	.word	0x2002dec4
 8012348:	2002ded8 	.word	0x2002ded8
 801234c:	2002def0 	.word	0x2002def0
 8012350:	2002debc 	.word	0x2002debc
 8012354:	2002dec0 	.word	0x2002dec0

08012358 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012358:	b580      	push	{r7, lr}
 801235a:	b082      	sub	sp, #8
 801235c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801235e:	e019      	b.n	8012394 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012360:	f7fd fdc4 	bl	800feec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012364:	4b0f      	ldr	r3, [pc, #60]	; (80123a4 <prvCheckTasksWaitingTermination+0x4c>)
 8012366:	68db      	ldr	r3, [r3, #12]
 8012368:	68db      	ldr	r3, [r3, #12]
 801236a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	3304      	adds	r3, #4
 8012370:	4618      	mov	r0, r3
 8012372:	f7fe f937 	bl	80105e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012376:	4b0c      	ldr	r3, [pc, #48]	; (80123a8 <prvCheckTasksWaitingTermination+0x50>)
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	3b01      	subs	r3, #1
 801237c:	4a0a      	ldr	r2, [pc, #40]	; (80123a8 <prvCheckTasksWaitingTermination+0x50>)
 801237e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012380:	4b0a      	ldr	r3, [pc, #40]	; (80123ac <prvCheckTasksWaitingTermination+0x54>)
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	3b01      	subs	r3, #1
 8012386:	4a09      	ldr	r2, [pc, #36]	; (80123ac <prvCheckTasksWaitingTermination+0x54>)
 8012388:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801238a:	f7fd fddd 	bl	800ff48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801238e:	6878      	ldr	r0, [r7, #4]
 8012390:	f000 f80e 	bl	80123b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012394:	4b05      	ldr	r3, [pc, #20]	; (80123ac <prvCheckTasksWaitingTermination+0x54>)
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d1e1      	bne.n	8012360 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801239c:	bf00      	nop
 801239e:	3708      	adds	r7, #8
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}
 80123a4:	2002ded8 	.word	0x2002ded8
 80123a8:	2002df04 	.word	0x2002df04
 80123ac:	2002deec 	.word	0x2002deec

080123b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b084      	sub	sp, #16
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d108      	bne.n	80123d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123c6:	4618      	mov	r0, r3
 80123c8:	f7fd ff6c 	bl	80102a4 <vPortFree>
				vPortFree( pxTCB );
 80123cc:	6878      	ldr	r0, [r7, #4]
 80123ce:	f7fd ff69 	bl	80102a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80123d2:	e017      	b.n	8012404 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80123da:	2b01      	cmp	r3, #1
 80123dc:	d103      	bne.n	80123e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80123de:	6878      	ldr	r0, [r7, #4]
 80123e0:	f7fd ff60 	bl	80102a4 <vPortFree>
	}
 80123e4:	e00e      	b.n	8012404 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80123ec:	2b02      	cmp	r3, #2
 80123ee:	d009      	beq.n	8012404 <prvDeleteTCB+0x54>
 80123f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123f4:	f383 8811 	msr	BASEPRI, r3
 80123f8:	f3bf 8f6f 	isb	sy
 80123fc:	f3bf 8f4f 	dsb	sy
 8012400:	60fb      	str	r3, [r7, #12]
 8012402:	e7fe      	b.n	8012402 <prvDeleteTCB+0x52>
	}
 8012404:	bf00      	nop
 8012406:	3710      	adds	r7, #16
 8012408:	46bd      	mov	sp, r7
 801240a:	bd80      	pop	{r7, pc}

0801240c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801240c:	b480      	push	{r7}
 801240e:	b083      	sub	sp, #12
 8012410:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012412:	4b0c      	ldr	r3, [pc, #48]	; (8012444 <prvResetNextTaskUnblockTime+0x38>)
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d104      	bne.n	8012426 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801241c:	4b0a      	ldr	r3, [pc, #40]	; (8012448 <prvResetNextTaskUnblockTime+0x3c>)
 801241e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012422:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012424:	e008      	b.n	8012438 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012426:	4b07      	ldr	r3, [pc, #28]	; (8012444 <prvResetNextTaskUnblockTime+0x38>)
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	68db      	ldr	r3, [r3, #12]
 801242c:	68db      	ldr	r3, [r3, #12]
 801242e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	685b      	ldr	r3, [r3, #4]
 8012434:	4a04      	ldr	r2, [pc, #16]	; (8012448 <prvResetNextTaskUnblockTime+0x3c>)
 8012436:	6013      	str	r3, [r2, #0]
}
 8012438:	bf00      	nop
 801243a:	370c      	adds	r7, #12
 801243c:	46bd      	mov	sp, r7
 801243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012442:	4770      	bx	lr
 8012444:	2002debc 	.word	0x2002debc
 8012448:	2002df24 	.word	0x2002df24

0801244c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801244c:	b480      	push	{r7}
 801244e:	b083      	sub	sp, #12
 8012450:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8012452:	4b05      	ldr	r3, [pc, #20]	; (8012468 <xTaskGetCurrentTaskHandle+0x1c>)
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	607b      	str	r3, [r7, #4]

		return xReturn;
 8012458:	687b      	ldr	r3, [r7, #4]
	}
 801245a:	4618      	mov	r0, r3
 801245c:	370c      	adds	r7, #12
 801245e:	46bd      	mov	sp, r7
 8012460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012464:	4770      	bx	lr
 8012466:	bf00      	nop
 8012468:	2002da30 	.word	0x2002da30

0801246c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801246c:	b480      	push	{r7}
 801246e:	b083      	sub	sp, #12
 8012470:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012472:	4b0b      	ldr	r3, [pc, #44]	; (80124a0 <xTaskGetSchedulerState+0x34>)
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d102      	bne.n	8012480 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801247a:	2301      	movs	r3, #1
 801247c:	607b      	str	r3, [r7, #4]
 801247e:	e008      	b.n	8012492 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012480:	4b08      	ldr	r3, [pc, #32]	; (80124a4 <xTaskGetSchedulerState+0x38>)
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d102      	bne.n	801248e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012488:	2302      	movs	r3, #2
 801248a:	607b      	str	r3, [r7, #4]
 801248c:	e001      	b.n	8012492 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801248e:	2300      	movs	r3, #0
 8012490:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012492:	687b      	ldr	r3, [r7, #4]
	}
 8012494:	4618      	mov	r0, r3
 8012496:	370c      	adds	r7, #12
 8012498:	46bd      	mov	sp, r7
 801249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249e:	4770      	bx	lr
 80124a0:	2002df10 	.word	0x2002df10
 80124a4:	2002df2c 	.word	0x2002df2c

080124a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b084      	sub	sp, #16
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80124b4:	2300      	movs	r3, #0
 80124b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d051      	beq.n	8012562 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80124be:	68bb      	ldr	r3, [r7, #8]
 80124c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124c2:	4b2a      	ldr	r3, [pc, #168]	; (801256c <xTaskPriorityInherit+0xc4>)
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124c8:	429a      	cmp	r2, r3
 80124ca:	d241      	bcs.n	8012550 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80124cc:	68bb      	ldr	r3, [r7, #8]
 80124ce:	699b      	ldr	r3, [r3, #24]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	db06      	blt.n	80124e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80124d4:	4b25      	ldr	r3, [pc, #148]	; (801256c <xTaskPriorityInherit+0xc4>)
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80124de:	68bb      	ldr	r3, [r7, #8]
 80124e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80124e2:	68bb      	ldr	r3, [r7, #8]
 80124e4:	6959      	ldr	r1, [r3, #20]
 80124e6:	68bb      	ldr	r3, [r7, #8]
 80124e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124ea:	4613      	mov	r3, r2
 80124ec:	009b      	lsls	r3, r3, #2
 80124ee:	4413      	add	r3, r2
 80124f0:	009b      	lsls	r3, r3, #2
 80124f2:	4a1f      	ldr	r2, [pc, #124]	; (8012570 <xTaskPriorityInherit+0xc8>)
 80124f4:	4413      	add	r3, r2
 80124f6:	4299      	cmp	r1, r3
 80124f8:	d122      	bne.n	8012540 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80124fa:	68bb      	ldr	r3, [r7, #8]
 80124fc:	3304      	adds	r3, #4
 80124fe:	4618      	mov	r0, r3
 8012500:	f7fe f870 	bl	80105e4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012504:	4b19      	ldr	r3, [pc, #100]	; (801256c <xTaskPriorityInherit+0xc4>)
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801250a:	68bb      	ldr	r3, [r7, #8]
 801250c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801250e:	68bb      	ldr	r3, [r7, #8]
 8012510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012512:	4b18      	ldr	r3, [pc, #96]	; (8012574 <xTaskPriorityInherit+0xcc>)
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	429a      	cmp	r2, r3
 8012518:	d903      	bls.n	8012522 <xTaskPriorityInherit+0x7a>
 801251a:	68bb      	ldr	r3, [r7, #8]
 801251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801251e:	4a15      	ldr	r2, [pc, #84]	; (8012574 <xTaskPriorityInherit+0xcc>)
 8012520:	6013      	str	r3, [r2, #0]
 8012522:	68bb      	ldr	r3, [r7, #8]
 8012524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012526:	4613      	mov	r3, r2
 8012528:	009b      	lsls	r3, r3, #2
 801252a:	4413      	add	r3, r2
 801252c:	009b      	lsls	r3, r3, #2
 801252e:	4a10      	ldr	r2, [pc, #64]	; (8012570 <xTaskPriorityInherit+0xc8>)
 8012530:	441a      	add	r2, r3
 8012532:	68bb      	ldr	r3, [r7, #8]
 8012534:	3304      	adds	r3, #4
 8012536:	4619      	mov	r1, r3
 8012538:	4610      	mov	r0, r2
 801253a:	f7fd fff6 	bl	801052a <vListInsertEnd>
 801253e:	e004      	b.n	801254a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012540:	4b0a      	ldr	r3, [pc, #40]	; (801256c <xTaskPriorityInherit+0xc4>)
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012546:	68bb      	ldr	r3, [r7, #8]
 8012548:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801254a:	2301      	movs	r3, #1
 801254c:	60fb      	str	r3, [r7, #12]
 801254e:	e008      	b.n	8012562 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012550:	68bb      	ldr	r3, [r7, #8]
 8012552:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012554:	4b05      	ldr	r3, [pc, #20]	; (801256c <xTaskPriorityInherit+0xc4>)
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801255a:	429a      	cmp	r2, r3
 801255c:	d201      	bcs.n	8012562 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801255e:	2301      	movs	r3, #1
 8012560:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012562:	68fb      	ldr	r3, [r7, #12]
	}
 8012564:	4618      	mov	r0, r3
 8012566:	3710      	adds	r7, #16
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}
 801256c:	2002da30 	.word	0x2002da30
 8012570:	2002da34 	.word	0x2002da34
 8012574:	2002df0c 	.word	0x2002df0c

08012578 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012578:	b580      	push	{r7, lr}
 801257a:	b086      	sub	sp, #24
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012584:	2300      	movs	r3, #0
 8012586:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d054      	beq.n	8012638 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801258e:	4b2d      	ldr	r3, [pc, #180]	; (8012644 <xTaskPriorityDisinherit+0xcc>)
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	693a      	ldr	r2, [r7, #16]
 8012594:	429a      	cmp	r2, r3
 8012596:	d009      	beq.n	80125ac <xTaskPriorityDisinherit+0x34>
 8012598:	f04f 0350 	mov.w	r3, #80	; 0x50
 801259c:	f383 8811 	msr	BASEPRI, r3
 80125a0:	f3bf 8f6f 	isb	sy
 80125a4:	f3bf 8f4f 	dsb	sy
 80125a8:	60fb      	str	r3, [r7, #12]
 80125aa:	e7fe      	b.n	80125aa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80125ac:	693b      	ldr	r3, [r7, #16]
 80125ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d109      	bne.n	80125c8 <xTaskPriorityDisinherit+0x50>
 80125b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125b8:	f383 8811 	msr	BASEPRI, r3
 80125bc:	f3bf 8f6f 	isb	sy
 80125c0:	f3bf 8f4f 	dsb	sy
 80125c4:	60bb      	str	r3, [r7, #8]
 80125c6:	e7fe      	b.n	80125c6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80125c8:	693b      	ldr	r3, [r7, #16]
 80125ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80125cc:	1e5a      	subs	r2, r3, #1
 80125ce:	693b      	ldr	r3, [r7, #16]
 80125d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80125d2:	693b      	ldr	r3, [r7, #16]
 80125d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125d6:	693b      	ldr	r3, [r7, #16]
 80125d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80125da:	429a      	cmp	r2, r3
 80125dc:	d02c      	beq.n	8012638 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80125de:	693b      	ldr	r3, [r7, #16]
 80125e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d128      	bne.n	8012638 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80125e6:	693b      	ldr	r3, [r7, #16]
 80125e8:	3304      	adds	r3, #4
 80125ea:	4618      	mov	r0, r3
 80125ec:	f7fd fffa 	bl	80105e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80125f0:	693b      	ldr	r3, [r7, #16]
 80125f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80125f4:	693b      	ldr	r3, [r7, #16]
 80125f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80125f8:	693b      	ldr	r3, [r7, #16]
 80125fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012600:	693b      	ldr	r3, [r7, #16]
 8012602:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012604:	693b      	ldr	r3, [r7, #16]
 8012606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012608:	4b0f      	ldr	r3, [pc, #60]	; (8012648 <xTaskPriorityDisinherit+0xd0>)
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	429a      	cmp	r2, r3
 801260e:	d903      	bls.n	8012618 <xTaskPriorityDisinherit+0xa0>
 8012610:	693b      	ldr	r3, [r7, #16]
 8012612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012614:	4a0c      	ldr	r2, [pc, #48]	; (8012648 <xTaskPriorityDisinherit+0xd0>)
 8012616:	6013      	str	r3, [r2, #0]
 8012618:	693b      	ldr	r3, [r7, #16]
 801261a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801261c:	4613      	mov	r3, r2
 801261e:	009b      	lsls	r3, r3, #2
 8012620:	4413      	add	r3, r2
 8012622:	009b      	lsls	r3, r3, #2
 8012624:	4a09      	ldr	r2, [pc, #36]	; (801264c <xTaskPriorityDisinherit+0xd4>)
 8012626:	441a      	add	r2, r3
 8012628:	693b      	ldr	r3, [r7, #16]
 801262a:	3304      	adds	r3, #4
 801262c:	4619      	mov	r1, r3
 801262e:	4610      	mov	r0, r2
 8012630:	f7fd ff7b 	bl	801052a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012634:	2301      	movs	r3, #1
 8012636:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012638:	697b      	ldr	r3, [r7, #20]
	}
 801263a:	4618      	mov	r0, r3
 801263c:	3718      	adds	r7, #24
 801263e:	46bd      	mov	sp, r7
 8012640:	bd80      	pop	{r7, pc}
 8012642:	bf00      	nop
 8012644:	2002da30 	.word	0x2002da30
 8012648:	2002df0c 	.word	0x2002df0c
 801264c:	2002da34 	.word	0x2002da34

08012650 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012650:	b580      	push	{r7, lr}
 8012652:	b088      	sub	sp, #32
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
 8012658:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801265e:	2301      	movs	r3, #1
 8012660:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d068      	beq.n	801273a <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012668:	69bb      	ldr	r3, [r7, #24]
 801266a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801266c:	2b00      	cmp	r3, #0
 801266e:	d109      	bne.n	8012684 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8012670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012674:	f383 8811 	msr	BASEPRI, r3
 8012678:	f3bf 8f6f 	isb	sy
 801267c:	f3bf 8f4f 	dsb	sy
 8012680:	60fb      	str	r3, [r7, #12]
 8012682:	e7fe      	b.n	8012682 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012684:	69bb      	ldr	r3, [r7, #24]
 8012686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012688:	683a      	ldr	r2, [r7, #0]
 801268a:	429a      	cmp	r2, r3
 801268c:	d902      	bls.n	8012694 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801268e:	683b      	ldr	r3, [r7, #0]
 8012690:	61fb      	str	r3, [r7, #28]
 8012692:	e002      	b.n	801269a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012694:	69bb      	ldr	r3, [r7, #24]
 8012696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012698:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801269a:	69bb      	ldr	r3, [r7, #24]
 801269c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801269e:	69fa      	ldr	r2, [r7, #28]
 80126a0:	429a      	cmp	r2, r3
 80126a2:	d04a      	beq.n	801273a <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80126a4:	69bb      	ldr	r3, [r7, #24]
 80126a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80126a8:	697a      	ldr	r2, [r7, #20]
 80126aa:	429a      	cmp	r2, r3
 80126ac:	d145      	bne.n	801273a <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80126ae:	4b25      	ldr	r3, [pc, #148]	; (8012744 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	69ba      	ldr	r2, [r7, #24]
 80126b4:	429a      	cmp	r2, r3
 80126b6:	d109      	bne.n	80126cc <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80126b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126bc:	f383 8811 	msr	BASEPRI, r3
 80126c0:	f3bf 8f6f 	isb	sy
 80126c4:	f3bf 8f4f 	dsb	sy
 80126c8:	60bb      	str	r3, [r7, #8]
 80126ca:	e7fe      	b.n	80126ca <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80126cc:	69bb      	ldr	r3, [r7, #24]
 80126ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126d0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80126d2:	69bb      	ldr	r3, [r7, #24]
 80126d4:	69fa      	ldr	r2, [r7, #28]
 80126d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80126d8:	69bb      	ldr	r3, [r7, #24]
 80126da:	699b      	ldr	r3, [r3, #24]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	db04      	blt.n	80126ea <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80126e0:	69fb      	ldr	r3, [r7, #28]
 80126e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80126e6:	69bb      	ldr	r3, [r7, #24]
 80126e8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80126ea:	69bb      	ldr	r3, [r7, #24]
 80126ec:	6959      	ldr	r1, [r3, #20]
 80126ee:	693a      	ldr	r2, [r7, #16]
 80126f0:	4613      	mov	r3, r2
 80126f2:	009b      	lsls	r3, r3, #2
 80126f4:	4413      	add	r3, r2
 80126f6:	009b      	lsls	r3, r3, #2
 80126f8:	4a13      	ldr	r2, [pc, #76]	; (8012748 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80126fa:	4413      	add	r3, r2
 80126fc:	4299      	cmp	r1, r3
 80126fe:	d11c      	bne.n	801273a <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012700:	69bb      	ldr	r3, [r7, #24]
 8012702:	3304      	adds	r3, #4
 8012704:	4618      	mov	r0, r3
 8012706:	f7fd ff6d 	bl	80105e4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801270a:	69bb      	ldr	r3, [r7, #24]
 801270c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801270e:	4b0f      	ldr	r3, [pc, #60]	; (801274c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	429a      	cmp	r2, r3
 8012714:	d903      	bls.n	801271e <vTaskPriorityDisinheritAfterTimeout+0xce>
 8012716:	69bb      	ldr	r3, [r7, #24]
 8012718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801271a:	4a0c      	ldr	r2, [pc, #48]	; (801274c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801271c:	6013      	str	r3, [r2, #0]
 801271e:	69bb      	ldr	r3, [r7, #24]
 8012720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012722:	4613      	mov	r3, r2
 8012724:	009b      	lsls	r3, r3, #2
 8012726:	4413      	add	r3, r2
 8012728:	009b      	lsls	r3, r3, #2
 801272a:	4a07      	ldr	r2, [pc, #28]	; (8012748 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801272c:	441a      	add	r2, r3
 801272e:	69bb      	ldr	r3, [r7, #24]
 8012730:	3304      	adds	r3, #4
 8012732:	4619      	mov	r1, r3
 8012734:	4610      	mov	r0, r2
 8012736:	f7fd fef8 	bl	801052a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801273a:	bf00      	nop
 801273c:	3720      	adds	r7, #32
 801273e:	46bd      	mov	sp, r7
 8012740:	bd80      	pop	{r7, pc}
 8012742:	bf00      	nop
 8012744:	2002da30 	.word	0x2002da30
 8012748:	2002da34 	.word	0x2002da34
 801274c:	2002df0c 	.word	0x2002df0c

08012750 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012750:	b480      	push	{r7}
 8012752:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012754:	4b07      	ldr	r3, [pc, #28]	; (8012774 <pvTaskIncrementMutexHeldCount+0x24>)
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d004      	beq.n	8012766 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801275c:	4b05      	ldr	r3, [pc, #20]	; (8012774 <pvTaskIncrementMutexHeldCount+0x24>)
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012762:	3201      	adds	r2, #1
 8012764:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8012766:	4b03      	ldr	r3, [pc, #12]	; (8012774 <pvTaskIncrementMutexHeldCount+0x24>)
 8012768:	681b      	ldr	r3, [r3, #0]
	}
 801276a:	4618      	mov	r0, r3
 801276c:	46bd      	mov	sp, r7
 801276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012772:	4770      	bx	lr
 8012774:	2002da30 	.word	0x2002da30

08012778 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8012778:	b580      	push	{r7, lr}
 801277a:	b084      	sub	sp, #16
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
 8012780:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8012782:	f7fd fbb3 	bl	800feec <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8012786:	4b1e      	ldr	r3, [pc, #120]	; (8012800 <ulTaskNotifyTake+0x88>)
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801278c:	2b00      	cmp	r3, #0
 801278e:	d113      	bne.n	80127b8 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8012790:	4b1b      	ldr	r3, [pc, #108]	; (8012800 <ulTaskNotifyTake+0x88>)
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	2201      	movs	r2, #1
 8012796:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 801279a:	683b      	ldr	r3, [r7, #0]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d00b      	beq.n	80127b8 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80127a0:	2101      	movs	r1, #1
 80127a2:	6838      	ldr	r0, [r7, #0]
 80127a4:	f000 fa3e 	bl	8012c24 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80127a8:	4b16      	ldr	r3, [pc, #88]	; (8012804 <ulTaskNotifyTake+0x8c>)
 80127aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127ae:	601a      	str	r2, [r3, #0]
 80127b0:	f3bf 8f4f 	dsb	sy
 80127b4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80127b8:	f7fd fbc6 	bl	800ff48 <vPortExitCritical>

		taskENTER_CRITICAL();
 80127bc:	f7fd fb96 	bl	800feec <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80127c0:	4b0f      	ldr	r3, [pc, #60]	; (8012800 <ulTaskNotifyTake+0x88>)
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80127c6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d00c      	beq.n	80127e8 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d004      	beq.n	80127de <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80127d4:	4b0a      	ldr	r3, [pc, #40]	; (8012800 <ulTaskNotifyTake+0x88>)
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	2200      	movs	r2, #0
 80127da:	655a      	str	r2, [r3, #84]	; 0x54
 80127dc:	e004      	b.n	80127e8 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80127de:	4b08      	ldr	r3, [pc, #32]	; (8012800 <ulTaskNotifyTake+0x88>)
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	68fa      	ldr	r2, [r7, #12]
 80127e4:	3a01      	subs	r2, #1
 80127e6:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80127e8:	4b05      	ldr	r3, [pc, #20]	; (8012800 <ulTaskNotifyTake+0x88>)
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	2200      	movs	r2, #0
 80127ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80127f2:	f7fd fba9 	bl	800ff48 <vPortExitCritical>

		return ulReturn;
 80127f6:	68fb      	ldr	r3, [r7, #12]
	}
 80127f8:	4618      	mov	r0, r3
 80127fa:	3710      	adds	r7, #16
 80127fc:	46bd      	mov	sp, r7
 80127fe:	bd80      	pop	{r7, pc}
 8012800:	2002da30 	.word	0x2002da30
 8012804:	e000ed04 	.word	0xe000ed04

08012808 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8012808:	b580      	push	{r7, lr}
 801280a:	b086      	sub	sp, #24
 801280c:	af00      	add	r7, sp, #0
 801280e:	60f8      	str	r0, [r7, #12]
 8012810:	60b9      	str	r1, [r7, #8]
 8012812:	607a      	str	r2, [r7, #4]
 8012814:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8012816:	f7fd fb69 	bl	800feec <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801281a:	4b26      	ldr	r3, [pc, #152]	; (80128b4 <xTaskNotifyWait+0xac>)
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012822:	b2db      	uxtb	r3, r3
 8012824:	2b02      	cmp	r3, #2
 8012826:	d01a      	beq.n	801285e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8012828:	4b22      	ldr	r3, [pc, #136]	; (80128b4 <xTaskNotifyWait+0xac>)
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801282e:	68fa      	ldr	r2, [r7, #12]
 8012830:	43d2      	mvns	r2, r2
 8012832:	400a      	ands	r2, r1
 8012834:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8012836:	4b1f      	ldr	r3, [pc, #124]	; (80128b4 <xTaskNotifyWait+0xac>)
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	2201      	movs	r2, #1
 801283c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8012840:	683b      	ldr	r3, [r7, #0]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d00b      	beq.n	801285e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012846:	2101      	movs	r1, #1
 8012848:	6838      	ldr	r0, [r7, #0]
 801284a:	f000 f9eb 	bl	8012c24 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801284e:	4b1a      	ldr	r3, [pc, #104]	; (80128b8 <xTaskNotifyWait+0xb0>)
 8012850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012854:	601a      	str	r2, [r3, #0]
 8012856:	f3bf 8f4f 	dsb	sy
 801285a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801285e:	f7fd fb73 	bl	800ff48 <vPortExitCritical>

		taskENTER_CRITICAL();
 8012862:	f7fd fb43 	bl	800feec <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d004      	beq.n	8012876 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 801286c:	4b11      	ldr	r3, [pc, #68]	; (80128b4 <xTaskNotifyWait+0xac>)
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8012876:	4b0f      	ldr	r3, [pc, #60]	; (80128b4 <xTaskNotifyWait+0xac>)
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801287e:	b2db      	uxtb	r3, r3
 8012880:	2b02      	cmp	r3, #2
 8012882:	d002      	beq.n	801288a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8012884:	2300      	movs	r3, #0
 8012886:	617b      	str	r3, [r7, #20]
 8012888:	e008      	b.n	801289c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801288a:	4b0a      	ldr	r3, [pc, #40]	; (80128b4 <xTaskNotifyWait+0xac>)
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012890:	68ba      	ldr	r2, [r7, #8]
 8012892:	43d2      	mvns	r2, r2
 8012894:	400a      	ands	r2, r1
 8012896:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8012898:	2301      	movs	r3, #1
 801289a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801289c:	4b05      	ldr	r3, [pc, #20]	; (80128b4 <xTaskNotifyWait+0xac>)
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	2200      	movs	r2, #0
 80128a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80128a6:	f7fd fb4f 	bl	800ff48 <vPortExitCritical>

		return xReturn;
 80128aa:	697b      	ldr	r3, [r7, #20]
	}
 80128ac:	4618      	mov	r0, r3
 80128ae:	3718      	adds	r7, #24
 80128b0:	46bd      	mov	sp, r7
 80128b2:	bd80      	pop	{r7, pc}
 80128b4:	2002da30 	.word	0x2002da30
 80128b8:	e000ed04 	.word	0xe000ed04

080128bc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b08a      	sub	sp, #40	; 0x28
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	60f8      	str	r0, [r7, #12]
 80128c4:	60b9      	str	r1, [r7, #8]
 80128c6:	603b      	str	r3, [r7, #0]
 80128c8:	4613      	mov	r3, r2
 80128ca:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80128cc:	2301      	movs	r3, #1
 80128ce:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d109      	bne.n	80128ea <xTaskGenericNotify+0x2e>
 80128d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128da:	f383 8811 	msr	BASEPRI, r3
 80128de:	f3bf 8f6f 	isb	sy
 80128e2:	f3bf 8f4f 	dsb	sy
 80128e6:	61bb      	str	r3, [r7, #24]
 80128e8:	e7fe      	b.n	80128e8 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80128ee:	f7fd fafd 	bl	800feec <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80128f2:	683b      	ldr	r3, [r7, #0]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d003      	beq.n	8012900 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80128f8:	6a3b      	ldr	r3, [r7, #32]
 80128fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80128fc:	683b      	ldr	r3, [r7, #0]
 80128fe:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012900:	6a3b      	ldr	r3, [r7, #32]
 8012902:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012906:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8012908:	6a3b      	ldr	r3, [r7, #32]
 801290a:	2202      	movs	r2, #2
 801290c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8012910:	79fb      	ldrb	r3, [r7, #7]
 8012912:	2b04      	cmp	r3, #4
 8012914:	d827      	bhi.n	8012966 <xTaskGenericNotify+0xaa>
 8012916:	a201      	add	r2, pc, #4	; (adr r2, 801291c <xTaskGenericNotify+0x60>)
 8012918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801291c:	08012985 	.word	0x08012985
 8012920:	08012931 	.word	0x08012931
 8012924:	0801293f 	.word	0x0801293f
 8012928:	0801294b 	.word	0x0801294b
 801292c:	08012953 	.word	0x08012953
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8012930:	6a3b      	ldr	r3, [r7, #32]
 8012932:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012934:	68bb      	ldr	r3, [r7, #8]
 8012936:	431a      	orrs	r2, r3
 8012938:	6a3b      	ldr	r3, [r7, #32]
 801293a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 801293c:	e025      	b.n	801298a <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801293e:	6a3b      	ldr	r3, [r7, #32]
 8012940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012942:	1c5a      	adds	r2, r3, #1
 8012944:	6a3b      	ldr	r3, [r7, #32]
 8012946:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012948:	e01f      	b.n	801298a <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801294a:	6a3b      	ldr	r3, [r7, #32]
 801294c:	68ba      	ldr	r2, [r7, #8]
 801294e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012950:	e01b      	b.n	801298a <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8012952:	7ffb      	ldrb	r3, [r7, #31]
 8012954:	2b02      	cmp	r3, #2
 8012956:	d003      	beq.n	8012960 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8012958:	6a3b      	ldr	r3, [r7, #32]
 801295a:	68ba      	ldr	r2, [r7, #8]
 801295c:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801295e:	e014      	b.n	801298a <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8012960:	2300      	movs	r3, #0
 8012962:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8012964:	e011      	b.n	801298a <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8012966:	6a3b      	ldr	r3, [r7, #32]
 8012968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801296a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801296e:	d00b      	beq.n	8012988 <xTaskGenericNotify+0xcc>
 8012970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012974:	f383 8811 	msr	BASEPRI, r3
 8012978:	f3bf 8f6f 	isb	sy
 801297c:	f3bf 8f4f 	dsb	sy
 8012980:	617b      	str	r3, [r7, #20]
 8012982:	e7fe      	b.n	8012982 <xTaskGenericNotify+0xc6>
					break;
 8012984:	bf00      	nop
 8012986:	e000      	b.n	801298a <xTaskGenericNotify+0xce>

					break;
 8012988:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801298a:	7ffb      	ldrb	r3, [r7, #31]
 801298c:	2b01      	cmp	r3, #1
 801298e:	d13b      	bne.n	8012a08 <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012990:	6a3b      	ldr	r3, [r7, #32]
 8012992:	3304      	adds	r3, #4
 8012994:	4618      	mov	r0, r3
 8012996:	f7fd fe25 	bl	80105e4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801299a:	6a3b      	ldr	r3, [r7, #32]
 801299c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801299e:	4b1e      	ldr	r3, [pc, #120]	; (8012a18 <xTaskGenericNotify+0x15c>)
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	429a      	cmp	r2, r3
 80129a4:	d903      	bls.n	80129ae <xTaskGenericNotify+0xf2>
 80129a6:	6a3b      	ldr	r3, [r7, #32]
 80129a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129aa:	4a1b      	ldr	r2, [pc, #108]	; (8012a18 <xTaskGenericNotify+0x15c>)
 80129ac:	6013      	str	r3, [r2, #0]
 80129ae:	6a3b      	ldr	r3, [r7, #32]
 80129b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129b2:	4613      	mov	r3, r2
 80129b4:	009b      	lsls	r3, r3, #2
 80129b6:	4413      	add	r3, r2
 80129b8:	009b      	lsls	r3, r3, #2
 80129ba:	4a18      	ldr	r2, [pc, #96]	; (8012a1c <xTaskGenericNotify+0x160>)
 80129bc:	441a      	add	r2, r3
 80129be:	6a3b      	ldr	r3, [r7, #32]
 80129c0:	3304      	adds	r3, #4
 80129c2:	4619      	mov	r1, r3
 80129c4:	4610      	mov	r0, r2
 80129c6:	f7fd fdb0 	bl	801052a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80129ca:	6a3b      	ldr	r3, [r7, #32]
 80129cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d009      	beq.n	80129e6 <xTaskGenericNotify+0x12a>
 80129d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129d6:	f383 8811 	msr	BASEPRI, r3
 80129da:	f3bf 8f6f 	isb	sy
 80129de:	f3bf 8f4f 	dsb	sy
 80129e2:	613b      	str	r3, [r7, #16]
 80129e4:	e7fe      	b.n	80129e4 <xTaskGenericNotify+0x128>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 80129e6:	f7ff fd11 	bl	801240c <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80129ea:	6a3b      	ldr	r3, [r7, #32]
 80129ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129ee:	4b0c      	ldr	r3, [pc, #48]	; (8012a20 <xTaskGenericNotify+0x164>)
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129f4:	429a      	cmp	r2, r3
 80129f6:	d907      	bls.n	8012a08 <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80129f8:	4b0a      	ldr	r3, [pc, #40]	; (8012a24 <xTaskGenericNotify+0x168>)
 80129fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129fe:	601a      	str	r2, [r3, #0]
 8012a00:	f3bf 8f4f 	dsb	sy
 8012a04:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012a08:	f7fd fa9e 	bl	800ff48 <vPortExitCritical>

		return xReturn;
 8012a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8012a0e:	4618      	mov	r0, r3
 8012a10:	3728      	adds	r7, #40	; 0x28
 8012a12:	46bd      	mov	sp, r7
 8012a14:	bd80      	pop	{r7, pc}
 8012a16:	bf00      	nop
 8012a18:	2002df0c 	.word	0x2002df0c
 8012a1c:	2002da34 	.word	0x2002da34
 8012a20:	2002da30 	.word	0x2002da30
 8012a24:	e000ed04 	.word	0xe000ed04

08012a28 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b08e      	sub	sp, #56	; 0x38
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	60f8      	str	r0, [r7, #12]
 8012a30:	60b9      	str	r1, [r7, #8]
 8012a32:	603b      	str	r3, [r7, #0]
 8012a34:	4613      	mov	r3, r2
 8012a36:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8012a38:	2301      	movs	r3, #1
 8012a3a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d109      	bne.n	8012a56 <xTaskGenericNotifyFromISR+0x2e>
 8012a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a46:	f383 8811 	msr	BASEPRI, r3
 8012a4a:	f3bf 8f6f 	isb	sy
 8012a4e:	f3bf 8f4f 	dsb	sy
 8012a52:	627b      	str	r3, [r7, #36]	; 0x24
 8012a54:	e7fe      	b.n	8012a54 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012a56:	f7fd fb25 	bl	80100a4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8012a5e:	f3ef 8211 	mrs	r2, BASEPRI
 8012a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a66:	f383 8811 	msr	BASEPRI, r3
 8012a6a:	f3bf 8f6f 	isb	sy
 8012a6e:	f3bf 8f4f 	dsb	sy
 8012a72:	623a      	str	r2, [r7, #32]
 8012a74:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8012a76:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012a78:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8012a7a:	683b      	ldr	r3, [r7, #0]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d003      	beq.n	8012a88 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8012a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012a84:	683b      	ldr	r3, [r7, #0]
 8012a86:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a8a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8012a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a94:	2202      	movs	r2, #2
 8012a96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8012a9a:	79fb      	ldrb	r3, [r7, #7]
 8012a9c:	2b04      	cmp	r3, #4
 8012a9e:	d829      	bhi.n	8012af4 <xTaskGenericNotifyFromISR+0xcc>
 8012aa0:	a201      	add	r2, pc, #4	; (adr r2, 8012aa8 <xTaskGenericNotifyFromISR+0x80>)
 8012aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012aa6:	bf00      	nop
 8012aa8:	08012b13 	.word	0x08012b13
 8012aac:	08012abd 	.word	0x08012abd
 8012ab0:	08012acb 	.word	0x08012acb
 8012ab4:	08012ad7 	.word	0x08012ad7
 8012ab8:	08012adf 	.word	0x08012adf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8012abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012abe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012ac0:	68bb      	ldr	r3, [r7, #8]
 8012ac2:	431a      	orrs	r2, r3
 8012ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ac6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012ac8:	e026      	b.n	8012b18 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8012aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ace:	1c5a      	adds	r2, r3, #1
 8012ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ad2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012ad4:	e020      	b.n	8012b18 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8012ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ad8:	68ba      	ldr	r2, [r7, #8]
 8012ada:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012adc:	e01c      	b.n	8012b18 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8012ade:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012ae2:	2b02      	cmp	r3, #2
 8012ae4:	d003      	beq.n	8012aee <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8012ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ae8:	68ba      	ldr	r2, [r7, #8]
 8012aea:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8012aec:	e014      	b.n	8012b18 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 8012aee:	2300      	movs	r3, #0
 8012af0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8012af2:	e011      	b.n	8012b18 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8012af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012af8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012afc:	d00b      	beq.n	8012b16 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 8012afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b02:	f383 8811 	msr	BASEPRI, r3
 8012b06:	f3bf 8f6f 	isb	sy
 8012b0a:	f3bf 8f4f 	dsb	sy
 8012b0e:	61bb      	str	r3, [r7, #24]
 8012b10:	e7fe      	b.n	8012b10 <xTaskGenericNotifyFromISR+0xe8>
					break;
 8012b12:	bf00      	nop
 8012b14:	e000      	b.n	8012b18 <xTaskGenericNotifyFromISR+0xf0>
					break;
 8012b16:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8012b18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012b1c:	2b01      	cmp	r3, #1
 8012b1e:	d145      	bne.n	8012bac <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8012b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d009      	beq.n	8012b3c <xTaskGenericNotifyFromISR+0x114>
 8012b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b2c:	f383 8811 	msr	BASEPRI, r3
 8012b30:	f3bf 8f6f 	isb	sy
 8012b34:	f3bf 8f4f 	dsb	sy
 8012b38:	617b      	str	r3, [r7, #20]
 8012b3a:	e7fe      	b.n	8012b3a <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012b3c:	4b20      	ldr	r3, [pc, #128]	; (8012bc0 <xTaskGenericNotifyFromISR+0x198>)
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d11d      	bne.n	8012b80 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b46:	3304      	adds	r3, #4
 8012b48:	4618      	mov	r0, r3
 8012b4a:	f7fd fd4b 	bl	80105e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b52:	4b1c      	ldr	r3, [pc, #112]	; (8012bc4 <xTaskGenericNotifyFromISR+0x19c>)
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	429a      	cmp	r2, r3
 8012b58:	d903      	bls.n	8012b62 <xTaskGenericNotifyFromISR+0x13a>
 8012b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b5e:	4a19      	ldr	r2, [pc, #100]	; (8012bc4 <xTaskGenericNotifyFromISR+0x19c>)
 8012b60:	6013      	str	r3, [r2, #0]
 8012b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b66:	4613      	mov	r3, r2
 8012b68:	009b      	lsls	r3, r3, #2
 8012b6a:	4413      	add	r3, r2
 8012b6c:	009b      	lsls	r3, r3, #2
 8012b6e:	4a16      	ldr	r2, [pc, #88]	; (8012bc8 <xTaskGenericNotifyFromISR+0x1a0>)
 8012b70:	441a      	add	r2, r3
 8012b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b74:	3304      	adds	r3, #4
 8012b76:	4619      	mov	r1, r3
 8012b78:	4610      	mov	r0, r2
 8012b7a:	f7fd fcd6 	bl	801052a <vListInsertEnd>
 8012b7e:	e005      	b.n	8012b8c <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8012b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b82:	3318      	adds	r3, #24
 8012b84:	4619      	mov	r1, r3
 8012b86:	4811      	ldr	r0, [pc, #68]	; (8012bcc <xTaskGenericNotifyFromISR+0x1a4>)
 8012b88:	f7fd fccf 	bl	801052a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b90:	4b0f      	ldr	r3, [pc, #60]	; (8012bd0 <xTaskGenericNotifyFromISR+0x1a8>)
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b96:	429a      	cmp	r2, r3
 8012b98:	d908      	bls.n	8012bac <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8012b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d002      	beq.n	8012ba6 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8012ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ba2:	2201      	movs	r2, #1
 8012ba4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8012ba6:	4b0b      	ldr	r3, [pc, #44]	; (8012bd4 <xTaskGenericNotifyFromISR+0x1ac>)
 8012ba8:	2201      	movs	r2, #1
 8012baa:	601a      	str	r2, [r3, #0]
 8012bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bae:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012bb0:	693b      	ldr	r3, [r7, #16]
 8012bb2:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8012bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8012bb8:	4618      	mov	r0, r3
 8012bba:	3738      	adds	r7, #56	; 0x38
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	bd80      	pop	{r7, pc}
 8012bc0:	2002df2c 	.word	0x2002df2c
 8012bc4:	2002df0c 	.word	0x2002df0c
 8012bc8:	2002da34 	.word	0x2002da34
 8012bcc:	2002dec4 	.word	0x2002dec4
 8012bd0:	2002da30 	.word	0x2002da30
 8012bd4:	2002df18 	.word	0x2002df18

08012bd8 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b084      	sub	sp, #16
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d102      	bne.n	8012bec <xTaskNotifyStateClear+0x14>
 8012be6:	4b0e      	ldr	r3, [pc, #56]	; (8012c20 <xTaskNotifyStateClear+0x48>)
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	e000      	b.n	8012bee <xTaskNotifyStateClear+0x16>
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8012bf0:	f7fd f97c 	bl	800feec <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8012bf4:	68bb      	ldr	r3, [r7, #8]
 8012bf6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012bfa:	b2db      	uxtb	r3, r3
 8012bfc:	2b02      	cmp	r3, #2
 8012bfe:	d106      	bne.n	8012c0e <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012c00:	68bb      	ldr	r3, [r7, #8]
 8012c02:	2200      	movs	r2, #0
 8012c04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				xReturn = pdPASS;
 8012c08:	2301      	movs	r3, #1
 8012c0a:	60fb      	str	r3, [r7, #12]
 8012c0c:	e001      	b.n	8012c12 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8012c0e:	2300      	movs	r3, #0
 8012c10:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8012c12:	f7fd f999 	bl	800ff48 <vPortExitCritical>

		return xReturn;
 8012c16:	68fb      	ldr	r3, [r7, #12]
	}
 8012c18:	4618      	mov	r0, r3
 8012c1a:	3710      	adds	r7, #16
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	bd80      	pop	{r7, pc}
 8012c20:	2002da30 	.word	0x2002da30

08012c24 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b084      	sub	sp, #16
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	6078      	str	r0, [r7, #4]
 8012c2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012c2e:	4b21      	ldr	r3, [pc, #132]	; (8012cb4 <prvAddCurrentTaskToDelayedList+0x90>)
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012c34:	4b20      	ldr	r3, [pc, #128]	; (8012cb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	3304      	adds	r3, #4
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	f7fd fcd2 	bl	80105e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012c46:	d10a      	bne.n	8012c5e <prvAddCurrentTaskToDelayedList+0x3a>
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d007      	beq.n	8012c5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c4e:	4b1a      	ldr	r3, [pc, #104]	; (8012cb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	3304      	adds	r3, #4
 8012c54:	4619      	mov	r1, r3
 8012c56:	4819      	ldr	r0, [pc, #100]	; (8012cbc <prvAddCurrentTaskToDelayedList+0x98>)
 8012c58:	f7fd fc67 	bl	801052a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012c5c:	e026      	b.n	8012cac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012c5e:	68fa      	ldr	r2, [r7, #12]
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	4413      	add	r3, r2
 8012c64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012c66:	4b14      	ldr	r3, [pc, #80]	; (8012cb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	68ba      	ldr	r2, [r7, #8]
 8012c6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012c6e:	68ba      	ldr	r2, [r7, #8]
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	429a      	cmp	r2, r3
 8012c74:	d209      	bcs.n	8012c8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c76:	4b12      	ldr	r3, [pc, #72]	; (8012cc0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012c78:	681a      	ldr	r2, [r3, #0]
 8012c7a:	4b0f      	ldr	r3, [pc, #60]	; (8012cb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	3304      	adds	r3, #4
 8012c80:	4619      	mov	r1, r3
 8012c82:	4610      	mov	r0, r2
 8012c84:	f7fd fc75 	bl	8010572 <vListInsert>
}
 8012c88:	e010      	b.n	8012cac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c8a:	4b0e      	ldr	r3, [pc, #56]	; (8012cc4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012c8c:	681a      	ldr	r2, [r3, #0]
 8012c8e:	4b0a      	ldr	r3, [pc, #40]	; (8012cb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	3304      	adds	r3, #4
 8012c94:	4619      	mov	r1, r3
 8012c96:	4610      	mov	r0, r2
 8012c98:	f7fd fc6b 	bl	8010572 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012c9c:	4b0a      	ldr	r3, [pc, #40]	; (8012cc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	68ba      	ldr	r2, [r7, #8]
 8012ca2:	429a      	cmp	r2, r3
 8012ca4:	d202      	bcs.n	8012cac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012ca6:	4a08      	ldr	r2, [pc, #32]	; (8012cc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012ca8:	68bb      	ldr	r3, [r7, #8]
 8012caa:	6013      	str	r3, [r2, #0]
}
 8012cac:	bf00      	nop
 8012cae:	3710      	adds	r7, #16
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	bd80      	pop	{r7, pc}
 8012cb4:	2002df08 	.word	0x2002df08
 8012cb8:	2002da30 	.word	0x2002da30
 8012cbc:	2002def0 	.word	0x2002def0
 8012cc0:	2002dec0 	.word	0x2002dec0
 8012cc4:	2002debc 	.word	0x2002debc
 8012cc8:	2002df24 	.word	0x2002df24

08012ccc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b08a      	sub	sp, #40	; 0x28
 8012cd0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012cd6:	f000 faff 	bl	80132d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012cda:	4b1c      	ldr	r3, [pc, #112]	; (8012d4c <xTimerCreateTimerTask+0x80>)
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d021      	beq.n	8012d26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012cea:	1d3a      	adds	r2, r7, #4
 8012cec:	f107 0108 	add.w	r1, r7, #8
 8012cf0:	f107 030c 	add.w	r3, r7, #12
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	f7fc ffb9 	bl	800fc6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012cfa:	6879      	ldr	r1, [r7, #4]
 8012cfc:	68bb      	ldr	r3, [r7, #8]
 8012cfe:	68fa      	ldr	r2, [r7, #12]
 8012d00:	9202      	str	r2, [sp, #8]
 8012d02:	9301      	str	r3, [sp, #4]
 8012d04:	2302      	movs	r3, #2
 8012d06:	9300      	str	r3, [sp, #0]
 8012d08:	2300      	movs	r3, #0
 8012d0a:	460a      	mov	r2, r1
 8012d0c:	4910      	ldr	r1, [pc, #64]	; (8012d50 <xTimerCreateTimerTask+0x84>)
 8012d0e:	4811      	ldr	r0, [pc, #68]	; (8012d54 <xTimerCreateTimerTask+0x88>)
 8012d10:	f7fe fd34 	bl	801177c <xTaskCreateStatic>
 8012d14:	4602      	mov	r2, r0
 8012d16:	4b10      	ldr	r3, [pc, #64]	; (8012d58 <xTimerCreateTimerTask+0x8c>)
 8012d18:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012d1a:	4b0f      	ldr	r3, [pc, #60]	; (8012d58 <xTimerCreateTimerTask+0x8c>)
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d001      	beq.n	8012d26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012d22:	2301      	movs	r3, #1
 8012d24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012d26:	697b      	ldr	r3, [r7, #20]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d109      	bne.n	8012d40 <xTimerCreateTimerTask+0x74>
	__asm volatile
 8012d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d30:	f383 8811 	msr	BASEPRI, r3
 8012d34:	f3bf 8f6f 	isb	sy
 8012d38:	f3bf 8f4f 	dsb	sy
 8012d3c:	613b      	str	r3, [r7, #16]
 8012d3e:	e7fe      	b.n	8012d3e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8012d40:	697b      	ldr	r3, [r7, #20]
}
 8012d42:	4618      	mov	r0, r3
 8012d44:	3718      	adds	r7, #24
 8012d46:	46bd      	mov	sp, r7
 8012d48:	bd80      	pop	{r7, pc}
 8012d4a:	bf00      	nop
 8012d4c:	2002df60 	.word	0x2002df60
 8012d50:	08017f98 	.word	0x08017f98
 8012d54:	08012e8d 	.word	0x08012e8d
 8012d58:	2002df64 	.word	0x2002df64

08012d5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b08a      	sub	sp, #40	; 0x28
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	60f8      	str	r0, [r7, #12]
 8012d64:	60b9      	str	r1, [r7, #8]
 8012d66:	607a      	str	r2, [r7, #4]
 8012d68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d109      	bne.n	8012d88 <xTimerGenericCommand+0x2c>
 8012d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d78:	f383 8811 	msr	BASEPRI, r3
 8012d7c:	f3bf 8f6f 	isb	sy
 8012d80:	f3bf 8f4f 	dsb	sy
 8012d84:	623b      	str	r3, [r7, #32]
 8012d86:	e7fe      	b.n	8012d86 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012d88:	4b19      	ldr	r3, [pc, #100]	; (8012df0 <xTimerGenericCommand+0x94>)
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d02a      	beq.n	8012de6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012d90:	68bb      	ldr	r3, [r7, #8]
 8012d92:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012d9c:	68bb      	ldr	r3, [r7, #8]
 8012d9e:	2b05      	cmp	r3, #5
 8012da0:	dc18      	bgt.n	8012dd4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012da2:	f7ff fb63 	bl	801246c <xTaskGetSchedulerState>
 8012da6:	4603      	mov	r3, r0
 8012da8:	2b02      	cmp	r3, #2
 8012daa:	d109      	bne.n	8012dc0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012dac:	4b10      	ldr	r3, [pc, #64]	; (8012df0 <xTimerGenericCommand+0x94>)
 8012dae:	6818      	ldr	r0, [r3, #0]
 8012db0:	f107 0110 	add.w	r1, r7, #16
 8012db4:	2300      	movs	r3, #0
 8012db6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012db8:	f7fd fe96 	bl	8010ae8 <xQueueGenericSend>
 8012dbc:	6278      	str	r0, [r7, #36]	; 0x24
 8012dbe:	e012      	b.n	8012de6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012dc0:	4b0b      	ldr	r3, [pc, #44]	; (8012df0 <xTimerGenericCommand+0x94>)
 8012dc2:	6818      	ldr	r0, [r3, #0]
 8012dc4:	f107 0110 	add.w	r1, r7, #16
 8012dc8:	2300      	movs	r3, #0
 8012dca:	2200      	movs	r2, #0
 8012dcc:	f7fd fe8c 	bl	8010ae8 <xQueueGenericSend>
 8012dd0:	6278      	str	r0, [r7, #36]	; 0x24
 8012dd2:	e008      	b.n	8012de6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012dd4:	4b06      	ldr	r3, [pc, #24]	; (8012df0 <xTimerGenericCommand+0x94>)
 8012dd6:	6818      	ldr	r0, [r3, #0]
 8012dd8:	f107 0110 	add.w	r1, r7, #16
 8012ddc:	2300      	movs	r3, #0
 8012dde:	683a      	ldr	r2, [r7, #0]
 8012de0:	f7fd ff7c 	bl	8010cdc <xQueueGenericSendFromISR>
 8012de4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012de8:	4618      	mov	r0, r3
 8012dea:	3728      	adds	r7, #40	; 0x28
 8012dec:	46bd      	mov	sp, r7
 8012dee:	bd80      	pop	{r7, pc}
 8012df0:	2002df60 	.word	0x2002df60

08012df4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012df4:	b580      	push	{r7, lr}
 8012df6:	b088      	sub	sp, #32
 8012df8:	af02      	add	r7, sp, #8
 8012dfa:	6078      	str	r0, [r7, #4]
 8012dfc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012dfe:	4b22      	ldr	r3, [pc, #136]	; (8012e88 <prvProcessExpiredTimer+0x94>)
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	68db      	ldr	r3, [r3, #12]
 8012e04:	68db      	ldr	r3, [r3, #12]
 8012e06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012e08:	697b      	ldr	r3, [r7, #20]
 8012e0a:	3304      	adds	r3, #4
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f7fd fbe9 	bl	80105e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012e12:	697b      	ldr	r3, [r7, #20]
 8012e14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e18:	f003 0304 	and.w	r3, r3, #4
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d021      	beq.n	8012e64 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012e20:	697b      	ldr	r3, [r7, #20]
 8012e22:	699a      	ldr	r2, [r3, #24]
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	18d1      	adds	r1, r2, r3
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	683a      	ldr	r2, [r7, #0]
 8012e2c:	6978      	ldr	r0, [r7, #20]
 8012e2e:	f000 f8d1 	bl	8012fd4 <prvInsertTimerInActiveList>
 8012e32:	4603      	mov	r3, r0
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d01e      	beq.n	8012e76 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012e38:	2300      	movs	r3, #0
 8012e3a:	9300      	str	r3, [sp, #0]
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	687a      	ldr	r2, [r7, #4]
 8012e40:	2100      	movs	r1, #0
 8012e42:	6978      	ldr	r0, [r7, #20]
 8012e44:	f7ff ff8a 	bl	8012d5c <xTimerGenericCommand>
 8012e48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012e4a:	693b      	ldr	r3, [r7, #16]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d112      	bne.n	8012e76 <prvProcessExpiredTimer+0x82>
 8012e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e54:	f383 8811 	msr	BASEPRI, r3
 8012e58:	f3bf 8f6f 	isb	sy
 8012e5c:	f3bf 8f4f 	dsb	sy
 8012e60:	60fb      	str	r3, [r7, #12]
 8012e62:	e7fe      	b.n	8012e62 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012e64:	697b      	ldr	r3, [r7, #20]
 8012e66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e6a:	f023 0301 	bic.w	r3, r3, #1
 8012e6e:	b2da      	uxtb	r2, r3
 8012e70:	697b      	ldr	r3, [r7, #20]
 8012e72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012e76:	697b      	ldr	r3, [r7, #20]
 8012e78:	6a1b      	ldr	r3, [r3, #32]
 8012e7a:	6978      	ldr	r0, [r7, #20]
 8012e7c:	4798      	blx	r3
}
 8012e7e:	bf00      	nop
 8012e80:	3718      	adds	r7, #24
 8012e82:	46bd      	mov	sp, r7
 8012e84:	bd80      	pop	{r7, pc}
 8012e86:	bf00      	nop
 8012e88:	2002df58 	.word	0x2002df58

08012e8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b084      	sub	sp, #16
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012e94:	f107 0308 	add.w	r3, r7, #8
 8012e98:	4618      	mov	r0, r3
 8012e9a:	f000 f857 	bl	8012f4c <prvGetNextExpireTime>
 8012e9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012ea0:	68bb      	ldr	r3, [r7, #8]
 8012ea2:	4619      	mov	r1, r3
 8012ea4:	68f8      	ldr	r0, [r7, #12]
 8012ea6:	f000 f803 	bl	8012eb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012eaa:	f000 f8d5 	bl	8013058 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012eae:	e7f1      	b.n	8012e94 <prvTimerTask+0x8>

08012eb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b084      	sub	sp, #16
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
 8012eb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012eba:	f7fe fe95 	bl	8011be8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012ebe:	f107 0308 	add.w	r3, r7, #8
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f000 f866 	bl	8012f94 <prvSampleTimeNow>
 8012ec8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012eca:	68bb      	ldr	r3, [r7, #8]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d130      	bne.n	8012f32 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012ed0:	683b      	ldr	r3, [r7, #0]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d10a      	bne.n	8012eec <prvProcessTimerOrBlockTask+0x3c>
 8012ed6:	687a      	ldr	r2, [r7, #4]
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	429a      	cmp	r2, r3
 8012edc:	d806      	bhi.n	8012eec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012ede:	f7fe fec9 	bl	8011c74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012ee2:	68f9      	ldr	r1, [r7, #12]
 8012ee4:	6878      	ldr	r0, [r7, #4]
 8012ee6:	f7ff ff85 	bl	8012df4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012eea:	e024      	b.n	8012f36 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012eec:	683b      	ldr	r3, [r7, #0]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d008      	beq.n	8012f04 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012ef2:	4b13      	ldr	r3, [pc, #76]	; (8012f40 <prvProcessTimerOrBlockTask+0x90>)
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d101      	bne.n	8012f00 <prvProcessTimerOrBlockTask+0x50>
 8012efc:	2301      	movs	r3, #1
 8012efe:	e000      	b.n	8012f02 <prvProcessTimerOrBlockTask+0x52>
 8012f00:	2300      	movs	r3, #0
 8012f02:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012f04:	4b0f      	ldr	r3, [pc, #60]	; (8012f44 <prvProcessTimerOrBlockTask+0x94>)
 8012f06:	6818      	ldr	r0, [r3, #0]
 8012f08:	687a      	ldr	r2, [r7, #4]
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	1ad3      	subs	r3, r2, r3
 8012f0e:	683a      	ldr	r2, [r7, #0]
 8012f10:	4619      	mov	r1, r3
 8012f12:	f7fe fbff 	bl	8011714 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012f16:	f7fe fead 	bl	8011c74 <xTaskResumeAll>
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d10a      	bne.n	8012f36 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012f20:	4b09      	ldr	r3, [pc, #36]	; (8012f48 <prvProcessTimerOrBlockTask+0x98>)
 8012f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f26:	601a      	str	r2, [r3, #0]
 8012f28:	f3bf 8f4f 	dsb	sy
 8012f2c:	f3bf 8f6f 	isb	sy
}
 8012f30:	e001      	b.n	8012f36 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012f32:	f7fe fe9f 	bl	8011c74 <xTaskResumeAll>
}
 8012f36:	bf00      	nop
 8012f38:	3710      	adds	r7, #16
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bd80      	pop	{r7, pc}
 8012f3e:	bf00      	nop
 8012f40:	2002df5c 	.word	0x2002df5c
 8012f44:	2002df60 	.word	0x2002df60
 8012f48:	e000ed04 	.word	0xe000ed04

08012f4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012f4c:	b480      	push	{r7}
 8012f4e:	b085      	sub	sp, #20
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012f54:	4b0e      	ldr	r3, [pc, #56]	; (8012f90 <prvGetNextExpireTime+0x44>)
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d101      	bne.n	8012f62 <prvGetNextExpireTime+0x16>
 8012f5e:	2201      	movs	r2, #1
 8012f60:	e000      	b.n	8012f64 <prvGetNextExpireTime+0x18>
 8012f62:	2200      	movs	r2, #0
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d105      	bne.n	8012f7c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012f70:	4b07      	ldr	r3, [pc, #28]	; (8012f90 <prvGetNextExpireTime+0x44>)
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	68db      	ldr	r3, [r3, #12]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	60fb      	str	r3, [r7, #12]
 8012f7a:	e001      	b.n	8012f80 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012f80:	68fb      	ldr	r3, [r7, #12]
}
 8012f82:	4618      	mov	r0, r3
 8012f84:	3714      	adds	r7, #20
 8012f86:	46bd      	mov	sp, r7
 8012f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8c:	4770      	bx	lr
 8012f8e:	bf00      	nop
 8012f90:	2002df58 	.word	0x2002df58

08012f94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b084      	sub	sp, #16
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012f9c:	f7fe ff06 	bl	8011dac <xTaskGetTickCount>
 8012fa0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012fa2:	4b0b      	ldr	r3, [pc, #44]	; (8012fd0 <prvSampleTimeNow+0x3c>)
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	68fa      	ldr	r2, [r7, #12]
 8012fa8:	429a      	cmp	r2, r3
 8012faa:	d205      	bcs.n	8012fb8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012fac:	f000 f930 	bl	8013210 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	2201      	movs	r2, #1
 8012fb4:	601a      	str	r2, [r3, #0]
 8012fb6:	e002      	b.n	8012fbe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	2200      	movs	r2, #0
 8012fbc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012fbe:	4a04      	ldr	r2, [pc, #16]	; (8012fd0 <prvSampleTimeNow+0x3c>)
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012fc4:	68fb      	ldr	r3, [r7, #12]
}
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	3710      	adds	r7, #16
 8012fca:	46bd      	mov	sp, r7
 8012fcc:	bd80      	pop	{r7, pc}
 8012fce:	bf00      	nop
 8012fd0:	2002df68 	.word	0x2002df68

08012fd4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b086      	sub	sp, #24
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	60f8      	str	r0, [r7, #12]
 8012fdc:	60b9      	str	r1, [r7, #8]
 8012fde:	607a      	str	r2, [r7, #4]
 8012fe0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	68ba      	ldr	r2, [r7, #8]
 8012fea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	68fa      	ldr	r2, [r7, #12]
 8012ff0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012ff2:	68ba      	ldr	r2, [r7, #8]
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	429a      	cmp	r2, r3
 8012ff8:	d812      	bhi.n	8013020 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012ffa:	687a      	ldr	r2, [r7, #4]
 8012ffc:	683b      	ldr	r3, [r7, #0]
 8012ffe:	1ad2      	subs	r2, r2, r3
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	699b      	ldr	r3, [r3, #24]
 8013004:	429a      	cmp	r2, r3
 8013006:	d302      	bcc.n	801300e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013008:	2301      	movs	r3, #1
 801300a:	617b      	str	r3, [r7, #20]
 801300c:	e01b      	b.n	8013046 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801300e:	4b10      	ldr	r3, [pc, #64]	; (8013050 <prvInsertTimerInActiveList+0x7c>)
 8013010:	681a      	ldr	r2, [r3, #0]
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	3304      	adds	r3, #4
 8013016:	4619      	mov	r1, r3
 8013018:	4610      	mov	r0, r2
 801301a:	f7fd faaa 	bl	8010572 <vListInsert>
 801301e:	e012      	b.n	8013046 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013020:	687a      	ldr	r2, [r7, #4]
 8013022:	683b      	ldr	r3, [r7, #0]
 8013024:	429a      	cmp	r2, r3
 8013026:	d206      	bcs.n	8013036 <prvInsertTimerInActiveList+0x62>
 8013028:	68ba      	ldr	r2, [r7, #8]
 801302a:	683b      	ldr	r3, [r7, #0]
 801302c:	429a      	cmp	r2, r3
 801302e:	d302      	bcc.n	8013036 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013030:	2301      	movs	r3, #1
 8013032:	617b      	str	r3, [r7, #20]
 8013034:	e007      	b.n	8013046 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013036:	4b07      	ldr	r3, [pc, #28]	; (8013054 <prvInsertTimerInActiveList+0x80>)
 8013038:	681a      	ldr	r2, [r3, #0]
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	3304      	adds	r3, #4
 801303e:	4619      	mov	r1, r3
 8013040:	4610      	mov	r0, r2
 8013042:	f7fd fa96 	bl	8010572 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013046:	697b      	ldr	r3, [r7, #20]
}
 8013048:	4618      	mov	r0, r3
 801304a:	3718      	adds	r7, #24
 801304c:	46bd      	mov	sp, r7
 801304e:	bd80      	pop	{r7, pc}
 8013050:	2002df5c 	.word	0x2002df5c
 8013054:	2002df58 	.word	0x2002df58

08013058 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013058:	b580      	push	{r7, lr}
 801305a:	b08e      	sub	sp, #56	; 0x38
 801305c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801305e:	e0c6      	b.n	80131ee <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	2b00      	cmp	r3, #0
 8013064:	da17      	bge.n	8013096 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013066:	1d3b      	adds	r3, r7, #4
 8013068:	3304      	adds	r3, #4
 801306a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801306e:	2b00      	cmp	r3, #0
 8013070:	d109      	bne.n	8013086 <prvProcessReceivedCommands+0x2e>
 8013072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013076:	f383 8811 	msr	BASEPRI, r3
 801307a:	f3bf 8f6f 	isb	sy
 801307e:	f3bf 8f4f 	dsb	sy
 8013082:	61fb      	str	r3, [r7, #28]
 8013084:	e7fe      	b.n	8013084 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801308c:	6850      	ldr	r0, [r2, #4]
 801308e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013090:	6892      	ldr	r2, [r2, #8]
 8013092:	4611      	mov	r1, r2
 8013094:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	2b00      	cmp	r3, #0
 801309a:	f2c0 80a7 	blt.w	80131ec <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80130a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130a4:	695b      	ldr	r3, [r3, #20]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d004      	beq.n	80130b4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80130aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130ac:	3304      	adds	r3, #4
 80130ae:	4618      	mov	r0, r3
 80130b0:	f7fd fa98 	bl	80105e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80130b4:	463b      	mov	r3, r7
 80130b6:	4618      	mov	r0, r3
 80130b8:	f7ff ff6c 	bl	8012f94 <prvSampleTimeNow>
 80130bc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	2b09      	cmp	r3, #9
 80130c2:	f200 8094 	bhi.w	80131ee <prvProcessReceivedCommands+0x196>
 80130c6:	a201      	add	r2, pc, #4	; (adr r2, 80130cc <prvProcessReceivedCommands+0x74>)
 80130c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130cc:	080130f5 	.word	0x080130f5
 80130d0:	080130f5 	.word	0x080130f5
 80130d4:	080130f5 	.word	0x080130f5
 80130d8:	08013167 	.word	0x08013167
 80130dc:	0801317b 	.word	0x0801317b
 80130e0:	080131c3 	.word	0x080131c3
 80130e4:	080130f5 	.word	0x080130f5
 80130e8:	080130f5 	.word	0x080130f5
 80130ec:	08013167 	.word	0x08013167
 80130f0:	0801317b 	.word	0x0801317b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80130f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80130fa:	f043 0301 	orr.w	r3, r3, #1
 80130fe:	b2da      	uxtb	r2, r3
 8013100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013102:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013106:	68ba      	ldr	r2, [r7, #8]
 8013108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801310a:	699b      	ldr	r3, [r3, #24]
 801310c:	18d1      	adds	r1, r2, r3
 801310e:	68bb      	ldr	r3, [r7, #8]
 8013110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013114:	f7ff ff5e 	bl	8012fd4 <prvInsertTimerInActiveList>
 8013118:	4603      	mov	r3, r0
 801311a:	2b00      	cmp	r3, #0
 801311c:	d067      	beq.n	80131ee <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801311e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013120:	6a1b      	ldr	r3, [r3, #32]
 8013122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013124:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013128:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801312c:	f003 0304 	and.w	r3, r3, #4
 8013130:	2b00      	cmp	r3, #0
 8013132:	d05c      	beq.n	80131ee <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013134:	68ba      	ldr	r2, [r7, #8]
 8013136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013138:	699b      	ldr	r3, [r3, #24]
 801313a:	441a      	add	r2, r3
 801313c:	2300      	movs	r3, #0
 801313e:	9300      	str	r3, [sp, #0]
 8013140:	2300      	movs	r3, #0
 8013142:	2100      	movs	r1, #0
 8013144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013146:	f7ff fe09 	bl	8012d5c <xTimerGenericCommand>
 801314a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801314c:	6a3b      	ldr	r3, [r7, #32]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d14d      	bne.n	80131ee <prvProcessReceivedCommands+0x196>
 8013152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013156:	f383 8811 	msr	BASEPRI, r3
 801315a:	f3bf 8f6f 	isb	sy
 801315e:	f3bf 8f4f 	dsb	sy
 8013162:	61bb      	str	r3, [r7, #24]
 8013164:	e7fe      	b.n	8013164 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013168:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801316c:	f023 0301 	bic.w	r3, r3, #1
 8013170:	b2da      	uxtb	r2, r3
 8013172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013174:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013178:	e039      	b.n	80131ee <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801317a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801317c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013180:	f043 0301 	orr.w	r3, r3, #1
 8013184:	b2da      	uxtb	r2, r3
 8013186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013188:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801318c:	68ba      	ldr	r2, [r7, #8]
 801318e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013190:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013194:	699b      	ldr	r3, [r3, #24]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d109      	bne.n	80131ae <prvProcessReceivedCommands+0x156>
 801319a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801319e:	f383 8811 	msr	BASEPRI, r3
 80131a2:	f3bf 8f6f 	isb	sy
 80131a6:	f3bf 8f4f 	dsb	sy
 80131aa:	617b      	str	r3, [r7, #20]
 80131ac:	e7fe      	b.n	80131ac <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80131ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131b0:	699a      	ldr	r2, [r3, #24]
 80131b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131b4:	18d1      	adds	r1, r2, r3
 80131b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80131bc:	f7ff ff0a 	bl	8012fd4 <prvInsertTimerInActiveList>
					break;
 80131c0:	e015      	b.n	80131ee <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80131c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131c8:	f003 0302 	and.w	r3, r3, #2
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d103      	bne.n	80131d8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80131d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80131d2:	f7fd f867 	bl	80102a4 <vPortFree>
 80131d6:	e00a      	b.n	80131ee <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80131d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131de:	f023 0301 	bic.w	r3, r3, #1
 80131e2:	b2da      	uxtb	r2, r3
 80131e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80131ea:	e000      	b.n	80131ee <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80131ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80131ee:	4b07      	ldr	r3, [pc, #28]	; (801320c <prvProcessReceivedCommands+0x1b4>)
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	1d39      	adds	r1, r7, #4
 80131f4:	2200      	movs	r2, #0
 80131f6:	4618      	mov	r0, r3
 80131f8:	f7fd fe8e 	bl	8010f18 <xQueueReceive>
 80131fc:	4603      	mov	r3, r0
 80131fe:	2b00      	cmp	r3, #0
 8013200:	f47f af2e 	bne.w	8013060 <prvProcessReceivedCommands+0x8>
	}
}
 8013204:	bf00      	nop
 8013206:	3730      	adds	r7, #48	; 0x30
 8013208:	46bd      	mov	sp, r7
 801320a:	bd80      	pop	{r7, pc}
 801320c:	2002df60 	.word	0x2002df60

08013210 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013210:	b580      	push	{r7, lr}
 8013212:	b088      	sub	sp, #32
 8013214:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013216:	e047      	b.n	80132a8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013218:	4b2d      	ldr	r3, [pc, #180]	; (80132d0 <prvSwitchTimerLists+0xc0>)
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	68db      	ldr	r3, [r3, #12]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013222:	4b2b      	ldr	r3, [pc, #172]	; (80132d0 <prvSwitchTimerLists+0xc0>)
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	68db      	ldr	r3, [r3, #12]
 8013228:	68db      	ldr	r3, [r3, #12]
 801322a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	3304      	adds	r3, #4
 8013230:	4618      	mov	r0, r3
 8013232:	f7fd f9d7 	bl	80105e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	6a1b      	ldr	r3, [r3, #32]
 801323a:	68f8      	ldr	r0, [r7, #12]
 801323c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013244:	f003 0304 	and.w	r3, r3, #4
 8013248:	2b00      	cmp	r3, #0
 801324a:	d02d      	beq.n	80132a8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	699b      	ldr	r3, [r3, #24]
 8013250:	693a      	ldr	r2, [r7, #16]
 8013252:	4413      	add	r3, r2
 8013254:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013256:	68ba      	ldr	r2, [r7, #8]
 8013258:	693b      	ldr	r3, [r7, #16]
 801325a:	429a      	cmp	r2, r3
 801325c:	d90e      	bls.n	801327c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	68ba      	ldr	r2, [r7, #8]
 8013262:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	68fa      	ldr	r2, [r7, #12]
 8013268:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801326a:	4b19      	ldr	r3, [pc, #100]	; (80132d0 <prvSwitchTimerLists+0xc0>)
 801326c:	681a      	ldr	r2, [r3, #0]
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	3304      	adds	r3, #4
 8013272:	4619      	mov	r1, r3
 8013274:	4610      	mov	r0, r2
 8013276:	f7fd f97c 	bl	8010572 <vListInsert>
 801327a:	e015      	b.n	80132a8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801327c:	2300      	movs	r3, #0
 801327e:	9300      	str	r3, [sp, #0]
 8013280:	2300      	movs	r3, #0
 8013282:	693a      	ldr	r2, [r7, #16]
 8013284:	2100      	movs	r1, #0
 8013286:	68f8      	ldr	r0, [r7, #12]
 8013288:	f7ff fd68 	bl	8012d5c <xTimerGenericCommand>
 801328c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d109      	bne.n	80132a8 <prvSwitchTimerLists+0x98>
 8013294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013298:	f383 8811 	msr	BASEPRI, r3
 801329c:	f3bf 8f6f 	isb	sy
 80132a0:	f3bf 8f4f 	dsb	sy
 80132a4:	603b      	str	r3, [r7, #0]
 80132a6:	e7fe      	b.n	80132a6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80132a8:	4b09      	ldr	r3, [pc, #36]	; (80132d0 <prvSwitchTimerLists+0xc0>)
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d1b2      	bne.n	8013218 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80132b2:	4b07      	ldr	r3, [pc, #28]	; (80132d0 <prvSwitchTimerLists+0xc0>)
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80132b8:	4b06      	ldr	r3, [pc, #24]	; (80132d4 <prvSwitchTimerLists+0xc4>)
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	4a04      	ldr	r2, [pc, #16]	; (80132d0 <prvSwitchTimerLists+0xc0>)
 80132be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80132c0:	4a04      	ldr	r2, [pc, #16]	; (80132d4 <prvSwitchTimerLists+0xc4>)
 80132c2:	697b      	ldr	r3, [r7, #20]
 80132c4:	6013      	str	r3, [r2, #0]
}
 80132c6:	bf00      	nop
 80132c8:	3718      	adds	r7, #24
 80132ca:	46bd      	mov	sp, r7
 80132cc:	bd80      	pop	{r7, pc}
 80132ce:	bf00      	nop
 80132d0:	2002df58 	.word	0x2002df58
 80132d4:	2002df5c 	.word	0x2002df5c

080132d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b082      	sub	sp, #8
 80132dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80132de:	f7fc fe05 	bl	800feec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80132e2:	4b15      	ldr	r3, [pc, #84]	; (8013338 <prvCheckForValidListAndQueue+0x60>)
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d120      	bne.n	801332c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80132ea:	4814      	ldr	r0, [pc, #80]	; (801333c <prvCheckForValidListAndQueue+0x64>)
 80132ec:	f7fd f8f0 	bl	80104d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80132f0:	4813      	ldr	r0, [pc, #76]	; (8013340 <prvCheckForValidListAndQueue+0x68>)
 80132f2:	f7fd f8ed 	bl	80104d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80132f6:	4b13      	ldr	r3, [pc, #76]	; (8013344 <prvCheckForValidListAndQueue+0x6c>)
 80132f8:	4a10      	ldr	r2, [pc, #64]	; (801333c <prvCheckForValidListAndQueue+0x64>)
 80132fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80132fc:	4b12      	ldr	r3, [pc, #72]	; (8013348 <prvCheckForValidListAndQueue+0x70>)
 80132fe:	4a10      	ldr	r2, [pc, #64]	; (8013340 <prvCheckForValidListAndQueue+0x68>)
 8013300:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013302:	2300      	movs	r3, #0
 8013304:	9300      	str	r3, [sp, #0]
 8013306:	4b11      	ldr	r3, [pc, #68]	; (801334c <prvCheckForValidListAndQueue+0x74>)
 8013308:	4a11      	ldr	r2, [pc, #68]	; (8013350 <prvCheckForValidListAndQueue+0x78>)
 801330a:	2110      	movs	r1, #16
 801330c:	200a      	movs	r0, #10
 801330e:	f7fd f9fb 	bl	8010708 <xQueueGenericCreateStatic>
 8013312:	4602      	mov	r2, r0
 8013314:	4b08      	ldr	r3, [pc, #32]	; (8013338 <prvCheckForValidListAndQueue+0x60>)
 8013316:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013318:	4b07      	ldr	r3, [pc, #28]	; (8013338 <prvCheckForValidListAndQueue+0x60>)
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d005      	beq.n	801332c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013320:	4b05      	ldr	r3, [pc, #20]	; (8013338 <prvCheckForValidListAndQueue+0x60>)
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	490b      	ldr	r1, [pc, #44]	; (8013354 <prvCheckForValidListAndQueue+0x7c>)
 8013326:	4618      	mov	r0, r3
 8013328:	f7fe f9a2 	bl	8011670 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801332c:	f7fc fe0c 	bl	800ff48 <vPortExitCritical>
}
 8013330:	bf00      	nop
 8013332:	46bd      	mov	sp, r7
 8013334:	bd80      	pop	{r7, pc}
 8013336:	bf00      	nop
 8013338:	2002df60 	.word	0x2002df60
 801333c:	2002df30 	.word	0x2002df30
 8013340:	2002df44 	.word	0x2002df44
 8013344:	2002df58 	.word	0x2002df58
 8013348:	2002df5c 	.word	0x2002df5c
 801334c:	2002e00c 	.word	0x2002e00c
 8013350:	2002df6c 	.word	0x2002df6c
 8013354:	08017fa0 	.word	0x08017fa0

08013358 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8013358:	b480      	push	{r7}
 801335a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801335c:	4b05      	ldr	r3, [pc, #20]	; (8013374 <UTIL_LPM_Init+0x1c>)
 801335e:	2200      	movs	r2, #0
 8013360:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8013362:	4b05      	ldr	r3, [pc, #20]	; (8013378 <UTIL_LPM_Init+0x20>)
 8013364:	2200      	movs	r2, #0
 8013366:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8013368:	bf00      	nop
 801336a:	46bd      	mov	sp, r7
 801336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013370:	4770      	bx	lr
 8013372:	bf00      	nop
 8013374:	2002e05c 	.word	0x2002e05c
 8013378:	2002e060 	.word	0x2002e060

0801337c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801337c:	b480      	push	{r7}
 801337e:	b087      	sub	sp, #28
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
 8013384:	460b      	mov	r3, r1
 8013386:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013388:	f3ef 8310 	mrs	r3, PRIMASK
 801338c:	613b      	str	r3, [r7, #16]
  return(result);
 801338e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8013390:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013392:	b672      	cpsid	i
  
  switch(state)
 8013394:	78fb      	ldrb	r3, [r7, #3]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d009      	beq.n	80133ae <UTIL_LPM_SetOffMode+0x32>
 801339a:	2b01      	cmp	r3, #1
 801339c:	d000      	beq.n	80133a0 <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 801339e:	e00e      	b.n	80133be <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 80133a0:	4b0c      	ldr	r3, [pc, #48]	; (80133d4 <UTIL_LPM_SetOffMode+0x58>)
 80133a2:	681a      	ldr	r2, [r3, #0]
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	4313      	orrs	r3, r2
 80133a8:	4a0a      	ldr	r2, [pc, #40]	; (80133d4 <UTIL_LPM_SetOffMode+0x58>)
 80133aa:	6013      	str	r3, [r2, #0]
      break;
 80133ac:	e007      	b.n	80133be <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	43da      	mvns	r2, r3
 80133b2:	4b08      	ldr	r3, [pc, #32]	; (80133d4 <UTIL_LPM_SetOffMode+0x58>)
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	4013      	ands	r3, r2
 80133b8:	4a06      	ldr	r2, [pc, #24]	; (80133d4 <UTIL_LPM_SetOffMode+0x58>)
 80133ba:	6013      	str	r3, [r2, #0]
      break;
 80133bc:	bf00      	nop
 80133be:	697b      	ldr	r3, [r7, #20]
 80133c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80133c8:	bf00      	nop
 80133ca:	371c      	adds	r7, #28
 80133cc:	46bd      	mov	sp, r7
 80133ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d2:	4770      	bx	lr
 80133d4:	2002e060 	.word	0x2002e060

080133d8 <__errno>:
 80133d8:	4b01      	ldr	r3, [pc, #4]	; (80133e0 <__errno+0x8>)
 80133da:	6818      	ldr	r0, [r3, #0]
 80133dc:	4770      	bx	lr
 80133de:	bf00      	nop
 80133e0:	20000024 	.word	0x20000024

080133e4 <__libc_init_array>:
 80133e4:	b570      	push	{r4, r5, r6, lr}
 80133e6:	4e0d      	ldr	r6, [pc, #52]	; (801341c <__libc_init_array+0x38>)
 80133e8:	4c0d      	ldr	r4, [pc, #52]	; (8013420 <__libc_init_array+0x3c>)
 80133ea:	1ba4      	subs	r4, r4, r6
 80133ec:	10a4      	asrs	r4, r4, #2
 80133ee:	2500      	movs	r5, #0
 80133f0:	42a5      	cmp	r5, r4
 80133f2:	d109      	bne.n	8013408 <__libc_init_array+0x24>
 80133f4:	4e0b      	ldr	r6, [pc, #44]	; (8013424 <__libc_init_array+0x40>)
 80133f6:	4c0c      	ldr	r4, [pc, #48]	; (8013428 <__libc_init_array+0x44>)
 80133f8:	f003 fe40 	bl	801707c <_init>
 80133fc:	1ba4      	subs	r4, r4, r6
 80133fe:	10a4      	asrs	r4, r4, #2
 8013400:	2500      	movs	r5, #0
 8013402:	42a5      	cmp	r5, r4
 8013404:	d105      	bne.n	8013412 <__libc_init_array+0x2e>
 8013406:	bd70      	pop	{r4, r5, r6, pc}
 8013408:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801340c:	4798      	blx	r3
 801340e:	3501      	adds	r5, #1
 8013410:	e7ee      	b.n	80133f0 <__libc_init_array+0xc>
 8013412:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013416:	4798      	blx	r3
 8013418:	3501      	adds	r5, #1
 801341a:	e7f2      	b.n	8013402 <__libc_init_array+0x1e>
 801341c:	080194d8 	.word	0x080194d8
 8013420:	080194d8 	.word	0x080194d8
 8013424:	080194d8 	.word	0x080194d8
 8013428:	080194dc 	.word	0x080194dc

0801342c <memcpy>:
 801342c:	b510      	push	{r4, lr}
 801342e:	1e43      	subs	r3, r0, #1
 8013430:	440a      	add	r2, r1
 8013432:	4291      	cmp	r1, r2
 8013434:	d100      	bne.n	8013438 <memcpy+0xc>
 8013436:	bd10      	pop	{r4, pc}
 8013438:	f811 4b01 	ldrb.w	r4, [r1], #1
 801343c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013440:	e7f7      	b.n	8013432 <memcpy+0x6>

08013442 <memset>:
 8013442:	4402      	add	r2, r0
 8013444:	4603      	mov	r3, r0
 8013446:	4293      	cmp	r3, r2
 8013448:	d100      	bne.n	801344c <memset+0xa>
 801344a:	4770      	bx	lr
 801344c:	f803 1b01 	strb.w	r1, [r3], #1
 8013450:	e7f9      	b.n	8013446 <memset+0x4>

08013452 <__cvt>:
 8013452:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013456:	ec55 4b10 	vmov	r4, r5, d0
 801345a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801345c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013460:	2d00      	cmp	r5, #0
 8013462:	460e      	mov	r6, r1
 8013464:	4691      	mov	r9, r2
 8013466:	4619      	mov	r1, r3
 8013468:	bfb8      	it	lt
 801346a:	4622      	movlt	r2, r4
 801346c:	462b      	mov	r3, r5
 801346e:	f027 0720 	bic.w	r7, r7, #32
 8013472:	bfbb      	ittet	lt
 8013474:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013478:	461d      	movlt	r5, r3
 801347a:	2300      	movge	r3, #0
 801347c:	232d      	movlt	r3, #45	; 0x2d
 801347e:	bfb8      	it	lt
 8013480:	4614      	movlt	r4, r2
 8013482:	2f46      	cmp	r7, #70	; 0x46
 8013484:	700b      	strb	r3, [r1, #0]
 8013486:	d004      	beq.n	8013492 <__cvt+0x40>
 8013488:	2f45      	cmp	r7, #69	; 0x45
 801348a:	d100      	bne.n	801348e <__cvt+0x3c>
 801348c:	3601      	adds	r6, #1
 801348e:	2102      	movs	r1, #2
 8013490:	e000      	b.n	8013494 <__cvt+0x42>
 8013492:	2103      	movs	r1, #3
 8013494:	ab03      	add	r3, sp, #12
 8013496:	9301      	str	r3, [sp, #4]
 8013498:	ab02      	add	r3, sp, #8
 801349a:	9300      	str	r3, [sp, #0]
 801349c:	4632      	mov	r2, r6
 801349e:	4653      	mov	r3, sl
 80134a0:	ec45 4b10 	vmov	d0, r4, r5
 80134a4:	f000 fe54 	bl	8014150 <_dtoa_r>
 80134a8:	2f47      	cmp	r7, #71	; 0x47
 80134aa:	4680      	mov	r8, r0
 80134ac:	d102      	bne.n	80134b4 <__cvt+0x62>
 80134ae:	f019 0f01 	tst.w	r9, #1
 80134b2:	d026      	beq.n	8013502 <__cvt+0xb0>
 80134b4:	2f46      	cmp	r7, #70	; 0x46
 80134b6:	eb08 0906 	add.w	r9, r8, r6
 80134ba:	d111      	bne.n	80134e0 <__cvt+0x8e>
 80134bc:	f898 3000 	ldrb.w	r3, [r8]
 80134c0:	2b30      	cmp	r3, #48	; 0x30
 80134c2:	d10a      	bne.n	80134da <__cvt+0x88>
 80134c4:	2200      	movs	r2, #0
 80134c6:	2300      	movs	r3, #0
 80134c8:	4620      	mov	r0, r4
 80134ca:	4629      	mov	r1, r5
 80134cc:	f7ed fad4 	bl	8000a78 <__aeabi_dcmpeq>
 80134d0:	b918      	cbnz	r0, 80134da <__cvt+0x88>
 80134d2:	f1c6 0601 	rsb	r6, r6, #1
 80134d6:	f8ca 6000 	str.w	r6, [sl]
 80134da:	f8da 3000 	ldr.w	r3, [sl]
 80134de:	4499      	add	r9, r3
 80134e0:	2200      	movs	r2, #0
 80134e2:	2300      	movs	r3, #0
 80134e4:	4620      	mov	r0, r4
 80134e6:	4629      	mov	r1, r5
 80134e8:	f7ed fac6 	bl	8000a78 <__aeabi_dcmpeq>
 80134ec:	b938      	cbnz	r0, 80134fe <__cvt+0xac>
 80134ee:	2230      	movs	r2, #48	; 0x30
 80134f0:	9b03      	ldr	r3, [sp, #12]
 80134f2:	454b      	cmp	r3, r9
 80134f4:	d205      	bcs.n	8013502 <__cvt+0xb0>
 80134f6:	1c59      	adds	r1, r3, #1
 80134f8:	9103      	str	r1, [sp, #12]
 80134fa:	701a      	strb	r2, [r3, #0]
 80134fc:	e7f8      	b.n	80134f0 <__cvt+0x9e>
 80134fe:	f8cd 900c 	str.w	r9, [sp, #12]
 8013502:	9b03      	ldr	r3, [sp, #12]
 8013504:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013506:	eba3 0308 	sub.w	r3, r3, r8
 801350a:	4640      	mov	r0, r8
 801350c:	6013      	str	r3, [r2, #0]
 801350e:	b004      	add	sp, #16
 8013510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013514 <__exponent>:
 8013514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013516:	2900      	cmp	r1, #0
 8013518:	4604      	mov	r4, r0
 801351a:	bfba      	itte	lt
 801351c:	4249      	neglt	r1, r1
 801351e:	232d      	movlt	r3, #45	; 0x2d
 8013520:	232b      	movge	r3, #43	; 0x2b
 8013522:	2909      	cmp	r1, #9
 8013524:	f804 2b02 	strb.w	r2, [r4], #2
 8013528:	7043      	strb	r3, [r0, #1]
 801352a:	dd20      	ble.n	801356e <__exponent+0x5a>
 801352c:	f10d 0307 	add.w	r3, sp, #7
 8013530:	461f      	mov	r7, r3
 8013532:	260a      	movs	r6, #10
 8013534:	fb91 f5f6 	sdiv	r5, r1, r6
 8013538:	fb06 1115 	mls	r1, r6, r5, r1
 801353c:	3130      	adds	r1, #48	; 0x30
 801353e:	2d09      	cmp	r5, #9
 8013540:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013544:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8013548:	4629      	mov	r1, r5
 801354a:	dc09      	bgt.n	8013560 <__exponent+0x4c>
 801354c:	3130      	adds	r1, #48	; 0x30
 801354e:	3b02      	subs	r3, #2
 8013550:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013554:	42bb      	cmp	r3, r7
 8013556:	4622      	mov	r2, r4
 8013558:	d304      	bcc.n	8013564 <__exponent+0x50>
 801355a:	1a10      	subs	r0, r2, r0
 801355c:	b003      	add	sp, #12
 801355e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013560:	4613      	mov	r3, r2
 8013562:	e7e7      	b.n	8013534 <__exponent+0x20>
 8013564:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013568:	f804 2b01 	strb.w	r2, [r4], #1
 801356c:	e7f2      	b.n	8013554 <__exponent+0x40>
 801356e:	2330      	movs	r3, #48	; 0x30
 8013570:	4419      	add	r1, r3
 8013572:	7083      	strb	r3, [r0, #2]
 8013574:	1d02      	adds	r2, r0, #4
 8013576:	70c1      	strb	r1, [r0, #3]
 8013578:	e7ef      	b.n	801355a <__exponent+0x46>
	...

0801357c <_printf_float>:
 801357c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013580:	b08d      	sub	sp, #52	; 0x34
 8013582:	460c      	mov	r4, r1
 8013584:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8013588:	4616      	mov	r6, r2
 801358a:	461f      	mov	r7, r3
 801358c:	4605      	mov	r5, r0
 801358e:	f001 fd11 	bl	8014fb4 <_localeconv_r>
 8013592:	6803      	ldr	r3, [r0, #0]
 8013594:	9304      	str	r3, [sp, #16]
 8013596:	4618      	mov	r0, r3
 8013598:	f7ec fdf2 	bl	8000180 <strlen>
 801359c:	2300      	movs	r3, #0
 801359e:	930a      	str	r3, [sp, #40]	; 0x28
 80135a0:	f8d8 3000 	ldr.w	r3, [r8]
 80135a4:	9005      	str	r0, [sp, #20]
 80135a6:	3307      	adds	r3, #7
 80135a8:	f023 0307 	bic.w	r3, r3, #7
 80135ac:	f103 0208 	add.w	r2, r3, #8
 80135b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80135b4:	f8d4 b000 	ldr.w	fp, [r4]
 80135b8:	f8c8 2000 	str.w	r2, [r8]
 80135bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135c0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80135c4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80135c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80135cc:	9307      	str	r3, [sp, #28]
 80135ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80135d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80135d6:	4ba7      	ldr	r3, [pc, #668]	; (8013874 <_printf_float+0x2f8>)
 80135d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80135dc:	f7ed fa7e 	bl	8000adc <__aeabi_dcmpun>
 80135e0:	bb70      	cbnz	r0, 8013640 <_printf_float+0xc4>
 80135e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80135e6:	4ba3      	ldr	r3, [pc, #652]	; (8013874 <_printf_float+0x2f8>)
 80135e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80135ec:	f7ed fa58 	bl	8000aa0 <__aeabi_dcmple>
 80135f0:	bb30      	cbnz	r0, 8013640 <_printf_float+0xc4>
 80135f2:	2200      	movs	r2, #0
 80135f4:	2300      	movs	r3, #0
 80135f6:	4640      	mov	r0, r8
 80135f8:	4649      	mov	r1, r9
 80135fa:	f7ed fa47 	bl	8000a8c <__aeabi_dcmplt>
 80135fe:	b110      	cbz	r0, 8013606 <_printf_float+0x8a>
 8013600:	232d      	movs	r3, #45	; 0x2d
 8013602:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013606:	4a9c      	ldr	r2, [pc, #624]	; (8013878 <_printf_float+0x2fc>)
 8013608:	4b9c      	ldr	r3, [pc, #624]	; (801387c <_printf_float+0x300>)
 801360a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801360e:	bf8c      	ite	hi
 8013610:	4690      	movhi	r8, r2
 8013612:	4698      	movls	r8, r3
 8013614:	2303      	movs	r3, #3
 8013616:	f02b 0204 	bic.w	r2, fp, #4
 801361a:	6123      	str	r3, [r4, #16]
 801361c:	6022      	str	r2, [r4, #0]
 801361e:	f04f 0900 	mov.w	r9, #0
 8013622:	9700      	str	r7, [sp, #0]
 8013624:	4633      	mov	r3, r6
 8013626:	aa0b      	add	r2, sp, #44	; 0x2c
 8013628:	4621      	mov	r1, r4
 801362a:	4628      	mov	r0, r5
 801362c:	f000 f9e6 	bl	80139fc <_printf_common>
 8013630:	3001      	adds	r0, #1
 8013632:	f040 808d 	bne.w	8013750 <_printf_float+0x1d4>
 8013636:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801363a:	b00d      	add	sp, #52	; 0x34
 801363c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013640:	4642      	mov	r2, r8
 8013642:	464b      	mov	r3, r9
 8013644:	4640      	mov	r0, r8
 8013646:	4649      	mov	r1, r9
 8013648:	f7ed fa48 	bl	8000adc <__aeabi_dcmpun>
 801364c:	b110      	cbz	r0, 8013654 <_printf_float+0xd8>
 801364e:	4a8c      	ldr	r2, [pc, #560]	; (8013880 <_printf_float+0x304>)
 8013650:	4b8c      	ldr	r3, [pc, #560]	; (8013884 <_printf_float+0x308>)
 8013652:	e7da      	b.n	801360a <_printf_float+0x8e>
 8013654:	6861      	ldr	r1, [r4, #4]
 8013656:	1c4b      	adds	r3, r1, #1
 8013658:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801365c:	a80a      	add	r0, sp, #40	; 0x28
 801365e:	d13e      	bne.n	80136de <_printf_float+0x162>
 8013660:	2306      	movs	r3, #6
 8013662:	6063      	str	r3, [r4, #4]
 8013664:	2300      	movs	r3, #0
 8013666:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801366a:	ab09      	add	r3, sp, #36	; 0x24
 801366c:	9300      	str	r3, [sp, #0]
 801366e:	ec49 8b10 	vmov	d0, r8, r9
 8013672:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013676:	6022      	str	r2, [r4, #0]
 8013678:	f8cd a004 	str.w	sl, [sp, #4]
 801367c:	6861      	ldr	r1, [r4, #4]
 801367e:	4628      	mov	r0, r5
 8013680:	f7ff fee7 	bl	8013452 <__cvt>
 8013684:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8013688:	2b47      	cmp	r3, #71	; 0x47
 801368a:	4680      	mov	r8, r0
 801368c:	d109      	bne.n	80136a2 <_printf_float+0x126>
 801368e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013690:	1cd8      	adds	r0, r3, #3
 8013692:	db02      	blt.n	801369a <_printf_float+0x11e>
 8013694:	6862      	ldr	r2, [r4, #4]
 8013696:	4293      	cmp	r3, r2
 8013698:	dd47      	ble.n	801372a <_printf_float+0x1ae>
 801369a:	f1aa 0a02 	sub.w	sl, sl, #2
 801369e:	fa5f fa8a 	uxtb.w	sl, sl
 80136a2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80136a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80136a8:	d824      	bhi.n	80136f4 <_printf_float+0x178>
 80136aa:	3901      	subs	r1, #1
 80136ac:	4652      	mov	r2, sl
 80136ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80136b2:	9109      	str	r1, [sp, #36]	; 0x24
 80136b4:	f7ff ff2e 	bl	8013514 <__exponent>
 80136b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80136ba:	1813      	adds	r3, r2, r0
 80136bc:	2a01      	cmp	r2, #1
 80136be:	4681      	mov	r9, r0
 80136c0:	6123      	str	r3, [r4, #16]
 80136c2:	dc02      	bgt.n	80136ca <_printf_float+0x14e>
 80136c4:	6822      	ldr	r2, [r4, #0]
 80136c6:	07d1      	lsls	r1, r2, #31
 80136c8:	d501      	bpl.n	80136ce <_printf_float+0x152>
 80136ca:	3301      	adds	r3, #1
 80136cc:	6123      	str	r3, [r4, #16]
 80136ce:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d0a5      	beq.n	8013622 <_printf_float+0xa6>
 80136d6:	232d      	movs	r3, #45	; 0x2d
 80136d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80136dc:	e7a1      	b.n	8013622 <_printf_float+0xa6>
 80136de:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80136e2:	f000 8177 	beq.w	80139d4 <_printf_float+0x458>
 80136e6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80136ea:	d1bb      	bne.n	8013664 <_printf_float+0xe8>
 80136ec:	2900      	cmp	r1, #0
 80136ee:	d1b9      	bne.n	8013664 <_printf_float+0xe8>
 80136f0:	2301      	movs	r3, #1
 80136f2:	e7b6      	b.n	8013662 <_printf_float+0xe6>
 80136f4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80136f8:	d119      	bne.n	801372e <_printf_float+0x1b2>
 80136fa:	2900      	cmp	r1, #0
 80136fc:	6863      	ldr	r3, [r4, #4]
 80136fe:	dd0c      	ble.n	801371a <_printf_float+0x19e>
 8013700:	6121      	str	r1, [r4, #16]
 8013702:	b913      	cbnz	r3, 801370a <_printf_float+0x18e>
 8013704:	6822      	ldr	r2, [r4, #0]
 8013706:	07d2      	lsls	r2, r2, #31
 8013708:	d502      	bpl.n	8013710 <_printf_float+0x194>
 801370a:	3301      	adds	r3, #1
 801370c:	440b      	add	r3, r1
 801370e:	6123      	str	r3, [r4, #16]
 8013710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013712:	65a3      	str	r3, [r4, #88]	; 0x58
 8013714:	f04f 0900 	mov.w	r9, #0
 8013718:	e7d9      	b.n	80136ce <_printf_float+0x152>
 801371a:	b913      	cbnz	r3, 8013722 <_printf_float+0x1a6>
 801371c:	6822      	ldr	r2, [r4, #0]
 801371e:	07d0      	lsls	r0, r2, #31
 8013720:	d501      	bpl.n	8013726 <_printf_float+0x1aa>
 8013722:	3302      	adds	r3, #2
 8013724:	e7f3      	b.n	801370e <_printf_float+0x192>
 8013726:	2301      	movs	r3, #1
 8013728:	e7f1      	b.n	801370e <_printf_float+0x192>
 801372a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801372e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013732:	4293      	cmp	r3, r2
 8013734:	db05      	blt.n	8013742 <_printf_float+0x1c6>
 8013736:	6822      	ldr	r2, [r4, #0]
 8013738:	6123      	str	r3, [r4, #16]
 801373a:	07d1      	lsls	r1, r2, #31
 801373c:	d5e8      	bpl.n	8013710 <_printf_float+0x194>
 801373e:	3301      	adds	r3, #1
 8013740:	e7e5      	b.n	801370e <_printf_float+0x192>
 8013742:	2b00      	cmp	r3, #0
 8013744:	bfd4      	ite	le
 8013746:	f1c3 0302 	rsble	r3, r3, #2
 801374a:	2301      	movgt	r3, #1
 801374c:	4413      	add	r3, r2
 801374e:	e7de      	b.n	801370e <_printf_float+0x192>
 8013750:	6823      	ldr	r3, [r4, #0]
 8013752:	055a      	lsls	r2, r3, #21
 8013754:	d407      	bmi.n	8013766 <_printf_float+0x1ea>
 8013756:	6923      	ldr	r3, [r4, #16]
 8013758:	4642      	mov	r2, r8
 801375a:	4631      	mov	r1, r6
 801375c:	4628      	mov	r0, r5
 801375e:	47b8      	blx	r7
 8013760:	3001      	adds	r0, #1
 8013762:	d12b      	bne.n	80137bc <_printf_float+0x240>
 8013764:	e767      	b.n	8013636 <_printf_float+0xba>
 8013766:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801376a:	f240 80dc 	bls.w	8013926 <_printf_float+0x3aa>
 801376e:	2200      	movs	r2, #0
 8013770:	2300      	movs	r3, #0
 8013772:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013776:	f7ed f97f 	bl	8000a78 <__aeabi_dcmpeq>
 801377a:	2800      	cmp	r0, #0
 801377c:	d033      	beq.n	80137e6 <_printf_float+0x26a>
 801377e:	2301      	movs	r3, #1
 8013780:	4a41      	ldr	r2, [pc, #260]	; (8013888 <_printf_float+0x30c>)
 8013782:	4631      	mov	r1, r6
 8013784:	4628      	mov	r0, r5
 8013786:	47b8      	blx	r7
 8013788:	3001      	adds	r0, #1
 801378a:	f43f af54 	beq.w	8013636 <_printf_float+0xba>
 801378e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013792:	429a      	cmp	r2, r3
 8013794:	db02      	blt.n	801379c <_printf_float+0x220>
 8013796:	6823      	ldr	r3, [r4, #0]
 8013798:	07d8      	lsls	r0, r3, #31
 801379a:	d50f      	bpl.n	80137bc <_printf_float+0x240>
 801379c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80137a0:	4631      	mov	r1, r6
 80137a2:	4628      	mov	r0, r5
 80137a4:	47b8      	blx	r7
 80137a6:	3001      	adds	r0, #1
 80137a8:	f43f af45 	beq.w	8013636 <_printf_float+0xba>
 80137ac:	f04f 0800 	mov.w	r8, #0
 80137b0:	f104 091a 	add.w	r9, r4, #26
 80137b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137b6:	3b01      	subs	r3, #1
 80137b8:	4543      	cmp	r3, r8
 80137ba:	dc09      	bgt.n	80137d0 <_printf_float+0x254>
 80137bc:	6823      	ldr	r3, [r4, #0]
 80137be:	079b      	lsls	r3, r3, #30
 80137c0:	f100 8103 	bmi.w	80139ca <_printf_float+0x44e>
 80137c4:	68e0      	ldr	r0, [r4, #12]
 80137c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80137c8:	4298      	cmp	r0, r3
 80137ca:	bfb8      	it	lt
 80137cc:	4618      	movlt	r0, r3
 80137ce:	e734      	b.n	801363a <_printf_float+0xbe>
 80137d0:	2301      	movs	r3, #1
 80137d2:	464a      	mov	r2, r9
 80137d4:	4631      	mov	r1, r6
 80137d6:	4628      	mov	r0, r5
 80137d8:	47b8      	blx	r7
 80137da:	3001      	adds	r0, #1
 80137dc:	f43f af2b 	beq.w	8013636 <_printf_float+0xba>
 80137e0:	f108 0801 	add.w	r8, r8, #1
 80137e4:	e7e6      	b.n	80137b4 <_printf_float+0x238>
 80137e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	dc2b      	bgt.n	8013844 <_printf_float+0x2c8>
 80137ec:	2301      	movs	r3, #1
 80137ee:	4a26      	ldr	r2, [pc, #152]	; (8013888 <_printf_float+0x30c>)
 80137f0:	4631      	mov	r1, r6
 80137f2:	4628      	mov	r0, r5
 80137f4:	47b8      	blx	r7
 80137f6:	3001      	adds	r0, #1
 80137f8:	f43f af1d 	beq.w	8013636 <_printf_float+0xba>
 80137fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137fe:	b923      	cbnz	r3, 801380a <_printf_float+0x28e>
 8013800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013802:	b913      	cbnz	r3, 801380a <_printf_float+0x28e>
 8013804:	6823      	ldr	r3, [r4, #0]
 8013806:	07d9      	lsls	r1, r3, #31
 8013808:	d5d8      	bpl.n	80137bc <_printf_float+0x240>
 801380a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801380e:	4631      	mov	r1, r6
 8013810:	4628      	mov	r0, r5
 8013812:	47b8      	blx	r7
 8013814:	3001      	adds	r0, #1
 8013816:	f43f af0e 	beq.w	8013636 <_printf_float+0xba>
 801381a:	f04f 0900 	mov.w	r9, #0
 801381e:	f104 0a1a 	add.w	sl, r4, #26
 8013822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013824:	425b      	negs	r3, r3
 8013826:	454b      	cmp	r3, r9
 8013828:	dc01      	bgt.n	801382e <_printf_float+0x2b2>
 801382a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801382c:	e794      	b.n	8013758 <_printf_float+0x1dc>
 801382e:	2301      	movs	r3, #1
 8013830:	4652      	mov	r2, sl
 8013832:	4631      	mov	r1, r6
 8013834:	4628      	mov	r0, r5
 8013836:	47b8      	blx	r7
 8013838:	3001      	adds	r0, #1
 801383a:	f43f aefc 	beq.w	8013636 <_printf_float+0xba>
 801383e:	f109 0901 	add.w	r9, r9, #1
 8013842:	e7ee      	b.n	8013822 <_printf_float+0x2a6>
 8013844:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013846:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013848:	429a      	cmp	r2, r3
 801384a:	bfa8      	it	ge
 801384c:	461a      	movge	r2, r3
 801384e:	2a00      	cmp	r2, #0
 8013850:	4691      	mov	r9, r2
 8013852:	dd07      	ble.n	8013864 <_printf_float+0x2e8>
 8013854:	4613      	mov	r3, r2
 8013856:	4631      	mov	r1, r6
 8013858:	4642      	mov	r2, r8
 801385a:	4628      	mov	r0, r5
 801385c:	47b8      	blx	r7
 801385e:	3001      	adds	r0, #1
 8013860:	f43f aee9 	beq.w	8013636 <_printf_float+0xba>
 8013864:	f104 031a 	add.w	r3, r4, #26
 8013868:	f04f 0b00 	mov.w	fp, #0
 801386c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013870:	9306      	str	r3, [sp, #24]
 8013872:	e015      	b.n	80138a0 <_printf_float+0x324>
 8013874:	7fefffff 	.word	0x7fefffff
 8013878:	080191d8 	.word	0x080191d8
 801387c:	080191d4 	.word	0x080191d4
 8013880:	080191e0 	.word	0x080191e0
 8013884:	080191dc 	.word	0x080191dc
 8013888:	080191e4 	.word	0x080191e4
 801388c:	2301      	movs	r3, #1
 801388e:	9a06      	ldr	r2, [sp, #24]
 8013890:	4631      	mov	r1, r6
 8013892:	4628      	mov	r0, r5
 8013894:	47b8      	blx	r7
 8013896:	3001      	adds	r0, #1
 8013898:	f43f aecd 	beq.w	8013636 <_printf_float+0xba>
 801389c:	f10b 0b01 	add.w	fp, fp, #1
 80138a0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80138a4:	ebaa 0309 	sub.w	r3, sl, r9
 80138a8:	455b      	cmp	r3, fp
 80138aa:	dcef      	bgt.n	801388c <_printf_float+0x310>
 80138ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80138b0:	429a      	cmp	r2, r3
 80138b2:	44d0      	add	r8, sl
 80138b4:	db15      	blt.n	80138e2 <_printf_float+0x366>
 80138b6:	6823      	ldr	r3, [r4, #0]
 80138b8:	07da      	lsls	r2, r3, #31
 80138ba:	d412      	bmi.n	80138e2 <_printf_float+0x366>
 80138bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80138c0:	eba3 020a 	sub.w	r2, r3, sl
 80138c4:	eba3 0a01 	sub.w	sl, r3, r1
 80138c8:	4592      	cmp	sl, r2
 80138ca:	bfa8      	it	ge
 80138cc:	4692      	movge	sl, r2
 80138ce:	f1ba 0f00 	cmp.w	sl, #0
 80138d2:	dc0e      	bgt.n	80138f2 <_printf_float+0x376>
 80138d4:	f04f 0800 	mov.w	r8, #0
 80138d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80138dc:	f104 091a 	add.w	r9, r4, #26
 80138e0:	e019      	b.n	8013916 <_printf_float+0x39a>
 80138e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80138e6:	4631      	mov	r1, r6
 80138e8:	4628      	mov	r0, r5
 80138ea:	47b8      	blx	r7
 80138ec:	3001      	adds	r0, #1
 80138ee:	d1e5      	bne.n	80138bc <_printf_float+0x340>
 80138f0:	e6a1      	b.n	8013636 <_printf_float+0xba>
 80138f2:	4653      	mov	r3, sl
 80138f4:	4642      	mov	r2, r8
 80138f6:	4631      	mov	r1, r6
 80138f8:	4628      	mov	r0, r5
 80138fa:	47b8      	blx	r7
 80138fc:	3001      	adds	r0, #1
 80138fe:	d1e9      	bne.n	80138d4 <_printf_float+0x358>
 8013900:	e699      	b.n	8013636 <_printf_float+0xba>
 8013902:	2301      	movs	r3, #1
 8013904:	464a      	mov	r2, r9
 8013906:	4631      	mov	r1, r6
 8013908:	4628      	mov	r0, r5
 801390a:	47b8      	blx	r7
 801390c:	3001      	adds	r0, #1
 801390e:	f43f ae92 	beq.w	8013636 <_printf_float+0xba>
 8013912:	f108 0801 	add.w	r8, r8, #1
 8013916:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801391a:	1a9b      	subs	r3, r3, r2
 801391c:	eba3 030a 	sub.w	r3, r3, sl
 8013920:	4543      	cmp	r3, r8
 8013922:	dcee      	bgt.n	8013902 <_printf_float+0x386>
 8013924:	e74a      	b.n	80137bc <_printf_float+0x240>
 8013926:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013928:	2a01      	cmp	r2, #1
 801392a:	dc01      	bgt.n	8013930 <_printf_float+0x3b4>
 801392c:	07db      	lsls	r3, r3, #31
 801392e:	d53a      	bpl.n	80139a6 <_printf_float+0x42a>
 8013930:	2301      	movs	r3, #1
 8013932:	4642      	mov	r2, r8
 8013934:	4631      	mov	r1, r6
 8013936:	4628      	mov	r0, r5
 8013938:	47b8      	blx	r7
 801393a:	3001      	adds	r0, #1
 801393c:	f43f ae7b 	beq.w	8013636 <_printf_float+0xba>
 8013940:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013944:	4631      	mov	r1, r6
 8013946:	4628      	mov	r0, r5
 8013948:	47b8      	blx	r7
 801394a:	3001      	adds	r0, #1
 801394c:	f108 0801 	add.w	r8, r8, #1
 8013950:	f43f ae71 	beq.w	8013636 <_printf_float+0xba>
 8013954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013956:	2200      	movs	r2, #0
 8013958:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 801395c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013960:	2300      	movs	r3, #0
 8013962:	f7ed f889 	bl	8000a78 <__aeabi_dcmpeq>
 8013966:	b9c8      	cbnz	r0, 801399c <_printf_float+0x420>
 8013968:	4653      	mov	r3, sl
 801396a:	4642      	mov	r2, r8
 801396c:	4631      	mov	r1, r6
 801396e:	4628      	mov	r0, r5
 8013970:	47b8      	blx	r7
 8013972:	3001      	adds	r0, #1
 8013974:	d10e      	bne.n	8013994 <_printf_float+0x418>
 8013976:	e65e      	b.n	8013636 <_printf_float+0xba>
 8013978:	2301      	movs	r3, #1
 801397a:	4652      	mov	r2, sl
 801397c:	4631      	mov	r1, r6
 801397e:	4628      	mov	r0, r5
 8013980:	47b8      	blx	r7
 8013982:	3001      	adds	r0, #1
 8013984:	f43f ae57 	beq.w	8013636 <_printf_float+0xba>
 8013988:	f108 0801 	add.w	r8, r8, #1
 801398c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801398e:	3b01      	subs	r3, #1
 8013990:	4543      	cmp	r3, r8
 8013992:	dcf1      	bgt.n	8013978 <_printf_float+0x3fc>
 8013994:	464b      	mov	r3, r9
 8013996:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801399a:	e6de      	b.n	801375a <_printf_float+0x1de>
 801399c:	f04f 0800 	mov.w	r8, #0
 80139a0:	f104 0a1a 	add.w	sl, r4, #26
 80139a4:	e7f2      	b.n	801398c <_printf_float+0x410>
 80139a6:	2301      	movs	r3, #1
 80139a8:	e7df      	b.n	801396a <_printf_float+0x3ee>
 80139aa:	2301      	movs	r3, #1
 80139ac:	464a      	mov	r2, r9
 80139ae:	4631      	mov	r1, r6
 80139b0:	4628      	mov	r0, r5
 80139b2:	47b8      	blx	r7
 80139b4:	3001      	adds	r0, #1
 80139b6:	f43f ae3e 	beq.w	8013636 <_printf_float+0xba>
 80139ba:	f108 0801 	add.w	r8, r8, #1
 80139be:	68e3      	ldr	r3, [r4, #12]
 80139c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80139c2:	1a9b      	subs	r3, r3, r2
 80139c4:	4543      	cmp	r3, r8
 80139c6:	dcf0      	bgt.n	80139aa <_printf_float+0x42e>
 80139c8:	e6fc      	b.n	80137c4 <_printf_float+0x248>
 80139ca:	f04f 0800 	mov.w	r8, #0
 80139ce:	f104 0919 	add.w	r9, r4, #25
 80139d2:	e7f4      	b.n	80139be <_printf_float+0x442>
 80139d4:	2900      	cmp	r1, #0
 80139d6:	f43f ae8b 	beq.w	80136f0 <_printf_float+0x174>
 80139da:	2300      	movs	r3, #0
 80139dc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80139e0:	ab09      	add	r3, sp, #36	; 0x24
 80139e2:	9300      	str	r3, [sp, #0]
 80139e4:	ec49 8b10 	vmov	d0, r8, r9
 80139e8:	6022      	str	r2, [r4, #0]
 80139ea:	f8cd a004 	str.w	sl, [sp, #4]
 80139ee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80139f2:	4628      	mov	r0, r5
 80139f4:	f7ff fd2d 	bl	8013452 <__cvt>
 80139f8:	4680      	mov	r8, r0
 80139fa:	e648      	b.n	801368e <_printf_float+0x112>

080139fc <_printf_common>:
 80139fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a00:	4691      	mov	r9, r2
 8013a02:	461f      	mov	r7, r3
 8013a04:	688a      	ldr	r2, [r1, #8]
 8013a06:	690b      	ldr	r3, [r1, #16]
 8013a08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013a0c:	4293      	cmp	r3, r2
 8013a0e:	bfb8      	it	lt
 8013a10:	4613      	movlt	r3, r2
 8013a12:	f8c9 3000 	str.w	r3, [r9]
 8013a16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013a1a:	4606      	mov	r6, r0
 8013a1c:	460c      	mov	r4, r1
 8013a1e:	b112      	cbz	r2, 8013a26 <_printf_common+0x2a>
 8013a20:	3301      	adds	r3, #1
 8013a22:	f8c9 3000 	str.w	r3, [r9]
 8013a26:	6823      	ldr	r3, [r4, #0]
 8013a28:	0699      	lsls	r1, r3, #26
 8013a2a:	bf42      	ittt	mi
 8013a2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013a30:	3302      	addmi	r3, #2
 8013a32:	f8c9 3000 	strmi.w	r3, [r9]
 8013a36:	6825      	ldr	r5, [r4, #0]
 8013a38:	f015 0506 	ands.w	r5, r5, #6
 8013a3c:	d107      	bne.n	8013a4e <_printf_common+0x52>
 8013a3e:	f104 0a19 	add.w	sl, r4, #25
 8013a42:	68e3      	ldr	r3, [r4, #12]
 8013a44:	f8d9 2000 	ldr.w	r2, [r9]
 8013a48:	1a9b      	subs	r3, r3, r2
 8013a4a:	42ab      	cmp	r3, r5
 8013a4c:	dc28      	bgt.n	8013aa0 <_printf_common+0xa4>
 8013a4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013a52:	6822      	ldr	r2, [r4, #0]
 8013a54:	3300      	adds	r3, #0
 8013a56:	bf18      	it	ne
 8013a58:	2301      	movne	r3, #1
 8013a5a:	0692      	lsls	r2, r2, #26
 8013a5c:	d42d      	bmi.n	8013aba <_printf_common+0xbe>
 8013a5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013a62:	4639      	mov	r1, r7
 8013a64:	4630      	mov	r0, r6
 8013a66:	47c0      	blx	r8
 8013a68:	3001      	adds	r0, #1
 8013a6a:	d020      	beq.n	8013aae <_printf_common+0xb2>
 8013a6c:	6823      	ldr	r3, [r4, #0]
 8013a6e:	68e5      	ldr	r5, [r4, #12]
 8013a70:	f8d9 2000 	ldr.w	r2, [r9]
 8013a74:	f003 0306 	and.w	r3, r3, #6
 8013a78:	2b04      	cmp	r3, #4
 8013a7a:	bf08      	it	eq
 8013a7c:	1aad      	subeq	r5, r5, r2
 8013a7e:	68a3      	ldr	r3, [r4, #8]
 8013a80:	6922      	ldr	r2, [r4, #16]
 8013a82:	bf0c      	ite	eq
 8013a84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013a88:	2500      	movne	r5, #0
 8013a8a:	4293      	cmp	r3, r2
 8013a8c:	bfc4      	itt	gt
 8013a8e:	1a9b      	subgt	r3, r3, r2
 8013a90:	18ed      	addgt	r5, r5, r3
 8013a92:	f04f 0900 	mov.w	r9, #0
 8013a96:	341a      	adds	r4, #26
 8013a98:	454d      	cmp	r5, r9
 8013a9a:	d11a      	bne.n	8013ad2 <_printf_common+0xd6>
 8013a9c:	2000      	movs	r0, #0
 8013a9e:	e008      	b.n	8013ab2 <_printf_common+0xb6>
 8013aa0:	2301      	movs	r3, #1
 8013aa2:	4652      	mov	r2, sl
 8013aa4:	4639      	mov	r1, r7
 8013aa6:	4630      	mov	r0, r6
 8013aa8:	47c0      	blx	r8
 8013aaa:	3001      	adds	r0, #1
 8013aac:	d103      	bne.n	8013ab6 <_printf_common+0xba>
 8013aae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ab6:	3501      	adds	r5, #1
 8013ab8:	e7c3      	b.n	8013a42 <_printf_common+0x46>
 8013aba:	18e1      	adds	r1, r4, r3
 8013abc:	1c5a      	adds	r2, r3, #1
 8013abe:	2030      	movs	r0, #48	; 0x30
 8013ac0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013ac4:	4422      	add	r2, r4
 8013ac6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013aca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013ace:	3302      	adds	r3, #2
 8013ad0:	e7c5      	b.n	8013a5e <_printf_common+0x62>
 8013ad2:	2301      	movs	r3, #1
 8013ad4:	4622      	mov	r2, r4
 8013ad6:	4639      	mov	r1, r7
 8013ad8:	4630      	mov	r0, r6
 8013ada:	47c0      	blx	r8
 8013adc:	3001      	adds	r0, #1
 8013ade:	d0e6      	beq.n	8013aae <_printf_common+0xb2>
 8013ae0:	f109 0901 	add.w	r9, r9, #1
 8013ae4:	e7d8      	b.n	8013a98 <_printf_common+0x9c>
	...

08013ae8 <_printf_i>:
 8013ae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013aec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013af0:	460c      	mov	r4, r1
 8013af2:	7e09      	ldrb	r1, [r1, #24]
 8013af4:	b085      	sub	sp, #20
 8013af6:	296e      	cmp	r1, #110	; 0x6e
 8013af8:	4617      	mov	r7, r2
 8013afa:	4606      	mov	r6, r0
 8013afc:	4698      	mov	r8, r3
 8013afe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013b00:	f000 80b3 	beq.w	8013c6a <_printf_i+0x182>
 8013b04:	d822      	bhi.n	8013b4c <_printf_i+0x64>
 8013b06:	2963      	cmp	r1, #99	; 0x63
 8013b08:	d036      	beq.n	8013b78 <_printf_i+0x90>
 8013b0a:	d80a      	bhi.n	8013b22 <_printf_i+0x3a>
 8013b0c:	2900      	cmp	r1, #0
 8013b0e:	f000 80b9 	beq.w	8013c84 <_printf_i+0x19c>
 8013b12:	2958      	cmp	r1, #88	; 0x58
 8013b14:	f000 8083 	beq.w	8013c1e <_printf_i+0x136>
 8013b18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013b1c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013b20:	e032      	b.n	8013b88 <_printf_i+0xa0>
 8013b22:	2964      	cmp	r1, #100	; 0x64
 8013b24:	d001      	beq.n	8013b2a <_printf_i+0x42>
 8013b26:	2969      	cmp	r1, #105	; 0x69
 8013b28:	d1f6      	bne.n	8013b18 <_printf_i+0x30>
 8013b2a:	6820      	ldr	r0, [r4, #0]
 8013b2c:	6813      	ldr	r3, [r2, #0]
 8013b2e:	0605      	lsls	r5, r0, #24
 8013b30:	f103 0104 	add.w	r1, r3, #4
 8013b34:	d52a      	bpl.n	8013b8c <_printf_i+0xa4>
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	6011      	str	r1, [r2, #0]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	da03      	bge.n	8013b46 <_printf_i+0x5e>
 8013b3e:	222d      	movs	r2, #45	; 0x2d
 8013b40:	425b      	negs	r3, r3
 8013b42:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013b46:	486f      	ldr	r0, [pc, #444]	; (8013d04 <_printf_i+0x21c>)
 8013b48:	220a      	movs	r2, #10
 8013b4a:	e039      	b.n	8013bc0 <_printf_i+0xd8>
 8013b4c:	2973      	cmp	r1, #115	; 0x73
 8013b4e:	f000 809d 	beq.w	8013c8c <_printf_i+0x1a4>
 8013b52:	d808      	bhi.n	8013b66 <_printf_i+0x7e>
 8013b54:	296f      	cmp	r1, #111	; 0x6f
 8013b56:	d020      	beq.n	8013b9a <_printf_i+0xb2>
 8013b58:	2970      	cmp	r1, #112	; 0x70
 8013b5a:	d1dd      	bne.n	8013b18 <_printf_i+0x30>
 8013b5c:	6823      	ldr	r3, [r4, #0]
 8013b5e:	f043 0320 	orr.w	r3, r3, #32
 8013b62:	6023      	str	r3, [r4, #0]
 8013b64:	e003      	b.n	8013b6e <_printf_i+0x86>
 8013b66:	2975      	cmp	r1, #117	; 0x75
 8013b68:	d017      	beq.n	8013b9a <_printf_i+0xb2>
 8013b6a:	2978      	cmp	r1, #120	; 0x78
 8013b6c:	d1d4      	bne.n	8013b18 <_printf_i+0x30>
 8013b6e:	2378      	movs	r3, #120	; 0x78
 8013b70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013b74:	4864      	ldr	r0, [pc, #400]	; (8013d08 <_printf_i+0x220>)
 8013b76:	e055      	b.n	8013c24 <_printf_i+0x13c>
 8013b78:	6813      	ldr	r3, [r2, #0]
 8013b7a:	1d19      	adds	r1, r3, #4
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	6011      	str	r1, [r2, #0]
 8013b80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013b84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013b88:	2301      	movs	r3, #1
 8013b8a:	e08c      	b.n	8013ca6 <_printf_i+0x1be>
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	6011      	str	r1, [r2, #0]
 8013b90:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013b94:	bf18      	it	ne
 8013b96:	b21b      	sxthne	r3, r3
 8013b98:	e7cf      	b.n	8013b3a <_printf_i+0x52>
 8013b9a:	6813      	ldr	r3, [r2, #0]
 8013b9c:	6825      	ldr	r5, [r4, #0]
 8013b9e:	1d18      	adds	r0, r3, #4
 8013ba0:	6010      	str	r0, [r2, #0]
 8013ba2:	0628      	lsls	r0, r5, #24
 8013ba4:	d501      	bpl.n	8013baa <_printf_i+0xc2>
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	e002      	b.n	8013bb0 <_printf_i+0xc8>
 8013baa:	0668      	lsls	r0, r5, #25
 8013bac:	d5fb      	bpl.n	8013ba6 <_printf_i+0xbe>
 8013bae:	881b      	ldrh	r3, [r3, #0]
 8013bb0:	4854      	ldr	r0, [pc, #336]	; (8013d04 <_printf_i+0x21c>)
 8013bb2:	296f      	cmp	r1, #111	; 0x6f
 8013bb4:	bf14      	ite	ne
 8013bb6:	220a      	movne	r2, #10
 8013bb8:	2208      	moveq	r2, #8
 8013bba:	2100      	movs	r1, #0
 8013bbc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013bc0:	6865      	ldr	r5, [r4, #4]
 8013bc2:	60a5      	str	r5, [r4, #8]
 8013bc4:	2d00      	cmp	r5, #0
 8013bc6:	f2c0 8095 	blt.w	8013cf4 <_printf_i+0x20c>
 8013bca:	6821      	ldr	r1, [r4, #0]
 8013bcc:	f021 0104 	bic.w	r1, r1, #4
 8013bd0:	6021      	str	r1, [r4, #0]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d13d      	bne.n	8013c52 <_printf_i+0x16a>
 8013bd6:	2d00      	cmp	r5, #0
 8013bd8:	f040 808e 	bne.w	8013cf8 <_printf_i+0x210>
 8013bdc:	4665      	mov	r5, ip
 8013bde:	2a08      	cmp	r2, #8
 8013be0:	d10b      	bne.n	8013bfa <_printf_i+0x112>
 8013be2:	6823      	ldr	r3, [r4, #0]
 8013be4:	07db      	lsls	r3, r3, #31
 8013be6:	d508      	bpl.n	8013bfa <_printf_i+0x112>
 8013be8:	6923      	ldr	r3, [r4, #16]
 8013bea:	6862      	ldr	r2, [r4, #4]
 8013bec:	429a      	cmp	r2, r3
 8013bee:	bfde      	ittt	le
 8013bf0:	2330      	movle	r3, #48	; 0x30
 8013bf2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013bf6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013bfa:	ebac 0305 	sub.w	r3, ip, r5
 8013bfe:	6123      	str	r3, [r4, #16]
 8013c00:	f8cd 8000 	str.w	r8, [sp]
 8013c04:	463b      	mov	r3, r7
 8013c06:	aa03      	add	r2, sp, #12
 8013c08:	4621      	mov	r1, r4
 8013c0a:	4630      	mov	r0, r6
 8013c0c:	f7ff fef6 	bl	80139fc <_printf_common>
 8013c10:	3001      	adds	r0, #1
 8013c12:	d14d      	bne.n	8013cb0 <_printf_i+0x1c8>
 8013c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013c18:	b005      	add	sp, #20
 8013c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c1e:	4839      	ldr	r0, [pc, #228]	; (8013d04 <_printf_i+0x21c>)
 8013c20:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013c24:	6813      	ldr	r3, [r2, #0]
 8013c26:	6821      	ldr	r1, [r4, #0]
 8013c28:	1d1d      	adds	r5, r3, #4
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	6015      	str	r5, [r2, #0]
 8013c2e:	060a      	lsls	r2, r1, #24
 8013c30:	d50b      	bpl.n	8013c4a <_printf_i+0x162>
 8013c32:	07ca      	lsls	r2, r1, #31
 8013c34:	bf44      	itt	mi
 8013c36:	f041 0120 	orrmi.w	r1, r1, #32
 8013c3a:	6021      	strmi	r1, [r4, #0]
 8013c3c:	b91b      	cbnz	r3, 8013c46 <_printf_i+0x15e>
 8013c3e:	6822      	ldr	r2, [r4, #0]
 8013c40:	f022 0220 	bic.w	r2, r2, #32
 8013c44:	6022      	str	r2, [r4, #0]
 8013c46:	2210      	movs	r2, #16
 8013c48:	e7b7      	b.n	8013bba <_printf_i+0xd2>
 8013c4a:	064d      	lsls	r5, r1, #25
 8013c4c:	bf48      	it	mi
 8013c4e:	b29b      	uxthmi	r3, r3
 8013c50:	e7ef      	b.n	8013c32 <_printf_i+0x14a>
 8013c52:	4665      	mov	r5, ip
 8013c54:	fbb3 f1f2 	udiv	r1, r3, r2
 8013c58:	fb02 3311 	mls	r3, r2, r1, r3
 8013c5c:	5cc3      	ldrb	r3, [r0, r3]
 8013c5e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013c62:	460b      	mov	r3, r1
 8013c64:	2900      	cmp	r1, #0
 8013c66:	d1f5      	bne.n	8013c54 <_printf_i+0x16c>
 8013c68:	e7b9      	b.n	8013bde <_printf_i+0xf6>
 8013c6a:	6813      	ldr	r3, [r2, #0]
 8013c6c:	6825      	ldr	r5, [r4, #0]
 8013c6e:	6961      	ldr	r1, [r4, #20]
 8013c70:	1d18      	adds	r0, r3, #4
 8013c72:	6010      	str	r0, [r2, #0]
 8013c74:	0628      	lsls	r0, r5, #24
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	d501      	bpl.n	8013c7e <_printf_i+0x196>
 8013c7a:	6019      	str	r1, [r3, #0]
 8013c7c:	e002      	b.n	8013c84 <_printf_i+0x19c>
 8013c7e:	066a      	lsls	r2, r5, #25
 8013c80:	d5fb      	bpl.n	8013c7a <_printf_i+0x192>
 8013c82:	8019      	strh	r1, [r3, #0]
 8013c84:	2300      	movs	r3, #0
 8013c86:	6123      	str	r3, [r4, #16]
 8013c88:	4665      	mov	r5, ip
 8013c8a:	e7b9      	b.n	8013c00 <_printf_i+0x118>
 8013c8c:	6813      	ldr	r3, [r2, #0]
 8013c8e:	1d19      	adds	r1, r3, #4
 8013c90:	6011      	str	r1, [r2, #0]
 8013c92:	681d      	ldr	r5, [r3, #0]
 8013c94:	6862      	ldr	r2, [r4, #4]
 8013c96:	2100      	movs	r1, #0
 8013c98:	4628      	mov	r0, r5
 8013c9a:	f7ec fa79 	bl	8000190 <memchr>
 8013c9e:	b108      	cbz	r0, 8013ca4 <_printf_i+0x1bc>
 8013ca0:	1b40      	subs	r0, r0, r5
 8013ca2:	6060      	str	r0, [r4, #4]
 8013ca4:	6863      	ldr	r3, [r4, #4]
 8013ca6:	6123      	str	r3, [r4, #16]
 8013ca8:	2300      	movs	r3, #0
 8013caa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013cae:	e7a7      	b.n	8013c00 <_printf_i+0x118>
 8013cb0:	6923      	ldr	r3, [r4, #16]
 8013cb2:	462a      	mov	r2, r5
 8013cb4:	4639      	mov	r1, r7
 8013cb6:	4630      	mov	r0, r6
 8013cb8:	47c0      	blx	r8
 8013cba:	3001      	adds	r0, #1
 8013cbc:	d0aa      	beq.n	8013c14 <_printf_i+0x12c>
 8013cbe:	6823      	ldr	r3, [r4, #0]
 8013cc0:	079b      	lsls	r3, r3, #30
 8013cc2:	d413      	bmi.n	8013cec <_printf_i+0x204>
 8013cc4:	68e0      	ldr	r0, [r4, #12]
 8013cc6:	9b03      	ldr	r3, [sp, #12]
 8013cc8:	4298      	cmp	r0, r3
 8013cca:	bfb8      	it	lt
 8013ccc:	4618      	movlt	r0, r3
 8013cce:	e7a3      	b.n	8013c18 <_printf_i+0x130>
 8013cd0:	2301      	movs	r3, #1
 8013cd2:	464a      	mov	r2, r9
 8013cd4:	4639      	mov	r1, r7
 8013cd6:	4630      	mov	r0, r6
 8013cd8:	47c0      	blx	r8
 8013cda:	3001      	adds	r0, #1
 8013cdc:	d09a      	beq.n	8013c14 <_printf_i+0x12c>
 8013cde:	3501      	adds	r5, #1
 8013ce0:	68e3      	ldr	r3, [r4, #12]
 8013ce2:	9a03      	ldr	r2, [sp, #12]
 8013ce4:	1a9b      	subs	r3, r3, r2
 8013ce6:	42ab      	cmp	r3, r5
 8013ce8:	dcf2      	bgt.n	8013cd0 <_printf_i+0x1e8>
 8013cea:	e7eb      	b.n	8013cc4 <_printf_i+0x1dc>
 8013cec:	2500      	movs	r5, #0
 8013cee:	f104 0919 	add.w	r9, r4, #25
 8013cf2:	e7f5      	b.n	8013ce0 <_printf_i+0x1f8>
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d1ac      	bne.n	8013c52 <_printf_i+0x16a>
 8013cf8:	7803      	ldrb	r3, [r0, #0]
 8013cfa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013cfe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013d02:	e76c      	b.n	8013bde <_printf_i+0xf6>
 8013d04:	080191e6 	.word	0x080191e6
 8013d08:	080191f7 	.word	0x080191f7

08013d0c <iprintf>:
 8013d0c:	b40f      	push	{r0, r1, r2, r3}
 8013d0e:	4b0a      	ldr	r3, [pc, #40]	; (8013d38 <iprintf+0x2c>)
 8013d10:	b513      	push	{r0, r1, r4, lr}
 8013d12:	681c      	ldr	r4, [r3, #0]
 8013d14:	b124      	cbz	r4, 8013d20 <iprintf+0x14>
 8013d16:	69a3      	ldr	r3, [r4, #24]
 8013d18:	b913      	cbnz	r3, 8013d20 <iprintf+0x14>
 8013d1a:	4620      	mov	r0, r4
 8013d1c:	f001 f8c0 	bl	8014ea0 <__sinit>
 8013d20:	ab05      	add	r3, sp, #20
 8013d22:	9a04      	ldr	r2, [sp, #16]
 8013d24:	68a1      	ldr	r1, [r4, #8]
 8013d26:	9301      	str	r3, [sp, #4]
 8013d28:	4620      	mov	r0, r4
 8013d2a:	f001 fecb 	bl	8015ac4 <_vfiprintf_r>
 8013d2e:	b002      	add	sp, #8
 8013d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d34:	b004      	add	sp, #16
 8013d36:	4770      	bx	lr
 8013d38:	20000024 	.word	0x20000024

08013d3c <_puts_r>:
 8013d3c:	b570      	push	{r4, r5, r6, lr}
 8013d3e:	460e      	mov	r6, r1
 8013d40:	4605      	mov	r5, r0
 8013d42:	b118      	cbz	r0, 8013d4c <_puts_r+0x10>
 8013d44:	6983      	ldr	r3, [r0, #24]
 8013d46:	b90b      	cbnz	r3, 8013d4c <_puts_r+0x10>
 8013d48:	f001 f8aa 	bl	8014ea0 <__sinit>
 8013d4c:	69ab      	ldr	r3, [r5, #24]
 8013d4e:	68ac      	ldr	r4, [r5, #8]
 8013d50:	b913      	cbnz	r3, 8013d58 <_puts_r+0x1c>
 8013d52:	4628      	mov	r0, r5
 8013d54:	f001 f8a4 	bl	8014ea0 <__sinit>
 8013d58:	4b23      	ldr	r3, [pc, #140]	; (8013de8 <_puts_r+0xac>)
 8013d5a:	429c      	cmp	r4, r3
 8013d5c:	d117      	bne.n	8013d8e <_puts_r+0x52>
 8013d5e:	686c      	ldr	r4, [r5, #4]
 8013d60:	89a3      	ldrh	r3, [r4, #12]
 8013d62:	071b      	lsls	r3, r3, #28
 8013d64:	d51d      	bpl.n	8013da2 <_puts_r+0x66>
 8013d66:	6923      	ldr	r3, [r4, #16]
 8013d68:	b1db      	cbz	r3, 8013da2 <_puts_r+0x66>
 8013d6a:	3e01      	subs	r6, #1
 8013d6c:	68a3      	ldr	r3, [r4, #8]
 8013d6e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013d72:	3b01      	subs	r3, #1
 8013d74:	60a3      	str	r3, [r4, #8]
 8013d76:	b9e9      	cbnz	r1, 8013db4 <_puts_r+0x78>
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	da2e      	bge.n	8013dda <_puts_r+0x9e>
 8013d7c:	4622      	mov	r2, r4
 8013d7e:	210a      	movs	r1, #10
 8013d80:	4628      	mov	r0, r5
 8013d82:	f000 f899 	bl	8013eb8 <__swbuf_r>
 8013d86:	3001      	adds	r0, #1
 8013d88:	d011      	beq.n	8013dae <_puts_r+0x72>
 8013d8a:	200a      	movs	r0, #10
 8013d8c:	e011      	b.n	8013db2 <_puts_r+0x76>
 8013d8e:	4b17      	ldr	r3, [pc, #92]	; (8013dec <_puts_r+0xb0>)
 8013d90:	429c      	cmp	r4, r3
 8013d92:	d101      	bne.n	8013d98 <_puts_r+0x5c>
 8013d94:	68ac      	ldr	r4, [r5, #8]
 8013d96:	e7e3      	b.n	8013d60 <_puts_r+0x24>
 8013d98:	4b15      	ldr	r3, [pc, #84]	; (8013df0 <_puts_r+0xb4>)
 8013d9a:	429c      	cmp	r4, r3
 8013d9c:	bf08      	it	eq
 8013d9e:	68ec      	ldreq	r4, [r5, #12]
 8013da0:	e7de      	b.n	8013d60 <_puts_r+0x24>
 8013da2:	4621      	mov	r1, r4
 8013da4:	4628      	mov	r0, r5
 8013da6:	f000 f8d9 	bl	8013f5c <__swsetup_r>
 8013daa:	2800      	cmp	r0, #0
 8013dac:	d0dd      	beq.n	8013d6a <_puts_r+0x2e>
 8013dae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013db2:	bd70      	pop	{r4, r5, r6, pc}
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	da04      	bge.n	8013dc2 <_puts_r+0x86>
 8013db8:	69a2      	ldr	r2, [r4, #24]
 8013dba:	429a      	cmp	r2, r3
 8013dbc:	dc06      	bgt.n	8013dcc <_puts_r+0x90>
 8013dbe:	290a      	cmp	r1, #10
 8013dc0:	d004      	beq.n	8013dcc <_puts_r+0x90>
 8013dc2:	6823      	ldr	r3, [r4, #0]
 8013dc4:	1c5a      	adds	r2, r3, #1
 8013dc6:	6022      	str	r2, [r4, #0]
 8013dc8:	7019      	strb	r1, [r3, #0]
 8013dca:	e7cf      	b.n	8013d6c <_puts_r+0x30>
 8013dcc:	4622      	mov	r2, r4
 8013dce:	4628      	mov	r0, r5
 8013dd0:	f000 f872 	bl	8013eb8 <__swbuf_r>
 8013dd4:	3001      	adds	r0, #1
 8013dd6:	d1c9      	bne.n	8013d6c <_puts_r+0x30>
 8013dd8:	e7e9      	b.n	8013dae <_puts_r+0x72>
 8013dda:	6823      	ldr	r3, [r4, #0]
 8013ddc:	200a      	movs	r0, #10
 8013dde:	1c5a      	adds	r2, r3, #1
 8013de0:	6022      	str	r2, [r4, #0]
 8013de2:	7018      	strb	r0, [r3, #0]
 8013de4:	e7e5      	b.n	8013db2 <_puts_r+0x76>
 8013de6:	bf00      	nop
 8013de8:	08019238 	.word	0x08019238
 8013dec:	08019258 	.word	0x08019258
 8013df0:	08019218 	.word	0x08019218

08013df4 <puts>:
 8013df4:	4b02      	ldr	r3, [pc, #8]	; (8013e00 <puts+0xc>)
 8013df6:	4601      	mov	r1, r0
 8013df8:	6818      	ldr	r0, [r3, #0]
 8013dfa:	f7ff bf9f 	b.w	8013d3c <_puts_r>
 8013dfe:	bf00      	nop
 8013e00:	20000024 	.word	0x20000024

08013e04 <srand>:
 8013e04:	b538      	push	{r3, r4, r5, lr}
 8013e06:	4b0d      	ldr	r3, [pc, #52]	; (8013e3c <srand+0x38>)
 8013e08:	681c      	ldr	r4, [r3, #0]
 8013e0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013e0c:	4605      	mov	r5, r0
 8013e0e:	b97b      	cbnz	r3, 8013e30 <srand+0x2c>
 8013e10:	2018      	movs	r0, #24
 8013e12:	f001 f941 	bl	8015098 <malloc>
 8013e16:	4a0a      	ldr	r2, [pc, #40]	; (8013e40 <srand+0x3c>)
 8013e18:	4b0a      	ldr	r3, [pc, #40]	; (8013e44 <srand+0x40>)
 8013e1a:	63a0      	str	r0, [r4, #56]	; 0x38
 8013e1c:	e9c0 2300 	strd	r2, r3, [r0]
 8013e20:	4b09      	ldr	r3, [pc, #36]	; (8013e48 <srand+0x44>)
 8013e22:	6083      	str	r3, [r0, #8]
 8013e24:	230b      	movs	r3, #11
 8013e26:	8183      	strh	r3, [r0, #12]
 8013e28:	2201      	movs	r2, #1
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013e30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013e32:	2200      	movs	r2, #0
 8013e34:	611d      	str	r5, [r3, #16]
 8013e36:	615a      	str	r2, [r3, #20]
 8013e38:	bd38      	pop	{r3, r4, r5, pc}
 8013e3a:	bf00      	nop
 8013e3c:	20000024 	.word	0x20000024
 8013e40:	abcd330e 	.word	0xabcd330e
 8013e44:	e66d1234 	.word	0xe66d1234
 8013e48:	0005deec 	.word	0x0005deec

08013e4c <siprintf>:
 8013e4c:	b40e      	push	{r1, r2, r3}
 8013e4e:	b500      	push	{lr}
 8013e50:	b09c      	sub	sp, #112	; 0x70
 8013e52:	ab1d      	add	r3, sp, #116	; 0x74
 8013e54:	9002      	str	r0, [sp, #8]
 8013e56:	9006      	str	r0, [sp, #24]
 8013e58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013e5c:	4809      	ldr	r0, [pc, #36]	; (8013e84 <siprintf+0x38>)
 8013e5e:	9107      	str	r1, [sp, #28]
 8013e60:	9104      	str	r1, [sp, #16]
 8013e62:	4909      	ldr	r1, [pc, #36]	; (8013e88 <siprintf+0x3c>)
 8013e64:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e68:	9105      	str	r1, [sp, #20]
 8013e6a:	6800      	ldr	r0, [r0, #0]
 8013e6c:	9301      	str	r3, [sp, #4]
 8013e6e:	a902      	add	r1, sp, #8
 8013e70:	f001 fd06 	bl	8015880 <_svfiprintf_r>
 8013e74:	9b02      	ldr	r3, [sp, #8]
 8013e76:	2200      	movs	r2, #0
 8013e78:	701a      	strb	r2, [r3, #0]
 8013e7a:	b01c      	add	sp, #112	; 0x70
 8013e7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013e80:	b003      	add	sp, #12
 8013e82:	4770      	bx	lr
 8013e84:	20000024 	.word	0x20000024
 8013e88:	ffff0208 	.word	0xffff0208

08013e8c <strncpy>:
 8013e8c:	b570      	push	{r4, r5, r6, lr}
 8013e8e:	3901      	subs	r1, #1
 8013e90:	4604      	mov	r4, r0
 8013e92:	b902      	cbnz	r2, 8013e96 <strncpy+0xa>
 8013e94:	bd70      	pop	{r4, r5, r6, pc}
 8013e96:	4623      	mov	r3, r4
 8013e98:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8013e9c:	f803 5b01 	strb.w	r5, [r3], #1
 8013ea0:	1e56      	subs	r6, r2, #1
 8013ea2:	b92d      	cbnz	r5, 8013eb0 <strncpy+0x24>
 8013ea4:	4414      	add	r4, r2
 8013ea6:	42a3      	cmp	r3, r4
 8013ea8:	d0f4      	beq.n	8013e94 <strncpy+0x8>
 8013eaa:	f803 5b01 	strb.w	r5, [r3], #1
 8013eae:	e7fa      	b.n	8013ea6 <strncpy+0x1a>
 8013eb0:	461c      	mov	r4, r3
 8013eb2:	4632      	mov	r2, r6
 8013eb4:	e7ed      	b.n	8013e92 <strncpy+0x6>
	...

08013eb8 <__swbuf_r>:
 8013eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013eba:	460e      	mov	r6, r1
 8013ebc:	4614      	mov	r4, r2
 8013ebe:	4605      	mov	r5, r0
 8013ec0:	b118      	cbz	r0, 8013eca <__swbuf_r+0x12>
 8013ec2:	6983      	ldr	r3, [r0, #24]
 8013ec4:	b90b      	cbnz	r3, 8013eca <__swbuf_r+0x12>
 8013ec6:	f000 ffeb 	bl	8014ea0 <__sinit>
 8013eca:	4b21      	ldr	r3, [pc, #132]	; (8013f50 <__swbuf_r+0x98>)
 8013ecc:	429c      	cmp	r4, r3
 8013ece:	d12a      	bne.n	8013f26 <__swbuf_r+0x6e>
 8013ed0:	686c      	ldr	r4, [r5, #4]
 8013ed2:	69a3      	ldr	r3, [r4, #24]
 8013ed4:	60a3      	str	r3, [r4, #8]
 8013ed6:	89a3      	ldrh	r3, [r4, #12]
 8013ed8:	071a      	lsls	r2, r3, #28
 8013eda:	d52e      	bpl.n	8013f3a <__swbuf_r+0x82>
 8013edc:	6923      	ldr	r3, [r4, #16]
 8013ede:	b363      	cbz	r3, 8013f3a <__swbuf_r+0x82>
 8013ee0:	6923      	ldr	r3, [r4, #16]
 8013ee2:	6820      	ldr	r0, [r4, #0]
 8013ee4:	1ac0      	subs	r0, r0, r3
 8013ee6:	6963      	ldr	r3, [r4, #20]
 8013ee8:	b2f6      	uxtb	r6, r6
 8013eea:	4283      	cmp	r3, r0
 8013eec:	4637      	mov	r7, r6
 8013eee:	dc04      	bgt.n	8013efa <__swbuf_r+0x42>
 8013ef0:	4621      	mov	r1, r4
 8013ef2:	4628      	mov	r0, r5
 8013ef4:	f000 ff6a 	bl	8014dcc <_fflush_r>
 8013ef8:	bb28      	cbnz	r0, 8013f46 <__swbuf_r+0x8e>
 8013efa:	68a3      	ldr	r3, [r4, #8]
 8013efc:	3b01      	subs	r3, #1
 8013efe:	60a3      	str	r3, [r4, #8]
 8013f00:	6823      	ldr	r3, [r4, #0]
 8013f02:	1c5a      	adds	r2, r3, #1
 8013f04:	6022      	str	r2, [r4, #0]
 8013f06:	701e      	strb	r6, [r3, #0]
 8013f08:	6963      	ldr	r3, [r4, #20]
 8013f0a:	3001      	adds	r0, #1
 8013f0c:	4283      	cmp	r3, r0
 8013f0e:	d004      	beq.n	8013f1a <__swbuf_r+0x62>
 8013f10:	89a3      	ldrh	r3, [r4, #12]
 8013f12:	07db      	lsls	r3, r3, #31
 8013f14:	d519      	bpl.n	8013f4a <__swbuf_r+0x92>
 8013f16:	2e0a      	cmp	r6, #10
 8013f18:	d117      	bne.n	8013f4a <__swbuf_r+0x92>
 8013f1a:	4621      	mov	r1, r4
 8013f1c:	4628      	mov	r0, r5
 8013f1e:	f000 ff55 	bl	8014dcc <_fflush_r>
 8013f22:	b190      	cbz	r0, 8013f4a <__swbuf_r+0x92>
 8013f24:	e00f      	b.n	8013f46 <__swbuf_r+0x8e>
 8013f26:	4b0b      	ldr	r3, [pc, #44]	; (8013f54 <__swbuf_r+0x9c>)
 8013f28:	429c      	cmp	r4, r3
 8013f2a:	d101      	bne.n	8013f30 <__swbuf_r+0x78>
 8013f2c:	68ac      	ldr	r4, [r5, #8]
 8013f2e:	e7d0      	b.n	8013ed2 <__swbuf_r+0x1a>
 8013f30:	4b09      	ldr	r3, [pc, #36]	; (8013f58 <__swbuf_r+0xa0>)
 8013f32:	429c      	cmp	r4, r3
 8013f34:	bf08      	it	eq
 8013f36:	68ec      	ldreq	r4, [r5, #12]
 8013f38:	e7cb      	b.n	8013ed2 <__swbuf_r+0x1a>
 8013f3a:	4621      	mov	r1, r4
 8013f3c:	4628      	mov	r0, r5
 8013f3e:	f000 f80d 	bl	8013f5c <__swsetup_r>
 8013f42:	2800      	cmp	r0, #0
 8013f44:	d0cc      	beq.n	8013ee0 <__swbuf_r+0x28>
 8013f46:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013f4a:	4638      	mov	r0, r7
 8013f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f4e:	bf00      	nop
 8013f50:	08019238 	.word	0x08019238
 8013f54:	08019258 	.word	0x08019258
 8013f58:	08019218 	.word	0x08019218

08013f5c <__swsetup_r>:
 8013f5c:	4b32      	ldr	r3, [pc, #200]	; (8014028 <__swsetup_r+0xcc>)
 8013f5e:	b570      	push	{r4, r5, r6, lr}
 8013f60:	681d      	ldr	r5, [r3, #0]
 8013f62:	4606      	mov	r6, r0
 8013f64:	460c      	mov	r4, r1
 8013f66:	b125      	cbz	r5, 8013f72 <__swsetup_r+0x16>
 8013f68:	69ab      	ldr	r3, [r5, #24]
 8013f6a:	b913      	cbnz	r3, 8013f72 <__swsetup_r+0x16>
 8013f6c:	4628      	mov	r0, r5
 8013f6e:	f000 ff97 	bl	8014ea0 <__sinit>
 8013f72:	4b2e      	ldr	r3, [pc, #184]	; (801402c <__swsetup_r+0xd0>)
 8013f74:	429c      	cmp	r4, r3
 8013f76:	d10f      	bne.n	8013f98 <__swsetup_r+0x3c>
 8013f78:	686c      	ldr	r4, [r5, #4]
 8013f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f7e:	b29a      	uxth	r2, r3
 8013f80:	0715      	lsls	r5, r2, #28
 8013f82:	d42c      	bmi.n	8013fde <__swsetup_r+0x82>
 8013f84:	06d0      	lsls	r0, r2, #27
 8013f86:	d411      	bmi.n	8013fac <__swsetup_r+0x50>
 8013f88:	2209      	movs	r2, #9
 8013f8a:	6032      	str	r2, [r6, #0]
 8013f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f90:	81a3      	strh	r3, [r4, #12]
 8013f92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013f96:	e03e      	b.n	8014016 <__swsetup_r+0xba>
 8013f98:	4b25      	ldr	r3, [pc, #148]	; (8014030 <__swsetup_r+0xd4>)
 8013f9a:	429c      	cmp	r4, r3
 8013f9c:	d101      	bne.n	8013fa2 <__swsetup_r+0x46>
 8013f9e:	68ac      	ldr	r4, [r5, #8]
 8013fa0:	e7eb      	b.n	8013f7a <__swsetup_r+0x1e>
 8013fa2:	4b24      	ldr	r3, [pc, #144]	; (8014034 <__swsetup_r+0xd8>)
 8013fa4:	429c      	cmp	r4, r3
 8013fa6:	bf08      	it	eq
 8013fa8:	68ec      	ldreq	r4, [r5, #12]
 8013faa:	e7e6      	b.n	8013f7a <__swsetup_r+0x1e>
 8013fac:	0751      	lsls	r1, r2, #29
 8013fae:	d512      	bpl.n	8013fd6 <__swsetup_r+0x7a>
 8013fb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013fb2:	b141      	cbz	r1, 8013fc6 <__swsetup_r+0x6a>
 8013fb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013fb8:	4299      	cmp	r1, r3
 8013fba:	d002      	beq.n	8013fc2 <__swsetup_r+0x66>
 8013fbc:	4630      	mov	r0, r6
 8013fbe:	f001 fb5d 	bl	801567c <_free_r>
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	6363      	str	r3, [r4, #52]	; 0x34
 8013fc6:	89a3      	ldrh	r3, [r4, #12]
 8013fc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013fcc:	81a3      	strh	r3, [r4, #12]
 8013fce:	2300      	movs	r3, #0
 8013fd0:	6063      	str	r3, [r4, #4]
 8013fd2:	6923      	ldr	r3, [r4, #16]
 8013fd4:	6023      	str	r3, [r4, #0]
 8013fd6:	89a3      	ldrh	r3, [r4, #12]
 8013fd8:	f043 0308 	orr.w	r3, r3, #8
 8013fdc:	81a3      	strh	r3, [r4, #12]
 8013fde:	6923      	ldr	r3, [r4, #16]
 8013fe0:	b94b      	cbnz	r3, 8013ff6 <__swsetup_r+0x9a>
 8013fe2:	89a3      	ldrh	r3, [r4, #12]
 8013fe4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013fec:	d003      	beq.n	8013ff6 <__swsetup_r+0x9a>
 8013fee:	4621      	mov	r1, r4
 8013ff0:	4630      	mov	r0, r6
 8013ff2:	f001 f811 	bl	8015018 <__smakebuf_r>
 8013ff6:	89a2      	ldrh	r2, [r4, #12]
 8013ff8:	f012 0301 	ands.w	r3, r2, #1
 8013ffc:	d00c      	beq.n	8014018 <__swsetup_r+0xbc>
 8013ffe:	2300      	movs	r3, #0
 8014000:	60a3      	str	r3, [r4, #8]
 8014002:	6963      	ldr	r3, [r4, #20]
 8014004:	425b      	negs	r3, r3
 8014006:	61a3      	str	r3, [r4, #24]
 8014008:	6923      	ldr	r3, [r4, #16]
 801400a:	b953      	cbnz	r3, 8014022 <__swsetup_r+0xc6>
 801400c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014010:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014014:	d1ba      	bne.n	8013f8c <__swsetup_r+0x30>
 8014016:	bd70      	pop	{r4, r5, r6, pc}
 8014018:	0792      	lsls	r2, r2, #30
 801401a:	bf58      	it	pl
 801401c:	6963      	ldrpl	r3, [r4, #20]
 801401e:	60a3      	str	r3, [r4, #8]
 8014020:	e7f2      	b.n	8014008 <__swsetup_r+0xac>
 8014022:	2000      	movs	r0, #0
 8014024:	e7f7      	b.n	8014016 <__swsetup_r+0xba>
 8014026:	bf00      	nop
 8014028:	20000024 	.word	0x20000024
 801402c:	08019238 	.word	0x08019238
 8014030:	08019258 	.word	0x08019258
 8014034:	08019218 	.word	0x08019218

08014038 <quorem>:
 8014038:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801403c:	6903      	ldr	r3, [r0, #16]
 801403e:	690c      	ldr	r4, [r1, #16]
 8014040:	42a3      	cmp	r3, r4
 8014042:	4680      	mov	r8, r0
 8014044:	f2c0 8082 	blt.w	801414c <quorem+0x114>
 8014048:	3c01      	subs	r4, #1
 801404a:	f101 0714 	add.w	r7, r1, #20
 801404e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014052:	f100 0614 	add.w	r6, r0, #20
 8014056:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801405a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801405e:	eb06 030c 	add.w	r3, r6, ip
 8014062:	3501      	adds	r5, #1
 8014064:	eb07 090c 	add.w	r9, r7, ip
 8014068:	9301      	str	r3, [sp, #4]
 801406a:	fbb0 f5f5 	udiv	r5, r0, r5
 801406e:	b395      	cbz	r5, 80140d6 <quorem+0x9e>
 8014070:	f04f 0a00 	mov.w	sl, #0
 8014074:	4638      	mov	r0, r7
 8014076:	46b6      	mov	lr, r6
 8014078:	46d3      	mov	fp, sl
 801407a:	f850 2b04 	ldr.w	r2, [r0], #4
 801407e:	b293      	uxth	r3, r2
 8014080:	fb05 a303 	mla	r3, r5, r3, sl
 8014084:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014088:	b29b      	uxth	r3, r3
 801408a:	ebab 0303 	sub.w	r3, fp, r3
 801408e:	0c12      	lsrs	r2, r2, #16
 8014090:	f8de b000 	ldr.w	fp, [lr]
 8014094:	fb05 a202 	mla	r2, r5, r2, sl
 8014098:	fa13 f38b 	uxtah	r3, r3, fp
 801409c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80140a0:	fa1f fb82 	uxth.w	fp, r2
 80140a4:	f8de 2000 	ldr.w	r2, [lr]
 80140a8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80140ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80140b0:	b29b      	uxth	r3, r3
 80140b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80140b6:	4581      	cmp	r9, r0
 80140b8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80140bc:	f84e 3b04 	str.w	r3, [lr], #4
 80140c0:	d2db      	bcs.n	801407a <quorem+0x42>
 80140c2:	f856 300c 	ldr.w	r3, [r6, ip]
 80140c6:	b933      	cbnz	r3, 80140d6 <quorem+0x9e>
 80140c8:	9b01      	ldr	r3, [sp, #4]
 80140ca:	3b04      	subs	r3, #4
 80140cc:	429e      	cmp	r6, r3
 80140ce:	461a      	mov	r2, r3
 80140d0:	d330      	bcc.n	8014134 <quorem+0xfc>
 80140d2:	f8c8 4010 	str.w	r4, [r8, #16]
 80140d6:	4640      	mov	r0, r8
 80140d8:	f001 f9fc 	bl	80154d4 <__mcmp>
 80140dc:	2800      	cmp	r0, #0
 80140de:	db25      	blt.n	801412c <quorem+0xf4>
 80140e0:	3501      	adds	r5, #1
 80140e2:	4630      	mov	r0, r6
 80140e4:	f04f 0c00 	mov.w	ip, #0
 80140e8:	f857 2b04 	ldr.w	r2, [r7], #4
 80140ec:	f8d0 e000 	ldr.w	lr, [r0]
 80140f0:	b293      	uxth	r3, r2
 80140f2:	ebac 0303 	sub.w	r3, ip, r3
 80140f6:	0c12      	lsrs	r2, r2, #16
 80140f8:	fa13 f38e 	uxtah	r3, r3, lr
 80140fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014100:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014104:	b29b      	uxth	r3, r3
 8014106:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801410a:	45b9      	cmp	r9, r7
 801410c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014110:	f840 3b04 	str.w	r3, [r0], #4
 8014114:	d2e8      	bcs.n	80140e8 <quorem+0xb0>
 8014116:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801411a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801411e:	b92a      	cbnz	r2, 801412c <quorem+0xf4>
 8014120:	3b04      	subs	r3, #4
 8014122:	429e      	cmp	r6, r3
 8014124:	461a      	mov	r2, r3
 8014126:	d30b      	bcc.n	8014140 <quorem+0x108>
 8014128:	f8c8 4010 	str.w	r4, [r8, #16]
 801412c:	4628      	mov	r0, r5
 801412e:	b003      	add	sp, #12
 8014130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014134:	6812      	ldr	r2, [r2, #0]
 8014136:	3b04      	subs	r3, #4
 8014138:	2a00      	cmp	r2, #0
 801413a:	d1ca      	bne.n	80140d2 <quorem+0x9a>
 801413c:	3c01      	subs	r4, #1
 801413e:	e7c5      	b.n	80140cc <quorem+0x94>
 8014140:	6812      	ldr	r2, [r2, #0]
 8014142:	3b04      	subs	r3, #4
 8014144:	2a00      	cmp	r2, #0
 8014146:	d1ef      	bne.n	8014128 <quorem+0xf0>
 8014148:	3c01      	subs	r4, #1
 801414a:	e7ea      	b.n	8014122 <quorem+0xea>
 801414c:	2000      	movs	r0, #0
 801414e:	e7ee      	b.n	801412e <quorem+0xf6>

08014150 <_dtoa_r>:
 8014150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014154:	ec57 6b10 	vmov	r6, r7, d0
 8014158:	b097      	sub	sp, #92	; 0x5c
 801415a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801415c:	9106      	str	r1, [sp, #24]
 801415e:	4604      	mov	r4, r0
 8014160:	920b      	str	r2, [sp, #44]	; 0x2c
 8014162:	9312      	str	r3, [sp, #72]	; 0x48
 8014164:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014168:	e9cd 6700 	strd	r6, r7, [sp]
 801416c:	b93d      	cbnz	r5, 801417e <_dtoa_r+0x2e>
 801416e:	2010      	movs	r0, #16
 8014170:	f000 ff92 	bl	8015098 <malloc>
 8014174:	6260      	str	r0, [r4, #36]	; 0x24
 8014176:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801417a:	6005      	str	r5, [r0, #0]
 801417c:	60c5      	str	r5, [r0, #12]
 801417e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014180:	6819      	ldr	r1, [r3, #0]
 8014182:	b151      	cbz	r1, 801419a <_dtoa_r+0x4a>
 8014184:	685a      	ldr	r2, [r3, #4]
 8014186:	604a      	str	r2, [r1, #4]
 8014188:	2301      	movs	r3, #1
 801418a:	4093      	lsls	r3, r2
 801418c:	608b      	str	r3, [r1, #8]
 801418e:	4620      	mov	r0, r4
 8014190:	f000 ffbe 	bl	8015110 <_Bfree>
 8014194:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014196:	2200      	movs	r2, #0
 8014198:	601a      	str	r2, [r3, #0]
 801419a:	1e3b      	subs	r3, r7, #0
 801419c:	bfbb      	ittet	lt
 801419e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80141a2:	9301      	strlt	r3, [sp, #4]
 80141a4:	2300      	movge	r3, #0
 80141a6:	2201      	movlt	r2, #1
 80141a8:	bfac      	ite	ge
 80141aa:	f8c8 3000 	strge.w	r3, [r8]
 80141ae:	f8c8 2000 	strlt.w	r2, [r8]
 80141b2:	4baf      	ldr	r3, [pc, #700]	; (8014470 <_dtoa_r+0x320>)
 80141b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80141b8:	ea33 0308 	bics.w	r3, r3, r8
 80141bc:	d114      	bne.n	80141e8 <_dtoa_r+0x98>
 80141be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80141c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80141c4:	6013      	str	r3, [r2, #0]
 80141c6:	9b00      	ldr	r3, [sp, #0]
 80141c8:	b923      	cbnz	r3, 80141d4 <_dtoa_r+0x84>
 80141ca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80141ce:	2800      	cmp	r0, #0
 80141d0:	f000 8542 	beq.w	8014c58 <_dtoa_r+0xb08>
 80141d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80141d6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8014484 <_dtoa_r+0x334>
 80141da:	2b00      	cmp	r3, #0
 80141dc:	f000 8544 	beq.w	8014c68 <_dtoa_r+0xb18>
 80141e0:	f10b 0303 	add.w	r3, fp, #3
 80141e4:	f000 bd3e 	b.w	8014c64 <_dtoa_r+0xb14>
 80141e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80141ec:	2200      	movs	r2, #0
 80141ee:	2300      	movs	r3, #0
 80141f0:	4630      	mov	r0, r6
 80141f2:	4639      	mov	r1, r7
 80141f4:	f7ec fc40 	bl	8000a78 <__aeabi_dcmpeq>
 80141f8:	4681      	mov	r9, r0
 80141fa:	b168      	cbz	r0, 8014218 <_dtoa_r+0xc8>
 80141fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80141fe:	2301      	movs	r3, #1
 8014200:	6013      	str	r3, [r2, #0]
 8014202:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014204:	2b00      	cmp	r3, #0
 8014206:	f000 8524 	beq.w	8014c52 <_dtoa_r+0xb02>
 801420a:	4b9a      	ldr	r3, [pc, #616]	; (8014474 <_dtoa_r+0x324>)
 801420c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801420e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8014212:	6013      	str	r3, [r2, #0]
 8014214:	f000 bd28 	b.w	8014c68 <_dtoa_r+0xb18>
 8014218:	aa14      	add	r2, sp, #80	; 0x50
 801421a:	a915      	add	r1, sp, #84	; 0x54
 801421c:	ec47 6b10 	vmov	d0, r6, r7
 8014220:	4620      	mov	r0, r4
 8014222:	f001 f9ce 	bl	80155c2 <__d2b>
 8014226:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801422a:	9004      	str	r0, [sp, #16]
 801422c:	2d00      	cmp	r5, #0
 801422e:	d07c      	beq.n	801432a <_dtoa_r+0x1da>
 8014230:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014234:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014238:	46b2      	mov	sl, r6
 801423a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801423e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014242:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8014246:	2200      	movs	r2, #0
 8014248:	4b8b      	ldr	r3, [pc, #556]	; (8014478 <_dtoa_r+0x328>)
 801424a:	4650      	mov	r0, sl
 801424c:	4659      	mov	r1, fp
 801424e:	f7eb fff3 	bl	8000238 <__aeabi_dsub>
 8014252:	a381      	add	r3, pc, #516	; (adr r3, 8014458 <_dtoa_r+0x308>)
 8014254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014258:	f7ec f9a6 	bl	80005a8 <__aeabi_dmul>
 801425c:	a380      	add	r3, pc, #512	; (adr r3, 8014460 <_dtoa_r+0x310>)
 801425e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014262:	f7eb ffeb 	bl	800023c <__adddf3>
 8014266:	4606      	mov	r6, r0
 8014268:	4628      	mov	r0, r5
 801426a:	460f      	mov	r7, r1
 801426c:	f7ec f932 	bl	80004d4 <__aeabi_i2d>
 8014270:	a37d      	add	r3, pc, #500	; (adr r3, 8014468 <_dtoa_r+0x318>)
 8014272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014276:	f7ec f997 	bl	80005a8 <__aeabi_dmul>
 801427a:	4602      	mov	r2, r0
 801427c:	460b      	mov	r3, r1
 801427e:	4630      	mov	r0, r6
 8014280:	4639      	mov	r1, r7
 8014282:	f7eb ffdb 	bl	800023c <__adddf3>
 8014286:	4606      	mov	r6, r0
 8014288:	460f      	mov	r7, r1
 801428a:	f7ec fc3d 	bl	8000b08 <__aeabi_d2iz>
 801428e:	2200      	movs	r2, #0
 8014290:	4682      	mov	sl, r0
 8014292:	2300      	movs	r3, #0
 8014294:	4630      	mov	r0, r6
 8014296:	4639      	mov	r1, r7
 8014298:	f7ec fbf8 	bl	8000a8c <__aeabi_dcmplt>
 801429c:	b148      	cbz	r0, 80142b2 <_dtoa_r+0x162>
 801429e:	4650      	mov	r0, sl
 80142a0:	f7ec f918 	bl	80004d4 <__aeabi_i2d>
 80142a4:	4632      	mov	r2, r6
 80142a6:	463b      	mov	r3, r7
 80142a8:	f7ec fbe6 	bl	8000a78 <__aeabi_dcmpeq>
 80142ac:	b908      	cbnz	r0, 80142b2 <_dtoa_r+0x162>
 80142ae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80142b2:	f1ba 0f16 	cmp.w	sl, #22
 80142b6:	d859      	bhi.n	801436c <_dtoa_r+0x21c>
 80142b8:	4970      	ldr	r1, [pc, #448]	; (801447c <_dtoa_r+0x32c>)
 80142ba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80142be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80142c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80142c6:	f7ec fbff 	bl	8000ac8 <__aeabi_dcmpgt>
 80142ca:	2800      	cmp	r0, #0
 80142cc:	d050      	beq.n	8014370 <_dtoa_r+0x220>
 80142ce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80142d2:	2300      	movs	r3, #0
 80142d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80142d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80142d8:	1b5d      	subs	r5, r3, r5
 80142da:	f1b5 0801 	subs.w	r8, r5, #1
 80142de:	bf49      	itett	mi
 80142e0:	f1c5 0301 	rsbmi	r3, r5, #1
 80142e4:	2300      	movpl	r3, #0
 80142e6:	9305      	strmi	r3, [sp, #20]
 80142e8:	f04f 0800 	movmi.w	r8, #0
 80142ec:	bf58      	it	pl
 80142ee:	9305      	strpl	r3, [sp, #20]
 80142f0:	f1ba 0f00 	cmp.w	sl, #0
 80142f4:	db3e      	blt.n	8014374 <_dtoa_r+0x224>
 80142f6:	2300      	movs	r3, #0
 80142f8:	44d0      	add	r8, sl
 80142fa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80142fe:	9307      	str	r3, [sp, #28]
 8014300:	9b06      	ldr	r3, [sp, #24]
 8014302:	2b09      	cmp	r3, #9
 8014304:	f200 8090 	bhi.w	8014428 <_dtoa_r+0x2d8>
 8014308:	2b05      	cmp	r3, #5
 801430a:	bfc4      	itt	gt
 801430c:	3b04      	subgt	r3, #4
 801430e:	9306      	strgt	r3, [sp, #24]
 8014310:	9b06      	ldr	r3, [sp, #24]
 8014312:	f1a3 0302 	sub.w	r3, r3, #2
 8014316:	bfcc      	ite	gt
 8014318:	2500      	movgt	r5, #0
 801431a:	2501      	movle	r5, #1
 801431c:	2b03      	cmp	r3, #3
 801431e:	f200 808f 	bhi.w	8014440 <_dtoa_r+0x2f0>
 8014322:	e8df f003 	tbb	[pc, r3]
 8014326:	7f7d      	.short	0x7f7d
 8014328:	7131      	.short	0x7131
 801432a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801432e:	441d      	add	r5, r3
 8014330:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8014334:	2820      	cmp	r0, #32
 8014336:	dd13      	ble.n	8014360 <_dtoa_r+0x210>
 8014338:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801433c:	9b00      	ldr	r3, [sp, #0]
 801433e:	fa08 f800 	lsl.w	r8, r8, r0
 8014342:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8014346:	fa23 f000 	lsr.w	r0, r3, r0
 801434a:	ea48 0000 	orr.w	r0, r8, r0
 801434e:	f7ec f8b1 	bl	80004b4 <__aeabi_ui2d>
 8014352:	2301      	movs	r3, #1
 8014354:	4682      	mov	sl, r0
 8014356:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801435a:	3d01      	subs	r5, #1
 801435c:	9313      	str	r3, [sp, #76]	; 0x4c
 801435e:	e772      	b.n	8014246 <_dtoa_r+0xf6>
 8014360:	9b00      	ldr	r3, [sp, #0]
 8014362:	f1c0 0020 	rsb	r0, r0, #32
 8014366:	fa03 f000 	lsl.w	r0, r3, r0
 801436a:	e7f0      	b.n	801434e <_dtoa_r+0x1fe>
 801436c:	2301      	movs	r3, #1
 801436e:	e7b1      	b.n	80142d4 <_dtoa_r+0x184>
 8014370:	900f      	str	r0, [sp, #60]	; 0x3c
 8014372:	e7b0      	b.n	80142d6 <_dtoa_r+0x186>
 8014374:	9b05      	ldr	r3, [sp, #20]
 8014376:	eba3 030a 	sub.w	r3, r3, sl
 801437a:	9305      	str	r3, [sp, #20]
 801437c:	f1ca 0300 	rsb	r3, sl, #0
 8014380:	9307      	str	r3, [sp, #28]
 8014382:	2300      	movs	r3, #0
 8014384:	930e      	str	r3, [sp, #56]	; 0x38
 8014386:	e7bb      	b.n	8014300 <_dtoa_r+0x1b0>
 8014388:	2301      	movs	r3, #1
 801438a:	930a      	str	r3, [sp, #40]	; 0x28
 801438c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801438e:	2b00      	cmp	r3, #0
 8014390:	dd59      	ble.n	8014446 <_dtoa_r+0x2f6>
 8014392:	9302      	str	r3, [sp, #8]
 8014394:	4699      	mov	r9, r3
 8014396:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014398:	2200      	movs	r2, #0
 801439a:	6072      	str	r2, [r6, #4]
 801439c:	2204      	movs	r2, #4
 801439e:	f102 0014 	add.w	r0, r2, #20
 80143a2:	4298      	cmp	r0, r3
 80143a4:	6871      	ldr	r1, [r6, #4]
 80143a6:	d953      	bls.n	8014450 <_dtoa_r+0x300>
 80143a8:	4620      	mov	r0, r4
 80143aa:	f000 fe7d 	bl	80150a8 <_Balloc>
 80143ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80143b0:	6030      	str	r0, [r6, #0]
 80143b2:	f1b9 0f0e 	cmp.w	r9, #14
 80143b6:	f8d3 b000 	ldr.w	fp, [r3]
 80143ba:	f200 80e6 	bhi.w	801458a <_dtoa_r+0x43a>
 80143be:	2d00      	cmp	r5, #0
 80143c0:	f000 80e3 	beq.w	801458a <_dtoa_r+0x43a>
 80143c4:	ed9d 7b00 	vldr	d7, [sp]
 80143c8:	f1ba 0f00 	cmp.w	sl, #0
 80143cc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80143d0:	dd74      	ble.n	80144bc <_dtoa_r+0x36c>
 80143d2:	4a2a      	ldr	r2, [pc, #168]	; (801447c <_dtoa_r+0x32c>)
 80143d4:	f00a 030f 	and.w	r3, sl, #15
 80143d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80143dc:	ed93 7b00 	vldr	d7, [r3]
 80143e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80143e4:	06f0      	lsls	r0, r6, #27
 80143e6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80143ea:	d565      	bpl.n	80144b8 <_dtoa_r+0x368>
 80143ec:	4b24      	ldr	r3, [pc, #144]	; (8014480 <_dtoa_r+0x330>)
 80143ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80143f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80143f6:	f7ec fa01 	bl	80007fc <__aeabi_ddiv>
 80143fa:	e9cd 0100 	strd	r0, r1, [sp]
 80143fe:	f006 060f 	and.w	r6, r6, #15
 8014402:	2503      	movs	r5, #3
 8014404:	4f1e      	ldr	r7, [pc, #120]	; (8014480 <_dtoa_r+0x330>)
 8014406:	e04c      	b.n	80144a2 <_dtoa_r+0x352>
 8014408:	2301      	movs	r3, #1
 801440a:	930a      	str	r3, [sp, #40]	; 0x28
 801440c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801440e:	4453      	add	r3, sl
 8014410:	f103 0901 	add.w	r9, r3, #1
 8014414:	9302      	str	r3, [sp, #8]
 8014416:	464b      	mov	r3, r9
 8014418:	2b01      	cmp	r3, #1
 801441a:	bfb8      	it	lt
 801441c:	2301      	movlt	r3, #1
 801441e:	e7ba      	b.n	8014396 <_dtoa_r+0x246>
 8014420:	2300      	movs	r3, #0
 8014422:	e7b2      	b.n	801438a <_dtoa_r+0x23a>
 8014424:	2300      	movs	r3, #0
 8014426:	e7f0      	b.n	801440a <_dtoa_r+0x2ba>
 8014428:	2501      	movs	r5, #1
 801442a:	2300      	movs	r3, #0
 801442c:	9306      	str	r3, [sp, #24]
 801442e:	950a      	str	r5, [sp, #40]	; 0x28
 8014430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014434:	9302      	str	r3, [sp, #8]
 8014436:	4699      	mov	r9, r3
 8014438:	2200      	movs	r2, #0
 801443a:	2312      	movs	r3, #18
 801443c:	920b      	str	r2, [sp, #44]	; 0x2c
 801443e:	e7aa      	b.n	8014396 <_dtoa_r+0x246>
 8014440:	2301      	movs	r3, #1
 8014442:	930a      	str	r3, [sp, #40]	; 0x28
 8014444:	e7f4      	b.n	8014430 <_dtoa_r+0x2e0>
 8014446:	2301      	movs	r3, #1
 8014448:	9302      	str	r3, [sp, #8]
 801444a:	4699      	mov	r9, r3
 801444c:	461a      	mov	r2, r3
 801444e:	e7f5      	b.n	801443c <_dtoa_r+0x2ec>
 8014450:	3101      	adds	r1, #1
 8014452:	6071      	str	r1, [r6, #4]
 8014454:	0052      	lsls	r2, r2, #1
 8014456:	e7a2      	b.n	801439e <_dtoa_r+0x24e>
 8014458:	636f4361 	.word	0x636f4361
 801445c:	3fd287a7 	.word	0x3fd287a7
 8014460:	8b60c8b3 	.word	0x8b60c8b3
 8014464:	3fc68a28 	.word	0x3fc68a28
 8014468:	509f79fb 	.word	0x509f79fb
 801446c:	3fd34413 	.word	0x3fd34413
 8014470:	7ff00000 	.word	0x7ff00000
 8014474:	080191e5 	.word	0x080191e5
 8014478:	3ff80000 	.word	0x3ff80000
 801447c:	080192a0 	.word	0x080192a0
 8014480:	08019278 	.word	0x08019278
 8014484:	08019211 	.word	0x08019211
 8014488:	07f1      	lsls	r1, r6, #31
 801448a:	d508      	bpl.n	801449e <_dtoa_r+0x34e>
 801448c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014490:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014494:	f7ec f888 	bl	80005a8 <__aeabi_dmul>
 8014498:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801449c:	3501      	adds	r5, #1
 801449e:	1076      	asrs	r6, r6, #1
 80144a0:	3708      	adds	r7, #8
 80144a2:	2e00      	cmp	r6, #0
 80144a4:	d1f0      	bne.n	8014488 <_dtoa_r+0x338>
 80144a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80144aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80144ae:	f7ec f9a5 	bl	80007fc <__aeabi_ddiv>
 80144b2:	e9cd 0100 	strd	r0, r1, [sp]
 80144b6:	e01a      	b.n	80144ee <_dtoa_r+0x39e>
 80144b8:	2502      	movs	r5, #2
 80144ba:	e7a3      	b.n	8014404 <_dtoa_r+0x2b4>
 80144bc:	f000 80a0 	beq.w	8014600 <_dtoa_r+0x4b0>
 80144c0:	f1ca 0600 	rsb	r6, sl, #0
 80144c4:	4b9f      	ldr	r3, [pc, #636]	; (8014744 <_dtoa_r+0x5f4>)
 80144c6:	4fa0      	ldr	r7, [pc, #640]	; (8014748 <_dtoa_r+0x5f8>)
 80144c8:	f006 020f 	and.w	r2, r6, #15
 80144cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80144d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80144d8:	f7ec f866 	bl	80005a8 <__aeabi_dmul>
 80144dc:	e9cd 0100 	strd	r0, r1, [sp]
 80144e0:	1136      	asrs	r6, r6, #4
 80144e2:	2300      	movs	r3, #0
 80144e4:	2502      	movs	r5, #2
 80144e6:	2e00      	cmp	r6, #0
 80144e8:	d17f      	bne.n	80145ea <_dtoa_r+0x49a>
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d1e1      	bne.n	80144b2 <_dtoa_r+0x362>
 80144ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	f000 8087 	beq.w	8014604 <_dtoa_r+0x4b4>
 80144f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80144fa:	2200      	movs	r2, #0
 80144fc:	4b93      	ldr	r3, [pc, #588]	; (801474c <_dtoa_r+0x5fc>)
 80144fe:	4630      	mov	r0, r6
 8014500:	4639      	mov	r1, r7
 8014502:	f7ec fac3 	bl	8000a8c <__aeabi_dcmplt>
 8014506:	2800      	cmp	r0, #0
 8014508:	d07c      	beq.n	8014604 <_dtoa_r+0x4b4>
 801450a:	f1b9 0f00 	cmp.w	r9, #0
 801450e:	d079      	beq.n	8014604 <_dtoa_r+0x4b4>
 8014510:	9b02      	ldr	r3, [sp, #8]
 8014512:	2b00      	cmp	r3, #0
 8014514:	dd35      	ble.n	8014582 <_dtoa_r+0x432>
 8014516:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801451a:	9308      	str	r3, [sp, #32]
 801451c:	4639      	mov	r1, r7
 801451e:	2200      	movs	r2, #0
 8014520:	4b8b      	ldr	r3, [pc, #556]	; (8014750 <_dtoa_r+0x600>)
 8014522:	4630      	mov	r0, r6
 8014524:	f7ec f840 	bl	80005a8 <__aeabi_dmul>
 8014528:	e9cd 0100 	strd	r0, r1, [sp]
 801452c:	9f02      	ldr	r7, [sp, #8]
 801452e:	3501      	adds	r5, #1
 8014530:	4628      	mov	r0, r5
 8014532:	f7eb ffcf 	bl	80004d4 <__aeabi_i2d>
 8014536:	e9dd 2300 	ldrd	r2, r3, [sp]
 801453a:	f7ec f835 	bl	80005a8 <__aeabi_dmul>
 801453e:	2200      	movs	r2, #0
 8014540:	4b84      	ldr	r3, [pc, #528]	; (8014754 <_dtoa_r+0x604>)
 8014542:	f7eb fe7b 	bl	800023c <__adddf3>
 8014546:	4605      	mov	r5, r0
 8014548:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801454c:	2f00      	cmp	r7, #0
 801454e:	d15d      	bne.n	801460c <_dtoa_r+0x4bc>
 8014550:	2200      	movs	r2, #0
 8014552:	4b81      	ldr	r3, [pc, #516]	; (8014758 <_dtoa_r+0x608>)
 8014554:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014558:	f7eb fe6e 	bl	8000238 <__aeabi_dsub>
 801455c:	462a      	mov	r2, r5
 801455e:	4633      	mov	r3, r6
 8014560:	e9cd 0100 	strd	r0, r1, [sp]
 8014564:	f7ec fab0 	bl	8000ac8 <__aeabi_dcmpgt>
 8014568:	2800      	cmp	r0, #0
 801456a:	f040 8288 	bne.w	8014a7e <_dtoa_r+0x92e>
 801456e:	462a      	mov	r2, r5
 8014570:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014574:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014578:	f7ec fa88 	bl	8000a8c <__aeabi_dcmplt>
 801457c:	2800      	cmp	r0, #0
 801457e:	f040 827c 	bne.w	8014a7a <_dtoa_r+0x92a>
 8014582:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014586:	e9cd 2300 	strd	r2, r3, [sp]
 801458a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801458c:	2b00      	cmp	r3, #0
 801458e:	f2c0 8150 	blt.w	8014832 <_dtoa_r+0x6e2>
 8014592:	f1ba 0f0e 	cmp.w	sl, #14
 8014596:	f300 814c 	bgt.w	8014832 <_dtoa_r+0x6e2>
 801459a:	4b6a      	ldr	r3, [pc, #424]	; (8014744 <_dtoa_r+0x5f4>)
 801459c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80145a0:	ed93 7b00 	vldr	d7, [r3]
 80145a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80145ac:	f280 80d8 	bge.w	8014760 <_dtoa_r+0x610>
 80145b0:	f1b9 0f00 	cmp.w	r9, #0
 80145b4:	f300 80d4 	bgt.w	8014760 <_dtoa_r+0x610>
 80145b8:	f040 825e 	bne.w	8014a78 <_dtoa_r+0x928>
 80145bc:	2200      	movs	r2, #0
 80145be:	4b66      	ldr	r3, [pc, #408]	; (8014758 <_dtoa_r+0x608>)
 80145c0:	ec51 0b17 	vmov	r0, r1, d7
 80145c4:	f7eb fff0 	bl	80005a8 <__aeabi_dmul>
 80145c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80145cc:	f7ec fa72 	bl	8000ab4 <__aeabi_dcmpge>
 80145d0:	464f      	mov	r7, r9
 80145d2:	464e      	mov	r6, r9
 80145d4:	2800      	cmp	r0, #0
 80145d6:	f040 8234 	bne.w	8014a42 <_dtoa_r+0x8f2>
 80145da:	2331      	movs	r3, #49	; 0x31
 80145dc:	f10b 0501 	add.w	r5, fp, #1
 80145e0:	f88b 3000 	strb.w	r3, [fp]
 80145e4:	f10a 0a01 	add.w	sl, sl, #1
 80145e8:	e22f      	b.n	8014a4a <_dtoa_r+0x8fa>
 80145ea:	07f2      	lsls	r2, r6, #31
 80145ec:	d505      	bpl.n	80145fa <_dtoa_r+0x4aa>
 80145ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80145f2:	f7eb ffd9 	bl	80005a8 <__aeabi_dmul>
 80145f6:	3501      	adds	r5, #1
 80145f8:	2301      	movs	r3, #1
 80145fa:	1076      	asrs	r6, r6, #1
 80145fc:	3708      	adds	r7, #8
 80145fe:	e772      	b.n	80144e6 <_dtoa_r+0x396>
 8014600:	2502      	movs	r5, #2
 8014602:	e774      	b.n	80144ee <_dtoa_r+0x39e>
 8014604:	f8cd a020 	str.w	sl, [sp, #32]
 8014608:	464f      	mov	r7, r9
 801460a:	e791      	b.n	8014530 <_dtoa_r+0x3e0>
 801460c:	4b4d      	ldr	r3, [pc, #308]	; (8014744 <_dtoa_r+0x5f4>)
 801460e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014612:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8014616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014618:	2b00      	cmp	r3, #0
 801461a:	d047      	beq.n	80146ac <_dtoa_r+0x55c>
 801461c:	4602      	mov	r2, r0
 801461e:	460b      	mov	r3, r1
 8014620:	2000      	movs	r0, #0
 8014622:	494e      	ldr	r1, [pc, #312]	; (801475c <_dtoa_r+0x60c>)
 8014624:	f7ec f8ea 	bl	80007fc <__aeabi_ddiv>
 8014628:	462a      	mov	r2, r5
 801462a:	4633      	mov	r3, r6
 801462c:	f7eb fe04 	bl	8000238 <__aeabi_dsub>
 8014630:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014634:	465d      	mov	r5, fp
 8014636:	e9dd 0100 	ldrd	r0, r1, [sp]
 801463a:	f7ec fa65 	bl	8000b08 <__aeabi_d2iz>
 801463e:	4606      	mov	r6, r0
 8014640:	f7eb ff48 	bl	80004d4 <__aeabi_i2d>
 8014644:	4602      	mov	r2, r0
 8014646:	460b      	mov	r3, r1
 8014648:	e9dd 0100 	ldrd	r0, r1, [sp]
 801464c:	f7eb fdf4 	bl	8000238 <__aeabi_dsub>
 8014650:	3630      	adds	r6, #48	; 0x30
 8014652:	f805 6b01 	strb.w	r6, [r5], #1
 8014656:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801465a:	e9cd 0100 	strd	r0, r1, [sp]
 801465e:	f7ec fa15 	bl	8000a8c <__aeabi_dcmplt>
 8014662:	2800      	cmp	r0, #0
 8014664:	d163      	bne.n	801472e <_dtoa_r+0x5de>
 8014666:	e9dd 2300 	ldrd	r2, r3, [sp]
 801466a:	2000      	movs	r0, #0
 801466c:	4937      	ldr	r1, [pc, #220]	; (801474c <_dtoa_r+0x5fc>)
 801466e:	f7eb fde3 	bl	8000238 <__aeabi_dsub>
 8014672:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014676:	f7ec fa09 	bl	8000a8c <__aeabi_dcmplt>
 801467a:	2800      	cmp	r0, #0
 801467c:	f040 80b7 	bne.w	80147ee <_dtoa_r+0x69e>
 8014680:	eba5 030b 	sub.w	r3, r5, fp
 8014684:	429f      	cmp	r7, r3
 8014686:	f77f af7c 	ble.w	8014582 <_dtoa_r+0x432>
 801468a:	2200      	movs	r2, #0
 801468c:	4b30      	ldr	r3, [pc, #192]	; (8014750 <_dtoa_r+0x600>)
 801468e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014692:	f7eb ff89 	bl	80005a8 <__aeabi_dmul>
 8014696:	2200      	movs	r2, #0
 8014698:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801469c:	4b2c      	ldr	r3, [pc, #176]	; (8014750 <_dtoa_r+0x600>)
 801469e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80146a2:	f7eb ff81 	bl	80005a8 <__aeabi_dmul>
 80146a6:	e9cd 0100 	strd	r0, r1, [sp]
 80146aa:	e7c4      	b.n	8014636 <_dtoa_r+0x4e6>
 80146ac:	462a      	mov	r2, r5
 80146ae:	4633      	mov	r3, r6
 80146b0:	f7eb ff7a 	bl	80005a8 <__aeabi_dmul>
 80146b4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80146b8:	eb0b 0507 	add.w	r5, fp, r7
 80146bc:	465e      	mov	r6, fp
 80146be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80146c2:	f7ec fa21 	bl	8000b08 <__aeabi_d2iz>
 80146c6:	4607      	mov	r7, r0
 80146c8:	f7eb ff04 	bl	80004d4 <__aeabi_i2d>
 80146cc:	3730      	adds	r7, #48	; 0x30
 80146ce:	4602      	mov	r2, r0
 80146d0:	460b      	mov	r3, r1
 80146d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80146d6:	f7eb fdaf 	bl	8000238 <__aeabi_dsub>
 80146da:	f806 7b01 	strb.w	r7, [r6], #1
 80146de:	42ae      	cmp	r6, r5
 80146e0:	e9cd 0100 	strd	r0, r1, [sp]
 80146e4:	f04f 0200 	mov.w	r2, #0
 80146e8:	d126      	bne.n	8014738 <_dtoa_r+0x5e8>
 80146ea:	4b1c      	ldr	r3, [pc, #112]	; (801475c <_dtoa_r+0x60c>)
 80146ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80146f0:	f7eb fda4 	bl	800023c <__adddf3>
 80146f4:	4602      	mov	r2, r0
 80146f6:	460b      	mov	r3, r1
 80146f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80146fc:	f7ec f9e4 	bl	8000ac8 <__aeabi_dcmpgt>
 8014700:	2800      	cmp	r0, #0
 8014702:	d174      	bne.n	80147ee <_dtoa_r+0x69e>
 8014704:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014708:	2000      	movs	r0, #0
 801470a:	4914      	ldr	r1, [pc, #80]	; (801475c <_dtoa_r+0x60c>)
 801470c:	f7eb fd94 	bl	8000238 <__aeabi_dsub>
 8014710:	4602      	mov	r2, r0
 8014712:	460b      	mov	r3, r1
 8014714:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014718:	f7ec f9b8 	bl	8000a8c <__aeabi_dcmplt>
 801471c:	2800      	cmp	r0, #0
 801471e:	f43f af30 	beq.w	8014582 <_dtoa_r+0x432>
 8014722:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014726:	2b30      	cmp	r3, #48	; 0x30
 8014728:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801472c:	d002      	beq.n	8014734 <_dtoa_r+0x5e4>
 801472e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014732:	e04a      	b.n	80147ca <_dtoa_r+0x67a>
 8014734:	4615      	mov	r5, r2
 8014736:	e7f4      	b.n	8014722 <_dtoa_r+0x5d2>
 8014738:	4b05      	ldr	r3, [pc, #20]	; (8014750 <_dtoa_r+0x600>)
 801473a:	f7eb ff35 	bl	80005a8 <__aeabi_dmul>
 801473e:	e9cd 0100 	strd	r0, r1, [sp]
 8014742:	e7bc      	b.n	80146be <_dtoa_r+0x56e>
 8014744:	080192a0 	.word	0x080192a0
 8014748:	08019278 	.word	0x08019278
 801474c:	3ff00000 	.word	0x3ff00000
 8014750:	40240000 	.word	0x40240000
 8014754:	401c0000 	.word	0x401c0000
 8014758:	40140000 	.word	0x40140000
 801475c:	3fe00000 	.word	0x3fe00000
 8014760:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014764:	465d      	mov	r5, fp
 8014766:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801476a:	4630      	mov	r0, r6
 801476c:	4639      	mov	r1, r7
 801476e:	f7ec f845 	bl	80007fc <__aeabi_ddiv>
 8014772:	f7ec f9c9 	bl	8000b08 <__aeabi_d2iz>
 8014776:	4680      	mov	r8, r0
 8014778:	f7eb feac 	bl	80004d4 <__aeabi_i2d>
 801477c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014780:	f7eb ff12 	bl	80005a8 <__aeabi_dmul>
 8014784:	4602      	mov	r2, r0
 8014786:	460b      	mov	r3, r1
 8014788:	4630      	mov	r0, r6
 801478a:	4639      	mov	r1, r7
 801478c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8014790:	f7eb fd52 	bl	8000238 <__aeabi_dsub>
 8014794:	f805 6b01 	strb.w	r6, [r5], #1
 8014798:	eba5 060b 	sub.w	r6, r5, fp
 801479c:	45b1      	cmp	r9, r6
 801479e:	4602      	mov	r2, r0
 80147a0:	460b      	mov	r3, r1
 80147a2:	d139      	bne.n	8014818 <_dtoa_r+0x6c8>
 80147a4:	f7eb fd4a 	bl	800023c <__adddf3>
 80147a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80147ac:	4606      	mov	r6, r0
 80147ae:	460f      	mov	r7, r1
 80147b0:	f7ec f98a 	bl	8000ac8 <__aeabi_dcmpgt>
 80147b4:	b9c8      	cbnz	r0, 80147ea <_dtoa_r+0x69a>
 80147b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80147ba:	4630      	mov	r0, r6
 80147bc:	4639      	mov	r1, r7
 80147be:	f7ec f95b 	bl	8000a78 <__aeabi_dcmpeq>
 80147c2:	b110      	cbz	r0, 80147ca <_dtoa_r+0x67a>
 80147c4:	f018 0f01 	tst.w	r8, #1
 80147c8:	d10f      	bne.n	80147ea <_dtoa_r+0x69a>
 80147ca:	9904      	ldr	r1, [sp, #16]
 80147cc:	4620      	mov	r0, r4
 80147ce:	f000 fc9f 	bl	8015110 <_Bfree>
 80147d2:	2300      	movs	r3, #0
 80147d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80147d6:	702b      	strb	r3, [r5, #0]
 80147d8:	f10a 0301 	add.w	r3, sl, #1
 80147dc:	6013      	str	r3, [r2, #0]
 80147de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	f000 8241 	beq.w	8014c68 <_dtoa_r+0xb18>
 80147e6:	601d      	str	r5, [r3, #0]
 80147e8:	e23e      	b.n	8014c68 <_dtoa_r+0xb18>
 80147ea:	f8cd a020 	str.w	sl, [sp, #32]
 80147ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80147f2:	2a39      	cmp	r2, #57	; 0x39
 80147f4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80147f8:	d108      	bne.n	801480c <_dtoa_r+0x6bc>
 80147fa:	459b      	cmp	fp, r3
 80147fc:	d10a      	bne.n	8014814 <_dtoa_r+0x6c4>
 80147fe:	9b08      	ldr	r3, [sp, #32]
 8014800:	3301      	adds	r3, #1
 8014802:	9308      	str	r3, [sp, #32]
 8014804:	2330      	movs	r3, #48	; 0x30
 8014806:	f88b 3000 	strb.w	r3, [fp]
 801480a:	465b      	mov	r3, fp
 801480c:	781a      	ldrb	r2, [r3, #0]
 801480e:	3201      	adds	r2, #1
 8014810:	701a      	strb	r2, [r3, #0]
 8014812:	e78c      	b.n	801472e <_dtoa_r+0x5de>
 8014814:	461d      	mov	r5, r3
 8014816:	e7ea      	b.n	80147ee <_dtoa_r+0x69e>
 8014818:	2200      	movs	r2, #0
 801481a:	4b9b      	ldr	r3, [pc, #620]	; (8014a88 <_dtoa_r+0x938>)
 801481c:	f7eb fec4 	bl	80005a8 <__aeabi_dmul>
 8014820:	2200      	movs	r2, #0
 8014822:	2300      	movs	r3, #0
 8014824:	4606      	mov	r6, r0
 8014826:	460f      	mov	r7, r1
 8014828:	f7ec f926 	bl	8000a78 <__aeabi_dcmpeq>
 801482c:	2800      	cmp	r0, #0
 801482e:	d09a      	beq.n	8014766 <_dtoa_r+0x616>
 8014830:	e7cb      	b.n	80147ca <_dtoa_r+0x67a>
 8014832:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014834:	2a00      	cmp	r2, #0
 8014836:	f000 808b 	beq.w	8014950 <_dtoa_r+0x800>
 801483a:	9a06      	ldr	r2, [sp, #24]
 801483c:	2a01      	cmp	r2, #1
 801483e:	dc6e      	bgt.n	801491e <_dtoa_r+0x7ce>
 8014840:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014842:	2a00      	cmp	r2, #0
 8014844:	d067      	beq.n	8014916 <_dtoa_r+0x7c6>
 8014846:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801484a:	9f07      	ldr	r7, [sp, #28]
 801484c:	9d05      	ldr	r5, [sp, #20]
 801484e:	9a05      	ldr	r2, [sp, #20]
 8014850:	2101      	movs	r1, #1
 8014852:	441a      	add	r2, r3
 8014854:	4620      	mov	r0, r4
 8014856:	9205      	str	r2, [sp, #20]
 8014858:	4498      	add	r8, r3
 801485a:	f000 fcf9 	bl	8015250 <__i2b>
 801485e:	4606      	mov	r6, r0
 8014860:	2d00      	cmp	r5, #0
 8014862:	dd0c      	ble.n	801487e <_dtoa_r+0x72e>
 8014864:	f1b8 0f00 	cmp.w	r8, #0
 8014868:	dd09      	ble.n	801487e <_dtoa_r+0x72e>
 801486a:	4545      	cmp	r5, r8
 801486c:	9a05      	ldr	r2, [sp, #20]
 801486e:	462b      	mov	r3, r5
 8014870:	bfa8      	it	ge
 8014872:	4643      	movge	r3, r8
 8014874:	1ad2      	subs	r2, r2, r3
 8014876:	9205      	str	r2, [sp, #20]
 8014878:	1aed      	subs	r5, r5, r3
 801487a:	eba8 0803 	sub.w	r8, r8, r3
 801487e:	9b07      	ldr	r3, [sp, #28]
 8014880:	b1eb      	cbz	r3, 80148be <_dtoa_r+0x76e>
 8014882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014884:	2b00      	cmp	r3, #0
 8014886:	d067      	beq.n	8014958 <_dtoa_r+0x808>
 8014888:	b18f      	cbz	r7, 80148ae <_dtoa_r+0x75e>
 801488a:	4631      	mov	r1, r6
 801488c:	463a      	mov	r2, r7
 801488e:	4620      	mov	r0, r4
 8014890:	f000 fd7e 	bl	8015390 <__pow5mult>
 8014894:	9a04      	ldr	r2, [sp, #16]
 8014896:	4601      	mov	r1, r0
 8014898:	4606      	mov	r6, r0
 801489a:	4620      	mov	r0, r4
 801489c:	f000 fce1 	bl	8015262 <__multiply>
 80148a0:	9904      	ldr	r1, [sp, #16]
 80148a2:	9008      	str	r0, [sp, #32]
 80148a4:	4620      	mov	r0, r4
 80148a6:	f000 fc33 	bl	8015110 <_Bfree>
 80148aa:	9b08      	ldr	r3, [sp, #32]
 80148ac:	9304      	str	r3, [sp, #16]
 80148ae:	9b07      	ldr	r3, [sp, #28]
 80148b0:	1bda      	subs	r2, r3, r7
 80148b2:	d004      	beq.n	80148be <_dtoa_r+0x76e>
 80148b4:	9904      	ldr	r1, [sp, #16]
 80148b6:	4620      	mov	r0, r4
 80148b8:	f000 fd6a 	bl	8015390 <__pow5mult>
 80148bc:	9004      	str	r0, [sp, #16]
 80148be:	2101      	movs	r1, #1
 80148c0:	4620      	mov	r0, r4
 80148c2:	f000 fcc5 	bl	8015250 <__i2b>
 80148c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80148c8:	4607      	mov	r7, r0
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	f000 81d0 	beq.w	8014c70 <_dtoa_r+0xb20>
 80148d0:	461a      	mov	r2, r3
 80148d2:	4601      	mov	r1, r0
 80148d4:	4620      	mov	r0, r4
 80148d6:	f000 fd5b 	bl	8015390 <__pow5mult>
 80148da:	9b06      	ldr	r3, [sp, #24]
 80148dc:	2b01      	cmp	r3, #1
 80148de:	4607      	mov	r7, r0
 80148e0:	dc40      	bgt.n	8014964 <_dtoa_r+0x814>
 80148e2:	9b00      	ldr	r3, [sp, #0]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d139      	bne.n	801495c <_dtoa_r+0x80c>
 80148e8:	9b01      	ldr	r3, [sp, #4]
 80148ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d136      	bne.n	8014960 <_dtoa_r+0x810>
 80148f2:	9b01      	ldr	r3, [sp, #4]
 80148f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80148f8:	0d1b      	lsrs	r3, r3, #20
 80148fa:	051b      	lsls	r3, r3, #20
 80148fc:	b12b      	cbz	r3, 801490a <_dtoa_r+0x7ba>
 80148fe:	9b05      	ldr	r3, [sp, #20]
 8014900:	3301      	adds	r3, #1
 8014902:	9305      	str	r3, [sp, #20]
 8014904:	f108 0801 	add.w	r8, r8, #1
 8014908:	2301      	movs	r3, #1
 801490a:	9307      	str	r3, [sp, #28]
 801490c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801490e:	2b00      	cmp	r3, #0
 8014910:	d12a      	bne.n	8014968 <_dtoa_r+0x818>
 8014912:	2001      	movs	r0, #1
 8014914:	e030      	b.n	8014978 <_dtoa_r+0x828>
 8014916:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014918:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801491c:	e795      	b.n	801484a <_dtoa_r+0x6fa>
 801491e:	9b07      	ldr	r3, [sp, #28]
 8014920:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8014924:	42bb      	cmp	r3, r7
 8014926:	bfbf      	itttt	lt
 8014928:	9b07      	ldrlt	r3, [sp, #28]
 801492a:	9707      	strlt	r7, [sp, #28]
 801492c:	1afa      	sublt	r2, r7, r3
 801492e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8014930:	bfbb      	ittet	lt
 8014932:	189b      	addlt	r3, r3, r2
 8014934:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014936:	1bdf      	subge	r7, r3, r7
 8014938:	2700      	movlt	r7, #0
 801493a:	f1b9 0f00 	cmp.w	r9, #0
 801493e:	bfb5      	itete	lt
 8014940:	9b05      	ldrlt	r3, [sp, #20]
 8014942:	9d05      	ldrge	r5, [sp, #20]
 8014944:	eba3 0509 	sublt.w	r5, r3, r9
 8014948:	464b      	movge	r3, r9
 801494a:	bfb8      	it	lt
 801494c:	2300      	movlt	r3, #0
 801494e:	e77e      	b.n	801484e <_dtoa_r+0x6fe>
 8014950:	9f07      	ldr	r7, [sp, #28]
 8014952:	9d05      	ldr	r5, [sp, #20]
 8014954:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8014956:	e783      	b.n	8014860 <_dtoa_r+0x710>
 8014958:	9a07      	ldr	r2, [sp, #28]
 801495a:	e7ab      	b.n	80148b4 <_dtoa_r+0x764>
 801495c:	2300      	movs	r3, #0
 801495e:	e7d4      	b.n	801490a <_dtoa_r+0x7ba>
 8014960:	9b00      	ldr	r3, [sp, #0]
 8014962:	e7d2      	b.n	801490a <_dtoa_r+0x7ba>
 8014964:	2300      	movs	r3, #0
 8014966:	9307      	str	r3, [sp, #28]
 8014968:	693b      	ldr	r3, [r7, #16]
 801496a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801496e:	6918      	ldr	r0, [r3, #16]
 8014970:	f000 fc20 	bl	80151b4 <__hi0bits>
 8014974:	f1c0 0020 	rsb	r0, r0, #32
 8014978:	4440      	add	r0, r8
 801497a:	f010 001f 	ands.w	r0, r0, #31
 801497e:	d047      	beq.n	8014a10 <_dtoa_r+0x8c0>
 8014980:	f1c0 0320 	rsb	r3, r0, #32
 8014984:	2b04      	cmp	r3, #4
 8014986:	dd3b      	ble.n	8014a00 <_dtoa_r+0x8b0>
 8014988:	9b05      	ldr	r3, [sp, #20]
 801498a:	f1c0 001c 	rsb	r0, r0, #28
 801498e:	4403      	add	r3, r0
 8014990:	9305      	str	r3, [sp, #20]
 8014992:	4405      	add	r5, r0
 8014994:	4480      	add	r8, r0
 8014996:	9b05      	ldr	r3, [sp, #20]
 8014998:	2b00      	cmp	r3, #0
 801499a:	dd05      	ble.n	80149a8 <_dtoa_r+0x858>
 801499c:	461a      	mov	r2, r3
 801499e:	9904      	ldr	r1, [sp, #16]
 80149a0:	4620      	mov	r0, r4
 80149a2:	f000 fd43 	bl	801542c <__lshift>
 80149a6:	9004      	str	r0, [sp, #16]
 80149a8:	f1b8 0f00 	cmp.w	r8, #0
 80149ac:	dd05      	ble.n	80149ba <_dtoa_r+0x86a>
 80149ae:	4639      	mov	r1, r7
 80149b0:	4642      	mov	r2, r8
 80149b2:	4620      	mov	r0, r4
 80149b4:	f000 fd3a 	bl	801542c <__lshift>
 80149b8:	4607      	mov	r7, r0
 80149ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80149bc:	b353      	cbz	r3, 8014a14 <_dtoa_r+0x8c4>
 80149be:	4639      	mov	r1, r7
 80149c0:	9804      	ldr	r0, [sp, #16]
 80149c2:	f000 fd87 	bl	80154d4 <__mcmp>
 80149c6:	2800      	cmp	r0, #0
 80149c8:	da24      	bge.n	8014a14 <_dtoa_r+0x8c4>
 80149ca:	2300      	movs	r3, #0
 80149cc:	220a      	movs	r2, #10
 80149ce:	9904      	ldr	r1, [sp, #16]
 80149d0:	4620      	mov	r0, r4
 80149d2:	f000 fbb4 	bl	801513e <__multadd>
 80149d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149d8:	9004      	str	r0, [sp, #16]
 80149da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80149de:	2b00      	cmp	r3, #0
 80149e0:	f000 814d 	beq.w	8014c7e <_dtoa_r+0xb2e>
 80149e4:	2300      	movs	r3, #0
 80149e6:	4631      	mov	r1, r6
 80149e8:	220a      	movs	r2, #10
 80149ea:	4620      	mov	r0, r4
 80149ec:	f000 fba7 	bl	801513e <__multadd>
 80149f0:	9b02      	ldr	r3, [sp, #8]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	4606      	mov	r6, r0
 80149f6:	dc4f      	bgt.n	8014a98 <_dtoa_r+0x948>
 80149f8:	9b06      	ldr	r3, [sp, #24]
 80149fa:	2b02      	cmp	r3, #2
 80149fc:	dd4c      	ble.n	8014a98 <_dtoa_r+0x948>
 80149fe:	e011      	b.n	8014a24 <_dtoa_r+0x8d4>
 8014a00:	d0c9      	beq.n	8014996 <_dtoa_r+0x846>
 8014a02:	9a05      	ldr	r2, [sp, #20]
 8014a04:	331c      	adds	r3, #28
 8014a06:	441a      	add	r2, r3
 8014a08:	9205      	str	r2, [sp, #20]
 8014a0a:	441d      	add	r5, r3
 8014a0c:	4498      	add	r8, r3
 8014a0e:	e7c2      	b.n	8014996 <_dtoa_r+0x846>
 8014a10:	4603      	mov	r3, r0
 8014a12:	e7f6      	b.n	8014a02 <_dtoa_r+0x8b2>
 8014a14:	f1b9 0f00 	cmp.w	r9, #0
 8014a18:	dc38      	bgt.n	8014a8c <_dtoa_r+0x93c>
 8014a1a:	9b06      	ldr	r3, [sp, #24]
 8014a1c:	2b02      	cmp	r3, #2
 8014a1e:	dd35      	ble.n	8014a8c <_dtoa_r+0x93c>
 8014a20:	f8cd 9008 	str.w	r9, [sp, #8]
 8014a24:	9b02      	ldr	r3, [sp, #8]
 8014a26:	b963      	cbnz	r3, 8014a42 <_dtoa_r+0x8f2>
 8014a28:	4639      	mov	r1, r7
 8014a2a:	2205      	movs	r2, #5
 8014a2c:	4620      	mov	r0, r4
 8014a2e:	f000 fb86 	bl	801513e <__multadd>
 8014a32:	4601      	mov	r1, r0
 8014a34:	4607      	mov	r7, r0
 8014a36:	9804      	ldr	r0, [sp, #16]
 8014a38:	f000 fd4c 	bl	80154d4 <__mcmp>
 8014a3c:	2800      	cmp	r0, #0
 8014a3e:	f73f adcc 	bgt.w	80145da <_dtoa_r+0x48a>
 8014a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014a44:	465d      	mov	r5, fp
 8014a46:	ea6f 0a03 	mvn.w	sl, r3
 8014a4a:	f04f 0900 	mov.w	r9, #0
 8014a4e:	4639      	mov	r1, r7
 8014a50:	4620      	mov	r0, r4
 8014a52:	f000 fb5d 	bl	8015110 <_Bfree>
 8014a56:	2e00      	cmp	r6, #0
 8014a58:	f43f aeb7 	beq.w	80147ca <_dtoa_r+0x67a>
 8014a5c:	f1b9 0f00 	cmp.w	r9, #0
 8014a60:	d005      	beq.n	8014a6e <_dtoa_r+0x91e>
 8014a62:	45b1      	cmp	r9, r6
 8014a64:	d003      	beq.n	8014a6e <_dtoa_r+0x91e>
 8014a66:	4649      	mov	r1, r9
 8014a68:	4620      	mov	r0, r4
 8014a6a:	f000 fb51 	bl	8015110 <_Bfree>
 8014a6e:	4631      	mov	r1, r6
 8014a70:	4620      	mov	r0, r4
 8014a72:	f000 fb4d 	bl	8015110 <_Bfree>
 8014a76:	e6a8      	b.n	80147ca <_dtoa_r+0x67a>
 8014a78:	2700      	movs	r7, #0
 8014a7a:	463e      	mov	r6, r7
 8014a7c:	e7e1      	b.n	8014a42 <_dtoa_r+0x8f2>
 8014a7e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014a82:	463e      	mov	r6, r7
 8014a84:	e5a9      	b.n	80145da <_dtoa_r+0x48a>
 8014a86:	bf00      	nop
 8014a88:	40240000 	.word	0x40240000
 8014a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a8e:	f8cd 9008 	str.w	r9, [sp, #8]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	f000 80fa 	beq.w	8014c8c <_dtoa_r+0xb3c>
 8014a98:	2d00      	cmp	r5, #0
 8014a9a:	dd05      	ble.n	8014aa8 <_dtoa_r+0x958>
 8014a9c:	4631      	mov	r1, r6
 8014a9e:	462a      	mov	r2, r5
 8014aa0:	4620      	mov	r0, r4
 8014aa2:	f000 fcc3 	bl	801542c <__lshift>
 8014aa6:	4606      	mov	r6, r0
 8014aa8:	9b07      	ldr	r3, [sp, #28]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d04c      	beq.n	8014b48 <_dtoa_r+0x9f8>
 8014aae:	6871      	ldr	r1, [r6, #4]
 8014ab0:	4620      	mov	r0, r4
 8014ab2:	f000 faf9 	bl	80150a8 <_Balloc>
 8014ab6:	6932      	ldr	r2, [r6, #16]
 8014ab8:	3202      	adds	r2, #2
 8014aba:	4605      	mov	r5, r0
 8014abc:	0092      	lsls	r2, r2, #2
 8014abe:	f106 010c 	add.w	r1, r6, #12
 8014ac2:	300c      	adds	r0, #12
 8014ac4:	f7fe fcb2 	bl	801342c <memcpy>
 8014ac8:	2201      	movs	r2, #1
 8014aca:	4629      	mov	r1, r5
 8014acc:	4620      	mov	r0, r4
 8014ace:	f000 fcad 	bl	801542c <__lshift>
 8014ad2:	9b00      	ldr	r3, [sp, #0]
 8014ad4:	f8cd b014 	str.w	fp, [sp, #20]
 8014ad8:	f003 0301 	and.w	r3, r3, #1
 8014adc:	46b1      	mov	r9, r6
 8014ade:	9307      	str	r3, [sp, #28]
 8014ae0:	4606      	mov	r6, r0
 8014ae2:	4639      	mov	r1, r7
 8014ae4:	9804      	ldr	r0, [sp, #16]
 8014ae6:	f7ff faa7 	bl	8014038 <quorem>
 8014aea:	4649      	mov	r1, r9
 8014aec:	4605      	mov	r5, r0
 8014aee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014af2:	9804      	ldr	r0, [sp, #16]
 8014af4:	f000 fcee 	bl	80154d4 <__mcmp>
 8014af8:	4632      	mov	r2, r6
 8014afa:	9000      	str	r0, [sp, #0]
 8014afc:	4639      	mov	r1, r7
 8014afe:	4620      	mov	r0, r4
 8014b00:	f000 fd02 	bl	8015508 <__mdiff>
 8014b04:	68c3      	ldr	r3, [r0, #12]
 8014b06:	4602      	mov	r2, r0
 8014b08:	bb03      	cbnz	r3, 8014b4c <_dtoa_r+0x9fc>
 8014b0a:	4601      	mov	r1, r0
 8014b0c:	9008      	str	r0, [sp, #32]
 8014b0e:	9804      	ldr	r0, [sp, #16]
 8014b10:	f000 fce0 	bl	80154d4 <__mcmp>
 8014b14:	9a08      	ldr	r2, [sp, #32]
 8014b16:	4603      	mov	r3, r0
 8014b18:	4611      	mov	r1, r2
 8014b1a:	4620      	mov	r0, r4
 8014b1c:	9308      	str	r3, [sp, #32]
 8014b1e:	f000 faf7 	bl	8015110 <_Bfree>
 8014b22:	9b08      	ldr	r3, [sp, #32]
 8014b24:	b9a3      	cbnz	r3, 8014b50 <_dtoa_r+0xa00>
 8014b26:	9a06      	ldr	r2, [sp, #24]
 8014b28:	b992      	cbnz	r2, 8014b50 <_dtoa_r+0xa00>
 8014b2a:	9a07      	ldr	r2, [sp, #28]
 8014b2c:	b982      	cbnz	r2, 8014b50 <_dtoa_r+0xa00>
 8014b2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014b32:	d029      	beq.n	8014b88 <_dtoa_r+0xa38>
 8014b34:	9b00      	ldr	r3, [sp, #0]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	dd01      	ble.n	8014b3e <_dtoa_r+0x9ee>
 8014b3a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8014b3e:	9b05      	ldr	r3, [sp, #20]
 8014b40:	1c5d      	adds	r5, r3, #1
 8014b42:	f883 8000 	strb.w	r8, [r3]
 8014b46:	e782      	b.n	8014a4e <_dtoa_r+0x8fe>
 8014b48:	4630      	mov	r0, r6
 8014b4a:	e7c2      	b.n	8014ad2 <_dtoa_r+0x982>
 8014b4c:	2301      	movs	r3, #1
 8014b4e:	e7e3      	b.n	8014b18 <_dtoa_r+0x9c8>
 8014b50:	9a00      	ldr	r2, [sp, #0]
 8014b52:	2a00      	cmp	r2, #0
 8014b54:	db04      	blt.n	8014b60 <_dtoa_r+0xa10>
 8014b56:	d125      	bne.n	8014ba4 <_dtoa_r+0xa54>
 8014b58:	9a06      	ldr	r2, [sp, #24]
 8014b5a:	bb1a      	cbnz	r2, 8014ba4 <_dtoa_r+0xa54>
 8014b5c:	9a07      	ldr	r2, [sp, #28]
 8014b5e:	bb0a      	cbnz	r2, 8014ba4 <_dtoa_r+0xa54>
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	ddec      	ble.n	8014b3e <_dtoa_r+0x9ee>
 8014b64:	2201      	movs	r2, #1
 8014b66:	9904      	ldr	r1, [sp, #16]
 8014b68:	4620      	mov	r0, r4
 8014b6a:	f000 fc5f 	bl	801542c <__lshift>
 8014b6e:	4639      	mov	r1, r7
 8014b70:	9004      	str	r0, [sp, #16]
 8014b72:	f000 fcaf 	bl	80154d4 <__mcmp>
 8014b76:	2800      	cmp	r0, #0
 8014b78:	dc03      	bgt.n	8014b82 <_dtoa_r+0xa32>
 8014b7a:	d1e0      	bne.n	8014b3e <_dtoa_r+0x9ee>
 8014b7c:	f018 0f01 	tst.w	r8, #1
 8014b80:	d0dd      	beq.n	8014b3e <_dtoa_r+0x9ee>
 8014b82:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014b86:	d1d8      	bne.n	8014b3a <_dtoa_r+0x9ea>
 8014b88:	9b05      	ldr	r3, [sp, #20]
 8014b8a:	9a05      	ldr	r2, [sp, #20]
 8014b8c:	1c5d      	adds	r5, r3, #1
 8014b8e:	2339      	movs	r3, #57	; 0x39
 8014b90:	7013      	strb	r3, [r2, #0]
 8014b92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014b96:	2b39      	cmp	r3, #57	; 0x39
 8014b98:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8014b9c:	d04f      	beq.n	8014c3e <_dtoa_r+0xaee>
 8014b9e:	3301      	adds	r3, #1
 8014ba0:	7013      	strb	r3, [r2, #0]
 8014ba2:	e754      	b.n	8014a4e <_dtoa_r+0x8fe>
 8014ba4:	9a05      	ldr	r2, [sp, #20]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	f102 0501 	add.w	r5, r2, #1
 8014bac:	dd06      	ble.n	8014bbc <_dtoa_r+0xa6c>
 8014bae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014bb2:	d0e9      	beq.n	8014b88 <_dtoa_r+0xa38>
 8014bb4:	f108 0801 	add.w	r8, r8, #1
 8014bb8:	9b05      	ldr	r3, [sp, #20]
 8014bba:	e7c2      	b.n	8014b42 <_dtoa_r+0x9f2>
 8014bbc:	9a02      	ldr	r2, [sp, #8]
 8014bbe:	f805 8c01 	strb.w	r8, [r5, #-1]
 8014bc2:	eba5 030b 	sub.w	r3, r5, fp
 8014bc6:	4293      	cmp	r3, r2
 8014bc8:	d021      	beq.n	8014c0e <_dtoa_r+0xabe>
 8014bca:	2300      	movs	r3, #0
 8014bcc:	220a      	movs	r2, #10
 8014bce:	9904      	ldr	r1, [sp, #16]
 8014bd0:	4620      	mov	r0, r4
 8014bd2:	f000 fab4 	bl	801513e <__multadd>
 8014bd6:	45b1      	cmp	r9, r6
 8014bd8:	9004      	str	r0, [sp, #16]
 8014bda:	f04f 0300 	mov.w	r3, #0
 8014bde:	f04f 020a 	mov.w	r2, #10
 8014be2:	4649      	mov	r1, r9
 8014be4:	4620      	mov	r0, r4
 8014be6:	d105      	bne.n	8014bf4 <_dtoa_r+0xaa4>
 8014be8:	f000 faa9 	bl	801513e <__multadd>
 8014bec:	4681      	mov	r9, r0
 8014bee:	4606      	mov	r6, r0
 8014bf0:	9505      	str	r5, [sp, #20]
 8014bf2:	e776      	b.n	8014ae2 <_dtoa_r+0x992>
 8014bf4:	f000 faa3 	bl	801513e <__multadd>
 8014bf8:	4631      	mov	r1, r6
 8014bfa:	4681      	mov	r9, r0
 8014bfc:	2300      	movs	r3, #0
 8014bfe:	220a      	movs	r2, #10
 8014c00:	4620      	mov	r0, r4
 8014c02:	f000 fa9c 	bl	801513e <__multadd>
 8014c06:	4606      	mov	r6, r0
 8014c08:	e7f2      	b.n	8014bf0 <_dtoa_r+0xaa0>
 8014c0a:	f04f 0900 	mov.w	r9, #0
 8014c0e:	2201      	movs	r2, #1
 8014c10:	9904      	ldr	r1, [sp, #16]
 8014c12:	4620      	mov	r0, r4
 8014c14:	f000 fc0a 	bl	801542c <__lshift>
 8014c18:	4639      	mov	r1, r7
 8014c1a:	9004      	str	r0, [sp, #16]
 8014c1c:	f000 fc5a 	bl	80154d4 <__mcmp>
 8014c20:	2800      	cmp	r0, #0
 8014c22:	dcb6      	bgt.n	8014b92 <_dtoa_r+0xa42>
 8014c24:	d102      	bne.n	8014c2c <_dtoa_r+0xadc>
 8014c26:	f018 0f01 	tst.w	r8, #1
 8014c2a:	d1b2      	bne.n	8014b92 <_dtoa_r+0xa42>
 8014c2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014c30:	2b30      	cmp	r3, #48	; 0x30
 8014c32:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8014c36:	f47f af0a 	bne.w	8014a4e <_dtoa_r+0x8fe>
 8014c3a:	4615      	mov	r5, r2
 8014c3c:	e7f6      	b.n	8014c2c <_dtoa_r+0xadc>
 8014c3e:	4593      	cmp	fp, r2
 8014c40:	d105      	bne.n	8014c4e <_dtoa_r+0xafe>
 8014c42:	2331      	movs	r3, #49	; 0x31
 8014c44:	f10a 0a01 	add.w	sl, sl, #1
 8014c48:	f88b 3000 	strb.w	r3, [fp]
 8014c4c:	e6ff      	b.n	8014a4e <_dtoa_r+0x8fe>
 8014c4e:	4615      	mov	r5, r2
 8014c50:	e79f      	b.n	8014b92 <_dtoa_r+0xa42>
 8014c52:	f8df b064 	ldr.w	fp, [pc, #100]	; 8014cb8 <_dtoa_r+0xb68>
 8014c56:	e007      	b.n	8014c68 <_dtoa_r+0xb18>
 8014c58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014c5a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8014cbc <_dtoa_r+0xb6c>
 8014c5e:	b11b      	cbz	r3, 8014c68 <_dtoa_r+0xb18>
 8014c60:	f10b 0308 	add.w	r3, fp, #8
 8014c64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014c66:	6013      	str	r3, [r2, #0]
 8014c68:	4658      	mov	r0, fp
 8014c6a:	b017      	add	sp, #92	; 0x5c
 8014c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c70:	9b06      	ldr	r3, [sp, #24]
 8014c72:	2b01      	cmp	r3, #1
 8014c74:	f77f ae35 	ble.w	80148e2 <_dtoa_r+0x792>
 8014c78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c7a:	9307      	str	r3, [sp, #28]
 8014c7c:	e649      	b.n	8014912 <_dtoa_r+0x7c2>
 8014c7e:	9b02      	ldr	r3, [sp, #8]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	dc03      	bgt.n	8014c8c <_dtoa_r+0xb3c>
 8014c84:	9b06      	ldr	r3, [sp, #24]
 8014c86:	2b02      	cmp	r3, #2
 8014c88:	f73f aecc 	bgt.w	8014a24 <_dtoa_r+0x8d4>
 8014c8c:	465d      	mov	r5, fp
 8014c8e:	4639      	mov	r1, r7
 8014c90:	9804      	ldr	r0, [sp, #16]
 8014c92:	f7ff f9d1 	bl	8014038 <quorem>
 8014c96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014c9a:	f805 8b01 	strb.w	r8, [r5], #1
 8014c9e:	9a02      	ldr	r2, [sp, #8]
 8014ca0:	eba5 030b 	sub.w	r3, r5, fp
 8014ca4:	429a      	cmp	r2, r3
 8014ca6:	ddb0      	ble.n	8014c0a <_dtoa_r+0xaba>
 8014ca8:	2300      	movs	r3, #0
 8014caa:	220a      	movs	r2, #10
 8014cac:	9904      	ldr	r1, [sp, #16]
 8014cae:	4620      	mov	r0, r4
 8014cb0:	f000 fa45 	bl	801513e <__multadd>
 8014cb4:	9004      	str	r0, [sp, #16]
 8014cb6:	e7ea      	b.n	8014c8e <_dtoa_r+0xb3e>
 8014cb8:	080191e4 	.word	0x080191e4
 8014cbc:	08019208 	.word	0x08019208

08014cc0 <__sflush_r>:
 8014cc0:	898a      	ldrh	r2, [r1, #12]
 8014cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cc6:	4605      	mov	r5, r0
 8014cc8:	0710      	lsls	r0, r2, #28
 8014cca:	460c      	mov	r4, r1
 8014ccc:	d458      	bmi.n	8014d80 <__sflush_r+0xc0>
 8014cce:	684b      	ldr	r3, [r1, #4]
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	dc05      	bgt.n	8014ce0 <__sflush_r+0x20>
 8014cd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	dc02      	bgt.n	8014ce0 <__sflush_r+0x20>
 8014cda:	2000      	movs	r0, #0
 8014cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ce0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014ce2:	2e00      	cmp	r6, #0
 8014ce4:	d0f9      	beq.n	8014cda <__sflush_r+0x1a>
 8014ce6:	2300      	movs	r3, #0
 8014ce8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014cec:	682f      	ldr	r7, [r5, #0]
 8014cee:	6a21      	ldr	r1, [r4, #32]
 8014cf0:	602b      	str	r3, [r5, #0]
 8014cf2:	d032      	beq.n	8014d5a <__sflush_r+0x9a>
 8014cf4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014cf6:	89a3      	ldrh	r3, [r4, #12]
 8014cf8:	075a      	lsls	r2, r3, #29
 8014cfa:	d505      	bpl.n	8014d08 <__sflush_r+0x48>
 8014cfc:	6863      	ldr	r3, [r4, #4]
 8014cfe:	1ac0      	subs	r0, r0, r3
 8014d00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014d02:	b10b      	cbz	r3, 8014d08 <__sflush_r+0x48>
 8014d04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014d06:	1ac0      	subs	r0, r0, r3
 8014d08:	2300      	movs	r3, #0
 8014d0a:	4602      	mov	r2, r0
 8014d0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014d0e:	6a21      	ldr	r1, [r4, #32]
 8014d10:	4628      	mov	r0, r5
 8014d12:	47b0      	blx	r6
 8014d14:	1c43      	adds	r3, r0, #1
 8014d16:	89a3      	ldrh	r3, [r4, #12]
 8014d18:	d106      	bne.n	8014d28 <__sflush_r+0x68>
 8014d1a:	6829      	ldr	r1, [r5, #0]
 8014d1c:	291d      	cmp	r1, #29
 8014d1e:	d848      	bhi.n	8014db2 <__sflush_r+0xf2>
 8014d20:	4a29      	ldr	r2, [pc, #164]	; (8014dc8 <__sflush_r+0x108>)
 8014d22:	40ca      	lsrs	r2, r1
 8014d24:	07d6      	lsls	r6, r2, #31
 8014d26:	d544      	bpl.n	8014db2 <__sflush_r+0xf2>
 8014d28:	2200      	movs	r2, #0
 8014d2a:	6062      	str	r2, [r4, #4]
 8014d2c:	04d9      	lsls	r1, r3, #19
 8014d2e:	6922      	ldr	r2, [r4, #16]
 8014d30:	6022      	str	r2, [r4, #0]
 8014d32:	d504      	bpl.n	8014d3e <__sflush_r+0x7e>
 8014d34:	1c42      	adds	r2, r0, #1
 8014d36:	d101      	bne.n	8014d3c <__sflush_r+0x7c>
 8014d38:	682b      	ldr	r3, [r5, #0]
 8014d3a:	b903      	cbnz	r3, 8014d3e <__sflush_r+0x7e>
 8014d3c:	6560      	str	r0, [r4, #84]	; 0x54
 8014d3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014d40:	602f      	str	r7, [r5, #0]
 8014d42:	2900      	cmp	r1, #0
 8014d44:	d0c9      	beq.n	8014cda <__sflush_r+0x1a>
 8014d46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014d4a:	4299      	cmp	r1, r3
 8014d4c:	d002      	beq.n	8014d54 <__sflush_r+0x94>
 8014d4e:	4628      	mov	r0, r5
 8014d50:	f000 fc94 	bl	801567c <_free_r>
 8014d54:	2000      	movs	r0, #0
 8014d56:	6360      	str	r0, [r4, #52]	; 0x34
 8014d58:	e7c0      	b.n	8014cdc <__sflush_r+0x1c>
 8014d5a:	2301      	movs	r3, #1
 8014d5c:	4628      	mov	r0, r5
 8014d5e:	47b0      	blx	r6
 8014d60:	1c41      	adds	r1, r0, #1
 8014d62:	d1c8      	bne.n	8014cf6 <__sflush_r+0x36>
 8014d64:	682b      	ldr	r3, [r5, #0]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d0c5      	beq.n	8014cf6 <__sflush_r+0x36>
 8014d6a:	2b1d      	cmp	r3, #29
 8014d6c:	d001      	beq.n	8014d72 <__sflush_r+0xb2>
 8014d6e:	2b16      	cmp	r3, #22
 8014d70:	d101      	bne.n	8014d76 <__sflush_r+0xb6>
 8014d72:	602f      	str	r7, [r5, #0]
 8014d74:	e7b1      	b.n	8014cda <__sflush_r+0x1a>
 8014d76:	89a3      	ldrh	r3, [r4, #12]
 8014d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d7c:	81a3      	strh	r3, [r4, #12]
 8014d7e:	e7ad      	b.n	8014cdc <__sflush_r+0x1c>
 8014d80:	690f      	ldr	r7, [r1, #16]
 8014d82:	2f00      	cmp	r7, #0
 8014d84:	d0a9      	beq.n	8014cda <__sflush_r+0x1a>
 8014d86:	0793      	lsls	r3, r2, #30
 8014d88:	680e      	ldr	r6, [r1, #0]
 8014d8a:	bf08      	it	eq
 8014d8c:	694b      	ldreq	r3, [r1, #20]
 8014d8e:	600f      	str	r7, [r1, #0]
 8014d90:	bf18      	it	ne
 8014d92:	2300      	movne	r3, #0
 8014d94:	eba6 0807 	sub.w	r8, r6, r7
 8014d98:	608b      	str	r3, [r1, #8]
 8014d9a:	f1b8 0f00 	cmp.w	r8, #0
 8014d9e:	dd9c      	ble.n	8014cda <__sflush_r+0x1a>
 8014da0:	4643      	mov	r3, r8
 8014da2:	463a      	mov	r2, r7
 8014da4:	6a21      	ldr	r1, [r4, #32]
 8014da6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014da8:	4628      	mov	r0, r5
 8014daa:	47b0      	blx	r6
 8014dac:	2800      	cmp	r0, #0
 8014dae:	dc06      	bgt.n	8014dbe <__sflush_r+0xfe>
 8014db0:	89a3      	ldrh	r3, [r4, #12]
 8014db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014db6:	81a3      	strh	r3, [r4, #12]
 8014db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014dbc:	e78e      	b.n	8014cdc <__sflush_r+0x1c>
 8014dbe:	4407      	add	r7, r0
 8014dc0:	eba8 0800 	sub.w	r8, r8, r0
 8014dc4:	e7e9      	b.n	8014d9a <__sflush_r+0xda>
 8014dc6:	bf00      	nop
 8014dc8:	20400001 	.word	0x20400001

08014dcc <_fflush_r>:
 8014dcc:	b538      	push	{r3, r4, r5, lr}
 8014dce:	690b      	ldr	r3, [r1, #16]
 8014dd0:	4605      	mov	r5, r0
 8014dd2:	460c      	mov	r4, r1
 8014dd4:	b1db      	cbz	r3, 8014e0e <_fflush_r+0x42>
 8014dd6:	b118      	cbz	r0, 8014de0 <_fflush_r+0x14>
 8014dd8:	6983      	ldr	r3, [r0, #24]
 8014dda:	b90b      	cbnz	r3, 8014de0 <_fflush_r+0x14>
 8014ddc:	f000 f860 	bl	8014ea0 <__sinit>
 8014de0:	4b0c      	ldr	r3, [pc, #48]	; (8014e14 <_fflush_r+0x48>)
 8014de2:	429c      	cmp	r4, r3
 8014de4:	d109      	bne.n	8014dfa <_fflush_r+0x2e>
 8014de6:	686c      	ldr	r4, [r5, #4]
 8014de8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014dec:	b17b      	cbz	r3, 8014e0e <_fflush_r+0x42>
 8014dee:	4621      	mov	r1, r4
 8014df0:	4628      	mov	r0, r5
 8014df2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014df6:	f7ff bf63 	b.w	8014cc0 <__sflush_r>
 8014dfa:	4b07      	ldr	r3, [pc, #28]	; (8014e18 <_fflush_r+0x4c>)
 8014dfc:	429c      	cmp	r4, r3
 8014dfe:	d101      	bne.n	8014e04 <_fflush_r+0x38>
 8014e00:	68ac      	ldr	r4, [r5, #8]
 8014e02:	e7f1      	b.n	8014de8 <_fflush_r+0x1c>
 8014e04:	4b05      	ldr	r3, [pc, #20]	; (8014e1c <_fflush_r+0x50>)
 8014e06:	429c      	cmp	r4, r3
 8014e08:	bf08      	it	eq
 8014e0a:	68ec      	ldreq	r4, [r5, #12]
 8014e0c:	e7ec      	b.n	8014de8 <_fflush_r+0x1c>
 8014e0e:	2000      	movs	r0, #0
 8014e10:	bd38      	pop	{r3, r4, r5, pc}
 8014e12:	bf00      	nop
 8014e14:	08019238 	.word	0x08019238
 8014e18:	08019258 	.word	0x08019258
 8014e1c:	08019218 	.word	0x08019218

08014e20 <std>:
 8014e20:	2300      	movs	r3, #0
 8014e22:	b510      	push	{r4, lr}
 8014e24:	4604      	mov	r4, r0
 8014e26:	e9c0 3300 	strd	r3, r3, [r0]
 8014e2a:	6083      	str	r3, [r0, #8]
 8014e2c:	8181      	strh	r1, [r0, #12]
 8014e2e:	6643      	str	r3, [r0, #100]	; 0x64
 8014e30:	81c2      	strh	r2, [r0, #14]
 8014e32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014e36:	6183      	str	r3, [r0, #24]
 8014e38:	4619      	mov	r1, r3
 8014e3a:	2208      	movs	r2, #8
 8014e3c:	305c      	adds	r0, #92	; 0x5c
 8014e3e:	f7fe fb00 	bl	8013442 <memset>
 8014e42:	4b05      	ldr	r3, [pc, #20]	; (8014e58 <std+0x38>)
 8014e44:	6263      	str	r3, [r4, #36]	; 0x24
 8014e46:	4b05      	ldr	r3, [pc, #20]	; (8014e5c <std+0x3c>)
 8014e48:	62a3      	str	r3, [r4, #40]	; 0x28
 8014e4a:	4b05      	ldr	r3, [pc, #20]	; (8014e60 <std+0x40>)
 8014e4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014e4e:	4b05      	ldr	r3, [pc, #20]	; (8014e64 <std+0x44>)
 8014e50:	6224      	str	r4, [r4, #32]
 8014e52:	6323      	str	r3, [r4, #48]	; 0x30
 8014e54:	bd10      	pop	{r4, pc}
 8014e56:	bf00      	nop
 8014e58:	08015d11 	.word	0x08015d11
 8014e5c:	08015d33 	.word	0x08015d33
 8014e60:	08015d6b 	.word	0x08015d6b
 8014e64:	08015d8f 	.word	0x08015d8f

08014e68 <_cleanup_r>:
 8014e68:	4901      	ldr	r1, [pc, #4]	; (8014e70 <_cleanup_r+0x8>)
 8014e6a:	f000 b885 	b.w	8014f78 <_fwalk_reent>
 8014e6e:	bf00      	nop
 8014e70:	08014dcd 	.word	0x08014dcd

08014e74 <__sfmoreglue>:
 8014e74:	b570      	push	{r4, r5, r6, lr}
 8014e76:	1e4a      	subs	r2, r1, #1
 8014e78:	2568      	movs	r5, #104	; 0x68
 8014e7a:	4355      	muls	r5, r2
 8014e7c:	460e      	mov	r6, r1
 8014e7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014e82:	f000 fc49 	bl	8015718 <_malloc_r>
 8014e86:	4604      	mov	r4, r0
 8014e88:	b140      	cbz	r0, 8014e9c <__sfmoreglue+0x28>
 8014e8a:	2100      	movs	r1, #0
 8014e8c:	e9c0 1600 	strd	r1, r6, [r0]
 8014e90:	300c      	adds	r0, #12
 8014e92:	60a0      	str	r0, [r4, #8]
 8014e94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014e98:	f7fe fad3 	bl	8013442 <memset>
 8014e9c:	4620      	mov	r0, r4
 8014e9e:	bd70      	pop	{r4, r5, r6, pc}

08014ea0 <__sinit>:
 8014ea0:	6983      	ldr	r3, [r0, #24]
 8014ea2:	b510      	push	{r4, lr}
 8014ea4:	4604      	mov	r4, r0
 8014ea6:	bb33      	cbnz	r3, 8014ef6 <__sinit+0x56>
 8014ea8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8014eac:	6503      	str	r3, [r0, #80]	; 0x50
 8014eae:	4b12      	ldr	r3, [pc, #72]	; (8014ef8 <__sinit+0x58>)
 8014eb0:	4a12      	ldr	r2, [pc, #72]	; (8014efc <__sinit+0x5c>)
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	6282      	str	r2, [r0, #40]	; 0x28
 8014eb6:	4298      	cmp	r0, r3
 8014eb8:	bf04      	itt	eq
 8014eba:	2301      	moveq	r3, #1
 8014ebc:	6183      	streq	r3, [r0, #24]
 8014ebe:	f000 f81f 	bl	8014f00 <__sfp>
 8014ec2:	6060      	str	r0, [r4, #4]
 8014ec4:	4620      	mov	r0, r4
 8014ec6:	f000 f81b 	bl	8014f00 <__sfp>
 8014eca:	60a0      	str	r0, [r4, #8]
 8014ecc:	4620      	mov	r0, r4
 8014ece:	f000 f817 	bl	8014f00 <__sfp>
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	60e0      	str	r0, [r4, #12]
 8014ed6:	2104      	movs	r1, #4
 8014ed8:	6860      	ldr	r0, [r4, #4]
 8014eda:	f7ff ffa1 	bl	8014e20 <std>
 8014ede:	2201      	movs	r2, #1
 8014ee0:	2109      	movs	r1, #9
 8014ee2:	68a0      	ldr	r0, [r4, #8]
 8014ee4:	f7ff ff9c 	bl	8014e20 <std>
 8014ee8:	2202      	movs	r2, #2
 8014eea:	2112      	movs	r1, #18
 8014eec:	68e0      	ldr	r0, [r4, #12]
 8014eee:	f7ff ff97 	bl	8014e20 <std>
 8014ef2:	2301      	movs	r3, #1
 8014ef4:	61a3      	str	r3, [r4, #24]
 8014ef6:	bd10      	pop	{r4, pc}
 8014ef8:	080191d0 	.word	0x080191d0
 8014efc:	08014e69 	.word	0x08014e69

08014f00 <__sfp>:
 8014f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f02:	4b1b      	ldr	r3, [pc, #108]	; (8014f70 <__sfp+0x70>)
 8014f04:	681e      	ldr	r6, [r3, #0]
 8014f06:	69b3      	ldr	r3, [r6, #24]
 8014f08:	4607      	mov	r7, r0
 8014f0a:	b913      	cbnz	r3, 8014f12 <__sfp+0x12>
 8014f0c:	4630      	mov	r0, r6
 8014f0e:	f7ff ffc7 	bl	8014ea0 <__sinit>
 8014f12:	3648      	adds	r6, #72	; 0x48
 8014f14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014f18:	3b01      	subs	r3, #1
 8014f1a:	d503      	bpl.n	8014f24 <__sfp+0x24>
 8014f1c:	6833      	ldr	r3, [r6, #0]
 8014f1e:	b133      	cbz	r3, 8014f2e <__sfp+0x2e>
 8014f20:	6836      	ldr	r6, [r6, #0]
 8014f22:	e7f7      	b.n	8014f14 <__sfp+0x14>
 8014f24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014f28:	b16d      	cbz	r5, 8014f46 <__sfp+0x46>
 8014f2a:	3468      	adds	r4, #104	; 0x68
 8014f2c:	e7f4      	b.n	8014f18 <__sfp+0x18>
 8014f2e:	2104      	movs	r1, #4
 8014f30:	4638      	mov	r0, r7
 8014f32:	f7ff ff9f 	bl	8014e74 <__sfmoreglue>
 8014f36:	6030      	str	r0, [r6, #0]
 8014f38:	2800      	cmp	r0, #0
 8014f3a:	d1f1      	bne.n	8014f20 <__sfp+0x20>
 8014f3c:	230c      	movs	r3, #12
 8014f3e:	603b      	str	r3, [r7, #0]
 8014f40:	4604      	mov	r4, r0
 8014f42:	4620      	mov	r0, r4
 8014f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f46:	4b0b      	ldr	r3, [pc, #44]	; (8014f74 <__sfp+0x74>)
 8014f48:	6665      	str	r5, [r4, #100]	; 0x64
 8014f4a:	e9c4 5500 	strd	r5, r5, [r4]
 8014f4e:	60a5      	str	r5, [r4, #8]
 8014f50:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8014f54:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8014f58:	2208      	movs	r2, #8
 8014f5a:	4629      	mov	r1, r5
 8014f5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014f60:	f7fe fa6f 	bl	8013442 <memset>
 8014f64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014f68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014f6c:	e7e9      	b.n	8014f42 <__sfp+0x42>
 8014f6e:	bf00      	nop
 8014f70:	080191d0 	.word	0x080191d0
 8014f74:	ffff0001 	.word	0xffff0001

08014f78 <_fwalk_reent>:
 8014f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f7c:	4680      	mov	r8, r0
 8014f7e:	4689      	mov	r9, r1
 8014f80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014f84:	2600      	movs	r6, #0
 8014f86:	b914      	cbnz	r4, 8014f8e <_fwalk_reent+0x16>
 8014f88:	4630      	mov	r0, r6
 8014f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f8e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8014f92:	3f01      	subs	r7, #1
 8014f94:	d501      	bpl.n	8014f9a <_fwalk_reent+0x22>
 8014f96:	6824      	ldr	r4, [r4, #0]
 8014f98:	e7f5      	b.n	8014f86 <_fwalk_reent+0xe>
 8014f9a:	89ab      	ldrh	r3, [r5, #12]
 8014f9c:	2b01      	cmp	r3, #1
 8014f9e:	d907      	bls.n	8014fb0 <_fwalk_reent+0x38>
 8014fa0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014fa4:	3301      	adds	r3, #1
 8014fa6:	d003      	beq.n	8014fb0 <_fwalk_reent+0x38>
 8014fa8:	4629      	mov	r1, r5
 8014faa:	4640      	mov	r0, r8
 8014fac:	47c8      	blx	r9
 8014fae:	4306      	orrs	r6, r0
 8014fb0:	3568      	adds	r5, #104	; 0x68
 8014fb2:	e7ee      	b.n	8014f92 <_fwalk_reent+0x1a>

08014fb4 <_localeconv_r>:
 8014fb4:	4b04      	ldr	r3, [pc, #16]	; (8014fc8 <_localeconv_r+0x14>)
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	6a18      	ldr	r0, [r3, #32]
 8014fba:	4b04      	ldr	r3, [pc, #16]	; (8014fcc <_localeconv_r+0x18>)
 8014fbc:	2800      	cmp	r0, #0
 8014fbe:	bf08      	it	eq
 8014fc0:	4618      	moveq	r0, r3
 8014fc2:	30f0      	adds	r0, #240	; 0xf0
 8014fc4:	4770      	bx	lr
 8014fc6:	bf00      	nop
 8014fc8:	20000024 	.word	0x20000024
 8014fcc:	20000088 	.word	0x20000088

08014fd0 <__swhatbuf_r>:
 8014fd0:	b570      	push	{r4, r5, r6, lr}
 8014fd2:	460e      	mov	r6, r1
 8014fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014fd8:	2900      	cmp	r1, #0
 8014fda:	b096      	sub	sp, #88	; 0x58
 8014fdc:	4614      	mov	r4, r2
 8014fde:	461d      	mov	r5, r3
 8014fe0:	da07      	bge.n	8014ff2 <__swhatbuf_r+0x22>
 8014fe2:	2300      	movs	r3, #0
 8014fe4:	602b      	str	r3, [r5, #0]
 8014fe6:	89b3      	ldrh	r3, [r6, #12]
 8014fe8:	061a      	lsls	r2, r3, #24
 8014fea:	d410      	bmi.n	801500e <__swhatbuf_r+0x3e>
 8014fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014ff0:	e00e      	b.n	8015010 <__swhatbuf_r+0x40>
 8014ff2:	466a      	mov	r2, sp
 8014ff4:	f000 fef2 	bl	8015ddc <_fstat_r>
 8014ff8:	2800      	cmp	r0, #0
 8014ffa:	dbf2      	blt.n	8014fe2 <__swhatbuf_r+0x12>
 8014ffc:	9a01      	ldr	r2, [sp, #4]
 8014ffe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015002:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015006:	425a      	negs	r2, r3
 8015008:	415a      	adcs	r2, r3
 801500a:	602a      	str	r2, [r5, #0]
 801500c:	e7ee      	b.n	8014fec <__swhatbuf_r+0x1c>
 801500e:	2340      	movs	r3, #64	; 0x40
 8015010:	2000      	movs	r0, #0
 8015012:	6023      	str	r3, [r4, #0]
 8015014:	b016      	add	sp, #88	; 0x58
 8015016:	bd70      	pop	{r4, r5, r6, pc}

08015018 <__smakebuf_r>:
 8015018:	898b      	ldrh	r3, [r1, #12]
 801501a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801501c:	079d      	lsls	r5, r3, #30
 801501e:	4606      	mov	r6, r0
 8015020:	460c      	mov	r4, r1
 8015022:	d507      	bpl.n	8015034 <__smakebuf_r+0x1c>
 8015024:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015028:	6023      	str	r3, [r4, #0]
 801502a:	6123      	str	r3, [r4, #16]
 801502c:	2301      	movs	r3, #1
 801502e:	6163      	str	r3, [r4, #20]
 8015030:	b002      	add	sp, #8
 8015032:	bd70      	pop	{r4, r5, r6, pc}
 8015034:	ab01      	add	r3, sp, #4
 8015036:	466a      	mov	r2, sp
 8015038:	f7ff ffca 	bl	8014fd0 <__swhatbuf_r>
 801503c:	9900      	ldr	r1, [sp, #0]
 801503e:	4605      	mov	r5, r0
 8015040:	4630      	mov	r0, r6
 8015042:	f000 fb69 	bl	8015718 <_malloc_r>
 8015046:	b948      	cbnz	r0, 801505c <__smakebuf_r+0x44>
 8015048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801504c:	059a      	lsls	r2, r3, #22
 801504e:	d4ef      	bmi.n	8015030 <__smakebuf_r+0x18>
 8015050:	f023 0303 	bic.w	r3, r3, #3
 8015054:	f043 0302 	orr.w	r3, r3, #2
 8015058:	81a3      	strh	r3, [r4, #12]
 801505a:	e7e3      	b.n	8015024 <__smakebuf_r+0xc>
 801505c:	4b0d      	ldr	r3, [pc, #52]	; (8015094 <__smakebuf_r+0x7c>)
 801505e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015060:	89a3      	ldrh	r3, [r4, #12]
 8015062:	6020      	str	r0, [r4, #0]
 8015064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015068:	81a3      	strh	r3, [r4, #12]
 801506a:	9b00      	ldr	r3, [sp, #0]
 801506c:	6163      	str	r3, [r4, #20]
 801506e:	9b01      	ldr	r3, [sp, #4]
 8015070:	6120      	str	r0, [r4, #16]
 8015072:	b15b      	cbz	r3, 801508c <__smakebuf_r+0x74>
 8015074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015078:	4630      	mov	r0, r6
 801507a:	f000 fec1 	bl	8015e00 <_isatty_r>
 801507e:	b128      	cbz	r0, 801508c <__smakebuf_r+0x74>
 8015080:	89a3      	ldrh	r3, [r4, #12]
 8015082:	f023 0303 	bic.w	r3, r3, #3
 8015086:	f043 0301 	orr.w	r3, r3, #1
 801508a:	81a3      	strh	r3, [r4, #12]
 801508c:	89a3      	ldrh	r3, [r4, #12]
 801508e:	431d      	orrs	r5, r3
 8015090:	81a5      	strh	r5, [r4, #12]
 8015092:	e7cd      	b.n	8015030 <__smakebuf_r+0x18>
 8015094:	08014e69 	.word	0x08014e69

08015098 <malloc>:
 8015098:	4b02      	ldr	r3, [pc, #8]	; (80150a4 <malloc+0xc>)
 801509a:	4601      	mov	r1, r0
 801509c:	6818      	ldr	r0, [r3, #0]
 801509e:	f000 bb3b 	b.w	8015718 <_malloc_r>
 80150a2:	bf00      	nop
 80150a4:	20000024 	.word	0x20000024

080150a8 <_Balloc>:
 80150a8:	b570      	push	{r4, r5, r6, lr}
 80150aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80150ac:	4604      	mov	r4, r0
 80150ae:	460e      	mov	r6, r1
 80150b0:	b93d      	cbnz	r5, 80150c2 <_Balloc+0x1a>
 80150b2:	2010      	movs	r0, #16
 80150b4:	f7ff fff0 	bl	8015098 <malloc>
 80150b8:	6260      	str	r0, [r4, #36]	; 0x24
 80150ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80150be:	6005      	str	r5, [r0, #0]
 80150c0:	60c5      	str	r5, [r0, #12]
 80150c2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80150c4:	68eb      	ldr	r3, [r5, #12]
 80150c6:	b183      	cbz	r3, 80150ea <_Balloc+0x42>
 80150c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80150ca:	68db      	ldr	r3, [r3, #12]
 80150cc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80150d0:	b9b8      	cbnz	r0, 8015102 <_Balloc+0x5a>
 80150d2:	2101      	movs	r1, #1
 80150d4:	fa01 f506 	lsl.w	r5, r1, r6
 80150d8:	1d6a      	adds	r2, r5, #5
 80150da:	0092      	lsls	r2, r2, #2
 80150dc:	4620      	mov	r0, r4
 80150de:	f000 fabf 	bl	8015660 <_calloc_r>
 80150e2:	b160      	cbz	r0, 80150fe <_Balloc+0x56>
 80150e4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80150e8:	e00e      	b.n	8015108 <_Balloc+0x60>
 80150ea:	2221      	movs	r2, #33	; 0x21
 80150ec:	2104      	movs	r1, #4
 80150ee:	4620      	mov	r0, r4
 80150f0:	f000 fab6 	bl	8015660 <_calloc_r>
 80150f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80150f6:	60e8      	str	r0, [r5, #12]
 80150f8:	68db      	ldr	r3, [r3, #12]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d1e4      	bne.n	80150c8 <_Balloc+0x20>
 80150fe:	2000      	movs	r0, #0
 8015100:	bd70      	pop	{r4, r5, r6, pc}
 8015102:	6802      	ldr	r2, [r0, #0]
 8015104:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8015108:	2300      	movs	r3, #0
 801510a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801510e:	e7f7      	b.n	8015100 <_Balloc+0x58>

08015110 <_Bfree>:
 8015110:	b570      	push	{r4, r5, r6, lr}
 8015112:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8015114:	4606      	mov	r6, r0
 8015116:	460d      	mov	r5, r1
 8015118:	b93c      	cbnz	r4, 801512a <_Bfree+0x1a>
 801511a:	2010      	movs	r0, #16
 801511c:	f7ff ffbc 	bl	8015098 <malloc>
 8015120:	6270      	str	r0, [r6, #36]	; 0x24
 8015122:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015126:	6004      	str	r4, [r0, #0]
 8015128:	60c4      	str	r4, [r0, #12]
 801512a:	b13d      	cbz	r5, 801513c <_Bfree+0x2c>
 801512c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801512e:	686a      	ldr	r2, [r5, #4]
 8015130:	68db      	ldr	r3, [r3, #12]
 8015132:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015136:	6029      	str	r1, [r5, #0]
 8015138:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801513c:	bd70      	pop	{r4, r5, r6, pc}

0801513e <__multadd>:
 801513e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015142:	690d      	ldr	r5, [r1, #16]
 8015144:	461f      	mov	r7, r3
 8015146:	4606      	mov	r6, r0
 8015148:	460c      	mov	r4, r1
 801514a:	f101 0c14 	add.w	ip, r1, #20
 801514e:	2300      	movs	r3, #0
 8015150:	f8dc 0000 	ldr.w	r0, [ip]
 8015154:	b281      	uxth	r1, r0
 8015156:	fb02 7101 	mla	r1, r2, r1, r7
 801515a:	0c0f      	lsrs	r7, r1, #16
 801515c:	0c00      	lsrs	r0, r0, #16
 801515e:	fb02 7000 	mla	r0, r2, r0, r7
 8015162:	b289      	uxth	r1, r1
 8015164:	3301      	adds	r3, #1
 8015166:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801516a:	429d      	cmp	r5, r3
 801516c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8015170:	f84c 1b04 	str.w	r1, [ip], #4
 8015174:	dcec      	bgt.n	8015150 <__multadd+0x12>
 8015176:	b1d7      	cbz	r7, 80151ae <__multadd+0x70>
 8015178:	68a3      	ldr	r3, [r4, #8]
 801517a:	42ab      	cmp	r3, r5
 801517c:	dc12      	bgt.n	80151a4 <__multadd+0x66>
 801517e:	6861      	ldr	r1, [r4, #4]
 8015180:	4630      	mov	r0, r6
 8015182:	3101      	adds	r1, #1
 8015184:	f7ff ff90 	bl	80150a8 <_Balloc>
 8015188:	6922      	ldr	r2, [r4, #16]
 801518a:	3202      	adds	r2, #2
 801518c:	f104 010c 	add.w	r1, r4, #12
 8015190:	4680      	mov	r8, r0
 8015192:	0092      	lsls	r2, r2, #2
 8015194:	300c      	adds	r0, #12
 8015196:	f7fe f949 	bl	801342c <memcpy>
 801519a:	4621      	mov	r1, r4
 801519c:	4630      	mov	r0, r6
 801519e:	f7ff ffb7 	bl	8015110 <_Bfree>
 80151a2:	4644      	mov	r4, r8
 80151a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80151a8:	3501      	adds	r5, #1
 80151aa:	615f      	str	r7, [r3, #20]
 80151ac:	6125      	str	r5, [r4, #16]
 80151ae:	4620      	mov	r0, r4
 80151b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080151b4 <__hi0bits>:
 80151b4:	0c02      	lsrs	r2, r0, #16
 80151b6:	0412      	lsls	r2, r2, #16
 80151b8:	4603      	mov	r3, r0
 80151ba:	b9b2      	cbnz	r2, 80151ea <__hi0bits+0x36>
 80151bc:	0403      	lsls	r3, r0, #16
 80151be:	2010      	movs	r0, #16
 80151c0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80151c4:	bf04      	itt	eq
 80151c6:	021b      	lsleq	r3, r3, #8
 80151c8:	3008      	addeq	r0, #8
 80151ca:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80151ce:	bf04      	itt	eq
 80151d0:	011b      	lsleq	r3, r3, #4
 80151d2:	3004      	addeq	r0, #4
 80151d4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80151d8:	bf04      	itt	eq
 80151da:	009b      	lsleq	r3, r3, #2
 80151dc:	3002      	addeq	r0, #2
 80151de:	2b00      	cmp	r3, #0
 80151e0:	db06      	blt.n	80151f0 <__hi0bits+0x3c>
 80151e2:	005b      	lsls	r3, r3, #1
 80151e4:	d503      	bpl.n	80151ee <__hi0bits+0x3a>
 80151e6:	3001      	adds	r0, #1
 80151e8:	4770      	bx	lr
 80151ea:	2000      	movs	r0, #0
 80151ec:	e7e8      	b.n	80151c0 <__hi0bits+0xc>
 80151ee:	2020      	movs	r0, #32
 80151f0:	4770      	bx	lr

080151f2 <__lo0bits>:
 80151f2:	6803      	ldr	r3, [r0, #0]
 80151f4:	f013 0207 	ands.w	r2, r3, #7
 80151f8:	4601      	mov	r1, r0
 80151fa:	d00b      	beq.n	8015214 <__lo0bits+0x22>
 80151fc:	07da      	lsls	r2, r3, #31
 80151fe:	d423      	bmi.n	8015248 <__lo0bits+0x56>
 8015200:	0798      	lsls	r0, r3, #30
 8015202:	bf49      	itett	mi
 8015204:	085b      	lsrmi	r3, r3, #1
 8015206:	089b      	lsrpl	r3, r3, #2
 8015208:	2001      	movmi	r0, #1
 801520a:	600b      	strmi	r3, [r1, #0]
 801520c:	bf5c      	itt	pl
 801520e:	600b      	strpl	r3, [r1, #0]
 8015210:	2002      	movpl	r0, #2
 8015212:	4770      	bx	lr
 8015214:	b298      	uxth	r0, r3
 8015216:	b9a8      	cbnz	r0, 8015244 <__lo0bits+0x52>
 8015218:	0c1b      	lsrs	r3, r3, #16
 801521a:	2010      	movs	r0, #16
 801521c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015220:	bf04      	itt	eq
 8015222:	0a1b      	lsreq	r3, r3, #8
 8015224:	3008      	addeq	r0, #8
 8015226:	071a      	lsls	r2, r3, #28
 8015228:	bf04      	itt	eq
 801522a:	091b      	lsreq	r3, r3, #4
 801522c:	3004      	addeq	r0, #4
 801522e:	079a      	lsls	r2, r3, #30
 8015230:	bf04      	itt	eq
 8015232:	089b      	lsreq	r3, r3, #2
 8015234:	3002      	addeq	r0, #2
 8015236:	07da      	lsls	r2, r3, #31
 8015238:	d402      	bmi.n	8015240 <__lo0bits+0x4e>
 801523a:	085b      	lsrs	r3, r3, #1
 801523c:	d006      	beq.n	801524c <__lo0bits+0x5a>
 801523e:	3001      	adds	r0, #1
 8015240:	600b      	str	r3, [r1, #0]
 8015242:	4770      	bx	lr
 8015244:	4610      	mov	r0, r2
 8015246:	e7e9      	b.n	801521c <__lo0bits+0x2a>
 8015248:	2000      	movs	r0, #0
 801524a:	4770      	bx	lr
 801524c:	2020      	movs	r0, #32
 801524e:	4770      	bx	lr

08015250 <__i2b>:
 8015250:	b510      	push	{r4, lr}
 8015252:	460c      	mov	r4, r1
 8015254:	2101      	movs	r1, #1
 8015256:	f7ff ff27 	bl	80150a8 <_Balloc>
 801525a:	2201      	movs	r2, #1
 801525c:	6144      	str	r4, [r0, #20]
 801525e:	6102      	str	r2, [r0, #16]
 8015260:	bd10      	pop	{r4, pc}

08015262 <__multiply>:
 8015262:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015266:	4614      	mov	r4, r2
 8015268:	690a      	ldr	r2, [r1, #16]
 801526a:	6923      	ldr	r3, [r4, #16]
 801526c:	429a      	cmp	r2, r3
 801526e:	bfb8      	it	lt
 8015270:	460b      	movlt	r3, r1
 8015272:	4688      	mov	r8, r1
 8015274:	bfbc      	itt	lt
 8015276:	46a0      	movlt	r8, r4
 8015278:	461c      	movlt	r4, r3
 801527a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801527e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015282:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015286:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801528a:	eb07 0609 	add.w	r6, r7, r9
 801528e:	42b3      	cmp	r3, r6
 8015290:	bfb8      	it	lt
 8015292:	3101      	addlt	r1, #1
 8015294:	f7ff ff08 	bl	80150a8 <_Balloc>
 8015298:	f100 0514 	add.w	r5, r0, #20
 801529c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80152a0:	462b      	mov	r3, r5
 80152a2:	2200      	movs	r2, #0
 80152a4:	4573      	cmp	r3, lr
 80152a6:	d316      	bcc.n	80152d6 <__multiply+0x74>
 80152a8:	f104 0214 	add.w	r2, r4, #20
 80152ac:	f108 0114 	add.w	r1, r8, #20
 80152b0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80152b4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80152b8:	9300      	str	r3, [sp, #0]
 80152ba:	9b00      	ldr	r3, [sp, #0]
 80152bc:	9201      	str	r2, [sp, #4]
 80152be:	4293      	cmp	r3, r2
 80152c0:	d80c      	bhi.n	80152dc <__multiply+0x7a>
 80152c2:	2e00      	cmp	r6, #0
 80152c4:	dd03      	ble.n	80152ce <__multiply+0x6c>
 80152c6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d05d      	beq.n	801538a <__multiply+0x128>
 80152ce:	6106      	str	r6, [r0, #16]
 80152d0:	b003      	add	sp, #12
 80152d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152d6:	f843 2b04 	str.w	r2, [r3], #4
 80152da:	e7e3      	b.n	80152a4 <__multiply+0x42>
 80152dc:	f8b2 b000 	ldrh.w	fp, [r2]
 80152e0:	f1bb 0f00 	cmp.w	fp, #0
 80152e4:	d023      	beq.n	801532e <__multiply+0xcc>
 80152e6:	4689      	mov	r9, r1
 80152e8:	46ac      	mov	ip, r5
 80152ea:	f04f 0800 	mov.w	r8, #0
 80152ee:	f859 4b04 	ldr.w	r4, [r9], #4
 80152f2:	f8dc a000 	ldr.w	sl, [ip]
 80152f6:	b2a3      	uxth	r3, r4
 80152f8:	fa1f fa8a 	uxth.w	sl, sl
 80152fc:	fb0b a303 	mla	r3, fp, r3, sl
 8015300:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015304:	f8dc 4000 	ldr.w	r4, [ip]
 8015308:	4443      	add	r3, r8
 801530a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801530e:	fb0b 840a 	mla	r4, fp, sl, r8
 8015312:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8015316:	46e2      	mov	sl, ip
 8015318:	b29b      	uxth	r3, r3
 801531a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801531e:	454f      	cmp	r7, r9
 8015320:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015324:	f84a 3b04 	str.w	r3, [sl], #4
 8015328:	d82b      	bhi.n	8015382 <__multiply+0x120>
 801532a:	f8cc 8004 	str.w	r8, [ip, #4]
 801532e:	9b01      	ldr	r3, [sp, #4]
 8015330:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8015334:	3204      	adds	r2, #4
 8015336:	f1ba 0f00 	cmp.w	sl, #0
 801533a:	d020      	beq.n	801537e <__multiply+0x11c>
 801533c:	682b      	ldr	r3, [r5, #0]
 801533e:	4689      	mov	r9, r1
 8015340:	46a8      	mov	r8, r5
 8015342:	f04f 0b00 	mov.w	fp, #0
 8015346:	f8b9 c000 	ldrh.w	ip, [r9]
 801534a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801534e:	fb0a 440c 	mla	r4, sl, ip, r4
 8015352:	445c      	add	r4, fp
 8015354:	46c4      	mov	ip, r8
 8015356:	b29b      	uxth	r3, r3
 8015358:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801535c:	f84c 3b04 	str.w	r3, [ip], #4
 8015360:	f859 3b04 	ldr.w	r3, [r9], #4
 8015364:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8015368:	0c1b      	lsrs	r3, r3, #16
 801536a:	fb0a b303 	mla	r3, sl, r3, fp
 801536e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8015372:	454f      	cmp	r7, r9
 8015374:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8015378:	d805      	bhi.n	8015386 <__multiply+0x124>
 801537a:	f8c8 3004 	str.w	r3, [r8, #4]
 801537e:	3504      	adds	r5, #4
 8015380:	e79b      	b.n	80152ba <__multiply+0x58>
 8015382:	46d4      	mov	ip, sl
 8015384:	e7b3      	b.n	80152ee <__multiply+0x8c>
 8015386:	46e0      	mov	r8, ip
 8015388:	e7dd      	b.n	8015346 <__multiply+0xe4>
 801538a:	3e01      	subs	r6, #1
 801538c:	e799      	b.n	80152c2 <__multiply+0x60>
	...

08015390 <__pow5mult>:
 8015390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015394:	4615      	mov	r5, r2
 8015396:	f012 0203 	ands.w	r2, r2, #3
 801539a:	4606      	mov	r6, r0
 801539c:	460f      	mov	r7, r1
 801539e:	d007      	beq.n	80153b0 <__pow5mult+0x20>
 80153a0:	3a01      	subs	r2, #1
 80153a2:	4c21      	ldr	r4, [pc, #132]	; (8015428 <__pow5mult+0x98>)
 80153a4:	2300      	movs	r3, #0
 80153a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80153aa:	f7ff fec8 	bl	801513e <__multadd>
 80153ae:	4607      	mov	r7, r0
 80153b0:	10ad      	asrs	r5, r5, #2
 80153b2:	d035      	beq.n	8015420 <__pow5mult+0x90>
 80153b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80153b6:	b93c      	cbnz	r4, 80153c8 <__pow5mult+0x38>
 80153b8:	2010      	movs	r0, #16
 80153ba:	f7ff fe6d 	bl	8015098 <malloc>
 80153be:	6270      	str	r0, [r6, #36]	; 0x24
 80153c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80153c4:	6004      	str	r4, [r0, #0]
 80153c6:	60c4      	str	r4, [r0, #12]
 80153c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80153cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80153d0:	b94c      	cbnz	r4, 80153e6 <__pow5mult+0x56>
 80153d2:	f240 2171 	movw	r1, #625	; 0x271
 80153d6:	4630      	mov	r0, r6
 80153d8:	f7ff ff3a 	bl	8015250 <__i2b>
 80153dc:	2300      	movs	r3, #0
 80153de:	f8c8 0008 	str.w	r0, [r8, #8]
 80153e2:	4604      	mov	r4, r0
 80153e4:	6003      	str	r3, [r0, #0]
 80153e6:	f04f 0800 	mov.w	r8, #0
 80153ea:	07eb      	lsls	r3, r5, #31
 80153ec:	d50a      	bpl.n	8015404 <__pow5mult+0x74>
 80153ee:	4639      	mov	r1, r7
 80153f0:	4622      	mov	r2, r4
 80153f2:	4630      	mov	r0, r6
 80153f4:	f7ff ff35 	bl	8015262 <__multiply>
 80153f8:	4639      	mov	r1, r7
 80153fa:	4681      	mov	r9, r0
 80153fc:	4630      	mov	r0, r6
 80153fe:	f7ff fe87 	bl	8015110 <_Bfree>
 8015402:	464f      	mov	r7, r9
 8015404:	106d      	asrs	r5, r5, #1
 8015406:	d00b      	beq.n	8015420 <__pow5mult+0x90>
 8015408:	6820      	ldr	r0, [r4, #0]
 801540a:	b938      	cbnz	r0, 801541c <__pow5mult+0x8c>
 801540c:	4622      	mov	r2, r4
 801540e:	4621      	mov	r1, r4
 8015410:	4630      	mov	r0, r6
 8015412:	f7ff ff26 	bl	8015262 <__multiply>
 8015416:	6020      	str	r0, [r4, #0]
 8015418:	f8c0 8000 	str.w	r8, [r0]
 801541c:	4604      	mov	r4, r0
 801541e:	e7e4      	b.n	80153ea <__pow5mult+0x5a>
 8015420:	4638      	mov	r0, r7
 8015422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015426:	bf00      	nop
 8015428:	08019368 	.word	0x08019368

0801542c <__lshift>:
 801542c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015430:	460c      	mov	r4, r1
 8015432:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015436:	6923      	ldr	r3, [r4, #16]
 8015438:	6849      	ldr	r1, [r1, #4]
 801543a:	eb0a 0903 	add.w	r9, sl, r3
 801543e:	68a3      	ldr	r3, [r4, #8]
 8015440:	4607      	mov	r7, r0
 8015442:	4616      	mov	r6, r2
 8015444:	f109 0501 	add.w	r5, r9, #1
 8015448:	42ab      	cmp	r3, r5
 801544a:	db32      	blt.n	80154b2 <__lshift+0x86>
 801544c:	4638      	mov	r0, r7
 801544e:	f7ff fe2b 	bl	80150a8 <_Balloc>
 8015452:	2300      	movs	r3, #0
 8015454:	4680      	mov	r8, r0
 8015456:	f100 0114 	add.w	r1, r0, #20
 801545a:	461a      	mov	r2, r3
 801545c:	4553      	cmp	r3, sl
 801545e:	db2b      	blt.n	80154b8 <__lshift+0x8c>
 8015460:	6920      	ldr	r0, [r4, #16]
 8015462:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015466:	f104 0314 	add.w	r3, r4, #20
 801546a:	f016 021f 	ands.w	r2, r6, #31
 801546e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015472:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015476:	d025      	beq.n	80154c4 <__lshift+0x98>
 8015478:	f1c2 0e20 	rsb	lr, r2, #32
 801547c:	2000      	movs	r0, #0
 801547e:	681e      	ldr	r6, [r3, #0]
 8015480:	468a      	mov	sl, r1
 8015482:	4096      	lsls	r6, r2
 8015484:	4330      	orrs	r0, r6
 8015486:	f84a 0b04 	str.w	r0, [sl], #4
 801548a:	f853 0b04 	ldr.w	r0, [r3], #4
 801548e:	459c      	cmp	ip, r3
 8015490:	fa20 f00e 	lsr.w	r0, r0, lr
 8015494:	d814      	bhi.n	80154c0 <__lshift+0x94>
 8015496:	6048      	str	r0, [r1, #4]
 8015498:	b108      	cbz	r0, 801549e <__lshift+0x72>
 801549a:	f109 0502 	add.w	r5, r9, #2
 801549e:	3d01      	subs	r5, #1
 80154a0:	4638      	mov	r0, r7
 80154a2:	f8c8 5010 	str.w	r5, [r8, #16]
 80154a6:	4621      	mov	r1, r4
 80154a8:	f7ff fe32 	bl	8015110 <_Bfree>
 80154ac:	4640      	mov	r0, r8
 80154ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154b2:	3101      	adds	r1, #1
 80154b4:	005b      	lsls	r3, r3, #1
 80154b6:	e7c7      	b.n	8015448 <__lshift+0x1c>
 80154b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80154bc:	3301      	adds	r3, #1
 80154be:	e7cd      	b.n	801545c <__lshift+0x30>
 80154c0:	4651      	mov	r1, sl
 80154c2:	e7dc      	b.n	801547e <__lshift+0x52>
 80154c4:	3904      	subs	r1, #4
 80154c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80154ca:	f841 2f04 	str.w	r2, [r1, #4]!
 80154ce:	459c      	cmp	ip, r3
 80154d0:	d8f9      	bhi.n	80154c6 <__lshift+0x9a>
 80154d2:	e7e4      	b.n	801549e <__lshift+0x72>

080154d4 <__mcmp>:
 80154d4:	6903      	ldr	r3, [r0, #16]
 80154d6:	690a      	ldr	r2, [r1, #16]
 80154d8:	1a9b      	subs	r3, r3, r2
 80154da:	b530      	push	{r4, r5, lr}
 80154dc:	d10c      	bne.n	80154f8 <__mcmp+0x24>
 80154de:	0092      	lsls	r2, r2, #2
 80154e0:	3014      	adds	r0, #20
 80154e2:	3114      	adds	r1, #20
 80154e4:	1884      	adds	r4, r0, r2
 80154e6:	4411      	add	r1, r2
 80154e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80154ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80154f0:	4295      	cmp	r5, r2
 80154f2:	d003      	beq.n	80154fc <__mcmp+0x28>
 80154f4:	d305      	bcc.n	8015502 <__mcmp+0x2e>
 80154f6:	2301      	movs	r3, #1
 80154f8:	4618      	mov	r0, r3
 80154fa:	bd30      	pop	{r4, r5, pc}
 80154fc:	42a0      	cmp	r0, r4
 80154fe:	d3f3      	bcc.n	80154e8 <__mcmp+0x14>
 8015500:	e7fa      	b.n	80154f8 <__mcmp+0x24>
 8015502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015506:	e7f7      	b.n	80154f8 <__mcmp+0x24>

08015508 <__mdiff>:
 8015508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801550c:	460d      	mov	r5, r1
 801550e:	4607      	mov	r7, r0
 8015510:	4611      	mov	r1, r2
 8015512:	4628      	mov	r0, r5
 8015514:	4614      	mov	r4, r2
 8015516:	f7ff ffdd 	bl	80154d4 <__mcmp>
 801551a:	1e06      	subs	r6, r0, #0
 801551c:	d108      	bne.n	8015530 <__mdiff+0x28>
 801551e:	4631      	mov	r1, r6
 8015520:	4638      	mov	r0, r7
 8015522:	f7ff fdc1 	bl	80150a8 <_Balloc>
 8015526:	2301      	movs	r3, #1
 8015528:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801552c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015530:	bfa4      	itt	ge
 8015532:	4623      	movge	r3, r4
 8015534:	462c      	movge	r4, r5
 8015536:	4638      	mov	r0, r7
 8015538:	6861      	ldr	r1, [r4, #4]
 801553a:	bfa6      	itte	ge
 801553c:	461d      	movge	r5, r3
 801553e:	2600      	movge	r6, #0
 8015540:	2601      	movlt	r6, #1
 8015542:	f7ff fdb1 	bl	80150a8 <_Balloc>
 8015546:	692b      	ldr	r3, [r5, #16]
 8015548:	60c6      	str	r6, [r0, #12]
 801554a:	6926      	ldr	r6, [r4, #16]
 801554c:	f105 0914 	add.w	r9, r5, #20
 8015550:	f104 0214 	add.w	r2, r4, #20
 8015554:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8015558:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801555c:	f100 0514 	add.w	r5, r0, #20
 8015560:	f04f 0e00 	mov.w	lr, #0
 8015564:	f852 ab04 	ldr.w	sl, [r2], #4
 8015568:	f859 4b04 	ldr.w	r4, [r9], #4
 801556c:	fa1e f18a 	uxtah	r1, lr, sl
 8015570:	b2a3      	uxth	r3, r4
 8015572:	1ac9      	subs	r1, r1, r3
 8015574:	0c23      	lsrs	r3, r4, #16
 8015576:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801557a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801557e:	b289      	uxth	r1, r1
 8015580:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8015584:	45c8      	cmp	r8, r9
 8015586:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801558a:	4694      	mov	ip, r2
 801558c:	f845 3b04 	str.w	r3, [r5], #4
 8015590:	d8e8      	bhi.n	8015564 <__mdiff+0x5c>
 8015592:	45bc      	cmp	ip, r7
 8015594:	d304      	bcc.n	80155a0 <__mdiff+0x98>
 8015596:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801559a:	b183      	cbz	r3, 80155be <__mdiff+0xb6>
 801559c:	6106      	str	r6, [r0, #16]
 801559e:	e7c5      	b.n	801552c <__mdiff+0x24>
 80155a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80155a4:	fa1e f381 	uxtah	r3, lr, r1
 80155a8:	141a      	asrs	r2, r3, #16
 80155aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80155ae:	b29b      	uxth	r3, r3
 80155b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80155b4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80155b8:	f845 3b04 	str.w	r3, [r5], #4
 80155bc:	e7e9      	b.n	8015592 <__mdiff+0x8a>
 80155be:	3e01      	subs	r6, #1
 80155c0:	e7e9      	b.n	8015596 <__mdiff+0x8e>

080155c2 <__d2b>:
 80155c2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80155c6:	460e      	mov	r6, r1
 80155c8:	2101      	movs	r1, #1
 80155ca:	ec59 8b10 	vmov	r8, r9, d0
 80155ce:	4615      	mov	r5, r2
 80155d0:	f7ff fd6a 	bl	80150a8 <_Balloc>
 80155d4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80155d8:	4607      	mov	r7, r0
 80155da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80155de:	bb34      	cbnz	r4, 801562e <__d2b+0x6c>
 80155e0:	9301      	str	r3, [sp, #4]
 80155e2:	f1b8 0300 	subs.w	r3, r8, #0
 80155e6:	d027      	beq.n	8015638 <__d2b+0x76>
 80155e8:	a802      	add	r0, sp, #8
 80155ea:	f840 3d08 	str.w	r3, [r0, #-8]!
 80155ee:	f7ff fe00 	bl	80151f2 <__lo0bits>
 80155f2:	9900      	ldr	r1, [sp, #0]
 80155f4:	b1f0      	cbz	r0, 8015634 <__d2b+0x72>
 80155f6:	9a01      	ldr	r2, [sp, #4]
 80155f8:	f1c0 0320 	rsb	r3, r0, #32
 80155fc:	fa02 f303 	lsl.w	r3, r2, r3
 8015600:	430b      	orrs	r3, r1
 8015602:	40c2      	lsrs	r2, r0
 8015604:	617b      	str	r3, [r7, #20]
 8015606:	9201      	str	r2, [sp, #4]
 8015608:	9b01      	ldr	r3, [sp, #4]
 801560a:	61bb      	str	r3, [r7, #24]
 801560c:	2b00      	cmp	r3, #0
 801560e:	bf14      	ite	ne
 8015610:	2102      	movne	r1, #2
 8015612:	2101      	moveq	r1, #1
 8015614:	6139      	str	r1, [r7, #16]
 8015616:	b1c4      	cbz	r4, 801564a <__d2b+0x88>
 8015618:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801561c:	4404      	add	r4, r0
 801561e:	6034      	str	r4, [r6, #0]
 8015620:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015624:	6028      	str	r0, [r5, #0]
 8015626:	4638      	mov	r0, r7
 8015628:	b003      	add	sp, #12
 801562a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801562e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015632:	e7d5      	b.n	80155e0 <__d2b+0x1e>
 8015634:	6179      	str	r1, [r7, #20]
 8015636:	e7e7      	b.n	8015608 <__d2b+0x46>
 8015638:	a801      	add	r0, sp, #4
 801563a:	f7ff fdda 	bl	80151f2 <__lo0bits>
 801563e:	9b01      	ldr	r3, [sp, #4]
 8015640:	617b      	str	r3, [r7, #20]
 8015642:	2101      	movs	r1, #1
 8015644:	6139      	str	r1, [r7, #16]
 8015646:	3020      	adds	r0, #32
 8015648:	e7e5      	b.n	8015616 <__d2b+0x54>
 801564a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801564e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015652:	6030      	str	r0, [r6, #0]
 8015654:	6918      	ldr	r0, [r3, #16]
 8015656:	f7ff fdad 	bl	80151b4 <__hi0bits>
 801565a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801565e:	e7e1      	b.n	8015624 <__d2b+0x62>

08015660 <_calloc_r>:
 8015660:	b538      	push	{r3, r4, r5, lr}
 8015662:	fb02 f401 	mul.w	r4, r2, r1
 8015666:	4621      	mov	r1, r4
 8015668:	f000 f856 	bl	8015718 <_malloc_r>
 801566c:	4605      	mov	r5, r0
 801566e:	b118      	cbz	r0, 8015678 <_calloc_r+0x18>
 8015670:	4622      	mov	r2, r4
 8015672:	2100      	movs	r1, #0
 8015674:	f7fd fee5 	bl	8013442 <memset>
 8015678:	4628      	mov	r0, r5
 801567a:	bd38      	pop	{r3, r4, r5, pc}

0801567c <_free_r>:
 801567c:	b538      	push	{r3, r4, r5, lr}
 801567e:	4605      	mov	r5, r0
 8015680:	2900      	cmp	r1, #0
 8015682:	d045      	beq.n	8015710 <_free_r+0x94>
 8015684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015688:	1f0c      	subs	r4, r1, #4
 801568a:	2b00      	cmp	r3, #0
 801568c:	bfb8      	it	lt
 801568e:	18e4      	addlt	r4, r4, r3
 8015690:	f000 fc03 	bl	8015e9a <__malloc_lock>
 8015694:	4a1f      	ldr	r2, [pc, #124]	; (8015714 <_free_r+0x98>)
 8015696:	6813      	ldr	r3, [r2, #0]
 8015698:	4610      	mov	r0, r2
 801569a:	b933      	cbnz	r3, 80156aa <_free_r+0x2e>
 801569c:	6063      	str	r3, [r4, #4]
 801569e:	6014      	str	r4, [r2, #0]
 80156a0:	4628      	mov	r0, r5
 80156a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80156a6:	f000 bbf9 	b.w	8015e9c <__malloc_unlock>
 80156aa:	42a3      	cmp	r3, r4
 80156ac:	d90c      	bls.n	80156c8 <_free_r+0x4c>
 80156ae:	6821      	ldr	r1, [r4, #0]
 80156b0:	1862      	adds	r2, r4, r1
 80156b2:	4293      	cmp	r3, r2
 80156b4:	bf04      	itt	eq
 80156b6:	681a      	ldreq	r2, [r3, #0]
 80156b8:	685b      	ldreq	r3, [r3, #4]
 80156ba:	6063      	str	r3, [r4, #4]
 80156bc:	bf04      	itt	eq
 80156be:	1852      	addeq	r2, r2, r1
 80156c0:	6022      	streq	r2, [r4, #0]
 80156c2:	6004      	str	r4, [r0, #0]
 80156c4:	e7ec      	b.n	80156a0 <_free_r+0x24>
 80156c6:	4613      	mov	r3, r2
 80156c8:	685a      	ldr	r2, [r3, #4]
 80156ca:	b10a      	cbz	r2, 80156d0 <_free_r+0x54>
 80156cc:	42a2      	cmp	r2, r4
 80156ce:	d9fa      	bls.n	80156c6 <_free_r+0x4a>
 80156d0:	6819      	ldr	r1, [r3, #0]
 80156d2:	1858      	adds	r0, r3, r1
 80156d4:	42a0      	cmp	r0, r4
 80156d6:	d10b      	bne.n	80156f0 <_free_r+0x74>
 80156d8:	6820      	ldr	r0, [r4, #0]
 80156da:	4401      	add	r1, r0
 80156dc:	1858      	adds	r0, r3, r1
 80156de:	4282      	cmp	r2, r0
 80156e0:	6019      	str	r1, [r3, #0]
 80156e2:	d1dd      	bne.n	80156a0 <_free_r+0x24>
 80156e4:	6810      	ldr	r0, [r2, #0]
 80156e6:	6852      	ldr	r2, [r2, #4]
 80156e8:	605a      	str	r2, [r3, #4]
 80156ea:	4401      	add	r1, r0
 80156ec:	6019      	str	r1, [r3, #0]
 80156ee:	e7d7      	b.n	80156a0 <_free_r+0x24>
 80156f0:	d902      	bls.n	80156f8 <_free_r+0x7c>
 80156f2:	230c      	movs	r3, #12
 80156f4:	602b      	str	r3, [r5, #0]
 80156f6:	e7d3      	b.n	80156a0 <_free_r+0x24>
 80156f8:	6820      	ldr	r0, [r4, #0]
 80156fa:	1821      	adds	r1, r4, r0
 80156fc:	428a      	cmp	r2, r1
 80156fe:	bf04      	itt	eq
 8015700:	6811      	ldreq	r1, [r2, #0]
 8015702:	6852      	ldreq	r2, [r2, #4]
 8015704:	6062      	str	r2, [r4, #4]
 8015706:	bf04      	itt	eq
 8015708:	1809      	addeq	r1, r1, r0
 801570a:	6021      	streq	r1, [r4, #0]
 801570c:	605c      	str	r4, [r3, #4]
 801570e:	e7c7      	b.n	80156a0 <_free_r+0x24>
 8015710:	bd38      	pop	{r3, r4, r5, pc}
 8015712:	bf00      	nop
 8015714:	2002e064 	.word	0x2002e064

08015718 <_malloc_r>:
 8015718:	b570      	push	{r4, r5, r6, lr}
 801571a:	1ccd      	adds	r5, r1, #3
 801571c:	f025 0503 	bic.w	r5, r5, #3
 8015720:	3508      	adds	r5, #8
 8015722:	2d0c      	cmp	r5, #12
 8015724:	bf38      	it	cc
 8015726:	250c      	movcc	r5, #12
 8015728:	2d00      	cmp	r5, #0
 801572a:	4606      	mov	r6, r0
 801572c:	db01      	blt.n	8015732 <_malloc_r+0x1a>
 801572e:	42a9      	cmp	r1, r5
 8015730:	d903      	bls.n	801573a <_malloc_r+0x22>
 8015732:	230c      	movs	r3, #12
 8015734:	6033      	str	r3, [r6, #0]
 8015736:	2000      	movs	r0, #0
 8015738:	bd70      	pop	{r4, r5, r6, pc}
 801573a:	f000 fbae 	bl	8015e9a <__malloc_lock>
 801573e:	4a21      	ldr	r2, [pc, #132]	; (80157c4 <_malloc_r+0xac>)
 8015740:	6814      	ldr	r4, [r2, #0]
 8015742:	4621      	mov	r1, r4
 8015744:	b991      	cbnz	r1, 801576c <_malloc_r+0x54>
 8015746:	4c20      	ldr	r4, [pc, #128]	; (80157c8 <_malloc_r+0xb0>)
 8015748:	6823      	ldr	r3, [r4, #0]
 801574a:	b91b      	cbnz	r3, 8015754 <_malloc_r+0x3c>
 801574c:	4630      	mov	r0, r6
 801574e:	f000 facf 	bl	8015cf0 <_sbrk_r>
 8015752:	6020      	str	r0, [r4, #0]
 8015754:	4629      	mov	r1, r5
 8015756:	4630      	mov	r0, r6
 8015758:	f000 faca 	bl	8015cf0 <_sbrk_r>
 801575c:	1c43      	adds	r3, r0, #1
 801575e:	d124      	bne.n	80157aa <_malloc_r+0x92>
 8015760:	230c      	movs	r3, #12
 8015762:	6033      	str	r3, [r6, #0]
 8015764:	4630      	mov	r0, r6
 8015766:	f000 fb99 	bl	8015e9c <__malloc_unlock>
 801576a:	e7e4      	b.n	8015736 <_malloc_r+0x1e>
 801576c:	680b      	ldr	r3, [r1, #0]
 801576e:	1b5b      	subs	r3, r3, r5
 8015770:	d418      	bmi.n	80157a4 <_malloc_r+0x8c>
 8015772:	2b0b      	cmp	r3, #11
 8015774:	d90f      	bls.n	8015796 <_malloc_r+0x7e>
 8015776:	600b      	str	r3, [r1, #0]
 8015778:	50cd      	str	r5, [r1, r3]
 801577a:	18cc      	adds	r4, r1, r3
 801577c:	4630      	mov	r0, r6
 801577e:	f000 fb8d 	bl	8015e9c <__malloc_unlock>
 8015782:	f104 000b 	add.w	r0, r4, #11
 8015786:	1d23      	adds	r3, r4, #4
 8015788:	f020 0007 	bic.w	r0, r0, #7
 801578c:	1ac3      	subs	r3, r0, r3
 801578e:	d0d3      	beq.n	8015738 <_malloc_r+0x20>
 8015790:	425a      	negs	r2, r3
 8015792:	50e2      	str	r2, [r4, r3]
 8015794:	e7d0      	b.n	8015738 <_malloc_r+0x20>
 8015796:	428c      	cmp	r4, r1
 8015798:	684b      	ldr	r3, [r1, #4]
 801579a:	bf16      	itet	ne
 801579c:	6063      	strne	r3, [r4, #4]
 801579e:	6013      	streq	r3, [r2, #0]
 80157a0:	460c      	movne	r4, r1
 80157a2:	e7eb      	b.n	801577c <_malloc_r+0x64>
 80157a4:	460c      	mov	r4, r1
 80157a6:	6849      	ldr	r1, [r1, #4]
 80157a8:	e7cc      	b.n	8015744 <_malloc_r+0x2c>
 80157aa:	1cc4      	adds	r4, r0, #3
 80157ac:	f024 0403 	bic.w	r4, r4, #3
 80157b0:	42a0      	cmp	r0, r4
 80157b2:	d005      	beq.n	80157c0 <_malloc_r+0xa8>
 80157b4:	1a21      	subs	r1, r4, r0
 80157b6:	4630      	mov	r0, r6
 80157b8:	f000 fa9a 	bl	8015cf0 <_sbrk_r>
 80157bc:	3001      	adds	r0, #1
 80157be:	d0cf      	beq.n	8015760 <_malloc_r+0x48>
 80157c0:	6025      	str	r5, [r4, #0]
 80157c2:	e7db      	b.n	801577c <_malloc_r+0x64>
 80157c4:	2002e064 	.word	0x2002e064
 80157c8:	2002e068 	.word	0x2002e068

080157cc <__ssputs_r>:
 80157cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80157d0:	688e      	ldr	r6, [r1, #8]
 80157d2:	429e      	cmp	r6, r3
 80157d4:	4682      	mov	sl, r0
 80157d6:	460c      	mov	r4, r1
 80157d8:	4690      	mov	r8, r2
 80157da:	4699      	mov	r9, r3
 80157dc:	d837      	bhi.n	801584e <__ssputs_r+0x82>
 80157de:	898a      	ldrh	r2, [r1, #12]
 80157e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80157e4:	d031      	beq.n	801584a <__ssputs_r+0x7e>
 80157e6:	6825      	ldr	r5, [r4, #0]
 80157e8:	6909      	ldr	r1, [r1, #16]
 80157ea:	1a6f      	subs	r7, r5, r1
 80157ec:	6965      	ldr	r5, [r4, #20]
 80157ee:	2302      	movs	r3, #2
 80157f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80157f4:	fb95 f5f3 	sdiv	r5, r5, r3
 80157f8:	f109 0301 	add.w	r3, r9, #1
 80157fc:	443b      	add	r3, r7
 80157fe:	429d      	cmp	r5, r3
 8015800:	bf38      	it	cc
 8015802:	461d      	movcc	r5, r3
 8015804:	0553      	lsls	r3, r2, #21
 8015806:	d530      	bpl.n	801586a <__ssputs_r+0x9e>
 8015808:	4629      	mov	r1, r5
 801580a:	f7ff ff85 	bl	8015718 <_malloc_r>
 801580e:	4606      	mov	r6, r0
 8015810:	b950      	cbnz	r0, 8015828 <__ssputs_r+0x5c>
 8015812:	230c      	movs	r3, #12
 8015814:	f8ca 3000 	str.w	r3, [sl]
 8015818:	89a3      	ldrh	r3, [r4, #12]
 801581a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801581e:	81a3      	strh	r3, [r4, #12]
 8015820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015828:	463a      	mov	r2, r7
 801582a:	6921      	ldr	r1, [r4, #16]
 801582c:	f7fd fdfe 	bl	801342c <memcpy>
 8015830:	89a3      	ldrh	r3, [r4, #12]
 8015832:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801583a:	81a3      	strh	r3, [r4, #12]
 801583c:	6126      	str	r6, [r4, #16]
 801583e:	6165      	str	r5, [r4, #20]
 8015840:	443e      	add	r6, r7
 8015842:	1bed      	subs	r5, r5, r7
 8015844:	6026      	str	r6, [r4, #0]
 8015846:	60a5      	str	r5, [r4, #8]
 8015848:	464e      	mov	r6, r9
 801584a:	454e      	cmp	r6, r9
 801584c:	d900      	bls.n	8015850 <__ssputs_r+0x84>
 801584e:	464e      	mov	r6, r9
 8015850:	4632      	mov	r2, r6
 8015852:	4641      	mov	r1, r8
 8015854:	6820      	ldr	r0, [r4, #0]
 8015856:	f000 fb07 	bl	8015e68 <memmove>
 801585a:	68a3      	ldr	r3, [r4, #8]
 801585c:	1b9b      	subs	r3, r3, r6
 801585e:	60a3      	str	r3, [r4, #8]
 8015860:	6823      	ldr	r3, [r4, #0]
 8015862:	441e      	add	r6, r3
 8015864:	6026      	str	r6, [r4, #0]
 8015866:	2000      	movs	r0, #0
 8015868:	e7dc      	b.n	8015824 <__ssputs_r+0x58>
 801586a:	462a      	mov	r2, r5
 801586c:	f000 fb17 	bl	8015e9e <_realloc_r>
 8015870:	4606      	mov	r6, r0
 8015872:	2800      	cmp	r0, #0
 8015874:	d1e2      	bne.n	801583c <__ssputs_r+0x70>
 8015876:	6921      	ldr	r1, [r4, #16]
 8015878:	4650      	mov	r0, sl
 801587a:	f7ff feff 	bl	801567c <_free_r>
 801587e:	e7c8      	b.n	8015812 <__ssputs_r+0x46>

08015880 <_svfiprintf_r>:
 8015880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015884:	461d      	mov	r5, r3
 8015886:	898b      	ldrh	r3, [r1, #12]
 8015888:	061f      	lsls	r7, r3, #24
 801588a:	b09d      	sub	sp, #116	; 0x74
 801588c:	4680      	mov	r8, r0
 801588e:	460c      	mov	r4, r1
 8015890:	4616      	mov	r6, r2
 8015892:	d50f      	bpl.n	80158b4 <_svfiprintf_r+0x34>
 8015894:	690b      	ldr	r3, [r1, #16]
 8015896:	b96b      	cbnz	r3, 80158b4 <_svfiprintf_r+0x34>
 8015898:	2140      	movs	r1, #64	; 0x40
 801589a:	f7ff ff3d 	bl	8015718 <_malloc_r>
 801589e:	6020      	str	r0, [r4, #0]
 80158a0:	6120      	str	r0, [r4, #16]
 80158a2:	b928      	cbnz	r0, 80158b0 <_svfiprintf_r+0x30>
 80158a4:	230c      	movs	r3, #12
 80158a6:	f8c8 3000 	str.w	r3, [r8]
 80158aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80158ae:	e0c8      	b.n	8015a42 <_svfiprintf_r+0x1c2>
 80158b0:	2340      	movs	r3, #64	; 0x40
 80158b2:	6163      	str	r3, [r4, #20]
 80158b4:	2300      	movs	r3, #0
 80158b6:	9309      	str	r3, [sp, #36]	; 0x24
 80158b8:	2320      	movs	r3, #32
 80158ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80158be:	2330      	movs	r3, #48	; 0x30
 80158c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80158c4:	9503      	str	r5, [sp, #12]
 80158c6:	f04f 0b01 	mov.w	fp, #1
 80158ca:	4637      	mov	r7, r6
 80158cc:	463d      	mov	r5, r7
 80158ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80158d2:	b10b      	cbz	r3, 80158d8 <_svfiprintf_r+0x58>
 80158d4:	2b25      	cmp	r3, #37	; 0x25
 80158d6:	d13e      	bne.n	8015956 <_svfiprintf_r+0xd6>
 80158d8:	ebb7 0a06 	subs.w	sl, r7, r6
 80158dc:	d00b      	beq.n	80158f6 <_svfiprintf_r+0x76>
 80158de:	4653      	mov	r3, sl
 80158e0:	4632      	mov	r2, r6
 80158e2:	4621      	mov	r1, r4
 80158e4:	4640      	mov	r0, r8
 80158e6:	f7ff ff71 	bl	80157cc <__ssputs_r>
 80158ea:	3001      	adds	r0, #1
 80158ec:	f000 80a4 	beq.w	8015a38 <_svfiprintf_r+0x1b8>
 80158f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158f2:	4453      	add	r3, sl
 80158f4:	9309      	str	r3, [sp, #36]	; 0x24
 80158f6:	783b      	ldrb	r3, [r7, #0]
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	f000 809d 	beq.w	8015a38 <_svfiprintf_r+0x1b8>
 80158fe:	2300      	movs	r3, #0
 8015900:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015904:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015908:	9304      	str	r3, [sp, #16]
 801590a:	9307      	str	r3, [sp, #28]
 801590c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015910:	931a      	str	r3, [sp, #104]	; 0x68
 8015912:	462f      	mov	r7, r5
 8015914:	2205      	movs	r2, #5
 8015916:	f817 1b01 	ldrb.w	r1, [r7], #1
 801591a:	4850      	ldr	r0, [pc, #320]	; (8015a5c <_svfiprintf_r+0x1dc>)
 801591c:	f7ea fc38 	bl	8000190 <memchr>
 8015920:	9b04      	ldr	r3, [sp, #16]
 8015922:	b9d0      	cbnz	r0, 801595a <_svfiprintf_r+0xda>
 8015924:	06d9      	lsls	r1, r3, #27
 8015926:	bf44      	itt	mi
 8015928:	2220      	movmi	r2, #32
 801592a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801592e:	071a      	lsls	r2, r3, #28
 8015930:	bf44      	itt	mi
 8015932:	222b      	movmi	r2, #43	; 0x2b
 8015934:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015938:	782a      	ldrb	r2, [r5, #0]
 801593a:	2a2a      	cmp	r2, #42	; 0x2a
 801593c:	d015      	beq.n	801596a <_svfiprintf_r+0xea>
 801593e:	9a07      	ldr	r2, [sp, #28]
 8015940:	462f      	mov	r7, r5
 8015942:	2000      	movs	r0, #0
 8015944:	250a      	movs	r5, #10
 8015946:	4639      	mov	r1, r7
 8015948:	f811 3b01 	ldrb.w	r3, [r1], #1
 801594c:	3b30      	subs	r3, #48	; 0x30
 801594e:	2b09      	cmp	r3, #9
 8015950:	d94d      	bls.n	80159ee <_svfiprintf_r+0x16e>
 8015952:	b1b8      	cbz	r0, 8015984 <_svfiprintf_r+0x104>
 8015954:	e00f      	b.n	8015976 <_svfiprintf_r+0xf6>
 8015956:	462f      	mov	r7, r5
 8015958:	e7b8      	b.n	80158cc <_svfiprintf_r+0x4c>
 801595a:	4a40      	ldr	r2, [pc, #256]	; (8015a5c <_svfiprintf_r+0x1dc>)
 801595c:	1a80      	subs	r0, r0, r2
 801595e:	fa0b f000 	lsl.w	r0, fp, r0
 8015962:	4318      	orrs	r0, r3
 8015964:	9004      	str	r0, [sp, #16]
 8015966:	463d      	mov	r5, r7
 8015968:	e7d3      	b.n	8015912 <_svfiprintf_r+0x92>
 801596a:	9a03      	ldr	r2, [sp, #12]
 801596c:	1d11      	adds	r1, r2, #4
 801596e:	6812      	ldr	r2, [r2, #0]
 8015970:	9103      	str	r1, [sp, #12]
 8015972:	2a00      	cmp	r2, #0
 8015974:	db01      	blt.n	801597a <_svfiprintf_r+0xfa>
 8015976:	9207      	str	r2, [sp, #28]
 8015978:	e004      	b.n	8015984 <_svfiprintf_r+0x104>
 801597a:	4252      	negs	r2, r2
 801597c:	f043 0302 	orr.w	r3, r3, #2
 8015980:	9207      	str	r2, [sp, #28]
 8015982:	9304      	str	r3, [sp, #16]
 8015984:	783b      	ldrb	r3, [r7, #0]
 8015986:	2b2e      	cmp	r3, #46	; 0x2e
 8015988:	d10c      	bne.n	80159a4 <_svfiprintf_r+0x124>
 801598a:	787b      	ldrb	r3, [r7, #1]
 801598c:	2b2a      	cmp	r3, #42	; 0x2a
 801598e:	d133      	bne.n	80159f8 <_svfiprintf_r+0x178>
 8015990:	9b03      	ldr	r3, [sp, #12]
 8015992:	1d1a      	adds	r2, r3, #4
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	9203      	str	r2, [sp, #12]
 8015998:	2b00      	cmp	r3, #0
 801599a:	bfb8      	it	lt
 801599c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80159a0:	3702      	adds	r7, #2
 80159a2:	9305      	str	r3, [sp, #20]
 80159a4:	4d2e      	ldr	r5, [pc, #184]	; (8015a60 <_svfiprintf_r+0x1e0>)
 80159a6:	7839      	ldrb	r1, [r7, #0]
 80159a8:	2203      	movs	r2, #3
 80159aa:	4628      	mov	r0, r5
 80159ac:	f7ea fbf0 	bl	8000190 <memchr>
 80159b0:	b138      	cbz	r0, 80159c2 <_svfiprintf_r+0x142>
 80159b2:	2340      	movs	r3, #64	; 0x40
 80159b4:	1b40      	subs	r0, r0, r5
 80159b6:	fa03 f000 	lsl.w	r0, r3, r0
 80159ba:	9b04      	ldr	r3, [sp, #16]
 80159bc:	4303      	orrs	r3, r0
 80159be:	3701      	adds	r7, #1
 80159c0:	9304      	str	r3, [sp, #16]
 80159c2:	7839      	ldrb	r1, [r7, #0]
 80159c4:	4827      	ldr	r0, [pc, #156]	; (8015a64 <_svfiprintf_r+0x1e4>)
 80159c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80159ca:	2206      	movs	r2, #6
 80159cc:	1c7e      	adds	r6, r7, #1
 80159ce:	f7ea fbdf 	bl	8000190 <memchr>
 80159d2:	2800      	cmp	r0, #0
 80159d4:	d038      	beq.n	8015a48 <_svfiprintf_r+0x1c8>
 80159d6:	4b24      	ldr	r3, [pc, #144]	; (8015a68 <_svfiprintf_r+0x1e8>)
 80159d8:	bb13      	cbnz	r3, 8015a20 <_svfiprintf_r+0x1a0>
 80159da:	9b03      	ldr	r3, [sp, #12]
 80159dc:	3307      	adds	r3, #7
 80159de:	f023 0307 	bic.w	r3, r3, #7
 80159e2:	3308      	adds	r3, #8
 80159e4:	9303      	str	r3, [sp, #12]
 80159e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159e8:	444b      	add	r3, r9
 80159ea:	9309      	str	r3, [sp, #36]	; 0x24
 80159ec:	e76d      	b.n	80158ca <_svfiprintf_r+0x4a>
 80159ee:	fb05 3202 	mla	r2, r5, r2, r3
 80159f2:	2001      	movs	r0, #1
 80159f4:	460f      	mov	r7, r1
 80159f6:	e7a6      	b.n	8015946 <_svfiprintf_r+0xc6>
 80159f8:	2300      	movs	r3, #0
 80159fa:	3701      	adds	r7, #1
 80159fc:	9305      	str	r3, [sp, #20]
 80159fe:	4619      	mov	r1, r3
 8015a00:	250a      	movs	r5, #10
 8015a02:	4638      	mov	r0, r7
 8015a04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015a08:	3a30      	subs	r2, #48	; 0x30
 8015a0a:	2a09      	cmp	r2, #9
 8015a0c:	d903      	bls.n	8015a16 <_svfiprintf_r+0x196>
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d0c8      	beq.n	80159a4 <_svfiprintf_r+0x124>
 8015a12:	9105      	str	r1, [sp, #20]
 8015a14:	e7c6      	b.n	80159a4 <_svfiprintf_r+0x124>
 8015a16:	fb05 2101 	mla	r1, r5, r1, r2
 8015a1a:	2301      	movs	r3, #1
 8015a1c:	4607      	mov	r7, r0
 8015a1e:	e7f0      	b.n	8015a02 <_svfiprintf_r+0x182>
 8015a20:	ab03      	add	r3, sp, #12
 8015a22:	9300      	str	r3, [sp, #0]
 8015a24:	4622      	mov	r2, r4
 8015a26:	4b11      	ldr	r3, [pc, #68]	; (8015a6c <_svfiprintf_r+0x1ec>)
 8015a28:	a904      	add	r1, sp, #16
 8015a2a:	4640      	mov	r0, r8
 8015a2c:	f7fd fda6 	bl	801357c <_printf_float>
 8015a30:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8015a34:	4681      	mov	r9, r0
 8015a36:	d1d6      	bne.n	80159e6 <_svfiprintf_r+0x166>
 8015a38:	89a3      	ldrh	r3, [r4, #12]
 8015a3a:	065b      	lsls	r3, r3, #25
 8015a3c:	f53f af35 	bmi.w	80158aa <_svfiprintf_r+0x2a>
 8015a40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015a42:	b01d      	add	sp, #116	; 0x74
 8015a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a48:	ab03      	add	r3, sp, #12
 8015a4a:	9300      	str	r3, [sp, #0]
 8015a4c:	4622      	mov	r2, r4
 8015a4e:	4b07      	ldr	r3, [pc, #28]	; (8015a6c <_svfiprintf_r+0x1ec>)
 8015a50:	a904      	add	r1, sp, #16
 8015a52:	4640      	mov	r0, r8
 8015a54:	f7fe f848 	bl	8013ae8 <_printf_i>
 8015a58:	e7ea      	b.n	8015a30 <_svfiprintf_r+0x1b0>
 8015a5a:	bf00      	nop
 8015a5c:	08019374 	.word	0x08019374
 8015a60:	0801937a 	.word	0x0801937a
 8015a64:	0801937e 	.word	0x0801937e
 8015a68:	0801357d 	.word	0x0801357d
 8015a6c:	080157cd 	.word	0x080157cd

08015a70 <__sfputc_r>:
 8015a70:	6893      	ldr	r3, [r2, #8]
 8015a72:	3b01      	subs	r3, #1
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	b410      	push	{r4}
 8015a78:	6093      	str	r3, [r2, #8]
 8015a7a:	da08      	bge.n	8015a8e <__sfputc_r+0x1e>
 8015a7c:	6994      	ldr	r4, [r2, #24]
 8015a7e:	42a3      	cmp	r3, r4
 8015a80:	db01      	blt.n	8015a86 <__sfputc_r+0x16>
 8015a82:	290a      	cmp	r1, #10
 8015a84:	d103      	bne.n	8015a8e <__sfputc_r+0x1e>
 8015a86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015a8a:	f7fe ba15 	b.w	8013eb8 <__swbuf_r>
 8015a8e:	6813      	ldr	r3, [r2, #0]
 8015a90:	1c58      	adds	r0, r3, #1
 8015a92:	6010      	str	r0, [r2, #0]
 8015a94:	7019      	strb	r1, [r3, #0]
 8015a96:	4608      	mov	r0, r1
 8015a98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015a9c:	4770      	bx	lr

08015a9e <__sfputs_r>:
 8015a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015aa0:	4606      	mov	r6, r0
 8015aa2:	460f      	mov	r7, r1
 8015aa4:	4614      	mov	r4, r2
 8015aa6:	18d5      	adds	r5, r2, r3
 8015aa8:	42ac      	cmp	r4, r5
 8015aaa:	d101      	bne.n	8015ab0 <__sfputs_r+0x12>
 8015aac:	2000      	movs	r0, #0
 8015aae:	e007      	b.n	8015ac0 <__sfputs_r+0x22>
 8015ab0:	463a      	mov	r2, r7
 8015ab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ab6:	4630      	mov	r0, r6
 8015ab8:	f7ff ffda 	bl	8015a70 <__sfputc_r>
 8015abc:	1c43      	adds	r3, r0, #1
 8015abe:	d1f3      	bne.n	8015aa8 <__sfputs_r+0xa>
 8015ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015ac4 <_vfiprintf_r>:
 8015ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ac8:	460c      	mov	r4, r1
 8015aca:	b09d      	sub	sp, #116	; 0x74
 8015acc:	4617      	mov	r7, r2
 8015ace:	461d      	mov	r5, r3
 8015ad0:	4606      	mov	r6, r0
 8015ad2:	b118      	cbz	r0, 8015adc <_vfiprintf_r+0x18>
 8015ad4:	6983      	ldr	r3, [r0, #24]
 8015ad6:	b90b      	cbnz	r3, 8015adc <_vfiprintf_r+0x18>
 8015ad8:	f7ff f9e2 	bl	8014ea0 <__sinit>
 8015adc:	4b7c      	ldr	r3, [pc, #496]	; (8015cd0 <_vfiprintf_r+0x20c>)
 8015ade:	429c      	cmp	r4, r3
 8015ae0:	d158      	bne.n	8015b94 <_vfiprintf_r+0xd0>
 8015ae2:	6874      	ldr	r4, [r6, #4]
 8015ae4:	89a3      	ldrh	r3, [r4, #12]
 8015ae6:	0718      	lsls	r0, r3, #28
 8015ae8:	d55e      	bpl.n	8015ba8 <_vfiprintf_r+0xe4>
 8015aea:	6923      	ldr	r3, [r4, #16]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d05b      	beq.n	8015ba8 <_vfiprintf_r+0xe4>
 8015af0:	2300      	movs	r3, #0
 8015af2:	9309      	str	r3, [sp, #36]	; 0x24
 8015af4:	2320      	movs	r3, #32
 8015af6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015afa:	2330      	movs	r3, #48	; 0x30
 8015afc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015b00:	9503      	str	r5, [sp, #12]
 8015b02:	f04f 0b01 	mov.w	fp, #1
 8015b06:	46b8      	mov	r8, r7
 8015b08:	4645      	mov	r5, r8
 8015b0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015b0e:	b10b      	cbz	r3, 8015b14 <_vfiprintf_r+0x50>
 8015b10:	2b25      	cmp	r3, #37	; 0x25
 8015b12:	d154      	bne.n	8015bbe <_vfiprintf_r+0xfa>
 8015b14:	ebb8 0a07 	subs.w	sl, r8, r7
 8015b18:	d00b      	beq.n	8015b32 <_vfiprintf_r+0x6e>
 8015b1a:	4653      	mov	r3, sl
 8015b1c:	463a      	mov	r2, r7
 8015b1e:	4621      	mov	r1, r4
 8015b20:	4630      	mov	r0, r6
 8015b22:	f7ff ffbc 	bl	8015a9e <__sfputs_r>
 8015b26:	3001      	adds	r0, #1
 8015b28:	f000 80c2 	beq.w	8015cb0 <_vfiprintf_r+0x1ec>
 8015b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b2e:	4453      	add	r3, sl
 8015b30:	9309      	str	r3, [sp, #36]	; 0x24
 8015b32:	f898 3000 	ldrb.w	r3, [r8]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	f000 80ba 	beq.w	8015cb0 <_vfiprintf_r+0x1ec>
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015b42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015b46:	9304      	str	r3, [sp, #16]
 8015b48:	9307      	str	r3, [sp, #28]
 8015b4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015b4e:	931a      	str	r3, [sp, #104]	; 0x68
 8015b50:	46a8      	mov	r8, r5
 8015b52:	2205      	movs	r2, #5
 8015b54:	f818 1b01 	ldrb.w	r1, [r8], #1
 8015b58:	485e      	ldr	r0, [pc, #376]	; (8015cd4 <_vfiprintf_r+0x210>)
 8015b5a:	f7ea fb19 	bl	8000190 <memchr>
 8015b5e:	9b04      	ldr	r3, [sp, #16]
 8015b60:	bb78      	cbnz	r0, 8015bc2 <_vfiprintf_r+0xfe>
 8015b62:	06d9      	lsls	r1, r3, #27
 8015b64:	bf44      	itt	mi
 8015b66:	2220      	movmi	r2, #32
 8015b68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015b6c:	071a      	lsls	r2, r3, #28
 8015b6e:	bf44      	itt	mi
 8015b70:	222b      	movmi	r2, #43	; 0x2b
 8015b72:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015b76:	782a      	ldrb	r2, [r5, #0]
 8015b78:	2a2a      	cmp	r2, #42	; 0x2a
 8015b7a:	d02a      	beq.n	8015bd2 <_vfiprintf_r+0x10e>
 8015b7c:	9a07      	ldr	r2, [sp, #28]
 8015b7e:	46a8      	mov	r8, r5
 8015b80:	2000      	movs	r0, #0
 8015b82:	250a      	movs	r5, #10
 8015b84:	4641      	mov	r1, r8
 8015b86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015b8a:	3b30      	subs	r3, #48	; 0x30
 8015b8c:	2b09      	cmp	r3, #9
 8015b8e:	d969      	bls.n	8015c64 <_vfiprintf_r+0x1a0>
 8015b90:	b360      	cbz	r0, 8015bec <_vfiprintf_r+0x128>
 8015b92:	e024      	b.n	8015bde <_vfiprintf_r+0x11a>
 8015b94:	4b50      	ldr	r3, [pc, #320]	; (8015cd8 <_vfiprintf_r+0x214>)
 8015b96:	429c      	cmp	r4, r3
 8015b98:	d101      	bne.n	8015b9e <_vfiprintf_r+0xda>
 8015b9a:	68b4      	ldr	r4, [r6, #8]
 8015b9c:	e7a2      	b.n	8015ae4 <_vfiprintf_r+0x20>
 8015b9e:	4b4f      	ldr	r3, [pc, #316]	; (8015cdc <_vfiprintf_r+0x218>)
 8015ba0:	429c      	cmp	r4, r3
 8015ba2:	bf08      	it	eq
 8015ba4:	68f4      	ldreq	r4, [r6, #12]
 8015ba6:	e79d      	b.n	8015ae4 <_vfiprintf_r+0x20>
 8015ba8:	4621      	mov	r1, r4
 8015baa:	4630      	mov	r0, r6
 8015bac:	f7fe f9d6 	bl	8013f5c <__swsetup_r>
 8015bb0:	2800      	cmp	r0, #0
 8015bb2:	d09d      	beq.n	8015af0 <_vfiprintf_r+0x2c>
 8015bb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015bb8:	b01d      	add	sp, #116	; 0x74
 8015bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bbe:	46a8      	mov	r8, r5
 8015bc0:	e7a2      	b.n	8015b08 <_vfiprintf_r+0x44>
 8015bc2:	4a44      	ldr	r2, [pc, #272]	; (8015cd4 <_vfiprintf_r+0x210>)
 8015bc4:	1a80      	subs	r0, r0, r2
 8015bc6:	fa0b f000 	lsl.w	r0, fp, r0
 8015bca:	4318      	orrs	r0, r3
 8015bcc:	9004      	str	r0, [sp, #16]
 8015bce:	4645      	mov	r5, r8
 8015bd0:	e7be      	b.n	8015b50 <_vfiprintf_r+0x8c>
 8015bd2:	9a03      	ldr	r2, [sp, #12]
 8015bd4:	1d11      	adds	r1, r2, #4
 8015bd6:	6812      	ldr	r2, [r2, #0]
 8015bd8:	9103      	str	r1, [sp, #12]
 8015bda:	2a00      	cmp	r2, #0
 8015bdc:	db01      	blt.n	8015be2 <_vfiprintf_r+0x11e>
 8015bde:	9207      	str	r2, [sp, #28]
 8015be0:	e004      	b.n	8015bec <_vfiprintf_r+0x128>
 8015be2:	4252      	negs	r2, r2
 8015be4:	f043 0302 	orr.w	r3, r3, #2
 8015be8:	9207      	str	r2, [sp, #28]
 8015bea:	9304      	str	r3, [sp, #16]
 8015bec:	f898 3000 	ldrb.w	r3, [r8]
 8015bf0:	2b2e      	cmp	r3, #46	; 0x2e
 8015bf2:	d10e      	bne.n	8015c12 <_vfiprintf_r+0x14e>
 8015bf4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8015bf8:	2b2a      	cmp	r3, #42	; 0x2a
 8015bfa:	d138      	bne.n	8015c6e <_vfiprintf_r+0x1aa>
 8015bfc:	9b03      	ldr	r3, [sp, #12]
 8015bfe:	1d1a      	adds	r2, r3, #4
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	9203      	str	r2, [sp, #12]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	bfb8      	it	lt
 8015c08:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015c0c:	f108 0802 	add.w	r8, r8, #2
 8015c10:	9305      	str	r3, [sp, #20]
 8015c12:	4d33      	ldr	r5, [pc, #204]	; (8015ce0 <_vfiprintf_r+0x21c>)
 8015c14:	f898 1000 	ldrb.w	r1, [r8]
 8015c18:	2203      	movs	r2, #3
 8015c1a:	4628      	mov	r0, r5
 8015c1c:	f7ea fab8 	bl	8000190 <memchr>
 8015c20:	b140      	cbz	r0, 8015c34 <_vfiprintf_r+0x170>
 8015c22:	2340      	movs	r3, #64	; 0x40
 8015c24:	1b40      	subs	r0, r0, r5
 8015c26:	fa03 f000 	lsl.w	r0, r3, r0
 8015c2a:	9b04      	ldr	r3, [sp, #16]
 8015c2c:	4303      	orrs	r3, r0
 8015c2e:	f108 0801 	add.w	r8, r8, #1
 8015c32:	9304      	str	r3, [sp, #16]
 8015c34:	f898 1000 	ldrb.w	r1, [r8]
 8015c38:	482a      	ldr	r0, [pc, #168]	; (8015ce4 <_vfiprintf_r+0x220>)
 8015c3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015c3e:	2206      	movs	r2, #6
 8015c40:	f108 0701 	add.w	r7, r8, #1
 8015c44:	f7ea faa4 	bl	8000190 <memchr>
 8015c48:	2800      	cmp	r0, #0
 8015c4a:	d037      	beq.n	8015cbc <_vfiprintf_r+0x1f8>
 8015c4c:	4b26      	ldr	r3, [pc, #152]	; (8015ce8 <_vfiprintf_r+0x224>)
 8015c4e:	bb1b      	cbnz	r3, 8015c98 <_vfiprintf_r+0x1d4>
 8015c50:	9b03      	ldr	r3, [sp, #12]
 8015c52:	3307      	adds	r3, #7
 8015c54:	f023 0307 	bic.w	r3, r3, #7
 8015c58:	3308      	adds	r3, #8
 8015c5a:	9303      	str	r3, [sp, #12]
 8015c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c5e:	444b      	add	r3, r9
 8015c60:	9309      	str	r3, [sp, #36]	; 0x24
 8015c62:	e750      	b.n	8015b06 <_vfiprintf_r+0x42>
 8015c64:	fb05 3202 	mla	r2, r5, r2, r3
 8015c68:	2001      	movs	r0, #1
 8015c6a:	4688      	mov	r8, r1
 8015c6c:	e78a      	b.n	8015b84 <_vfiprintf_r+0xc0>
 8015c6e:	2300      	movs	r3, #0
 8015c70:	f108 0801 	add.w	r8, r8, #1
 8015c74:	9305      	str	r3, [sp, #20]
 8015c76:	4619      	mov	r1, r3
 8015c78:	250a      	movs	r5, #10
 8015c7a:	4640      	mov	r0, r8
 8015c7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015c80:	3a30      	subs	r2, #48	; 0x30
 8015c82:	2a09      	cmp	r2, #9
 8015c84:	d903      	bls.n	8015c8e <_vfiprintf_r+0x1ca>
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d0c3      	beq.n	8015c12 <_vfiprintf_r+0x14e>
 8015c8a:	9105      	str	r1, [sp, #20]
 8015c8c:	e7c1      	b.n	8015c12 <_vfiprintf_r+0x14e>
 8015c8e:	fb05 2101 	mla	r1, r5, r1, r2
 8015c92:	2301      	movs	r3, #1
 8015c94:	4680      	mov	r8, r0
 8015c96:	e7f0      	b.n	8015c7a <_vfiprintf_r+0x1b6>
 8015c98:	ab03      	add	r3, sp, #12
 8015c9a:	9300      	str	r3, [sp, #0]
 8015c9c:	4622      	mov	r2, r4
 8015c9e:	4b13      	ldr	r3, [pc, #76]	; (8015cec <_vfiprintf_r+0x228>)
 8015ca0:	a904      	add	r1, sp, #16
 8015ca2:	4630      	mov	r0, r6
 8015ca4:	f7fd fc6a 	bl	801357c <_printf_float>
 8015ca8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8015cac:	4681      	mov	r9, r0
 8015cae:	d1d5      	bne.n	8015c5c <_vfiprintf_r+0x198>
 8015cb0:	89a3      	ldrh	r3, [r4, #12]
 8015cb2:	065b      	lsls	r3, r3, #25
 8015cb4:	f53f af7e 	bmi.w	8015bb4 <_vfiprintf_r+0xf0>
 8015cb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015cba:	e77d      	b.n	8015bb8 <_vfiprintf_r+0xf4>
 8015cbc:	ab03      	add	r3, sp, #12
 8015cbe:	9300      	str	r3, [sp, #0]
 8015cc0:	4622      	mov	r2, r4
 8015cc2:	4b0a      	ldr	r3, [pc, #40]	; (8015cec <_vfiprintf_r+0x228>)
 8015cc4:	a904      	add	r1, sp, #16
 8015cc6:	4630      	mov	r0, r6
 8015cc8:	f7fd ff0e 	bl	8013ae8 <_printf_i>
 8015ccc:	e7ec      	b.n	8015ca8 <_vfiprintf_r+0x1e4>
 8015cce:	bf00      	nop
 8015cd0:	08019238 	.word	0x08019238
 8015cd4:	08019374 	.word	0x08019374
 8015cd8:	08019258 	.word	0x08019258
 8015cdc:	08019218 	.word	0x08019218
 8015ce0:	0801937a 	.word	0x0801937a
 8015ce4:	0801937e 	.word	0x0801937e
 8015ce8:	0801357d 	.word	0x0801357d
 8015cec:	08015a9f 	.word	0x08015a9f

08015cf0 <_sbrk_r>:
 8015cf0:	b538      	push	{r3, r4, r5, lr}
 8015cf2:	4c06      	ldr	r4, [pc, #24]	; (8015d0c <_sbrk_r+0x1c>)
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	4605      	mov	r5, r0
 8015cf8:	4608      	mov	r0, r1
 8015cfa:	6023      	str	r3, [r4, #0]
 8015cfc:	f7f0 fdee 	bl	80068dc <_sbrk>
 8015d00:	1c43      	adds	r3, r0, #1
 8015d02:	d102      	bne.n	8015d0a <_sbrk_r+0x1a>
 8015d04:	6823      	ldr	r3, [r4, #0]
 8015d06:	b103      	cbz	r3, 8015d0a <_sbrk_r+0x1a>
 8015d08:	602b      	str	r3, [r5, #0]
 8015d0a:	bd38      	pop	{r3, r4, r5, pc}
 8015d0c:	2002e3ec 	.word	0x2002e3ec

08015d10 <__sread>:
 8015d10:	b510      	push	{r4, lr}
 8015d12:	460c      	mov	r4, r1
 8015d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d18:	f000 f8e8 	bl	8015eec <_read_r>
 8015d1c:	2800      	cmp	r0, #0
 8015d1e:	bfab      	itete	ge
 8015d20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015d22:	89a3      	ldrhlt	r3, [r4, #12]
 8015d24:	181b      	addge	r3, r3, r0
 8015d26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015d2a:	bfac      	ite	ge
 8015d2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8015d2e:	81a3      	strhlt	r3, [r4, #12]
 8015d30:	bd10      	pop	{r4, pc}

08015d32 <__swrite>:
 8015d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d36:	461f      	mov	r7, r3
 8015d38:	898b      	ldrh	r3, [r1, #12]
 8015d3a:	05db      	lsls	r3, r3, #23
 8015d3c:	4605      	mov	r5, r0
 8015d3e:	460c      	mov	r4, r1
 8015d40:	4616      	mov	r6, r2
 8015d42:	d505      	bpl.n	8015d50 <__swrite+0x1e>
 8015d44:	2302      	movs	r3, #2
 8015d46:	2200      	movs	r2, #0
 8015d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d4c:	f000 f868 	bl	8015e20 <_lseek_r>
 8015d50:	89a3      	ldrh	r3, [r4, #12]
 8015d52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015d56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015d5a:	81a3      	strh	r3, [r4, #12]
 8015d5c:	4632      	mov	r2, r6
 8015d5e:	463b      	mov	r3, r7
 8015d60:	4628      	mov	r0, r5
 8015d62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015d66:	f000 b817 	b.w	8015d98 <_write_r>

08015d6a <__sseek>:
 8015d6a:	b510      	push	{r4, lr}
 8015d6c:	460c      	mov	r4, r1
 8015d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d72:	f000 f855 	bl	8015e20 <_lseek_r>
 8015d76:	1c43      	adds	r3, r0, #1
 8015d78:	89a3      	ldrh	r3, [r4, #12]
 8015d7a:	bf15      	itete	ne
 8015d7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8015d7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015d82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015d86:	81a3      	strheq	r3, [r4, #12]
 8015d88:	bf18      	it	ne
 8015d8a:	81a3      	strhne	r3, [r4, #12]
 8015d8c:	bd10      	pop	{r4, pc}

08015d8e <__sclose>:
 8015d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d92:	f000 b813 	b.w	8015dbc <_close_r>
	...

08015d98 <_write_r>:
 8015d98:	b538      	push	{r3, r4, r5, lr}
 8015d9a:	4c07      	ldr	r4, [pc, #28]	; (8015db8 <_write_r+0x20>)
 8015d9c:	4605      	mov	r5, r0
 8015d9e:	4608      	mov	r0, r1
 8015da0:	4611      	mov	r1, r2
 8015da2:	2200      	movs	r2, #0
 8015da4:	6022      	str	r2, [r4, #0]
 8015da6:	461a      	mov	r2, r3
 8015da8:	f7f8 fbb8 	bl	800e51c <_write>
 8015dac:	1c43      	adds	r3, r0, #1
 8015dae:	d102      	bne.n	8015db6 <_write_r+0x1e>
 8015db0:	6823      	ldr	r3, [r4, #0]
 8015db2:	b103      	cbz	r3, 8015db6 <_write_r+0x1e>
 8015db4:	602b      	str	r3, [r5, #0]
 8015db6:	bd38      	pop	{r3, r4, r5, pc}
 8015db8:	2002e3ec 	.word	0x2002e3ec

08015dbc <_close_r>:
 8015dbc:	b538      	push	{r3, r4, r5, lr}
 8015dbe:	4c06      	ldr	r4, [pc, #24]	; (8015dd8 <_close_r+0x1c>)
 8015dc0:	2300      	movs	r3, #0
 8015dc2:	4605      	mov	r5, r0
 8015dc4:	4608      	mov	r0, r1
 8015dc6:	6023      	str	r3, [r4, #0]
 8015dc8:	f7f0 fd53 	bl	8006872 <_close>
 8015dcc:	1c43      	adds	r3, r0, #1
 8015dce:	d102      	bne.n	8015dd6 <_close_r+0x1a>
 8015dd0:	6823      	ldr	r3, [r4, #0]
 8015dd2:	b103      	cbz	r3, 8015dd6 <_close_r+0x1a>
 8015dd4:	602b      	str	r3, [r5, #0]
 8015dd6:	bd38      	pop	{r3, r4, r5, pc}
 8015dd8:	2002e3ec 	.word	0x2002e3ec

08015ddc <_fstat_r>:
 8015ddc:	b538      	push	{r3, r4, r5, lr}
 8015dde:	4c07      	ldr	r4, [pc, #28]	; (8015dfc <_fstat_r+0x20>)
 8015de0:	2300      	movs	r3, #0
 8015de2:	4605      	mov	r5, r0
 8015de4:	4608      	mov	r0, r1
 8015de6:	4611      	mov	r1, r2
 8015de8:	6023      	str	r3, [r4, #0]
 8015dea:	f7f0 fd4e 	bl	800688a <_fstat>
 8015dee:	1c43      	adds	r3, r0, #1
 8015df0:	d102      	bne.n	8015df8 <_fstat_r+0x1c>
 8015df2:	6823      	ldr	r3, [r4, #0]
 8015df4:	b103      	cbz	r3, 8015df8 <_fstat_r+0x1c>
 8015df6:	602b      	str	r3, [r5, #0]
 8015df8:	bd38      	pop	{r3, r4, r5, pc}
 8015dfa:	bf00      	nop
 8015dfc:	2002e3ec 	.word	0x2002e3ec

08015e00 <_isatty_r>:
 8015e00:	b538      	push	{r3, r4, r5, lr}
 8015e02:	4c06      	ldr	r4, [pc, #24]	; (8015e1c <_isatty_r+0x1c>)
 8015e04:	2300      	movs	r3, #0
 8015e06:	4605      	mov	r5, r0
 8015e08:	4608      	mov	r0, r1
 8015e0a:	6023      	str	r3, [r4, #0]
 8015e0c:	f7f0 fd4d 	bl	80068aa <_isatty>
 8015e10:	1c43      	adds	r3, r0, #1
 8015e12:	d102      	bne.n	8015e1a <_isatty_r+0x1a>
 8015e14:	6823      	ldr	r3, [r4, #0]
 8015e16:	b103      	cbz	r3, 8015e1a <_isatty_r+0x1a>
 8015e18:	602b      	str	r3, [r5, #0]
 8015e1a:	bd38      	pop	{r3, r4, r5, pc}
 8015e1c:	2002e3ec 	.word	0x2002e3ec

08015e20 <_lseek_r>:
 8015e20:	b538      	push	{r3, r4, r5, lr}
 8015e22:	4c07      	ldr	r4, [pc, #28]	; (8015e40 <_lseek_r+0x20>)
 8015e24:	4605      	mov	r5, r0
 8015e26:	4608      	mov	r0, r1
 8015e28:	4611      	mov	r1, r2
 8015e2a:	2200      	movs	r2, #0
 8015e2c:	6022      	str	r2, [r4, #0]
 8015e2e:	461a      	mov	r2, r3
 8015e30:	f7f0 fd46 	bl	80068c0 <_lseek>
 8015e34:	1c43      	adds	r3, r0, #1
 8015e36:	d102      	bne.n	8015e3e <_lseek_r+0x1e>
 8015e38:	6823      	ldr	r3, [r4, #0]
 8015e3a:	b103      	cbz	r3, 8015e3e <_lseek_r+0x1e>
 8015e3c:	602b      	str	r3, [r5, #0]
 8015e3e:	bd38      	pop	{r3, r4, r5, pc}
 8015e40:	2002e3ec 	.word	0x2002e3ec

08015e44 <__ascii_mbtowc>:
 8015e44:	b082      	sub	sp, #8
 8015e46:	b901      	cbnz	r1, 8015e4a <__ascii_mbtowc+0x6>
 8015e48:	a901      	add	r1, sp, #4
 8015e4a:	b142      	cbz	r2, 8015e5e <__ascii_mbtowc+0x1a>
 8015e4c:	b14b      	cbz	r3, 8015e62 <__ascii_mbtowc+0x1e>
 8015e4e:	7813      	ldrb	r3, [r2, #0]
 8015e50:	600b      	str	r3, [r1, #0]
 8015e52:	7812      	ldrb	r2, [r2, #0]
 8015e54:	1c10      	adds	r0, r2, #0
 8015e56:	bf18      	it	ne
 8015e58:	2001      	movne	r0, #1
 8015e5a:	b002      	add	sp, #8
 8015e5c:	4770      	bx	lr
 8015e5e:	4610      	mov	r0, r2
 8015e60:	e7fb      	b.n	8015e5a <__ascii_mbtowc+0x16>
 8015e62:	f06f 0001 	mvn.w	r0, #1
 8015e66:	e7f8      	b.n	8015e5a <__ascii_mbtowc+0x16>

08015e68 <memmove>:
 8015e68:	4288      	cmp	r0, r1
 8015e6a:	b510      	push	{r4, lr}
 8015e6c:	eb01 0302 	add.w	r3, r1, r2
 8015e70:	d807      	bhi.n	8015e82 <memmove+0x1a>
 8015e72:	1e42      	subs	r2, r0, #1
 8015e74:	4299      	cmp	r1, r3
 8015e76:	d00a      	beq.n	8015e8e <memmove+0x26>
 8015e78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e7c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015e80:	e7f8      	b.n	8015e74 <memmove+0xc>
 8015e82:	4283      	cmp	r3, r0
 8015e84:	d9f5      	bls.n	8015e72 <memmove+0xa>
 8015e86:	1881      	adds	r1, r0, r2
 8015e88:	1ad2      	subs	r2, r2, r3
 8015e8a:	42d3      	cmn	r3, r2
 8015e8c:	d100      	bne.n	8015e90 <memmove+0x28>
 8015e8e:	bd10      	pop	{r4, pc}
 8015e90:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015e94:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015e98:	e7f7      	b.n	8015e8a <memmove+0x22>

08015e9a <__malloc_lock>:
 8015e9a:	4770      	bx	lr

08015e9c <__malloc_unlock>:
 8015e9c:	4770      	bx	lr

08015e9e <_realloc_r>:
 8015e9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ea0:	4607      	mov	r7, r0
 8015ea2:	4614      	mov	r4, r2
 8015ea4:	460e      	mov	r6, r1
 8015ea6:	b921      	cbnz	r1, 8015eb2 <_realloc_r+0x14>
 8015ea8:	4611      	mov	r1, r2
 8015eaa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015eae:	f7ff bc33 	b.w	8015718 <_malloc_r>
 8015eb2:	b922      	cbnz	r2, 8015ebe <_realloc_r+0x20>
 8015eb4:	f7ff fbe2 	bl	801567c <_free_r>
 8015eb8:	4625      	mov	r5, r4
 8015eba:	4628      	mov	r0, r5
 8015ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ebe:	f000 f834 	bl	8015f2a <_malloc_usable_size_r>
 8015ec2:	42a0      	cmp	r0, r4
 8015ec4:	d20f      	bcs.n	8015ee6 <_realloc_r+0x48>
 8015ec6:	4621      	mov	r1, r4
 8015ec8:	4638      	mov	r0, r7
 8015eca:	f7ff fc25 	bl	8015718 <_malloc_r>
 8015ece:	4605      	mov	r5, r0
 8015ed0:	2800      	cmp	r0, #0
 8015ed2:	d0f2      	beq.n	8015eba <_realloc_r+0x1c>
 8015ed4:	4631      	mov	r1, r6
 8015ed6:	4622      	mov	r2, r4
 8015ed8:	f7fd faa8 	bl	801342c <memcpy>
 8015edc:	4631      	mov	r1, r6
 8015ede:	4638      	mov	r0, r7
 8015ee0:	f7ff fbcc 	bl	801567c <_free_r>
 8015ee4:	e7e9      	b.n	8015eba <_realloc_r+0x1c>
 8015ee6:	4635      	mov	r5, r6
 8015ee8:	e7e7      	b.n	8015eba <_realloc_r+0x1c>
	...

08015eec <_read_r>:
 8015eec:	b538      	push	{r3, r4, r5, lr}
 8015eee:	4c07      	ldr	r4, [pc, #28]	; (8015f0c <_read_r+0x20>)
 8015ef0:	4605      	mov	r5, r0
 8015ef2:	4608      	mov	r0, r1
 8015ef4:	4611      	mov	r1, r2
 8015ef6:	2200      	movs	r2, #0
 8015ef8:	6022      	str	r2, [r4, #0]
 8015efa:	461a      	mov	r2, r3
 8015efc:	f7f0 fc9c 	bl	8006838 <_read>
 8015f00:	1c43      	adds	r3, r0, #1
 8015f02:	d102      	bne.n	8015f0a <_read_r+0x1e>
 8015f04:	6823      	ldr	r3, [r4, #0]
 8015f06:	b103      	cbz	r3, 8015f0a <_read_r+0x1e>
 8015f08:	602b      	str	r3, [r5, #0]
 8015f0a:	bd38      	pop	{r3, r4, r5, pc}
 8015f0c:	2002e3ec 	.word	0x2002e3ec

08015f10 <__ascii_wctomb>:
 8015f10:	b149      	cbz	r1, 8015f26 <__ascii_wctomb+0x16>
 8015f12:	2aff      	cmp	r2, #255	; 0xff
 8015f14:	bf85      	ittet	hi
 8015f16:	238a      	movhi	r3, #138	; 0x8a
 8015f18:	6003      	strhi	r3, [r0, #0]
 8015f1a:	700a      	strbls	r2, [r1, #0]
 8015f1c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8015f20:	bf98      	it	ls
 8015f22:	2001      	movls	r0, #1
 8015f24:	4770      	bx	lr
 8015f26:	4608      	mov	r0, r1
 8015f28:	4770      	bx	lr

08015f2a <_malloc_usable_size_r>:
 8015f2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015f2e:	1f18      	subs	r0, r3, #4
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	bfbc      	itt	lt
 8015f34:	580b      	ldrlt	r3, [r1, r0]
 8015f36:	18c0      	addlt	r0, r0, r3
 8015f38:	4770      	bx	lr
	...

08015f3c <round>:
 8015f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f3e:	ec57 6b10 	vmov	r6, r7, d0
 8015f42:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8015f46:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8015f4a:	2c13      	cmp	r4, #19
 8015f4c:	463b      	mov	r3, r7
 8015f4e:	463d      	mov	r5, r7
 8015f50:	dc17      	bgt.n	8015f82 <round+0x46>
 8015f52:	2c00      	cmp	r4, #0
 8015f54:	da09      	bge.n	8015f6a <round+0x2e>
 8015f56:	3401      	adds	r4, #1
 8015f58:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8015f5c:	d103      	bne.n	8015f66 <round+0x2a>
 8015f5e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8015f62:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015f66:	2100      	movs	r1, #0
 8015f68:	e02c      	b.n	8015fc4 <round+0x88>
 8015f6a:	4a18      	ldr	r2, [pc, #96]	; (8015fcc <round+0x90>)
 8015f6c:	4122      	asrs	r2, r4
 8015f6e:	4217      	tst	r7, r2
 8015f70:	d100      	bne.n	8015f74 <round+0x38>
 8015f72:	b19e      	cbz	r6, 8015f9c <round+0x60>
 8015f74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8015f78:	4123      	asrs	r3, r4
 8015f7a:	442b      	add	r3, r5
 8015f7c:	ea23 0302 	bic.w	r3, r3, r2
 8015f80:	e7f1      	b.n	8015f66 <round+0x2a>
 8015f82:	2c33      	cmp	r4, #51	; 0x33
 8015f84:	dd0d      	ble.n	8015fa2 <round+0x66>
 8015f86:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8015f8a:	d107      	bne.n	8015f9c <round+0x60>
 8015f8c:	4630      	mov	r0, r6
 8015f8e:	4639      	mov	r1, r7
 8015f90:	ee10 2a10 	vmov	r2, s0
 8015f94:	f7ea f952 	bl	800023c <__adddf3>
 8015f98:	4606      	mov	r6, r0
 8015f9a:	460f      	mov	r7, r1
 8015f9c:	ec47 6b10 	vmov	d0, r6, r7
 8015fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015fa2:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8015fa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015faa:	40d0      	lsrs	r0, r2
 8015fac:	4206      	tst	r6, r0
 8015fae:	d0f5      	beq.n	8015f9c <round+0x60>
 8015fb0:	2201      	movs	r2, #1
 8015fb2:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8015fb6:	fa02 f404 	lsl.w	r4, r2, r4
 8015fba:	1931      	adds	r1, r6, r4
 8015fbc:	bf28      	it	cs
 8015fbe:	189b      	addcs	r3, r3, r2
 8015fc0:	ea21 0100 	bic.w	r1, r1, r0
 8015fc4:	461f      	mov	r7, r3
 8015fc6:	460e      	mov	r6, r1
 8015fc8:	e7e8      	b.n	8015f9c <round+0x60>
 8015fca:	bf00      	nop
 8015fcc:	000fffff 	.word	0x000fffff

08015fd0 <pow>:
 8015fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fd4:	ed2d 8b04 	vpush	{d8-d9}
 8015fd8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80162ac <pow+0x2dc>
 8015fdc:	b08d      	sub	sp, #52	; 0x34
 8015fde:	ec57 6b10 	vmov	r6, r7, d0
 8015fe2:	ec55 4b11 	vmov	r4, r5, d1
 8015fe6:	f000 f963 	bl	80162b0 <__ieee754_pow>
 8015fea:	f999 3000 	ldrsb.w	r3, [r9]
 8015fee:	9300      	str	r3, [sp, #0]
 8015ff0:	3301      	adds	r3, #1
 8015ff2:	eeb0 8a40 	vmov.f32	s16, s0
 8015ff6:	eef0 8a60 	vmov.f32	s17, s1
 8015ffa:	46c8      	mov	r8, r9
 8015ffc:	d05f      	beq.n	80160be <pow+0xee>
 8015ffe:	4622      	mov	r2, r4
 8016000:	462b      	mov	r3, r5
 8016002:	4620      	mov	r0, r4
 8016004:	4629      	mov	r1, r5
 8016006:	f7ea fd69 	bl	8000adc <__aeabi_dcmpun>
 801600a:	4683      	mov	fp, r0
 801600c:	2800      	cmp	r0, #0
 801600e:	d156      	bne.n	80160be <pow+0xee>
 8016010:	4632      	mov	r2, r6
 8016012:	463b      	mov	r3, r7
 8016014:	4630      	mov	r0, r6
 8016016:	4639      	mov	r1, r7
 8016018:	f7ea fd60 	bl	8000adc <__aeabi_dcmpun>
 801601c:	9001      	str	r0, [sp, #4]
 801601e:	b1e8      	cbz	r0, 801605c <pow+0x8c>
 8016020:	2200      	movs	r2, #0
 8016022:	2300      	movs	r3, #0
 8016024:	4620      	mov	r0, r4
 8016026:	4629      	mov	r1, r5
 8016028:	f7ea fd26 	bl	8000a78 <__aeabi_dcmpeq>
 801602c:	2800      	cmp	r0, #0
 801602e:	d046      	beq.n	80160be <pow+0xee>
 8016030:	2301      	movs	r3, #1
 8016032:	9302      	str	r3, [sp, #8]
 8016034:	4b96      	ldr	r3, [pc, #600]	; (8016290 <pow+0x2c0>)
 8016036:	9303      	str	r3, [sp, #12]
 8016038:	4b96      	ldr	r3, [pc, #600]	; (8016294 <pow+0x2c4>)
 801603a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801603e:	2200      	movs	r2, #0
 8016040:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016044:	9b00      	ldr	r3, [sp, #0]
 8016046:	2b02      	cmp	r3, #2
 8016048:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801604c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016050:	d033      	beq.n	80160ba <pow+0xea>
 8016052:	a802      	add	r0, sp, #8
 8016054:	f000 fefb 	bl	8016e4e <matherr>
 8016058:	bb48      	cbnz	r0, 80160ae <pow+0xde>
 801605a:	e05d      	b.n	8016118 <pow+0x148>
 801605c:	f04f 0a00 	mov.w	sl, #0
 8016060:	f04f 0b00 	mov.w	fp, #0
 8016064:	4652      	mov	r2, sl
 8016066:	465b      	mov	r3, fp
 8016068:	4630      	mov	r0, r6
 801606a:	4639      	mov	r1, r7
 801606c:	f7ea fd04 	bl	8000a78 <__aeabi_dcmpeq>
 8016070:	ec4b ab19 	vmov	d9, sl, fp
 8016074:	2800      	cmp	r0, #0
 8016076:	d054      	beq.n	8016122 <pow+0x152>
 8016078:	4652      	mov	r2, sl
 801607a:	465b      	mov	r3, fp
 801607c:	4620      	mov	r0, r4
 801607e:	4629      	mov	r1, r5
 8016080:	f7ea fcfa 	bl	8000a78 <__aeabi_dcmpeq>
 8016084:	4680      	mov	r8, r0
 8016086:	b318      	cbz	r0, 80160d0 <pow+0x100>
 8016088:	2301      	movs	r3, #1
 801608a:	9302      	str	r3, [sp, #8]
 801608c:	4b80      	ldr	r3, [pc, #512]	; (8016290 <pow+0x2c0>)
 801608e:	9303      	str	r3, [sp, #12]
 8016090:	9b01      	ldr	r3, [sp, #4]
 8016092:	930a      	str	r3, [sp, #40]	; 0x28
 8016094:	9b00      	ldr	r3, [sp, #0]
 8016096:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801609a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801609e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d0d5      	beq.n	8016052 <pow+0x82>
 80160a6:	4b7b      	ldr	r3, [pc, #492]	; (8016294 <pow+0x2c4>)
 80160a8:	2200      	movs	r2, #0
 80160aa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80160ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160b0:	b11b      	cbz	r3, 80160ba <pow+0xea>
 80160b2:	f7fd f991 	bl	80133d8 <__errno>
 80160b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160b8:	6003      	str	r3, [r0, #0]
 80160ba:	ed9d 8b08 	vldr	d8, [sp, #32]
 80160be:	eeb0 0a48 	vmov.f32	s0, s16
 80160c2:	eef0 0a68 	vmov.f32	s1, s17
 80160c6:	b00d      	add	sp, #52	; 0x34
 80160c8:	ecbd 8b04 	vpop	{d8-d9}
 80160cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160d0:	ec45 4b10 	vmov	d0, r4, r5
 80160d4:	f000 feb3 	bl	8016e3e <finite>
 80160d8:	2800      	cmp	r0, #0
 80160da:	d0f0      	beq.n	80160be <pow+0xee>
 80160dc:	4652      	mov	r2, sl
 80160de:	465b      	mov	r3, fp
 80160e0:	4620      	mov	r0, r4
 80160e2:	4629      	mov	r1, r5
 80160e4:	f7ea fcd2 	bl	8000a8c <__aeabi_dcmplt>
 80160e8:	2800      	cmp	r0, #0
 80160ea:	d0e8      	beq.n	80160be <pow+0xee>
 80160ec:	2301      	movs	r3, #1
 80160ee:	9302      	str	r3, [sp, #8]
 80160f0:	4b67      	ldr	r3, [pc, #412]	; (8016290 <pow+0x2c0>)
 80160f2:	9303      	str	r3, [sp, #12]
 80160f4:	f999 3000 	ldrsb.w	r3, [r9]
 80160f8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80160fc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016100:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016104:	b913      	cbnz	r3, 801610c <pow+0x13c>
 8016106:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801610a:	e7a2      	b.n	8016052 <pow+0x82>
 801610c:	4962      	ldr	r1, [pc, #392]	; (8016298 <pow+0x2c8>)
 801610e:	2000      	movs	r0, #0
 8016110:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016114:	2b02      	cmp	r3, #2
 8016116:	d19c      	bne.n	8016052 <pow+0x82>
 8016118:	f7fd f95e 	bl	80133d8 <__errno>
 801611c:	2321      	movs	r3, #33	; 0x21
 801611e:	6003      	str	r3, [r0, #0]
 8016120:	e7c5      	b.n	80160ae <pow+0xde>
 8016122:	eeb0 0a48 	vmov.f32	s0, s16
 8016126:	eef0 0a68 	vmov.f32	s1, s17
 801612a:	f000 fe88 	bl	8016e3e <finite>
 801612e:	9000      	str	r0, [sp, #0]
 8016130:	2800      	cmp	r0, #0
 8016132:	f040 8081 	bne.w	8016238 <pow+0x268>
 8016136:	ec47 6b10 	vmov	d0, r6, r7
 801613a:	f000 fe80 	bl	8016e3e <finite>
 801613e:	2800      	cmp	r0, #0
 8016140:	d07a      	beq.n	8016238 <pow+0x268>
 8016142:	ec45 4b10 	vmov	d0, r4, r5
 8016146:	f000 fe7a 	bl	8016e3e <finite>
 801614a:	2800      	cmp	r0, #0
 801614c:	d074      	beq.n	8016238 <pow+0x268>
 801614e:	ec53 2b18 	vmov	r2, r3, d8
 8016152:	ee18 0a10 	vmov	r0, s16
 8016156:	4619      	mov	r1, r3
 8016158:	f7ea fcc0 	bl	8000adc <__aeabi_dcmpun>
 801615c:	f999 9000 	ldrsb.w	r9, [r9]
 8016160:	4b4b      	ldr	r3, [pc, #300]	; (8016290 <pow+0x2c0>)
 8016162:	b1b0      	cbz	r0, 8016192 <pow+0x1c2>
 8016164:	2201      	movs	r2, #1
 8016166:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801616a:	9b00      	ldr	r3, [sp, #0]
 801616c:	930a      	str	r3, [sp, #40]	; 0x28
 801616e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016172:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016176:	f1b9 0f00 	cmp.w	r9, #0
 801617a:	d0c4      	beq.n	8016106 <pow+0x136>
 801617c:	4652      	mov	r2, sl
 801617e:	465b      	mov	r3, fp
 8016180:	4650      	mov	r0, sl
 8016182:	4659      	mov	r1, fp
 8016184:	f7ea fb3a 	bl	80007fc <__aeabi_ddiv>
 8016188:	f1b9 0f02 	cmp.w	r9, #2
 801618c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016190:	e7c1      	b.n	8016116 <pow+0x146>
 8016192:	2203      	movs	r2, #3
 8016194:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016198:	900a      	str	r0, [sp, #40]	; 0x28
 801619a:	4629      	mov	r1, r5
 801619c:	4620      	mov	r0, r4
 801619e:	2200      	movs	r2, #0
 80161a0:	4b3e      	ldr	r3, [pc, #248]	; (801629c <pow+0x2cc>)
 80161a2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80161a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80161aa:	f7ea f9fd 	bl	80005a8 <__aeabi_dmul>
 80161ae:	4604      	mov	r4, r0
 80161b0:	460d      	mov	r5, r1
 80161b2:	f1b9 0f00 	cmp.w	r9, #0
 80161b6:	d124      	bne.n	8016202 <pow+0x232>
 80161b8:	4b39      	ldr	r3, [pc, #228]	; (80162a0 <pow+0x2d0>)
 80161ba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80161be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80161c2:	4630      	mov	r0, r6
 80161c4:	4652      	mov	r2, sl
 80161c6:	465b      	mov	r3, fp
 80161c8:	4639      	mov	r1, r7
 80161ca:	f7ea fc5f 	bl	8000a8c <__aeabi_dcmplt>
 80161ce:	2800      	cmp	r0, #0
 80161d0:	d056      	beq.n	8016280 <pow+0x2b0>
 80161d2:	ec45 4b10 	vmov	d0, r4, r5
 80161d6:	f000 fe47 	bl	8016e68 <rint>
 80161da:	4622      	mov	r2, r4
 80161dc:	462b      	mov	r3, r5
 80161de:	ec51 0b10 	vmov	r0, r1, d0
 80161e2:	f7ea fc49 	bl	8000a78 <__aeabi_dcmpeq>
 80161e6:	b920      	cbnz	r0, 80161f2 <pow+0x222>
 80161e8:	4b2e      	ldr	r3, [pc, #184]	; (80162a4 <pow+0x2d4>)
 80161ea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80161ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80161f2:	f998 3000 	ldrsb.w	r3, [r8]
 80161f6:	2b02      	cmp	r3, #2
 80161f8:	d142      	bne.n	8016280 <pow+0x2b0>
 80161fa:	f7fd f8ed 	bl	80133d8 <__errno>
 80161fe:	2322      	movs	r3, #34	; 0x22
 8016200:	e78d      	b.n	801611e <pow+0x14e>
 8016202:	4b29      	ldr	r3, [pc, #164]	; (80162a8 <pow+0x2d8>)
 8016204:	2200      	movs	r2, #0
 8016206:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801620a:	4630      	mov	r0, r6
 801620c:	4652      	mov	r2, sl
 801620e:	465b      	mov	r3, fp
 8016210:	4639      	mov	r1, r7
 8016212:	f7ea fc3b 	bl	8000a8c <__aeabi_dcmplt>
 8016216:	2800      	cmp	r0, #0
 8016218:	d0eb      	beq.n	80161f2 <pow+0x222>
 801621a:	ec45 4b10 	vmov	d0, r4, r5
 801621e:	f000 fe23 	bl	8016e68 <rint>
 8016222:	4622      	mov	r2, r4
 8016224:	462b      	mov	r3, r5
 8016226:	ec51 0b10 	vmov	r0, r1, d0
 801622a:	f7ea fc25 	bl	8000a78 <__aeabi_dcmpeq>
 801622e:	2800      	cmp	r0, #0
 8016230:	d1df      	bne.n	80161f2 <pow+0x222>
 8016232:	2200      	movs	r2, #0
 8016234:	4b18      	ldr	r3, [pc, #96]	; (8016298 <pow+0x2c8>)
 8016236:	e7da      	b.n	80161ee <pow+0x21e>
 8016238:	2200      	movs	r2, #0
 801623a:	2300      	movs	r3, #0
 801623c:	ec51 0b18 	vmov	r0, r1, d8
 8016240:	f7ea fc1a 	bl	8000a78 <__aeabi_dcmpeq>
 8016244:	2800      	cmp	r0, #0
 8016246:	f43f af3a 	beq.w	80160be <pow+0xee>
 801624a:	ec47 6b10 	vmov	d0, r6, r7
 801624e:	f000 fdf6 	bl	8016e3e <finite>
 8016252:	2800      	cmp	r0, #0
 8016254:	f43f af33 	beq.w	80160be <pow+0xee>
 8016258:	ec45 4b10 	vmov	d0, r4, r5
 801625c:	f000 fdef 	bl	8016e3e <finite>
 8016260:	2800      	cmp	r0, #0
 8016262:	f43f af2c 	beq.w	80160be <pow+0xee>
 8016266:	2304      	movs	r3, #4
 8016268:	9302      	str	r3, [sp, #8]
 801626a:	4b09      	ldr	r3, [pc, #36]	; (8016290 <pow+0x2c0>)
 801626c:	9303      	str	r3, [sp, #12]
 801626e:	2300      	movs	r3, #0
 8016270:	930a      	str	r3, [sp, #40]	; 0x28
 8016272:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016276:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801627a:	ed8d 9b08 	vstr	d9, [sp, #32]
 801627e:	e7b8      	b.n	80161f2 <pow+0x222>
 8016280:	a802      	add	r0, sp, #8
 8016282:	f000 fde4 	bl	8016e4e <matherr>
 8016286:	2800      	cmp	r0, #0
 8016288:	f47f af11 	bne.w	80160ae <pow+0xde>
 801628c:	e7b5      	b.n	80161fa <pow+0x22a>
 801628e:	bf00      	nop
 8016290:	08019490 	.word	0x08019490
 8016294:	3ff00000 	.word	0x3ff00000
 8016298:	fff00000 	.word	0xfff00000
 801629c:	3fe00000 	.word	0x3fe00000
 80162a0:	47efffff 	.word	0x47efffff
 80162a4:	c7efffff 	.word	0xc7efffff
 80162a8:	7ff00000 	.word	0x7ff00000
 80162ac:	200001f4 	.word	0x200001f4

080162b0 <__ieee754_pow>:
 80162b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162b4:	b091      	sub	sp, #68	; 0x44
 80162b6:	ed8d 1b00 	vstr	d1, [sp]
 80162ba:	e9dd 2900 	ldrd	r2, r9, [sp]
 80162be:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80162c2:	ea58 0302 	orrs.w	r3, r8, r2
 80162c6:	ec57 6b10 	vmov	r6, r7, d0
 80162ca:	f000 84be 	beq.w	8016c4a <__ieee754_pow+0x99a>
 80162ce:	4b7a      	ldr	r3, [pc, #488]	; (80164b8 <__ieee754_pow+0x208>)
 80162d0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80162d4:	429c      	cmp	r4, r3
 80162d6:	463d      	mov	r5, r7
 80162d8:	ee10 aa10 	vmov	sl, s0
 80162dc:	dc09      	bgt.n	80162f2 <__ieee754_pow+0x42>
 80162de:	d103      	bne.n	80162e8 <__ieee754_pow+0x38>
 80162e0:	b93e      	cbnz	r6, 80162f2 <__ieee754_pow+0x42>
 80162e2:	45a0      	cmp	r8, r4
 80162e4:	dc0d      	bgt.n	8016302 <__ieee754_pow+0x52>
 80162e6:	e001      	b.n	80162ec <__ieee754_pow+0x3c>
 80162e8:	4598      	cmp	r8, r3
 80162ea:	dc02      	bgt.n	80162f2 <__ieee754_pow+0x42>
 80162ec:	4598      	cmp	r8, r3
 80162ee:	d10e      	bne.n	801630e <__ieee754_pow+0x5e>
 80162f0:	b16a      	cbz	r2, 801630e <__ieee754_pow+0x5e>
 80162f2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80162f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80162fa:	ea54 030a 	orrs.w	r3, r4, sl
 80162fe:	f000 84a4 	beq.w	8016c4a <__ieee754_pow+0x99a>
 8016302:	486e      	ldr	r0, [pc, #440]	; (80164bc <__ieee754_pow+0x20c>)
 8016304:	b011      	add	sp, #68	; 0x44
 8016306:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801630a:	f000 bda5 	b.w	8016e58 <nan>
 801630e:	2d00      	cmp	r5, #0
 8016310:	da53      	bge.n	80163ba <__ieee754_pow+0x10a>
 8016312:	4b6b      	ldr	r3, [pc, #428]	; (80164c0 <__ieee754_pow+0x210>)
 8016314:	4598      	cmp	r8, r3
 8016316:	dc4d      	bgt.n	80163b4 <__ieee754_pow+0x104>
 8016318:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801631c:	4598      	cmp	r8, r3
 801631e:	dd4c      	ble.n	80163ba <__ieee754_pow+0x10a>
 8016320:	ea4f 5328 	mov.w	r3, r8, asr #20
 8016324:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016328:	2b14      	cmp	r3, #20
 801632a:	dd26      	ble.n	801637a <__ieee754_pow+0xca>
 801632c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8016330:	fa22 f103 	lsr.w	r1, r2, r3
 8016334:	fa01 f303 	lsl.w	r3, r1, r3
 8016338:	4293      	cmp	r3, r2
 801633a:	d13e      	bne.n	80163ba <__ieee754_pow+0x10a>
 801633c:	f001 0101 	and.w	r1, r1, #1
 8016340:	f1c1 0b02 	rsb	fp, r1, #2
 8016344:	2a00      	cmp	r2, #0
 8016346:	d15b      	bne.n	8016400 <__ieee754_pow+0x150>
 8016348:	4b5b      	ldr	r3, [pc, #364]	; (80164b8 <__ieee754_pow+0x208>)
 801634a:	4598      	cmp	r8, r3
 801634c:	d124      	bne.n	8016398 <__ieee754_pow+0xe8>
 801634e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8016352:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8016356:	ea53 030a 	orrs.w	r3, r3, sl
 801635a:	f000 8476 	beq.w	8016c4a <__ieee754_pow+0x99a>
 801635e:	4b59      	ldr	r3, [pc, #356]	; (80164c4 <__ieee754_pow+0x214>)
 8016360:	429c      	cmp	r4, r3
 8016362:	dd2d      	ble.n	80163c0 <__ieee754_pow+0x110>
 8016364:	f1b9 0f00 	cmp.w	r9, #0
 8016368:	f280 8473 	bge.w	8016c52 <__ieee754_pow+0x9a2>
 801636c:	2000      	movs	r0, #0
 801636e:	2100      	movs	r1, #0
 8016370:	ec41 0b10 	vmov	d0, r0, r1
 8016374:	b011      	add	sp, #68	; 0x44
 8016376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801637a:	2a00      	cmp	r2, #0
 801637c:	d13e      	bne.n	80163fc <__ieee754_pow+0x14c>
 801637e:	f1c3 0314 	rsb	r3, r3, #20
 8016382:	fa48 f103 	asr.w	r1, r8, r3
 8016386:	fa01 f303 	lsl.w	r3, r1, r3
 801638a:	4543      	cmp	r3, r8
 801638c:	f040 8469 	bne.w	8016c62 <__ieee754_pow+0x9b2>
 8016390:	f001 0101 	and.w	r1, r1, #1
 8016394:	f1c1 0b02 	rsb	fp, r1, #2
 8016398:	4b4b      	ldr	r3, [pc, #300]	; (80164c8 <__ieee754_pow+0x218>)
 801639a:	4598      	cmp	r8, r3
 801639c:	d118      	bne.n	80163d0 <__ieee754_pow+0x120>
 801639e:	f1b9 0f00 	cmp.w	r9, #0
 80163a2:	f280 845a 	bge.w	8016c5a <__ieee754_pow+0x9aa>
 80163a6:	4948      	ldr	r1, [pc, #288]	; (80164c8 <__ieee754_pow+0x218>)
 80163a8:	4632      	mov	r2, r6
 80163aa:	463b      	mov	r3, r7
 80163ac:	2000      	movs	r0, #0
 80163ae:	f7ea fa25 	bl	80007fc <__aeabi_ddiv>
 80163b2:	e7dd      	b.n	8016370 <__ieee754_pow+0xc0>
 80163b4:	f04f 0b02 	mov.w	fp, #2
 80163b8:	e7c4      	b.n	8016344 <__ieee754_pow+0x94>
 80163ba:	f04f 0b00 	mov.w	fp, #0
 80163be:	e7c1      	b.n	8016344 <__ieee754_pow+0x94>
 80163c0:	f1b9 0f00 	cmp.w	r9, #0
 80163c4:	dad2      	bge.n	801636c <__ieee754_pow+0xbc>
 80163c6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80163ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80163ce:	e7cf      	b.n	8016370 <__ieee754_pow+0xc0>
 80163d0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80163d4:	d106      	bne.n	80163e4 <__ieee754_pow+0x134>
 80163d6:	4632      	mov	r2, r6
 80163d8:	463b      	mov	r3, r7
 80163da:	4610      	mov	r0, r2
 80163dc:	4619      	mov	r1, r3
 80163de:	f7ea f8e3 	bl	80005a8 <__aeabi_dmul>
 80163e2:	e7c5      	b.n	8016370 <__ieee754_pow+0xc0>
 80163e4:	4b39      	ldr	r3, [pc, #228]	; (80164cc <__ieee754_pow+0x21c>)
 80163e6:	4599      	cmp	r9, r3
 80163e8:	d10a      	bne.n	8016400 <__ieee754_pow+0x150>
 80163ea:	2d00      	cmp	r5, #0
 80163ec:	db08      	blt.n	8016400 <__ieee754_pow+0x150>
 80163ee:	ec47 6b10 	vmov	d0, r6, r7
 80163f2:	b011      	add	sp, #68	; 0x44
 80163f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163f8:	f000 bc68 	b.w	8016ccc <__ieee754_sqrt>
 80163fc:	f04f 0b00 	mov.w	fp, #0
 8016400:	ec47 6b10 	vmov	d0, r6, r7
 8016404:	f000 fd12 	bl	8016e2c <fabs>
 8016408:	ec51 0b10 	vmov	r0, r1, d0
 801640c:	f1ba 0f00 	cmp.w	sl, #0
 8016410:	d127      	bne.n	8016462 <__ieee754_pow+0x1b2>
 8016412:	b124      	cbz	r4, 801641e <__ieee754_pow+0x16e>
 8016414:	4b2c      	ldr	r3, [pc, #176]	; (80164c8 <__ieee754_pow+0x218>)
 8016416:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801641a:	429a      	cmp	r2, r3
 801641c:	d121      	bne.n	8016462 <__ieee754_pow+0x1b2>
 801641e:	f1b9 0f00 	cmp.w	r9, #0
 8016422:	da05      	bge.n	8016430 <__ieee754_pow+0x180>
 8016424:	4602      	mov	r2, r0
 8016426:	460b      	mov	r3, r1
 8016428:	2000      	movs	r0, #0
 801642a:	4927      	ldr	r1, [pc, #156]	; (80164c8 <__ieee754_pow+0x218>)
 801642c:	f7ea f9e6 	bl	80007fc <__aeabi_ddiv>
 8016430:	2d00      	cmp	r5, #0
 8016432:	da9d      	bge.n	8016370 <__ieee754_pow+0xc0>
 8016434:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016438:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801643c:	ea54 030b 	orrs.w	r3, r4, fp
 8016440:	d108      	bne.n	8016454 <__ieee754_pow+0x1a4>
 8016442:	4602      	mov	r2, r0
 8016444:	460b      	mov	r3, r1
 8016446:	4610      	mov	r0, r2
 8016448:	4619      	mov	r1, r3
 801644a:	f7e9 fef5 	bl	8000238 <__aeabi_dsub>
 801644e:	4602      	mov	r2, r0
 8016450:	460b      	mov	r3, r1
 8016452:	e7ac      	b.n	80163ae <__ieee754_pow+0xfe>
 8016454:	f1bb 0f01 	cmp.w	fp, #1
 8016458:	d18a      	bne.n	8016370 <__ieee754_pow+0xc0>
 801645a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801645e:	4619      	mov	r1, r3
 8016460:	e786      	b.n	8016370 <__ieee754_pow+0xc0>
 8016462:	0fed      	lsrs	r5, r5, #31
 8016464:	1e6b      	subs	r3, r5, #1
 8016466:	930d      	str	r3, [sp, #52]	; 0x34
 8016468:	ea5b 0303 	orrs.w	r3, fp, r3
 801646c:	d102      	bne.n	8016474 <__ieee754_pow+0x1c4>
 801646e:	4632      	mov	r2, r6
 8016470:	463b      	mov	r3, r7
 8016472:	e7e8      	b.n	8016446 <__ieee754_pow+0x196>
 8016474:	4b16      	ldr	r3, [pc, #88]	; (80164d0 <__ieee754_pow+0x220>)
 8016476:	4598      	cmp	r8, r3
 8016478:	f340 80fe 	ble.w	8016678 <__ieee754_pow+0x3c8>
 801647c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8016480:	4598      	cmp	r8, r3
 8016482:	dd0a      	ble.n	801649a <__ieee754_pow+0x1ea>
 8016484:	4b0f      	ldr	r3, [pc, #60]	; (80164c4 <__ieee754_pow+0x214>)
 8016486:	429c      	cmp	r4, r3
 8016488:	dc0d      	bgt.n	80164a6 <__ieee754_pow+0x1f6>
 801648a:	f1b9 0f00 	cmp.w	r9, #0
 801648e:	f6bf af6d 	bge.w	801636c <__ieee754_pow+0xbc>
 8016492:	a307      	add	r3, pc, #28	; (adr r3, 80164b0 <__ieee754_pow+0x200>)
 8016494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016498:	e79f      	b.n	80163da <__ieee754_pow+0x12a>
 801649a:	4b0e      	ldr	r3, [pc, #56]	; (80164d4 <__ieee754_pow+0x224>)
 801649c:	429c      	cmp	r4, r3
 801649e:	ddf4      	ble.n	801648a <__ieee754_pow+0x1da>
 80164a0:	4b09      	ldr	r3, [pc, #36]	; (80164c8 <__ieee754_pow+0x218>)
 80164a2:	429c      	cmp	r4, r3
 80164a4:	dd18      	ble.n	80164d8 <__ieee754_pow+0x228>
 80164a6:	f1b9 0f00 	cmp.w	r9, #0
 80164aa:	dcf2      	bgt.n	8016492 <__ieee754_pow+0x1e2>
 80164ac:	e75e      	b.n	801636c <__ieee754_pow+0xbc>
 80164ae:	bf00      	nop
 80164b0:	8800759c 	.word	0x8800759c
 80164b4:	7e37e43c 	.word	0x7e37e43c
 80164b8:	7ff00000 	.word	0x7ff00000
 80164bc:	08019379 	.word	0x08019379
 80164c0:	433fffff 	.word	0x433fffff
 80164c4:	3fefffff 	.word	0x3fefffff
 80164c8:	3ff00000 	.word	0x3ff00000
 80164cc:	3fe00000 	.word	0x3fe00000
 80164d0:	41e00000 	.word	0x41e00000
 80164d4:	3feffffe 	.word	0x3feffffe
 80164d8:	2200      	movs	r2, #0
 80164da:	4b63      	ldr	r3, [pc, #396]	; (8016668 <__ieee754_pow+0x3b8>)
 80164dc:	f7e9 feac 	bl	8000238 <__aeabi_dsub>
 80164e0:	a355      	add	r3, pc, #340	; (adr r3, 8016638 <__ieee754_pow+0x388>)
 80164e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164e6:	4604      	mov	r4, r0
 80164e8:	460d      	mov	r5, r1
 80164ea:	f7ea f85d 	bl	80005a8 <__aeabi_dmul>
 80164ee:	a354      	add	r3, pc, #336	; (adr r3, 8016640 <__ieee754_pow+0x390>)
 80164f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164f4:	4606      	mov	r6, r0
 80164f6:	460f      	mov	r7, r1
 80164f8:	4620      	mov	r0, r4
 80164fa:	4629      	mov	r1, r5
 80164fc:	f7ea f854 	bl	80005a8 <__aeabi_dmul>
 8016500:	2200      	movs	r2, #0
 8016502:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016506:	4b59      	ldr	r3, [pc, #356]	; (801666c <__ieee754_pow+0x3bc>)
 8016508:	4620      	mov	r0, r4
 801650a:	4629      	mov	r1, r5
 801650c:	f7ea f84c 	bl	80005a8 <__aeabi_dmul>
 8016510:	4602      	mov	r2, r0
 8016512:	460b      	mov	r3, r1
 8016514:	a14c      	add	r1, pc, #304	; (adr r1, 8016648 <__ieee754_pow+0x398>)
 8016516:	e9d1 0100 	ldrd	r0, r1, [r1]
 801651a:	f7e9 fe8d 	bl	8000238 <__aeabi_dsub>
 801651e:	4622      	mov	r2, r4
 8016520:	462b      	mov	r3, r5
 8016522:	f7ea f841 	bl	80005a8 <__aeabi_dmul>
 8016526:	4602      	mov	r2, r0
 8016528:	460b      	mov	r3, r1
 801652a:	2000      	movs	r0, #0
 801652c:	4950      	ldr	r1, [pc, #320]	; (8016670 <__ieee754_pow+0x3c0>)
 801652e:	f7e9 fe83 	bl	8000238 <__aeabi_dsub>
 8016532:	4622      	mov	r2, r4
 8016534:	462b      	mov	r3, r5
 8016536:	4680      	mov	r8, r0
 8016538:	4689      	mov	r9, r1
 801653a:	4620      	mov	r0, r4
 801653c:	4629      	mov	r1, r5
 801653e:	f7ea f833 	bl	80005a8 <__aeabi_dmul>
 8016542:	4602      	mov	r2, r0
 8016544:	460b      	mov	r3, r1
 8016546:	4640      	mov	r0, r8
 8016548:	4649      	mov	r1, r9
 801654a:	f7ea f82d 	bl	80005a8 <__aeabi_dmul>
 801654e:	a340      	add	r3, pc, #256	; (adr r3, 8016650 <__ieee754_pow+0x3a0>)
 8016550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016554:	f7ea f828 	bl	80005a8 <__aeabi_dmul>
 8016558:	4602      	mov	r2, r0
 801655a:	460b      	mov	r3, r1
 801655c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016560:	f7e9 fe6a 	bl	8000238 <__aeabi_dsub>
 8016564:	4602      	mov	r2, r0
 8016566:	460b      	mov	r3, r1
 8016568:	4604      	mov	r4, r0
 801656a:	460d      	mov	r5, r1
 801656c:	4630      	mov	r0, r6
 801656e:	4639      	mov	r1, r7
 8016570:	f7e9 fe64 	bl	800023c <__adddf3>
 8016574:	2000      	movs	r0, #0
 8016576:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801657a:	4632      	mov	r2, r6
 801657c:	463b      	mov	r3, r7
 801657e:	f7e9 fe5b 	bl	8000238 <__aeabi_dsub>
 8016582:	4602      	mov	r2, r0
 8016584:	460b      	mov	r3, r1
 8016586:	4620      	mov	r0, r4
 8016588:	4629      	mov	r1, r5
 801658a:	f7e9 fe55 	bl	8000238 <__aeabi_dsub>
 801658e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016590:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8016594:	4313      	orrs	r3, r2
 8016596:	4606      	mov	r6, r0
 8016598:	460f      	mov	r7, r1
 801659a:	f040 81eb 	bne.w	8016974 <__ieee754_pow+0x6c4>
 801659e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8016658 <__ieee754_pow+0x3a8>
 80165a2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80165a6:	2400      	movs	r4, #0
 80165a8:	4622      	mov	r2, r4
 80165aa:	462b      	mov	r3, r5
 80165ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80165b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80165b4:	f7e9 fe40 	bl	8000238 <__aeabi_dsub>
 80165b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80165bc:	f7e9 fff4 	bl	80005a8 <__aeabi_dmul>
 80165c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80165c4:	4680      	mov	r8, r0
 80165c6:	4689      	mov	r9, r1
 80165c8:	4630      	mov	r0, r6
 80165ca:	4639      	mov	r1, r7
 80165cc:	f7e9 ffec 	bl	80005a8 <__aeabi_dmul>
 80165d0:	4602      	mov	r2, r0
 80165d2:	460b      	mov	r3, r1
 80165d4:	4640      	mov	r0, r8
 80165d6:	4649      	mov	r1, r9
 80165d8:	f7e9 fe30 	bl	800023c <__adddf3>
 80165dc:	4622      	mov	r2, r4
 80165de:	462b      	mov	r3, r5
 80165e0:	4680      	mov	r8, r0
 80165e2:	4689      	mov	r9, r1
 80165e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80165e8:	f7e9 ffde 	bl	80005a8 <__aeabi_dmul>
 80165ec:	460b      	mov	r3, r1
 80165ee:	4604      	mov	r4, r0
 80165f0:	460d      	mov	r5, r1
 80165f2:	4602      	mov	r2, r0
 80165f4:	4649      	mov	r1, r9
 80165f6:	4640      	mov	r0, r8
 80165f8:	e9cd 4500 	strd	r4, r5, [sp]
 80165fc:	f7e9 fe1e 	bl	800023c <__adddf3>
 8016600:	4b1c      	ldr	r3, [pc, #112]	; (8016674 <__ieee754_pow+0x3c4>)
 8016602:	4299      	cmp	r1, r3
 8016604:	4606      	mov	r6, r0
 8016606:	460f      	mov	r7, r1
 8016608:	468b      	mov	fp, r1
 801660a:	f340 82f7 	ble.w	8016bfc <__ieee754_pow+0x94c>
 801660e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8016612:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8016616:	4303      	orrs	r3, r0
 8016618:	f000 81ea 	beq.w	80169f0 <__ieee754_pow+0x740>
 801661c:	a310      	add	r3, pc, #64	; (adr r3, 8016660 <__ieee754_pow+0x3b0>)
 801661e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016622:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016626:	f7e9 ffbf 	bl	80005a8 <__aeabi_dmul>
 801662a:	a30d      	add	r3, pc, #52	; (adr r3, 8016660 <__ieee754_pow+0x3b0>)
 801662c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016630:	e6d5      	b.n	80163de <__ieee754_pow+0x12e>
 8016632:	bf00      	nop
 8016634:	f3af 8000 	nop.w
 8016638:	60000000 	.word	0x60000000
 801663c:	3ff71547 	.word	0x3ff71547
 8016640:	f85ddf44 	.word	0xf85ddf44
 8016644:	3e54ae0b 	.word	0x3e54ae0b
 8016648:	55555555 	.word	0x55555555
 801664c:	3fd55555 	.word	0x3fd55555
 8016650:	652b82fe 	.word	0x652b82fe
 8016654:	3ff71547 	.word	0x3ff71547
 8016658:	00000000 	.word	0x00000000
 801665c:	bff00000 	.word	0xbff00000
 8016660:	8800759c 	.word	0x8800759c
 8016664:	7e37e43c 	.word	0x7e37e43c
 8016668:	3ff00000 	.word	0x3ff00000
 801666c:	3fd00000 	.word	0x3fd00000
 8016670:	3fe00000 	.word	0x3fe00000
 8016674:	408fffff 	.word	0x408fffff
 8016678:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801667c:	f04f 0200 	mov.w	r2, #0
 8016680:	da05      	bge.n	801668e <__ieee754_pow+0x3de>
 8016682:	4bd3      	ldr	r3, [pc, #844]	; (80169d0 <__ieee754_pow+0x720>)
 8016684:	f7e9 ff90 	bl	80005a8 <__aeabi_dmul>
 8016688:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801668c:	460c      	mov	r4, r1
 801668e:	1523      	asrs	r3, r4, #20
 8016690:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016694:	4413      	add	r3, r2
 8016696:	9309      	str	r3, [sp, #36]	; 0x24
 8016698:	4bce      	ldr	r3, [pc, #824]	; (80169d4 <__ieee754_pow+0x724>)
 801669a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801669e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80166a2:	429c      	cmp	r4, r3
 80166a4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80166a8:	dd08      	ble.n	80166bc <__ieee754_pow+0x40c>
 80166aa:	4bcb      	ldr	r3, [pc, #812]	; (80169d8 <__ieee754_pow+0x728>)
 80166ac:	429c      	cmp	r4, r3
 80166ae:	f340 815e 	ble.w	801696e <__ieee754_pow+0x6be>
 80166b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166b4:	3301      	adds	r3, #1
 80166b6:	9309      	str	r3, [sp, #36]	; 0x24
 80166b8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80166bc:	f04f 0a00 	mov.w	sl, #0
 80166c0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80166c4:	930c      	str	r3, [sp, #48]	; 0x30
 80166c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80166c8:	4bc4      	ldr	r3, [pc, #784]	; (80169dc <__ieee754_pow+0x72c>)
 80166ca:	4413      	add	r3, r2
 80166cc:	ed93 7b00 	vldr	d7, [r3]
 80166d0:	4629      	mov	r1, r5
 80166d2:	ec53 2b17 	vmov	r2, r3, d7
 80166d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80166da:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80166de:	f7e9 fdab 	bl	8000238 <__aeabi_dsub>
 80166e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80166e6:	4606      	mov	r6, r0
 80166e8:	460f      	mov	r7, r1
 80166ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80166ee:	f7e9 fda5 	bl	800023c <__adddf3>
 80166f2:	4602      	mov	r2, r0
 80166f4:	460b      	mov	r3, r1
 80166f6:	2000      	movs	r0, #0
 80166f8:	49b9      	ldr	r1, [pc, #740]	; (80169e0 <__ieee754_pow+0x730>)
 80166fa:	f7ea f87f 	bl	80007fc <__aeabi_ddiv>
 80166fe:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8016702:	4602      	mov	r2, r0
 8016704:	460b      	mov	r3, r1
 8016706:	4630      	mov	r0, r6
 8016708:	4639      	mov	r1, r7
 801670a:	f7e9 ff4d 	bl	80005a8 <__aeabi_dmul>
 801670e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016712:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8016716:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801671a:	2300      	movs	r3, #0
 801671c:	9302      	str	r3, [sp, #8]
 801671e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016722:	106d      	asrs	r5, r5, #1
 8016724:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8016728:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801672c:	2200      	movs	r2, #0
 801672e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8016732:	4640      	mov	r0, r8
 8016734:	4649      	mov	r1, r9
 8016736:	4614      	mov	r4, r2
 8016738:	461d      	mov	r5, r3
 801673a:	f7e9 ff35 	bl	80005a8 <__aeabi_dmul>
 801673e:	4602      	mov	r2, r0
 8016740:	460b      	mov	r3, r1
 8016742:	4630      	mov	r0, r6
 8016744:	4639      	mov	r1, r7
 8016746:	f7e9 fd77 	bl	8000238 <__aeabi_dsub>
 801674a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801674e:	4606      	mov	r6, r0
 8016750:	460f      	mov	r7, r1
 8016752:	4620      	mov	r0, r4
 8016754:	4629      	mov	r1, r5
 8016756:	f7e9 fd6f 	bl	8000238 <__aeabi_dsub>
 801675a:	4602      	mov	r2, r0
 801675c:	460b      	mov	r3, r1
 801675e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016762:	f7e9 fd69 	bl	8000238 <__aeabi_dsub>
 8016766:	4642      	mov	r2, r8
 8016768:	464b      	mov	r3, r9
 801676a:	f7e9 ff1d 	bl	80005a8 <__aeabi_dmul>
 801676e:	4602      	mov	r2, r0
 8016770:	460b      	mov	r3, r1
 8016772:	4630      	mov	r0, r6
 8016774:	4639      	mov	r1, r7
 8016776:	f7e9 fd5f 	bl	8000238 <__aeabi_dsub>
 801677a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801677e:	f7e9 ff13 	bl	80005a8 <__aeabi_dmul>
 8016782:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016786:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801678a:	4610      	mov	r0, r2
 801678c:	4619      	mov	r1, r3
 801678e:	f7e9 ff0b 	bl	80005a8 <__aeabi_dmul>
 8016792:	a37b      	add	r3, pc, #492	; (adr r3, 8016980 <__ieee754_pow+0x6d0>)
 8016794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016798:	4604      	mov	r4, r0
 801679a:	460d      	mov	r5, r1
 801679c:	f7e9 ff04 	bl	80005a8 <__aeabi_dmul>
 80167a0:	a379      	add	r3, pc, #484	; (adr r3, 8016988 <__ieee754_pow+0x6d8>)
 80167a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167a6:	f7e9 fd49 	bl	800023c <__adddf3>
 80167aa:	4622      	mov	r2, r4
 80167ac:	462b      	mov	r3, r5
 80167ae:	f7e9 fefb 	bl	80005a8 <__aeabi_dmul>
 80167b2:	a377      	add	r3, pc, #476	; (adr r3, 8016990 <__ieee754_pow+0x6e0>)
 80167b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167b8:	f7e9 fd40 	bl	800023c <__adddf3>
 80167bc:	4622      	mov	r2, r4
 80167be:	462b      	mov	r3, r5
 80167c0:	f7e9 fef2 	bl	80005a8 <__aeabi_dmul>
 80167c4:	a374      	add	r3, pc, #464	; (adr r3, 8016998 <__ieee754_pow+0x6e8>)
 80167c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167ca:	f7e9 fd37 	bl	800023c <__adddf3>
 80167ce:	4622      	mov	r2, r4
 80167d0:	462b      	mov	r3, r5
 80167d2:	f7e9 fee9 	bl	80005a8 <__aeabi_dmul>
 80167d6:	a372      	add	r3, pc, #456	; (adr r3, 80169a0 <__ieee754_pow+0x6f0>)
 80167d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167dc:	f7e9 fd2e 	bl	800023c <__adddf3>
 80167e0:	4622      	mov	r2, r4
 80167e2:	462b      	mov	r3, r5
 80167e4:	f7e9 fee0 	bl	80005a8 <__aeabi_dmul>
 80167e8:	a36f      	add	r3, pc, #444	; (adr r3, 80169a8 <__ieee754_pow+0x6f8>)
 80167ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167ee:	f7e9 fd25 	bl	800023c <__adddf3>
 80167f2:	4622      	mov	r2, r4
 80167f4:	4606      	mov	r6, r0
 80167f6:	460f      	mov	r7, r1
 80167f8:	462b      	mov	r3, r5
 80167fa:	4620      	mov	r0, r4
 80167fc:	4629      	mov	r1, r5
 80167fe:	f7e9 fed3 	bl	80005a8 <__aeabi_dmul>
 8016802:	4602      	mov	r2, r0
 8016804:	460b      	mov	r3, r1
 8016806:	4630      	mov	r0, r6
 8016808:	4639      	mov	r1, r7
 801680a:	f7e9 fecd 	bl	80005a8 <__aeabi_dmul>
 801680e:	4642      	mov	r2, r8
 8016810:	4604      	mov	r4, r0
 8016812:	460d      	mov	r5, r1
 8016814:	464b      	mov	r3, r9
 8016816:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801681a:	f7e9 fd0f 	bl	800023c <__adddf3>
 801681e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016822:	f7e9 fec1 	bl	80005a8 <__aeabi_dmul>
 8016826:	4622      	mov	r2, r4
 8016828:	462b      	mov	r3, r5
 801682a:	f7e9 fd07 	bl	800023c <__adddf3>
 801682e:	4642      	mov	r2, r8
 8016830:	4606      	mov	r6, r0
 8016832:	460f      	mov	r7, r1
 8016834:	464b      	mov	r3, r9
 8016836:	4640      	mov	r0, r8
 8016838:	4649      	mov	r1, r9
 801683a:	f7e9 feb5 	bl	80005a8 <__aeabi_dmul>
 801683e:	2200      	movs	r2, #0
 8016840:	4b68      	ldr	r3, [pc, #416]	; (80169e4 <__ieee754_pow+0x734>)
 8016842:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016846:	f7e9 fcf9 	bl	800023c <__adddf3>
 801684a:	4632      	mov	r2, r6
 801684c:	463b      	mov	r3, r7
 801684e:	f7e9 fcf5 	bl	800023c <__adddf3>
 8016852:	9802      	ldr	r0, [sp, #8]
 8016854:	460d      	mov	r5, r1
 8016856:	4604      	mov	r4, r0
 8016858:	4602      	mov	r2, r0
 801685a:	460b      	mov	r3, r1
 801685c:	4640      	mov	r0, r8
 801685e:	4649      	mov	r1, r9
 8016860:	f7e9 fea2 	bl	80005a8 <__aeabi_dmul>
 8016864:	2200      	movs	r2, #0
 8016866:	4680      	mov	r8, r0
 8016868:	4689      	mov	r9, r1
 801686a:	4b5e      	ldr	r3, [pc, #376]	; (80169e4 <__ieee754_pow+0x734>)
 801686c:	4620      	mov	r0, r4
 801686e:	4629      	mov	r1, r5
 8016870:	f7e9 fce2 	bl	8000238 <__aeabi_dsub>
 8016874:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016878:	f7e9 fcde 	bl	8000238 <__aeabi_dsub>
 801687c:	4602      	mov	r2, r0
 801687e:	460b      	mov	r3, r1
 8016880:	4630      	mov	r0, r6
 8016882:	4639      	mov	r1, r7
 8016884:	f7e9 fcd8 	bl	8000238 <__aeabi_dsub>
 8016888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801688c:	f7e9 fe8c 	bl	80005a8 <__aeabi_dmul>
 8016890:	4622      	mov	r2, r4
 8016892:	4606      	mov	r6, r0
 8016894:	460f      	mov	r7, r1
 8016896:	462b      	mov	r3, r5
 8016898:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801689c:	f7e9 fe84 	bl	80005a8 <__aeabi_dmul>
 80168a0:	4602      	mov	r2, r0
 80168a2:	460b      	mov	r3, r1
 80168a4:	4630      	mov	r0, r6
 80168a6:	4639      	mov	r1, r7
 80168a8:	f7e9 fcc8 	bl	800023c <__adddf3>
 80168ac:	4606      	mov	r6, r0
 80168ae:	460f      	mov	r7, r1
 80168b0:	4602      	mov	r2, r0
 80168b2:	460b      	mov	r3, r1
 80168b4:	4640      	mov	r0, r8
 80168b6:	4649      	mov	r1, r9
 80168b8:	f7e9 fcc0 	bl	800023c <__adddf3>
 80168bc:	9802      	ldr	r0, [sp, #8]
 80168be:	a33c      	add	r3, pc, #240	; (adr r3, 80169b0 <__ieee754_pow+0x700>)
 80168c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168c4:	4604      	mov	r4, r0
 80168c6:	460d      	mov	r5, r1
 80168c8:	f7e9 fe6e 	bl	80005a8 <__aeabi_dmul>
 80168cc:	4642      	mov	r2, r8
 80168ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80168d2:	464b      	mov	r3, r9
 80168d4:	4620      	mov	r0, r4
 80168d6:	4629      	mov	r1, r5
 80168d8:	f7e9 fcae 	bl	8000238 <__aeabi_dsub>
 80168dc:	4602      	mov	r2, r0
 80168de:	460b      	mov	r3, r1
 80168e0:	4630      	mov	r0, r6
 80168e2:	4639      	mov	r1, r7
 80168e4:	f7e9 fca8 	bl	8000238 <__aeabi_dsub>
 80168e8:	a333      	add	r3, pc, #204	; (adr r3, 80169b8 <__ieee754_pow+0x708>)
 80168ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168ee:	f7e9 fe5b 	bl	80005a8 <__aeabi_dmul>
 80168f2:	a333      	add	r3, pc, #204	; (adr r3, 80169c0 <__ieee754_pow+0x710>)
 80168f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168f8:	4606      	mov	r6, r0
 80168fa:	460f      	mov	r7, r1
 80168fc:	4620      	mov	r0, r4
 80168fe:	4629      	mov	r1, r5
 8016900:	f7e9 fe52 	bl	80005a8 <__aeabi_dmul>
 8016904:	4602      	mov	r2, r0
 8016906:	460b      	mov	r3, r1
 8016908:	4630      	mov	r0, r6
 801690a:	4639      	mov	r1, r7
 801690c:	f7e9 fc96 	bl	800023c <__adddf3>
 8016910:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016912:	4b35      	ldr	r3, [pc, #212]	; (80169e8 <__ieee754_pow+0x738>)
 8016914:	4413      	add	r3, r2
 8016916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801691a:	f7e9 fc8f 	bl	800023c <__adddf3>
 801691e:	4604      	mov	r4, r0
 8016920:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016922:	460d      	mov	r5, r1
 8016924:	f7e9 fdd6 	bl	80004d4 <__aeabi_i2d>
 8016928:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801692a:	4b30      	ldr	r3, [pc, #192]	; (80169ec <__ieee754_pow+0x73c>)
 801692c:	4413      	add	r3, r2
 801692e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016932:	4606      	mov	r6, r0
 8016934:	460f      	mov	r7, r1
 8016936:	4622      	mov	r2, r4
 8016938:	462b      	mov	r3, r5
 801693a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801693e:	f7e9 fc7d 	bl	800023c <__adddf3>
 8016942:	4642      	mov	r2, r8
 8016944:	464b      	mov	r3, r9
 8016946:	f7e9 fc79 	bl	800023c <__adddf3>
 801694a:	4632      	mov	r2, r6
 801694c:	463b      	mov	r3, r7
 801694e:	f7e9 fc75 	bl	800023c <__adddf3>
 8016952:	9802      	ldr	r0, [sp, #8]
 8016954:	4632      	mov	r2, r6
 8016956:	463b      	mov	r3, r7
 8016958:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801695c:	f7e9 fc6c 	bl	8000238 <__aeabi_dsub>
 8016960:	4642      	mov	r2, r8
 8016962:	464b      	mov	r3, r9
 8016964:	f7e9 fc68 	bl	8000238 <__aeabi_dsub>
 8016968:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801696c:	e607      	b.n	801657e <__ieee754_pow+0x2ce>
 801696e:	f04f 0a01 	mov.w	sl, #1
 8016972:	e6a5      	b.n	80166c0 <__ieee754_pow+0x410>
 8016974:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80169c8 <__ieee754_pow+0x718>
 8016978:	e613      	b.n	80165a2 <__ieee754_pow+0x2f2>
 801697a:	bf00      	nop
 801697c:	f3af 8000 	nop.w
 8016980:	4a454eef 	.word	0x4a454eef
 8016984:	3fca7e28 	.word	0x3fca7e28
 8016988:	93c9db65 	.word	0x93c9db65
 801698c:	3fcd864a 	.word	0x3fcd864a
 8016990:	a91d4101 	.word	0xa91d4101
 8016994:	3fd17460 	.word	0x3fd17460
 8016998:	518f264d 	.word	0x518f264d
 801699c:	3fd55555 	.word	0x3fd55555
 80169a0:	db6fabff 	.word	0xdb6fabff
 80169a4:	3fdb6db6 	.word	0x3fdb6db6
 80169a8:	33333303 	.word	0x33333303
 80169ac:	3fe33333 	.word	0x3fe33333
 80169b0:	e0000000 	.word	0xe0000000
 80169b4:	3feec709 	.word	0x3feec709
 80169b8:	dc3a03fd 	.word	0xdc3a03fd
 80169bc:	3feec709 	.word	0x3feec709
 80169c0:	145b01f5 	.word	0x145b01f5
 80169c4:	be3e2fe0 	.word	0xbe3e2fe0
 80169c8:	00000000 	.word	0x00000000
 80169cc:	3ff00000 	.word	0x3ff00000
 80169d0:	43400000 	.word	0x43400000
 80169d4:	0003988e 	.word	0x0003988e
 80169d8:	000bb679 	.word	0x000bb679
 80169dc:	08019498 	.word	0x08019498
 80169e0:	3ff00000 	.word	0x3ff00000
 80169e4:	40080000 	.word	0x40080000
 80169e8:	080194b8 	.word	0x080194b8
 80169ec:	080194a8 	.word	0x080194a8
 80169f0:	a3b4      	add	r3, pc, #720	; (adr r3, 8016cc4 <__ieee754_pow+0xa14>)
 80169f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169f6:	4640      	mov	r0, r8
 80169f8:	4649      	mov	r1, r9
 80169fa:	f7e9 fc1f 	bl	800023c <__adddf3>
 80169fe:	4622      	mov	r2, r4
 8016a00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016a04:	462b      	mov	r3, r5
 8016a06:	4630      	mov	r0, r6
 8016a08:	4639      	mov	r1, r7
 8016a0a:	f7e9 fc15 	bl	8000238 <__aeabi_dsub>
 8016a0e:	4602      	mov	r2, r0
 8016a10:	460b      	mov	r3, r1
 8016a12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016a16:	f7ea f857 	bl	8000ac8 <__aeabi_dcmpgt>
 8016a1a:	2800      	cmp	r0, #0
 8016a1c:	f47f adfe 	bne.w	801661c <__ieee754_pow+0x36c>
 8016a20:	4aa3      	ldr	r2, [pc, #652]	; (8016cb0 <__ieee754_pow+0xa00>)
 8016a22:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016a26:	4293      	cmp	r3, r2
 8016a28:	f340 810a 	ble.w	8016c40 <__ieee754_pow+0x990>
 8016a2c:	151b      	asrs	r3, r3, #20
 8016a2e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8016a32:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8016a36:	fa4a f303 	asr.w	r3, sl, r3
 8016a3a:	445b      	add	r3, fp
 8016a3c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8016a40:	4e9c      	ldr	r6, [pc, #624]	; (8016cb4 <__ieee754_pow+0xa04>)
 8016a42:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8016a46:	4116      	asrs	r6, r2
 8016a48:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8016a4c:	2000      	movs	r0, #0
 8016a4e:	ea23 0106 	bic.w	r1, r3, r6
 8016a52:	f1c2 0214 	rsb	r2, r2, #20
 8016a56:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8016a5a:	fa4a fa02 	asr.w	sl, sl, r2
 8016a5e:	f1bb 0f00 	cmp.w	fp, #0
 8016a62:	4602      	mov	r2, r0
 8016a64:	460b      	mov	r3, r1
 8016a66:	4620      	mov	r0, r4
 8016a68:	4629      	mov	r1, r5
 8016a6a:	bfb8      	it	lt
 8016a6c:	f1ca 0a00 	rsblt	sl, sl, #0
 8016a70:	f7e9 fbe2 	bl	8000238 <__aeabi_dsub>
 8016a74:	e9cd 0100 	strd	r0, r1, [sp]
 8016a78:	4642      	mov	r2, r8
 8016a7a:	464b      	mov	r3, r9
 8016a7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a80:	f7e9 fbdc 	bl	800023c <__adddf3>
 8016a84:	2000      	movs	r0, #0
 8016a86:	a378      	add	r3, pc, #480	; (adr r3, 8016c68 <__ieee754_pow+0x9b8>)
 8016a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a8c:	4604      	mov	r4, r0
 8016a8e:	460d      	mov	r5, r1
 8016a90:	f7e9 fd8a 	bl	80005a8 <__aeabi_dmul>
 8016a94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016a98:	4606      	mov	r6, r0
 8016a9a:	460f      	mov	r7, r1
 8016a9c:	4620      	mov	r0, r4
 8016a9e:	4629      	mov	r1, r5
 8016aa0:	f7e9 fbca 	bl	8000238 <__aeabi_dsub>
 8016aa4:	4602      	mov	r2, r0
 8016aa6:	460b      	mov	r3, r1
 8016aa8:	4640      	mov	r0, r8
 8016aaa:	4649      	mov	r1, r9
 8016aac:	f7e9 fbc4 	bl	8000238 <__aeabi_dsub>
 8016ab0:	a36f      	add	r3, pc, #444	; (adr r3, 8016c70 <__ieee754_pow+0x9c0>)
 8016ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ab6:	f7e9 fd77 	bl	80005a8 <__aeabi_dmul>
 8016aba:	a36f      	add	r3, pc, #444	; (adr r3, 8016c78 <__ieee754_pow+0x9c8>)
 8016abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ac0:	4680      	mov	r8, r0
 8016ac2:	4689      	mov	r9, r1
 8016ac4:	4620      	mov	r0, r4
 8016ac6:	4629      	mov	r1, r5
 8016ac8:	f7e9 fd6e 	bl	80005a8 <__aeabi_dmul>
 8016acc:	4602      	mov	r2, r0
 8016ace:	460b      	mov	r3, r1
 8016ad0:	4640      	mov	r0, r8
 8016ad2:	4649      	mov	r1, r9
 8016ad4:	f7e9 fbb2 	bl	800023c <__adddf3>
 8016ad8:	4604      	mov	r4, r0
 8016ada:	460d      	mov	r5, r1
 8016adc:	4602      	mov	r2, r0
 8016ade:	460b      	mov	r3, r1
 8016ae0:	4630      	mov	r0, r6
 8016ae2:	4639      	mov	r1, r7
 8016ae4:	f7e9 fbaa 	bl	800023c <__adddf3>
 8016ae8:	4632      	mov	r2, r6
 8016aea:	463b      	mov	r3, r7
 8016aec:	4680      	mov	r8, r0
 8016aee:	4689      	mov	r9, r1
 8016af0:	f7e9 fba2 	bl	8000238 <__aeabi_dsub>
 8016af4:	4602      	mov	r2, r0
 8016af6:	460b      	mov	r3, r1
 8016af8:	4620      	mov	r0, r4
 8016afa:	4629      	mov	r1, r5
 8016afc:	f7e9 fb9c 	bl	8000238 <__aeabi_dsub>
 8016b00:	4642      	mov	r2, r8
 8016b02:	4606      	mov	r6, r0
 8016b04:	460f      	mov	r7, r1
 8016b06:	464b      	mov	r3, r9
 8016b08:	4640      	mov	r0, r8
 8016b0a:	4649      	mov	r1, r9
 8016b0c:	f7e9 fd4c 	bl	80005a8 <__aeabi_dmul>
 8016b10:	a35b      	add	r3, pc, #364	; (adr r3, 8016c80 <__ieee754_pow+0x9d0>)
 8016b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b16:	4604      	mov	r4, r0
 8016b18:	460d      	mov	r5, r1
 8016b1a:	f7e9 fd45 	bl	80005a8 <__aeabi_dmul>
 8016b1e:	a35a      	add	r3, pc, #360	; (adr r3, 8016c88 <__ieee754_pow+0x9d8>)
 8016b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b24:	f7e9 fb88 	bl	8000238 <__aeabi_dsub>
 8016b28:	4622      	mov	r2, r4
 8016b2a:	462b      	mov	r3, r5
 8016b2c:	f7e9 fd3c 	bl	80005a8 <__aeabi_dmul>
 8016b30:	a357      	add	r3, pc, #348	; (adr r3, 8016c90 <__ieee754_pow+0x9e0>)
 8016b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b36:	f7e9 fb81 	bl	800023c <__adddf3>
 8016b3a:	4622      	mov	r2, r4
 8016b3c:	462b      	mov	r3, r5
 8016b3e:	f7e9 fd33 	bl	80005a8 <__aeabi_dmul>
 8016b42:	a355      	add	r3, pc, #340	; (adr r3, 8016c98 <__ieee754_pow+0x9e8>)
 8016b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b48:	f7e9 fb76 	bl	8000238 <__aeabi_dsub>
 8016b4c:	4622      	mov	r2, r4
 8016b4e:	462b      	mov	r3, r5
 8016b50:	f7e9 fd2a 	bl	80005a8 <__aeabi_dmul>
 8016b54:	a352      	add	r3, pc, #328	; (adr r3, 8016ca0 <__ieee754_pow+0x9f0>)
 8016b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b5a:	f7e9 fb6f 	bl	800023c <__adddf3>
 8016b5e:	4622      	mov	r2, r4
 8016b60:	462b      	mov	r3, r5
 8016b62:	f7e9 fd21 	bl	80005a8 <__aeabi_dmul>
 8016b66:	4602      	mov	r2, r0
 8016b68:	460b      	mov	r3, r1
 8016b6a:	4640      	mov	r0, r8
 8016b6c:	4649      	mov	r1, r9
 8016b6e:	f7e9 fb63 	bl	8000238 <__aeabi_dsub>
 8016b72:	4604      	mov	r4, r0
 8016b74:	460d      	mov	r5, r1
 8016b76:	4602      	mov	r2, r0
 8016b78:	460b      	mov	r3, r1
 8016b7a:	4640      	mov	r0, r8
 8016b7c:	4649      	mov	r1, r9
 8016b7e:	f7e9 fd13 	bl	80005a8 <__aeabi_dmul>
 8016b82:	2200      	movs	r2, #0
 8016b84:	e9cd 0100 	strd	r0, r1, [sp]
 8016b88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016b8c:	4620      	mov	r0, r4
 8016b8e:	4629      	mov	r1, r5
 8016b90:	f7e9 fb52 	bl	8000238 <__aeabi_dsub>
 8016b94:	4602      	mov	r2, r0
 8016b96:	460b      	mov	r3, r1
 8016b98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016b9c:	f7e9 fe2e 	bl	80007fc <__aeabi_ddiv>
 8016ba0:	4632      	mov	r2, r6
 8016ba2:	4604      	mov	r4, r0
 8016ba4:	460d      	mov	r5, r1
 8016ba6:	463b      	mov	r3, r7
 8016ba8:	4640      	mov	r0, r8
 8016baa:	4649      	mov	r1, r9
 8016bac:	f7e9 fcfc 	bl	80005a8 <__aeabi_dmul>
 8016bb0:	4632      	mov	r2, r6
 8016bb2:	463b      	mov	r3, r7
 8016bb4:	f7e9 fb42 	bl	800023c <__adddf3>
 8016bb8:	4602      	mov	r2, r0
 8016bba:	460b      	mov	r3, r1
 8016bbc:	4620      	mov	r0, r4
 8016bbe:	4629      	mov	r1, r5
 8016bc0:	f7e9 fb3a 	bl	8000238 <__aeabi_dsub>
 8016bc4:	4642      	mov	r2, r8
 8016bc6:	464b      	mov	r3, r9
 8016bc8:	f7e9 fb36 	bl	8000238 <__aeabi_dsub>
 8016bcc:	4602      	mov	r2, r0
 8016bce:	460b      	mov	r3, r1
 8016bd0:	2000      	movs	r0, #0
 8016bd2:	4939      	ldr	r1, [pc, #228]	; (8016cb8 <__ieee754_pow+0xa08>)
 8016bd4:	f7e9 fb30 	bl	8000238 <__aeabi_dsub>
 8016bd8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8016bdc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016be0:	4602      	mov	r2, r0
 8016be2:	460b      	mov	r3, r1
 8016be4:	da2f      	bge.n	8016c46 <__ieee754_pow+0x996>
 8016be6:	4650      	mov	r0, sl
 8016be8:	ec43 2b10 	vmov	d0, r2, r3
 8016bec:	f000 f9c0 	bl	8016f70 <scalbn>
 8016bf0:	ec51 0b10 	vmov	r0, r1, d0
 8016bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016bf8:	f7ff bbf1 	b.w	80163de <__ieee754_pow+0x12e>
 8016bfc:	4b2f      	ldr	r3, [pc, #188]	; (8016cbc <__ieee754_pow+0xa0c>)
 8016bfe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8016c02:	429e      	cmp	r6, r3
 8016c04:	f77f af0c 	ble.w	8016a20 <__ieee754_pow+0x770>
 8016c08:	4b2d      	ldr	r3, [pc, #180]	; (8016cc0 <__ieee754_pow+0xa10>)
 8016c0a:	440b      	add	r3, r1
 8016c0c:	4303      	orrs	r3, r0
 8016c0e:	d00b      	beq.n	8016c28 <__ieee754_pow+0x978>
 8016c10:	a325      	add	r3, pc, #148	; (adr r3, 8016ca8 <__ieee754_pow+0x9f8>)
 8016c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016c1a:	f7e9 fcc5 	bl	80005a8 <__aeabi_dmul>
 8016c1e:	a322      	add	r3, pc, #136	; (adr r3, 8016ca8 <__ieee754_pow+0x9f8>)
 8016c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c24:	f7ff bbdb 	b.w	80163de <__ieee754_pow+0x12e>
 8016c28:	4622      	mov	r2, r4
 8016c2a:	462b      	mov	r3, r5
 8016c2c:	f7e9 fb04 	bl	8000238 <__aeabi_dsub>
 8016c30:	4642      	mov	r2, r8
 8016c32:	464b      	mov	r3, r9
 8016c34:	f7e9 ff3e 	bl	8000ab4 <__aeabi_dcmpge>
 8016c38:	2800      	cmp	r0, #0
 8016c3a:	f43f aef1 	beq.w	8016a20 <__ieee754_pow+0x770>
 8016c3e:	e7e7      	b.n	8016c10 <__ieee754_pow+0x960>
 8016c40:	f04f 0a00 	mov.w	sl, #0
 8016c44:	e718      	b.n	8016a78 <__ieee754_pow+0x7c8>
 8016c46:	4621      	mov	r1, r4
 8016c48:	e7d4      	b.n	8016bf4 <__ieee754_pow+0x944>
 8016c4a:	2000      	movs	r0, #0
 8016c4c:	491a      	ldr	r1, [pc, #104]	; (8016cb8 <__ieee754_pow+0xa08>)
 8016c4e:	f7ff bb8f 	b.w	8016370 <__ieee754_pow+0xc0>
 8016c52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016c56:	f7ff bb8b 	b.w	8016370 <__ieee754_pow+0xc0>
 8016c5a:	4630      	mov	r0, r6
 8016c5c:	4639      	mov	r1, r7
 8016c5e:	f7ff bb87 	b.w	8016370 <__ieee754_pow+0xc0>
 8016c62:	4693      	mov	fp, r2
 8016c64:	f7ff bb98 	b.w	8016398 <__ieee754_pow+0xe8>
 8016c68:	00000000 	.word	0x00000000
 8016c6c:	3fe62e43 	.word	0x3fe62e43
 8016c70:	fefa39ef 	.word	0xfefa39ef
 8016c74:	3fe62e42 	.word	0x3fe62e42
 8016c78:	0ca86c39 	.word	0x0ca86c39
 8016c7c:	be205c61 	.word	0xbe205c61
 8016c80:	72bea4d0 	.word	0x72bea4d0
 8016c84:	3e663769 	.word	0x3e663769
 8016c88:	c5d26bf1 	.word	0xc5d26bf1
 8016c8c:	3ebbbd41 	.word	0x3ebbbd41
 8016c90:	af25de2c 	.word	0xaf25de2c
 8016c94:	3f11566a 	.word	0x3f11566a
 8016c98:	16bebd93 	.word	0x16bebd93
 8016c9c:	3f66c16c 	.word	0x3f66c16c
 8016ca0:	5555553e 	.word	0x5555553e
 8016ca4:	3fc55555 	.word	0x3fc55555
 8016ca8:	c2f8f359 	.word	0xc2f8f359
 8016cac:	01a56e1f 	.word	0x01a56e1f
 8016cb0:	3fe00000 	.word	0x3fe00000
 8016cb4:	000fffff 	.word	0x000fffff
 8016cb8:	3ff00000 	.word	0x3ff00000
 8016cbc:	4090cbff 	.word	0x4090cbff
 8016cc0:	3f6f3400 	.word	0x3f6f3400
 8016cc4:	652b82fe 	.word	0x652b82fe
 8016cc8:	3c971547 	.word	0x3c971547

08016ccc <__ieee754_sqrt>:
 8016ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cd0:	4955      	ldr	r1, [pc, #340]	; (8016e28 <__ieee754_sqrt+0x15c>)
 8016cd2:	ec55 4b10 	vmov	r4, r5, d0
 8016cd6:	43a9      	bics	r1, r5
 8016cd8:	462b      	mov	r3, r5
 8016cda:	462a      	mov	r2, r5
 8016cdc:	d112      	bne.n	8016d04 <__ieee754_sqrt+0x38>
 8016cde:	ee10 2a10 	vmov	r2, s0
 8016ce2:	ee10 0a10 	vmov	r0, s0
 8016ce6:	4629      	mov	r1, r5
 8016ce8:	f7e9 fc5e 	bl	80005a8 <__aeabi_dmul>
 8016cec:	4602      	mov	r2, r0
 8016cee:	460b      	mov	r3, r1
 8016cf0:	4620      	mov	r0, r4
 8016cf2:	4629      	mov	r1, r5
 8016cf4:	f7e9 faa2 	bl	800023c <__adddf3>
 8016cf8:	4604      	mov	r4, r0
 8016cfa:	460d      	mov	r5, r1
 8016cfc:	ec45 4b10 	vmov	d0, r4, r5
 8016d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d04:	2d00      	cmp	r5, #0
 8016d06:	ee10 0a10 	vmov	r0, s0
 8016d0a:	4621      	mov	r1, r4
 8016d0c:	dc0f      	bgt.n	8016d2e <__ieee754_sqrt+0x62>
 8016d0e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016d12:	4330      	orrs	r0, r6
 8016d14:	d0f2      	beq.n	8016cfc <__ieee754_sqrt+0x30>
 8016d16:	b155      	cbz	r5, 8016d2e <__ieee754_sqrt+0x62>
 8016d18:	ee10 2a10 	vmov	r2, s0
 8016d1c:	4620      	mov	r0, r4
 8016d1e:	4629      	mov	r1, r5
 8016d20:	f7e9 fa8a 	bl	8000238 <__aeabi_dsub>
 8016d24:	4602      	mov	r2, r0
 8016d26:	460b      	mov	r3, r1
 8016d28:	f7e9 fd68 	bl	80007fc <__aeabi_ddiv>
 8016d2c:	e7e4      	b.n	8016cf8 <__ieee754_sqrt+0x2c>
 8016d2e:	151b      	asrs	r3, r3, #20
 8016d30:	d073      	beq.n	8016e1a <__ieee754_sqrt+0x14e>
 8016d32:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016d36:	07dd      	lsls	r5, r3, #31
 8016d38:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8016d3c:	bf48      	it	mi
 8016d3e:	0fc8      	lsrmi	r0, r1, #31
 8016d40:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8016d44:	bf44      	itt	mi
 8016d46:	0049      	lslmi	r1, r1, #1
 8016d48:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8016d4c:	2500      	movs	r5, #0
 8016d4e:	1058      	asrs	r0, r3, #1
 8016d50:	0fcb      	lsrs	r3, r1, #31
 8016d52:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8016d56:	0049      	lsls	r1, r1, #1
 8016d58:	2316      	movs	r3, #22
 8016d5a:	462c      	mov	r4, r5
 8016d5c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8016d60:	19a7      	adds	r7, r4, r6
 8016d62:	4297      	cmp	r7, r2
 8016d64:	bfde      	ittt	le
 8016d66:	19bc      	addle	r4, r7, r6
 8016d68:	1bd2      	suble	r2, r2, r7
 8016d6a:	19ad      	addle	r5, r5, r6
 8016d6c:	0fcf      	lsrs	r7, r1, #31
 8016d6e:	3b01      	subs	r3, #1
 8016d70:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8016d74:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016d78:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016d7c:	d1f0      	bne.n	8016d60 <__ieee754_sqrt+0x94>
 8016d7e:	f04f 0c20 	mov.w	ip, #32
 8016d82:	469e      	mov	lr, r3
 8016d84:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8016d88:	42a2      	cmp	r2, r4
 8016d8a:	eb06 070e 	add.w	r7, r6, lr
 8016d8e:	dc02      	bgt.n	8016d96 <__ieee754_sqrt+0xca>
 8016d90:	d112      	bne.n	8016db8 <__ieee754_sqrt+0xec>
 8016d92:	428f      	cmp	r7, r1
 8016d94:	d810      	bhi.n	8016db8 <__ieee754_sqrt+0xec>
 8016d96:	2f00      	cmp	r7, #0
 8016d98:	eb07 0e06 	add.w	lr, r7, r6
 8016d9c:	da42      	bge.n	8016e24 <__ieee754_sqrt+0x158>
 8016d9e:	f1be 0f00 	cmp.w	lr, #0
 8016da2:	db3f      	blt.n	8016e24 <__ieee754_sqrt+0x158>
 8016da4:	f104 0801 	add.w	r8, r4, #1
 8016da8:	1b12      	subs	r2, r2, r4
 8016daa:	428f      	cmp	r7, r1
 8016dac:	bf88      	it	hi
 8016dae:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8016db2:	1bc9      	subs	r1, r1, r7
 8016db4:	4433      	add	r3, r6
 8016db6:	4644      	mov	r4, r8
 8016db8:	0052      	lsls	r2, r2, #1
 8016dba:	f1bc 0c01 	subs.w	ip, ip, #1
 8016dbe:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8016dc2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016dc6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016dca:	d1dd      	bne.n	8016d88 <__ieee754_sqrt+0xbc>
 8016dcc:	430a      	orrs	r2, r1
 8016dce:	d006      	beq.n	8016dde <__ieee754_sqrt+0x112>
 8016dd0:	1c5c      	adds	r4, r3, #1
 8016dd2:	bf13      	iteet	ne
 8016dd4:	3301      	addne	r3, #1
 8016dd6:	3501      	addeq	r5, #1
 8016dd8:	4663      	moveq	r3, ip
 8016dda:	f023 0301 	bicne.w	r3, r3, #1
 8016dde:	106a      	asrs	r2, r5, #1
 8016de0:	085b      	lsrs	r3, r3, #1
 8016de2:	07e9      	lsls	r1, r5, #31
 8016de4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8016de8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8016dec:	bf48      	it	mi
 8016dee:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8016df2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8016df6:	461c      	mov	r4, r3
 8016df8:	e780      	b.n	8016cfc <__ieee754_sqrt+0x30>
 8016dfa:	0aca      	lsrs	r2, r1, #11
 8016dfc:	3815      	subs	r0, #21
 8016dfe:	0549      	lsls	r1, r1, #21
 8016e00:	2a00      	cmp	r2, #0
 8016e02:	d0fa      	beq.n	8016dfa <__ieee754_sqrt+0x12e>
 8016e04:	02d6      	lsls	r6, r2, #11
 8016e06:	d50a      	bpl.n	8016e1e <__ieee754_sqrt+0x152>
 8016e08:	f1c3 0420 	rsb	r4, r3, #32
 8016e0c:	fa21 f404 	lsr.w	r4, r1, r4
 8016e10:	1e5d      	subs	r5, r3, #1
 8016e12:	4099      	lsls	r1, r3
 8016e14:	4322      	orrs	r2, r4
 8016e16:	1b43      	subs	r3, r0, r5
 8016e18:	e78b      	b.n	8016d32 <__ieee754_sqrt+0x66>
 8016e1a:	4618      	mov	r0, r3
 8016e1c:	e7f0      	b.n	8016e00 <__ieee754_sqrt+0x134>
 8016e1e:	0052      	lsls	r2, r2, #1
 8016e20:	3301      	adds	r3, #1
 8016e22:	e7ef      	b.n	8016e04 <__ieee754_sqrt+0x138>
 8016e24:	46a0      	mov	r8, r4
 8016e26:	e7bf      	b.n	8016da8 <__ieee754_sqrt+0xdc>
 8016e28:	7ff00000 	.word	0x7ff00000

08016e2c <fabs>:
 8016e2c:	ec51 0b10 	vmov	r0, r1, d0
 8016e30:	ee10 2a10 	vmov	r2, s0
 8016e34:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016e38:	ec43 2b10 	vmov	d0, r2, r3
 8016e3c:	4770      	bx	lr

08016e3e <finite>:
 8016e3e:	ee10 3a90 	vmov	r3, s1
 8016e42:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8016e46:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8016e4a:	0fc0      	lsrs	r0, r0, #31
 8016e4c:	4770      	bx	lr

08016e4e <matherr>:
 8016e4e:	2000      	movs	r0, #0
 8016e50:	4770      	bx	lr
 8016e52:	0000      	movs	r0, r0
 8016e54:	0000      	movs	r0, r0
	...

08016e58 <nan>:
 8016e58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016e60 <nan+0x8>
 8016e5c:	4770      	bx	lr
 8016e5e:	bf00      	nop
 8016e60:	00000000 	.word	0x00000000
 8016e64:	7ff80000 	.word	0x7ff80000

08016e68 <rint>:
 8016e68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016e6a:	ec51 0b10 	vmov	r0, r1, d0
 8016e6e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016e72:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8016e76:	2e13      	cmp	r6, #19
 8016e78:	460b      	mov	r3, r1
 8016e7a:	ee10 4a10 	vmov	r4, s0
 8016e7e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8016e82:	dc56      	bgt.n	8016f32 <rint+0xca>
 8016e84:	2e00      	cmp	r6, #0
 8016e86:	da2b      	bge.n	8016ee0 <rint+0x78>
 8016e88:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8016e8c:	4302      	orrs	r2, r0
 8016e8e:	d023      	beq.n	8016ed8 <rint+0x70>
 8016e90:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8016e94:	4302      	orrs	r2, r0
 8016e96:	4254      	negs	r4, r2
 8016e98:	4314      	orrs	r4, r2
 8016e9a:	0c4b      	lsrs	r3, r1, #17
 8016e9c:	0b24      	lsrs	r4, r4, #12
 8016e9e:	045b      	lsls	r3, r3, #17
 8016ea0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8016ea4:	ea44 0103 	orr.w	r1, r4, r3
 8016ea8:	460b      	mov	r3, r1
 8016eaa:	492f      	ldr	r1, [pc, #188]	; (8016f68 <rint+0x100>)
 8016eac:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8016eb0:	e9d1 6700 	ldrd	r6, r7, [r1]
 8016eb4:	4602      	mov	r2, r0
 8016eb6:	4639      	mov	r1, r7
 8016eb8:	4630      	mov	r0, r6
 8016eba:	f7e9 f9bf 	bl	800023c <__adddf3>
 8016ebe:	e9cd 0100 	strd	r0, r1, [sp]
 8016ec2:	463b      	mov	r3, r7
 8016ec4:	4632      	mov	r2, r6
 8016ec6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016eca:	f7e9 f9b5 	bl	8000238 <__aeabi_dsub>
 8016ece:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016ed2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8016ed6:	4639      	mov	r1, r7
 8016ed8:	ec41 0b10 	vmov	d0, r0, r1
 8016edc:	b003      	add	sp, #12
 8016ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ee0:	4a22      	ldr	r2, [pc, #136]	; (8016f6c <rint+0x104>)
 8016ee2:	4132      	asrs	r2, r6
 8016ee4:	ea01 0702 	and.w	r7, r1, r2
 8016ee8:	4307      	orrs	r7, r0
 8016eea:	d0f5      	beq.n	8016ed8 <rint+0x70>
 8016eec:	0852      	lsrs	r2, r2, #1
 8016eee:	4011      	ands	r1, r2
 8016ef0:	430c      	orrs	r4, r1
 8016ef2:	d00b      	beq.n	8016f0c <rint+0xa4>
 8016ef4:	ea23 0202 	bic.w	r2, r3, r2
 8016ef8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8016efc:	2e13      	cmp	r6, #19
 8016efe:	fa43 f306 	asr.w	r3, r3, r6
 8016f02:	bf0c      	ite	eq
 8016f04:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8016f08:	2400      	movne	r4, #0
 8016f0a:	4313      	orrs	r3, r2
 8016f0c:	4916      	ldr	r1, [pc, #88]	; (8016f68 <rint+0x100>)
 8016f0e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8016f12:	4622      	mov	r2, r4
 8016f14:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016f18:	4620      	mov	r0, r4
 8016f1a:	4629      	mov	r1, r5
 8016f1c:	f7e9 f98e 	bl	800023c <__adddf3>
 8016f20:	e9cd 0100 	strd	r0, r1, [sp]
 8016f24:	4622      	mov	r2, r4
 8016f26:	462b      	mov	r3, r5
 8016f28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016f2c:	f7e9 f984 	bl	8000238 <__aeabi_dsub>
 8016f30:	e7d2      	b.n	8016ed8 <rint+0x70>
 8016f32:	2e33      	cmp	r6, #51	; 0x33
 8016f34:	dd07      	ble.n	8016f46 <rint+0xde>
 8016f36:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8016f3a:	d1cd      	bne.n	8016ed8 <rint+0x70>
 8016f3c:	ee10 2a10 	vmov	r2, s0
 8016f40:	f7e9 f97c 	bl	800023c <__adddf3>
 8016f44:	e7c8      	b.n	8016ed8 <rint+0x70>
 8016f46:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8016f4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016f4e:	40f2      	lsrs	r2, r6
 8016f50:	4210      	tst	r0, r2
 8016f52:	d0c1      	beq.n	8016ed8 <rint+0x70>
 8016f54:	0852      	lsrs	r2, r2, #1
 8016f56:	4210      	tst	r0, r2
 8016f58:	bf1f      	itttt	ne
 8016f5a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8016f5e:	ea20 0202 	bicne.w	r2, r0, r2
 8016f62:	4134      	asrne	r4, r6
 8016f64:	4314      	orrne	r4, r2
 8016f66:	e7d1      	b.n	8016f0c <rint+0xa4>
 8016f68:	080194c8 	.word	0x080194c8
 8016f6c:	000fffff 	.word	0x000fffff

08016f70 <scalbn>:
 8016f70:	b570      	push	{r4, r5, r6, lr}
 8016f72:	ec55 4b10 	vmov	r4, r5, d0
 8016f76:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8016f7a:	4606      	mov	r6, r0
 8016f7c:	462b      	mov	r3, r5
 8016f7e:	b9aa      	cbnz	r2, 8016fac <scalbn+0x3c>
 8016f80:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016f84:	4323      	orrs	r3, r4
 8016f86:	d03b      	beq.n	8017000 <scalbn+0x90>
 8016f88:	4b31      	ldr	r3, [pc, #196]	; (8017050 <scalbn+0xe0>)
 8016f8a:	4629      	mov	r1, r5
 8016f8c:	2200      	movs	r2, #0
 8016f8e:	ee10 0a10 	vmov	r0, s0
 8016f92:	f7e9 fb09 	bl	80005a8 <__aeabi_dmul>
 8016f96:	4b2f      	ldr	r3, [pc, #188]	; (8017054 <scalbn+0xe4>)
 8016f98:	429e      	cmp	r6, r3
 8016f9a:	4604      	mov	r4, r0
 8016f9c:	460d      	mov	r5, r1
 8016f9e:	da12      	bge.n	8016fc6 <scalbn+0x56>
 8016fa0:	a327      	add	r3, pc, #156	; (adr r3, 8017040 <scalbn+0xd0>)
 8016fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fa6:	f7e9 faff 	bl	80005a8 <__aeabi_dmul>
 8016faa:	e009      	b.n	8016fc0 <scalbn+0x50>
 8016fac:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8016fb0:	428a      	cmp	r2, r1
 8016fb2:	d10c      	bne.n	8016fce <scalbn+0x5e>
 8016fb4:	ee10 2a10 	vmov	r2, s0
 8016fb8:	4620      	mov	r0, r4
 8016fba:	4629      	mov	r1, r5
 8016fbc:	f7e9 f93e 	bl	800023c <__adddf3>
 8016fc0:	4604      	mov	r4, r0
 8016fc2:	460d      	mov	r5, r1
 8016fc4:	e01c      	b.n	8017000 <scalbn+0x90>
 8016fc6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016fca:	460b      	mov	r3, r1
 8016fcc:	3a36      	subs	r2, #54	; 0x36
 8016fce:	4432      	add	r2, r6
 8016fd0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8016fd4:	428a      	cmp	r2, r1
 8016fd6:	dd0b      	ble.n	8016ff0 <scalbn+0x80>
 8016fd8:	ec45 4b11 	vmov	d1, r4, r5
 8016fdc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8017048 <scalbn+0xd8>
 8016fe0:	f000 f83c 	bl	801705c <copysign>
 8016fe4:	a318      	add	r3, pc, #96	; (adr r3, 8017048 <scalbn+0xd8>)
 8016fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fea:	ec51 0b10 	vmov	r0, r1, d0
 8016fee:	e7da      	b.n	8016fa6 <scalbn+0x36>
 8016ff0:	2a00      	cmp	r2, #0
 8016ff2:	dd08      	ble.n	8017006 <scalbn+0x96>
 8016ff4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016ff8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016ffc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017000:	ec45 4b10 	vmov	d0, r4, r5
 8017004:	bd70      	pop	{r4, r5, r6, pc}
 8017006:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801700a:	da0d      	bge.n	8017028 <scalbn+0xb8>
 801700c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017010:	429e      	cmp	r6, r3
 8017012:	ec45 4b11 	vmov	d1, r4, r5
 8017016:	dce1      	bgt.n	8016fdc <scalbn+0x6c>
 8017018:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8017040 <scalbn+0xd0>
 801701c:	f000 f81e 	bl	801705c <copysign>
 8017020:	a307      	add	r3, pc, #28	; (adr r3, 8017040 <scalbn+0xd0>)
 8017022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017026:	e7e0      	b.n	8016fea <scalbn+0x7a>
 8017028:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801702c:	3236      	adds	r2, #54	; 0x36
 801702e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017032:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017036:	4620      	mov	r0, r4
 8017038:	4629      	mov	r1, r5
 801703a:	2200      	movs	r2, #0
 801703c:	4b06      	ldr	r3, [pc, #24]	; (8017058 <scalbn+0xe8>)
 801703e:	e7b2      	b.n	8016fa6 <scalbn+0x36>
 8017040:	c2f8f359 	.word	0xc2f8f359
 8017044:	01a56e1f 	.word	0x01a56e1f
 8017048:	8800759c 	.word	0x8800759c
 801704c:	7e37e43c 	.word	0x7e37e43c
 8017050:	43500000 	.word	0x43500000
 8017054:	ffff3cb0 	.word	0xffff3cb0
 8017058:	3c900000 	.word	0x3c900000

0801705c <copysign>:
 801705c:	ec51 0b10 	vmov	r0, r1, d0
 8017060:	ee11 0a90 	vmov	r0, s3
 8017064:	ee10 2a10 	vmov	r2, s0
 8017068:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801706c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8017070:	ea41 0300 	orr.w	r3, r1, r0
 8017074:	ec43 2b10 	vmov	d0, r2, r3
 8017078:	4770      	bx	lr
	...

0801707c <_init>:
 801707c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801707e:	bf00      	nop
 8017080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017082:	bc08      	pop	{r3}
 8017084:	469e      	mov	lr, r3
 8017086:	4770      	bx	lr

08017088 <_fini>:
 8017088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801708a:	bf00      	nop
 801708c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801708e:	bc08      	pop	{r3}
 8017090:	469e      	mov	lr, r3
 8017092:	4770      	bx	lr
