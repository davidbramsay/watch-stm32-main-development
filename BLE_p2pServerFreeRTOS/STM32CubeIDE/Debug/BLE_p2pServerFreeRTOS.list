
BLE_p2pServerFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011368  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d98  080114a8  080114a8  000214a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012240  08012240  00022240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012248  08012248  00022248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801224c  0801224c  0002224c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000208  20000004  08012250  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_APP_CONTEXT 00000090  2000020c  08012458  0003020c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 TIMERSERVER_CONTEXT 00000099  2000029c  080124e8  0003029c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_DRIVER_CONTEXT 0000003e  20000338  08012581  00030338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 SYSTEM_DRIVER_CONTEXT 00000011  20000378  080125bf  00030378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00003810  2000038c  080125d0  0003038c  2**2
                  ALLOC
 12 ._user_heap_stack 00001404  20003b9c  080125d0  00033b9c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030389  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 15 MB_MEM1       000001b8  20030028  20030028  00040000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00040000  2**2
                  ALLOC
 17 .debug_info   0004ad32  00000000  00000000  000303b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 000082f2  00000000  00000000  0007b0eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00003418  00000000  00000000  000833e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00003098  00000000  00000000  000867f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  00030e13  00000000  00000000  00089890  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   00030cdb  00000000  00000000  000ba6a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    0010c243  00000000  00000000  000eb37e  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  001f75c1  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000e6ec  00000000  00000000  001f763c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000038c 	.word	0x2000038c
 800015c:	00000000 	.word	0x00000000
 8000160:	08011490 	.word	0x08011490

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000390 	.word	0x20000390
 800017c:	08011490 	.word	0x08011490

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800036e:	f1a4 0401 	sub.w	r4, r4, #1
 8000372:	d1e9      	bne.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b6c:	f000 b972 	b.w	8000e54 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9e08      	ldr	r6, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	4688      	mov	r8, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d14b      	bne.n	8000c2e <__udivmoddi4+0xa6>
 8000b96:	428a      	cmp	r2, r1
 8000b98:	4615      	mov	r5, r2
 8000b9a:	d967      	bls.n	8000c6c <__udivmoddi4+0xe4>
 8000b9c:	fab2 f282 	clz	r2, r2
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0720 	rsb	r7, r2, #32
 8000ba6:	fa01 f302 	lsl.w	r3, r1, r2
 8000baa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bae:	4095      	lsls	r5, r2
 8000bb0:	ea47 0803 	orr.w	r8, r7, r3
 8000bb4:	4094      	lsls	r4, r2
 8000bb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bba:	0c23      	lsrs	r3, r4, #16
 8000bbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bc0:	fa1f fc85 	uxth.w	ip, r5
 8000bc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bcc:	fb07 f10c 	mul.w	r1, r7, ip
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x60>
 8000bd4:	18eb      	adds	r3, r5, r3
 8000bd6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000bda:	f080 811b 	bcs.w	8000e14 <__udivmoddi4+0x28c>
 8000bde:	4299      	cmp	r1, r3
 8000be0:	f240 8118 	bls.w	8000e14 <__udivmoddi4+0x28c>
 8000be4:	3f02      	subs	r7, #2
 8000be6:	442b      	add	r3, r5
 8000be8:	1a5b      	subs	r3, r3, r1
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bfc:	45a4      	cmp	ip, r4
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x8c>
 8000c00:	192c      	adds	r4, r5, r4
 8000c02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c06:	f080 8107 	bcs.w	8000e18 <__udivmoddi4+0x290>
 8000c0a:	45a4      	cmp	ip, r4
 8000c0c:	f240 8104 	bls.w	8000e18 <__udivmoddi4+0x290>
 8000c10:	3802      	subs	r0, #2
 8000c12:	442c      	add	r4, r5
 8000c14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c18:	eba4 040c 	sub.w	r4, r4, ip
 8000c1c:	2700      	movs	r7, #0
 8000c1e:	b11e      	cbz	r6, 8000c28 <__udivmoddi4+0xa0>
 8000c20:	40d4      	lsrs	r4, r2
 8000c22:	2300      	movs	r3, #0
 8000c24:	e9c6 4300 	strd	r4, r3, [r6]
 8000c28:	4639      	mov	r1, r7
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d909      	bls.n	8000c46 <__udivmoddi4+0xbe>
 8000c32:	2e00      	cmp	r6, #0
 8000c34:	f000 80eb 	beq.w	8000e0e <__udivmoddi4+0x286>
 8000c38:	2700      	movs	r7, #0
 8000c3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c3e:	4638      	mov	r0, r7
 8000c40:	4639      	mov	r1, r7
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	fab3 f783 	clz	r7, r3
 8000c4a:	2f00      	cmp	r7, #0
 8000c4c:	d147      	bne.n	8000cde <__udivmoddi4+0x156>
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d302      	bcc.n	8000c58 <__udivmoddi4+0xd0>
 8000c52:	4282      	cmp	r2, r0
 8000c54:	f200 80fa 	bhi.w	8000e4c <__udivmoddi4+0x2c4>
 8000c58:	1a84      	subs	r4, r0, r2
 8000c5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5e:	2001      	movs	r0, #1
 8000c60:	4698      	mov	r8, r3
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	d0e0      	beq.n	8000c28 <__udivmoddi4+0xa0>
 8000c66:	e9c6 4800 	strd	r4, r8, [r6]
 8000c6a:	e7dd      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000c6c:	b902      	cbnz	r2, 8000c70 <__udivmoddi4+0xe8>
 8000c6e:	deff      	udf	#255	; 0xff
 8000c70:	fab2 f282 	clz	r2, r2
 8000c74:	2a00      	cmp	r2, #0
 8000c76:	f040 808f 	bne.w	8000d98 <__udivmoddi4+0x210>
 8000c7a:	1b49      	subs	r1, r1, r5
 8000c7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c80:	fa1f f885 	uxth.w	r8, r5
 8000c84:	2701      	movs	r7, #1
 8000c86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c94:	fb08 f10c 	mul.w	r1, r8, ip
 8000c98:	4299      	cmp	r1, r3
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0x124>
 8000c9c:	18eb      	adds	r3, r5, r3
 8000c9e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x122>
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	f200 80cd 	bhi.w	8000e44 <__udivmoddi4+0x2bc>
 8000caa:	4684      	mov	ip, r0
 8000cac:	1a59      	subs	r1, r3, r1
 8000cae:	b2a3      	uxth	r3, r4
 8000cb0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cb8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cbc:	fb08 f800 	mul.w	r8, r8, r0
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x14c>
 8000cc4:	192c      	adds	r4, r5, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x14a>
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	f200 80b6 	bhi.w	8000e3e <__udivmoddi4+0x2b6>
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	eba4 0408 	sub.w	r4, r4, r8
 8000cd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cdc:	e79f      	b.n	8000c1e <__udivmoddi4+0x96>
 8000cde:	f1c7 0c20 	rsb	ip, r7, #32
 8000ce2:	40bb      	lsls	r3, r7
 8000ce4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ce8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cec:	fa01 f407 	lsl.w	r4, r1, r7
 8000cf0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cf4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cf8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cfc:	4325      	orrs	r5, r4
 8000cfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d02:	0c2c      	lsrs	r4, r5, #16
 8000d04:	fb08 3319 	mls	r3, r8, r9, r3
 8000d08:	fa1f fa8e 	uxth.w	sl, lr
 8000d0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d10:	fb09 f40a 	mul.w	r4, r9, sl
 8000d14:	429c      	cmp	r4, r3
 8000d16:	fa02 f207 	lsl.w	r2, r2, r7
 8000d1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b0>
 8000d20:	eb1e 0303 	adds.w	r3, lr, r3
 8000d24:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d28:	f080 8087 	bcs.w	8000e3a <__udivmoddi4+0x2b2>
 8000d2c:	429c      	cmp	r4, r3
 8000d2e:	f240 8084 	bls.w	8000e3a <__udivmoddi4+0x2b2>
 8000d32:	f1a9 0902 	sub.w	r9, r9, #2
 8000d36:	4473      	add	r3, lr
 8000d38:	1b1b      	subs	r3, r3, r4
 8000d3a:	b2ad      	uxth	r5, r5
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d4c:	45a2      	cmp	sl, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1da>
 8000d50:	eb1e 0404 	adds.w	r4, lr, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d58:	d26b      	bcs.n	8000e32 <__udivmoddi4+0x2aa>
 8000d5a:	45a2      	cmp	sl, r4
 8000d5c:	d969      	bls.n	8000e32 <__udivmoddi4+0x2aa>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4474      	add	r4, lr
 8000d62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d66:	fba0 8902 	umull	r8, r9, r0, r2
 8000d6a:	eba4 040a 	sub.w	r4, r4, sl
 8000d6e:	454c      	cmp	r4, r9
 8000d70:	46c2      	mov	sl, r8
 8000d72:	464b      	mov	r3, r9
 8000d74:	d354      	bcc.n	8000e20 <__udivmoddi4+0x298>
 8000d76:	d051      	beq.n	8000e1c <__udivmoddi4+0x294>
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d069      	beq.n	8000e50 <__udivmoddi4+0x2c8>
 8000d7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d80:	eb64 0403 	sbc.w	r4, r4, r3
 8000d84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d88:	40fd      	lsrs	r5, r7
 8000d8a:	40fc      	lsrs	r4, r7
 8000d8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000d90:	e9c6 5400 	strd	r5, r4, [r6]
 8000d94:	2700      	movs	r7, #0
 8000d96:	e747      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000d98:	f1c2 0320 	rsb	r3, r2, #32
 8000d9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000da0:	4095      	lsls	r5, r2
 8000da2:	fa01 f002 	lsl.w	r0, r1, r2
 8000da6:	fa21 f303 	lsr.w	r3, r1, r3
 8000daa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dae:	4338      	orrs	r0, r7
 8000db0:	0c01      	lsrs	r1, r0, #16
 8000db2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000db6:	fa1f f885 	uxth.w	r8, r5
 8000dba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc2:	fb07 f308 	mul.w	r3, r7, r8
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d907      	bls.n	8000dde <__udivmoddi4+0x256>
 8000dce:	1869      	adds	r1, r5, r1
 8000dd0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000dd4:	d22f      	bcs.n	8000e36 <__udivmoddi4+0x2ae>
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	d92d      	bls.n	8000e36 <__udivmoddi4+0x2ae>
 8000dda:	3f02      	subs	r7, #2
 8000ddc:	4429      	add	r1, r5
 8000dde:	1acb      	subs	r3, r1, r3
 8000de0:	b281      	uxth	r1, r0
 8000de2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dee:	fb00 f308 	mul.w	r3, r0, r8
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d907      	bls.n	8000e06 <__udivmoddi4+0x27e>
 8000df6:	1869      	adds	r1, r5, r1
 8000df8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dfc:	d217      	bcs.n	8000e2e <__udivmoddi4+0x2a6>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d915      	bls.n	8000e2e <__udivmoddi4+0x2a6>
 8000e02:	3802      	subs	r0, #2
 8000e04:	4429      	add	r1, r5
 8000e06:	1ac9      	subs	r1, r1, r3
 8000e08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e0c:	e73b      	b.n	8000c86 <__udivmoddi4+0xfe>
 8000e0e:	4637      	mov	r7, r6
 8000e10:	4630      	mov	r0, r6
 8000e12:	e709      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000e14:	4607      	mov	r7, r0
 8000e16:	e6e7      	b.n	8000be8 <__udivmoddi4+0x60>
 8000e18:	4618      	mov	r0, r3
 8000e1a:	e6fb      	b.n	8000c14 <__udivmoddi4+0x8c>
 8000e1c:	4541      	cmp	r1, r8
 8000e1e:	d2ab      	bcs.n	8000d78 <__udivmoddi4+0x1f0>
 8000e20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e24:	eb69 020e 	sbc.w	r2, r9, lr
 8000e28:	3801      	subs	r0, #1
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	e7a4      	b.n	8000d78 <__udivmoddi4+0x1f0>
 8000e2e:	4660      	mov	r0, ip
 8000e30:	e7e9      	b.n	8000e06 <__udivmoddi4+0x27e>
 8000e32:	4618      	mov	r0, r3
 8000e34:	e795      	b.n	8000d62 <__udivmoddi4+0x1da>
 8000e36:	4667      	mov	r7, ip
 8000e38:	e7d1      	b.n	8000dde <__udivmoddi4+0x256>
 8000e3a:	4681      	mov	r9, r0
 8000e3c:	e77c      	b.n	8000d38 <__udivmoddi4+0x1b0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	442c      	add	r4, r5
 8000e42:	e747      	b.n	8000cd4 <__udivmoddi4+0x14c>
 8000e44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e48:	442b      	add	r3, r5
 8000e4a:	e72f      	b.n	8000cac <__udivmoddi4+0x124>
 8000e4c:	4638      	mov	r0, r7
 8000e4e:	e708      	b.n	8000c62 <__udivmoddi4+0xda>
 8000e50:	4637      	mov	r7, r6
 8000e52:	e6e9      	b.n	8000c28 <__udivmoddi4+0xa0>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <LL_FLASH_GetUDN+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	1fff7580 	.word	0x1fff7580

08000e70 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <LL_FLASH_GetDeviceID+0x14>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	b2db      	uxtb	r3, r3
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	1fff7584 	.word	0x1fff7584

08000e88 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <LL_FLASH_GetSTCompanyID+0x14>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	0a1b      	lsrs	r3, r3, #8
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	1fff7584 	.word	0x1fff7584

08000ea0 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8000ea0:	b5b0      	push	{r4, r5, r7, lr}
 8000ea2:	b08c      	sub	sp, #48	; 0x30
 8000ea4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8000ea6:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <APP_BLE_Init+0xb4>)
 8000ea8:	463c      	mov	r4, r7
 8000eaa:	461d      	mov	r5, r3
 8000eac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000eb8:	c407      	stmia	r4!, {r0, r1, r2}
 8000eba:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8000ebc:	f000 fa12 	bl	80012e4 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	2002      	movs	r0, #2
 8000ec4:	f00d fef6 	bl	800ecb4 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  HciUserEvtProcessId = osThreadNew(HciUserEvtProcess, NULL, &HciUserEvtProcess_attr);
 8000ec8:	4a23      	ldr	r2, [pc, #140]	; (8000f58 <APP_BLE_Init+0xb8>)
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4823      	ldr	r0, [pc, #140]	; (8000f5c <APP_BLE_Init+0xbc>)
 8000ece:	f009 ffb5 	bl	800ae3c <osThreadNew>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	4b22      	ldr	r3, [pc, #136]	; (8000f60 <APP_BLE_Init+0xc0>)
 8000ed6:	601a      	str	r2, [r3, #0]

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 8000ed8:	463b      	mov	r3, r7
 8000eda:	4618      	mov	r0, r3
 8000edc:	f008 fb46 	bl	800956c <SHCI_C2_BLE_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <APP_BLE_Init+0x4a>
  {
    Error_Handler();
 8000ee6:	f002 fd5f 	bl	80039a8 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8000eea:	f000 fa23 	bl	8001334 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8000eee:	f007 fae9 	bl	80084c4 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <APP_BLE_Init+0xc4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8000efa:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <APP_BLE_Init+0xc4>)
 8000efc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f00:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  AdvUpdateProcessId = osThreadNew(AdvUpdateProcess, NULL, &AdvUpdateProcess_attr);
 8000f02:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <APP_BLE_Init+0xc8>)
 8000f04:	2100      	movs	r1, #0
 8000f06:	4819      	ldr	r0, [pc, #100]	; (8000f6c <APP_BLE_Init+0xcc>)
 8000f08:	f009 ff98 	bl	800ae3c <osThreadNew>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <APP_BLE_Init+0xd0>)
 8000f10:	601a      	str	r2, [r3, #0]

  /**
   * Initialize HRS Application
   */
  //P2P FIX HRSAPP_Init();
  index_con_int = 0;
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <APP_BLE_Init+0xd4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 8000f18:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <APP_BLE_Init+0xd8>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	701a      	strb	r2, [r3, #0]
  P2PS_APP_Init();
 8000f1e:	f000 fd07 	bl	8001930 <P2PS_APP_Init>

  /**
   * Create timer to handle the connection state machine
   */

  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Mgr);
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <APP_BLE_Init+0xdc>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	4916      	ldr	r1, [pc, #88]	; (8000f80 <APP_BLE_Init+0xe0>)
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f001 ffa1 	bl	8002e70 <HW_TS_Create>
  /**
   * Make device discoverable
   */

  //P2P FIX lines below
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL; //AD_TYPE_16_BIT_SERV_UUID;
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <APP_BLE_Init+0xc4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;//1;
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <APP_BLE_Init+0xc4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	761a      	strb	r2, [r3, #24]
  //P2P FIX Add_Advertisment_Service_UUID(HEART_RATE_SERVICE_UUID);
  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8000f3a:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <APP_BLE_Init+0xe4>)
 8000f3c:	2280      	movs	r2, #128	; 0x80
 8000f3e:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <APP_BLE_Init+0xe8>)
 8000f42:	22a0      	movs	r2, #160	; 0xa0
 8000f44:	801a      	strh	r2, [r3, #0]

  /**
  * Start to Advertise to be connected by Collector
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8000f46:	2001      	movs	r0, #1
 8000f48:	f000 fad0 	bl	80014ec <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8000f4c:	bf00      	nop
}
 8000f4e:	3730      	adds	r7, #48	; 0x30
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bdb0      	pop	{r4, r5, r7, pc}
 8000f54:	080114d4 	.word	0x080114d4
 8000f58:	08011d14 	.word	0x08011d14
 8000f5c:	08001701 	.word	0x08001701
 8000f60:	200038dc 	.word	0x200038dc
 8000f64:	2000020c 	.word	0x2000020c
 8000f68:	08011cf0 	.word	0x08011cf0
 8000f6c:	080016d9 	.word	0x080016d9
 8000f70:	200038ec 	.word	0x200038ec
 8000f74:	200038e5 	.word	0x200038e5
 8000f78:	200038e4 	.word	0x200038e4
 8000f7c:	080016c1 	.word	0x080016c1
 8000f80:	2000028d 	.word	0x2000028d
 8000f84:	20000290 	.word	0x20000290
 8000f88:	20000292 	.word	0x20000292

08000f8c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08c      	sub	sp, #48	; 0x30
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8000f94:	2342      	movs	r3, #66	; 0x42
 8000f96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8000fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b3e      	cmp	r3, #62	; 0x3e
 8000fa6:	d028      	beq.n	8000ffa <SVCCTL_App_Notification+0x6e>
 8000fa8:	2bff      	cmp	r3, #255	; 0xff
 8000faa:	f000 80a5 	beq.w	80010f8 <SVCCTL_App_Notification+0x16c>
 8000fae:	2b05      	cmp	r3, #5
 8000fb0:	d000      	beq.n	8000fb4 <SVCCTL_App_Notification+0x28>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
        break;
 8000fb2:	e145      	b.n	8001240 <SVCCTL_App_Notification+0x2b4>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8000fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	613b      	str	r3, [r7, #16]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	4ba2      	ldr	r3, [pc, #648]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 8000fc4:	8adb      	ldrh	r3, [r3, #22]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d109      	bne.n	8000fde <SVCCTL_App_Notification+0x52>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8000fca:	4ba0      	ldr	r3, [pc, #640]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8000fd0:	4b9e      	ldr	r3, [pc, #632]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 8000fd8:	489d      	ldr	r0, [pc, #628]	; (8001250 <SVCCTL_App_Notification+0x2c4>)
 8000fda:	f00e fba7 	bl	800f72c <puts>
      Adv_Request(APP_BLE_FAST_ADV);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f000 fa84 	bl	80014ec <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8000fe4:	4b9b      	ldr	r3, [pc, #620]	; (8001254 <SVCCTL_App_Notification+0x2c8>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8000fea:	4b98      	ldr	r3, [pc, #608]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 8000fec:	8ada      	ldrh	r2, [r3, #22]
 8000fee:	4b99      	ldr	r3, [pc, #612]	; (8001254 <SVCCTL_App_Notification+0x2c8>)
 8000ff0:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 8000ff2:	4898      	ldr	r0, [pc, #608]	; (8001254 <SVCCTL_App_Notification+0x2c8>)
 8000ff4:	f000 fc88 	bl	8001908 <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 8000ff8:	e122      	b.n	8001240 <SVCCTL_App_Notification+0x2b4>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8000ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	61fb      	str	r3, [r7, #28]
      switch (meta_evt->subevent)
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b03      	cmp	r3, #3
 8001006:	d004      	beq.n	8001012 <SVCCTL_App_Notification+0x86>
 8001008:	2b0c      	cmp	r3, #12
 800100a:	d006      	beq.n	800101a <SVCCTL_App_Notification+0x8e>
 800100c:	2b01      	cmp	r3, #1
 800100e:	d042      	beq.n	8001096 <SVCCTL_App_Notification+0x10a>
          break;
 8001010:	e071      	b.n	80010f6 <SVCCTL_App_Notification+0x16a>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 8001012:	4891      	ldr	r0, [pc, #580]	; (8001258 <SVCCTL_App_Notification+0x2cc>)
 8001014:	f00e fb8a 	bl	800f72c <puts>
          break;
 8001018:	e06d      	b.n	80010f6 <SVCCTL_App_Notification+0x16a>
          APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE \n");
 800101a:	4890      	ldr	r0, [pc, #576]	; (800125c <SVCCTL_App_Notification+0x2d0>)
 800101c:	f00e fb86 	bl	800f72c <puts>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	3301      	adds	r3, #1
 8001024:	61bb      	str	r3, [r7, #24]
          if (evt_le_phy_update_complete->Status == 0)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d103      	bne.n	8001036 <SVCCTL_App_Notification+0xaa>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status ok \n");
 800102e:	488c      	ldr	r0, [pc, #560]	; (8001260 <SVCCTL_App_Notification+0x2d4>)
 8001030:	f00e fb7c 	bl	800f72c <puts>
 8001034:	e002      	b.n	800103c <SVCCTL_App_Notification+0xb0>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status nok \n");
 8001036:	488b      	ldr	r0, [pc, #556]	; (8001264 <SVCCTL_App_Notification+0x2d8>)
 8001038:	f00e fb78 	bl	800f72c <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800103c:	4b83      	ldr	r3, [pc, #524]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 800103e:	8adb      	ldrh	r3, [r3, #22]
 8001040:	f107 020e 	add.w	r2, r7, #14
 8001044:	f107 010f 	add.w	r1, r7, #15
 8001048:	4618      	mov	r0, r3
 800104a:	f008 f9a0 	bl	800938e <hci_le_read_phy>
 800104e:	4603      	mov	r3, r0
 8001050:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret == BLE_STATUS_SUCCESS)
 8001054:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001058:	2b00      	cmp	r3, #0
 800105a:	d118      	bne.n	800108e <SVCCTL_App_Notification+0x102>
            APP_DBG_MSG("Read_PHY success \n");
 800105c:	4882      	ldr	r0, [pc, #520]	; (8001268 <SVCCTL_App_Notification+0x2dc>)
 800105e:	f00e fb65 	bl	800f72c <puts>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	2b02      	cmp	r3, #2
 8001066:	d10a      	bne.n	800107e <SVCCTL_App_Notification+0xf2>
 8001068:	7bbb      	ldrb	r3, [r7, #14]
 800106a:	2b02      	cmp	r3, #2
 800106c:	d107      	bne.n	800107e <SVCCTL_App_Notification+0xf2>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	4619      	mov	r1, r3
 8001072:	7bbb      	ldrb	r3, [r7, #14]
 8001074:	461a      	mov	r2, r3
 8001076:	487d      	ldr	r0, [pc, #500]	; (800126c <SVCCTL_App_Notification+0x2e0>)
 8001078:	f00e fae4 	bl	800f644 <iprintf>
          break;
 800107c:	e03b      	b.n	80010f6 <SVCCTL_App_Notification+0x16a>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	4619      	mov	r1, r3
 8001082:	7bbb      	ldrb	r3, [r7, #14]
 8001084:	461a      	mov	r2, r3
 8001086:	4879      	ldr	r0, [pc, #484]	; (800126c <SVCCTL_App_Notification+0x2e0>)
 8001088:	f00e fadc 	bl	800f644 <iprintf>
          break;
 800108c:	e033      	b.n	80010f6 <SVCCTL_App_Notification+0x16a>
            APP_DBG_MSG("Read conf not succeess \n");
 800108e:	4878      	ldr	r0, [pc, #480]	; (8001270 <SVCCTL_App_Notification+0x2e4>)
 8001090:	f00e fb4c 	bl	800f72c <puts>
          break;
 8001094:	e02f      	b.n	80010f6 <SVCCTL_App_Notification+0x16a>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800109c:	4b6b      	ldr	r3, [pc, #428]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 800109e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80010a2:	4618      	mov	r0, r3
 80010a4:	f001 ff5a 	bl	8002f5c <HW_TS_Stop>
          APP_DBG_MSG("EVT_LE_CONN_COMPLETE for connection handle 0x%x\n", connection_complete_event->Connection_Handle);
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	4619      	mov	r1, r3
 80010b2:	4870      	ldr	r0, [pc, #448]	; (8001274 <SVCCTL_App_Notification+0x2e8>)
 80010b4:	f00e fac6 	bl	800f644 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80010b8:	4b64      	ldr	r3, [pc, #400]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 80010ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80010be:	2b04      	cmp	r3, #4
 80010c0:	d104      	bne.n	80010cc <SVCCTL_App_Notification+0x140>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80010c2:	4b62      	ldr	r3, [pc, #392]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 80010c4:	2206      	movs	r2, #6
 80010c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80010ca:	e003      	b.n	80010d4 <SVCCTL_App_Notification+0x148>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80010cc:	4b5f      	ldr	r3, [pc, #380]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 80010ce:	2205      	movs	r2, #5
 80010d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	4b5b      	ldr	r3, [pc, #364]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 80010de:	82da      	strh	r2, [r3, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 80010e0:	4b5c      	ldr	r3, [pc, #368]	; (8001254 <SVCCTL_App_Notification+0x2c8>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80010e6:	4b59      	ldr	r3, [pc, #356]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 80010e8:	8ada      	ldrh	r2, [r3, #22]
 80010ea:	4b5a      	ldr	r3, [pc, #360]	; (8001254 <SVCCTL_App_Notification+0x2c8>)
 80010ec:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 80010ee:	4859      	ldr	r0, [pc, #356]	; (8001254 <SVCCTL_App_Notification+0x2c8>)
 80010f0:	f000 fc0a 	bl	8001908 <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 80010f4:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 80010f6:	e0a3      	b.n	8001240 <SVCCTL_App_Notification+0x2b4>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 80010f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010fa:	3302      	adds	r3, #2
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blue_evt->ecode)
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	b29b      	uxth	r3, r3
 8001104:	f240 4205 	movw	r2, #1029	; 0x405
 8001108:	4293      	cmp	r3, r2
 800110a:	d04a      	beq.n	80011a2 <SVCCTL_App_Notification+0x216>
 800110c:	f240 4205 	movw	r2, #1029	; 0x405
 8001110:	4293      	cmp	r3, r2
 8001112:	dc18      	bgt.n	8001146 <SVCCTL_App_Notification+0x1ba>
 8001114:	f240 4202 	movw	r2, #1026	; 0x402
 8001118:	4293      	cmp	r3, r2
 800111a:	d033      	beq.n	8001184 <SVCCTL_App_Notification+0x1f8>
 800111c:	f240 4202 	movw	r2, #1026	; 0x402
 8001120:	4293      	cmp	r3, r2
 8001122:	dc07      	bgt.n	8001134 <SVCCTL_App_Notification+0x1a8>
 8001124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001128:	d028      	beq.n	800117c <SVCCTL_App_Notification+0x1f0>
 800112a:	f240 4201 	movw	r2, #1025	; 0x401
 800112e:	4293      	cmp	r3, r2
 8001130:	d069      	beq.n	8001206 <SVCCTL_App_Notification+0x27a>
      break; /* EVT_VENDOR */
 8001132:	e084      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
      switch (blue_evt->ecode)
 8001134:	f240 4203 	movw	r2, #1027	; 0x403
 8001138:	4293      	cmp	r3, r2
 800113a:	d02a      	beq.n	8001192 <SVCCTL_App_Notification+0x206>
 800113c:	f240 4204 	movw	r2, #1028	; 0x404
 8001140:	4293      	cmp	r3, r2
 8001142:	d02a      	beq.n	800119a <SVCCTL_App_Notification+0x20e>
      break; /* EVT_VENDOR */
 8001144:	e07b      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
      switch (blue_evt->ecode)
 8001146:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800114a:	d03a      	beq.n	80011c2 <SVCCTL_App_Notification+0x236>
 800114c:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8001150:	dc08      	bgt.n	8001164 <SVCCTL_App_Notification+0x1d8>
 8001152:	f240 4206 	movw	r2, #1030	; 0x406
 8001156:	4293      	cmp	r3, r2
 8001158:	d02f      	beq.n	80011ba <SVCCTL_App_Notification+0x22e>
 800115a:	f240 4207 	movw	r2, #1031	; 0x407
 800115e:	4293      	cmp	r3, r2
 8001160:	d069      	beq.n	8001236 <SVCCTL_App_Notification+0x2aa>
      break; /* EVT_VENDOR */
 8001162:	e06c      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
      switch (blue_evt->ecode)
 8001164:	f240 420a 	movw	r2, #1034	; 0x40a
 8001168:	4293      	cmp	r3, r2
 800116a:	d02e      	beq.n	80011ca <SVCCTL_App_Notification+0x23e>
 800116c:	f240 420a 	movw	r2, #1034	; 0x40a
 8001170:	4293      	cmp	r3, r2
 8001172:	db2e      	blt.n	80011d2 <SVCCTL_App_Notification+0x246>
 8001174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001178:	d05a      	beq.n	8001230 <SVCCTL_App_Notification+0x2a4>
      break; /* EVT_VENDOR */
 800117a:	e060      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_LIMITED_DISCOVERABLE \n");
 800117c:	483e      	ldr	r0, [pc, #248]	; (8001278 <SVCCTL_App_Notification+0x2ec>)
 800117e:	f00e fad5 	bl	800f72c <puts>
          break; /* EVT_BLUE_GAP_LIMITED_DISCOVERABLE */
 8001182:	e05c      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PASS_KEY_REQUEST \n");
 8001184:	483d      	ldr	r0, [pc, #244]	; (800127c <SVCCTL_App_Notification+0x2f0>)
 8001186:	f00e fad1 	bl	800f72c <puts>
        APP_DBG_MSG("\r\n\r** aci_gap_pass_key_resp \n");
 800118a:	483d      	ldr	r0, [pc, #244]	; (8001280 <SVCCTL_App_Notification+0x2f4>)
 800118c:	f00e face 	bl	800f72c <puts>
          break; /* EVT_BLUE_GAP_PASS_KEY_REQUEST */
 8001190:	e055      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_AUTHORIZATION_REQUEST \n");
 8001192:	483c      	ldr	r0, [pc, #240]	; (8001284 <SVCCTL_App_Notification+0x2f8>)
 8001194:	f00e faca 	bl	800f72c <puts>
          break; /* EVT_BLUE_GAP_AUTHORIZATION_REQUEST */
 8001198:	e051      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_SLAVE_SECURITY_INITIATED \n");
 800119a:	483b      	ldr	r0, [pc, #236]	; (8001288 <SVCCTL_App_Notification+0x2fc>)
 800119c:	f00e fac6 	bl	800f72c <puts>
          break; /* EVT_BLUE_GAP_SLAVE_SECURITY_INITIATED */
 80011a0:	e04d      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_BOND_LOST \n");
 80011a2:	483a      	ldr	r0, [pc, #232]	; (800128c <SVCCTL_App_Notification+0x300>)
 80011a4:	f00e fac2 	bl	800f72c <puts>
          aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 80011a8:	4b28      	ldr	r3, [pc, #160]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 80011aa:	8adb      	ldrh	r3, [r3, #22]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f007 fd24 	bl	8008bfa <aci_gap_allow_rebond>
        APP_DBG_MSG("\r\n\r** Send allow rebond \n");
 80011b2:	4837      	ldr	r0, [pc, #220]	; (8001290 <SVCCTL_App_Notification+0x304>)
 80011b4:	f00e faba 	bl	800f72c <puts>
          break; /* EVT_BLUE_GAP_BOND_LOST */
 80011b8:	e041      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_DEVICE_FOUND \n");
 80011ba:	4836      	ldr	r0, [pc, #216]	; (8001294 <SVCCTL_App_Notification+0x308>)
 80011bc:	f00e fab6 	bl	800f72c <puts>
          break; /* EVT_BLUE_GAP_DEVICE_FOUND */
 80011c0:	e03d      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
         APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_DEVICE_FOUND \n");
 80011c2:	4834      	ldr	r0, [pc, #208]	; (8001294 <SVCCTL_App_Notification+0x308>)
 80011c4:	f00e fab2 	bl	800f72c <puts>
          break; /* EVT_BLUE_GAP_DEVICE_FOUND */
 80011c8:	e039      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
         APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_KEYPRESS_NOTIFICATION \n");
 80011ca:	4833      	ldr	r0, [pc, #204]	; (8001298 <SVCCTL_App_Notification+0x30c>)
 80011cc:	f00e faae 	bl	800f72c <puts>
          break; /* EVT_BLUE_GAP_KEY_PRESS_NOTIFICATION */    
 80011d0:	e035      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(blue_evt->data))->Numeric_Value);
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	3302      	adds	r3, #2
          APP_DBG_MSG("numeric_value = %ld\n",
 80011d6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80011da:	4619      	mov	r1, r3
 80011dc:	482f      	ldr	r0, [pc, #188]	; (800129c <SVCCTL_App_Notification+0x310>)
 80011de:	f00e fa31 	bl	800f644 <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(blue_evt->data))->Numeric_Value);
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	3302      	adds	r3, #2
          APP_DBG_MSG("Hex_value = %lx\n",
 80011e6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80011ea:	4619      	mov	r1, r3
 80011ec:	482c      	ldr	r0, [pc, #176]	; (80012a0 <SVCCTL_App_Notification+0x314>)
 80011ee:	f00e fa29 	bl	800f644 <iprintf>
          aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 1); /* CONFIRM_YES = 1 */
 80011f2:	4b16      	ldr	r3, [pc, #88]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 80011f4:	8adb      	ldrh	r3, [r3, #22]
 80011f6:	2101      	movs	r1, #1
 80011f8:	4618      	mov	r0, r3
 80011fa:	f007 fd48 	bl	8008c8e <aci_gap_numeric_comparison_value_confirm_yesno>
          APP_DBG_MSG("\r\n\r** aci_gap_numeric_comparison_value_confirm_yesno-->YES \n");
 80011fe:	4829      	ldr	r0, [pc, #164]	; (80012a4 <SVCCTL_App_Notification+0x318>)
 8001200:	f00e fa94 	bl	800f72c <puts>
          break;
 8001204:	e01b      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blue_evt->data;
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001208:	3302      	adds	r3, #2
 800120a:	623b      	str	r3, [r7, #32]
            APP_DBG_MSG("BLE_CTRL_App_Notification: EVT_BLUE_GAP_PAIRING_CMPLT, pairing_complete->Status = %d\n",pairing_complete->Status);
 800120c:	6a3b      	ldr	r3, [r7, #32]
 800120e:	789b      	ldrb	r3, [r3, #2]
 8001210:	4619      	mov	r1, r3
 8001212:	4825      	ldr	r0, [pc, #148]	; (80012a8 <SVCCTL_App_Notification+0x31c>)
 8001214:	f00e fa16 	bl	800f644 <iprintf>
            if (pairing_complete->Status == 0)
 8001218:	6a3b      	ldr	r3, [r7, #32]
 800121a:	789b      	ldrb	r3, [r3, #2]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d103      	bne.n	8001228 <SVCCTL_App_Notification+0x29c>
              APP_DBG_MSG("\r\n\r** Pairing OK \n");
 8001220:	4822      	ldr	r0, [pc, #136]	; (80012ac <SVCCTL_App_Notification+0x320>)
 8001222:	f00e fa83 	bl	800f72c <puts>
           break;    
 8001226:	e00a      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
              APP_DBG_MSG("\r\n\r** Pairing KO \n");
 8001228:	4821      	ldr	r0, [pc, #132]	; (80012b0 <SVCCTL_App_Notification+0x324>)
 800122a:	f00e fa7f 	bl	800f72c <puts>
           break;    
 800122e:	e006      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
          mutex = 1;
 8001230:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <SVCCTL_App_Notification+0x328>)
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PROCEDURE_COMPLETE \n");
 8001236:	4820      	ldr	r0, [pc, #128]	; (80012b8 <SVCCTL_App_Notification+0x32c>)
 8001238:	f00e fa78 	bl	800f72c <puts>
          break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800123c:	bf00      	nop
      break; /* EVT_VENDOR */
 800123e:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8001240:	2301      	movs	r3, #1
}
 8001242:	4618      	mov	r0, r3
 8001244:	3730      	adds	r7, #48	; 0x30
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	2000020c 	.word	0x2000020c
 8001250:	08011504 	.word	0x08011504
 8001254:	200038e0 	.word	0x200038e0
 8001258:	0801152c 	.word	0x0801152c
 800125c:	08011558 	.word	0x08011558
 8001260:	08011574 	.word	0x08011574
 8001264:	08011598 	.word	0x08011598
 8001268:	080115c0 	.word	0x080115c0
 800126c:	080115d4 	.word	0x080115d4
 8001270:	080115f0 	.word	0x080115f0
 8001274:	08011608 	.word	0x08011608
 8001278:	0801163c 	.word	0x0801163c
 800127c:	08011668 	.word	0x08011668
 8001280:	08011690 	.word	0x08011690
 8001284:	080116b0 	.word	0x080116b0
 8001288:	080116dc 	.word	0x080116dc
 800128c:	0801170c 	.word	0x0801170c
 8001290:	0801172c 	.word	0x0801172c
 8001294:	08011748 	.word	0x08011748
 8001298:	0801176c 	.word	0x0801176c
 800129c:	08011798 	.word	0x08011798
 80012a0:	080117b0 	.word	0x080117b0
 80012a4:	080117c4 	.word	0x080117c4
 80012a8:	08011800 	.word	0x08011800
 80012ac:	08011858 	.word	0x08011858
 80012b0:	0801186c 	.word	0x0801186c
 80012b4:	200038e4 	.word	0x200038e4
 80012b8:	08011880 	.word	0x08011880

080012bc <APP_BLE_Key_Button1_Action>:
    return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	//P2P FIX
	//P2PS_APP_SW1_Button_Action();
	P2PS_APP_SW1_Button_Action();
 80012c0:	f000 fb66 	bl	8001990 <P2PS_APP_SW1_Button_Action>
      else
      {
        APP_DBG_MSG("aci_gap_clear_security_db() Failed , result: %d \n", ret);
      }
  */
}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
      else
      {
        APP_DBG_MSG("aci_gap_slave_security_req() Failed , result: %d \n", ret);
      }
   */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <APP_BLE_Key_Button3_Action>:
  
void APP_BLE_Key_Button3_Action(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
        else 
{
          APP_DBG_MSG("set PHY cmd NOK\n");
        }
  */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  MtxHciId = osMutexNew( NULL );
 80012ea:	2000      	movs	r0, #0
 80012ec:	f009 ff42 	bl	800b174 <osMutexNew>
 80012f0:	4602      	mov	r2, r0
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <Ble_Tl_Init+0x3c>)
 80012f4:	601a      	str	r2, [r3, #0]
  SemHciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	2001      	movs	r0, #1
 80012fc:	f00a f882 	bl	800b404 <osSemaphoreNew>
 8001300:	4602      	mov	r2, r0
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <Ble_Tl_Init+0x40>)
 8001304:	601a      	str	r2, [r3, #0]

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <Ble_Tl_Init+0x44>)
 8001308:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <Ble_Tl_Init+0x48>)
 800130c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800130e:	463b      	mov	r3, r7
 8001310:	4619      	mov	r1, r3
 8001312:	4807      	ldr	r0, [pc, #28]	; (8001330 <Ble_Tl_Init+0x4c>)
 8001314:	f008 f958 	bl	80095c8 <hci_init>

  return;
 8001318:	bf00      	nop
}
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	200038e8 	.word	0x200038e8
 8001324:	200038d8 	.word	0x200038d8
 8001328:	20030028 	.word	0x20030028
 800132c:	080017b9 	.word	0x080017b9
 8001330:	08001781 	.word	0x08001781

08001334 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 8001334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001336:	b08f      	sub	sp, #60	; 0x3c
 8001338:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 800133a:	f44f 7350 	mov.w	r3, #832	; 0x340
 800133e:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8001340:	f008 f801 	bl	8009346 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 8001344:	f000 f978 	bl	8001638 <BleGetBdAddress>
 8001348:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800134a:	69fa      	ldr	r2, [r7, #28]
 800134c:	2106      	movs	r1, #6
 800134e:	2000      	movs	r0, #0
 8001350:	f007 ff39 	bl	80091c6 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	795a      	ldrb	r2, [r3, #5]
 8001358:	4b5c      	ldr	r3, [pc, #368]	; (80014cc <Ble_Hci_Gap_Gatt_Init+0x198>)
 800135a:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	791a      	ldrb	r2, [r3, #4]
 8001360:	4b5a      	ldr	r3, [pc, #360]	; (80014cc <Ble_Hci_Gap_Gatt_Init+0x198>)
 8001362:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	78da      	ldrb	r2, [r3, #3]
 8001368:	4b58      	ldr	r3, [pc, #352]	; (80014cc <Ble_Hci_Gap_Gatt_Init+0x198>)
 800136a:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	789a      	ldrb	r2, [r3, #2]
 8001370:	4b56      	ldr	r3, [pc, #344]	; (80014cc <Ble_Hci_Gap_Gatt_Init+0x198>)
 8001372:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	785a      	ldrb	r2, [r3, #1]
 8001378:	4b54      	ldr	r3, [pc, #336]	; (80014cc <Ble_Hci_Gap_Gatt_Init+0x198>)
 800137a:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	781a      	ldrb	r2, [r3, #0]
 8001380:	4b52      	ldr	r3, [pc, #328]	; (80014cc <Ble_Hci_Gap_Gatt_Init+0x198>)
 8001382:	735a      	strb	r2, [r3, #13]

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET,
 8001384:	4a52      	ldr	r2, [pc, #328]	; (80014d0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8001386:	2110      	movs	r1, #16
 8001388:	2018      	movs	r0, #24
 800138a:	f007 ff1c 	bl	80091c6 <aci_hal_write_config_data>
                            (uint8_t*) BLE_CFG_IR_VALUE);

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET,
 800138e:	4a51      	ldr	r2, [pc, #324]	; (80014d4 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8001390:	2110      	movs	r1, #16
 8001392:	2008      	movs	r0, #8
 8001394:	f007 ff17 	bl	80091c6 <aci_hal_write_config_data>
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8001398:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800139c:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 800139e:	f7ff fd5b 	bl	8000e58 <LL_FLASH_GetUDN>
 80013a2:	4603      	mov	r3, r0
 80013a4:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	461a      	mov	r2, r3
 80013aa:	2106      	movs	r1, #6
 80013ac:	202e      	movs	r0, #46	; 0x2e
 80013ae:	f007 ff0a 	bl	80091c6 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 80013b2:	4a47      	ldr	r2, [pc, #284]	; (80014d0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80013b4:	2110      	movs	r1, #16
 80013b6:	2018      	movs	r0, #24
 80013b8:	f007 ff05 	bl	80091c6 <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 80013bc:	4a45      	ldr	r2, [pc, #276]	; (80014d4 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 80013be:	2110      	movs	r1, #16
 80013c0:	2008      	movs	r0, #8
 80013c2:	f007 ff00 	bl	80091c6 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80013c6:	2118      	movs	r1, #24
 80013c8:	2001      	movs	r0, #1
 80013ca:	f007 ff65 	bl	8009298 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 80013ce:	f007 fcb5 	bl	8008d3c <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80013d6:	7efb      	ldrb	r3, [r7, #27]
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 80013de:	7efb      	ldrb	r3, [r7, #27]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d024      	beq.n	800142e <Ble_Hci_Gap_Gatt_Init+0xfa>
  {
    const char *name = "DRAMSAY";
 80013e4:	4b3c      	ldr	r3, [pc, #240]	; (80014d8 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 80013e6:	617b      	str	r3, [r7, #20]
    aci_gap_init(role, 0,
 80013e8:	f107 0212 	add.w	r2, r7, #18
 80013ec:	7ef8      	ldrb	r0, [r7, #27]
 80013ee:	f107 030e 	add.w	r3, r7, #14
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	4613      	mov	r3, r2
 80013fc:	2207      	movs	r2, #7
 80013fe:	2100      	movs	r1, #0
 8001400:	f007 faf0 	bl	80089e4 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8001404:	8a7c      	ldrh	r4, [r7, #18]
 8001406:	8a3d      	ldrh	r5, [r7, #16]
 8001408:	6978      	ldr	r0, [r7, #20]
 800140a:	f7fe feb9 	bl	8000180 <strlen>
 800140e:	4603      	mov	r3, r0
 8001410:	b2da      	uxtb	r2, r3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	4613      	mov	r3, r2
 8001418:	2200      	movs	r2, #0
 800141a:	4629      	mov	r1, r5
 800141c:	4620      	mov	r0, r4
 800141e:	f007 fe4b 	bl	80090b8 <aci_gatt_update_char_value>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d002      	beq.n	800142e <Ble_Hci_Gap_Gatt_Init+0xfa>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
 8001428:	482c      	ldr	r0, [pc, #176]	; (80014dc <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 800142a:	f00e f97f 	bl	800f72c <puts>
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800142e:	8a78      	ldrh	r0, [r7, #18]
 8001430:	89f9      	ldrh	r1, [r7, #14]
 8001432:	463b      	mov	r3, r7
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	2302      	movs	r3, #2
 8001438:	2200      	movs	r2, #0
 800143a:	f007 fe3d 	bl	80090b8 <aci_gatt_update_char_value>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d002      	beq.n	800144a <Ble_Hci_Gap_Gatt_Init+0x116>
                                gap_appearance_char_handle,
                                0,
                                2,
                                (uint8_t *)&appearance))
  {
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
 8001444:	4826      	ldr	r0, [pc, #152]	; (80014e0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8001446:	f00e f971 	bl	800f72c <puts>
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800144a:	2202      	movs	r2, #2
 800144c:	2102      	movs	r1, #2
 800144e:	2000      	movs	r0, #0
 8001450:	f008 f805 	bl	800945e <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8001454:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001456:	2201      	movs	r2, #1
 8001458:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800145a:	4b22      	ldr	r3, [pc, #136]	; (80014e4 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f007 f9ce 	bl	8008800 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8001464:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001466:	2201      	movs	r2, #1
 8001468:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800146a:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800146c:	2208      	movs	r2, #8
 800146e:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8001470:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001472:	2210      	movs	r2, #16
 8001474:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8001476:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001478:	2200      	movs	r2, #0
 800147a:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800147c:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800147e:	4a1a      	ldr	r2, [pc, #104]	; (80014e8 <Ble_Hci_Gap_Gatt_Init+0x1b4>)
 8001480:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001484:	2201      	movs	r2, #1
 8001486:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8001488:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800148a:	789d      	ldrb	r5, [r3, #2]
 800148c:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800148e:	785e      	ldrb	r6, [r3, #1]
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001492:	791b      	ldrb	r3, [r3, #4]
 8001494:	4a13      	ldr	r2, [pc, #76]	; (80014e4 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001496:	7952      	ldrb	r2, [r2, #5]
 8001498:	4912      	ldr	r1, [pc, #72]	; (80014e4 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800149a:	78c9      	ldrb	r1, [r1, #3]
 800149c:	4811      	ldr	r0, [pc, #68]	; (80014e4 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800149e:	6880      	ldr	r0, [r0, #8]
 80014a0:	2400      	movs	r4, #0
 80014a2:	9404      	str	r4, [sp, #16]
 80014a4:	9003      	str	r0, [sp, #12]
 80014a6:	9102      	str	r1, [sp, #8]
 80014a8:	9201      	str	r2, [sp, #4]
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2300      	movs	r3, #0
 80014ae:	2201      	movs	r2, #1
 80014b0:	4631      	mov	r1, r6
 80014b2:	4628      	mov	r0, r5
 80014b4:	f007 f9ee 	bl	8008894 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80014b8:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80014ba:	789b      	ldrb	r3, [r3, #2]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <Ble_Hci_Gap_Gatt_Init+0x190>
   {
     aci_gap_configure_whitelist();
 80014c0:	f007 fb77 	bl	8008bb2 <aci_gap_configure_whitelist>
   }
}
 80014c4:	bf00      	nop
 80014c6:	3724      	adds	r7, #36	; 0x24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014cc:	20000004 	.word	0x20000004
 80014d0:	08011cc8 	.word	0x08011cc8
 80014d4:	08011cd8 	.word	0x08011cd8
 80014d8:	080118a8 	.word	0x080118a8
 80014dc:	080118b0 	.word	0x080118b0
 80014e0:	080118e0 	.word	0x080118e0
 80014e4:	2000020c 	.word	0x2000020c
 80014e8:	0001b207 	.word	0x0001b207

080014ec <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08c      	sub	sp, #48	; 0x30
 80014f0:	af08      	add	r7, sp, #32
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80014f6:	2342      	movs	r3, #66	; 0x42
 80014f8:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d106      	bne.n	800150e <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8001500:	4b3f      	ldr	r3, [pc, #252]	; (8001600 <Adv_Request+0x114>)
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 8001506:	4b3f      	ldr	r3, [pc, #252]	; (8001604 <Adv_Request+0x118>)
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	81bb      	strh	r3, [r7, #12]
 800150c:	e005      	b.n	800151a <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800150e:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8001512:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8001514:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001518:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800151a:	4b3b      	ldr	r3, [pc, #236]	; (8001608 <Adv_Request+0x11c>)
 800151c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001520:	4618      	mov	r0, r3
 8001522:	f001 fd1b 	bl	8002f5c <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
 8001526:	4b38      	ldr	r3, [pc, #224]	; (8001608 <Adv_Request+0x11c>)
 8001528:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800152c:	4619      	mov	r1, r3
 800152e:	4837      	ldr	r0, [pc, #220]	; (800160c <Adv_Request+0x120>)
 8001530:	f00e f888 	bl	800f644 <iprintf>

    if ((New_Status == APP_BLE_LP_ADV)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d119      	bne.n	800156e <Adv_Request+0x82>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800153a:	4b33      	ldr	r3, [pc, #204]	; (8001608 <Adv_Request+0x11c>)
 800153c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001540:	2b01      	cmp	r3, #1
 8001542:	d004      	beq.n	800154e <Adv_Request+0x62>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 8001544:	4b30      	ldr	r3, [pc, #192]	; (8001608 <Adv_Request+0x11c>)
 8001546:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800154a:	2b02      	cmp	r3, #2
 800154c:	d10f      	bne.n	800156e <Adv_Request+0x82>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 800154e:	f007 f855 	bl	80085fc <aci_gap_set_non_discoverable>
 8001552:	4603      	mov	r3, r0
 8001554:	72fb      	strb	r3, [r7, #11]
      if (ret == BLE_STATUS_SUCCESS)
 8001556:	7afb      	ldrb	r3, [r7, #11]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d103      	bne.n	8001564 <Adv_Request+0x78>
      {
        APP_DBG_MSG("Successfully Stopped Advertising \n");
 800155c:	482c      	ldr	r0, [pc, #176]	; (8001610 <Adv_Request+0x124>)
 800155e:	f00e f8e5 	bl	800f72c <puts>
 8001562:	e004      	b.n	800156e <Adv_Request+0x82>
      }
      else
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
 8001564:	7afb      	ldrb	r3, [r7, #11]
 8001566:	4619      	mov	r1, r3
 8001568:	482a      	ldr	r0, [pc, #168]	; (8001614 <Adv_Request+0x128>)
 800156a:	f00e f86b 	bl	800f644 <iprintf>
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 800156e:	4a26      	ldr	r2, [pc, #152]	; (8001608 <Adv_Request+0x11c>)
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8001576:	4b24      	ldr	r3, [pc, #144]	; (8001608 <Adv_Request+0x11c>)
 8001578:	7e1b      	ldrb	r3, [r3, #24]
 800157a:	89b8      	ldrh	r0, [r7, #12]
 800157c:	89f9      	ldrh	r1, [r7, #14]
 800157e:	2200      	movs	r2, #0
 8001580:	9206      	str	r2, [sp, #24]
 8001582:	2200      	movs	r2, #0
 8001584:	9205      	str	r2, [sp, #20]
 8001586:	4a24      	ldr	r2, [pc, #144]	; (8001618 <Adv_Request+0x12c>)
 8001588:	9204      	str	r2, [sp, #16]
 800158a:	9303      	str	r3, [sp, #12]
 800158c:	4b23      	ldr	r3, [pc, #140]	; (800161c <Adv_Request+0x130>)
 800158e:	9302      	str	r3, [sp, #8]
 8001590:	2308      	movs	r3, #8
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	2300      	movs	r3, #0
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	2300      	movs	r3, #0
 800159a:	4602      	mov	r2, r0
 800159c:	2000      	movs	r0, #0
 800159e:	f007 f851 	bl	8008644 <aci_gap_set_discoverable>
 80015a2:	4603      	mov	r3, r0
 80015a4:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 80015a6:	491e      	ldr	r1, [pc, #120]	; (8001620 <Adv_Request+0x134>)
 80015a8:	200e      	movs	r0, #14
 80015aa:	f007 faa6 	bl	8008afa <aci_gap_update_adv_data>
 80015ae:	4603      	mov	r3, r0
 80015b0:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 80015b2:	7afb      	ldrb	r3, [r7, #11]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d111      	bne.n	80015dc <Adv_Request+0xf0>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d10a      	bne.n	80015d4 <Adv_Request+0xe8>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 80015be:	4819      	ldr	r0, [pc, #100]	; (8001624 <Adv_Request+0x138>)
 80015c0:	f00e f8b4 	bl	800f72c <puts>
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 80015c4:	4b10      	ldr	r3, [pc, #64]	; (8001608 <Adv_Request+0x11c>)
 80015c6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80015ca:	4917      	ldr	r1, [pc, #92]	; (8001628 <Adv_Request+0x13c>)
 80015cc:	4618      	mov	r0, r3
 80015ce:	f001 fd4f 	bl	8003070 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 80015d2:	e012      	b.n	80015fa <Adv_Request+0x10e>
        APP_DBG_MSG("Successfully Start Low Power Advertising \n");
 80015d4:	4815      	ldr	r0, [pc, #84]	; (800162c <Adv_Request+0x140>)
 80015d6:	f00e f8a9 	bl	800f72c <puts>
  return;
 80015da:	e00e      	b.n	80015fa <Adv_Request+0x10e>
      if (New_Status == APP_BLE_FAST_ADV)
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d105      	bne.n	80015ee <Adv_Request+0x102>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 80015e2:	7afb      	ldrb	r3, [r7, #11]
 80015e4:	4619      	mov	r1, r3
 80015e6:	4812      	ldr	r0, [pc, #72]	; (8001630 <Adv_Request+0x144>)
 80015e8:	f00e f82c 	bl	800f644 <iprintf>
  return;
 80015ec:	e005      	b.n	80015fa <Adv_Request+0x10e>
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
 80015ee:	7afb      	ldrb	r3, [r7, #11]
 80015f0:	4619      	mov	r1, r3
 80015f2:	4810      	ldr	r0, [pc, #64]	; (8001634 <Adv_Request+0x148>)
 80015f4:	f00e f826 	bl	800f644 <iprintf>
  return;
 80015f8:	bf00      	nop
}
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000290 	.word	0x20000290
 8001604:	20000292 	.word	0x20000292
 8001608:	2000020c 	.word	0x2000020c
 800160c:	08011910 	.word	0x08011910
 8001610:	0801192c 	.word	0x0801192c
 8001614:	08011950 	.word	0x08011950
 8001618:	20000225 	.word	0x20000225
 800161c:	08011ce8 	.word	0x08011ce8
 8001620:	20000004 	.word	0x20000004
 8001624:	08011978 	.word	0x08011978
 8001628:	0001e046 	.word	0x0001e046
 800162c:	080119a0 	.word	0x080119a0
 8001630:	080119cc 	.word	0x080119cc
 8001634:	080119fc 	.word	0x080119fc

08001638 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800163e:	f7ff fc0b 	bl	8000e58 <LL_FLASH_GetUDN>
 8001642:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800164a:	d023      	beq.n	8001694 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800164c:	f7ff fc1c 	bl	8000e88 <LL_FLASH_GetSTCompanyID>
 8001650:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8001652:	f7ff fc0d 	bl	8000e70 <LL_FLASH_GetDeviceID>
 8001656:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	b2da      	uxtb	r2, r3
 800165c:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <BleGetBdAddress+0x80>)
 800165e:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	0a1b      	lsrs	r3, r3, #8
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <BleGetBdAddress+0x80>)
 8001668:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	0c1b      	lsrs	r3, r3, #16
 800166e:	b2da      	uxtb	r2, r3
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <BleGetBdAddress+0x80>)
 8001672:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	b2da      	uxtb	r2, r3
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <BleGetBdAddress+0x80>)
 800167a:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <BleGetBdAddress+0x80>)
 8001682:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	0a1b      	lsrs	r3, r3, #8
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <BleGetBdAddress+0x80>)
 800168c:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800168e:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <BleGetBdAddress+0x80>)
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	e00b      	b.n	80016ac <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8001694:	2000      	movs	r0, #0
 8001696:	f008 fe81 	bl	800a39c <OTP_Read>
 800169a:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d002      	beq.n	80016a8 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	e001      	b.n	80016ac <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <BleGetBdAddress+0x84>)
 80016aa:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 80016ac:	697b      	ldr	r3, [r7, #20]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200003a8 	.word	0x200003a8
 80016bc:	08011cc0 	.word	0x08011cc0

080016c0 <Adv_Mgr>:
  return;
}
*/

static void Adv_Mgr( void )
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as an aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  osThreadFlagsSet( AdvUpdateProcessId, 1 );
 80016c4:	4b03      	ldr	r3, [pc, #12]	; (80016d4 <Adv_Mgr+0x14>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2101      	movs	r1, #1
 80016ca:	4618      	mov	r0, r3
 80016cc:	f009 fc5c 	bl	800af88 <osThreadFlagsSet>

  return;
 80016d0:	bf00      	nop
}
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200038ec 	.word	0x200038ec

080016d8 <AdvUpdateProcess>:

static void AdvUpdateProcess(void *argument)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016e4:	2100      	movs	r1, #0
 80016e6:	2001      	movs	r0, #1
 80016e8:	f009 fcb0 	bl	800b04c <osThreadFlagsWait>
    Adv_Update( );
 80016ec:	f000 f801 	bl	80016f2 <Adv_Update>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 80016f0:	e7f6      	b.n	80016e0 <AdvUpdateProcess+0x8>

080016f2 <Adv_Update>:
  }
}

static void Adv_Update( void )
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	af00      	add	r7, sp, #0
  Adv_Request(APP_BLE_LP_ADV);
 80016f6:	2002      	movs	r0, #2
 80016f8:	f7ff fef8 	bl	80014ec <Adv_Request>

  return;
 80016fc:	bf00      	nop
}
 80016fe:	bd80      	pop	{r7, pc}

08001700 <HciUserEvtProcess>:
  }
  return;
}

static void HciUserEvtProcess(void *argument)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8001708:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800170c:	2100      	movs	r1, #0
 800170e:	2001      	movs	r0, #1
 8001710:	f009 fc9c 	bl	800b04c <osThreadFlagsWait>
    hci_user_evt_proc( );
 8001714:	f007 ff74 	bl	8009600 <hci_user_evt_proc>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8001718:	e7f6      	b.n	8001708 <HciUserEvtProcess+0x8>
	...

0800171c <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet( HciUserEvtProcessId, 1 );
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <hci_notify_asynch_evt+0x1c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2101      	movs	r1, #1
 800172a:	4618      	mov	r0, r3
 800172c:	f009 fc2c 	bl	800af88 <osThreadFlagsSet>
  return;
 8001730:	bf00      	nop
}
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	200038dc 	.word	0x200038dc

0800173c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemHciId );
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <hci_cmd_resp_release+0x1c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f009 ff5f 	bl	800b60c <osSemaphoreRelease>
  return;
 800174e:	bf00      	nop
}
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200038d8 	.word	0x200038d8

0800175c <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemHciId, osWaitForever );
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <hci_cmd_resp_wait+0x20>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800176c:	4618      	mov	r0, r3
 800176e:	f009 fee7 	bl	800b540 <osSemaphoreAcquire>
  return;
 8001772:	bf00      	nop
}
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200038d8 	.word	0x200038d8

08001780 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	3308      	adds	r3, #8
 8001792:	4618      	mov	r0, r3
 8001794:	f006 fee0 	bl	8008558 <SVCCTL_UserEvtRx>
 8001798:	4603      	mov	r3, r0
 800179a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800179c:	7afb      	ldrb	r3, [r7, #11]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2201      	movs	r2, #1
 80017a6:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 80017a8:	e002      	b.n	80017b0 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
}
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
  switch (status)
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d002      	beq.n	80017ce <BLE_StatusNot+0x16>
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d008      	beq.n	80017de <BLE_StatusNot+0x26>
    case HCI_TL_CmdAvailable:
      osMutexRelease( MtxHciId );
      break;

    default:
      break;
 80017cc:	e00d      	b.n	80017ea <BLE_StatusNot+0x32>
      osMutexAcquire( MtxHciId, osWaitForever );
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <BLE_StatusNot+0x3c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017d6:	4618      	mov	r0, r3
 80017d8:	f009 fd66 	bl	800b2a8 <osMutexAcquire>
      break;
 80017dc:	e005      	b.n	80017ea <BLE_StatusNot+0x32>
      osMutexRelease( MtxHciId );
 80017de:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <BLE_StatusNot+0x3c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f009 fdbe 	bl	800b364 <osMutexRelease>
      break;
 80017e8:	bf00      	nop
  }
  return;
 80017ea:	bf00      	nop
}
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200038e8 	.word	0x200038e8

080017f8 <P2PS_STM_App_Notification>:
static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d00e      	beq.n	8001826 <P2PS_STM_App_Notification+0x2e>
 8001808:	2b03      	cmp	r3, #3
 800180a:	d016      	beq.n	800183a <P2PS_STM_App_Notification+0x42>
 800180c:	2b00      	cmp	r3, #0
 800180e:	d000      	beq.n	8001812 <P2PS_STM_App_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8001810:	e066      	b.n	80018e0 <P2PS_STM_App_Notification+0xe8>
      P2P_Server_App_Context.Notification_Status = 1;
 8001812:	4b35      	ldr	r3, [pc, #212]	; (80018e8 <P2PS_STM_App_Notification+0xf0>)
 8001814:	2201      	movs	r2, #1
 8001816:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n");
 8001818:	4834      	ldr	r0, [pc, #208]	; (80018ec <P2PS_STM_App_Notification+0xf4>)
 800181a:	f00d ff87 	bl	800f72c <puts>
      APP_DBG_MSG(" \n\r");
 800181e:	4834      	ldr	r0, [pc, #208]	; (80018f0 <P2PS_STM_App_Notification+0xf8>)
 8001820:	f00d ff10 	bl	800f644 <iprintf>
      break;
 8001824:	e05c      	b.n	80018e0 <P2PS_STM_App_Notification+0xe8>
      P2P_Server_App_Context.Notification_Status = 0;
 8001826:	4b30      	ldr	r3, [pc, #192]	; (80018e8 <P2PS_STM_App_Notification+0xf0>)
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 800182c:	4831      	ldr	r0, [pc, #196]	; (80018f4 <P2PS_STM_App_Notification+0xfc>)
 800182e:	f00d ff7d 	bl	800f72c <puts>
      APP_DBG_MSG(" \n\r");
 8001832:	482f      	ldr	r0, [pc, #188]	; (80018f0 <P2PS_STM_App_Notification+0xf8>)
 8001834:	f00d ff06 	bl	800f644 <iprintf>
      break;
 8001838:	e052      	b.n	80018e0 <P2PS_STM_App_Notification+0xe8>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d123      	bne.n	800188c <P2PS_STM_App_Notification+0x94>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	3301      	adds	r3, #1
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d10b      	bne.n	8001868 <P2PS_STM_App_Notification+0x70>
          BSP_LED_On(LED_BLUE);
 8001850:	2000      	movs	r0, #0
 8001852:	f002 fc3b 	bl	80040cc <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 ON\n");
 8001856:	4828      	ldr	r0, [pc, #160]	; (80018f8 <P2PS_STM_App_Notification+0x100>)
 8001858:	f00d ff68 	bl	800f72c <puts>
          APP_DBG_MSG(" \n\r");
 800185c:	4824      	ldr	r0, [pc, #144]	; (80018f0 <P2PS_STM_App_Notification+0xf8>)
 800185e:	f00d fef1 	bl	800f644 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8001862:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <P2PS_STM_App_Notification+0xf0>)
 8001864:	2201      	movs	r2, #1
 8001866:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	3301      	adds	r3, #1
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d10b      	bne.n	800188c <P2PS_STM_App_Notification+0x94>
          BSP_LED_Off(LED_BLUE);
 8001874:	2000      	movs	r0, #0
 8001876:	f002 fc43 	bl	8004100 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 OFF\n");
 800187a:	4820      	ldr	r0, [pc, #128]	; (80018fc <P2PS_STM_App_Notification+0x104>)
 800187c:	f00d ff56 	bl	800f72c <puts>
          APP_DBG_MSG(" \n\r");
 8001880:	481b      	ldr	r0, [pc, #108]	; (80018f0 <P2PS_STM_App_Notification+0xf8>)
 8001882:	f00d fedf 	bl	800f644 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8001886:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <P2PS_STM_App_Notification+0xf0>)
 8001888:	2200      	movs	r2, #0
 800188a:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d123      	bne.n	80018de <P2PS_STM_App_Notification+0xe6>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	3301      	adds	r3, #1
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d10b      	bne.n	80018ba <P2PS_STM_App_Notification+0xc2>
          BSP_LED_On(LED_BLUE);
 80018a2:	2000      	movs	r0, #0
 80018a4:	f002 fc12 	bl	80040cc <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 ON\n");
 80018a8:	4815      	ldr	r0, [pc, #84]	; (8001900 <P2PS_STM_App_Notification+0x108>)
 80018aa:	f00d ff3f 	bl	800f72c <puts>
          APP_DBG_MSG(" \n\r");
 80018ae:	4810      	ldr	r0, [pc, #64]	; (80018f0 <P2PS_STM_App_Notification+0xf8>)
 80018b0:	f00d fec8 	bl	800f644 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <P2PS_STM_App_Notification+0xf0>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	3301      	adds	r3, #1
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10b      	bne.n	80018de <P2PS_STM_App_Notification+0xe6>
          BSP_LED_Off(LED_BLUE);
 80018c6:	2000      	movs	r0, #0
 80018c8:	f002 fc1a 	bl	8004100 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 OFF\n");
 80018cc:	480d      	ldr	r0, [pc, #52]	; (8001904 <P2PS_STM_App_Notification+0x10c>)
 80018ce:	f00d ff2d 	bl	800f72c <puts>
          APP_DBG_MSG(" \n\r");
 80018d2:	4807      	ldr	r0, [pc, #28]	; (80018f0 <P2PS_STM_App_Notification+0xf8>)
 80018d4:	f00d feb6 	bl	800f644 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <P2PS_STM_App_Notification+0xf0>)
 80018da:	2200      	movs	r2, #0
 80018dc:	709a      	strb	r2, [r3, #2]
      break;
 80018de:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 80018e0:	bf00      	nop
}
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000294 	.word	0x20000294
 80018ec:	08011a94 	.word	0x08011a94
 80018f0:	08011ac8 	.word	0x08011ac8
 80018f4:	08011acc 	.word	0x08011acc
 80018f8:	08011b00 	.word	0x08011b00
 80018fc:	08011b28 	.word	0x08011b28
 8001900:	08011b50 	.word	0x08011b50
 8001904:	08011b78 	.word	0x08011b78

08001908 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d005      	beq.n	8001924 <P2PS_APP_Notification+0x1c>
 8001918:	2b01      	cmp	r3, #1
 800191a:	d000      	beq.n	800191e <P2PS_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800191c:	e003      	b.n	8001926 <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();
 800191e:	f000 f821 	bl	8001964 <P2PS_APP_LED_BUTTON_context_Init>
    break;
 8001922:	e000      	b.n	8001926 <P2PS_APP_Notification+0x1e>
    break;
 8001924:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 8001926:	bf00      	nop
}
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
  //P2P FIX UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
  P2PProcessId = osThreadNew(P2PProcess, NULL, &P2PProcess_attr);
 8001934:	4a07      	ldr	r2, [pc, #28]	; (8001954 <P2PS_APP_Init+0x24>)
 8001936:	2100      	movs	r1, #0
 8001938:	4807      	ldr	r0, [pc, #28]	; (8001958 <P2PS_APP_Init+0x28>)
 800193a:	f009 fa7f 	bl	800ae3c <osThreadNew>
 800193e:	4602      	mov	r2, r0
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <P2PS_APP_Init+0x2c>)
 8001942:	601a      	str	r2, [r3, #0]
  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0;
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <P2PS_APP_Init+0x30>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
  P2PS_APP_LED_BUTTON_context_Init();
 800194a:	f000 f80b 	bl	8001964 <P2PS_APP_LED_BUTTON_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 800194e:	bf00      	nop
}
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	08011d38 	.word	0x08011d38
 8001958:	08001a01 	.word	0x08001a01
 800195c:	200038f0 	.word	0x200038f0
 8001960:	20000294 	.word	0x20000294

08001964 <P2PS_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0

  BSP_LED_Off(LED_BLUE);
 8001968:	2000      	movs	r0, #0
 800196a:	f002 fbc9 	bl	8004100 <BSP_LED_Off>

  #if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 800196e:	4b07      	ldr	r3, [pc, #28]	; (800198c <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 8001970:	2201      	movs	r2, #1
 8001972:	705a      	strb	r2, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 8001976:	2200      	movs	r2, #0
 8001978:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 800197a:	4b04      	ldr	r3, [pc, #16]	; (800198c <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 800197c:	2201      	movs	r2, #1
 800197e:	70da      	strb	r2, [r3, #3]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8001980:	4b02      	ldr	r3, [pc, #8]	; (800198c <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 8001982:	2200      	movs	r2, #0
 8001984:	711a      	strb	r2, [r3, #4]
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x06; /* device6 */
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x06; /* Device6 */
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
#endif
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000294 	.word	0x20000294

08001990 <P2PS_APP_SW1_Button_Action>:

void P2PS_APP_SW1_Button_Action(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  //P2P FIX UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
  osThreadFlagsSet( P2PProcessId, 1 );
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <P2PS_APP_SW1_Button_Action+0x14>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2101      	movs	r1, #1
 800199a:	4618      	mov	r0, r3
 800199c:	f009 faf4 	bl	800af88 <osThreadFlagsSet>
  return;
 80019a0:	bf00      	nop
}
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	200038f0 	.word	0x200038f0

080019a8 <P2PS_Send_Notification>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_Send_Notification(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0

  if(P2P_Server_App_Context.ButtonControl.ButtonStatus == 0x00){
 80019ac:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <P2PS_Send_Notification+0x44>)
 80019ae:	791b      	ldrb	r3, [r3, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d103      	bne.n	80019bc <P2PS_Send_Notification+0x14>
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x01;
 80019b4:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <P2PS_Send_Notification+0x44>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	711a      	strb	r2, [r3, #4]
 80019ba:	e002      	b.n	80019c2 <P2PS_Send_Notification+0x1a>
  } else {
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <P2PS_Send_Notification+0x44>)
 80019be:	2200      	movs	r2, #0
 80019c0:	711a      	strb	r2, [r3, #4]
  }

   if(P2P_Server_App_Context.Notification_Status){
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <P2PS_Send_Notification+0x44>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00b      	beq.n	80019e2 <P2PS_Send_Notification+0x3a>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
 80019ca:	4809      	ldr	r0, [pc, #36]	; (80019f0 <P2PS_Send_Notification+0x48>)
 80019cc:	f00d fe3a 	bl	800f644 <iprintf>
    APP_DBG_MSG(" \n\r");
 80019d0:	4808      	ldr	r0, [pc, #32]	; (80019f4 <P2PS_Send_Notification+0x4c>)
 80019d2:	f00d fe37 	bl	800f644 <iprintf>


    P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Server_App_Context.ButtonControl);
 80019d6:	4908      	ldr	r1, [pc, #32]	; (80019f8 <P2PS_Send_Notification+0x50>)
 80019d8:	f64f 6042 	movw	r0, #65090	; 0xfe42
 80019dc:	f008 fc0c 	bl	800a1f8 <P2PS_STM_App_Update_Char>

   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
   }

  return;
 80019e0:	e003      	b.n	80019ea <P2PS_Send_Notification+0x42>
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
 80019e2:	4806      	ldr	r0, [pc, #24]	; (80019fc <P2PS_Send_Notification+0x54>)
 80019e4:	f00d fe2e 	bl	800f644 <iprintf>
  return;
 80019e8:	bf00      	nop
}
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000294 	.word	0x20000294
 80019f0:	08011ba0 	.word	0x08011ba0
 80019f4:	08011ac8 	.word	0x08011ac8
 80019f8:	20000297 	.word	0x20000297
 80019fc:	08011be0 	.word	0x08011be0

08001a00 <P2PProcess>:

static void P2PProcess(void *argument)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2001      	movs	r0, #1
 8001a10:	f009 fb1c 	bl	800b04c <osThreadFlagsWait>
    P2PS_Send_Notification( );
 8001a14:	f7ff ffc8 	bl	80019a8 <P2PS_Send_Notification>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8001a18:	e7f6      	b.n	8001a08 <P2PProcess+0x8>
	...

08001a1c <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001a20:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <LL_PWR_EnableBootC2+0x1c>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <LL_PWR_EnableBootC2+0x1c>)
 8001a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a2a:	60d3      	str	r3, [r2, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	58000400 	.word	0x58000400

08001a3c <LL_C2_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8001a46:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001a4a:	4905      	ldr	r1, [pc, #20]	; (8001a60 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	58000800 	.word	0x58000800

08001a64 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001a6e:	6a1a      	ldr	r2, [r3, #32]
 8001a70:	4904      	ldr	r1, [pc, #16]	; (8001a84 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	620b      	str	r3, [r1, #32]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	58000800 	.word	0x58000800

08001a88 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aac:	68fb      	ldr	r3, [r7, #12]
}
 8001aae:	bf00      	nop
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b085      	sub	sp, #20
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8001ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001aca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8001ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ada:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
}
 8001ae6:	bf00      	nop
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	601a      	str	r2, [r3, #0]
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f043 0201 	orr.w	r2, r3, #1
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	601a      	str	r2, [r3, #0]
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	041b      	lsls	r3, r3, #16
 8001b44:	43db      	mvns	r3, r3
 8001b46:	401a      	ands	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	605a      	str	r2, [r3, #4]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	041b      	lsls	r3, r3, #16
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	605a      	str	r2, [r3, #4]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	401a      	ands	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	605a      	str	r2, [r3, #4]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	609a      	str	r2, [r3, #8]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	041a      	lsls	r2, r3, #16
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	4013      	ands	r3, r2
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d101      	bne.n	8001bf6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69da      	ldr	r2, [r3, #28]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	4013      	ands	r3, r2
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d101      	bne.n	8001c20 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8001c34:	2102      	movs	r1, #2
 8001c36:	4819      	ldr	r0, [pc, #100]	; (8001c9c <HW_IPCC_Rx_Handler+0x6c>)
 8001c38:	f7ff ffe4 	bl	8001c04 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d009      	beq.n	8001c56 <HW_IPCC_Rx_Handler+0x26>
 8001c42:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <HW_IPCC_Rx_Handler+0x6c>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8001c50:	f000 f8ea 	bl	8001e28 <HW_IPCC_SYS_EvtHandler>
 8001c54:	e01f      	b.n	8001c96 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8001c56:	2101      	movs	r1, #1
 8001c58:	4810      	ldr	r0, [pc, #64]	; (8001c9c <HW_IPCC_Rx_Handler+0x6c>)
 8001c5a:	f7ff ffd3 	bl	8001c04 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d008      	beq.n	8001c76 <HW_IPCC_Rx_Handler+0x46>
 8001c64:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <HW_IPCC_Rx_Handler+0x6c>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d102      	bne.n	8001c76 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8001c70:	f000 f89e 	bl	8001db0 <HW_IPCC_BLE_EvtHandler>
 8001c74:	e00f      	b.n	8001c96 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8001c76:	2108      	movs	r1, #8
 8001c78:	4808      	ldr	r0, [pc, #32]	; (8001c9c <HW_IPCC_Rx_Handler+0x6c>)
 8001c7a:	f7ff ffc3 	bl	8001c04 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d009      	beq.n	8001c98 <HW_IPCC_Rx_Handler+0x68>
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HW_IPCC_Rx_Handler+0x6c>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8001c92:	f000 f915 	bl	8001ec0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8001c96:	bf00      	nop
 8001c98:	bf00      	nop
}
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	58000c00 	.word	0x58000c00

08001ca0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8001ca4:	2102      	movs	r1, #2
 8001ca6:	4822      	ldr	r0, [pc, #136]	; (8001d30 <HW_IPCC_Tx_Handler+0x90>)
 8001ca8:	f7ff ff97 	bl	8001bda <LL_C1_IPCC_IsActiveFlag_CHx>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d109      	bne.n	8001cc6 <HW_IPCC_Tx_Handler+0x26>
 8001cb2:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <HW_IPCC_Tx_Handler+0x90>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d002      	beq.n	8001cc6 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8001cc0:	f000 f8a6 	bl	8001e10 <HW_IPCC_SYS_CmdEvtHandler>
 8001cc4:	e031      	b.n	8001d2a <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8001cc6:	2102      	movs	r1, #2
 8001cc8:	4819      	ldr	r0, [pc, #100]	; (8001d30 <HW_IPCC_Tx_Handler+0x90>)
 8001cca:	f7ff ff86 	bl	8001bda <LL_C1_IPCC_IsActiveFlag_CHx>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d109      	bne.n	8001ce8 <HW_IPCC_Tx_Handler+0x48>
 8001cd4:	4b16      	ldr	r3, [pc, #88]	; (8001d30 <HW_IPCC_Tx_Handler+0x90>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d002      	beq.n	8001ce8 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8001ce2:	f000 f895 	bl	8001e10 <HW_IPCC_SYS_CmdEvtHandler>
 8001ce6:	e020      	b.n	8001d2a <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8001ce8:	2108      	movs	r1, #8
 8001cea:	4811      	ldr	r0, [pc, #68]	; (8001d30 <HW_IPCC_Tx_Handler+0x90>)
 8001cec:	f7ff ff75 	bl	8001bda <LL_C1_IPCC_IsActiveFlag_CHx>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d109      	bne.n	8001d0a <HW_IPCC_Tx_Handler+0x6a>
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <HW_IPCC_Tx_Handler+0x90>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d002      	beq.n	8001d0a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8001d04:	f000 f8be 	bl	8001e84 <HW_IPCC_MM_FreeBufHandler>
 8001d08:	e00f      	b.n	8001d2a <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8001d0a:	2120      	movs	r1, #32
 8001d0c:	4808      	ldr	r0, [pc, #32]	; (8001d30 <HW_IPCC_Tx_Handler+0x90>)
 8001d0e:	f7ff ff64 	bl	8001bda <LL_C1_IPCC_IsActiveFlag_CHx>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d109      	bne.n	8001d2c <HW_IPCC_Tx_Handler+0x8c>
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <HW_IPCC_Tx_Handler+0x90>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d002      	beq.n	8001d2c <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8001d26:	f000 f84f 	bl	8001dc8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8001d2a:	bf00      	nop
 8001d2c:	bf00      	nop
}
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	58000c00 	.word	0x58000c00

08001d34 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8001d38:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001d3c:	f7ff febd 	bl	8001aba <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8001d40:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d44:	f7ff fe7a 	bl	8001a3c <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8001d48:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d4c:	f7ff fe8a 	bl	8001a64 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8001d50:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8001d52:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8001d54:	f7ff fe62 	bl	8001a1c <LL_PWR_EnableBootC2>

  return;
 8001d58:	bf00      	nop
}
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8001d60:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001d64:	f7ff fe90 	bl	8001a88 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8001d68:	4806      	ldr	r0, [pc, #24]	; (8001d84 <HW_IPCC_Init+0x28>)
 8001d6a:	f7ff fed2 	bl	8001b12 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8001d6e:	4805      	ldr	r0, [pc, #20]	; (8001d84 <HW_IPCC_Init+0x28>)
 8001d70:	f7ff febf 	bl	8001af2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001d74:	202c      	movs	r0, #44	; 0x2c
 8001d76:	f002 fc59 	bl	800462c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001d7a:	202d      	movs	r0, #45	; 0x2d
 8001d7c:	f002 fc56 	bl	800462c <HAL_NVIC_EnableIRQ>

  return;
 8001d80:	bf00      	nop
}
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	58000c00 	.word	0x58000c00

08001d88 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	4802      	ldr	r0, [pc, #8]	; (8001d98 <HW_IPCC_BLE_Init+0x10>)
 8001d90:	f7ff fef4 	bl	8001b7c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001d94:	bf00      	nop
}
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	58000c00 	.word	0x58000c00

08001d9c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8001da0:	2101      	movs	r1, #1
 8001da2:	4802      	ldr	r0, [pc, #8]	; (8001dac <HW_IPCC_BLE_SendCmd+0x10>)
 8001da4:	f7ff ff0a 	bl	8001bbc <LL_C1_IPCC_SetFlag_CHx>

  return;
 8001da8:	bf00      	nop
}
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	58000c00 	.word	0x58000c00

08001db0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8001db4:	f007 ff62 	bl	8009c7c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8001db8:	2101      	movs	r1, #1
 8001dba:	4802      	ldr	r0, [pc, #8]	; (8001dc4 <HW_IPCC_BLE_EvtHandler+0x14>)
 8001dbc:	f7ff fef0 	bl	8001ba0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001dc0:	bf00      	nop
}
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	58000c00 	.word	0x58000c00

08001dc8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8001dcc:	2120      	movs	r1, #32
 8001dce:	4803      	ldr	r0, [pc, #12]	; (8001ddc <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8001dd0:	f7ff fec2 	bl	8001b58 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8001dd4:	f007 ff82 	bl	8009cdc <HW_IPCC_BLE_AclDataAckNot>

  return;
 8001dd8:	bf00      	nop
}
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	58000c00 	.word	0x58000c00

08001de0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001de4:	2102      	movs	r1, #2
 8001de6:	4802      	ldr	r0, [pc, #8]	; (8001df0 <HW_IPCC_SYS_Init+0x10>)
 8001de8:	f7ff fec8 	bl	8001b7c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001dec:	bf00      	nop
}
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	58000c00 	.word	0x58000c00

08001df4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001df8:	2102      	movs	r1, #2
 8001dfa:	4804      	ldr	r0, [pc, #16]	; (8001e0c <HW_IPCC_SYS_SendCmd+0x18>)
 8001dfc:	f7ff fede 	bl	8001bbc <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001e00:	2102      	movs	r1, #2
 8001e02:	4802      	ldr	r0, [pc, #8]	; (8001e0c <HW_IPCC_SYS_SendCmd+0x18>)
 8001e04:	f7ff fe95 	bl	8001b32 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001e08:	bf00      	nop
}
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	58000c00 	.word	0x58000c00

08001e10 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001e14:	2102      	movs	r1, #2
 8001e16:	4803      	ldr	r0, [pc, #12]	; (8001e24 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8001e18:	f7ff fe9e 	bl	8001b58 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8001e1c:	f007 ffae 	bl	8009d7c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8001e20:	bf00      	nop
}
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	58000c00 	.word	0x58000c00

08001e28 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8001e2c:	f007 ffbc 	bl	8009da8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001e30:	2102      	movs	r1, #2
 8001e32:	4802      	ldr	r0, [pc, #8]	; (8001e3c <HW_IPCC_SYS_EvtHandler+0x14>)
 8001e34:	f7ff feb4 	bl	8001ba0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001e38:	bf00      	nop
}
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	58000c00 	.word	0x58000c00

08001e40 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8001e48:	2108      	movs	r1, #8
 8001e4a:	480c      	ldr	r0, [pc, #48]	; (8001e7c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001e4c:	f7ff fec5 	bl	8001bda <LL_C1_IPCC_IsActiveFlag_CHx>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d007      	beq.n	8001e66 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8001e56:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001e5c:	2108      	movs	r1, #8
 8001e5e:	4807      	ldr	r0, [pc, #28]	; (8001e7c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001e60:	f7ff fe67 	bl	8001b32 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8001e64:	e006      	b.n	8001e74 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001e6a:	2108      	movs	r1, #8
 8001e6c:	4803      	ldr	r0, [pc, #12]	; (8001e7c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001e6e:	f7ff fea5 	bl	8001bbc <LL_C1_IPCC_SetFlag_CHx>
  return;
 8001e72:	bf00      	nop
}
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	58000c00 	.word	0x58000c00
 8001e80:	200003b0 	.word	0x200003b0

08001e84 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001e88:	2108      	movs	r1, #8
 8001e8a:	4806      	ldr	r0, [pc, #24]	; (8001ea4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001e8c:	f7ff fe64 	bl	8001b58 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001e96:	2108      	movs	r1, #8
 8001e98:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001e9a:	f7ff fe8f 	bl	8001bbc <LL_C1_IPCC_SetFlag_CHx>

  return;
 8001e9e:	bf00      	nop
}
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	58000c00 	.word	0x58000c00
 8001ea8:	200003b0 	.word	0x200003b0

08001eac <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001eb0:	2108      	movs	r1, #8
 8001eb2:	4802      	ldr	r0, [pc, #8]	; (8001ebc <HW_IPCC_TRACES_Init+0x10>)
 8001eb4:	f7ff fe62 	bl	8001b7c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001eb8:	bf00      	nop
}
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	58000c00 	.word	0x58000c00

08001ec0 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8001ec4:	f008 f818 	bl	8009ef8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001ec8:	2108      	movs	r1, #8
 8001eca:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8001ecc:	f7ff fe68 	bl	8001ba0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001ed0:	bf00      	nop
}
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	58000c00 	.word	0x58000c00

08001ed8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001ed8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eda:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001edc:	3304      	adds	r3, #4

08001ede <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ede:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001ee2:	d3f9      	bcc.n	8001ed8 <CopyDataInit>
  bx lr
 8001ee4:	4770      	bx	lr

08001ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001ee6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001ee8:	3004      	adds	r0, #4

08001eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001eea:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001eec:	d3fb      	bcc.n	8001ee6 <FillZerobss>
  bx lr
 8001eee:	4770      	bx	lr

08001ef0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ef0:	480c      	ldr	r0, [pc, #48]	; (8001f24 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001ef2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001ef4:	f002 f990 	bl	8004218 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001ef8:	480b      	ldr	r0, [pc, #44]	; (8001f28 <LoopForever+0x8>)
 8001efa:	490c      	ldr	r1, [pc, #48]	; (8001f2c <LoopForever+0xc>)
 8001efc:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <LoopForever+0x10>)
 8001efe:	2300      	movs	r3, #0
 8001f00:	f7ff ffed 	bl	8001ede <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001f04:	480b      	ldr	r0, [pc, #44]	; (8001f34 <LoopForever+0x14>)
 8001f06:	490c      	ldr	r1, [pc, #48]	; (8001f38 <LoopForever+0x18>)
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f7ff ffee 	bl	8001eea <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001f0e:	480b      	ldr	r0, [pc, #44]	; (8001f3c <LoopForever+0x1c>)
 8001f10:	490b      	ldr	r1, [pc, #44]	; (8001f40 <LoopForever+0x20>)
 8001f12:	2300      	movs	r3, #0
 8001f14:	f7ff ffe9 	bl	8001eea <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f18:	f00c ff00 	bl	800ed1c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001f1c:	f001 fb34 	bl	8003588 <main>

08001f20 <LoopForever>:

LoopForever:
  b LoopForever
 8001f20:	e7fe      	b.n	8001f20 <LoopForever>
 8001f22:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001f24:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001f28:	20000004 	.word	0x20000004
 8001f2c:	2000020c 	.word	0x2000020c
 8001f30:	08012250 	.word	0x08012250
  INIT_BSS _sbss, _ebss
 8001f34:	2000038c 	.word	0x2000038c
 8001f38:	20003b9c 	.word	0x20003b9c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001f3c:	200301e0 	.word	0x200301e0
 8001f40:	20030a57 	.word	0x20030a57

08001f44 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f44:	e7fe      	b.n	8001f44 <ADC1_IRQHandler>
	...

08001f48 <LL_EXTI_EnableIT_32_63>:
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <LL_EXTI_EnableIT_32_63+0x24>)
 8001f52:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001f56:	4905      	ldr	r1, [pc, #20]	; (8001f6c <LL_EXTI_EnableIT_32_63+0x24>)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	58000800 	.word	0x58000800

08001f70 <LL_AHB2_GRP1_EnableClock>:
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4013      	ands	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f94:	68fb      	ldr	r3, [r7, #12]
}
 8001f96:	bf00      	nop
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <LL_C2_AHB2_GRP1_EnableClock>:
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b085      	sub	sp, #20
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8001faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fae:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001fb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8001fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc2:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
}
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001fde:	f002 f9e9 	bl	80043b4 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001fe2:	f002 f9ed 	bl	80043c0 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8001fe6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001fea:	f7ff ffad 	bl	8001f48 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8001fee:	f008 f95b 	bl	800a2a8 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8001ff2:	f000 f821 	bl	8002038 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8001ff6:	f000 f8bf 	bl	8002178 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8001ffa:	bf00      	nop
}
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8002000:	b5b0      	push	{r4, r5, r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <APPD_EnableCPU2+0x34>)
 8002008:	1d3c      	adds	r4, r7, #4
 800200a:	461d      	mov	r5, r3
 800200c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800200e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002010:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002014:	c403      	stmia	r4!, {r0, r1}
 8002016:	8022      	strh	r2, [r4, #0]
 8002018:	3402      	adds	r4, #2
 800201a:	0c13      	lsrs	r3, r2, #16
 800201c:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800201e:	f007 ff59 	bl	8009ed4 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	4618      	mov	r0, r3
 8002026:	f007 fab8 	bl	800959a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800202a:	bf00      	nop
}
 800202c:	3720      	adds	r7, #32
 800202e:	46bd      	mov	sp, r7
 8002030:	bdb0      	pop	{r4, r5, r7, pc}
 8002032:	bf00      	nop
 8002034:	08011c2c 	.word	0x08011c2c

08002038 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8002058:	2300      	movs	r3, #0
 800205a:	77fb      	strb	r3, [r7, #31]
 800205c:	e033      	b.n	80020c6 <APPD_SetCPU2GpioConfig+0x8e>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 800205e:	7ffb      	ldrb	r3, [r7, #31]
 8002060:	4a42      	ldr	r2, [pc, #264]	; (800216c <APPD_SetCPU2GpioConfig+0x134>)
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4413      	add	r3, r2
 8002066:	799b      	ldrb	r3, [r3, #6]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d028      	beq.n	80020be <APPD_SetCPU2GpioConfig+0x86>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 800206c:	7ffb      	ldrb	r3, [r7, #31]
 800206e:	4a3f      	ldr	r2, [pc, #252]	; (800216c <APPD_SetCPU2GpioConfig+0x134>)
 8002070:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002074:	4a3e      	ldr	r2, [pc, #248]	; (8002170 <APPD_SetCPU2GpioConfig+0x138>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d00f      	beq.n	800209a <APPD_SetCPU2GpioConfig+0x62>
 800207a:	4a3e      	ldr	r2, [pc, #248]	; (8002174 <APPD_SetCPU2GpioConfig+0x13c>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d015      	beq.n	80020ac <APPD_SetCPU2GpioConfig+0x74>
 8002080:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002084:	d000      	beq.n	8002088 <APPD_SetCPU2GpioConfig+0x50>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8002086:	e01b      	b.n	80020c0 <APPD_SetCPU2GpioConfig+0x88>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8002088:	7ffb      	ldrb	r3, [r7, #31]
 800208a:	4a38      	ldr	r2, [pc, #224]	; (800216c <APPD_SetCPU2GpioConfig+0x134>)
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4413      	add	r3, r2
 8002090:	889a      	ldrh	r2, [r3, #4]
 8002092:	8bbb      	ldrh	r3, [r7, #28]
 8002094:	4313      	orrs	r3, r2
 8002096:	83bb      	strh	r3, [r7, #28]
          break;
 8002098:	e012      	b.n	80020c0 <APPD_SetCPU2GpioConfig+0x88>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 800209a:	7ffb      	ldrb	r3, [r7, #31]
 800209c:	4a33      	ldr	r2, [pc, #204]	; (800216c <APPD_SetCPU2GpioConfig+0x134>)
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4413      	add	r3, r2
 80020a2:	889a      	ldrh	r2, [r3, #4]
 80020a4:	8b7b      	ldrh	r3, [r7, #26]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	837b      	strh	r3, [r7, #26]
          break;
 80020aa:	e009      	b.n	80020c0 <APPD_SetCPU2GpioConfig+0x88>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 80020ac:	7ffb      	ldrb	r3, [r7, #31]
 80020ae:	4a2f      	ldr	r2, [pc, #188]	; (800216c <APPD_SetCPU2GpioConfig+0x134>)
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4413      	add	r3, r2
 80020b4:	889a      	ldrh	r2, [r3, #4]
 80020b6:	8b3b      	ldrh	r3, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	833b      	strh	r3, [r7, #24]
          break;
 80020bc:	e000      	b.n	80020c0 <APPD_SetCPU2GpioConfig+0x88>
      }
    }
 80020be:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80020c0:	7ffb      	ldrb	r3, [r7, #31]
 80020c2:	3301      	adds	r3, #1
 80020c4:	77fb      	strb	r3, [r7, #31]
 80020c6:	7ffb      	ldrb	r3, [r7, #31]
 80020c8:	2b21      	cmp	r3, #33	; 0x21
 80020ca:	d9c8      	bls.n	800205e <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 80020d0:	2301      	movs	r3, #1
 80020d2:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d4:	2303      	movs	r3, #3
 80020d6:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 80020d8:	8bbb      	ldrh	r3, [r7, #28]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d014      	beq.n	8002108 <APPD_SetCPU2GpioConfig+0xd0>
  {
    gpio_config.Pin = gpioa_pin_list;
 80020de:	8bbb      	ldrh	r3, [r7, #28]
 80020e0:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e2:	2001      	movs	r0, #1
 80020e4:	f7ff ff44 	bl	8001f70 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80020e8:	2001      	movs	r0, #1
 80020ea:	f7ff ff5a 	bl	8001fa2 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	4619      	mov	r1, r3
 80020f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f6:	f002 fde5 	bl	8004cc4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80020fa:	8bbb      	ldrh	r3, [r7, #28]
 80020fc:	2200      	movs	r2, #0
 80020fe:	4619      	mov	r1, r3
 8002100:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002104:	f002 ff4e 	bl	8004fa4 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8002108:	8b7b      	ldrh	r3, [r7, #26]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d012      	beq.n	8002134 <APPD_SetCPU2GpioConfig+0xfc>
  {
    gpio_config.Pin = gpiob_pin_list;
 800210e:	8b7b      	ldrh	r3, [r7, #26]
 8002110:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002112:	2002      	movs	r0, #2
 8002114:	f7ff ff2c 	bl	8001f70 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8002118:	2002      	movs	r0, #2
 800211a:	f7ff ff42 	bl	8001fa2 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 800211e:	1d3b      	adds	r3, r7, #4
 8002120:	4619      	mov	r1, r3
 8002122:	4813      	ldr	r0, [pc, #76]	; (8002170 <APPD_SetCPU2GpioConfig+0x138>)
 8002124:	f002 fdce 	bl	8004cc4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8002128:	8b7b      	ldrh	r3, [r7, #26]
 800212a:	2200      	movs	r2, #0
 800212c:	4619      	mov	r1, r3
 800212e:	4810      	ldr	r0, [pc, #64]	; (8002170 <APPD_SetCPU2GpioConfig+0x138>)
 8002130:	f002 ff38 	bl	8004fa4 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8002134:	8b3b      	ldrh	r3, [r7, #24]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d013      	beq.n	8002162 <APPD_SetCPU2GpioConfig+0x12a>
  {
    gpio_config.Pin = gpioc_pin_list;
 800213a:	8b3b      	ldrh	r3, [r7, #24]
 800213c:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800213e:	2004      	movs	r0, #4
 8002140:	f7ff ff16 	bl	8001f70 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8002144:	2004      	movs	r0, #4
 8002146:	f7ff ff2c 	bl	8001fa2 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	4619      	mov	r1, r3
 800214e:	4809      	ldr	r0, [pc, #36]	; (8002174 <APPD_SetCPU2GpioConfig+0x13c>)
 8002150:	f002 fdb8 	bl	8004cc4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8002154:	8b3b      	ldrh	r3, [r7, #24]
 8002156:	2200      	movs	r2, #0
 8002158:	4619      	mov	r1, r3
 800215a:	4806      	ldr	r0, [pc, #24]	; (8002174 <APPD_SetCPU2GpioConfig+0x13c>)
 800215c:	f002 ff22 	bl	8004fa4 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8002160:	bf00      	nop
 8002162:	bf00      	nop
}
 8002164:	3720      	adds	r7, #32
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	08011d5c 	.word	0x08011d5c
 8002170:	48000400 	.word	0x48000400
 8002174:	48000800 	.word	0x48000800

08002178 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 800217c:	bf00      	nop
}
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8002186:	b580      	push	{r7, lr}
 8002188:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 800218a:	f001 faaf 	bl	80036ec <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 800218e:	bf00      	nop
}
 8002190:	bd80      	pop	{r7, pc}

08002192 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b084      	sub	sp, #16
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	460b      	mov	r3, r1
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80021a0:	897a      	ldrh	r2, [r7, #10]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68f9      	ldr	r1, [r7, #12]
 80021a6:	2000      	movs	r0, #0
 80021a8:	f000 fff6 	bl	8003198 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 80021ac:	bf00      	nop
}
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80021bc:	4b07      	ldr	r3, [pc, #28]	; (80021dc <LL_C2_PWR_SetPowerMode+0x28>)
 80021be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021c2:	f023 0207 	bic.w	r2, r3, #7
 80021c6:	4905      	ldr	r1, [pc, #20]	; (80021dc <LL_C2_PWR_SetPowerMode+0x28>)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	58000400 	.word	0x58000400

080021e0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80021e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80021f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	608b      	str	r3, [r1, #8]
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <APPE_Init>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 800220c:	f000 f814 	bl	8002238 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8002210:	4908      	ldr	r1, [pc, #32]	; (8002234 <APPE_Init+0x2c>)
 8002212:	2000      	movs	r0, #0
 8002214:	f000 fd46 	bl	8002ca4 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8002218:	f7ff fedf 	bl	8001fda <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 800221c:	2101      	movs	r1, #1
 800221e:	2001      	movs	r0, #1
 8002220:	f00c fd48 	bl	800ecb4 <UTIL_LPM_SetOffMode>

  Led_Init();
 8002224:	f000 f8a1 	bl	800236a <Led_Init>

  Button_Init();
 8002228:	f000 f8af 	bl	800238a <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800222c:	f000 f812 	bl	8002254 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8002230:	bf00      	nop
}
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20003a84 	.word	0x20003a84

08002238 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800223c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002240:	f7ff ffce 	bl	80021e0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8002244:	f00c fd24 	bl	800ec90 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8002248:	2004      	movs	r0, #4
 800224a:	f7ff ffb3 	bl	80021b4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 800224e:	bf00      	nop
}
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b088      	sub	sp, #32
 8002258:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800225a:	f007 fc85 	bl	8009b68 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 800225e:	2000      	movs	r0, #0
 8002260:	f008 ff88 	bl	800b174 <osMutexNew>
 8002264:	4602      	mov	r2, r0
 8002266:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <appe_Tl_Init+0x70>)
 8002268:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 800226a:	2200      	movs	r2, #0
 800226c:	2100      	movs	r1, #0
 800226e:	2001      	movs	r0, #1
 8002270:	f009 f8c8 	bl	800b404 <osSemaphoreNew>
 8002274:	4602      	mov	r2, r0
 8002276:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <appe_Tl_Init+0x74>)
 8002278:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 800227a:	4a14      	ldr	r2, [pc, #80]	; (80022cc <appe_Tl_Init+0x78>)
 800227c:	2100      	movs	r1, #0
 800227e:	4814      	ldr	r0, [pc, #80]	; (80022d0 <appe_Tl_Init+0x7c>)
 8002280:	f008 fddc 	bl	800ae3c <osThreadNew>
 8002284:	4602      	mov	r2, r0
 8002286:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <appe_Tl_Init+0x80>)
 8002288:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800228a:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <appe_Tl_Init+0x84>)
 800228c:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800228e:	4b13      	ldr	r3, [pc, #76]	; (80022dc <appe_Tl_Init+0x88>)
 8002290:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8002292:	463b      	mov	r3, r7
 8002294:	4619      	mov	r1, r3
 8002296:	4812      	ldr	r0, [pc, #72]	; (80022e0 <appe_Tl_Init+0x8c>)
 8002298:	f007 fb2c 	bl	80098f4 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <appe_Tl_Init+0x90>)
 800229e:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80022a0:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <appe_Tl_Init+0x94>)
 80022a2:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80022a4:	4b11      	ldr	r3, [pc, #68]	; (80022ec <appe_Tl_Init+0x98>)
 80022a6:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80022a8:	f240 533c 	movw	r3, #1340	; 0x53c
 80022ac:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80022ae:	f107 0308 	add.w	r3, r7, #8
 80022b2:	4618      	mov	r0, r3
 80022b4:	f007 fd9a 	bl	8009dec <TL_MM_Init>

  TL_Enable();
 80022b8:	f007 fc50 	bl	8009b5c <TL_Enable>

  return;
 80022bc:	bf00      	nop
}
 80022be:	3720      	adds	r7, #32
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	200038f4 	.word	0x200038f4
 80022c8:	200038fc 	.word	0x200038fc
 80022cc:	08011e6c 	.word	0x08011e6c
 80022d0:	08002351 	.word	0x08002351
 80022d4:	200038f8 	.word	0x200038f8
 80022d8:	20030724 	.word	0x20030724
 80022dc:	080022f1 	.word	0x080022f1
 80022e0:	08002331 	.word	0x08002331
 80022e4:	2003093c 	.word	0x2003093c
 80022e8:	20030830 	.word	0x20030830
 80022ec:	200301e8 	.word	0x200301e8

080022f0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	71fb      	strb	r3, [r7, #7]
  switch (status)
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <APPE_SysStatusNot+0x16>
 8002300:	2b01      	cmp	r3, #1
 8002302:	d008      	beq.n	8002316 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 8002304:	e00d      	b.n	8002322 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 8002306:	4b09      	ldr	r3, [pc, #36]	; (800232c <APPE_SysStatusNot+0x3c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800230e:	4618      	mov	r0, r3
 8002310:	f008 ffca 	bl	800b2a8 <osMutexAcquire>
      break;
 8002314:	e005      	b.n	8002322 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 8002316:	4b05      	ldr	r3, [pc, #20]	; (800232c <APPE_SysStatusNot+0x3c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f009 f822 	bl	800b364 <osMutexRelease>
      break;
 8002320:	bf00      	nop
  }
  return;
 8002322:	bf00      	nop
}
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200038f4 	.word	0x200038f4

08002330 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 8002338:	f7ff fe62 	bl	8002000 <APPD_EnableCPU2>

  APP_BLE_Init( );
 800233c:	f7fe fdb0 	bl	8000ea0 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8002340:	2100      	movs	r1, #0
 8002342:	2001      	movs	r0, #1
 8002344:	f00c fcb6 	bl	800ecb4 <UTIL_LPM_SetOffMode>
  return;
 8002348:	bf00      	nop
}
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002358:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800235c:	2100      	movs	r1, #0
 800235e:	2001      	movs	r0, #1
 8002360:	f008 fe74 	bl	800b04c <osThreadFlagsWait>
     shci_user_evt_proc();
 8002364:	f007 fae2 	bl	800992c <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002368:	e7f6      	b.n	8002358 <ShciUserEvtProcess+0x8>

0800236a <Led_Init>:
    }
}

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 800236a:	b580      	push	{r7, lr}
 800236c:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 800236e:	2000      	movs	r0, #0
 8002370:	f001 fe72 	bl	8004058 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8002374:	2001      	movs	r0, #1
 8002376:	f001 fe6f 	bl	8004058 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800237a:	2002      	movs	r0, #2
 800237c:	f001 fe6c 	bl	8004058 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 8002380:	2001      	movs	r0, #1
 8002382:	f001 fea3 	bl	80040cc <BSP_LED_On>
#endif

  return;
 8002386:	bf00      	nop
}
 8002388:	bd80      	pop	{r7, pc}

0800238a <Button_Init>:

static void Button_Init( void )
{
 800238a:	b580      	push	{r7, lr}
 800238c:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 800238e:	2101      	movs	r1, #1
 8002390:	2000      	movs	r0, #0
 8002392:	f001 fecf 	bl	8004134 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8002396:	2101      	movs	r1, #1
 8002398:	2001      	movs	r0, #1
 800239a:	f001 fecb 	bl	8004134 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 800239e:	2101      	movs	r1, #1
 80023a0:	2002      	movs	r0, #2
 80023a2:	f001 fec7 	bl	8004134 <BSP_PB_Init>
#endif

  return;
 80023a6:	bf00      	nop
}
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet( ShciUserEvtProcessId, 1 );
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <shci_notify_asynch_evt+0x1c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2101      	movs	r1, #1
 80023ba:	4618      	mov	r0, r3
 80023bc:	f008 fde4 	bl	800af88 <osThreadFlagsSet>
  return;
 80023c0:	bf00      	nop
}
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	200038f8 	.word	0x200038f8

080023cc <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <shci_cmd_resp_release+0x1c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f009 f917 	bl	800b60c <osSemaphoreRelease>
  return;
 80023de:	bf00      	nop
}
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	200038fc 	.word	0x200038fc

080023ec <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 80023f4:	4b05      	ldr	r3, [pc, #20]	; (800240c <shci_cmd_resp_wait+0x20>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023fc:	4618      	mov	r0, r3
 80023fe:	f009 f89f 	bl	800b540 <osSemaphoreAcquire>
  return;
 8002402:	bf00      	nop
}
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	200038fc 	.word	0x200038fc

08002410 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	2b02      	cmp	r3, #2
 800241e:	d00a      	beq.n	8002436 <HAL_GPIO_EXTI_Callback+0x26>
 8002420:	2b10      	cmp	r3, #16
 8002422:	d002      	beq.n	800242a <HAL_GPIO_EXTI_Callback+0x1a>
 8002424:	2b01      	cmp	r3, #1
 8002426:	d003      	beq.n	8002430 <HAL_GPIO_EXTI_Callback+0x20>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 8002428:	e008      	b.n	800243c <HAL_GPIO_EXTI_Callback+0x2c>
     APP_BLE_Key_Button1_Action();
 800242a:	f7fe ff47 	bl	80012bc <APP_BLE_Key_Button1_Action>
      break; 
 800242e:	e005      	b.n	800243c <HAL_GPIO_EXTI_Callback+0x2c>
      APP_BLE_Key_Button2_Action();
 8002430:	f7fe ff4a 	bl	80012c8 <APP_BLE_Key_Button2_Action>
      break; 
 8002434:	e002      	b.n	800243c <HAL_GPIO_EXTI_Callback+0x2c>
      APP_BLE_Key_Button3_Action();
 8002436:	f7fe ff4e 	bl	80012d6 <APP_BLE_Key_Button3_Action>
      break;
 800243a:	bf00      	nop

}
  return;
 800243c:	bf00      	nop
}
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <LL_EXTI_EnableIT_0_31>:
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <LL_EXTI_EnableIT_0_31+0x24>)
 8002462:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002466:	4905      	ldr	r1, [pc, #20]	; (800247c <LL_EXTI_EnableIT_0_31+0x24>)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4313      	orrs	r3, r2
 800246c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	58000800 	.word	0x58000800

08002480 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002488:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4904      	ldr	r1, [pc, #16]	; (80024a0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4313      	orrs	r3, r2
 8002492:	600b      	str	r3, [r1, #0]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	58000800 	.word	0x58000800

080024a4 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80024aa:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <ReadRtcSsrValue+0x3c>)
 80024ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80024b2:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <ReadRtcSsrValue+0x3c>)
 80024b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80024ba:	e005      	b.n	80024c8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80024c0:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <ReadRtcSsrValue+0x3c>)
 80024c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d1f5      	bne.n	80024bc <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80024d0:	683b      	ldr	r3, [r7, #0]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40002800 	.word	0x40002800

080024e4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	460a      	mov	r2, r1
 80024ee:	71fb      	strb	r3, [r7, #7]
 80024f0:	4613      	mov	r3, r2
 80024f2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80024f4:	79ba      	ldrb	r2, [r7, #6]
 80024f6:	491d      	ldr	r1, [pc, #116]	; (800256c <LinkTimerAfter+0x88>)
 80024f8:	4613      	mov	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	440b      	add	r3, r1
 8002502:	3315      	adds	r3, #21
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	2b06      	cmp	r3, #6
 800250c:	d009      	beq.n	8002522 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800250e:	7bfa      	ldrb	r2, [r7, #15]
 8002510:	4916      	ldr	r1, [pc, #88]	; (800256c <LinkTimerAfter+0x88>)
 8002512:	4613      	mov	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	4413      	add	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	440b      	add	r3, r1
 800251c:	3314      	adds	r3, #20
 800251e:	79fa      	ldrb	r2, [r7, #7]
 8002520:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002522:	79fa      	ldrb	r2, [r7, #7]
 8002524:	4911      	ldr	r1, [pc, #68]	; (800256c <LinkTimerAfter+0x88>)
 8002526:	4613      	mov	r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	4413      	add	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	440b      	add	r3, r1
 8002530:	3315      	adds	r3, #21
 8002532:	7bfa      	ldrb	r2, [r7, #15]
 8002534:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002536:	79fa      	ldrb	r2, [r7, #7]
 8002538:	490c      	ldr	r1, [pc, #48]	; (800256c <LinkTimerAfter+0x88>)
 800253a:	4613      	mov	r3, r2
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	4413      	add	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	440b      	add	r3, r1
 8002544:	3314      	adds	r3, #20
 8002546:	79ba      	ldrb	r2, [r7, #6]
 8002548:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800254a:	79ba      	ldrb	r2, [r7, #6]
 800254c:	4907      	ldr	r1, [pc, #28]	; (800256c <LinkTimerAfter+0x88>)
 800254e:	4613      	mov	r3, r2
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	4413      	add	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	440b      	add	r3, r1
 8002558:	3315      	adds	r3, #21
 800255a:	79fa      	ldrb	r2, [r7, #7]
 800255c:	701a      	strb	r2, [r3, #0]

  return;
 800255e:	bf00      	nop
}
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	2000029c 	.word	0x2000029c

08002570 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	460a      	mov	r2, r1
 800257a:	71fb      	strb	r3, [r7, #7]
 800257c:	4613      	mov	r3, r2
 800257e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002580:	4b29      	ldr	r3, [pc, #164]	; (8002628 <LinkTimerBefore+0xb8>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	79ba      	ldrb	r2, [r7, #6]
 8002588:	429a      	cmp	r2, r3
 800258a:	d032      	beq.n	80025f2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800258c:	79ba      	ldrb	r2, [r7, #6]
 800258e:	4927      	ldr	r1, [pc, #156]	; (800262c <LinkTimerBefore+0xbc>)
 8002590:	4613      	mov	r3, r2
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	4413      	add	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	440b      	add	r3, r1
 800259a:	3314      	adds	r3, #20
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	4922      	ldr	r1, [pc, #136]	; (800262c <LinkTimerBefore+0xbc>)
 80025a4:	4613      	mov	r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	4413      	add	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	440b      	add	r3, r1
 80025ae:	3315      	adds	r3, #21
 80025b0:	79fa      	ldrb	r2, [r7, #7]
 80025b2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80025b4:	79fa      	ldrb	r2, [r7, #7]
 80025b6:	491d      	ldr	r1, [pc, #116]	; (800262c <LinkTimerBefore+0xbc>)
 80025b8:	4613      	mov	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4413      	add	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	440b      	add	r3, r1
 80025c2:	3315      	adds	r3, #21
 80025c4:	79ba      	ldrb	r2, [r7, #6]
 80025c6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80025c8:	79fa      	ldrb	r2, [r7, #7]
 80025ca:	4918      	ldr	r1, [pc, #96]	; (800262c <LinkTimerBefore+0xbc>)
 80025cc:	4613      	mov	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4413      	add	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	440b      	add	r3, r1
 80025d6:	3314      	adds	r3, #20
 80025d8:	7bfa      	ldrb	r2, [r7, #15]
 80025da:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80025dc:	79ba      	ldrb	r2, [r7, #6]
 80025de:	4913      	ldr	r1, [pc, #76]	; (800262c <LinkTimerBefore+0xbc>)
 80025e0:	4613      	mov	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	440b      	add	r3, r1
 80025ea:	3314      	adds	r3, #20
 80025ec:	79fa      	ldrb	r2, [r7, #7]
 80025ee:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80025f0:	e014      	b.n	800261c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80025f2:	79fa      	ldrb	r2, [r7, #7]
 80025f4:	490d      	ldr	r1, [pc, #52]	; (800262c <LinkTimerBefore+0xbc>)
 80025f6:	4613      	mov	r3, r2
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	4413      	add	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	440b      	add	r3, r1
 8002600:	3315      	adds	r3, #21
 8002602:	79ba      	ldrb	r2, [r7, #6]
 8002604:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002606:	79ba      	ldrb	r2, [r7, #6]
 8002608:	4908      	ldr	r1, [pc, #32]	; (800262c <LinkTimerBefore+0xbc>)
 800260a:	4613      	mov	r3, r2
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	4413      	add	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	440b      	add	r3, r1
 8002614:	3314      	adds	r3, #20
 8002616:	79fa      	ldrb	r2, [r7, #7]
 8002618:	701a      	strb	r2, [r3, #0]
  return;
 800261a:	bf00      	nop
}
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	2000032c 	.word	0x2000032c
 800262c:	2000029c 	.word	0x2000029c

08002630 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800263a:	4b4e      	ldr	r3, [pc, #312]	; (8002774 <linkTimer+0x144>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b06      	cmp	r3, #6
 8002642:	d118      	bne.n	8002676 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002644:	4b4b      	ldr	r3, [pc, #300]	; (8002774 <linkTimer+0x144>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	b2da      	uxtb	r2, r3
 800264a:	4b4b      	ldr	r3, [pc, #300]	; (8002778 <linkTimer+0x148>)
 800264c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800264e:	4a49      	ldr	r2, [pc, #292]	; (8002774 <linkTimer+0x144>)
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002654:	79fa      	ldrb	r2, [r7, #7]
 8002656:	4949      	ldr	r1, [pc, #292]	; (800277c <linkTimer+0x14c>)
 8002658:	4613      	mov	r3, r2
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	4413      	add	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	440b      	add	r3, r1
 8002662:	3315      	adds	r3, #21
 8002664:	2206      	movs	r2, #6
 8002666:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002668:	4b45      	ldr	r3, [pc, #276]	; (8002780 <linkTimer+0x150>)
 800266a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800266e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	81fb      	strh	r3, [r7, #14]
 8002674:	e078      	b.n	8002768 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002676:	f000 f909 	bl	800288c <ReturnTimeElapsed>
 800267a:	4603      	mov	r3, r0
 800267c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800267e:	79fa      	ldrb	r2, [r7, #7]
 8002680:	493e      	ldr	r1, [pc, #248]	; (800277c <linkTimer+0x14c>)
 8002682:	4613      	mov	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	4413      	add	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	440b      	add	r3, r1
 800268c:	3308      	adds	r3, #8
 800268e:	6819      	ldr	r1, [r3, #0]
 8002690:	89fb      	ldrh	r3, [r7, #14]
 8002692:	79fa      	ldrb	r2, [r7, #7]
 8002694:	4419      	add	r1, r3
 8002696:	4839      	ldr	r0, [pc, #228]	; (800277c <linkTimer+0x14c>)
 8002698:	4613      	mov	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4413      	add	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4403      	add	r3, r0
 80026a2:	3308      	adds	r3, #8
 80026a4:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80026a6:	79fa      	ldrb	r2, [r7, #7]
 80026a8:	4934      	ldr	r1, [pc, #208]	; (800277c <linkTimer+0x14c>)
 80026aa:	4613      	mov	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4413      	add	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	440b      	add	r3, r1
 80026b4:	3308      	adds	r3, #8
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80026ba:	4b2e      	ldr	r3, [pc, #184]	; (8002774 <linkTimer+0x144>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	4619      	mov	r1, r3
 80026c2:	4a2e      	ldr	r2, [pc, #184]	; (800277c <linkTimer+0x14c>)
 80026c4:	460b      	mov	r3, r1
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	440b      	add	r3, r1
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4413      	add	r3, r2
 80026ce:	3308      	adds	r3, #8
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d337      	bcc.n	8002748 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80026d8:	4b26      	ldr	r3, [pc, #152]	; (8002774 <linkTimer+0x144>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80026de:	7b7a      	ldrb	r2, [r7, #13]
 80026e0:	4926      	ldr	r1, [pc, #152]	; (800277c <linkTimer+0x14c>)
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	440b      	add	r3, r1
 80026ec:	3315      	adds	r3, #21
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80026f2:	e013      	b.n	800271c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80026f4:	7b7a      	ldrb	r2, [r7, #13]
 80026f6:	4921      	ldr	r1, [pc, #132]	; (800277c <linkTimer+0x14c>)
 80026f8:	4613      	mov	r3, r2
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	4413      	add	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	440b      	add	r3, r1
 8002702:	3315      	adds	r3, #21
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002708:	7b7a      	ldrb	r2, [r7, #13]
 800270a:	491c      	ldr	r1, [pc, #112]	; (800277c <linkTimer+0x14c>)
 800270c:	4613      	mov	r3, r2
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	4413      	add	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	440b      	add	r3, r1
 8002716:	3315      	adds	r3, #21
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800271c:	7b3b      	ldrb	r3, [r7, #12]
 800271e:	2b06      	cmp	r3, #6
 8002720:	d00b      	beq.n	800273a <linkTimer+0x10a>
 8002722:	7b3a      	ldrb	r2, [r7, #12]
 8002724:	4915      	ldr	r1, [pc, #84]	; (800277c <linkTimer+0x14c>)
 8002726:	4613      	mov	r3, r2
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	4413      	add	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	440b      	add	r3, r1
 8002730:	3308      	adds	r3, #8
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	429a      	cmp	r2, r3
 8002738:	d2dc      	bcs.n	80026f4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800273a:	7b7a      	ldrb	r2, [r7, #13]
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	4611      	mov	r1, r2
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fecf 	bl	80024e4 <LinkTimerAfter>
 8002746:	e00f      	b.n	8002768 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002748:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <linkTimer+0x144>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	b2da      	uxtb	r2, r3
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	4611      	mov	r1, r2
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff ff0c 	bl	8002570 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002758:	4b06      	ldr	r3, [pc, #24]	; (8002774 <linkTimer+0x144>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	b2da      	uxtb	r2, r3
 800275e:	4b06      	ldr	r3, [pc, #24]	; (8002778 <linkTimer+0x148>)
 8002760:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002762:	4a04      	ldr	r2, [pc, #16]	; (8002774 <linkTimer+0x144>)
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002768:	89fb      	ldrh	r3, [r7, #14]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	2000032c 	.word	0x2000032c
 8002778:	2000032d 	.word	0x2000032d
 800277c:	2000029c 	.word	0x2000029c
 8002780:	20000330 	.word	0x20000330

08002784 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	460a      	mov	r2, r1
 800278e:	71fb      	strb	r3, [r7, #7]
 8002790:	4613      	mov	r3, r2
 8002792:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002794:	4b39      	ldr	r3, [pc, #228]	; (800287c <UnlinkTimer+0xf8>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	b2db      	uxtb	r3, r3
 800279a:	79fa      	ldrb	r2, [r7, #7]
 800279c:	429a      	cmp	r2, r3
 800279e:	d111      	bne.n	80027c4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80027a0:	4b36      	ldr	r3, [pc, #216]	; (800287c <UnlinkTimer+0xf8>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	4b36      	ldr	r3, [pc, #216]	; (8002880 <UnlinkTimer+0xfc>)
 80027a8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80027aa:	79fa      	ldrb	r2, [r7, #7]
 80027ac:	4935      	ldr	r1, [pc, #212]	; (8002884 <UnlinkTimer+0x100>)
 80027ae:	4613      	mov	r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	4413      	add	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	440b      	add	r3, r1
 80027b8:	3315      	adds	r3, #21
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4b2f      	ldr	r3, [pc, #188]	; (800287c <UnlinkTimer+0xf8>)
 80027c0:	701a      	strb	r2, [r3, #0]
 80027c2:	e03e      	b.n	8002842 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80027c4:	79fa      	ldrb	r2, [r7, #7]
 80027c6:	492f      	ldr	r1, [pc, #188]	; (8002884 <UnlinkTimer+0x100>)
 80027c8:	4613      	mov	r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	4413      	add	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	440b      	add	r3, r1
 80027d2:	3314      	adds	r3, #20
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80027d8:	79fa      	ldrb	r2, [r7, #7]
 80027da:	492a      	ldr	r1, [pc, #168]	; (8002884 <UnlinkTimer+0x100>)
 80027dc:	4613      	mov	r3, r2
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	4413      	add	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	440b      	add	r3, r1
 80027e6:	3315      	adds	r3, #21
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80027ec:	79f9      	ldrb	r1, [r7, #7]
 80027ee:	7bfa      	ldrb	r2, [r7, #15]
 80027f0:	4824      	ldr	r0, [pc, #144]	; (8002884 <UnlinkTimer+0x100>)
 80027f2:	460b      	mov	r3, r1
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	440b      	add	r3, r1
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4403      	add	r3, r0
 80027fc:	3315      	adds	r3, #21
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	b2d8      	uxtb	r0, r3
 8002802:	4920      	ldr	r1, [pc, #128]	; (8002884 <UnlinkTimer+0x100>)
 8002804:	4613      	mov	r3, r2
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	4413      	add	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	440b      	add	r3, r1
 800280e:	3315      	adds	r3, #21
 8002810:	4602      	mov	r2, r0
 8002812:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002814:	7bbb      	ldrb	r3, [r7, #14]
 8002816:	2b06      	cmp	r3, #6
 8002818:	d013      	beq.n	8002842 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800281a:	79f9      	ldrb	r1, [r7, #7]
 800281c:	7bba      	ldrb	r2, [r7, #14]
 800281e:	4819      	ldr	r0, [pc, #100]	; (8002884 <UnlinkTimer+0x100>)
 8002820:	460b      	mov	r3, r1
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	440b      	add	r3, r1
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4403      	add	r3, r0
 800282a:	3314      	adds	r3, #20
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	b2d8      	uxtb	r0, r3
 8002830:	4914      	ldr	r1, [pc, #80]	; (8002884 <UnlinkTimer+0x100>)
 8002832:	4613      	mov	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	4413      	add	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	440b      	add	r3, r1
 800283c:	3314      	adds	r3, #20
 800283e:	4602      	mov	r2, r0
 8002840:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002842:	79fa      	ldrb	r2, [r7, #7]
 8002844:	490f      	ldr	r1, [pc, #60]	; (8002884 <UnlinkTimer+0x100>)
 8002846:	4613      	mov	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4413      	add	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	440b      	add	r3, r1
 8002850:	330c      	adds	r3, #12
 8002852:	2201      	movs	r2, #1
 8002854:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002856:	4b09      	ldr	r3, [pc, #36]	; (800287c <UnlinkTimer+0xf8>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b06      	cmp	r3, #6
 800285e:	d107      	bne.n	8002870 <UnlinkTimer+0xec>
 8002860:	79bb      	ldrb	r3, [r7, #6]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d104      	bne.n	8002870 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <UnlinkTimer+0x104>)
 8002868:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800286c:	601a      	str	r2, [r3, #0]
  }

  return;
 800286e:	bf00      	nop
 8002870:	bf00      	nop
}
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	2000032c 	.word	0x2000032c
 8002880:	2000032d 	.word	0x2000032d
 8002884:	2000029c 	.word	0x2000029c
 8002888:	20000330 	.word	0x20000330

0800288c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002892:	4b1a      	ldr	r3, [pc, #104]	; (80028fc <ReturnTimeElapsed+0x70>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800289a:	d026      	beq.n	80028ea <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 800289c:	f7ff fe02 	bl	80024a4 <ReadRtcSsrValue>
 80028a0:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80028a2:	4b16      	ldr	r3, [pc, #88]	; (80028fc <ReturnTimeElapsed+0x70>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d805      	bhi.n	80028b8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80028ac:	4b13      	ldr	r3, [pc, #76]	; (80028fc <ReturnTimeElapsed+0x70>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	607b      	str	r3, [r7, #4]
 80028b6:	e00a      	b.n	80028ce <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <ReturnTimeElapsed+0x74>)
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	461a      	mov	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80028c4:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <ReturnTimeElapsed+0x70>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	4413      	add	r3, r2
 80028cc:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80028ce:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <ReturnTimeElapsed+0x78>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	fb02 f303 	mul.w	r3, r2, r3
 80028da:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80028dc:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <ReturnTimeElapsed+0x7c>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	40d3      	lsrs	r3, r2
 80028e6:	607b      	str	r3, [r7, #4]
 80028e8:	e001      	b.n	80028ee <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	b29b      	uxth	r3, r3
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000330 	.word	0x20000330
 8002900:	200003ba 	.word	0x200003ba
 8002904:	200003b9 	.word	0x200003b9
 8002908:	200003b8 	.word	0x200003b8

0800290c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8002916:	88fb      	ldrh	r3, [r7, #6]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d108      	bne.n	800292e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800291c:	f7ff fdc2 	bl	80024a4 <ReadRtcSsrValue>
 8002920:	4602      	mov	r2, r0
 8002922:	4b24      	ldr	r3, [pc, #144]	; (80029b4 <RestartWakeupCounter+0xa8>)
 8002924:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002926:	2003      	movs	r0, #3
 8002928:	f001 fe9c 	bl	8004664 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 800292c:	e03e      	b.n	80029ac <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800292e:	88fb      	ldrh	r3, [r7, #6]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d803      	bhi.n	800293c <RestartWakeupCounter+0x30>
 8002934:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <RestartWakeupCounter+0xac>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d002      	beq.n	8002942 <RestartWakeupCounter+0x36>
      Value -= 1;
 800293c:	88fb      	ldrh	r3, [r7, #6]
 800293e:	3b01      	subs	r3, #1
 8002940:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8002942:	bf00      	nop
 8002944:	4b1d      	ldr	r3, [pc, #116]	; (80029bc <RestartWakeupCounter+0xb0>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f7      	beq.n	8002944 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002954:	4b19      	ldr	r3, [pc, #100]	; (80029bc <RestartWakeupCounter+0xb0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4b17      	ldr	r3, [pc, #92]	; (80029bc <RestartWakeupCounter+0xb0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002968:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800296a:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <RestartWakeupCounter+0xb4>)
 800296c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002970:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002972:	2003      	movs	r0, #3
 8002974:	f001 fe84 	bl	8004680 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002978:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <RestartWakeupCounter+0xb8>)
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	0c1b      	lsrs	r3, r3, #16
 800297e:	041b      	lsls	r3, r3, #16
 8002980:	88fa      	ldrh	r2, [r7, #6]
 8002982:	4910      	ldr	r1, [pc, #64]	; (80029c4 <RestartWakeupCounter+0xb8>)
 8002984:	4313      	orrs	r3, r2
 8002986:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002988:	f7ff fd8c 	bl	80024a4 <ReadRtcSsrValue>
 800298c:	4602      	mov	r2, r0
 800298e:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <RestartWakeupCounter+0xa8>)
 8002990:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8002992:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <RestartWakeupCounter+0xb0>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	4b08      	ldr	r3, [pc, #32]	; (80029bc <RestartWakeupCounter+0xb0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029a4:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80029a6:	f3af 8000 	nop.w
  return ;
 80029aa:	bf00      	nop
}
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000330 	.word	0x20000330
 80029b8:	200003b8 	.word	0x200003b8
 80029bc:	200003b4 	.word	0x200003b4
 80029c0:	58000800 	.word	0x58000800
 80029c4:	40002800 	.word	0x40002800

080029c8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80029ce:	4b47      	ldr	r3, [pc, #284]	; (8002aec <RescheduleTimerList+0x124>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029da:	d108      	bne.n	80029ee <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80029dc:	bf00      	nop
 80029de:	4b44      	ldr	r3, [pc, #272]	; (8002af0 <RescheduleTimerList+0x128>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f7      	bne.n	80029de <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80029ee:	4b40      	ldr	r3, [pc, #256]	; (8002af0 <RescheduleTimerList+0x128>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	4b3e      	ldr	r3, [pc, #248]	; (8002af0 <RescheduleTimerList+0x128>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a00:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002a02:	4b3c      	ldr	r3, [pc, #240]	; (8002af4 <RescheduleTimerList+0x12c>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002a08:	7bfa      	ldrb	r2, [r7, #15]
 8002a0a:	493b      	ldr	r1, [pc, #236]	; (8002af8 <RescheduleTimerList+0x130>)
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	4413      	add	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	440b      	add	r3, r1
 8002a16:	3308      	adds	r3, #8
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002a1c:	f7ff ff36 	bl	800288c <ReturnTimeElapsed>
 8002a20:	4603      	mov	r3, r0
 8002a22:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002a24:	88fb      	ldrh	r3, [r7, #6]
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d205      	bcs.n	8002a38 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002a30:	4b32      	ldr	r3, [pc, #200]	; (8002afc <RescheduleTimerList+0x134>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	701a      	strb	r2, [r3, #0]
 8002a36:	e04d      	b.n	8002ad4 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002a38:	88fb      	ldrh	r3, [r7, #6]
 8002a3a:	4a31      	ldr	r2, [pc, #196]	; (8002b00 <RescheduleTimerList+0x138>)
 8002a3c:	8812      	ldrh	r2, [r2, #0]
 8002a3e:	b292      	uxth	r2, r2
 8002a40:	4413      	add	r3, r2
 8002a42:	461a      	mov	r2, r3
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d906      	bls.n	8002a58 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002a4a:	4b2d      	ldr	r3, [pc, #180]	; (8002b00 <RescheduleTimerList+0x138>)
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002a50:	4b2a      	ldr	r3, [pc, #168]	; (8002afc <RescheduleTimerList+0x134>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	701a      	strb	r2, [r3, #0]
 8002a56:	e03d      	b.n	8002ad4 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002a62:	4b26      	ldr	r3, [pc, #152]	; (8002afc <RescheduleTimerList+0x134>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002a68:	e034      	b.n	8002ad4 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	4922      	ldr	r1, [pc, #136]	; (8002af8 <RescheduleTimerList+0x130>)
 8002a6e:	4613      	mov	r3, r2
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	4413      	add	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	440b      	add	r3, r1
 8002a78:	3308      	adds	r3, #8
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	88fb      	ldrh	r3, [r7, #6]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d20a      	bcs.n	8002a98 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002a82:	7bfa      	ldrb	r2, [r7, #15]
 8002a84:	491c      	ldr	r1, [pc, #112]	; (8002af8 <RescheduleTimerList+0x130>)
 8002a86:	4613      	mov	r3, r2
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	4413      	add	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	440b      	add	r3, r1
 8002a90:	3308      	adds	r3, #8
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	e013      	b.n	8002ac0 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002a98:	7bfa      	ldrb	r2, [r7, #15]
 8002a9a:	4917      	ldr	r1, [pc, #92]	; (8002af8 <RescheduleTimerList+0x130>)
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	4413      	add	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	440b      	add	r3, r1
 8002aa6:	3308      	adds	r3, #8
 8002aa8:	6819      	ldr	r1, [r3, #0]
 8002aaa:	88fb      	ldrh	r3, [r7, #6]
 8002aac:	7bfa      	ldrb	r2, [r7, #15]
 8002aae:	1ac9      	subs	r1, r1, r3
 8002ab0:	4811      	ldr	r0, [pc, #68]	; (8002af8 <RescheduleTimerList+0x130>)
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	4413      	add	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	4403      	add	r3, r0
 8002abc:	3308      	adds	r3, #8
 8002abe:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8002ac0:	7bfa      	ldrb	r2, [r7, #15]
 8002ac2:	490d      	ldr	r1, [pc, #52]	; (8002af8 <RescheduleTimerList+0x130>)
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	4413      	add	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	440b      	add	r3, r1
 8002ace:	3315      	adds	r3, #21
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	2b06      	cmp	r3, #6
 8002ad8:	d1c7      	bne.n	8002a6a <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002ada:	89bb      	ldrh	r3, [r7, #12]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff ff15 	bl	800290c <RestartWakeupCounter>

  return ;
 8002ae2:	bf00      	nop
}
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40002800 	.word	0x40002800
 8002af0:	200003b4 	.word	0x200003b4
 8002af4:	2000032c 	.word	0x2000032c
 8002af8:	2000029c 	.word	0x2000029c
 8002afc:	20000334 	.word	0x20000334
 8002b00:	200003bc 	.word	0x200003bc

08002b04 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08a      	sub	sp, #40	; 0x28
 8002b08:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b0a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b0e:	617b      	str	r3, [r7, #20]
  return(result);
 8002b10:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002b14:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8002b16:	4b5e      	ldr	r3, [pc, #376]	; (8002c90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	22ca      	movs	r2, #202	; 0xca
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24
 8002b20:	4b5b      	ldr	r3, [pc, #364]	; (8002c90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2253      	movs	r2, #83	; 0x53
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8002b2a:	4b59      	ldr	r3, [pc, #356]	; (8002c90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	4b57      	ldr	r3, [pc, #348]	; (8002c90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b3c:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002b3e:	4b55      	ldr	r3, [pc, #340]	; (8002c94 <HW_TS_RTC_Wakeup_Handler+0x190>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002b46:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002b4a:	4953      	ldr	r1, [pc, #332]	; (8002c98 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4413      	add	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	440b      	add	r3, r1
 8002b56:	330c      	adds	r3, #12
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d170      	bne.n	8002c42 <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002b60:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002b64:	494c      	ldr	r1, [pc, #304]	; (8002c98 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8002b66:	4613      	mov	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	4413      	add	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	440b      	add	r3, r1
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002b74:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002b78:	4947      	ldr	r1, [pc, #284]	; (8002c98 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	4413      	add	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	440b      	add	r3, r1
 8002b84:	3310      	adds	r3, #16
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002b8a:	4b44      	ldr	r3, [pc, #272]	; (8002c9c <HW_TS_RTC_Wakeup_Handler+0x198>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d04e      	beq.n	8002c32 <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002b94:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002b98:	493f      	ldr	r1, [pc, #252]	; (8002c98 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	4413      	add	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	440b      	add	r3, r1
 8002ba4:	330d      	adds	r3, #13
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d125      	bne.n	8002bfa <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002bae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff fde5 	bl	8002784 <UnlinkTimer>
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002bc4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002bc8:	4933      	ldr	r1, [pc, #204]	; (8002c98 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8002bca:	4613      	mov	r3, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	4413      	add	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	440b      	add	r3, r1
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bdc:	4611      	mov	r1, r2
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fa46 	bl	8003070 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8002be4:	4b2a      	ldr	r3, [pc, #168]	; (8002c90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	22ca      	movs	r2, #202	; 0xca
 8002bec:	625a      	str	r2, [r3, #36]	; 0x24
 8002bee:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2253      	movs	r2, #83	; 0x53
 8002bf6:	625a      	str	r2, [r3, #36]	; 0x24
 8002bf8:	e013      	b.n	8002c22 <HW_TS_RTC_Wakeup_Handler+0x11e>
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002c04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 f9a7 	bl	8002f5c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8002c0e:	4b20      	ldr	r3, [pc, #128]	; (8002c90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	22ca      	movs	r2, #202	; 0xca
 8002c16:	625a      	str	r2, [r3, #36]	; 0x24
 8002c18:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2253      	movs	r2, #83	; 0x53
 8002c20:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002c22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c26:	69fa      	ldr	r2, [r7, #28]
 8002c28:	4619      	mov	r1, r3
 8002c2a:	69b8      	ldr	r0, [r7, #24]
 8002c2c:	f000 faa6 	bl	800317c <HW_TS_RTC_Int_AppNot>
 8002c30:	e024      	b.n	8002c7c <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8002c32:	f7ff fec9 	bl	80029c8 <RescheduleTimerList>
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f383 8810 	msr	PRIMASK, r3
 8002c40:	e01c      	b.n	8002c7c <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8002c42:	bf00      	nop
 8002c44:	4b12      	ldr	r3, [pc, #72]	; (8002c90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0f7      	beq.n	8002c44 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002c54:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002c68:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002c6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8002c6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002c70:	60da      	str	r2, [r3, #12]
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	607b      	str	r3, [r7, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8002c7c:	4b04      	ldr	r3, [pc, #16]	; (8002c90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	22ff      	movs	r2, #255	; 0xff
 8002c84:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8002c86:	bf00      	nop
}
 8002c88:	3728      	adds	r7, #40	; 0x28
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	200003b4 	.word	0x200003b4
 8002c94:	2000032c 	.word	0x2000032c
 8002c98:	2000029c 	.word	0x2000029c
 8002c9c:	20000334 	.word	0x20000334
 8002ca0:	58000800 	.word	0x58000800

08002ca4 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	6039      	str	r1, [r7, #0]
 8002cae:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8002cb0:	4a64      	ldr	r2, [pc, #400]	; (8002e44 <HW_TS_Init+0x1a0>)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8002cb6:	4b63      	ldr	r3, [pc, #396]	; (8002e44 <HW_TS_Init+0x1a0>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	22ca      	movs	r2, #202	; 0xca
 8002cbe:	625a      	str	r2, [r3, #36]	; 0x24
 8002cc0:	4b60      	ldr	r3, [pc, #384]	; (8002e44 <HW_TS_Init+0x1a0>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2253      	movs	r2, #83	; 0x53
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002cca:	4b5f      	ldr	r3, [pc, #380]	; (8002e48 <HW_TS_Init+0x1a4>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	4a5e      	ldr	r2, [pc, #376]	; (8002e48 <HW_TS_Init+0x1a4>)
 8002cd0:	f043 0320 	orr.w	r3, r3, #32
 8002cd4:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002cd6:	4b5c      	ldr	r3, [pc, #368]	; (8002e48 <HW_TS_Init+0x1a4>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	f1c3 0304 	rsb	r3, r3, #4
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	4b58      	ldr	r3, [pc, #352]	; (8002e4c <HW_TS_Init+0x1a8>)
 8002cea:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002cec:	4b56      	ldr	r3, [pc, #344]	; (8002e48 <HW_TS_Init+0x1a4>)
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002cf4:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002cf8:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	fa92 f2a2 	rbit	r2, r2
 8002d00:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	2a00      	cmp	r2, #0
 8002d0a:	d101      	bne.n	8002d10 <HW_TS_Init+0x6c>
  {
    return 32U;
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	e003      	b.n	8002d18 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	fab2 f282 	clz	r2, r2
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	40d3      	lsrs	r3, r2
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	4b4b      	ldr	r3, [pc, #300]	; (8002e50 <HW_TS_Init+0x1ac>)
 8002d22:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002d24:	4b48      	ldr	r3, [pc, #288]	; (8002e48 <HW_TS_Init+0x1a4>)
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3301      	adds	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	4b47      	ldr	r3, [pc, #284]	; (8002e54 <HW_TS_Init+0x1b0>)
 8002d36:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002d38:	4b46      	ldr	r3, [pc, #280]	; (8002e54 <HW_TS_Init+0x1b0>)
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	4a44      	ldr	r2, [pc, #272]	; (8002e50 <HW_TS_Init+0x1ac>)
 8002d40:	7812      	ldrb	r2, [r2, #0]
 8002d42:	fb02 f303 	mul.w	r3, r2, r3
 8002d46:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d4a:	4a40      	ldr	r2, [pc, #256]	; (8002e4c <HW_TS_Init+0x1a8>)
 8002d4c:	7812      	ldrb	r2, [r2, #0]
 8002d4e:	40d3      	lsrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d904      	bls.n	8002d66 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002d5c:	4b3e      	ldr	r3, [pc, #248]	; (8002e58 <HW_TS_Init+0x1b4>)
 8002d5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d62:	801a      	strh	r2, [r3, #0]
 8002d64:	e003      	b.n	8002d6e <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	4b3b      	ldr	r3, [pc, #236]	; (8002e58 <HW_TS_Init+0x1b4>)
 8002d6c:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002d6e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002d72:	f7ff fb85 	bl	8002480 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002d76:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002d7a:	f7ff fb6d 	bl	8002458 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d143      	bne.n	8002e0c <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002d84:	4b35      	ldr	r3, [pc, #212]	; (8002e5c <HW_TS_Init+0x1b8>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002d8a:	4b35      	ldr	r3, [pc, #212]	; (8002e60 <HW_TS_Init+0x1bc>)
 8002d8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d90:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002d92:	2300      	movs	r3, #0
 8002d94:	77fb      	strb	r3, [r7, #31]
 8002d96:	e00c      	b.n	8002db2 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002d98:	7ffa      	ldrb	r2, [r7, #31]
 8002d9a:	4932      	ldr	r1, [pc, #200]	; (8002e64 <HW_TS_Init+0x1c0>)
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	4413      	add	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	440b      	add	r3, r1
 8002da6:	330c      	adds	r3, #12
 8002da8:	2200      	movs	r2, #0
 8002daa:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002dac:	7ffb      	ldrb	r3, [r7, #31]
 8002dae:	3301      	adds	r3, #1
 8002db0:	77fb      	strb	r3, [r7, #31]
 8002db2:	7ffb      	ldrb	r3, [r7, #31]
 8002db4:	2b05      	cmp	r3, #5
 8002db6:	d9ef      	bls.n	8002d98 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002db8:	4b2b      	ldr	r3, [pc, #172]	; (8002e68 <HW_TS_Init+0x1c4>)
 8002dba:	2206      	movs	r2, #6
 8002dbc:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8002dbe:	4b21      	ldr	r3, [pc, #132]	; (8002e44 <HW_TS_Init+0x1a0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	4b1f      	ldr	r3, [pc, #124]	; (8002e44 <HW_TS_Init+0x1a0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd0:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002dd2:	4b1c      	ldr	r3, [pc, #112]	; (8002e44 <HW_TS_Init+0x1a0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	4b19      	ldr	r3, [pc, #100]	; (8002e44 <HW_TS_Init+0x1a0>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002de6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002de8:	4b20      	ldr	r3, [pc, #128]	; (8002e6c <HW_TS_Init+0x1c8>)
 8002dea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002dee:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002df0:	2003      	movs	r0, #3
 8002df2:	f001 fc45 	bl	8004680 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002df6:	4b13      	ldr	r3, [pc, #76]	; (8002e44 <HW_TS_Init+0x1a0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <HW_TS_Init+0x1a0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e08:	609a      	str	r2, [r3, #8]
 8002e0a:	e00a      	b.n	8002e22 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8002e0c:	4b0d      	ldr	r3, [pc, #52]	; (8002e44 <HW_TS_Init+0x1a0>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002e1c:	2003      	movs	r0, #3
 8002e1e:	f001 fc21 	bl	8004664 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8002e22:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <HW_TS_Init+0x1a0>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	22ff      	movs	r2, #255	; 0xff
 8002e2a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2106      	movs	r1, #6
 8002e30:	2003      	movs	r0, #3
 8002e32:	f001 fbe1 	bl	80045f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002e36:	2003      	movs	r0, #3
 8002e38:	f001 fbf8 	bl	800462c <HAL_NVIC_EnableIRQ>

  return;
 8002e3c:	bf00      	nop
}
 8002e3e:	3720      	adds	r7, #32
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	200003b4 	.word	0x200003b4
 8002e48:	40002800 	.word	0x40002800
 8002e4c:	200003b8 	.word	0x200003b8
 8002e50:	200003b9 	.word	0x200003b9
 8002e54:	200003ba 	.word	0x200003ba
 8002e58:	200003bc 	.word	0x200003bc
 8002e5c:	20000334 	.word	0x20000334
 8002e60:	20000330 	.word	0x20000330
 8002e64:	2000029c 	.word	0x2000029c
 8002e68:	2000032c 	.word	0x2000032c
 8002e6c:	58000800 	.word	0x58000800

08002e70 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b08b      	sub	sp, #44	; 0x2c
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e86:	f3ef 8310 	mrs	r3, PRIMASK
 8002e8a:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e8c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002e8e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e90:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002e92:	e004      	b.n	8002e9e <HW_TS_Create+0x2e>
  {
    loop++;
 8002e94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002e98:	3301      	adds	r3, #1
 8002e9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002e9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002ea2:	2b05      	cmp	r3, #5
 8002ea4:	d80c      	bhi.n	8002ec0 <HW_TS_Create+0x50>
 8002ea6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002eaa:	492b      	ldr	r1, [pc, #172]	; (8002f58 <HW_TS_Create+0xe8>)
 8002eac:	4613      	mov	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	440b      	add	r3, r1
 8002eb6:	330c      	adds	r3, #12
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1e9      	bne.n	8002e94 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002ec0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002ec4:	2b06      	cmp	r3, #6
 8002ec6:	d037      	beq.n	8002f38 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8002ec8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002ecc:	4922      	ldr	r1, [pc, #136]	; (8002f58 <HW_TS_Create+0xe8>)
 8002ece:	4613      	mov	r3, r2
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	4413      	add	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	440b      	add	r3, r1
 8002ed8:	330c      	adds	r3, #12
 8002eda:	2201      	movs	r2, #1
 8002edc:	701a      	strb	r2, [r3, #0]
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8002ee8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002eec:	491a      	ldr	r1, [pc, #104]	; (8002f58 <HW_TS_Create+0xe8>)
 8002eee:	4613      	mov	r3, r2
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	4413      	add	r3, r2
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	440b      	add	r3, r1
 8002ef8:	3310      	adds	r3, #16
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8002efe:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002f02:	4915      	ldr	r1, [pc, #84]	; (8002f58 <HW_TS_Create+0xe8>)
 8002f04:	4613      	mov	r3, r2
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	4413      	add	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	440b      	add	r3, r1
 8002f0e:	330d      	adds	r3, #13
 8002f10:	79fa      	ldrb	r2, [r7, #7]
 8002f12:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8002f14:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002f18:	490f      	ldr	r1, [pc, #60]	; (8002f58 <HW_TS_Create+0xe8>)
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	4413      	add	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	440b      	add	r3, r1
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002f2e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8002f30:	2300      	movs	r3, #0
 8002f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002f36:	e007      	b.n	8002f48 <HW_TS_Create+0xd8>
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002f42:	2301      	movs	r3, #1
 8002f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8002f48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	372c      	adds	r7, #44	; 0x2c
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	2000029c 	.word	0x2000029c

08002f5c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f66:	f3ef 8310 	mrs	r3, PRIMASK
 8002f6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002f6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f70:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002f72:	2003      	movs	r0, #3
 8002f74:	f001 fb68 	bl	8004648 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8002f78:	4b37      	ldr	r3, [pc, #220]	; (8003058 <HW_TS_Stop+0xfc>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	22ca      	movs	r2, #202	; 0xca
 8002f80:	625a      	str	r2, [r3, #36]	; 0x24
 8002f82:	4b35      	ldr	r3, [pc, #212]	; (8003058 <HW_TS_Stop+0xfc>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2253      	movs	r2, #83	; 0x53
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002f8c:	79fa      	ldrb	r2, [r7, #7]
 8002f8e:	4933      	ldr	r1, [pc, #204]	; (800305c <HW_TS_Stop+0x100>)
 8002f90:	4613      	mov	r3, r2
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	4413      	add	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	440b      	add	r3, r1
 8002f9a:	330c      	adds	r3, #12
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d148      	bne.n	8003036 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002fa4:	79fb      	ldrb	r3, [r7, #7]
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff fbeb 	bl	8002784 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002fae:	4b2c      	ldr	r3, [pc, #176]	; (8003060 <HW_TS_Stop+0x104>)
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002fb4:	7cfb      	ldrb	r3, [r7, #19]
 8002fb6:	2b06      	cmp	r3, #6
 8002fb8:	d135      	bne.n	8003026 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002fba:	4b2a      	ldr	r3, [pc, #168]	; (8003064 <HW_TS_Stop+0x108>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc6:	d108      	bne.n	8002fda <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8002fc8:	bf00      	nop
 8002fca:	4b23      	ldr	r3, [pc, #140]	; (8003058 <HW_TS_Stop+0xfc>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f7      	bne.n	8002fca <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8002fda:	4b1f      	ldr	r3, [pc, #124]	; (8003058 <HW_TS_Stop+0xfc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <HW_TS_Stop+0xfc>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fec:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8002fee:	bf00      	nop
 8002ff0:	4b19      	ldr	r3, [pc, #100]	; (8003058 <HW_TS_Stop+0xfc>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0f7      	beq.n	8002ff0 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003000:	4b15      	ldr	r3, [pc, #84]	; (8003058 <HW_TS_Stop+0xfc>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	b2da      	uxtb	r2, r3
 800300a:	4b13      	ldr	r3, [pc, #76]	; (8003058 <HW_TS_Stop+0xfc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003014:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003016:	4b14      	ldr	r3, [pc, #80]	; (8003068 <HW_TS_Stop+0x10c>)
 8003018:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800301c:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800301e:	2003      	movs	r0, #3
 8003020:	f001 fb2e 	bl	8004680 <HAL_NVIC_ClearPendingIRQ>
 8003024:	e007      	b.n	8003036 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003026:	4b11      	ldr	r3, [pc, #68]	; (800306c <HW_TS_Stop+0x110>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	b2db      	uxtb	r3, r3
 800302c:	7cfa      	ldrb	r2, [r7, #19]
 800302e:	429a      	cmp	r2, r3
 8003030:	d001      	beq.n	8003036 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8003032:	f7ff fcc9 	bl	80029c8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003036:	4b08      	ldr	r3, [pc, #32]	; (8003058 <HW_TS_Stop+0xfc>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	22ff      	movs	r2, #255	; 0xff
 800303e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003040:	2003      	movs	r0, #3
 8003042:	f001 faf3 	bl	800462c <HAL_NVIC_EnableIRQ>
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003050:	bf00      	nop
}
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	200003b4 	.word	0x200003b4
 800305c:	2000029c 	.word	0x2000029c
 8003060:	2000032c 	.word	0x2000032c
 8003064:	40002800 	.word	0x40002800
 8003068:	58000800 	.word	0x58000800
 800306c:	2000032d 	.word	0x2000032d

08003070 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	6039      	str	r1, [r7, #0]
 800307a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800307c:	79fa      	ldrb	r2, [r7, #7]
 800307e:	493b      	ldr	r1, [pc, #236]	; (800316c <HW_TS_Start+0xfc>)
 8003080:	4613      	mov	r3, r2
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	4413      	add	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	440b      	add	r3, r1
 800308a:	330c      	adds	r3, #12
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d103      	bne.n	800309c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff ff60 	bl	8002f5c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800309c:	f3ef 8310 	mrs	r3, PRIMASK
 80030a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80030a2:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80030a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80030a6:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80030a8:	2003      	movs	r0, #3
 80030aa:	f001 facd 	bl	8004648 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80030ae:	4b30      	ldr	r3, [pc, #192]	; (8003170 <HW_TS_Start+0x100>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	22ca      	movs	r2, #202	; 0xca
 80030b6:	625a      	str	r2, [r3, #36]	; 0x24
 80030b8:	4b2d      	ldr	r3, [pc, #180]	; (8003170 <HW_TS_Start+0x100>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2253      	movs	r2, #83	; 0x53
 80030c0:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80030c2:	79fa      	ldrb	r2, [r7, #7]
 80030c4:	4929      	ldr	r1, [pc, #164]	; (800316c <HW_TS_Start+0xfc>)
 80030c6:	4613      	mov	r3, r2
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	4413      	add	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	440b      	add	r3, r1
 80030d0:	330c      	adds	r3, #12
 80030d2:	2202      	movs	r2, #2
 80030d4:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80030d6:	79fa      	ldrb	r2, [r7, #7]
 80030d8:	4924      	ldr	r1, [pc, #144]	; (800316c <HW_TS_Start+0xfc>)
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	440b      	add	r3, r1
 80030e4:	3308      	adds	r3, #8
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80030ea:	79fa      	ldrb	r2, [r7, #7]
 80030ec:	491f      	ldr	r1, [pc, #124]	; (800316c <HW_TS_Start+0xfc>)
 80030ee:	4613      	mov	r3, r2
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	4413      	add	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	440b      	add	r3, r1
 80030f8:	3304      	adds	r3, #4
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fa95 	bl	8002630 <linkTimer>
 8003106:	4603      	mov	r3, r0
 8003108:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800310a:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <HW_TS_Start+0x104>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003110:	4b19      	ldr	r3, [pc, #100]	; (8003178 <HW_TS_Start+0x108>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	7c7a      	ldrb	r2, [r7, #17]
 8003118:	429a      	cmp	r2, r3
 800311a:	d002      	beq.n	8003122 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 800311c:	f7ff fc54 	bl	80029c8 <RescheduleTimerList>
 8003120:	e013      	b.n	800314a <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8003122:	79fa      	ldrb	r2, [r7, #7]
 8003124:	4911      	ldr	r1, [pc, #68]	; (800316c <HW_TS_Start+0xfc>)
 8003126:	4613      	mov	r3, r2
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	4413      	add	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	440b      	add	r3, r1
 8003130:	3308      	adds	r3, #8
 8003132:	6819      	ldr	r1, [r3, #0]
 8003134:	8a7b      	ldrh	r3, [r7, #18]
 8003136:	79fa      	ldrb	r2, [r7, #7]
 8003138:	1ac9      	subs	r1, r1, r3
 800313a:	480c      	ldr	r0, [pc, #48]	; (800316c <HW_TS_Start+0xfc>)
 800313c:	4613      	mov	r3, r2
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	4413      	add	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	4403      	add	r3, r0
 8003146:	3308      	adds	r3, #8
 8003148:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800314a:	4b09      	ldr	r3, [pc, #36]	; (8003170 <HW_TS_Start+0x100>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	22ff      	movs	r2, #255	; 0xff
 8003152:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003154:	2003      	movs	r0, #3
 8003156:	f001 fa69 	bl	800462c <HAL_NVIC_EnableIRQ>
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003164:	bf00      	nop
}
 8003166:	3718      	adds	r7, #24
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	2000029c 	.word	0x2000029c
 8003170:	200003b4 	.word	0x200003b4
 8003174:	2000032c 	.word	0x2000032c
 8003178:	2000032d 	.word	0x2000032d

0800317c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	460b      	mov	r3, r1
 8003186:	607a      	str	r2, [r7, #4]
 8003188:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4798      	blx	r3

  return;
 800318e:	bf00      	nop
}
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607b      	str	r3, [r7, #4]
 80031a2:	4603      	mov	r3, r0
 80031a4:	73fb      	strb	r3, [r7, #15]
 80031a6:	4613      	mov	r3, r2
 80031a8:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80031ae:	2300      	movs	r3, #0
 80031b0:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d000      	beq.n	80031ba <HW_UART_Transmit_DMA+0x22>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80031b8:	e00e      	b.n	80031d8 <HW_UART_Transmit_DMA+0x40>
            HW_huart1TxCb = cb;
 80031ba:	4a17      	ldr	r2, [pc, #92]	; (8003218 <HW_UART_Transmit_DMA+0x80>)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80031c0:	4b16      	ldr	r3, [pc, #88]	; (800321c <HW_UART_Transmit_DMA+0x84>)
 80031c2:	4a17      	ldr	r2, [pc, #92]	; (8003220 <HW_UART_Transmit_DMA+0x88>)
 80031c4:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80031c6:	89bb      	ldrh	r3, [r7, #12]
 80031c8:	461a      	mov	r2, r3
 80031ca:	68b9      	ldr	r1, [r7, #8]
 80031cc:	4813      	ldr	r0, [pc, #76]	; (800321c <HW_UART_Transmit_DMA+0x84>)
 80031ce:	f004 f96d 	bl	80074ac <HAL_UART_Transmit_DMA>
 80031d2:	4603      	mov	r3, r0
 80031d4:	75fb      	strb	r3, [r7, #23]
            break;
 80031d6:	bf00      	nop
    }

    switch (hal_status)
 80031d8:	7dfb      	ldrb	r3, [r7, #23]
 80031da:	2b03      	cmp	r3, #3
 80031dc:	d816      	bhi.n	800320c <HW_UART_Transmit_DMA+0x74>
 80031de:	a201      	add	r2, pc, #4	; (adr r2, 80031e4 <HW_UART_Transmit_DMA+0x4c>)
 80031e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e4:	080031f5 	.word	0x080031f5
 80031e8:	080031fb 	.word	0x080031fb
 80031ec:	08003201 	.word	0x08003201
 80031f0:	08003207 	.word	0x08003207
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80031f4:	2300      	movs	r3, #0
 80031f6:	75bb      	strb	r3, [r7, #22]
            break;
 80031f8:	e009      	b.n	800320e <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80031fa:	2301      	movs	r3, #1
 80031fc:	75bb      	strb	r3, [r7, #22]
            break;
 80031fe:	e006      	b.n	800320e <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8003200:	2302      	movs	r3, #2
 8003202:	75bb      	strb	r3, [r7, #22]
            break;
 8003204:	e003      	b.n	800320e <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8003206:	2303      	movs	r3, #3
 8003208:	75bb      	strb	r3, [r7, #22]
            break;
 800320a:	e000      	b.n	800320e <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 800320c:	bf00      	nop
    }

    return hw_status;
 800320e:	7dbb      	ldrb	r3, [r7, #22]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	20003904 	.word	0x20003904
 800321c:	200039f8 	.word	0x200039f8
 8003220:	40013800 	.word	0x40013800

08003224 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	461a      	mov	r2, r3
 8003232:	4b08      	ldr	r3, [pc, #32]	; (8003254 <HAL_UART_TxCpltCallback+0x30>)
 8003234:	429a      	cmp	r2, r3
 8003236:	d000      	beq.n	800323a <HAL_UART_TxCpltCallback+0x16>
            }
            break;
#endif

        default:
            break;
 8003238:	e007      	b.n	800324a <HAL_UART_TxCpltCallback+0x26>
            if(HW_huart1TxCb)
 800323a:	4b07      	ldr	r3, [pc, #28]	; (8003258 <HAL_UART_TxCpltCallback+0x34>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <HAL_UART_TxCpltCallback+0x24>
                HW_huart1TxCb();
 8003242:	4b05      	ldr	r3, [pc, #20]	; (8003258 <HAL_UART_TxCpltCallback+0x34>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4798      	blx	r3
            break;
 8003248:	bf00      	nop
    }

    return;
 800324a:	bf00      	nop
}
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40013800 	.word	0x40013800
 8003258:	20003904 	.word	0x20003904

0800325c <LL_EXTI_DisableIT_0_31>:
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003264:	4b07      	ldr	r3, [pc, #28]	; (8003284 <LL_EXTI_DisableIT_0_31+0x28>)
 8003266:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	43db      	mvns	r3, r3
 800326e:	4905      	ldr	r1, [pc, #20]	; (8003284 <LL_EXTI_DisableIT_0_31+0x28>)
 8003270:	4013      	ands	r3, r2
 8003272:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	58000800 	.word	0x58000800

08003288 <LL_EXTI_DisableIT_32_63>:
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003290:	4b07      	ldr	r3, [pc, #28]	; (80032b0 <LL_EXTI_DisableIT_32_63+0x28>)
 8003292:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	43db      	mvns	r3, r3
 800329a:	4905      	ldr	r1, [pc, #20]	; (80032b0 <LL_EXTI_DisableIT_32_63+0x28>)
 800329c:	4013      	ands	r3, r2
 800329e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	58000800 	.word	0x58000800

080032b4 <LL_RCC_HSE_SetCapacitorTuning>:
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80032bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c0:	4a0a      	ldr	r2, [pc, #40]	; (80032ec <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80032c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80032c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032ce:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	021b      	lsls	r3, r3, #8
 80032d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	cafecafe 	.word	0xcafecafe

080032f0 <LL_RCC_LSE_SetDriveCapability>:
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80032f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003300:	f023 0218 	bic.w	r2, r3, #24
 8003304:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003328:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800332c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003334:	bf00      	nop
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800333e:	b480      	push	{r7}
 8003340:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800334e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003352:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003356:	bf00      	nop
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8003364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003368:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800336c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003370:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003374:	d101      	bne.n	800337a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8003386:	b480      	push	{r7}
 8003388:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800338a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800338e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003396:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800339a:	d101      	bne.n	80033a0 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 800339c:	2301      	movs	r3, #1
 800339e:	e000      	b.n	80033a2 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <LL_AHB1_GRP1_EnableClock>:
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80033b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80033c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4013      	ands	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80033d0:	68fb      	ldr	r3, [r7, #12]
}
 80033d2:	bf00      	nop
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <LL_AHB2_GRP1_EnableClock>:
{
 80033de:	b480      	push	{r7}
 80033e0:	b085      	sub	sp, #20
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80033e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80033f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4013      	ands	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003402:	68fb      	ldr	r3, [r7, #12]
}
 8003404:	bf00      	nop
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <LL_AHB3_GRP1_EnableClock>:
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800341c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800341e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4313      	orrs	r3, r2
 8003426:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800342c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4013      	ands	r3, r2
 8003432:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003434:	68fb      	ldr	r3, [r7, #12]
}
 8003436:	bf00      	nop
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	041b      	lsls	r3, r3, #16
 8003454:	431a      	orrs	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	605a      	str	r2, [r3, #4]
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <LL_C1_IPCC_DisableReceiveChannel>:
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	605a      	str	r2, [r3, #4]
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <LL_C2_IPCC_DisableTransmitChannel>:
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695a      	ldr	r2, [r3, #20]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	041b      	lsls	r3, r3, #16
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	615a      	str	r2, [r3, #20]
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <LL_C2_IPCC_DisableReceiveChannel>:
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695a      	ldr	r2, [r3, #20]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	615a      	str	r2, [r3, #20]
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <LL_C1_IPCC_ClearFlag_CHx>:
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	609a      	str	r2, [r3, #8]
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <LL_C2_IPCC_ClearFlag_CHx>:
{
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	619a      	str	r2, [r3, #24]
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
	...

08003508 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <LL_LPM_EnableSleep+0x1c>)
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	4a04      	ldr	r2, [pc, #16]	; (8003524 <LL_LPM_EnableSleep+0x1c>)
 8003512:	f023 0304 	bic.w	r3, r3, #4
 8003516:	6113      	str	r3, [r2, #16]
}
 8003518:	bf00      	nop
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	22ff      	movs	r2, #255	; 0xff
 8003534:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	22ca      	movs	r2, #202	; 0xca
 800354e:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2253      	movs	r2, #83	; 0x53
 8003554:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f023 0207 	bic.w	r2, r3, #7
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	609a      	str	r2, [r3, #8]
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0

  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800358c:	4b13      	ldr	r3, [pc, #76]	; (80035dc <main+0x54>)
 800358e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003592:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003594:	f000 feb6 	bl	8004304 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 8003598:	f000 f977 	bl	800388a <Reset_Device>
  Config_HSE();
 800359c:	f000 f961 	bl	8003862 <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035a0:	f000 f824 	bl	80035ec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 80035a4:	f000 f956 	bl	8003854 <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 80035a8:	f000 f9b1 	bl	800390e <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035ac:	f000 f945 	bl	800383a <MX_GPIO_Init>
  MX_DMA_Init();
 80035b0:	f000 f926 	bl	8003800 <MX_DMA_Init>
  MX_RF_Init();
 80035b4:	f000 f8e8 	bl	8003788 <MX_RF_Init>
  MX_RTC_Init();
 80035b8:	f000 f8ee 	bl	8003798 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80035bc:	f007 fbd4 	bl	800ad68 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80035c0:	4a07      	ldr	r2, [pc, #28]	; (80035e0 <main+0x58>)
 80035c2:	2100      	movs	r1, #0
 80035c4:	4807      	ldr	r0, [pc, #28]	; (80035e4 <main+0x5c>)
 80035c6:	f007 fc39 	bl	800ae3c <osThreadNew>
 80035ca:	4602      	mov	r2, r0
 80035cc:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <main+0x60>)
 80035ce:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Init code for STM32_WPAN */
  APPE_Init();
 80035d0:	f7fe fe1a 	bl	8002208 <APPE_Init>
  /* Start scheduler */
  osKernelStart();
 80035d4:	f007 fbfc 	bl	800add0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80035d8:	e7fe      	b.n	80035d8 <main+0x50>
 80035da:	bf00      	nop
 80035dc:	58004000 	.word	0x58004000
 80035e0:	08011e90 	.word	0x08011e90
 80035e4:	0800396f 	.word	0x0800396f
 80035e8:	20003908 	.word	0x20003908

080035ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b0ae      	sub	sp, #184	; 0xb8
 80035f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80035f6:	2248      	movs	r2, #72	; 0x48
 80035f8:	2100      	movs	r1, #0
 80035fa:	4618      	mov	r0, r3
 80035fc:	f00b fbbd 	bl	800ed7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003600:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	609a      	str	r2, [r3, #8]
 800360c:	60da      	str	r2, [r3, #12]
 800360e:	611a      	str	r2, [r3, #16]
 8003610:	615a      	str	r2, [r3, #20]
 8003612:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003614:	1d3b      	adds	r3, r7, #4
 8003616:	2250      	movs	r2, #80	; 0x50
 8003618:	2100      	movs	r1, #0
 800361a:	4618      	mov	r0, r3
 800361c:	f00b fbad 	bl	800ed7a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003620:	f001 fd14 	bl	800504c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003624:	2000      	movs	r0, #0
 8003626:	f7ff fe63 	bl	80032f0 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800362a:	4b2f      	ldr	r3, [pc, #188]	; (80036e8 <SystemClock_Config+0xfc>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003632:	4a2d      	ldr	r2, [pc, #180]	; (80036e8 <SystemClock_Config+0xfc>)
 8003634:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	4b2b      	ldr	r3, [pc, #172]	; (80036e8 <SystemClock_Config+0xfc>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003642:	603b      	str	r3, [r7, #0]
 8003644:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8003646:	2307      	movs	r3, #7
 8003648:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800364a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800364e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003650:	2301      	movs	r3, #1
 8003652:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003654:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003658:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800365a:	2340      	movs	r3, #64	; 0x40
 800365c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003660:	2300      	movs	r3, #0
 8003662:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003666:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800366a:	4618      	mov	r0, r3
 800366c:	f002 f88e 	bl	800578c <HAL_RCC_OscConfig>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8003676:	f000 f997 	bl	80039a8 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800367a:	236f      	movs	r3, #111	; 0x6f
 800367c:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800367e:	2302      	movs	r3, #2
 8003680:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003682:	2300      	movs	r3, #0
 8003684:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003686:	2300      	movs	r3, #0
 8003688:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800368a:	2300      	movs	r3, #0
 800368c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800368e:	2300      	movs	r3, #0
 8003690:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003692:	2300      	movs	r3, #0
 8003694:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003696:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800369a:	2101      	movs	r1, #1
 800369c:	4618      	mov	r0, r3
 800369e:	f002 fc01 	bl	8005ea4 <HAL_RCC_ClockConfig>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80036a8:	f000 f97e 	bl	80039a8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80036ac:	f643 0303 	movw	r3, #14339	; 0x3803
 80036b0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80036b2:	2300      	movs	r3, #0
 80036b4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80036b6:	2300      	movs	r3, #0
 80036b8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80036ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036be:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80036c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80036c4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80036c6:	2302      	movs	r3, #2
 80036c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80036ca:	2310      	movs	r3, #16
 80036cc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036ce:	1d3b      	adds	r3, r7, #4
 80036d0:	4618      	mov	r0, r3
 80036d2:	f003 f858 	bl	8006786 <HAL_RCCEx_PeriphCLKConfig>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80036dc:	f000 f964 	bl	80039a8 <Error_Handler>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  /* USER CODE END Smps */
}
 80036e0:	bf00      	nop
 80036e2:	37b8      	adds	r7, #184	; 0xb8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	58000400 	.word	0x58000400

080036ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80036f0:	4b23      	ldr	r3, [pc, #140]	; (8003780 <MX_USART1_UART_Init+0x94>)
 80036f2:	4a24      	ldr	r2, [pc, #144]	; (8003784 <MX_USART1_UART_Init+0x98>)
 80036f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80036f6:	4b22      	ldr	r3, [pc, #136]	; (8003780 <MX_USART1_UART_Init+0x94>)
 80036f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80036fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80036fe:	4b20      	ldr	r3, [pc, #128]	; (8003780 <MX_USART1_UART_Init+0x94>)
 8003700:	2200      	movs	r2, #0
 8003702:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003704:	4b1e      	ldr	r3, [pc, #120]	; (8003780 <MX_USART1_UART_Init+0x94>)
 8003706:	2200      	movs	r2, #0
 8003708:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800370a:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <MX_USART1_UART_Init+0x94>)
 800370c:	2200      	movs	r2, #0
 800370e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003710:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <MX_USART1_UART_Init+0x94>)
 8003712:	220c      	movs	r2, #12
 8003714:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003716:	4b1a      	ldr	r3, [pc, #104]	; (8003780 <MX_USART1_UART_Init+0x94>)
 8003718:	2200      	movs	r2, #0
 800371a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 800371c:	4b18      	ldr	r3, [pc, #96]	; (8003780 <MX_USART1_UART_Init+0x94>)
 800371e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003722:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003724:	4b16      	ldr	r3, [pc, #88]	; (8003780 <MX_USART1_UART_Init+0x94>)
 8003726:	2200      	movs	r2, #0
 8003728:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800372a:	4b15      	ldr	r3, [pc, #84]	; (8003780 <MX_USART1_UART_Init+0x94>)
 800372c:	2200      	movs	r2, #0
 800372e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003730:	4b13      	ldr	r3, [pc, #76]	; (8003780 <MX_USART1_UART_Init+0x94>)
 8003732:	2200      	movs	r2, #0
 8003734:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003736:	4812      	ldr	r0, [pc, #72]	; (8003780 <MX_USART1_UART_Init+0x94>)
 8003738:	f003 fe68 	bl	800740c <HAL_UART_Init>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8003742:	f000 f931 	bl	80039a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003746:	2100      	movs	r1, #0
 8003748:	480d      	ldr	r0, [pc, #52]	; (8003780 <MX_USART1_UART_Init+0x94>)
 800374a:	f004 fd7b 	bl	8008244 <HAL_UARTEx_SetTxFifoThreshold>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8003754:	f000 f928 	bl	80039a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003758:	2100      	movs	r1, #0
 800375a:	4809      	ldr	r0, [pc, #36]	; (8003780 <MX_USART1_UART_Init+0x94>)
 800375c:	f004 fdb0 	bl	80082c0 <HAL_UARTEx_SetRxFifoThreshold>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8003766:	f000 f91f 	bl	80039a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800376a:	4805      	ldr	r0, [pc, #20]	; (8003780 <MX_USART1_UART_Init+0x94>)
 800376c:	f004 fd31 	bl	80081d2 <HAL_UARTEx_DisableFifoMode>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8003776:	f000 f917 	bl	80039a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	200039f8 	.word	0x200039f8
 8003784:	40013800 	.word	0x40013800

08003788 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800378c:	bf00      	nop
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
	...

08003798 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800379c:	4b16      	ldr	r3, [pc, #88]	; (80037f8 <MX_RTC_Init+0x60>)
 800379e:	4a17      	ldr	r2, [pc, #92]	; (80037fc <MX_RTC_Init+0x64>)
 80037a0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80037a2:	4b15      	ldr	r3, [pc, #84]	; (80037f8 <MX_RTC_Init+0x60>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80037a8:	4b13      	ldr	r3, [pc, #76]	; (80037f8 <MX_RTC_Init+0x60>)
 80037aa:	220f      	movs	r2, #15
 80037ac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80037ae:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <MX_RTC_Init+0x60>)
 80037b0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80037b4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80037b6:	4b10      	ldr	r3, [pc, #64]	; (80037f8 <MX_RTC_Init+0x60>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80037bc:	4b0e      	ldr	r3, [pc, #56]	; (80037f8 <MX_RTC_Init+0x60>)
 80037be:	2200      	movs	r2, #0
 80037c0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80037c2:	4b0d      	ldr	r3, [pc, #52]	; (80037f8 <MX_RTC_Init+0x60>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80037c8:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <MX_RTC_Init+0x60>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80037ce:	480a      	ldr	r0, [pc, #40]	; (80037f8 <MX_RTC_Init+0x60>)
 80037d0:	f003 fa5f 	bl	8006c92 <HAL_RTC_Init>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80037da:	f000 f8e5 	bl	80039a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80037de:	4807      	ldr	r0, [pc, #28]	; (80037fc <MX_RTC_Init+0x64>)
 80037e0:	f7ff feaf 	bl	8003542 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80037e4:	2100      	movs	r1, #0
 80037e6:	4805      	ldr	r0, [pc, #20]	; (80037fc <MX_RTC_Init+0x64>)
 80037e8:	f7ff febb 	bl	8003562 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80037ec:	4803      	ldr	r0, [pc, #12]	; (80037fc <MX_RTC_Init+0x64>)
 80037ee:	f7ff fe9b 	bl	8003528 <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 80037f2:	bf00      	nop
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20003a84 	.word	0x20003a84
 80037fc:	40002800 	.word	0x40002800

08003800 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003804:	2004      	movs	r0, #4
 8003806:	f7ff fdd1 	bl	80033ac <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800380a:	2001      	movs	r0, #1
 800380c:	f7ff fdce 	bl	80033ac <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003810:	2002      	movs	r0, #2
 8003812:	f7ff fdcb 	bl	80033ac <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8003816:	2200      	movs	r2, #0
 8003818:	210f      	movs	r1, #15
 800381a:	200e      	movs	r0, #14
 800381c:	f000 feec 	bl	80045f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003820:	200e      	movs	r0, #14
 8003822:	f000 ff03 	bl	800462c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8003826:	2200      	movs	r2, #0
 8003828:	210f      	movs	r1, #15
 800382a:	203a      	movs	r0, #58	; 0x3a
 800382c:	f000 fee4 	bl	80045f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8003830:	203a      	movs	r0, #58	; 0x3a
 8003832:	f000 fefb 	bl	800462c <HAL_NVIC_EnableIRQ>

}
 8003836:	bf00      	nop
 8003838:	bd80      	pop	{r7, pc}

0800383a <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800383e:	2004      	movs	r0, #4
 8003840:	f7ff fdcd 	bl	80033de <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003844:	2001      	movs	r0, #1
 8003846:	f7ff fdca 	bl	80033de <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800384a:	2002      	movs	r0, #2
 800384c:	f7ff fdc7 	bl	80033de <LL_AHB2_GRP1_EnableClock>

}
 8003850:	bf00      	nop
 8003852:	bd80      	pop	{r7, pc}

08003854 <PeriphClock_Config>:

/* USER CODE BEGIN 4 */

void PeriphClock_Config(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 8003858:	bf00      	nop
}
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8003868:	2000      	movs	r0, #0
 800386a:	f006 fd97 	bl	800a39c <OTP_Read>
 800386e:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d005      	beq.n	8003882 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	799b      	ldrb	r3, [r3, #6]
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff fd1a 	bl	80032b4 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8003880:	bf00      	nop
 8003882:	bf00      	nop
}  
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <Reset_Device>:


static void Reset_Device( void )
{
 800388a:	b580      	push	{r7, lr}
 800388c:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
	Reset_BackupDomain();
 800388e:	f000 f827 	bl	80038e0 <Reset_BackupDomain>

	Reset_IPCC();
 8003892:	f000 f803 	bl	800389c <Reset_IPCC>
#endif

	return;
 8003896:	bf00      	nop
}
 8003898:	bd80      	pop	{r7, pc}
	...

0800389c <Reset_IPCC>:

static void Reset_IPCC( void )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80038a0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80038a4:	f7ff fdb4 	bl	8003410 <LL_AHB3_GRP1_EnableClock>

	LL_C1_IPCC_ClearFlag_CHx(
 80038a8:	213f      	movs	r1, #63	; 0x3f
 80038aa:	480c      	ldr	r0, [pc, #48]	; (80038dc <Reset_IPCC+0x40>)
 80038ac:	f7ff fe0f 	bl	80034ce <LL_C1_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_ClearFlag_CHx(
 80038b0:	213f      	movs	r1, #63	; 0x3f
 80038b2:	480a      	ldr	r0, [pc, #40]	; (80038dc <Reset_IPCC+0x40>)
 80038b4:	f7ff fe19 	bl	80034ea <LL_C2_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableTransmitChannel(
 80038b8:	213f      	movs	r1, #63	; 0x3f
 80038ba:	4808      	ldr	r0, [pc, #32]	; (80038dc <Reset_IPCC+0x40>)
 80038bc:	f7ff fdc1 	bl	8003442 <LL_C1_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableTransmitChannel(
 80038c0:	213f      	movs	r1, #63	; 0x3f
 80038c2:	4806      	ldr	r0, [pc, #24]	; (80038dc <Reset_IPCC+0x40>)
 80038c4:	f7ff fde0 	bl	8003488 <LL_C2_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableReceiveChannel(
 80038c8:	213f      	movs	r1, #63	; 0x3f
 80038ca:	4804      	ldr	r0, [pc, #16]	; (80038dc <Reset_IPCC+0x40>)
 80038cc:	f7ff fdcb 	bl	8003466 <LL_C1_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableReceiveChannel(
 80038d0:	213f      	movs	r1, #63	; 0x3f
 80038d2:	4802      	ldr	r0, [pc, #8]	; (80038dc <Reset_IPCC+0x40>)
 80038d4:	f7ff fdea 	bl	80034ac <LL_C2_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	return;
 80038d8:	bf00      	nop
}
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	58000c00 	.word	0x58000c00

080038e0 <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80038e4:	f7ff fd3c 	bl	8003360 <LL_RCC_IsActiveFlag_PINRST>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00d      	beq.n	800390a <Reset_BackupDomain+0x2a>
 80038ee:	f7ff fd4a 	bl	8003386 <LL_RCC_IsActiveFlag_SFTRST>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d108      	bne.n	800390a <Reset_BackupDomain+0x2a>
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80038f8:	f001 fba8 	bl	800504c <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 80038fc:	f001 fba6 	bl	800504c <HAL_PWR_EnableBkUpAccess>

		__HAL_RCC_BACKUPRESET_FORCE();
 8003900:	f7ff fd0c 	bl	800331c <LL_RCC_ForceBackupDomainReset>
		__HAL_RCC_BACKUPRESET_RELEASE();
 8003904:	f7ff fd1b 	bl	800333e <LL_RCC_ReleaseBackupDomainReset>
	}

	return;
 8003908:	bf00      	nop
 800390a:	bf00      	nop
}
 800390c:	bd80      	pop	{r7, pc}

0800390e <Init_Exti>:

static void Init_Exti( void )
{
 800390e:	b580      	push	{r7, lr}
 8003910:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 8003912:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003916:	f7ff fca1 	bl	800325c <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 800391a:	f06f 0050 	mvn.w	r0, #80	; 0x50
 800391e:	f7ff fcb3 	bl	8003288 <LL_EXTI_DisableIT_32_63>

  return;
 8003922:	bf00      	nop
}
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b084      	sub	sp, #16
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800392e:	f000 fd1d 	bl	800436c <HAL_GetTick>
 8003932:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800393e:	d00a      	beq.n	8003956 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8003940:	f000 fd2c 	bl	800439c <HAL_GetTickFreq>
 8003944:	4603      	mov	r3, r0
 8003946:	461a      	mov	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4413      	add	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800394e:	e002      	b.n	8003956 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8003950:	f7ff fdda 	bl	8003508 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8003954:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8003956:	f000 fd09 	bl	800436c <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	429a      	cmp	r2, r3
 8003964:	d8f4      	bhi.n	8003950 <HAL_Delay+0x2a>
  }
}
 8003966:	bf00      	nop
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b082      	sub	sp, #8
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8003976:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800397a:	2101      	movs	r1, #1
 800397c:	2001      	movs	r0, #1
 800397e:	f007 fb65 	bl	800b04c <osThreadFlagsWait>
 8003982:	e7f8      	b.n	8003976 <StartDefaultTask+0x8>

08003984 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a04      	ldr	r2, [pc, #16]	; (80039a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d101      	bne.n	800399a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003996:	f000 fcd5 	bl	8004344 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800399a:	bf00      	nop
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40014800 	.word	0x40014800

080039a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 
  /* USER CODE END Error_Handler_Debug */
}
 80039ac:	bf00      	nop
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <LL_RCC_SetRTCClockSource>:
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80039be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <LL_RCC_EnableRTC>:
{
 80039e2:	b480      	push	{r7}
 80039e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80039e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80039fa:	bf00      	nop
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <LL_AHB2_GRP1_EnableClock>:
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4013      	ands	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a28:	68fb      	ldr	r3, [r7, #12]
}
 8003a2a:	bf00      	nop
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <LL_AHB3_GRP1_EnableClock>:
{
 8003a36:	b480      	push	{r7}
 8003a38:	b085      	sub	sp, #20
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4013      	ands	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
}
 8003a5c:	bf00      	nop
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <LL_APB1_GRP1_EnableClock>:
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
}
 8003a8e:	bf00      	nop
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <LL_APB1_GRP2_EnableClock>:
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b085      	sub	sp, #20
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8003aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003aa8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8003ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4013      	ands	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003abe:	68fb      	ldr	r3, [r7, #12]
}
 8003ac0:	bf00      	nop
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <LL_APB2_GRP1_EnableClock>:
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ada:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4013      	ands	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003af0:	68fb      	ldr	r3, [r7, #12]
}
 8003af2:	bf00      	nop
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003b02:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003b06:	f7ff ff96 	bl	8003a36 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	210f      	movs	r1, #15
 8003b0e:	f06f 0001 	mvn.w	r0, #1
 8003b12:	f000 fd71 	bl	80045f8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 8003b16:	2200      	movs	r2, #0
 8003b18:	2105      	movs	r1, #5
 8003b1a:	202e      	movs	r0, #46	; 0x2e
 8003b1c:	f000 fd6c 	bl	80045f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003b20:	202e      	movs	r0, #46	; 0x2e
 8003b22:	f000 fd83 	bl	800462c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 6, 0);
 8003b26:	2200      	movs	r2, #0
 8003b28:	2106      	movs	r1, #6
 8003b2a:	202c      	movs	r0, #44	; 0x2c
 8003b2c:	f000 fd64 	bl	80045f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 6, 0);
 8003b30:	2200      	movs	r2, #0
 8003b32:	2106      	movs	r1, #6
 8003b34:	202d      	movs	r0, #45	; 0x2d
 8003b36:	f000 fd5f 	bl	80045f8 <HAL_NVIC_SetPriority>

  /* USER CODE END MspInit 1 */
}
 8003b3a:	bf00      	nop
 8003b3c:	bd80      	pop	{r7, pc}
	...

08003b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08c      	sub	sp, #48	; 0x30
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b48:	f107 031c 	add.w	r3, r7, #28
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	605a      	str	r2, [r3, #4]
 8003b52:	609a      	str	r2, [r3, #8]
 8003b54:	60da      	str	r2, [r3, #12]
 8003b56:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  if(huart->Instance==LPUART1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a6c      	ldr	r2, [pc, #432]	; (8003d10 <HAL_UART_MspInit+0x1d0>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d16f      	bne.n	8003c42 <HAL_UART_MspInit+0x102>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003b62:	2001      	movs	r0, #1
 8003b64:	f7ff ff99 	bl	8003a9a <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b68:	2001      	movs	r0, #1
 8003b6a:	f7ff ff4b 	bl	8003a04 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    PA6     ------> LPUART1_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003b6e:	230c      	movs	r3, #12
 8003b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b72:	2302      	movs	r3, #2
 8003b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003b7e:	2308      	movs	r3, #8
 8003b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b82:	f107 031c 	add.w	r3, r7, #28
 8003b86:	4619      	mov	r1, r3
 8003b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b8c:	f001 f89a 	bl	8004cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003b90:	2340      	movs	r3, #64	; 0x40
 8003b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b94:	2302      	movs	r3, #2
 8003b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003ba0:	2308      	movs	r3, #8
 8003ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ba4:	f107 031c 	add.w	r3, r7, #28
 8003ba8:	4619      	mov	r1, r3
 8003baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bae:	f001 f889 	bl	8004cc4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8003bb2:	4b58      	ldr	r3, [pc, #352]	; (8003d14 <HAL_UART_MspInit+0x1d4>)
 8003bb4:	4a58      	ldr	r2, [pc, #352]	; (8003d18 <HAL_UART_MspInit+0x1d8>)
 8003bb6:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8003bb8:	4b56      	ldr	r3, [pc, #344]	; (8003d14 <HAL_UART_MspInit+0x1d4>)
 8003bba:	2211      	movs	r2, #17
 8003bbc:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003bbe:	4b55      	ldr	r3, [pc, #340]	; (8003d14 <HAL_UART_MspInit+0x1d4>)
 8003bc0:	2210      	movs	r2, #16
 8003bc2:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bc4:	4b53      	ldr	r3, [pc, #332]	; (8003d14 <HAL_UART_MspInit+0x1d4>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003bca:	4b52      	ldr	r3, [pc, #328]	; (8003d14 <HAL_UART_MspInit+0x1d4>)
 8003bcc:	2280      	movs	r2, #128	; 0x80
 8003bce:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bd0:	4b50      	ldr	r3, [pc, #320]	; (8003d14 <HAL_UART_MspInit+0x1d4>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bd6:	4b4f      	ldr	r3, [pc, #316]	; (8003d14 <HAL_UART_MspInit+0x1d4>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8003bdc:	4b4d      	ldr	r3, [pc, #308]	; (8003d14 <HAL_UART_MspInit+0x1d4>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003be2:	4b4c      	ldr	r3, [pc, #304]	; (8003d14 <HAL_UART_MspInit+0x1d4>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8003be8:	484a      	ldr	r0, [pc, #296]	; (8003d14 <HAL_UART_MspInit+0x1d4>)
 8003bea:	f000 fd57 	bl	800469c <HAL_DMA_Init>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 8003bf4:	f7ff fed8 	bl	80039a8 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 8003bf8:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8003bfc:	60fb      	str	r3, [r7, #12]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	613b      	str	r3, [r7, #16]
    pSyncConfig.SyncEnable = DISABLE;
 8003c02:	2300      	movs	r3, #0
 8003c04:	753b      	strb	r3, [r7, #20]
    pSyncConfig.EventEnable = DISABLE;
 8003c06:	2300      	movs	r3, #0
 8003c08:	757b      	strb	r3, [r7, #21]
    pSyncConfig.RequestNumber = 1;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	61bb      	str	r3, [r7, #24]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 8003c0e:	f107 030c 	add.w	r3, r7, #12
 8003c12:	4619      	mov	r1, r3
 8003c14:	483f      	ldr	r0, [pc, #252]	; (8003d14 <HAL_UART_MspInit+0x1d4>)
 8003c16:	f001 f815 	bl	8004c44 <HAL_DMAEx_ConfigMuxSync>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8003c20:	f7ff fec2 	bl	80039a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a3b      	ldr	r2, [pc, #236]	; (8003d14 <HAL_UART_MspInit+0x1d4>)
 8003c28:	675a      	str	r2, [r3, #116]	; 0x74
 8003c2a:	4a3a      	ldr	r2, [pc, #232]	; (8003d14 <HAL_UART_MspInit+0x1d4>)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8003c30:	2200      	movs	r2, #0
 8003c32:	2105      	movs	r1, #5
 8003c34:	2025      	movs	r0, #37	; 0x25
 8003c36:	f000 fcdf 	bl	80045f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003c3a:	2025      	movs	r0, #37	; 0x25
 8003c3c:	f000 fcf6 	bl	800462c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003c40:	e061      	b.n	8003d06 <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==USART1)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a35      	ldr	r2, [pc, #212]	; (8003d1c <HAL_UART_MspInit+0x1dc>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d15c      	bne.n	8003d06 <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c4c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003c50:	f7ff ff3c 	bl	8003acc <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c54:	2001      	movs	r0, #1
 8003c56:	f7ff fed5 	bl	8003a04 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c5a:	2002      	movs	r0, #2
 8003c5c:	f7ff fed2 	bl	8003a04 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003c60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c66:	2302      	movs	r3, #2
 8003c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c72:	2307      	movs	r3, #7
 8003c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c76:	f107 031c 	add.w	r3, r7, #28
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c80:	f001 f820 	bl	8004cc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c84:	23c0      	movs	r3, #192	; 0xc0
 8003c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c88:	2302      	movs	r3, #2
 8003c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c90:	2303      	movs	r3, #3
 8003c92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c94:	2307      	movs	r3, #7
 8003c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c98:	f107 031c 	add.w	r3, r7, #28
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4820      	ldr	r0, [pc, #128]	; (8003d20 <HAL_UART_MspInit+0x1e0>)
 8003ca0:	f001 f810 	bl	8004cc4 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8003ca4:	4b1f      	ldr	r3, [pc, #124]	; (8003d24 <HAL_UART_MspInit+0x1e4>)
 8003ca6:	4a20      	ldr	r2, [pc, #128]	; (8003d28 <HAL_UART_MspInit+0x1e8>)
 8003ca8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003caa:	4b1e      	ldr	r3, [pc, #120]	; (8003d24 <HAL_UART_MspInit+0x1e4>)
 8003cac:	220f      	movs	r2, #15
 8003cae:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003cb0:	4b1c      	ldr	r3, [pc, #112]	; (8003d24 <HAL_UART_MspInit+0x1e4>)
 8003cb2:	2210      	movs	r2, #16
 8003cb4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cb6:	4b1b      	ldr	r3, [pc, #108]	; (8003d24 <HAL_UART_MspInit+0x1e4>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003cbc:	4b19      	ldr	r3, [pc, #100]	; (8003d24 <HAL_UART_MspInit+0x1e4>)
 8003cbe:	2280      	movs	r2, #128	; 0x80
 8003cc0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003cc2:	4b18      	ldr	r3, [pc, #96]	; (8003d24 <HAL_UART_MspInit+0x1e4>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003cc8:	4b16      	ldr	r3, [pc, #88]	; (8003d24 <HAL_UART_MspInit+0x1e4>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003cce:	4b15      	ldr	r3, [pc, #84]	; (8003d24 <HAL_UART_MspInit+0x1e4>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003cd4:	4b13      	ldr	r3, [pc, #76]	; (8003d24 <HAL_UART_MspInit+0x1e4>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003cda:	4812      	ldr	r0, [pc, #72]	; (8003d24 <HAL_UART_MspInit+0x1e4>)
 8003cdc:	f000 fcde 	bl	800469c <HAL_DMA_Init>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 8003ce6:	f7ff fe5f 	bl	80039a8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a0d      	ldr	r2, [pc, #52]	; (8003d24 <HAL_UART_MspInit+0x1e4>)
 8003cee:	675a      	str	r2, [r3, #116]	; 0x74
 8003cf0:	4a0c      	ldr	r2, [pc, #48]	; (8003d24 <HAL_UART_MspInit+0x1e4>)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	2105      	movs	r1, #5
 8003cfa:	2024      	movs	r0, #36	; 0x24
 8003cfc:	f000 fc7c 	bl	80045f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003d00:	2024      	movs	r0, #36	; 0x24
 8003d02:	f000 fc93 	bl	800462c <HAL_NVIC_EnableIRQ>
}
 8003d06:	bf00      	nop
 8003d08:	3730      	adds	r7, #48	; 0x30
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40008000 	.word	0x40008000
 8003d14:	20003aa8 	.word	0x20003aa8
 8003d18:	40020044 	.word	0x40020044
 8003d1c:	40013800 	.word	0x40013800
 8003d20:	48000400 	.word	0x48000400
 8003d24:	20003998 	.word	0x20003998
 8003d28:	40020444 	.word	0x40020444

08003d2c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a0b      	ldr	r2, [pc, #44]	; (8003d68 <HAL_RTC_MspInit+0x3c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d110      	bne.n	8003d60 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8003d3e:	f001 f985 	bl	800504c <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 8003d42:	f001 f983 	bl	800504c <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 8003d46:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003d4a:	f7ff fe34 	bl	80039b6 <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003d4e:	f7ff fe48 	bl	80039e2 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003d52:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003d56:	f7ff fe87 	bl	8003a68 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f003 f887 	bl	8006e6e <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003d60:	bf00      	nop
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40002800 	.word	0x40002800

08003d6c <LL_APB2_GRP1_EnableClock>:
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003d90:	68fb      	ldr	r3, [r7, #12]
}
 8003d92:	bf00      	nop
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
	...

08003da0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b08c      	sub	sp, #48	; 0x30
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003da8:	2300      	movs	r3, #0
 8003daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003dac:	2300      	movs	r3, #0
 8003dae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8003db0:	2200      	movs	r2, #0
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	201a      	movs	r0, #26
 8003db6:	f000 fc1f 	bl	80045f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003dba:	201a      	movs	r0, #26
 8003dbc:	f000 fc36 	bl	800462c <HAL_NVIC_EnableIRQ>
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8003dc0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003dc4:	f7ff ffd2 	bl	8003d6c <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003dc8:	f107 0208 	add.w	r2, r7, #8
 8003dcc:	f107 030c 	add.w	r3, r7, #12
 8003dd0:	4611      	mov	r1, r2
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f002 fa50 	bl	8006278 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003dd8:	f002 fa38 	bl	800624c <HAL_RCC_GetPCLK2Freq>
 8003ddc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de0:	4a12      	ldr	r2, [pc, #72]	; (8003e2c <HAL_InitTick+0x8c>)
 8003de2:	fba2 2303 	umull	r2, r3, r2, r3
 8003de6:	0c9b      	lsrs	r3, r3, #18
 8003de8:	3b01      	subs	r3, #1
 8003dea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8003dec:	4b10      	ldr	r3, [pc, #64]	; (8003e30 <HAL_InitTick+0x90>)
 8003dee:	4a11      	ldr	r2, [pc, #68]	; (8003e34 <HAL_InitTick+0x94>)
 8003df0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8003df2:	4b0f      	ldr	r3, [pc, #60]	; (8003e30 <HAL_InitTick+0x90>)
 8003df4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003df8:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8003dfa:	4a0d      	ldr	r2, [pc, #52]	; (8003e30 <HAL_InitTick+0x90>)
 8003dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfe:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8003e00:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <HAL_InitTick+0x90>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e06:	4b0a      	ldr	r3, [pc, #40]	; (8003e30 <HAL_InitTick+0x90>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8003e0c:	4808      	ldr	r0, [pc, #32]	; (8003e30 <HAL_InitTick+0x90>)
 8003e0e:	f003 f864 	bl	8006eda <HAL_TIM_Base_Init>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d104      	bne.n	8003e22 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8003e18:	4805      	ldr	r0, [pc, #20]	; (8003e30 <HAL_InitTick+0x90>)
 8003e1a:	f003 f8bf 	bl	8006f9c <HAL_TIM_Base_Start_IT>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	e000      	b.n	8003e24 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3730      	adds	r7, #48	; 0x30
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	431bde83 	.word	0x431bde83
 8003e30:	20003b08 	.word	0x20003b08
 8003e34:	40014800 	.word	0x40014800

08003e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003e3c:	bf00      	nop
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e46:	b480      	push	{r7}
 8003e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e4a:	e7fe      	b.n	8003e4a <HardFault_Handler+0x4>

08003e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e50:	e7fe      	b.n	8003e50 <MemManage_Handler+0x4>

08003e52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e52:	b480      	push	{r7}
 8003e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e56:	e7fe      	b.n	8003e56 <BusFault_Handler+0x4>

08003e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e5c:	e7fe      	b.n	8003e5c <UsageFault_Handler+0x4>

08003e5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e62:	bf00      	nop
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8003e70:	4802      	ldr	r0, [pc, #8]	; (8003e7c <DMA1_Channel4_IRQHandler+0x10>)
 8003e72:	f000 fd95 	bl	80049a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003e76:	bf00      	nop
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20003aa8 	.word	0x20003aa8

08003e80 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003e84:	4802      	ldr	r0, [pc, #8]	; (8003e90 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8003e86:	f003 f8d7 	bl	8007038 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003e8a:	bf00      	nop
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	20003b08 	.word	0x20003b08

08003e94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003e98:	4802      	ldr	r0, [pc, #8]	; (8003ea4 <USART1_IRQHandler+0x10>)
 8003e9a:	f003 fb87 	bl	80075ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003e9e:	bf00      	nop
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	200039f8 	.word	0x200039f8

08003ea8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003eac:	4802      	ldr	r0, [pc, #8]	; (8003eb8 <LPUART1_IRQHandler+0x10>)
 8003eae:	f003 fb7d 	bl	80075ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003eb2:	bf00      	nop
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	2000390c 	.word	0x2000390c

08003ebc <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003ec0:	f001 f8a0 	bl	8005004 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003ec4:	bf00      	nop
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003ecc:	4802      	ldr	r0, [pc, #8]	; (8003ed8 <DMA2_Channel4_IRQHandler+0x10>)
 8003ece:	f000 fd67 	bl	80049a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8003ed2:	bf00      	nop
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20003998 	.word	0x20003998

08003edc <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8003ee0:	2010      	movs	r0, #16
 8003ee2:	f001 f877 	bl	8004fd4 <HAL_GPIO_EXTI_IRQHandler>
}
 8003ee6:	bf00      	nop
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8003eee:	2001      	movs	r0, #1
 8003ef0:	f001 f870 	bl	8004fd4 <HAL_GPIO_EXTI_IRQHandler>
}
 8003ef4:	bf00      	nop
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <EXTI1_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8003efc:	2002      	movs	r0, #2
 8003efe:	f001 f869 	bl	8004fd4 <HAL_GPIO_EXTI_IRQHandler>
}
 8003f02:	bf00      	nop
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <RTC_WKUP_IRQHandler>:

void RTC_WKUP_IRQHandler(void)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8003f0a:	f7fe fdfb 	bl	8002b04 <HW_TS_RTC_Wakeup_Handler>
}
 8003f0e:	bf00      	nop
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <IPCC_C1_TX_IRQHandler>:

void IPCC_C1_TX_IRQHandler(void)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8003f16:	f7fd fec3 	bl	8001ca0 <HW_IPCC_Tx_Handler>

  return;
 8003f1a:	bf00      	nop
}
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8003f22:	f7fd fe85 	bl	8001c30 <HW_IPCC_Rx_Handler>
  return;
 8003f26:	bf00      	nop
}
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b086      	sub	sp, #24
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	60f8      	str	r0, [r7, #12]
 8003f32:	60b9      	str	r1, [r7, #8]
 8003f34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]
 8003f3a:	e00a      	b.n	8003f52 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003f3c:	f3af 8000 	nop.w
 8003f40:	4601      	mov	r1, r0
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	1c5a      	adds	r2, r3, #1
 8003f46:	60ba      	str	r2, [r7, #8]
 8003f48:	b2ca      	uxtb	r2, r1
 8003f4a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	dbf0      	blt.n	8003f3c <_read+0x12>
	}

return len;
 8003f5a:	687b      	ldr	r3, [r7, #4]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
	return -1;
 8003f6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f8c:	605a      	str	r2, [r3, #4]
	return 0;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <_isatty>:

int _isatty(int file)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
	return 1;
 8003fa4:	2301      	movs	r3, #1
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b085      	sub	sp, #20
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	60f8      	str	r0, [r7, #12]
 8003fba:	60b9      	str	r1, [r7, #8]
 8003fbc:	607a      	str	r2, [r7, #4]
	return 0;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003fd4:	4b11      	ldr	r3, [pc, #68]	; (800401c <_sbrk+0x50>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d102      	bne.n	8003fe2 <_sbrk+0x16>
		heap_end = &end;
 8003fdc:	4b0f      	ldr	r3, [pc, #60]	; (800401c <_sbrk+0x50>)
 8003fde:	4a10      	ldr	r2, [pc, #64]	; (8004020 <_sbrk+0x54>)
 8003fe0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003fe2:	4b0e      	ldr	r3, [pc, #56]	; (800401c <_sbrk+0x50>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003fe8:	4b0c      	ldr	r3, [pc, #48]	; (800401c <_sbrk+0x50>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4413      	add	r3, r2
 8003ff0:	466a      	mov	r2, sp
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d907      	bls.n	8004006 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003ff6:	f00a fe8b 	bl	800ed10 <__errno>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	230c      	movs	r3, #12
 8003ffe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004004:	e006      	b.n	8004014 <_sbrk+0x48>
	}

	heap_end += incr;
 8004006:	4b05      	ldr	r3, [pc, #20]	; (800401c <_sbrk+0x50>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4413      	add	r3, r2
 800400e:	4a03      	ldr	r2, [pc, #12]	; (800401c <_sbrk+0x50>)
 8004010:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004012:	68fb      	ldr	r3, [r7, #12]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	200003c0 	.word	0x200003c0
 8004020:	20003ba0 	.word	0x20003ba0

08004024 <LL_AHB2_GRP1_EnableClock>:
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800402c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004030:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004032:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4313      	orrs	r3, r2
 800403a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800403c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004040:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4013      	ands	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004048:	68fb      	ldr	r3, [r7, #12]
}
 800404a:	bf00      	nop
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
	...

08004058 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af00      	add	r7, sp, #0
 800405e:	4603      	mov	r3, r0
 8004060:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8004062:	f107 030c 	add.w	r3, r7, #12
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	605a      	str	r2, [r3, #4]
 800406c:	609a      	str	r2, [r3, #8]
 800406e:	60da      	str	r2, [r3, #12]
 8004070:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8004072:	2002      	movs	r0, #2
 8004074:	f7ff ffd6 	bl	8004024 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8004078:	79fb      	ldrb	r3, [r7, #7]
 800407a:	4a12      	ldr	r2, [pc, #72]	; (80040c4 <BSP_LED_Init+0x6c>)
 800407c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004080:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004082:	2301      	movs	r3, #1
 8004084:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8004086:	2300      	movs	r3, #0
 8004088:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800408a:	2302      	movs	r3, #2
 800408c:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 800408e:	79fb      	ldrb	r3, [r7, #7]
 8004090:	4a0d      	ldr	r2, [pc, #52]	; (80040c8 <BSP_LED_Init+0x70>)
 8004092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004096:	f107 020c 	add.w	r2, r7, #12
 800409a:	4611      	mov	r1, r2
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fe11 	bl	8004cc4 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80040a2:	79fb      	ldrb	r3, [r7, #7]
 80040a4:	4a08      	ldr	r2, [pc, #32]	; (80040c8 <BSP_LED_Init+0x70>)
 80040a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80040aa:	79fb      	ldrb	r3, [r7, #7]
 80040ac:	4a05      	ldr	r2, [pc, #20]	; (80040c4 <BSP_LED_Init+0x6c>)
 80040ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040b2:	2200      	movs	r2, #0
 80040b4:	4619      	mov	r1, r3
 80040b6:	f000 ff75 	bl	8004fa4 <HAL_GPIO_WritePin>
}
 80040ba:	bf00      	nop
 80040bc:	3720      	adds	r7, #32
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	08011eb4 	.word	0x08011eb4
 80040c8:	20000014 	.word	0x20000014

080040cc <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	4603      	mov	r3, r0
 80040d4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80040d6:	79fb      	ldrb	r3, [r7, #7]
 80040d8:	4a07      	ldr	r2, [pc, #28]	; (80040f8 <BSP_LED_On+0x2c>)
 80040da:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80040de:	79fb      	ldrb	r3, [r7, #7]
 80040e0:	4a06      	ldr	r2, [pc, #24]	; (80040fc <BSP_LED_On+0x30>)
 80040e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040e6:	2201      	movs	r2, #1
 80040e8:	4619      	mov	r1, r3
 80040ea:	f000 ff5b 	bl	8004fa4 <HAL_GPIO_WritePin>
}
 80040ee:	bf00      	nop
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	20000014 	.word	0x20000014
 80040fc:	08011eb4 	.word	0x08011eb4

08004100 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	4603      	mov	r3, r0
 8004108:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800410a:	79fb      	ldrb	r3, [r7, #7]
 800410c:	4a07      	ldr	r2, [pc, #28]	; (800412c <BSP_LED_Off+0x2c>)
 800410e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004112:	79fb      	ldrb	r3, [r7, #7]
 8004114:	4a06      	ldr	r2, [pc, #24]	; (8004130 <BSP_LED_Off+0x30>)
 8004116:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800411a:	2200      	movs	r2, #0
 800411c:	4619      	mov	r1, r3
 800411e:	f000 ff41 	bl	8004fa4 <HAL_GPIO_WritePin>
}
 8004122:	bf00      	nop
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	20000014 	.word	0x20000014
 8004130:	08011eb4 	.word	0x08011eb4

08004134 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af00      	add	r7, sp, #0
 800413a:	4603      	mov	r3, r0
 800413c:	460a      	mov	r2, r1
 800413e:	71fb      	strb	r3, [r7, #7]
 8004140:	4613      	mov	r3, r2
 8004142:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8004144:	f107 030c 	add.w	r3, r7, #12
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	605a      	str	r2, [r3, #4]
 800414e:	609a      	str	r2, [r3, #8]
 8004150:	60da      	str	r2, [r3, #12]
 8004152:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8004154:	79fb      	ldrb	r3, [r7, #7]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d103      	bne.n	8004162 <BSP_PB_Init+0x2e>
 800415a:	2004      	movs	r0, #4
 800415c:	f7ff ff62 	bl	8004024 <LL_AHB2_GRP1_EnableClock>
 8004160:	e00c      	b.n	800417c <BSP_PB_Init+0x48>
 8004162:	79fb      	ldrb	r3, [r7, #7]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d103      	bne.n	8004170 <BSP_PB_Init+0x3c>
 8004168:	2008      	movs	r0, #8
 800416a:	f7ff ff5b 	bl	8004024 <LL_AHB2_GRP1_EnableClock>
 800416e:	e005      	b.n	800417c <BSP_PB_Init+0x48>
 8004170:	79fb      	ldrb	r3, [r7, #7]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d102      	bne.n	800417c <BSP_PB_Init+0x48>
 8004176:	2008      	movs	r0, #8
 8004178:	f7ff ff54 	bl	8004024 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 800417c:	79bb      	ldrb	r3, [r7, #6]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d117      	bne.n	80041b2 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8004182:	79fb      	ldrb	r3, [r7, #7]
 8004184:	4a20      	ldr	r2, [pc, #128]	; (8004208 <BSP_PB_Init+0xd4>)
 8004186:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800418a:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 800418c:	2300      	movs	r3, #0
 800418e:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8004190:	2301      	movs	r3, #1
 8004192:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004194:	2302      	movs	r3, #2
 8004196:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8004198:	79fb      	ldrb	r3, [r7, #7]
 800419a:	4a1c      	ldr	r2, [pc, #112]	; (800420c <BSP_PB_Init+0xd8>)
 800419c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a0:	f107 020c 	add.w	r2, r7, #12
 80041a4:	4611      	mov	r1, r2
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 fd8c 	bl	8004cc4 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 80041ac:	2001      	movs	r0, #1
 80041ae:	f7ff fbba 	bl	8003926 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80041b2:	79bb      	ldrb	r3, [r7, #6]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d122      	bne.n	80041fe <BSP_PB_Init+0xca>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80041b8:	79fb      	ldrb	r3, [r7, #7]
 80041ba:	4a13      	ldr	r2, [pc, #76]	; (8004208 <BSP_PB_Init+0xd4>)
 80041bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041c0:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80041c2:	2301      	movs	r3, #1
 80041c4:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 80041c6:	4b12      	ldr	r3, [pc, #72]	; (8004210 <BSP_PB_Init+0xdc>)
 80041c8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	4a0f      	ldr	r2, [pc, #60]	; (800420c <BSP_PB_Init+0xd8>)
 80041ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041d2:	f107 020c 	add.w	r2, r7, #12
 80041d6:	4611      	mov	r1, r2
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fd73 	bl	8004cc4 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	4a0c      	ldr	r2, [pc, #48]	; (8004214 <BSP_PB_Init+0xe0>)
 80041e2:	5cd3      	ldrb	r3, [r2, r3]
 80041e4:	b25b      	sxtb	r3, r3
 80041e6:	2200      	movs	r2, #0
 80041e8:	210f      	movs	r1, #15
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 fa04 	bl	80045f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80041f0:	79fb      	ldrb	r3, [r7, #7]
 80041f2:	4a08      	ldr	r2, [pc, #32]	; (8004214 <BSP_PB_Init+0xe0>)
 80041f4:	5cd3      	ldrb	r3, [r2, r3]
 80041f6:	b25b      	sxtb	r3, r3
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 fa17 	bl	800462c <HAL_NVIC_EnableIRQ>
  }
}
 80041fe:	bf00      	nop
 8004200:	3720      	adds	r7, #32
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	08011ebc 	.word	0x08011ebc
 800420c:	20000020 	.word	0x20000020
 8004210:	10210000 	.word	0x10210000
 8004214:	08011ec4 	.word	0x08011ec4

08004218 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800421c:	4b26      	ldr	r3, [pc, #152]	; (80042b8 <SystemInit+0xa0>)
 800421e:	2200      	movs	r2, #0
 8004220:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8004222:	4b25      	ldr	r3, [pc, #148]	; (80042b8 <SystemInit+0xa0>)
 8004224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004228:	4a23      	ldr	r2, [pc, #140]	; (80042b8 <SystemInit+0xa0>)
 800422a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800422e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800423c:	f043 0301 	orr.w	r3, r3, #1
 8004240:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8004242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004246:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800424a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800424c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004256:	4b19      	ldr	r3, [pc, #100]	; (80042bc <SystemInit+0xa4>)
 8004258:	4013      	ands	r3, r2
 800425a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800425c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004260:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004264:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004268:	f023 0305 	bic.w	r3, r3, #5
 800426c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004274:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004278:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800427c:	f023 0301 	bic.w	r3, r3, #1
 8004280:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004288:	4a0d      	ldr	r2, [pc, #52]	; (80042c0 <SystemInit+0xa8>)
 800428a:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800428c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004290:	4a0b      	ldr	r2, [pc, #44]	; (80042c0 <SystemInit+0xa8>)
 8004292:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800429e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80042a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a8:	2200      	movs	r2, #0
 80042aa:	619a      	str	r2, [r3, #24]
}
 80042ac:	bf00      	nop
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	e000ed00 	.word	0xe000ed00
 80042bc:	faf6fefb 	.word	0xfaf6fefb
 80042c0:	22041000 	.word	0x22041000

080042c4 <LL_DBGMCU_EnableDBGSleepMode>:
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	4a04      	ldr	r2, [pc, #16]	; (80042e0 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	6053      	str	r3, [r2, #4]
}
 80042d4:	bf00      	nop
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	e0042000 	.word	0xe0042000

080042e4 <LL_DBGMCU_EnableDBGStopMode>:
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80042e8:	4b05      	ldr	r3, [pc, #20]	; (8004300 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	4a04      	ldr	r2, [pc, #16]	; (8004300 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80042ee:	f043 0302 	orr.w	r3, r3, #2
 80042f2:	6053      	str	r3, [r2, #4]
}
 80042f4:	bf00      	nop
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	e0042000 	.word	0xe0042000

08004304 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800430e:	4b0c      	ldr	r3, [pc, #48]	; (8004340 <HAL_Init+0x3c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a0b      	ldr	r2, [pc, #44]	; (8004340 <HAL_Init+0x3c>)
 8004314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004318:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800431a:	2003      	movs	r0, #3
 800431c:	f000 f961 	bl	80045e2 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004320:	2000      	movs	r0, #0
 8004322:	f7ff fd3d 	bl	8003da0 <HAL_InitTick>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	71fb      	strb	r3, [r7, #7]
 8004330:	e001      	b.n	8004336 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004332:	f7ff fbe4 	bl	8003afe <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004336:	79fb      	ldrb	r3, [r7, #7]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	58004000 	.word	0x58004000

08004344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004348:	4b06      	ldr	r3, [pc, #24]	; (8004364 <HAL_IncTick+0x20>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	461a      	mov	r2, r3
 800434e:	4b06      	ldr	r3, [pc, #24]	; (8004368 <HAL_IncTick+0x24>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4413      	add	r3, r2
 8004354:	4a04      	ldr	r2, [pc, #16]	; (8004368 <HAL_IncTick+0x24>)
 8004356:	6013      	str	r3, [r2, #0]
}
 8004358:	bf00      	nop
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	20000034 	.word	0x20000034
 8004368:	20003b54 	.word	0x20003b54

0800436c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  return uwTick;
 8004370:	4b03      	ldr	r3, [pc, #12]	; (8004380 <HAL_GetTick+0x14>)
 8004372:	681b      	ldr	r3, [r3, #0]
}
 8004374:	4618      	mov	r0, r3
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	20003b54 	.word	0x20003b54

08004384 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004388:	4b03      	ldr	r3, [pc, #12]	; (8004398 <HAL_GetTickPrio+0x14>)
 800438a:	681b      	ldr	r3, [r3, #0]
}
 800438c:	4618      	mov	r0, r3
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	20000030 	.word	0x20000030

0800439c <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80043a0:	4b03      	ldr	r3, [pc, #12]	; (80043b0 <HAL_GetTickFreq+0x14>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	20000034 	.word	0x20000034

080043b4 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80043b8:	f7ff ff84 	bl	80042c4 <LL_DBGMCU_EnableDBGSleepMode>
}
 80043bc:	bf00      	nop
 80043be:	bd80      	pop	{r7, pc}

080043c0 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80043c4:	f7ff ff8e 	bl	80042e4 <LL_DBGMCU_EnableDBGStopMode>
}
 80043c8:	bf00      	nop
 80043ca:	bd80      	pop	{r7, pc}

080043cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043dc:	4b0c      	ldr	r3, [pc, #48]	; (8004410 <__NVIC_SetPriorityGrouping+0x44>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043e8:	4013      	ands	r3, r2
 80043ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043fe:	4a04      	ldr	r2, [pc, #16]	; (8004410 <__NVIC_SetPriorityGrouping+0x44>)
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	60d3      	str	r3, [r2, #12]
}
 8004404:	bf00      	nop
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	e000ed00 	.word	0xe000ed00

08004414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004418:	4b04      	ldr	r3, [pc, #16]	; (800442c <__NVIC_GetPriorityGrouping+0x18>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	0a1b      	lsrs	r3, r3, #8
 800441e:	f003 0307 	and.w	r3, r3, #7
}
 8004422:	4618      	mov	r0, r3
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	e000ed00 	.word	0xe000ed00

08004430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	4603      	mov	r3, r0
 8004438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800443a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800443e:	2b00      	cmp	r3, #0
 8004440:	db0b      	blt.n	800445a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004442:	79fb      	ldrb	r3, [r7, #7]
 8004444:	f003 021f 	and.w	r2, r3, #31
 8004448:	4907      	ldr	r1, [pc, #28]	; (8004468 <__NVIC_EnableIRQ+0x38>)
 800444a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	2001      	movs	r0, #1
 8004452:	fa00 f202 	lsl.w	r2, r0, r2
 8004456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	e000e100 	.word	0xe000e100

0800446c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	4603      	mov	r3, r0
 8004474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447a:	2b00      	cmp	r3, #0
 800447c:	db10      	blt.n	80044a0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	f003 021f 	and.w	r2, r3, #31
 8004484:	4909      	ldr	r1, [pc, #36]	; (80044ac <__NVIC_DisableIRQ+0x40>)
 8004486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448a:	095b      	lsrs	r3, r3, #5
 800448c:	2001      	movs	r0, #1
 800448e:	fa00 f202 	lsl.w	r2, r0, r2
 8004492:	3320      	adds	r3, #32
 8004494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004498:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800449c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	e000e100 	.word	0xe000e100

080044b0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	4603      	mov	r3, r0
 80044b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	db0c      	blt.n	80044dc <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044c2:	79fb      	ldrb	r3, [r7, #7]
 80044c4:	f003 021f 	and.w	r2, r3, #31
 80044c8:	4907      	ldr	r1, [pc, #28]	; (80044e8 <__NVIC_SetPendingIRQ+0x38>)
 80044ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ce:	095b      	lsrs	r3, r3, #5
 80044d0:	2001      	movs	r0, #1
 80044d2:	fa00 f202 	lsl.w	r2, r0, r2
 80044d6:	3340      	adds	r3, #64	; 0x40
 80044d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	e000e100 	.word	0xe000e100

080044ec <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	db0c      	blt.n	8004518 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044fe:	79fb      	ldrb	r3, [r7, #7]
 8004500:	f003 021f 	and.w	r2, r3, #31
 8004504:	4907      	ldr	r1, [pc, #28]	; (8004524 <__NVIC_ClearPendingIRQ+0x38>)
 8004506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	2001      	movs	r0, #1
 800450e:	fa00 f202 	lsl.w	r2, r0, r2
 8004512:	3360      	adds	r3, #96	; 0x60
 8004514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	e000e100 	.word	0xe000e100

08004528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	6039      	str	r1, [r7, #0]
 8004532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004538:	2b00      	cmp	r3, #0
 800453a:	db0a      	blt.n	8004552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	b2da      	uxtb	r2, r3
 8004540:	490c      	ldr	r1, [pc, #48]	; (8004574 <__NVIC_SetPriority+0x4c>)
 8004542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004546:	0112      	lsls	r2, r2, #4
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	440b      	add	r3, r1
 800454c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004550:	e00a      	b.n	8004568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	b2da      	uxtb	r2, r3
 8004556:	4908      	ldr	r1, [pc, #32]	; (8004578 <__NVIC_SetPriority+0x50>)
 8004558:	79fb      	ldrb	r3, [r7, #7]
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	3b04      	subs	r3, #4
 8004560:	0112      	lsls	r2, r2, #4
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	440b      	add	r3, r1
 8004566:	761a      	strb	r2, [r3, #24]
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	e000e100 	.word	0xe000e100
 8004578:	e000ed00 	.word	0xe000ed00

0800457c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800457c:	b480      	push	{r7}
 800457e:	b089      	sub	sp, #36	; 0x24
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f1c3 0307 	rsb	r3, r3, #7
 8004596:	2b04      	cmp	r3, #4
 8004598:	bf28      	it	cs
 800459a:	2304      	movcs	r3, #4
 800459c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	3304      	adds	r3, #4
 80045a2:	2b06      	cmp	r3, #6
 80045a4:	d902      	bls.n	80045ac <NVIC_EncodePriority+0x30>
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	3b03      	subs	r3, #3
 80045aa:	e000      	b.n	80045ae <NVIC_EncodePriority+0x32>
 80045ac:	2300      	movs	r3, #0
 80045ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	43da      	mvns	r2, r3
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	401a      	ands	r2, r3
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	fa01 f303 	lsl.w	r3, r1, r3
 80045ce:	43d9      	mvns	r1, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d4:	4313      	orrs	r3, r2
         );
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3724      	adds	r7, #36	; 0x24
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b082      	sub	sp, #8
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7ff feee 	bl	80043cc <__NVIC_SetPriorityGrouping>
}
 80045f0:	bf00      	nop
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	4603      	mov	r3, r0
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
 8004604:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004606:	f7ff ff05 	bl	8004414 <__NVIC_GetPriorityGrouping>
 800460a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	68b9      	ldr	r1, [r7, #8]
 8004610:	6978      	ldr	r0, [r7, #20]
 8004612:	f7ff ffb3 	bl	800457c <NVIC_EncodePriority>
 8004616:	4602      	mov	r2, r0
 8004618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800461c:	4611      	mov	r1, r2
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff ff82 	bl	8004528 <__NVIC_SetPriority>
}
 8004624:	bf00      	nop
 8004626:	3718      	adds	r7, #24
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	4603      	mov	r3, r0
 8004634:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff fef8 	bl	8004430 <__NVIC_EnableIRQ>
}
 8004640:	bf00      	nop
 8004642:	3708      	adds	r7, #8
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	4603      	mov	r3, r0
 8004650:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff ff08 	bl	800446c <__NVIC_DisableIRQ>
}
 800465c:	bf00      	nop
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	4603      	mov	r3, r0
 800466c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800466e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff ff1c 	bl	80044b0 <__NVIC_SetPendingIRQ>
}
 8004678:	bf00      	nop
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	4603      	mov	r3, r0
 8004688:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800468a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff ff2c 	bl	80044ec <__NVIC_ClearPendingIRQ>
}
 8004694:	bf00      	nop
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e08e      	b.n	80047cc <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	461a      	mov	r2, r3
 80046b4:	4b47      	ldr	r3, [pc, #284]	; (80047d4 <HAL_DMA_Init+0x138>)
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d80f      	bhi.n	80046da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	4b45      	ldr	r3, [pc, #276]	; (80047d8 <HAL_DMA_Init+0x13c>)
 80046c2:	4413      	add	r3, r2
 80046c4:	4a45      	ldr	r2, [pc, #276]	; (80047dc <HAL_DMA_Init+0x140>)
 80046c6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ca:	091b      	lsrs	r3, r3, #4
 80046cc:	009a      	lsls	r2, r3, #2
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a42      	ldr	r2, [pc, #264]	; (80047e0 <HAL_DMA_Init+0x144>)
 80046d6:	641a      	str	r2, [r3, #64]	; 0x40
 80046d8:	e00e      	b.n	80046f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	461a      	mov	r2, r3
 80046e0:	4b40      	ldr	r3, [pc, #256]	; (80047e4 <HAL_DMA_Init+0x148>)
 80046e2:	4413      	add	r3, r2
 80046e4:	4a3d      	ldr	r2, [pc, #244]	; (80047dc <HAL_DMA_Init+0x140>)
 80046e6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ea:	091b      	lsrs	r3, r3, #4
 80046ec:	009a      	lsls	r2, r3, #2
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a3c      	ldr	r2, [pc, #240]	; (80047e8 <HAL_DMA_Init+0x14c>)
 80046f6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800470e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004712:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800471c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004728:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004734:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 fa16 	bl	8004b7c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004758:	d102      	bne.n	8004760 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004768:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800476c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004776:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d010      	beq.n	80047a2 <HAL_DMA_Init+0x106>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b04      	cmp	r3, #4
 8004786:	d80c      	bhi.n	80047a2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 fa35 	bl	8004bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004792:	2200      	movs	r2, #0
 8004794:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800479e:	605a      	str	r2, [r3, #4]
 80047a0:	e008      	b.n	80047b4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40020407 	.word	0x40020407
 80047d8:	bffdfff8 	.word	0xbffdfff8
 80047dc:	cccccccd 	.word	0xcccccccd
 80047e0:	40020000 	.word	0x40020000
 80047e4:	bffdfbf8 	.word	0xbffdfbf8
 80047e8:	40020400 	.word	0x40020400

080047ec <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
 80047f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004804:	2b01      	cmp	r3, #1
 8004806:	d101      	bne.n	800480c <HAL_DMA_Start_IT+0x20>
 8004808:	2302      	movs	r3, #2
 800480a:	e066      	b.n	80048da <HAL_DMA_Start_IT+0xee>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b01      	cmp	r3, #1
 800481e:	d155      	bne.n	80048cc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 0201 	bic.w	r2, r2, #1
 800483c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	68b9      	ldr	r1, [r7, #8]
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 f95a 	bl	8004afe <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484e:	2b00      	cmp	r3, #0
 8004850:	d008      	beq.n	8004864 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f042 020e 	orr.w	r2, r2, #14
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	e00f      	b.n	8004884 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0204 	bic.w	r2, r2, #4
 8004872:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 020a 	orr.w	r2, r2, #10
 8004882:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d007      	beq.n	80048a2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800489c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048a0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d007      	beq.n	80048ba <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048b8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f042 0201 	orr.w	r2, r2, #1
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	e005      	b.n	80048d8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80048d4:	2302      	movs	r3, #2
 80048d6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80048d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b084      	sub	sp, #16
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d005      	beq.n	8004906 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2204      	movs	r2, #4
 80048fe:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	73fb      	strb	r3, [r7, #15]
 8004904:	e047      	b.n	8004996 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 020e 	bic.w	r2, r2, #14
 8004914:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0201 	bic.w	r2, r2, #1
 8004924:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004930:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004934:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493a:	f003 021c 	and.w	r2, r3, #28
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	2101      	movs	r1, #1
 8004944:	fa01 f202 	lsl.w	r2, r1, r2
 8004948:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004952:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00c      	beq.n	8004976 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004966:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800496a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004974:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	4798      	blx	r3
    }
  }
  return status;
 8004996:	7bfb      	ldrb	r3, [r7, #15]
}
 8004998:	4618      	mov	r0, r3
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049bc:	f003 031c 	and.w	r3, r3, #28
 80049c0:	2204      	movs	r2, #4
 80049c2:	409a      	lsls	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4013      	ands	r3, r2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d026      	beq.n	8004a1a <HAL_DMA_IRQHandler+0x7a>
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f003 0304 	and.w	r3, r3, #4
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d021      	beq.n	8004a1a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0320 	and.w	r3, r3, #32
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d107      	bne.n	80049f4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0204 	bic.w	r2, r2, #4
 80049f2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f8:	f003 021c 	and.w	r2, r3, #28
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a00:	2104      	movs	r1, #4
 8004a02:	fa01 f202 	lsl.w	r2, r1, r2
 8004a06:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d071      	beq.n	8004af4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004a18:	e06c      	b.n	8004af4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1e:	f003 031c 	and.w	r3, r3, #28
 8004a22:	2202      	movs	r2, #2
 8004a24:	409a      	lsls	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d02e      	beq.n	8004a8c <HAL_DMA_IRQHandler+0xec>
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d029      	beq.n	8004a8c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0320 	and.w	r3, r3, #32
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10b      	bne.n	8004a5e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 020a 	bic.w	r2, r2, #10
 8004a54:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a62:	f003 021c 	and.w	r2, r3, #28
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	2102      	movs	r1, #2
 8004a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a70:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d038      	beq.n	8004af4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004a8a:	e033      	b.n	8004af4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a90:	f003 031c 	and.w	r3, r3, #28
 8004a94:	2208      	movs	r2, #8
 8004a96:	409a      	lsls	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d02a      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x156>
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d025      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 020e 	bic.w	r2, r2, #14
 8004ab8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abe:	f003 021c 	and.w	r2, r3, #28
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8004acc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d004      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004af4:	bf00      	nop
 8004af6:	bf00      	nop
}
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b085      	sub	sp, #20
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	607a      	str	r2, [r7, #4]
 8004b0a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b14:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d004      	beq.n	8004b28 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b26:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2c:	f003 021c 	and.w	r2, r3, #28
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b34:	2101      	movs	r1, #1
 8004b36:	fa01 f202 	lsl.w	r2, r1, r2
 8004b3a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	2b10      	cmp	r3, #16
 8004b4a:	d108      	bne.n	8004b5e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004b5c:	e007      	b.n	8004b6e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	60da      	str	r2, [r3, #12]
}
 8004b6e:	bf00      	nop
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
	...

08004b7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	4b17      	ldr	r3, [pc, #92]	; (8004be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d80a      	bhi.n	8004ba6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b94:	089b      	lsrs	r3, r3, #2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b9c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6493      	str	r3, [r2, #72]	; 0x48
 8004ba4:	e007      	b.n	8004bb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004baa:	089b      	lsrs	r3, r3, #2
 8004bac:	009a      	lsls	r2, r3, #2
 8004bae:	4b0f      	ldr	r3, [pc, #60]	; (8004bec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004bb0:	4413      	add	r3, r2
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	3b08      	subs	r3, #8
 8004bbe:	4a0c      	ldr	r2, [pc, #48]	; (8004bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc4:	091b      	lsrs	r3, r3, #4
 8004bc6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a0a      	ldr	r2, [pc, #40]	; (8004bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004bcc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f003 031f 	and.w	r3, r3, #31
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	409a      	lsls	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004bdc:	bf00      	nop
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	40020407 	.word	0x40020407
 8004bec:	4002081c 	.word	0x4002081c
 8004bf0:	cccccccd 	.word	0xcccccccd
 8004bf4:	40020880 	.word	0x40020880

08004bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c08:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004c0e:	4413      	add	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	461a      	mov	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a09      	ldr	r2, [pc, #36]	; (8004c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004c1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	3b01      	subs	r3, #1
 8004c22:	f003 0303 	and.w	r3, r3, #3
 8004c26:	2201      	movs	r2, #1
 8004c28:	409a      	lsls	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004c2e:	bf00      	nop
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	1000823f 	.word	0x1000823f
 8004c40:	40020940 	.word	0x40020940

08004c44 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d12b      	bne.n	8004cb2 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d101      	bne.n	8004c68 <HAL_DMAEx_ConfigMuxSync+0x24>
 8004c64:	2302      	movs	r3, #2
 8004c66:	e025      	b.n	8004cb4 <HAL_DMAEx_ConfigMuxSync+0x70>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	4b12      	ldr	r3, [pc, #72]	; (8004cc0 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	6811      	ldr	r1, [r2, #0]
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	68d2      	ldr	r2, [r2, #12]
 8004c82:	3a01      	subs	r2, #1
 8004c84:	04d2      	lsls	r2, r2, #19
 8004c86:	4311      	orrs	r1, r2
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	6852      	ldr	r2, [r2, #4]
 8004c8c:	4311      	orrs	r1, r2
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	7a12      	ldrb	r2, [r2, #8]
 8004c92:	0412      	lsls	r2, r2, #16
 8004c94:	4311      	orrs	r1, r2
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	7a52      	ldrb	r2, [r2, #9]
 8004c9a:	0252      	lsls	r2, r2, #9
 8004c9c:	4311      	orrs	r1, r2
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004ca2:	430b      	orrs	r3, r1
 8004ca4:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	e000      	b.n	8004cb4 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
  }
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	e000fdff 	.word	0xe000fdff

08004cc4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b087      	sub	sp, #28
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cd2:	e14c      	b.n	8004f6e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	2101      	movs	r1, #1
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 813e 	beq.w	8004f68 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d00b      	beq.n	8004d0c <HAL_GPIO_Init+0x48>
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d007      	beq.n	8004d0c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d00:	2b11      	cmp	r3, #17
 8004d02:	d003      	beq.n	8004d0c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2b12      	cmp	r3, #18
 8004d0a:	d130      	bne.n	8004d6e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	2203      	movs	r2, #3
 8004d18:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1c:	43db      	mvns	r3, r3
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	4013      	ands	r3, r2
 8004d22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d42:	2201      	movs	r2, #1
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	43db      	mvns	r3, r3
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	091b      	lsrs	r3, r3, #4
 8004d58:	f003 0201 	and.w	r2, r3, #1
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	2203      	movs	r2, #3
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	43db      	mvns	r3, r3
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4013      	ands	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	689a      	ldr	r2, [r3, #8]
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d003      	beq.n	8004dae <HAL_GPIO_Init+0xea>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b12      	cmp	r3, #18
 8004dac:	d123      	bne.n	8004df6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	08da      	lsrs	r2, r3, #3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3208      	adds	r2, #8
 8004db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	220f      	movs	r2, #15
 8004dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dca:	43db      	mvns	r3, r3
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	4013      	ands	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	691a      	ldr	r2, [r3, #16]
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	fa02 f303 	lsl.w	r3, r2, r3
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	08da      	lsrs	r2, r3, #3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3208      	adds	r2, #8
 8004df0:	6939      	ldr	r1, [r7, #16]
 8004df2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	2203      	movs	r2, #3
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	43db      	mvns	r3, r3
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f003 0203 	and.w	r2, r3, #3
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 8098 	beq.w	8004f68 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004e38:	4a54      	ldr	r2, [pc, #336]	; (8004f8c <HAL_GPIO_Init+0x2c8>)
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	089b      	lsrs	r3, r3, #2
 8004e3e:	3302      	adds	r3, #2
 8004e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f003 0303 	and.w	r3, r3, #3
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	220f      	movs	r2, #15
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	43db      	mvns	r3, r3
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e62:	d019      	beq.n	8004e98 <HAL_GPIO_Init+0x1d4>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a4a      	ldr	r2, [pc, #296]	; (8004f90 <HAL_GPIO_Init+0x2cc>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d013      	beq.n	8004e94 <HAL_GPIO_Init+0x1d0>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a49      	ldr	r2, [pc, #292]	; (8004f94 <HAL_GPIO_Init+0x2d0>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d00d      	beq.n	8004e90 <HAL_GPIO_Init+0x1cc>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a48      	ldr	r2, [pc, #288]	; (8004f98 <HAL_GPIO_Init+0x2d4>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d007      	beq.n	8004e8c <HAL_GPIO_Init+0x1c8>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a47      	ldr	r2, [pc, #284]	; (8004f9c <HAL_GPIO_Init+0x2d8>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d101      	bne.n	8004e88 <HAL_GPIO_Init+0x1c4>
 8004e84:	2304      	movs	r3, #4
 8004e86:	e008      	b.n	8004e9a <HAL_GPIO_Init+0x1d6>
 8004e88:	2307      	movs	r3, #7
 8004e8a:	e006      	b.n	8004e9a <HAL_GPIO_Init+0x1d6>
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e004      	b.n	8004e9a <HAL_GPIO_Init+0x1d6>
 8004e90:	2302      	movs	r3, #2
 8004e92:	e002      	b.n	8004e9a <HAL_GPIO_Init+0x1d6>
 8004e94:	2301      	movs	r3, #1
 8004e96:	e000      	b.n	8004e9a <HAL_GPIO_Init+0x1d6>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	f002 0203 	and.w	r2, r2, #3
 8004ea0:	0092      	lsls	r2, r2, #2
 8004ea2:	4093      	lsls	r3, r2
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004eaa:	4938      	ldr	r1, [pc, #224]	; (8004f8c <HAL_GPIO_Init+0x2c8>)
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	089b      	lsrs	r3, r3, #2
 8004eb0:	3302      	adds	r3, #2
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004eb8:	4b39      	ldr	r3, [pc, #228]	; (8004fa0 <HAL_GPIO_Init+0x2dc>)
 8004eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	43db      	mvns	r3, r3
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ede:	4a30      	ldr	r2, [pc, #192]	; (8004fa0 <HAL_GPIO_Init+0x2dc>)
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004ee6:	4b2e      	ldr	r3, [pc, #184]	; (8004fa0 <HAL_GPIO_Init+0x2dc>)
 8004ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	43db      	mvns	r3, r3
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f0c:	4a24      	ldr	r2, [pc, #144]	; (8004fa0 <HAL_GPIO_Init+0x2dc>)
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f14:	4b22      	ldr	r3, [pc, #136]	; (8004fa0 <HAL_GPIO_Init+0x2dc>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	43db      	mvns	r3, r3
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	4013      	ands	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f38:	4a19      	ldr	r2, [pc, #100]	; (8004fa0 <HAL_GPIO_Init+0x2dc>)
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004f3e:	4b18      	ldr	r3, [pc, #96]	; (8004fa0 <HAL_GPIO_Init+0x2dc>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	43db      	mvns	r3, r3
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f62:	4a0f      	ldr	r2, [pc, #60]	; (8004fa0 <HAL_GPIO_Init+0x2dc>)
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	fa22 f303 	lsr.w	r3, r2, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f47f aeab 	bne.w	8004cd4 <HAL_GPIO_Init+0x10>
  }
}
 8004f7e:	bf00      	nop
 8004f80:	371c      	adds	r7, #28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40010000 	.word	0x40010000
 8004f90:	48000400 	.word	0x48000400
 8004f94:	48000800 	.word	0x48000800
 8004f98:	48000c00 	.word	0x48000c00
 8004f9c:	48001000 	.word	0x48001000
 8004fa0:	58000800 	.word	0x58000800

08004fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	807b      	strh	r3, [r7, #2]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fb4:	787b      	ldrb	r3, [r7, #1]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004fba:	887a      	ldrh	r2, [r7, #2]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004fc0:	e002      	b.n	8004fc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004fc2:	887a      	ldrh	r2, [r7, #2]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	4603      	mov	r3, r0
 8004fdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004fde:	4b08      	ldr	r3, [pc, #32]	; (8005000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	88fb      	ldrh	r3, [r7, #6]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d006      	beq.n	8004ff8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004fea:	4a05      	ldr	r2, [pc, #20]	; (8005000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fec:	88fb      	ldrh	r3, [r7, #6]
 8004fee:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ff0:	88fb      	ldrh	r3, [r7, #6]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fd fa0c 	bl	8002410 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ff8:	bf00      	nop
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	58000800 	.word	0x58000800

08005004 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800500a:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <HAL_HSEM_IRQHandler+0x30>)
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005010:	4b08      	ldr	r3, [pc, #32]	; (8005034 <HAL_HSEM_IRQHandler+0x30>)
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	43db      	mvns	r3, r3
 8005018:	4906      	ldr	r1, [pc, #24]	; (8005034 <HAL_HSEM_IRQHandler+0x30>)
 800501a:	4013      	ands	r3, r2
 800501c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800501e:	4a05      	ldr	r2, [pc, #20]	; (8005034 <HAL_HSEM_IRQHandler+0x30>)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f807 	bl	8005038 <HAL_HSEM_FreeCallback>
}
 800502a:	bf00      	nop
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	58001500 	.word	0x58001500

08005038 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005050:	4b05      	ldr	r3, [pc, #20]	; (8005068 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a04      	ldr	r2, [pc, #16]	; (8005068 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800505a:	6013      	str	r3, [r2, #0]
}
 800505c:	bf00      	nop
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	58000400 	.word	0x58000400

0800506c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005070:	4b04      	ldr	r3, [pc, #16]	; (8005084 <HAL_PWREx_GetVoltageRange+0x18>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005078:	4618      	mov	r0, r3
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	58000400 	.word	0x58000400

08005088 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800508c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005096:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800509a:	d101      	bne.n	80050a0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800509c:	2301      	movs	r3, #1
 800509e:	e000      	b.n	80050a2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <LL_RCC_HSE_Enable>:
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80050b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050be:	6013      	str	r3, [r2, #0]
}
 80050c0:	bf00      	nop
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <LL_RCC_HSE_Disable>:
{
 80050ca:	b480      	push	{r7}
 80050cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80050ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050dc:	6013      	str	r3, [r2, #0]
}
 80050de:	bf00      	nop
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <LL_RCC_HSE_IsReady>:
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80050ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050fa:	d101      	bne.n	8005100 <LL_RCC_HSE_IsReady+0x18>
 80050fc:	2301      	movs	r3, #1
 80050fe:	e000      	b.n	8005102 <LL_RCC_HSE_IsReady+0x1a>
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <LL_RCC_HSI_Enable>:
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800511a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800511e:	6013      	str	r3, [r2, #0]
}
 8005120:	bf00      	nop
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <LL_RCC_HSI_Disable>:
{
 800512a:	b480      	push	{r7}
 800512c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800512e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800513c:	6013      	str	r3, [r2, #0]
}
 800513e:	bf00      	nop
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <LL_RCC_HSI_IsReady>:
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800514c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800515a:	d101      	bne.n	8005160 <LL_RCC_HSI_IsReady+0x18>
 800515c:	2301      	movs	r3, #1
 800515e:	e000      	b.n	8005162 <LL_RCC_HSI_IsReady+0x1a>
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <LL_RCC_HSI_SetCalibTrimming>:
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	061b      	lsls	r3, r3, #24
 8005182:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005186:	4313      	orrs	r3, r2
 8005188:	604b      	str	r3, [r1, #4]
}
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <LL_RCC_HSI48_Enable>:
{
 8005196:	b480      	push	{r7}
 8005198:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800519a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800519e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051a6:	f043 0301 	orr.w	r3, r3, #1
 80051aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80051ae:	bf00      	nop
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <LL_RCC_HSI48_Disable>:
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80051bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051c8:	f023 0301 	bic.w	r3, r3, #1
 80051cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80051d0:	bf00      	nop
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <LL_RCC_HSI48_IsReady>:
{
 80051da:	b480      	push	{r7}
 80051dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80051de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d101      	bne.n	80051f2 <LL_RCC_HSI48_IsReady+0x18>
 80051ee:	2301      	movs	r3, #1
 80051f0:	e000      	b.n	80051f4 <LL_RCC_HSI48_IsReady+0x1a>
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <LL_RCC_LSE_Enable>:
{
 80051fe:	b480      	push	{r7}
 8005200:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800520e:	f043 0301 	orr.w	r3, r3, #1
 8005212:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005216:	bf00      	nop
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <LL_RCC_LSE_Disable>:
{
 8005220:	b480      	push	{r7}
 8005222:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005230:	f023 0301 	bic.w	r3, r3, #1
 8005234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005238:	bf00      	nop
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <LL_RCC_LSE_EnableBypass>:
{
 8005242:	b480      	push	{r7}
 8005244:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800524a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005252:	f043 0304 	orr.w	r3, r3, #4
 8005256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800525a:	bf00      	nop
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <LL_RCC_LSE_DisableBypass>:
{
 8005264:	b480      	push	{r7}
 8005266:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800526c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005270:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005274:	f023 0304 	bic.w	r3, r3, #4
 8005278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800527c:	bf00      	nop
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <LL_RCC_LSE_IsReady>:
{
 8005286:	b480      	push	{r7}
 8005288:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800528a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800528e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b02      	cmp	r3, #2
 8005298:	d101      	bne.n	800529e <LL_RCC_LSE_IsReady+0x18>
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <LL_RCC_LSE_IsReady+0x1a>
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <LL_RCC_LSI1_Enable>:
{
 80052aa:	b480      	push	{r7}
 80052ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80052ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052ba:	f043 0301 	orr.w	r3, r3, #1
 80052be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80052c2:	bf00      	nop
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <LL_RCC_LSI1_Disable>:
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80052d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052dc:	f023 0301 	bic.w	r3, r3, #1
 80052e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80052e4:	bf00      	nop
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <LL_RCC_LSI1_IsReady>:
{
 80052ee:	b480      	push	{r7}
 80052f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80052f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d101      	bne.n	8005306 <LL_RCC_LSI1_IsReady+0x18>
 8005302:	2301      	movs	r3, #1
 8005304:	e000      	b.n	8005308 <LL_RCC_LSI1_IsReady+0x1a>
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <LL_RCC_LSI2_Enable>:
{
 8005312:	b480      	push	{r7}
 8005314:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800531a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800531e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005322:	f043 0304 	orr.w	r3, r3, #4
 8005326:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800532a:	bf00      	nop
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <LL_RCC_LSI2_Disable>:
{
 8005334:	b480      	push	{r7}
 8005336:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800533c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005340:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005344:	f023 0304 	bic.w	r3, r3, #4
 8005348:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800534c:	bf00      	nop
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <LL_RCC_LSI2_IsReady>:
{
 8005356:	b480      	push	{r7}
 8005358:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800535a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800535e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b08      	cmp	r3, #8
 8005368:	d101      	bne.n	800536e <LL_RCC_LSI2_IsReady+0x18>
 800536a:	2301      	movs	r3, #1
 800536c:	e000      	b.n	8005370 <LL_RCC_LSI2_IsReady+0x1a>
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <LL_RCC_LSI2_SetTrimming>:
{
 800537a:	b480      	push	{r7}
 800537c:	b083      	sub	sp, #12
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800538a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	021b      	lsls	r3, r3, #8
 8005392:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005396:	4313      	orrs	r3, r2
 8005398:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <LL_RCC_MSI_Enable>:
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80053ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053b6:	f043 0301 	orr.w	r3, r3, #1
 80053ba:	6013      	str	r3, [r2, #0]
}
 80053bc:	bf00      	nop
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <LL_RCC_MSI_Disable>:
{
 80053c6:	b480      	push	{r7}
 80053c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80053ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053d4:	f023 0301 	bic.w	r3, r3, #1
 80053d8:	6013      	str	r3, [r2, #0]
}
 80053da:	bf00      	nop
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <LL_RCC_MSI_IsReady>:
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80053e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d101      	bne.n	80053fa <LL_RCC_MSI_IsReady+0x16>
 80053f6:	2301      	movs	r3, #1
 80053f8:	e000      	b.n	80053fc <LL_RCC_MSI_IsReady+0x18>
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <LL_RCC_MSI_SetRange>:
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800540e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005418:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4313      	orrs	r3, r2
 8005420:	600b      	str	r3, [r1, #0]
}
 8005422:	bf00      	nop
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <LL_RCC_MSI_GetRange>:
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800543e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2bb0      	cmp	r3, #176	; 0xb0
 8005444:	d901      	bls.n	800544a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005446:	23b0      	movs	r3, #176	; 0xb0
 8005448:	607b      	str	r3, [r7, #4]
  return msiRange;
 800544a:	687b      	ldr	r3, [r7, #4]
}
 800544c:	4618      	mov	r0, r3
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	021b      	lsls	r3, r3, #8
 800546e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005472:	4313      	orrs	r3, r2
 8005474:	604b      	str	r3, [r1, #4]
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <LL_RCC_SetSysClkSource>:
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800548a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f023 0203 	bic.w	r2, r3, #3
 8005494:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4313      	orrs	r3, r2
 800549c:	608b      	str	r3, [r1, #8]
}
 800549e:	bf00      	nop
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <LL_RCC_GetSysClkSource>:
{
 80054aa:	b480      	push	{r7}
 80054ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80054ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f003 030c 	and.w	r3, r3, #12
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <LL_RCC_SetAHBPrescaler>:
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80054ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4313      	orrs	r3, r2
 80054dc:	608b      	str	r3, [r1, #8]
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <LL_C2_RCC_SetAHBPrescaler>:
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80054f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80054fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <LL_RCC_SetAHB4Prescaler>:
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800551e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005522:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005526:	f023 020f 	bic.w	r2, r3, #15
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	091b      	lsrs	r3, r3, #4
 800552e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005532:	4313      	orrs	r3, r2
 8005534:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <LL_RCC_SetAPB1Prescaler>:
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800554c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005556:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4313      	orrs	r3, r2
 800555e:	608b      	str	r3, [r1, #8]
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <LL_RCC_SetAPB2Prescaler>:
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800557e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4313      	orrs	r3, r2
 8005586:	608b      	str	r3, [r1, #8]
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <LL_RCC_GetAHBPrescaler>:
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <LL_C2_RCC_GetAHBPrescaler>:
{
 80055ac:	b480      	push	{r7}
 80055ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80055b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80055b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <LL_RCC_GetAHB4Prescaler>:
{
 80055c6:	b480      	push	{r7}
 80055c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80055ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80055d2:	011b      	lsls	r3, r3, #4
 80055d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <LL_RCC_GetAPB1Prescaler>:
{
 80055e2:	b480      	push	{r7}
 80055e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80055e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <LL_RCC_GetAPB2Prescaler>:
{
 80055fa:	b480      	push	{r7}
 80055fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80055fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005608:	4618      	mov	r0, r3
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <LL_RCC_PLL_Enable>:
{
 8005612:	b480      	push	{r7}
 8005614:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005620:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005624:	6013      	str	r3, [r2, #0]
}
 8005626:	bf00      	nop
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <LL_RCC_PLL_Disable>:
{
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800563e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005642:	6013      	str	r3, [r2, #0]
}
 8005644:	bf00      	nop
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <LL_RCC_PLL_IsReady>:
{
 800564e:	b480      	push	{r7}
 8005650:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800565c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005660:	d101      	bne.n	8005666 <LL_RCC_PLL_IsReady+0x18>
 8005662:	2301      	movs	r3, #1
 8005664:	e000      	b.n	8005668 <LL_RCC_PLL_IsReady+0x1a>
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <LL_RCC_PLL_GetN>:
{
 8005672:	b480      	push	{r7}
 8005674:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	0a1b      	lsrs	r3, r3, #8
 800567e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005682:	4618      	mov	r0, r3
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <LL_RCC_PLL_GetR>:
{
 800568c:	b480      	push	{r7}
 800568e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800569a:	4618      	mov	r0, r3
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <LL_RCC_PLL_GetDivider>:
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80056a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <LL_RCC_PLL_GetMainSource>:
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80056c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f003 0303 	and.w	r3, r3, #3
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <LL_RCC_IsActiveFlag_HPRE>:
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80056d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056e6:	d101      	bne.n	80056ec <LL_RCC_IsActiveFlag_HPRE+0x18>
 80056e8:	2301      	movs	r3, #1
 80056ea:	e000      	b.n	80056ee <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80056fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005700:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005708:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800570c:	d101      	bne.n	8005712 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800570e:	2301      	movs	r3, #1
 8005710:	e000      	b.n	8005714 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800571e:	b480      	push	{r7}
 8005720:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005726:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800572a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800572e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005732:	d101      	bne.n	8005738 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005734:	2301      	movs	r3, #1
 8005736:	e000      	b.n	800573a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005752:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005756:	d101      	bne.n	800575c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005758:	2301      	movs	r3, #1
 800575a:	e000      	b.n	800575e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8005768:	b480      	push	{r7}
 800576a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800576c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005776:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800577a:	d101      	bne.n	8005780 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800577c:	2301      	movs	r3, #1
 800577e:	e000      	b.n	8005782 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800578c:	b590      	push	{r4, r7, lr}
 800578e:	b08d      	sub	sp, #52	; 0x34
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e37e      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0320 	and.w	r3, r3, #32
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 8092 	beq.w	80058d0 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057ac:	f7ff fe7d 	bl	80054aa <LL_RCC_GetSysClkSource>
 80057b0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057b2:	f7ff ff83 	bl	80056bc <LL_RCC_PLL_GetMainSource>
 80057b6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80057b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d005      	beq.n	80057ca <HAL_RCC_OscConfig+0x3e>
 80057be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c0:	2b0c      	cmp	r3, #12
 80057c2:	d14c      	bne.n	800585e <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80057c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d149      	bne.n	800585e <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80057ca:	f7ff fe0b 	bl	80053e4 <LL_RCC_MSI_IsReady>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d005      	beq.n	80057e0 <HAL_RCC_OscConfig+0x54>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e35d      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80057e4:	f7ff fe23 	bl	800542e <LL_RCC_MSI_GetRange>
 80057e8:	4603      	mov	r3, r0
 80057ea:	429c      	cmp	r4, r3
 80057ec:	d914      	bls.n	8005818 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 fd72 	bl	80062dc <RCC_SetFlashLatencyFromMSIRange>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e34c      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005806:	4618      	mov	r0, r3
 8005808:	f7ff fdfd 	bl	8005406 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff fe21 	bl	8005458 <LL_RCC_MSI_SetCalibTrimming>
 8005816:	e013      	b.n	8005840 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	4618      	mov	r0, r3
 800581e:	f7ff fdf2 	bl	8005406 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	4618      	mov	r0, r3
 8005828:	f7ff fe16 	bl	8005458 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	4618      	mov	r0, r3
 8005832:	f000 fd53 	bl	80062dc <RCC_SetFlashLatencyFromMSIRange>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e32d      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005840:	f000 fcda 	bl	80061f8 <HAL_RCC_GetHCLKFreq>
 8005844:	4602      	mov	r2, r0
 8005846:	4bb3      	ldr	r3, [pc, #716]	; (8005b14 <HAL_RCC_OscConfig+0x388>)
 8005848:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800584a:	4bb3      	ldr	r3, [pc, #716]	; (8005b18 <HAL_RCC_OscConfig+0x38c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4618      	mov	r0, r3
 8005850:	f7fe faa6 	bl	8003da0 <HAL_InitTick>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d039      	beq.n	80058ce <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e31e      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d01e      	beq.n	80058a4 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005866:	f7ff fd9f 	bl	80053a8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800586a:	f7fe fd7f 	bl	800436c <HAL_GetTick>
 800586e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005870:	e008      	b.n	8005884 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005872:	f7fe fd7b 	bl	800436c <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d901      	bls.n	8005884 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e30b      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005884:	f7ff fdae 	bl	80053e4 <LL_RCC_MSI_IsReady>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0f1      	beq.n	8005872 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	4618      	mov	r0, r3
 8005894:	f7ff fdb7 	bl	8005406 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	4618      	mov	r0, r3
 800589e:	f7ff fddb 	bl	8005458 <LL_RCC_MSI_SetCalibTrimming>
 80058a2:	e015      	b.n	80058d0 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80058a4:	f7ff fd8f 	bl	80053c6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80058a8:	f7fe fd60 	bl	800436c <HAL_GetTick>
 80058ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80058ae:	e008      	b.n	80058c2 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80058b0:	f7fe fd5c 	bl	800436c <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e2ec      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 80058c2:	f7ff fd8f 	bl	80053e4 <LL_RCC_MSI_IsReady>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1f1      	bne.n	80058b0 <HAL_RCC_OscConfig+0x124>
 80058cc:	e000      	b.n	80058d0 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80058ce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d04e      	beq.n	800597a <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058dc:	f7ff fde5 	bl	80054aa <LL_RCC_GetSysClkSource>
 80058e0:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058e2:	f7ff feeb 	bl	80056bc <LL_RCC_PLL_GetMainSource>
 80058e6:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80058e8:	6a3b      	ldr	r3, [r7, #32]
 80058ea:	2b08      	cmp	r3, #8
 80058ec:	d005      	beq.n	80058fa <HAL_RCC_OscConfig+0x16e>
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	2b0c      	cmp	r3, #12
 80058f2:	d10d      	bne.n	8005910 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	2b03      	cmp	r3, #3
 80058f8:	d10a      	bne.n	8005910 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058fa:	f7ff fbf5 	bl	80050e8 <LL_RCC_HSE_IsReady>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d039      	beq.n	8005978 <HAL_RCC_OscConfig+0x1ec>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d135      	bne.n	8005978 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e2c5      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005918:	d102      	bne.n	8005920 <HAL_RCC_OscConfig+0x194>
 800591a:	f7ff fbc7 	bl	80050ac <LL_RCC_HSE_Enable>
 800591e:	e001      	b.n	8005924 <HAL_RCC_OscConfig+0x198>
 8005920:	f7ff fbd3 	bl	80050ca <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d012      	beq.n	8005952 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800592c:	f7fe fd1e 	bl	800436c <HAL_GetTick>
 8005930:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005932:	e008      	b.n	8005946 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005934:	f7fe fd1a 	bl	800436c <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b64      	cmp	r3, #100	; 0x64
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e2aa      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005946:	f7ff fbcf 	bl	80050e8 <LL_RCC_HSE_IsReady>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d0f1      	beq.n	8005934 <HAL_RCC_OscConfig+0x1a8>
 8005950:	e013      	b.n	800597a <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005952:	f7fe fd0b 	bl	800436c <HAL_GetTick>
 8005956:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005958:	e008      	b.n	800596c <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800595a:	f7fe fd07 	bl	800436c <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	2b64      	cmp	r3, #100	; 0x64
 8005966:	d901      	bls.n	800596c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e297      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 800596c:	f7ff fbbc 	bl	80050e8 <LL_RCC_HSE_IsReady>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1f1      	bne.n	800595a <HAL_RCC_OscConfig+0x1ce>
 8005976:	e000      	b.n	800597a <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d051      	beq.n	8005a2a <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005986:	f7ff fd90 	bl	80054aa <LL_RCC_GetSysClkSource>
 800598a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800598c:	f7ff fe96 	bl	80056bc <LL_RCC_PLL_GetMainSource>
 8005990:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	2b04      	cmp	r3, #4
 8005996:	d005      	beq.n	80059a4 <HAL_RCC_OscConfig+0x218>
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	2b0c      	cmp	r3, #12
 800599c:	d113      	bne.n	80059c6 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d110      	bne.n	80059c6 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059a4:	f7ff fbd0 	bl	8005148 <LL_RCC_HSI_IsReady>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d005      	beq.n	80059ba <HAL_RCC_OscConfig+0x22e>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e270      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	4618      	mov	r0, r3
 80059c0:	f7ff fbd4 	bl	800516c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059c4:	e031      	b.n	8005a2a <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d019      	beq.n	8005a02 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059ce:	f7ff fb9d 	bl	800510c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d2:	f7fe fccb 	bl	800436c <HAL_GetTick>
 80059d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80059d8:	e008      	b.n	80059ec <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059da:	f7fe fcc7 	bl	800436c <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e257      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80059ec:	f7ff fbac 	bl	8005148 <LL_RCC_HSI_IsReady>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0f1      	beq.n	80059da <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7ff fbb6 	bl	800516c <LL_RCC_HSI_SetCalibTrimming>
 8005a00:	e013      	b.n	8005a2a <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a02:	f7ff fb92 	bl	800512a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a06:	f7fe fcb1 	bl	800436c <HAL_GetTick>
 8005a0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005a0c:	e008      	b.n	8005a20 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a0e:	f7fe fcad 	bl	800436c <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d901      	bls.n	8005a20 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e23d      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005a20:	f7ff fb92 	bl	8005148 <LL_RCC_HSI_IsReady>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1f1      	bne.n	8005a0e <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0308 	and.w	r3, r3, #8
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d106      	bne.n	8005a44 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 80a3 	beq.w	8005b8a <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d076      	beq.n	8005b3a <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0310 	and.w	r3, r3, #16
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d046      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005a58:	f7ff fc49 	bl	80052ee <LL_RCC_LSI1_IsReady>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d113      	bne.n	8005a8a <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005a62:	f7ff fc22 	bl	80052aa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a66:	f7fe fc81 	bl	800436c <HAL_GetTick>
 8005a6a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005a6c:	e008      	b.n	8005a80 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005a6e:	f7fe fc7d 	bl	800436c <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d901      	bls.n	8005a80 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e20d      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005a80:	f7ff fc35 	bl	80052ee <LL_RCC_LSI1_IsReady>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d0f1      	beq.n	8005a6e <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005a8a:	f7ff fc42 	bl	8005312 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a8e:	f7fe fc6d 	bl	800436c <HAL_GetTick>
 8005a92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005a94:	e008      	b.n	8005aa8 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005a96:	f7fe fc69 	bl	800436c <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	2b03      	cmp	r3, #3
 8005aa2:	d901      	bls.n	8005aa8 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e1f9      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005aa8:	f7ff fc55 	bl	8005356 <LL_RCC_LSI2_IsReady>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d0f1      	beq.n	8005a96 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7ff fc5f 	bl	800537a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005abc:	f7ff fc06 	bl	80052cc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac0:	f7fe fc54 	bl	800436c <HAL_GetTick>
 8005ac4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005ac6:	e008      	b.n	8005ada <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005ac8:	f7fe fc50 	bl	800436c <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e1e0      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005ada:	f7ff fc08 	bl	80052ee <LL_RCC_LSI1_IsReady>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1f1      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x33c>
 8005ae4:	e051      	b.n	8005b8a <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005ae6:	f7ff fbe0 	bl	80052aa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aea:	f7fe fc3f 	bl	800436c <HAL_GetTick>
 8005aee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005af0:	e008      	b.n	8005b04 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005af2:	f7fe fc3b 	bl	800436c <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d901      	bls.n	8005b04 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e1cb      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005b04:	f7ff fbf3 	bl	80052ee <LL_RCC_LSI1_IsReady>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d0f1      	beq.n	8005af2 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005b0e:	f7ff fc11 	bl	8005334 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005b12:	e00c      	b.n	8005b2e <HAL_RCC_OscConfig+0x3a2>
 8005b14:	2000002c 	.word	0x2000002c
 8005b18:	20000030 	.word	0x20000030
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005b1c:	f7fe fc26 	bl	800436c <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b03      	cmp	r3, #3
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e1b6      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005b2e:	f7ff fc12 	bl	8005356 <LL_RCC_LSI2_IsReady>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1f1      	bne.n	8005b1c <HAL_RCC_OscConfig+0x390>
 8005b38:	e027      	b.n	8005b8a <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005b3a:	f7ff fbfb 	bl	8005334 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b3e:	f7fe fc15 	bl	800436c <HAL_GetTick>
 8005b42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005b44:	e008      	b.n	8005b58 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005b46:	f7fe fc11 	bl	800436c <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	2b03      	cmp	r3, #3
 8005b52:	d901      	bls.n	8005b58 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e1a1      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005b58:	f7ff fbfd 	bl	8005356 <LL_RCC_LSI2_IsReady>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1f1      	bne.n	8005b46 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005b62:	f7ff fbb3 	bl	80052cc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b66:	f7fe fc01 	bl	800436c <HAL_GetTick>
 8005b6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005b6c:	e008      	b.n	8005b80 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005b6e:	f7fe fbfd 	bl	800436c <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d901      	bls.n	8005b80 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e18d      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005b80:	f7ff fbb5 	bl	80052ee <LL_RCC_LSI1_IsReady>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1f1      	bne.n	8005b6e <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0304 	and.w	r3, r3, #4
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d05b      	beq.n	8005c4e <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b96:	4bb5      	ldr	r3, [pc, #724]	; (8005e6c <HAL_RCC_OscConfig+0x6e0>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d114      	bne.n	8005bcc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005ba2:	f7ff fa53 	bl	800504c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ba6:	f7fe fbe1 	bl	800436c <HAL_GetTick>
 8005baa:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bac:	e008      	b.n	8005bc0 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bae:	f7fe fbdd 	bl	800436c <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d901      	bls.n	8005bc0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e16d      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bc0:	4baa      	ldr	r3, [pc, #680]	; (8005e6c <HAL_RCC_OscConfig+0x6e0>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d0f0      	beq.n	8005bae <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d102      	bne.n	8005bda <HAL_RCC_OscConfig+0x44e>
 8005bd4:	f7ff fb13 	bl	80051fe <LL_RCC_LSE_Enable>
 8005bd8:	e00c      	b.n	8005bf4 <HAL_RCC_OscConfig+0x468>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	2b05      	cmp	r3, #5
 8005be0:	d104      	bne.n	8005bec <HAL_RCC_OscConfig+0x460>
 8005be2:	f7ff fb2e 	bl	8005242 <LL_RCC_LSE_EnableBypass>
 8005be6:	f7ff fb0a 	bl	80051fe <LL_RCC_LSE_Enable>
 8005bea:	e003      	b.n	8005bf4 <HAL_RCC_OscConfig+0x468>
 8005bec:	f7ff fb18 	bl	8005220 <LL_RCC_LSE_Disable>
 8005bf0:	f7ff fb38 	bl	8005264 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d014      	beq.n	8005c26 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bfc:	f7fe fbb6 	bl	800436c <HAL_GetTick>
 8005c00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005c02:	e00a      	b.n	8005c1a <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c04:	f7fe fbb2 	bl	800436c <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e140      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005c1a:	f7ff fb34 	bl	8005286 <LL_RCC_LSE_IsReady>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d0ef      	beq.n	8005c04 <HAL_RCC_OscConfig+0x478>
 8005c24:	e013      	b.n	8005c4e <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c26:	f7fe fba1 	bl	800436c <HAL_GetTick>
 8005c2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005c2c:	e00a      	b.n	8005c44 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c2e:	f7fe fb9d 	bl	800436c <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e12b      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005c44:	f7ff fb1f 	bl	8005286 <LL_RCC_LSE_IsReady>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1ef      	bne.n	8005c2e <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d02c      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d014      	beq.n	8005c8c <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c62:	f7ff fa98 	bl	8005196 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c66:	f7fe fb81 	bl	800436c <HAL_GetTick>
 8005c6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005c6c:	e008      	b.n	8005c80 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c6e:	f7fe fb7d 	bl	800436c <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d901      	bls.n	8005c80 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e10d      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005c80:	f7ff faab 	bl	80051da <LL_RCC_HSI48_IsReady>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0f1      	beq.n	8005c6e <HAL_RCC_OscConfig+0x4e2>
 8005c8a:	e013      	b.n	8005cb4 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c8c:	f7ff fa94 	bl	80051b8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c90:	f7fe fb6c 	bl	800436c <HAL_GetTick>
 8005c94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005c96:	e008      	b.n	8005caa <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c98:	f7fe fb68 	bl	800436c <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e0f8      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005caa:	f7ff fa96 	bl	80051da <LL_RCC_HSI48_IsReady>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1f1      	bne.n	8005c98 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 80ee 	beq.w	8005e9a <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cbe:	f7ff fbf4 	bl	80054aa <LL_RCC_GetSysClkSource>
 8005cc2:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	f040 80af 	bne.w	8005e34 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f003 0203 	and.w	r2, r3, #3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d123      	bne.n	8005d2c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d11c      	bne.n	8005d2c <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	0a1b      	lsrs	r3, r3, #8
 8005cf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d114      	bne.n	8005d2c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d10d      	bne.n	8005d2c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d106      	bne.n	8005d2c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d05d      	beq.n	8005de8 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	2b0c      	cmp	r3, #12
 8005d30:	d058      	beq.n	8005de4 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e0ab      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005d44:	f7ff fc74 	bl	8005630 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005d48:	f7fe fb10 	bl	800436c <HAL_GetTick>
 8005d4c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d4e:	e008      	b.n	8005d62 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d50:	f7fe fb0c 	bl	800436c <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e09c      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1ef      	bne.n	8005d50 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	4b3e      	ldr	r3, [pc, #248]	; (8005e70 <HAL_RCC_OscConfig+0x6e4>)
 8005d78:	4013      	ands	r3, r2
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d82:	4311      	orrs	r1, r2
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d88:	0212      	lsls	r2, r2, #8
 8005d8a:	4311      	orrs	r1, r2
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d90:	4311      	orrs	r1, r2
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005d96:	4311      	orrs	r1, r2
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005da6:	f7ff fc34 	bl	8005612 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005db8:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005dba:	f7fe fad7 	bl	800436c <HAL_GetTick>
 8005dbe:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dc0:	e008      	b.n	8005dd4 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dc2:	f7fe fad3 	bl	800436c <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d901      	bls.n	8005dd4 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e063      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0ef      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005de2:	e05a      	b.n	8005e9a <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e059      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d151      	bne.n	8005e9a <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005df6:	f7ff fc0c 	bl	8005612 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e08:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e0a:	f7fe faaf 	bl	800436c <HAL_GetTick>
 8005e0e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e10:	e008      	b.n	8005e24 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e12:	f7fe faab 	bl	800436c <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d901      	bls.n	8005e24 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e03b      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d0ef      	beq.n	8005e12 <HAL_RCC_OscConfig+0x686>
 8005e32:	e032      	b.n	8005e9a <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	2b0c      	cmp	r3, #12
 8005e38:	d02d      	beq.n	8005e96 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e3a:	f7ff fbf9 	bl	8005630 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e48:	f023 0303 	bic.w	r3, r3, #3
 8005e4c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8005e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e58:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005e5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e60:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e62:	f7fe fa83 	bl	800436c <HAL_GetTick>
 8005e66:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e68:	e00d      	b.n	8005e86 <HAL_RCC_OscConfig+0x6fa>
 8005e6a:	bf00      	nop
 8005e6c:	58000400 	.word	0x58000400
 8005e70:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e74:	f7fe fa7a 	bl	800436c <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e00a      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1ef      	bne.n	8005e74 <HAL_RCC_OscConfig+0x6e8>
 8005e94:	e001      	b.n	8005e9a <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e000      	b.n	8005e9c <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3734      	adds	r7, #52	; 0x34
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd90      	pop	{r4, r7, pc}

08005ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e12d      	b.n	8006114 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005eb8:	4b98      	ldr	r3, [pc, #608]	; (800611c <HAL_RCC_ClockConfig+0x278>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0307 	and.w	r3, r3, #7
 8005ec0:	683a      	ldr	r2, [r7, #0]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d91b      	bls.n	8005efe <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ec6:	4b95      	ldr	r3, [pc, #596]	; (800611c <HAL_RCC_ClockConfig+0x278>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f023 0207 	bic.w	r2, r3, #7
 8005ece:	4993      	ldr	r1, [pc, #588]	; (800611c <HAL_RCC_ClockConfig+0x278>)
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ed6:	f7fe fa49 	bl	800436c <HAL_GetTick>
 8005eda:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005edc:	e008      	b.n	8005ef0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005ede:	f7fe fa45 	bl	800436c <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d901      	bls.n	8005ef0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e111      	b.n	8006114 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ef0:	4b8a      	ldr	r3, [pc, #552]	; (800611c <HAL_RCC_ClockConfig+0x278>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0307 	and.w	r3, r3, #7
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d1ef      	bne.n	8005ede <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0302 	and.w	r3, r3, #2
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d016      	beq.n	8005f38 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7ff fad7 	bl	80054c2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005f14:	f7fe fa2a 	bl	800436c <HAL_GetTick>
 8005f18:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005f1a:	e008      	b.n	8005f2e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005f1c:	f7fe fa26 	bl	800436c <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e0f2      	b.n	8006114 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005f2e:	f7ff fbd1 	bl	80056d4 <LL_RCC_IsActiveFlag_HPRE>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d0f1      	beq.n	8005f1c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0320 	and.w	r3, r3, #32
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d016      	beq.n	8005f72 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7ff face 	bl	80054ea <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005f4e:	f7fe fa0d 	bl	800436c <HAL_GetTick>
 8005f52:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005f54:	e008      	b.n	8005f68 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005f56:	f7fe fa09 	bl	800436c <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d901      	bls.n	8005f68 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e0d5      	b.n	8006114 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005f68:	f7ff fbc6 	bl	80056f8 <LL_RCC_IsActiveFlag_C2HPRE>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0f1      	beq.n	8005f56 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d016      	beq.n	8005fac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7ff fac7 	bl	8005516 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005f88:	f7fe f9f0 	bl	800436c <HAL_GetTick>
 8005f8c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005f8e:	e008      	b.n	8005fa2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005f90:	f7fe f9ec 	bl	800436c <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e0b8      	b.n	8006114 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005fa2:	f7ff fbbc 	bl	800571e <LL_RCC_IsActiveFlag_SHDHPRE>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d0f1      	beq.n	8005f90 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0304 	and.w	r3, r3, #4
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d016      	beq.n	8005fe6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7ff fac1 	bl	8005544 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005fc2:	f7fe f9d3 	bl	800436c <HAL_GetTick>
 8005fc6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005fc8:	e008      	b.n	8005fdc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005fca:	f7fe f9cf 	bl	800436c <HAL_GetTick>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d901      	bls.n	8005fdc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e09b      	b.n	8006114 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005fdc:	f7ff fbb2 	bl	8005744 <LL_RCC_IsActiveFlag_PPRE1>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d0f1      	beq.n	8005fca <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0308 	and.w	r3, r3, #8
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d017      	beq.n	8006022 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	00db      	lsls	r3, r3, #3
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7ff fab7 	bl	800556c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ffe:	f7fe f9b5 	bl	800436c <HAL_GetTick>
 8006002:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006004:	e008      	b.n	8006018 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006006:	f7fe f9b1 	bl	800436c <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	2b02      	cmp	r3, #2
 8006012:	d901      	bls.n	8006018 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e07d      	b.n	8006114 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006018:	f7ff fba6 	bl	8005768 <LL_RCC_IsActiveFlag_PPRE2>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0f1      	beq.n	8006006 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d043      	beq.n	80060b6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	2b02      	cmp	r3, #2
 8006034:	d106      	bne.n	8006044 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006036:	f7ff f857 	bl	80050e8 <LL_RCC_HSE_IsReady>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d11e      	bne.n	800607e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e067      	b.n	8006114 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	2b03      	cmp	r3, #3
 800604a:	d106      	bne.n	800605a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800604c:	f7ff faff 	bl	800564e <LL_RCC_PLL_IsReady>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d113      	bne.n	800607e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e05c      	b.n	8006114 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d106      	bne.n	8006070 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006062:	f7ff f9bf 	bl	80053e4 <LL_RCC_MSI_IsReady>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d108      	bne.n	800607e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e051      	b.n	8006114 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006070:	f7ff f86a 	bl	8005148 <LL_RCC_HSI_IsReady>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e04a      	b.n	8006114 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	4618      	mov	r0, r3
 8006084:	f7ff f9fd 	bl	8005482 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006088:	f7fe f970 	bl	800436c <HAL_GetTick>
 800608c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800608e:	e00a      	b.n	80060a6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006090:	f7fe f96c 	bl	800436c <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	f241 3288 	movw	r2, #5000	; 0x1388
 800609e:	4293      	cmp	r3, r2
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e036      	b.n	8006114 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060a6:	f7ff fa00 	bl	80054aa <LL_RCC_GetSysClkSource>
 80060aa:	4602      	mov	r2, r0
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d1ec      	bne.n	8006090 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060b6:	4b19      	ldr	r3, [pc, #100]	; (800611c <HAL_RCC_ClockConfig+0x278>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0307 	and.w	r3, r3, #7
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d21b      	bcs.n	80060fc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060c4:	4b15      	ldr	r3, [pc, #84]	; (800611c <HAL_RCC_ClockConfig+0x278>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f023 0207 	bic.w	r2, r3, #7
 80060cc:	4913      	ldr	r1, [pc, #76]	; (800611c <HAL_RCC_ClockConfig+0x278>)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060d4:	f7fe f94a 	bl	800436c <HAL_GetTick>
 80060d8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060da:	e008      	b.n	80060ee <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80060dc:	f7fe f946 	bl	800436c <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e012      	b.n	8006114 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ee:	4b0b      	ldr	r3, [pc, #44]	; (800611c <HAL_RCC_ClockConfig+0x278>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0307 	and.w	r3, r3, #7
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d1ef      	bne.n	80060dc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80060fc:	f000 f87c 	bl	80061f8 <HAL_RCC_GetHCLKFreq>
 8006100:	4602      	mov	r2, r0
 8006102:	4b07      	ldr	r3, [pc, #28]	; (8006120 <HAL_RCC_ClockConfig+0x27c>)
 8006104:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006106:	f7fe f93d 	bl	8004384 <HAL_GetTickPrio>
 800610a:	4603      	mov	r3, r0
 800610c:	4618      	mov	r0, r3
 800610e:	f7fd fe47 	bl	8003da0 <HAL_InitTick>
 8006112:	4603      	mov	r3, r0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	58004000 	.word	0x58004000
 8006120:	2000002c 	.word	0x2000002c

08006124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006124:	b590      	push	{r4, r7, lr}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800612a:	f7ff f9be 	bl	80054aa <LL_RCC_GetSysClkSource>
 800612e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10a      	bne.n	800614c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006136:	f7ff f97a 	bl	800542e <LL_RCC_MSI_GetRange>
 800613a:	4603      	mov	r3, r0
 800613c:	091b      	lsrs	r3, r3, #4
 800613e:	f003 030f 	and.w	r3, r3, #15
 8006142:	4a2a      	ldr	r2, [pc, #168]	; (80061ec <HAL_RCC_GetSysClockFreq+0xc8>)
 8006144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006148:	60fb      	str	r3, [r7, #12]
 800614a:	e04a      	b.n	80061e2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b04      	cmp	r3, #4
 8006150:	d102      	bne.n	8006158 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006152:	4b27      	ldr	r3, [pc, #156]	; (80061f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006154:	60fb      	str	r3, [r7, #12]
 8006156:	e044      	b.n	80061e2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b08      	cmp	r3, #8
 800615c:	d10a      	bne.n	8006174 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800615e:	f7fe ff93 	bl	8005088 <LL_RCC_HSE_IsEnabledDiv2>
 8006162:	4603      	mov	r3, r0
 8006164:	2b01      	cmp	r3, #1
 8006166:	d102      	bne.n	800616e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006168:	4b21      	ldr	r3, [pc, #132]	; (80061f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	e039      	b.n	80061e2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800616e:	4b21      	ldr	r3, [pc, #132]	; (80061f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	e036      	b.n	80061e2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006174:	f7ff faa2 	bl	80056bc <LL_RCC_PLL_GetMainSource>
 8006178:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b02      	cmp	r3, #2
 800617e:	d002      	beq.n	8006186 <HAL_RCC_GetSysClockFreq+0x62>
 8006180:	2b03      	cmp	r3, #3
 8006182:	d003      	beq.n	800618c <HAL_RCC_GetSysClockFreq+0x68>
 8006184:	e00d      	b.n	80061a2 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006186:	4b1a      	ldr	r3, [pc, #104]	; (80061f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006188:	60bb      	str	r3, [r7, #8]
        break;
 800618a:	e015      	b.n	80061b8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800618c:	f7fe ff7c 	bl	8005088 <LL_RCC_HSE_IsEnabledDiv2>
 8006190:	4603      	mov	r3, r0
 8006192:	2b01      	cmp	r3, #1
 8006194:	d102      	bne.n	800619c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006196:	4b16      	ldr	r3, [pc, #88]	; (80061f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006198:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800619a:	e00d      	b.n	80061b8 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800619c:	4b15      	ldr	r3, [pc, #84]	; (80061f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800619e:	60bb      	str	r3, [r7, #8]
        break;
 80061a0:	e00a      	b.n	80061b8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80061a2:	f7ff f944 	bl	800542e <LL_RCC_MSI_GetRange>
 80061a6:	4603      	mov	r3, r0
 80061a8:	091b      	lsrs	r3, r3, #4
 80061aa:	f003 030f 	and.w	r3, r3, #15
 80061ae:	4a0f      	ldr	r2, [pc, #60]	; (80061ec <HAL_RCC_GetSysClockFreq+0xc8>)
 80061b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061b4:	60bb      	str	r3, [r7, #8]
        break;
 80061b6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80061b8:	f7ff fa5b 	bl	8005672 <LL_RCC_PLL_GetN>
 80061bc:	4602      	mov	r2, r0
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	fb03 f402 	mul.w	r4, r3, r2
 80061c4:	f7ff fa6e 	bl	80056a4 <LL_RCC_PLL_GetDivider>
 80061c8:	4603      	mov	r3, r0
 80061ca:	091b      	lsrs	r3, r3, #4
 80061cc:	3301      	adds	r3, #1
 80061ce:	fbb4 f4f3 	udiv	r4, r4, r3
 80061d2:	f7ff fa5b 	bl	800568c <LL_RCC_PLL_GetR>
 80061d6:	4603      	mov	r3, r0
 80061d8:	0f5b      	lsrs	r3, r3, #29
 80061da:	3301      	adds	r3, #1
 80061dc:	fbb4 f3f3 	udiv	r3, r4, r3
 80061e0:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80061e2:	68fb      	ldr	r3, [r7, #12]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd90      	pop	{r4, r7, pc}
 80061ec:	08011f28 	.word	0x08011f28
 80061f0:	00f42400 	.word	0x00f42400
 80061f4:	01e84800 	.word	0x01e84800

080061f8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061f8:	b598      	push	{r3, r4, r7, lr}
 80061fa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80061fc:	f7ff ff92 	bl	8006124 <HAL_RCC_GetSysClockFreq>
 8006200:	4604      	mov	r4, r0
 8006202:	f7ff f9c7 	bl	8005594 <LL_RCC_GetAHBPrescaler>
 8006206:	4603      	mov	r3, r0
 8006208:	091b      	lsrs	r3, r3, #4
 800620a:	f003 030f 	and.w	r3, r3, #15
 800620e:	4a03      	ldr	r2, [pc, #12]	; (800621c <HAL_RCC_GetHCLKFreq+0x24>)
 8006210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006214:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006218:	4618      	mov	r0, r3
 800621a:	bd98      	pop	{r3, r4, r7, pc}
 800621c:	08011ec8 	.word	0x08011ec8

08006220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006220:	b598      	push	{r3, r4, r7, lr}
 8006222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006224:	f7ff ffe8 	bl	80061f8 <HAL_RCC_GetHCLKFreq>
 8006228:	4604      	mov	r4, r0
 800622a:	f7ff f9da 	bl	80055e2 <LL_RCC_GetAPB1Prescaler>
 800622e:	4603      	mov	r3, r0
 8006230:	0a1b      	lsrs	r3, r3, #8
 8006232:	f003 0307 	and.w	r3, r3, #7
 8006236:	4a04      	ldr	r2, [pc, #16]	; (8006248 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800623c:	f003 031f 	and.w	r3, r3, #31
 8006240:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006244:	4618      	mov	r0, r3
 8006246:	bd98      	pop	{r3, r4, r7, pc}
 8006248:	08011f08 	.word	0x08011f08

0800624c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800624c:	b598      	push	{r3, r4, r7, lr}
 800624e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006250:	f7ff ffd2 	bl	80061f8 <HAL_RCC_GetHCLKFreq>
 8006254:	4604      	mov	r4, r0
 8006256:	f7ff f9d0 	bl	80055fa <LL_RCC_GetAPB2Prescaler>
 800625a:	4603      	mov	r3, r0
 800625c:	0adb      	lsrs	r3, r3, #11
 800625e:	f003 0307 	and.w	r3, r3, #7
 8006262:	4a04      	ldr	r2, [pc, #16]	; (8006274 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006268:	f003 031f 	and.w	r3, r3, #31
 800626c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006270:	4618      	mov	r0, r3
 8006272:	bd98      	pop	{r3, r4, r7, pc}
 8006274:	08011f08 	.word	0x08011f08

08006278 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	226f      	movs	r2, #111	; 0x6f
 8006286:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8006288:	f7ff f90f 	bl	80054aa <LL_RCC_GetSysClkSource>
 800628c:	4602      	mov	r2, r0
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8006292:	f7ff f97f 	bl	8005594 <LL_RCC_GetAHBPrescaler>
 8006296:	4602      	mov	r2, r0
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800629c:	f7ff f9a1 	bl	80055e2 <LL_RCC_GetAPB1Prescaler>
 80062a0:	4602      	mov	r2, r0
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80062a6:	f7ff f9a8 	bl	80055fa <LL_RCC_GetAPB2Prescaler>
 80062aa:	4602      	mov	r2, r0
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80062b0:	f7ff f97c 	bl	80055ac <LL_C2_RCC_GetAHBPrescaler>
 80062b4:	4602      	mov	r2, r0
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80062ba:	f7ff f984 	bl	80055c6 <LL_RCC_GetAHB4Prescaler>
 80062be:	4602      	mov	r2, r0
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80062c4:	4b04      	ldr	r3, [pc, #16]	; (80062d8 <HAL_RCC_GetClockConfig+0x60>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0207 	and.w	r2, r3, #7
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	601a      	str	r2, [r3, #0]
}
 80062d0:	bf00      	nop
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	58004000 	.word	0x58004000

080062dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80062dc:	b590      	push	{r4, r7, lr}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2bb0      	cmp	r3, #176	; 0xb0
 80062e8:	d903      	bls.n	80062f2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80062ea:	4b15      	ldr	r3, [pc, #84]	; (8006340 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80062ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ee:	60fb      	str	r3, [r7, #12]
 80062f0:	e007      	b.n	8006302 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	091b      	lsrs	r3, r3, #4
 80062f6:	f003 030f 	and.w	r3, r3, #15
 80062fa:	4a11      	ldr	r2, [pc, #68]	; (8006340 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80062fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006300:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006302:	f7ff f960 	bl	80055c6 <LL_RCC_GetAHB4Prescaler>
 8006306:	4603      	mov	r3, r0
 8006308:	091b      	lsrs	r3, r3, #4
 800630a:	f003 030f 	and.w	r3, r3, #15
 800630e:	4a0d      	ldr	r2, [pc, #52]	; (8006344 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	fbb2 f3f3 	udiv	r3, r2, r3
 800631a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	4a0a      	ldr	r2, [pc, #40]	; (8006348 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006320:	fba2 2303 	umull	r2, r3, r2, r3
 8006324:	0c9c      	lsrs	r4, r3, #18
 8006326:	f7fe fea1 	bl	800506c <HAL_PWREx_GetVoltageRange>
 800632a:	4603      	mov	r3, r0
 800632c:	4619      	mov	r1, r3
 800632e:	4620      	mov	r0, r4
 8006330:	f000 f80c 	bl	800634c <RCC_SetFlashLatency>
 8006334:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8006336:	4618      	mov	r0, r3
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	bd90      	pop	{r4, r7, pc}
 800633e:	bf00      	nop
 8006340:	08011f28 	.word	0x08011f28
 8006344:	08011ec8 	.word	0x08011ec8
 8006348:	431bde83 	.word	0x431bde83

0800634c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800634c:	b590      	push	{r4, r7, lr}
 800634e:	b093      	sub	sp, #76	; 0x4c
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006356:	4b39      	ldr	r3, [pc, #228]	; (800643c <RCC_SetFlashLatency+0xf0>)
 8006358:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800635c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800635e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006362:	4a37      	ldr	r2, [pc, #220]	; (8006440 <RCC_SetFlashLatency+0xf4>)
 8006364:	f107 031c 	add.w	r3, r7, #28
 8006368:	ca07      	ldmia	r2, {r0, r1, r2}
 800636a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800636e:	4b35      	ldr	r3, [pc, #212]	; (8006444 <RCC_SetFlashLatency+0xf8>)
 8006370:	f107 040c 	add.w	r4, r7, #12
 8006374:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006376:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800637a:	2300      	movs	r3, #0
 800637c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006384:	d11c      	bne.n	80063c0 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006386:	2300      	movs	r3, #0
 8006388:	643b      	str	r3, [r7, #64]	; 0x40
 800638a:	e015      	b.n	80063b8 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800638c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006394:	4413      	add	r3, r2
 8006396:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	429a      	cmp	r2, r3
 800639e:	d808      	bhi.n	80063b2 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80063a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80063a8:	4413      	add	r3, r2
 80063aa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80063ae:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80063b0:	e022      	b.n	80063f8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80063b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063b4:	3301      	adds	r3, #1
 80063b6:	643b      	str	r3, [r7, #64]	; 0x40
 80063b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ba:	2b03      	cmp	r3, #3
 80063bc:	d9e6      	bls.n	800638c <RCC_SetFlashLatency+0x40>
 80063be:	e01b      	b.n	80063f8 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80063c0:	2300      	movs	r3, #0
 80063c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063c4:	e015      	b.n	80063f2 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80063c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80063ce:	4413      	add	r3, r2
 80063d0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d808      	bhi.n	80063ec <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80063da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80063e2:	4413      	add	r3, r2
 80063e4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80063e8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80063ea:	e005      	b.n	80063f8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80063ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ee:	3301      	adds	r3, #1
 80063f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d9e6      	bls.n	80063c6 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80063f8:	4b13      	ldr	r3, [pc, #76]	; (8006448 <RCC_SetFlashLatency+0xfc>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f023 0207 	bic.w	r2, r3, #7
 8006400:	4911      	ldr	r1, [pc, #68]	; (8006448 <RCC_SetFlashLatency+0xfc>)
 8006402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006404:	4313      	orrs	r3, r2
 8006406:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006408:	f7fd ffb0 	bl	800436c <HAL_GetTick>
 800640c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800640e:	e008      	b.n	8006422 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006410:	f7fd ffac 	bl	800436c <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	2b02      	cmp	r3, #2
 800641c:	d901      	bls.n	8006422 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e007      	b.n	8006432 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006422:	4b09      	ldr	r3, [pc, #36]	; (8006448 <RCC_SetFlashLatency+0xfc>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0307 	and.w	r3, r3, #7
 800642a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800642c:	429a      	cmp	r2, r3
 800642e:	d1ef      	bne.n	8006410 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	374c      	adds	r7, #76	; 0x4c
 8006436:	46bd      	mov	sp, r7
 8006438:	bd90      	pop	{r4, r7, pc}
 800643a:	bf00      	nop
 800643c:	08011c6c 	.word	0x08011c6c
 8006440:	08011c7c 	.word	0x08011c7c
 8006444:	08011c88 	.word	0x08011c88
 8006448:	58004000 	.word	0x58004000

0800644c <LL_RCC_LSE_IsEnabled>:
{
 800644c:	b480      	push	{r7}
 800644e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006458:	f003 0301 	and.w	r3, r3, #1
 800645c:	2b01      	cmp	r3, #1
 800645e:	d101      	bne.n	8006464 <LL_RCC_LSE_IsEnabled+0x18>
 8006460:	2301      	movs	r3, #1
 8006462:	e000      	b.n	8006466 <LL_RCC_LSE_IsEnabled+0x1a>
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <LL_RCC_LSE_IsReady>:
{
 8006470:	b480      	push	{r7}
 8006472:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b02      	cmp	r3, #2
 8006482:	d101      	bne.n	8006488 <LL_RCC_LSE_IsReady+0x18>
 8006484:	2301      	movs	r3, #1
 8006486:	e000      	b.n	800648a <LL_RCC_LSE_IsReady+0x1a>
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <LL_RCC_SetRFWKPClockSource>:
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800649c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80064a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <LL_RCC_SetSMPSClockSource>:
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80064c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	f023 0203 	bic.w	r2, r3, #3
 80064d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4313      	orrs	r3, r2
 80064da:	624b      	str	r3, [r1, #36]	; 0x24
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <LL_RCC_SetSMPSPrescaler>:
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80064f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80064fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4313      	orrs	r3, r2
 8006502:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <LL_RCC_SetUSARTClockSource>:
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800651c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006520:	f023 0203 	bic.w	r2, r3, #3
 8006524:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4313      	orrs	r3, r2
 800652c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <LL_RCC_SetLPUARTClockSource>:
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006550:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4313      	orrs	r3, r2
 8006558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <LL_RCC_SetI2CClockSource>:
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006574:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	091b      	lsrs	r3, r3, #4
 800657c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006580:	43db      	mvns	r3, r3
 8006582:	401a      	ands	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	011b      	lsls	r3, r3, #4
 8006588:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800658c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006590:	4313      	orrs	r3, r2
 8006592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006596:	bf00      	nop
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <LL_RCC_SetLPTIMClockSource>:
{
 80065a2:	b480      	push	{r7}
 80065a4:	b083      	sub	sp, #12
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80065aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	0c1b      	lsrs	r3, r3, #16
 80065b6:	041b      	lsls	r3, r3, #16
 80065b8:	43db      	mvns	r3, r3
 80065ba:	401a      	ands	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	041b      	lsls	r3, r3, #16
 80065c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065c4:	4313      	orrs	r3, r2
 80065c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80065ca:	bf00      	nop
 80065cc:	370c      	adds	r7, #12
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <LL_RCC_SetSAIClockSource>:
{
 80065d6:	b480      	push	{r7}
 80065d8:	b083      	sub	sp, #12
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80065de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80065ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80065f6:	bf00      	nop
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <LL_RCC_SetRNGClockSource>:
{
 8006602:	b480      	push	{r7}
 8006604:	b083      	sub	sp, #12
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800660a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800660e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006612:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006616:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4313      	orrs	r3, r2
 800661e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006622:	bf00      	nop
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <LL_RCC_SetCLK48ClockSource>:
{
 800662e:	b480      	push	{r7}
 8006630:	b083      	sub	sp, #12
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800663a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800663e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006642:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4313      	orrs	r3, r2
 800664a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800664e:	bf00      	nop
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <LL_RCC_SetUSBClockSource>:
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b082      	sub	sp, #8
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f7ff ffe3 	bl	800662e <LL_RCC_SetCLK48ClockSource>
}
 8006668:	bf00      	nop
 800666a:	3708      	adds	r7, #8
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <LL_RCC_SetADCClockSource>:
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800667c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006680:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006684:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4313      	orrs	r3, r2
 800668c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <LL_RCC_SetRTCClockSource>:
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80066a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <LL_RCC_GetRTCClockSource>:
{
 80066c8:	b480      	push	{r7}
 80066ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80066cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80066d8:	4618      	mov	r0, r3
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <LL_RCC_ForceBackupDomainReset>:
{
 80066e2:	b480      	push	{r7}
 80066e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80066e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80066fa:	bf00      	nop
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006704:	b480      	push	{r7}
 8006706:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800670c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006710:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800671c:	bf00      	nop
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <LL_RCC_PLLSAI1_Enable>:
{
 8006726:	b480      	push	{r7}
 8006728:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800672a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006734:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006738:	6013      	str	r3, [r2, #0]
}
 800673a:	bf00      	nop
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <LL_RCC_PLLSAI1_Disable>:
{
 8006744:	b480      	push	{r7}
 8006746:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006752:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006756:	6013      	str	r3, [r2, #0]
}
 8006758:	bf00      	nop
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <LL_RCC_PLLSAI1_IsReady>:
{
 8006762:	b480      	push	{r7}
 8006764:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006770:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006774:	d101      	bne.n	800677a <LL_RCC_PLLSAI1_IsReady+0x18>
 8006776:	2301      	movs	r3, #1
 8006778:	e000      	b.n	800677c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b088      	sub	sp, #32
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800678e:	2300      	movs	r3, #0
 8006790:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006792:	2300      	movs	r3, #0
 8006794:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d033      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067aa:	d00c      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80067ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067b0:	d802      	bhi.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d010      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80067b6:	e017      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80067b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067bc:	d017      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x68>
 80067be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80067c2:	d016      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80067c4:	e010      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80067c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80067d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067d4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80067d6:	e00d      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	3304      	adds	r3, #4
 80067dc:	4618      	mov	r0, r3
 80067de:	f000 f947 	bl	8006a70 <RCCEx_PLLSAI1_ConfigNP>
 80067e2:	4603      	mov	r3, r0
 80067e4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80067e6:	e005      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	77fb      	strb	r3, [r7, #31]
        break;
 80067ec:	e002      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80067ee:	bf00      	nop
 80067f0:	e000      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80067f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067f4:	7ffb      	ldrb	r3, [r7, #31]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d105      	bne.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fe:	4618      	mov	r0, r3
 8006800:	f7ff fee9 	bl	80065d6 <LL_RCC_SetSAIClockSource>
 8006804:	e001      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006806:	7ffb      	ldrb	r3, [r7, #31]
 8006808:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006812:	2b00      	cmp	r3, #0
 8006814:	d046      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006816:	f7ff ff57 	bl	80066c8 <LL_RCC_GetRTCClockSource>
 800681a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	429a      	cmp	r2, r3
 8006824:	d03c      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006826:	f7fe fc11 	bl	800504c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d105      	bne.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006834:	4618      	mov	r0, r3
 8006836:	f7ff ff31 	bl	800669c <LL_RCC_SetRTCClockSource>
 800683a:	e02e      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800683c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006844:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006846:	f7ff ff4c 	bl	80066e2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800684a:	f7ff ff5b 	bl	8006704 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006858:	4313      	orrs	r3, r2
 800685a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800685c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006866:	f7ff fdf1 	bl	800644c <LL_RCC_LSE_IsEnabled>
 800686a:	4603      	mov	r3, r0
 800686c:	2b01      	cmp	r3, #1
 800686e:	d114      	bne.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006870:	f7fd fd7c 	bl	800436c <HAL_GetTick>
 8006874:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006876:	e00b      	b.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006878:	f7fd fd78 	bl	800436c <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	f241 3288 	movw	r2, #5000	; 0x1388
 8006886:	4293      	cmp	r3, r2
 8006888:	d902      	bls.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	77fb      	strb	r3, [r7, #31]
              break;
 800688e:	e004      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006890:	f7ff fdee 	bl	8006470 <LL_RCC_LSE_IsReady>
 8006894:	4603      	mov	r3, r0
 8006896:	2b01      	cmp	r3, #1
 8006898:	d1ee      	bne.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800689a:	7ffb      	ldrb	r3, [r7, #31]
 800689c:	77bb      	strb	r3, [r7, #30]
 800689e:	e001      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a0:	7ffb      	ldrb	r3, [r7, #31]
 80068a2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d004      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7ff fe2b 	bl	8006510 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d004      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	69db      	ldr	r3, [r3, #28]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7ff fe36 	bl	800653c <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0310 	and.w	r3, r3, #16
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d004      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7ff fe5e 	bl	80065a2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0320 	and.w	r3, r3, #32
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d004      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7ff fe53 	bl	80065a2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0304 	and.w	r3, r3, #4
 8006904:	2b00      	cmp	r3, #0
 8006906:	d004      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	4618      	mov	r0, r3
 800690e:	f7ff fe2b 	bl	8006568 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0308 	and.w	r3, r3, #8
 800691a:	2b00      	cmp	r3, #0
 800691c:	d004      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006922:	4618      	mov	r0, r3
 8006924:	f7ff fe20 	bl	8006568 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006930:	2b00      	cmp	r3, #0
 8006932:	d022      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006938:	4618      	mov	r0, r3
 800693a:	f7ff fe8e 	bl	800665a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006942:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006946:	d107      	bne.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006956:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006960:	d10b      	bne.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	3304      	adds	r3, #4
 8006966:	4618      	mov	r0, r3
 8006968:	f000 f8dd 	bl	8006b26 <RCCEx_PLLSAI1_ConfigNQ>
 800696c:	4603      	mov	r3, r0
 800696e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8006970:	7ffb      	ldrb	r3, [r7, #31]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8006976:	7ffb      	ldrb	r3, [r7, #31]
 8006978:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006982:	2b00      	cmp	r3, #0
 8006984:	d02b      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800698e:	d008      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006994:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006998:	d003      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d105      	bne.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x228>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7ff fe2b 	bl	8006602 <LL_RCC_SetRNGClockSource>
 80069ac:	e00a      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	2000      	movs	r0, #0
 80069ba:	f7ff fe22 	bl	8006602 <LL_RCC_SetRNGClockSource>
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f7ff fe35 	bl	800662e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80069cc:	d107      	bne.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80069ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069dc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d022      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7ff fe3e 	bl	8006670 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069fc:	d107      	bne.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80069fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a0c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a16:	d10b      	bne.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	3304      	adds	r3, #4
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 f8dd 	bl	8006bdc <RCCEx_PLLSAI1_ConfigNR>
 8006a22:	4603      	mov	r3, r0
 8006a24:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8006a26:	7ffb      	ldrb	r3, [r7, #31]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d001      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8006a2c:	7ffb      	ldrb	r3, [r7, #31]
 8006a2e:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d004      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7ff fd27 	bl	8006494 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d009      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7ff fd46 	bl	80064e8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7ff fd2d 	bl	80064c0 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8006a66:	7fbb      	ldrb	r3, [r7, #30]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3720      	adds	r7, #32
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006a7c:	f7ff fe62 	bl	8006744 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006a80:	f7fd fc74 	bl	800436c <HAL_GetTick>
 8006a84:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006a86:	e009      	b.n	8006a9c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a88:	f7fd fc70 	bl	800436c <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d902      	bls.n	8006a9c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	73fb      	strb	r3, [r7, #15]
      break;
 8006a9a:	e004      	b.n	8006aa6 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006a9c:	f7ff fe61 	bl	8006762 <LL_RCC_PLLSAI1_IsReady>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1f0      	bne.n	8006a88 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006aa6:	7bfb      	ldrb	r3, [r7, #15]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d137      	bne.n	8006b1c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	021b      	lsls	r3, r3, #8
 8006abc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006ada:	f7ff fe24 	bl	8006726 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ade:	f7fd fc45 	bl	800436c <HAL_GetTick>
 8006ae2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006ae4:	e009      	b.n	8006afa <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ae6:	f7fd fc41 	bl	800436c <HAL_GetTick>
 8006aea:	4602      	mov	r2, r0
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d902      	bls.n	8006afa <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	73fb      	strb	r3, [r7, #15]
        break;
 8006af8:	e004      	b.n	8006b04 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006afa:	f7ff fe32 	bl	8006762 <LL_RCC_PLLSAI1_IsReady>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d1f0      	bne.n	8006ae6 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d108      	bne.n	8006b1c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b0e:	691a      	ldr	r2, [r3, #16]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b084      	sub	sp, #16
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006b32:	f7ff fe07 	bl	8006744 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006b36:	f7fd fc19 	bl	800436c <HAL_GetTick>
 8006b3a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006b3c:	e009      	b.n	8006b52 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b3e:	f7fd fc15 	bl	800436c <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d902      	bls.n	8006b52 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b50:	e004      	b.n	8006b5c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006b52:	f7ff fe06 	bl	8006762 <LL_RCC_PLLSAI1_IsReady>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1f0      	bne.n	8006b3e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d137      	bne.n	8006bd2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	021b      	lsls	r3, r3, #8
 8006b72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b76:	4313      	orrs	r3, r2
 8006b78:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006b90:	f7ff fdc9 	bl	8006726 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b94:	f7fd fbea 	bl	800436c <HAL_GetTick>
 8006b98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006b9a:	e009      	b.n	8006bb0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b9c:	f7fd fbe6 	bl	800436c <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d902      	bls.n	8006bb0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	73fb      	strb	r3, [r7, #15]
        break;
 8006bae:	e004      	b.n	8006bba <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006bb0:	f7ff fdd7 	bl	8006762 <LL_RCC_PLLSAI1_IsReady>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d1f0      	bne.n	8006b9c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d108      	bne.n	8006bd2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bc4:	691a      	ldr	r2, [r3, #16]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006be4:	2300      	movs	r3, #0
 8006be6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006be8:	f7ff fdac 	bl	8006744 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006bec:	f7fd fbbe 	bl	800436c <HAL_GetTick>
 8006bf0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006bf2:	e009      	b.n	8006c08 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006bf4:	f7fd fbba 	bl	800436c <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d902      	bls.n	8006c08 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	73fb      	strb	r3, [r7, #15]
      break;
 8006c06:	e004      	b.n	8006c12 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006c08:	f7ff fdab 	bl	8006762 <LL_RCC_PLLSAI1_IsReady>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1f0      	bne.n	8006bf4 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006c12:	7bfb      	ldrb	r3, [r7, #15]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d137      	bne.n	8006c88 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	021b      	lsls	r3, r3, #8
 8006c28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c42:	4313      	orrs	r3, r2
 8006c44:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006c46:	f7ff fd6e 	bl	8006726 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c4a:	f7fd fb8f 	bl	800436c <HAL_GetTick>
 8006c4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006c50:	e009      	b.n	8006c66 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c52:	f7fd fb8b 	bl	800436c <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d902      	bls.n	8006c66 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	73fb      	strb	r3, [r7, #15]
        break;
 8006c64:	e004      	b.n	8006c70 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006c66:	f7ff fd7c 	bl	8006762 <LL_RCC_PLLSAI1_IsReady>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d1f0      	bne.n	8006c52 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d108      	bne.n	8006c88 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c7a:	691a      	ldr	r2, [r3, #16]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c84:	4313      	orrs	r3, r2
 8006c86:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b082      	sub	sp, #8
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d101      	bne.n	8006ca4 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e090      	b.n	8006dc6 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d106      	bne.n	8006cbe <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f7fd f837 	bl	8003d2c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	22ca      	movs	r2, #202	; 0xca
 8006ccc:	625a      	str	r2, [r3, #36]	; 0x24
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2253      	movs	r2, #83	; 0x53
 8006cd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f89f 	bl	8006e1a <RTC_EnterInitMode>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d009      	beq.n	8006cf6 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	22ff      	movs	r2, #255	; 0xff
 8006ce8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2204      	movs	r2, #4
 8006cee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e067      	b.n	8006dc6 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	6812      	ldr	r2, [r2, #0]
 8006d00:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d08:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	6899      	ldr	r1, [r3, #8]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	431a      	orrs	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	431a      	orrs	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	430a      	orrs	r2, r1
 8006d26:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	68d2      	ldr	r2, [r2, #12]
 8006d30:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	6919      	ldr	r1, [r3, #16]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	041a      	lsls	r2, r3, #16
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68da      	ldr	r2, [r3, #12]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d54:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f022 0203 	bic.w	r2, r2, #3
 8006d64:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	69da      	ldr	r2, [r3, #28]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	431a      	orrs	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f003 0320 	and.w	r3, r3, #32
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d113      	bne.n	8006db4 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f81e 	bl	8006dce <HAL_RTC_WaitForSynchro>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00d      	beq.n	8006db4 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	22ff      	movs	r2, #255	; 0xff
 8006d9e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2204      	movs	r2, #4
 8006da4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e008      	b.n	8006dc6 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	22ff      	movs	r2, #255	; 0xff
 8006dba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
  }
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b084      	sub	sp, #16
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68da      	ldr	r2, [r3, #12]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006de4:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006de6:	f7fd fac1 	bl	800436c <HAL_GetTick>
 8006dea:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006dec:	e009      	b.n	8006e02 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006dee:	f7fd fabd 	bl	800436c <HAL_GetTick>
 8006df2:	4602      	mov	r2, r0
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dfc:	d901      	bls.n	8006e02 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e007      	b.n	8006e12 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	f003 0320 	and.w	r3, r3, #32
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d0ee      	beq.n	8006dee <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b084      	sub	sp, #16
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d119      	bne.n	8006e64 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e38:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006e3a:	f7fd fa97 	bl	800436c <HAL_GetTick>
 8006e3e:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006e40:	e009      	b.n	8006e56 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006e42:	f7fd fa93 	bl	800436c <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e50:	d901      	bls.n	8006e56 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e007      	b.n	8006e66 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d0ee      	beq.n	8006e42 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d101      	bne.n	8006e84 <HAL_RTCEx_EnableBypassShadow+0x16>
 8006e80:	2302      	movs	r3, #2
 8006e82:	e024      	b.n	8006ece <HAL_RTCEx_EnableBypassShadow+0x60>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2202      	movs	r2, #2
 8006e90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	22ca      	movs	r2, #202	; 0xca
 8006e9a:	625a      	str	r2, [r3, #36]	; 0x24
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2253      	movs	r2, #83	; 0x53
 8006ea2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	689a      	ldr	r2, [r3, #8]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f042 0220 	orr.w	r2, r2, #32
 8006eb2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	22ff      	movs	r2, #255	; 0xff
 8006eba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b082      	sub	sp, #8
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d101      	bne.n	8006eec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e049      	b.n	8006f80 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d106      	bne.n	8006f06 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 f841 	bl	8006f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2202      	movs	r2, #2
 8006f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	3304      	adds	r3, #4
 8006f16:	4619      	mov	r1, r3
 8006f18:	4610      	mov	r0, r2
 8006f1a:	f000 f9d5 	bl	80072c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006f90:	bf00      	nop
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d001      	beq.n	8006fb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e036      	b.n	8007022 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68da      	ldr	r2, [r3, #12]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f042 0201 	orr.w	r2, r2, #1
 8006fca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a17      	ldr	r2, [pc, #92]	; (8007030 <HAL_TIM_Base_Start_IT+0x94>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d004      	beq.n	8006fe0 <HAL_TIM_Base_Start_IT+0x44>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fde:	d115      	bne.n	800700c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689a      	ldr	r2, [r3, #8]
 8006fe6:	4b13      	ldr	r3, [pc, #76]	; (8007034 <HAL_TIM_Base_Start_IT+0x98>)
 8006fe8:	4013      	ands	r3, r2
 8006fea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2b06      	cmp	r3, #6
 8006ff0:	d015      	beq.n	800701e <HAL_TIM_Base_Start_IT+0x82>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ff8:	d011      	beq.n	800701e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f042 0201 	orr.w	r2, r2, #1
 8007008:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800700a:	e008      	b.n	800701e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f042 0201 	orr.w	r2, r2, #1
 800701a:	601a      	str	r2, [r3, #0]
 800701c:	e000      	b.n	8007020 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800701e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	40012c00 	.word	0x40012c00
 8007034:	00010007 	.word	0x00010007

08007038 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	f003 0302 	and.w	r3, r3, #2
 800704a:	2b02      	cmp	r3, #2
 800704c:	d122      	bne.n	8007094 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	f003 0302 	and.w	r3, r3, #2
 8007058:	2b02      	cmp	r3, #2
 800705a:	d11b      	bne.n	8007094 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f06f 0202 	mvn.w	r2, #2
 8007064:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	f003 0303 	and.w	r3, r3, #3
 8007076:	2b00      	cmp	r3, #0
 8007078:	d003      	beq.n	8007082 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f905 	bl	800728a <HAL_TIM_IC_CaptureCallback>
 8007080:	e005      	b.n	800708e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f8f7 	bl	8007276 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f908 	bl	800729e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	f003 0304 	and.w	r3, r3, #4
 800709e:	2b04      	cmp	r3, #4
 80070a0:	d122      	bne.n	80070e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	f003 0304 	and.w	r3, r3, #4
 80070ac:	2b04      	cmp	r3, #4
 80070ae:	d11b      	bne.n	80070e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f06f 0204 	mvn.w	r2, #4
 80070b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2202      	movs	r2, #2
 80070be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d003      	beq.n	80070d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f8db 	bl	800728a <HAL_TIM_IC_CaptureCallback>
 80070d4:	e005      	b.n	80070e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f8cd 	bl	8007276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f8de 	bl	800729e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	f003 0308 	and.w	r3, r3, #8
 80070f2:	2b08      	cmp	r3, #8
 80070f4:	d122      	bne.n	800713c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f003 0308 	and.w	r3, r3, #8
 8007100:	2b08      	cmp	r3, #8
 8007102:	d11b      	bne.n	800713c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f06f 0208 	mvn.w	r2, #8
 800710c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2204      	movs	r2, #4
 8007112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	69db      	ldr	r3, [r3, #28]
 800711a:	f003 0303 	and.w	r3, r3, #3
 800711e:	2b00      	cmp	r3, #0
 8007120:	d003      	beq.n	800712a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f8b1 	bl	800728a <HAL_TIM_IC_CaptureCallback>
 8007128:	e005      	b.n	8007136 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f8a3 	bl	8007276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f8b4 	bl	800729e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	f003 0310 	and.w	r3, r3, #16
 8007146:	2b10      	cmp	r3, #16
 8007148:	d122      	bne.n	8007190 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	f003 0310 	and.w	r3, r3, #16
 8007154:	2b10      	cmp	r3, #16
 8007156:	d11b      	bne.n	8007190 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f06f 0210 	mvn.w	r2, #16
 8007160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2208      	movs	r2, #8
 8007166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	69db      	ldr	r3, [r3, #28]
 800716e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f887 	bl	800728a <HAL_TIM_IC_CaptureCallback>
 800717c:	e005      	b.n	800718a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f879 	bl	8007276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f88a 	bl	800729e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	f003 0301 	and.w	r3, r3, #1
 800719a:	2b01      	cmp	r3, #1
 800719c:	d10e      	bne.n	80071bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d107      	bne.n	80071bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f06f 0201 	mvn.w	r2, #1
 80071b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f7fc fbe4 	bl	8003984 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c6:	2b80      	cmp	r3, #128	; 0x80
 80071c8:	d10e      	bne.n	80071e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d4:	2b80      	cmp	r3, #128	; 0x80
 80071d6:	d107      	bne.n	80071e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80071e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f8de 	bl	80073a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071f6:	d10e      	bne.n	8007216 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007202:	2b80      	cmp	r3, #128	; 0x80
 8007204:	d107      	bne.n	8007216 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800720e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 f8d1 	bl	80073b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007220:	2b40      	cmp	r3, #64	; 0x40
 8007222:	d10e      	bne.n	8007242 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722e:	2b40      	cmp	r3, #64	; 0x40
 8007230:	d107      	bne.n	8007242 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800723a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f838 	bl	80072b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	f003 0320 	and.w	r3, r3, #32
 800724c:	2b20      	cmp	r3, #32
 800724e:	d10e      	bne.n	800726e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	f003 0320 	and.w	r3, r3, #32
 800725a:	2b20      	cmp	r3, #32
 800725c:	d107      	bne.n	800726e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f06f 0220 	mvn.w	r2, #32
 8007266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f891 	bl	8007390 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800726e:	bf00      	nop
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007276:	b480      	push	{r7}
 8007278:	b083      	sub	sp, #12
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800727e:	bf00      	nop
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800728a:	b480      	push	{r7}
 800728c:	b083      	sub	sp, #12
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007292:	bf00      	nop
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800729e:	b480      	push	{r7}
 80072a0:	b083      	sub	sp, #12
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072a6:	bf00      	nop
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b083      	sub	sp, #12
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072ba:	bf00      	nop
 80072bc:	370c      	adds	r7, #12
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
	...

080072c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a2a      	ldr	r2, [pc, #168]	; (8007384 <TIM_Base_SetConfig+0xbc>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d003      	beq.n	80072e8 <TIM_Base_SetConfig+0x20>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072e6:	d108      	bne.n	80072fa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a21      	ldr	r2, [pc, #132]	; (8007384 <TIM_Base_SetConfig+0xbc>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d00b      	beq.n	800731a <TIM_Base_SetConfig+0x52>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007308:	d007      	beq.n	800731a <TIM_Base_SetConfig+0x52>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a1e      	ldr	r2, [pc, #120]	; (8007388 <TIM_Base_SetConfig+0xc0>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d003      	beq.n	800731a <TIM_Base_SetConfig+0x52>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a1d      	ldr	r2, [pc, #116]	; (800738c <TIM_Base_SetConfig+0xc4>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d108      	bne.n	800732c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	4313      	orrs	r3, r2
 800732a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	4313      	orrs	r3, r2
 8007338:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	689a      	ldr	r2, [r3, #8]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a0c      	ldr	r2, [pc, #48]	; (8007384 <TIM_Base_SetConfig+0xbc>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d007      	beq.n	8007368 <TIM_Base_SetConfig+0xa0>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a0b      	ldr	r2, [pc, #44]	; (8007388 <TIM_Base_SetConfig+0xc0>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d003      	beq.n	8007368 <TIM_Base_SetConfig+0xa0>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a0a      	ldr	r2, [pc, #40]	; (800738c <TIM_Base_SetConfig+0xc4>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d103      	bne.n	8007370 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	691a      	ldr	r2, [r3, #16]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	615a      	str	r2, [r3, #20]
}
 8007376:	bf00      	nop
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	40012c00 	.word	0x40012c00
 8007388:	40014400 	.word	0x40014400
 800738c:	40014800 	.word	0x40014800

08007390 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <LL_RCC_GetUSARTClockSource>:
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80073d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4013      	ands	r3, r2
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <LL_RCC_GetLPUARTClockSource>:
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80073f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4013      	ands	r3, r2
}
 8007400:	4618      	mov	r0, r3
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d101      	bne.n	800741e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e042      	b.n	80074a4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007424:	2b00      	cmp	r3, #0
 8007426:	d106      	bne.n	8007436 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7fc fb85 	bl	8003b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2224      	movs	r2, #36	; 0x24
 800743a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f022 0201 	bic.w	r2, r2, #1
 800744c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fa40 	bl	80078d4 <UART_SetConfig>
 8007454:	4603      	mov	r3, r0
 8007456:	2b01      	cmp	r3, #1
 8007458:	d101      	bne.n	800745e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e022      	b.n	80074a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007462:	2b00      	cmp	r3, #0
 8007464:	d002      	beq.n	800746c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fc42 	bl	8007cf0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800747a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689a      	ldr	r2, [r3, #8]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800748a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f042 0201 	orr.w	r2, r2, #1
 800749a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fcc9 	bl	8007e34 <UART_CheckIdleState>
 80074a2:	4603      	mov	r3, r0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	4613      	mov	r3, r2
 80074b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074c0:	2b20      	cmp	r3, #32
 80074c2:	d168      	bne.n	8007596 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d002      	beq.n	80074d0 <HAL_UART_Transmit_DMA+0x24>
 80074ca:	88fb      	ldrh	r3, [r7, #6]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d101      	bne.n	80074d4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e061      	b.n	8007598 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d101      	bne.n	80074e2 <HAL_UART_Transmit_DMA+0x36>
 80074de:	2302      	movs	r3, #2
 80074e0:	e05a      	b.n	8007598 <HAL_UART_Transmit_DMA+0xec>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	88fa      	ldrh	r2, [r7, #6]
 80074f4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	88fa      	ldrh	r2, [r7, #6]
 80074fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2221      	movs	r2, #33	; 0x21
 800750c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007514:	2b00      	cmp	r3, #0
 8007516:	d02c      	beq.n	8007572 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800751c:	4a20      	ldr	r2, [pc, #128]	; (80075a0 <HAL_UART_Transmit_DMA+0xf4>)
 800751e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007524:	4a1f      	ldr	r2, [pc, #124]	; (80075a4 <HAL_UART_Transmit_DMA+0xf8>)
 8007526:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800752c:	4a1e      	ldr	r2, [pc, #120]	; (80075a8 <HAL_UART_Transmit_DMA+0xfc>)
 800752e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007534:	2200      	movs	r2, #0
 8007536:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007540:	4619      	mov	r1, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3328      	adds	r3, #40	; 0x28
 8007548:	461a      	mov	r2, r3
 800754a:	88fb      	ldrh	r3, [r7, #6]
 800754c:	f7fd f94e 	bl	80047ec <HAL_DMA_Start_IT>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00d      	beq.n	8007572 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2210      	movs	r2, #16
 800755a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2220      	movs	r2, #32
 800756a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e012      	b.n	8007598 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2240      	movs	r2, #64	; 0x40
 8007578:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689a      	ldr	r2, [r3, #8]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007590:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	e000      	b.n	8007598 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8007596:	2302      	movs	r3, #2
  }
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	08008047 	.word	0x08008047
 80075a4:	0800809b 	.word	0x0800809b
 80075a8:	080080b7 	.word	0x080080b7

080075ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b088      	sub	sp, #32
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80075cc:	69fa      	ldr	r2, [r7, #28]
 80075ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80075d2:	4013      	ands	r3, r2
 80075d4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d118      	bne.n	800760e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	f003 0320 	and.w	r3, r3, #32
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d013      	beq.n	800760e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	f003 0320 	and.w	r3, r3, #32
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d104      	bne.n	80075fa <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d009      	beq.n	800760e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f000 8145 	beq.w	800788e <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	4798      	blx	r3
      }
      return;
 800760c:	e13f      	b.n	800788e <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	2b00      	cmp	r3, #0
 8007612:	f000 80e8 	beq.w	80077e6 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	4ba1      	ldr	r3, [pc, #644]	; (80078a0 <HAL_UART_IRQHandler+0x2f4>)
 800761a:	4013      	ands	r3, r2
 800761c:	2b00      	cmp	r3, #0
 800761e:	d105      	bne.n	800762c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	4ba0      	ldr	r3, [pc, #640]	; (80078a4 <HAL_UART_IRQHandler+0x2f8>)
 8007624:	4013      	ands	r3, r2
 8007626:	2b00      	cmp	r3, #0
 8007628:	f000 80dd 	beq.w	80077e6 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	2b00      	cmp	r3, #0
 8007634:	d010      	beq.n	8007658 <HAL_UART_IRQHandler+0xac>
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00b      	beq.n	8007658 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2201      	movs	r2, #1
 8007646:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800764e:	f043 0201 	orr.w	r2, r3, #1
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	f003 0302 	and.w	r3, r3, #2
 800765e:	2b00      	cmp	r3, #0
 8007660:	d010      	beq.n	8007684 <HAL_UART_IRQHandler+0xd8>
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	f003 0301 	and.w	r3, r3, #1
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00b      	beq.n	8007684 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2202      	movs	r2, #2
 8007672:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800767a:	f043 0204 	orr.w	r2, r3, #4
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	f003 0304 	and.w	r3, r3, #4
 800768a:	2b00      	cmp	r3, #0
 800768c:	d010      	beq.n	80076b0 <HAL_UART_IRQHandler+0x104>
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	f003 0301 	and.w	r3, r3, #1
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00b      	beq.n	80076b0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2204      	movs	r2, #4
 800769e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076a6:	f043 0202 	orr.w	r2, r3, #2
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	f003 0308 	and.w	r3, r3, #8
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d015      	beq.n	80076e6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	f003 0320 	and.w	r3, r3, #32
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d104      	bne.n	80076ce <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80076c4:	697a      	ldr	r2, [r7, #20]
 80076c6:	4b76      	ldr	r3, [pc, #472]	; (80078a0 <HAL_UART_IRQHandler+0x2f4>)
 80076c8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00b      	beq.n	80076e6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2208      	movs	r2, #8
 80076d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076dc:	f043 0208 	orr.w	r2, r3, #8
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d011      	beq.n	8007714 <HAL_UART_IRQHandler+0x168>
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00c      	beq.n	8007714 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800770a:	f043 0220 	orr.w	r2, r3, #32
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800771a:	2b00      	cmp	r3, #0
 800771c:	f000 80b9 	beq.w	8007892 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	f003 0320 	and.w	r3, r3, #32
 8007726:	2b00      	cmp	r3, #0
 8007728:	d011      	beq.n	800774e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	f003 0320 	and.w	r3, r3, #32
 8007730:	2b00      	cmp	r3, #0
 8007732:	d104      	bne.n	800773e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d007      	beq.n	800774e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007742:	2b00      	cmp	r3, #0
 8007744:	d003      	beq.n	800774e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007754:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007760:	2b40      	cmp	r3, #64	; 0x40
 8007762:	d004      	beq.n	800776e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800776a:	2b00      	cmp	r3, #0
 800776c:	d031      	beq.n	80077d2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fc46 	bl	8008000 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777e:	2b40      	cmp	r3, #64	; 0x40
 8007780:	d123      	bne.n	80077ca <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	689a      	ldr	r2, [r3, #8]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007790:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007796:	2b00      	cmp	r3, #0
 8007798:	d013      	beq.n	80077c2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800779e:	4a42      	ldr	r2, [pc, #264]	; (80078a8 <HAL_UART_IRQHandler+0x2fc>)
 80077a0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7fd f89b 	bl	80048e2 <HAL_DMA_Abort_IT>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d017      	beq.n	80077e2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80077bc:	4610      	mov	r0, r2
 80077be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c0:	e00f      	b.n	80077e2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f87c 	bl	80078c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c8:	e00b      	b.n	80077e2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f878 	bl	80078c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d0:	e007      	b.n	80077e2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f874 	bl	80078c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80077e0:	e057      	b.n	8007892 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e2:	bf00      	nop
    return;
 80077e4:	e055      	b.n	8007892 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00d      	beq.n	800780c <HAL_UART_IRQHandler+0x260>
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d008      	beq.n	800780c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007802:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 fcc6 	bl	8008196 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800780a:	e045      	b.n	8007898 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007812:	2b00      	cmp	r3, #0
 8007814:	d012      	beq.n	800783c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800781c:	2b00      	cmp	r3, #0
 800781e:	d104      	bne.n	800782a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007826:	2b00      	cmp	r3, #0
 8007828:	d008      	beq.n	800783c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800782e:	2b00      	cmp	r3, #0
 8007830:	d031      	beq.n	8007896 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	4798      	blx	r3
    }
    return;
 800783a:	e02c      	b.n	8007896 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007842:	2b00      	cmp	r3, #0
 8007844:	d008      	beq.n	8007858 <HAL_UART_IRQHandler+0x2ac>
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784c:	2b00      	cmp	r3, #0
 800784e:	d003      	beq.n	8007858 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fc86 	bl	8008162 <UART_EndTransmit_IT>
    return;
 8007856:	e01f      	b.n	8007898 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800785e:	2b00      	cmp	r3, #0
 8007860:	d008      	beq.n	8007874 <HAL_UART_IRQHandler+0x2c8>
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007868:	2b00      	cmp	r3, #0
 800786a:	d003      	beq.n	8007874 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fca6 	bl	80081be <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007872:	e011      	b.n	8007898 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00c      	beq.n	8007898 <HAL_UART_IRQHandler+0x2ec>
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	2b00      	cmp	r3, #0
 8007882:	da09      	bge.n	8007898 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fc90 	bl	80081aa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800788a:	bf00      	nop
 800788c:	e004      	b.n	8007898 <HAL_UART_IRQHandler+0x2ec>
      return;
 800788e:	bf00      	nop
 8007890:	e002      	b.n	8007898 <HAL_UART_IRQHandler+0x2ec>
    return;
 8007892:	bf00      	nop
 8007894:	e000      	b.n	8007898 <HAL_UART_IRQHandler+0x2ec>
    return;
 8007896:	bf00      	nop
  }
}
 8007898:	3720      	adds	r7, #32
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	10000001 	.word	0x10000001
 80078a4:	04000120 	.word	0x04000120
 80078a8:	08008137 	.word	0x08008137

080078ac <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078d4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80078d8:	b088      	sub	sp, #32
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078de:	2300      	movs	r3, #0
 80078e0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	689a      	ldr	r2, [r3, #8]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	431a      	orrs	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	431a      	orrs	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	69db      	ldr	r3, [r3, #28]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078fe:	69fa      	ldr	r2, [r7, #28]
 8007900:	4313      	orrs	r3, r2
 8007902:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	4ba4      	ldr	r3, [pc, #656]	; (8007b9c <UART_SetConfig+0x2c8>)
 800790c:	4013      	ands	r3, r2
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	6812      	ldr	r2, [r2, #0]
 8007912:	69f9      	ldr	r1, [r7, #28]
 8007914:	430b      	orrs	r3, r1
 8007916:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	68da      	ldr	r2, [r3, #12]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	430a      	orrs	r2, r1
 800792c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a99      	ldr	r2, [pc, #612]	; (8007ba0 <UART_SetConfig+0x2cc>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d004      	beq.n	8007948 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	69fa      	ldr	r2, [r7, #28]
 8007944:	4313      	orrs	r3, r2
 8007946:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007952:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	6812      	ldr	r2, [r2, #0]
 800795a:	69f9      	ldr	r1, [r7, #28]
 800795c:	430b      	orrs	r3, r1
 800795e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007966:	f023 010f 	bic.w	r1, r3, #15
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	430a      	orrs	r2, r1
 8007974:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a8a      	ldr	r2, [pc, #552]	; (8007ba4 <UART_SetConfig+0x2d0>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d121      	bne.n	80079c4 <UART_SetConfig+0xf0>
 8007980:	2003      	movs	r0, #3
 8007982:	f7ff fd23 	bl	80073cc <LL_RCC_GetUSARTClockSource>
 8007986:	4603      	mov	r3, r0
 8007988:	2b03      	cmp	r3, #3
 800798a:	d817      	bhi.n	80079bc <UART_SetConfig+0xe8>
 800798c:	a201      	add	r2, pc, #4	; (adr r2, 8007994 <UART_SetConfig+0xc0>)
 800798e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007992:	bf00      	nop
 8007994:	080079a5 	.word	0x080079a5
 8007998:	080079b1 	.word	0x080079b1
 800799c:	080079ab 	.word	0x080079ab
 80079a0:	080079b7 	.word	0x080079b7
 80079a4:	2301      	movs	r3, #1
 80079a6:	76fb      	strb	r3, [r7, #27]
 80079a8:	e038      	b.n	8007a1c <UART_SetConfig+0x148>
 80079aa:	2302      	movs	r3, #2
 80079ac:	76fb      	strb	r3, [r7, #27]
 80079ae:	e035      	b.n	8007a1c <UART_SetConfig+0x148>
 80079b0:	2304      	movs	r3, #4
 80079b2:	76fb      	strb	r3, [r7, #27]
 80079b4:	e032      	b.n	8007a1c <UART_SetConfig+0x148>
 80079b6:	2308      	movs	r3, #8
 80079b8:	76fb      	strb	r3, [r7, #27]
 80079ba:	e02f      	b.n	8007a1c <UART_SetConfig+0x148>
 80079bc:	2310      	movs	r3, #16
 80079be:	76fb      	strb	r3, [r7, #27]
 80079c0:	bf00      	nop
 80079c2:	e02b      	b.n	8007a1c <UART_SetConfig+0x148>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a75      	ldr	r2, [pc, #468]	; (8007ba0 <UART_SetConfig+0x2cc>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d124      	bne.n	8007a18 <UART_SetConfig+0x144>
 80079ce:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80079d2:	f7ff fd0b 	bl	80073ec <LL_RCC_GetLPUARTClockSource>
 80079d6:	4603      	mov	r3, r0
 80079d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079dc:	d012      	beq.n	8007a04 <UART_SetConfig+0x130>
 80079de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079e2:	d802      	bhi.n	80079ea <UART_SetConfig+0x116>
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d007      	beq.n	80079f8 <UART_SetConfig+0x124>
 80079e8:	e012      	b.n	8007a10 <UART_SetConfig+0x13c>
 80079ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079ee:	d006      	beq.n	80079fe <UART_SetConfig+0x12a>
 80079f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079f4:	d009      	beq.n	8007a0a <UART_SetConfig+0x136>
 80079f6:	e00b      	b.n	8007a10 <UART_SetConfig+0x13c>
 80079f8:	2300      	movs	r3, #0
 80079fa:	76fb      	strb	r3, [r7, #27]
 80079fc:	e00e      	b.n	8007a1c <UART_SetConfig+0x148>
 80079fe:	2302      	movs	r3, #2
 8007a00:	76fb      	strb	r3, [r7, #27]
 8007a02:	e00b      	b.n	8007a1c <UART_SetConfig+0x148>
 8007a04:	2304      	movs	r3, #4
 8007a06:	76fb      	strb	r3, [r7, #27]
 8007a08:	e008      	b.n	8007a1c <UART_SetConfig+0x148>
 8007a0a:	2308      	movs	r3, #8
 8007a0c:	76fb      	strb	r3, [r7, #27]
 8007a0e:	e005      	b.n	8007a1c <UART_SetConfig+0x148>
 8007a10:	2310      	movs	r3, #16
 8007a12:	76fb      	strb	r3, [r7, #27]
 8007a14:	bf00      	nop
 8007a16:	e001      	b.n	8007a1c <UART_SetConfig+0x148>
 8007a18:	2310      	movs	r3, #16
 8007a1a:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a5f      	ldr	r2, [pc, #380]	; (8007ba0 <UART_SetConfig+0x2cc>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	f040 808e 	bne.w	8007b44 <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a28:	7efb      	ldrb	r3, [r7, #27]
 8007a2a:	2b08      	cmp	r3, #8
 8007a2c:	d823      	bhi.n	8007a76 <UART_SetConfig+0x1a2>
 8007a2e:	a201      	add	r2, pc, #4	; (adr r2, 8007a34 <UART_SetConfig+0x160>)
 8007a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a34:	08007a59 	.word	0x08007a59
 8007a38:	08007a77 	.word	0x08007a77
 8007a3c:	08007a61 	.word	0x08007a61
 8007a40:	08007a77 	.word	0x08007a77
 8007a44:	08007a67 	.word	0x08007a67
 8007a48:	08007a77 	.word	0x08007a77
 8007a4c:	08007a77 	.word	0x08007a77
 8007a50:	08007a77 	.word	0x08007a77
 8007a54:	08007a6f 	.word	0x08007a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a58:	f7fe fbe2 	bl	8006220 <HAL_RCC_GetPCLK1Freq>
 8007a5c:	6178      	str	r0, [r7, #20]
        break;
 8007a5e:	e00f      	b.n	8007a80 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a60:	4b51      	ldr	r3, [pc, #324]	; (8007ba8 <UART_SetConfig+0x2d4>)
 8007a62:	617b      	str	r3, [r7, #20]
        break;
 8007a64:	e00c      	b.n	8007a80 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a66:	f7fe fb5d 	bl	8006124 <HAL_RCC_GetSysClockFreq>
 8007a6a:	6178      	str	r0, [r7, #20]
        break;
 8007a6c:	e008      	b.n	8007a80 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a72:	617b      	str	r3, [r7, #20]
        break;
 8007a74:	e004      	b.n	8007a80 <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 8007a76:	2300      	movs	r3, #0
 8007a78:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	76bb      	strb	r3, [r7, #26]
        break;
 8007a7e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f000 811c 	beq.w	8007cc0 <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8c:	4a47      	ldr	r2, [pc, #284]	; (8007bac <UART_SetConfig+0x2d8>)
 8007a8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a92:	461a      	mov	r2, r3
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a9a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	005b      	lsls	r3, r3, #1
 8007aa4:	4413      	add	r3, r2
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d305      	bcc.n	8007ab8 <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ab2:	68ba      	ldr	r2, [r7, #8]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d902      	bls.n	8007abe <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	76bb      	strb	r3, [r7, #26]
 8007abc:	e100      	b.n	8007cc0 <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f04f 0100 	mov.w	r1, #0
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aca:	4a38      	ldr	r2, [pc, #224]	; (8007bac <UART_SetConfig+0x2d8>)
 8007acc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	f04f 0400 	mov.w	r4, #0
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	4623      	mov	r3, r4
 8007ada:	f7f9 f83d 	bl	8000b58 <__aeabi_uldivmod>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	460c      	mov	r4, r1
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	4622      	mov	r2, r4
 8007ae6:	f04f 0300 	mov.w	r3, #0
 8007aea:	f04f 0400 	mov.w	r4, #0
 8007aee:	0214      	lsls	r4, r2, #8
 8007af0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007af4:	020b      	lsls	r3, r1, #8
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	6852      	ldr	r2, [r2, #4]
 8007afa:	0852      	lsrs	r2, r2, #1
 8007afc:	4611      	mov	r1, r2
 8007afe:	f04f 0200 	mov.w	r2, #0
 8007b02:	eb13 0b01 	adds.w	fp, r3, r1
 8007b06:	eb44 0c02 	adc.w	ip, r4, r2
 8007b0a:	4658      	mov	r0, fp
 8007b0c:	4661      	mov	r1, ip
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	f04f 0400 	mov.w	r4, #0
 8007b16:	461a      	mov	r2, r3
 8007b18:	4623      	mov	r3, r4
 8007b1a:	f7f9 f81d 	bl	8000b58 <__aeabi_uldivmod>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	460c      	mov	r4, r1
 8007b22:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b2a:	d308      	bcc.n	8007b3e <UART_SetConfig+0x26a>
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b32:	d204      	bcs.n	8007b3e <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	693a      	ldr	r2, [r7, #16]
 8007b3a:	60da      	str	r2, [r3, #12]
 8007b3c:	e0c0      	b.n	8007cc0 <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	76bb      	strb	r3, [r7, #26]
 8007b42:	e0bd      	b.n	8007cc0 <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	69db      	ldr	r3, [r3, #28]
 8007b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b4c:	d169      	bne.n	8007c22 <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007b4e:	7efb      	ldrb	r3, [r7, #27]
 8007b50:	3b01      	subs	r3, #1
 8007b52:	2b07      	cmp	r3, #7
 8007b54:	d82c      	bhi.n	8007bb0 <UART_SetConfig+0x2dc>
 8007b56:	a201      	add	r2, pc, #4	; (adr r2, 8007b5c <UART_SetConfig+0x288>)
 8007b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5c:	08007b7d 	.word	0x08007b7d
 8007b60:	08007b85 	.word	0x08007b85
 8007b64:	08007bb1 	.word	0x08007bb1
 8007b68:	08007b8b 	.word	0x08007b8b
 8007b6c:	08007bb1 	.word	0x08007bb1
 8007b70:	08007bb1 	.word	0x08007bb1
 8007b74:	08007bb1 	.word	0x08007bb1
 8007b78:	08007b93 	.word	0x08007b93
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b7c:	f7fe fb66 	bl	800624c <HAL_RCC_GetPCLK2Freq>
 8007b80:	6178      	str	r0, [r7, #20]
        break;
 8007b82:	e01a      	b.n	8007bba <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b84:	4b08      	ldr	r3, [pc, #32]	; (8007ba8 <UART_SetConfig+0x2d4>)
 8007b86:	617b      	str	r3, [r7, #20]
        break;
 8007b88:	e017      	b.n	8007bba <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b8a:	f7fe facb 	bl	8006124 <HAL_RCC_GetSysClockFreq>
 8007b8e:	6178      	str	r0, [r7, #20]
        break;
 8007b90:	e013      	b.n	8007bba <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b96:	617b      	str	r3, [r7, #20]
        break;
 8007b98:	e00f      	b.n	8007bba <UART_SetConfig+0x2e6>
 8007b9a:	bf00      	nop
 8007b9c:	cfff69f3 	.word	0xcfff69f3
 8007ba0:	40008000 	.word	0x40008000
 8007ba4:	40013800 	.word	0x40013800
 8007ba8:	00f42400 	.word	0x00f42400
 8007bac:	08011f68 	.word	0x08011f68
      default:
        pclk = 0U;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	76bb      	strb	r3, [r7, #26]
        break;
 8007bb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d07f      	beq.n	8007cc0 <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc4:	4a48      	ldr	r2, [pc, #288]	; (8007ce8 <UART_SetConfig+0x414>)
 8007bc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bd2:	005a      	lsls	r2, r3, #1
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	085b      	lsrs	r3, r3, #1
 8007bda:	441a      	add	r2, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	2b0f      	cmp	r3, #15
 8007bec:	d916      	bls.n	8007c1c <UART_SetConfig+0x348>
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bf4:	d212      	bcs.n	8007c1c <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	f023 030f 	bic.w	r3, r3, #15
 8007bfe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	085b      	lsrs	r3, r3, #1
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	f003 0307 	and.w	r3, r3, #7
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	89fb      	ldrh	r3, [r7, #14]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	89fa      	ldrh	r2, [r7, #14]
 8007c18:	60da      	str	r2, [r3, #12]
 8007c1a:	e051      	b.n	8007cc0 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	76bb      	strb	r3, [r7, #26]
 8007c20:	e04e      	b.n	8007cc0 <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c22:	7efb      	ldrb	r3, [r7, #27]
 8007c24:	3b01      	subs	r3, #1
 8007c26:	2b07      	cmp	r3, #7
 8007c28:	d821      	bhi.n	8007c6e <UART_SetConfig+0x39a>
 8007c2a:	a201      	add	r2, pc, #4	; (adr r2, 8007c30 <UART_SetConfig+0x35c>)
 8007c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c30:	08007c51 	.word	0x08007c51
 8007c34:	08007c59 	.word	0x08007c59
 8007c38:	08007c6f 	.word	0x08007c6f
 8007c3c:	08007c5f 	.word	0x08007c5f
 8007c40:	08007c6f 	.word	0x08007c6f
 8007c44:	08007c6f 	.word	0x08007c6f
 8007c48:	08007c6f 	.word	0x08007c6f
 8007c4c:	08007c67 	.word	0x08007c67
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c50:	f7fe fafc 	bl	800624c <HAL_RCC_GetPCLK2Freq>
 8007c54:	6178      	str	r0, [r7, #20]
        break;
 8007c56:	e00f      	b.n	8007c78 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c58:	4b24      	ldr	r3, [pc, #144]	; (8007cec <UART_SetConfig+0x418>)
 8007c5a:	617b      	str	r3, [r7, #20]
        break;
 8007c5c:	e00c      	b.n	8007c78 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c5e:	f7fe fa61 	bl	8006124 <HAL_RCC_GetSysClockFreq>
 8007c62:	6178      	str	r0, [r7, #20]
        break;
 8007c64:	e008      	b.n	8007c78 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c6a:	617b      	str	r3, [r7, #20]
        break;
 8007c6c:	e004      	b.n	8007c78 <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	76bb      	strb	r3, [r7, #26]
        break;
 8007c76:	bf00      	nop
    }

    if (pclk != 0U)
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d020      	beq.n	8007cc0 <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c82:	4a19      	ldr	r2, [pc, #100]	; (8007ce8 <UART_SetConfig+0x414>)
 8007c84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c88:	461a      	mov	r2, r3
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	085b      	lsrs	r3, r3, #1
 8007c96:	441a      	add	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	2b0f      	cmp	r3, #15
 8007ca8:	d908      	bls.n	8007cbc <UART_SetConfig+0x3e8>
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cb0:	d204      	bcs.n	8007cbc <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	60da      	str	r2, [r3, #12]
 8007cba:	e001      	b.n	8007cc0 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8007cdc:	7ebb      	ldrb	r3, [r7, #26]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3720      	adds	r7, #32
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007ce8:	08011f68 	.word	0x08011f68
 8007cec:	00f42400 	.word	0x00f42400

08007cf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfc:	f003 0301 	and.w	r3, r3, #1
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00a      	beq.n	8007d1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	430a      	orrs	r2, r1
 8007d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d1e:	f003 0302 	and.w	r3, r3, #2
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00a      	beq.n	8007d3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	430a      	orrs	r2, r1
 8007d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d40:	f003 0304 	and.w	r3, r3, #4
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00a      	beq.n	8007d5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d62:	f003 0308 	and.w	r3, r3, #8
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00a      	beq.n	8007d80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	430a      	orrs	r2, r1
 8007d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d84:	f003 0310 	and.w	r3, r3, #16
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00a      	beq.n	8007da2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	430a      	orrs	r2, r1
 8007da0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da6:	f003 0320 	and.w	r3, r3, #32
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00a      	beq.n	8007dc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	430a      	orrs	r2, r1
 8007dc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d01a      	beq.n	8007e06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	430a      	orrs	r2, r1
 8007de4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dee:	d10a      	bne.n	8007e06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	430a      	orrs	r2, r1
 8007e04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00a      	beq.n	8007e28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	430a      	orrs	r2, r1
 8007e26:	605a      	str	r2, [r3, #4]
  }
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af02      	add	r7, sp, #8
 8007e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007e44:	f7fc fa92 	bl	800436c <HAL_GetTick>
 8007e48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 0308 	and.w	r3, r3, #8
 8007e54:	2b08      	cmp	r3, #8
 8007e56:	d10e      	bne.n	8007e76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 f82c 	bl	8007ec4 <UART_WaitOnFlagUntilTimeout>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d001      	beq.n	8007e76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e72:	2303      	movs	r3, #3
 8007e74:	e022      	b.n	8007ebc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 0304 	and.w	r3, r3, #4
 8007e80:	2b04      	cmp	r3, #4
 8007e82:	d10e      	bne.n	8007ea2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f816 	bl	8007ec4 <UART_WaitOnFlagUntilTimeout>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d001      	beq.n	8007ea2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	e00c      	b.n	8007ebc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2220      	movs	r2, #32
 8007ea6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2220      	movs	r2, #32
 8007eae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	603b      	str	r3, [r7, #0]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ed4:	e062      	b.n	8007f9c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007edc:	d05e      	beq.n	8007f9c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ede:	f7fc fa45 	bl	800436c <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	69ba      	ldr	r2, [r7, #24]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d302      	bcc.n	8007ef4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d11d      	bne.n	8007f30 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f02:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	689a      	ldr	r2, [r3, #8]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f022 0201 	bic.w	r2, r2, #1
 8007f12:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2220      	movs	r2, #32
 8007f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2220      	movs	r2, #32
 8007f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	e045      	b.n	8007fbc <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 0304 	and.w	r3, r3, #4
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d02e      	beq.n	8007f9c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	69db      	ldr	r3, [r3, #28]
 8007f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f4c:	d126      	bne.n	8007f9c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f56:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f66:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	689a      	ldr	r2, [r3, #8]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f022 0201 	bic.w	r2, r2, #1
 8007f76:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2220      	movs	r2, #32
 8007f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2220      	movs	r2, #32
 8007f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2220      	movs	r2, #32
 8007f8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e00f      	b.n	8007fbc <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	69da      	ldr	r2, [r3, #28]
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	bf0c      	ite	eq
 8007fac:	2301      	moveq	r3, #1
 8007fae:	2300      	movne	r3, #0
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	79fb      	ldrb	r3, [r7, #7]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d08d      	beq.n	8007ed6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007fda:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	689a      	ldr	r2, [r3, #8]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8007fea:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2220      	movs	r2, #32
 8007ff0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008016:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	6812      	ldr	r2, [r2, #0]
 8008022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008026:	f023 0301 	bic.w	r3, r3, #1
 800802a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2220      	movs	r2, #32
 8008030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800803a:	bf00      	nop
 800803c:	370c      	adds	r7, #12
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr

08008046 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b084      	sub	sp, #16
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008052:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 0320 	and.w	r3, r3, #32
 800805e:	2b00      	cmp	r3, #0
 8008060:	d114      	bne.n	800808c <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	689a      	ldr	r2, [r3, #8]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008078:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008088:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800808a:	e002      	b.n	8008092 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f7fb f8c9 	bl	8003224 <HAL_UART_TxCpltCallback>
}
 8008092:	bf00      	nop
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b084      	sub	sp, #16
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f7ff fbff 	bl	80078ac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080ae:	bf00      	nop
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b086      	sub	sp, #24
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080ca:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080d2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080de:	2b80      	cmp	r3, #128	; 0x80
 80080e0:	d109      	bne.n	80080f6 <UART_DMAError+0x40>
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	2b21      	cmp	r3, #33	; 0x21
 80080e6:	d106      	bne.n	80080f6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80080f0:	6978      	ldr	r0, [r7, #20]
 80080f2:	f7ff ff67 	bl	8007fc4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008100:	2b40      	cmp	r3, #64	; 0x40
 8008102:	d109      	bne.n	8008118 <UART_DMAError+0x62>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2b22      	cmp	r3, #34	; 0x22
 8008108:	d106      	bne.n	8008118 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	2200      	movs	r2, #0
 800810e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008112:	6978      	ldr	r0, [r7, #20]
 8008114:	f7ff ff74 	bl	8008000 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800811e:	f043 0210 	orr.w	r2, r3, #16
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008128:	6978      	ldr	r0, [r7, #20]
 800812a:	f7ff fbc9 	bl	80078c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800812e:	bf00      	nop
 8008130:	3718      	adds	r7, #24
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b084      	sub	sp, #16
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008142:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2200      	movs	r2, #0
 8008148:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f7ff fbb3 	bl	80078c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800815a:	bf00      	nop
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b082      	sub	sp, #8
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008178:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2220      	movs	r2, #32
 800817e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f7fb f84b 	bl	8003224 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800818e:	bf00      	nop
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008196:	b480      	push	{r7}
 8008198:	b083      	sub	sp, #12
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800819e:	bf00      	nop
 80081a0:	370c      	adds	r7, #12
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b083      	sub	sp, #12
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80081b2:	bf00      	nop
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80081be:	b480      	push	{r7}
 80081c0:	b083      	sub	sp, #12
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80081c6:	bf00      	nop
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80081d2:	b480      	push	{r7}
 80081d4:	b085      	sub	sp, #20
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d101      	bne.n	80081e8 <HAL_UARTEx_DisableFifoMode+0x16>
 80081e4:	2302      	movs	r3, #2
 80081e6:	e027      	b.n	8008238 <HAL_UARTEx_DisableFifoMode+0x66>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2224      	movs	r2, #36	; 0x24
 80081f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f022 0201 	bic.w	r2, r2, #1
 800820e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008216:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2220      	movs	r2, #32
 800822a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008254:	2b01      	cmp	r3, #1
 8008256:	d101      	bne.n	800825c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008258:	2302      	movs	r3, #2
 800825a:	e02d      	b.n	80082b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2224      	movs	r2, #36	; 0x24
 8008268:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f022 0201 	bic.w	r2, r2, #1
 8008282:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	683a      	ldr	r2, [r7, #0]
 8008294:	430a      	orrs	r2, r1
 8008296:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 f84f 	bl	800833c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2220      	movs	r2, #32
 80082aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d101      	bne.n	80082d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80082d4:	2302      	movs	r3, #2
 80082d6:	e02d      	b.n	8008334 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2224      	movs	r2, #36	; 0x24
 80082e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f022 0201 	bic.w	r2, r2, #1
 80082fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	430a      	orrs	r2, r1
 8008312:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f811 	bl	800833c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2220      	movs	r2, #32
 8008326:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800833c:	b480      	push	{r7}
 800833e:	b089      	sub	sp, #36	; 0x24
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008344:	4a2f      	ldr	r2, [pc, #188]	; (8008404 <UARTEx_SetNbDataToProcess+0xc8>)
 8008346:	f107 0314 	add.w	r3, r7, #20
 800834a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800834e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008352:	4a2d      	ldr	r2, [pc, #180]	; (8008408 <UARTEx_SetNbDataToProcess+0xcc>)
 8008354:	f107 030c 	add.w	r3, r7, #12
 8008358:	e892 0003 	ldmia.w	r2, {r0, r1}
 800835c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008364:	2b00      	cmp	r3, #0
 8008366:	d108      	bne.n	800837a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008378:	e03d      	b.n	80083f6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800837a:	2308      	movs	r3, #8
 800837c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800837e:	2308      	movs	r3, #8
 8008380:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	0e5b      	lsrs	r3, r3, #25
 800838a:	b2db      	uxtb	r3, r3
 800838c:	f003 0307 	and.w	r3, r3, #7
 8008390:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	0f5b      	lsrs	r3, r3, #29
 800839a:	b2db      	uxtb	r3, r3
 800839c:	f003 0307 	and.w	r3, r3, #7
 80083a0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80083a2:	7fbb      	ldrb	r3, [r7, #30]
 80083a4:	7f3a      	ldrb	r2, [r7, #28]
 80083a6:	f107 0120 	add.w	r1, r7, #32
 80083aa:	440a      	add	r2, r1
 80083ac:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80083b0:	fb02 f303 	mul.w	r3, r2, r3
 80083b4:	7f3a      	ldrb	r2, [r7, #28]
 80083b6:	f107 0120 	add.w	r1, r7, #32
 80083ba:	440a      	add	r2, r1
 80083bc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80083c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80083cc:	7ffb      	ldrb	r3, [r7, #31]
 80083ce:	7f7a      	ldrb	r2, [r7, #29]
 80083d0:	f107 0120 	add.w	r1, r7, #32
 80083d4:	440a      	add	r2, r1
 80083d6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80083da:	fb02 f303 	mul.w	r3, r2, r3
 80083de:	7f7a      	ldrb	r2, [r7, #29]
 80083e0:	f107 0120 	add.w	r1, r7, #32
 80083e4:	440a      	add	r2, r1
 80083e6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80083ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80083f6:	bf00      	nop
 80083f8:	3724      	adds	r7, #36	; 0x24
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	08011c98 	.word	0x08011c98
 8008408:	08011ca0 	.word	0x08011ca0

0800840c <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800840c:	b480      	push	{r7}
 800840e:	af00      	add	r7, sp, #0
  return;
 8008410:	bf00      	nop
}
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800841a:	b480      	push	{r7}
 800841c:	af00      	add	r7, sp, #0
  return;
 800841e:	bf00      	nop
}
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <EDS_STM_Init>:
__weak void DIS_Init( void )
{
  return;
}
__weak void EDS_STM_Init( void )
{
 8008428:	b480      	push	{r7}
 800842a:	af00      	add	r7, sp, #0
  return;
 800842c:	bf00      	nop
}
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr

08008436 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8008436:	b480      	push	{r7}
 8008438:	af00      	add	r7, sp, #0
  return;
 800843a:	bf00      	nop
}
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <HTS_Init>:
__weak void HRS_Init( void )
{
  return;
}
__weak void HTS_Init( void )
{
 8008444:	b480      	push	{r7}
 8008446:	af00      	add	r7, sp, #0
  return;
 8008448:	bf00      	nop
}
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr

08008452 <IAS_Init>:
__weak void IAS_Init( void )
{
 8008452:	b480      	push	{r7}
 8008454:	af00      	add	r7, sp, #0
  return;
 8008456:	bf00      	nop
}
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <LLS_Init>:
__weak void LLS_Init( void )
{
 8008460:	b480      	push	{r7}
 8008462:	af00      	add	r7, sp, #0
  return;
 8008464:	bf00      	nop
}
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr

0800846e <TPS_Init>:
__weak void TPS_Init( void )
{
 800846e:	b480      	push	{r7}
 8008470:	af00      	add	r7, sp, #0
  return;
 8008472:	bf00      	nop
}
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800847c:	b480      	push	{r7}
 800847e:	af00      	add	r7, sp, #0
  return;
 8008480:	bf00      	nop
}
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr

0800848a <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800848a:	b480      	push	{r7}
 800848c:	af00      	add	r7, sp, #0
  return;
 800848e:	bf00      	nop
}
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <MESH_Init>:
__weak void MESH_Init( void )
{
 8008498:	b480      	push	{r7}
 800849a:	af00      	add	r7, sp, #0
  return;
 800849c:	bf00      	nop
}
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 80084a6:	b480      	push	{r7}
 80084a8:	af00      	add	r7, sp, #0
  return;
 80084aa:	bf00      	nop
}
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 80084b4:	b480      	push	{r7}
 80084b6:	af00      	add	r7, sp, #0
  return;
 80084b8:	bf00      	nop
}
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
	...

080084c4 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80084c8:	4b04      	ldr	r3, [pc, #16]	; (80084dc <SVCCTL_Init+0x18>)
 80084ca:	2200      	movs	r2, #0
 80084cc:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80084ce:	4b04      	ldr	r3, [pc, #16]	; (80084e0 <SVCCTL_Init+0x1c>)
 80084d0:	2200      	movs	r2, #0
 80084d2:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80084d4:	f000 f806 	bl	80084e4 <SVCCTL_SvcInit>

  return;
 80084d8:	bf00      	nop
}
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	20000338 	.word	0x20000338
 80084e0:	20000358 	.word	0x20000358

080084e4 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	af00      	add	r7, sp, #0
  BLS_Init();
 80084e8:	f7ff ff90 	bl	800840c <BLS_Init>

  CRS_STM_Init();
 80084ec:	f7ff ff95 	bl	800841a <CRS_STM_Init>

  //DIS_Init();

  EDS_STM_Init();
 80084f0:	f7ff ff9a 	bl	8008428 <EDS_STM_Init>

  HIDS_Init();
 80084f4:	f7ff ff9f 	bl	8008436 <HIDS_Init>

  //HRS_Init();

  HTS_Init();
 80084f8:	f7ff ffa4 	bl	8008444 <HTS_Init>

  IAS_Init();
 80084fc:	f7ff ffa9 	bl	8008452 <IAS_Init>

  LLS_Init();
 8008500:	f7ff ffae 	bl	8008460 <LLS_Init>

  TPS_Init();
 8008504:	f7ff ffb3 	bl	800846e <TPS_Init>

  MOTENV_STM_Init();
 8008508:	f7ff ffb8 	bl	800847c <MOTENV_STM_Init>

  P2PS_STM_Init();
 800850c:	f001 fdd4 	bl	800a0b8 <P2PS_STM_Init>

  OTAS_STM_Init();
 8008510:	f7ff ffbb 	bl	800848a <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8008514:	f7ff ffc7 	bl	80084a6 <BVOPUS_STM_Init>

  MESH_Init();
 8008518:	f7ff ffbe 	bl	8008498 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800851c:	f7ff ffca 	bl	80084b4 <SVCCTL_InitCustomSvc>
  
  return;
 8008520:	bf00      	nop
}
 8008522:	bd80      	pop	{r7, pc}

08008524 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800852c:	4b09      	ldr	r3, [pc, #36]	; (8008554 <SVCCTL_RegisterSvcHandler+0x30>)
 800852e:	7f1b      	ldrb	r3, [r3, #28]
 8008530:	4619      	mov	r1, r3
 8008532:	4a08      	ldr	r2, [pc, #32]	; (8008554 <SVCCTL_RegisterSvcHandler+0x30>)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800853a:	4b06      	ldr	r3, [pc, #24]	; (8008554 <SVCCTL_RegisterSvcHandler+0x30>)
 800853c:	7f1b      	ldrb	r3, [r3, #28]
 800853e:	3301      	adds	r3, #1
 8008540:	b2da      	uxtb	r2, r3
 8008542:	4b04      	ldr	r3, [pc, #16]	; (8008554 <SVCCTL_RegisterSvcHandler+0x30>)
 8008544:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8008546:	bf00      	nop
}
 8008548:	370c      	adds	r7, #12
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	20000338 	.word	0x20000338

08008558 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b086      	sub	sp, #24
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	3301      	adds	r3, #1
 8008564:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8008566:	2300      	movs	r3, #0
 8008568:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	2bff      	cmp	r3, #255	; 0xff
 8008570:	d000      	beq.n	8008574 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8008572:	e025      	b.n	80085c0 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	3302      	adds	r3, #2
 8008578:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	881b      	ldrh	r3, [r3, #0]
 800857e:	b29b      	uxth	r3, r3
 8008580:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008584:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008588:	d000      	beq.n	800858c <SVCCTL_UserEvtRx+0x34>
          break;
 800858a:	e018      	b.n	80085be <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800858c:	2300      	movs	r3, #0
 800858e:	757b      	strb	r3, [r7, #21]
 8008590:	e00d      	b.n	80085ae <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8008592:	7d7b      	ldrb	r3, [r7, #21]
 8008594:	4a18      	ldr	r2, [pc, #96]	; (80085f8 <SVCCTL_UserEvtRx+0xa0>)
 8008596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	4798      	blx	r3
 800859e:	4603      	mov	r3, r0
 80085a0:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 80085a2:	7dfb      	ldrb	r3, [r7, #23]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d108      	bne.n	80085ba <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80085a8:	7d7b      	ldrb	r3, [r7, #21]
 80085aa:	3301      	adds	r3, #1
 80085ac:	757b      	strb	r3, [r7, #21]
 80085ae:	4b12      	ldr	r3, [pc, #72]	; (80085f8 <SVCCTL_UserEvtRx+0xa0>)
 80085b0:	7f1b      	ldrb	r3, [r3, #28]
 80085b2:	7d7a      	ldrb	r2, [r7, #21]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d3ec      	bcc.n	8008592 <SVCCTL_UserEvtRx+0x3a>
          break;
 80085b8:	e000      	b.n	80085bc <SVCCTL_UserEvtRx+0x64>
              break;
 80085ba:	bf00      	nop
          break;
 80085bc:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 80085be:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 80085c0:	7dfb      	ldrb	r3, [r7, #23]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d009      	beq.n	80085da <SVCCTL_UserEvtRx+0x82>
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d00a      	beq.n	80085e0 <SVCCTL_UserEvtRx+0x88>
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d10b      	bne.n	80085e6 <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f7f8 fcdc 	bl	8000f8c <SVCCTL_App_Notification>
 80085d4:	4603      	mov	r3, r0
 80085d6:	75bb      	strb	r3, [r7, #22]
      break;
 80085d8:	e008      	b.n	80085ec <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80085da:	2301      	movs	r3, #1
 80085dc:	75bb      	strb	r3, [r7, #22]
      break;
 80085de:	e005      	b.n	80085ec <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80085e0:	2300      	movs	r3, #0
 80085e2:	75bb      	strb	r3, [r7, #22]
      break;
 80085e4:	e002      	b.n	80085ec <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80085e6:	2301      	movs	r3, #1
 80085e8:	75bb      	strb	r3, [r7, #22]
      break;
 80085ea:	bf00      	nop
  }

  return (return_status);
 80085ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3718      	adds	r7, #24
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	20000338 	.word	0x20000338

080085fc <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b088      	sub	sp, #32
 8008600:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008602:	2300      	movs	r3, #0
 8008604:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008606:	f107 0308 	add.w	r3, r7, #8
 800860a:	2218      	movs	r2, #24
 800860c:	2100      	movs	r1, #0
 800860e:	4618      	mov	r0, r3
 8008610:	f000 ff9c 	bl	800954c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008614:	233f      	movs	r3, #63	; 0x3f
 8008616:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8008618:	2381      	movs	r3, #129	; 0x81
 800861a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800861c:	1dfb      	adds	r3, r7, #7
 800861e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008620:	2301      	movs	r3, #1
 8008622:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008624:	f107 0308 	add.w	r3, r7, #8
 8008628:	2100      	movs	r1, #0
 800862a:	4618      	mov	r0, r3
 800862c:	f001 f836 	bl	800969c <hci_send_req>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	da01      	bge.n	800863a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008636:	23ff      	movs	r3, #255	; 0xff
 8008638:	e000      	b.n	800863c <aci_gap_set_non_discoverable+0x40>
  return status;
 800863a:	79fb      	ldrb	r3, [r7, #7]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3720      	adds	r7, #32
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8008644:	b5b0      	push	{r4, r5, r7, lr}
 8008646:	b0ce      	sub	sp, #312	; 0x138
 8008648:	af00      	add	r7, sp, #0
 800864a:	4605      	mov	r5, r0
 800864c:	460c      	mov	r4, r1
 800864e:	4610      	mov	r0, r2
 8008650:	4619      	mov	r1, r3
 8008652:	1dfb      	adds	r3, r7, #7
 8008654:	462a      	mov	r2, r5
 8008656:	701a      	strb	r2, [r3, #0]
 8008658:	1d3b      	adds	r3, r7, #4
 800865a:	4622      	mov	r2, r4
 800865c:	801a      	strh	r2, [r3, #0]
 800865e:	1cbb      	adds	r3, r7, #2
 8008660:	4602      	mov	r2, r0
 8008662:	801a      	strh	r2, [r3, #0]
 8008664:	1dbb      	adds	r3, r7, #6
 8008666:	460a      	mov	r2, r1
 8008668:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800866a:	f107 0310 	add.w	r3, r7, #16
 800866e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8008672:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008676:	3308      	adds	r3, #8
 8008678:	f107 0210 	add.w	r2, r7, #16
 800867c:	4413      	add	r3, r2
 800867e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8008682:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008686:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800868a:	4413      	add	r3, r2
 800868c:	3309      	adds	r3, #9
 800868e:	f107 0210 	add.w	r2, r7, #16
 8008692:	4413      	add	r3, r2
 8008694:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008698:	f107 030f 	add.w	r3, r7, #15
 800869c:	2200      	movs	r2, #0
 800869e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80086a0:	2300      	movs	r3, #0
 80086a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 80086a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80086aa:	1dfa      	adds	r2, r7, #7
 80086ac:	7812      	ldrb	r2, [r2, #0]
 80086ae:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80086b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086b4:	3301      	adds	r3, #1
 80086b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80086ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80086be:	1d3a      	adds	r2, r7, #4
 80086c0:	8812      	ldrh	r2, [r2, #0]
 80086c2:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80086c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086ca:	3302      	adds	r3, #2
 80086cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80086d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80086d4:	1cba      	adds	r2, r7, #2
 80086d6:	8812      	ldrh	r2, [r2, #0]
 80086d8:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80086dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086e0:	3302      	adds	r3, #2
 80086e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80086e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80086ea:	1dba      	adds	r2, r7, #6
 80086ec:	7812      	ldrb	r2, [r2, #0]
 80086ee:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80086f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086f4:	3301      	adds	r3, #1
 80086f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80086fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80086fe:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008702:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008704:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008708:	3301      	adds	r3, #1
 800870a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800870e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008712:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008716:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8008718:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800871c:	3301      	adds	r3, #1
 800871e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8008722:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008726:	3308      	adds	r3, #8
 8008728:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800872c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8008730:	4618      	mov	r0, r3
 8008732:	f000 fefb 	bl	800952c <Osal_MemCpy>
    index_input += Local_Name_Length;
 8008736:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800873a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800873e:	4413      	add	r3, r2
 8008740:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8008744:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008748:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800874c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800874e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008752:	3301      	adds	r3, #1
 8008754:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8008758:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800875c:	3301      	adds	r3, #1
 800875e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008762:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8008766:	4618      	mov	r0, r3
 8008768:	f000 fee0 	bl	800952c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800876c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008770:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008774:	4413      	add	r3, r2
 8008776:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800877a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800877e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8008782:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008784:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008788:	3302      	adds	r3, #2
 800878a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800878e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008792:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8008796:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8008798:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800879c:	3302      	adds	r3, #2
 800879e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80087a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80087a6:	2218      	movs	r2, #24
 80087a8:	2100      	movs	r1, #0
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 fece 	bl	800954c <Osal_MemSet>
  rq.ogf = 0x3f;
 80087b0:	233f      	movs	r3, #63	; 0x3f
 80087b2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 80087b6:	2383      	movs	r3, #131	; 0x83
 80087b8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80087bc:	f107 0310 	add.w	r3, r7, #16
 80087c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80087c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80087cc:	f107 030f 	add.w	r3, r7, #15
 80087d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80087d4:	2301      	movs	r3, #1
 80087d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80087da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80087de:	2100      	movs	r1, #0
 80087e0:	4618      	mov	r0, r3
 80087e2:	f000 ff5b 	bl	800969c <hci_send_req>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	da01      	bge.n	80087f0 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 80087ec:	23ff      	movs	r3, #255	; 0xff
 80087ee:	e002      	b.n	80087f6 <aci_gap_set_discoverable+0x1b2>
  return status;
 80087f0:	f107 030f 	add.w	r3, r7, #15
 80087f4:	781b      	ldrb	r3, [r3, #0]
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bdb0      	pop	{r4, r5, r7, pc}

08008800 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b0cc      	sub	sp, #304	; 0x130
 8008804:	af00      	add	r7, sp, #0
 8008806:	4602      	mov	r2, r0
 8008808:	1dfb      	adds	r3, r7, #7
 800880a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800880c:	f107 0310 	add.w	r3, r7, #16
 8008810:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008814:	f107 030f 	add.w	r3, r7, #15
 8008818:	2200      	movs	r2, #0
 800881a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800881c:	2300      	movs	r3, #0
 800881e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8008822:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008826:	1dfa      	adds	r2, r7, #7
 8008828:	7812      	ldrb	r2, [r2, #0]
 800882a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800882c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008830:	3301      	adds	r3, #1
 8008832:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008836:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800883a:	2218      	movs	r2, #24
 800883c:	2100      	movs	r1, #0
 800883e:	4618      	mov	r0, r3
 8008840:	f000 fe84 	bl	800954c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008844:	233f      	movs	r3, #63	; 0x3f
 8008846:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800884a:	2385      	movs	r3, #133	; 0x85
 800884c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008850:	f107 0310 	add.w	r3, r7, #16
 8008854:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008858:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800885c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008860:	f107 030f 	add.w	r3, r7, #15
 8008864:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008868:	2301      	movs	r3, #1
 800886a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800886e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008872:	2100      	movs	r1, #0
 8008874:	4618      	mov	r0, r3
 8008876:	f000 ff11 	bl	800969c <hci_send_req>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	da01      	bge.n	8008884 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8008880:	23ff      	movs	r3, #255	; 0xff
 8008882:	e002      	b.n	800888a <aci_gap_set_io_capability+0x8a>
  return status;
 8008884:	f107 030f 	add.w	r3, r7, #15
 8008888:	781b      	ldrb	r3, [r3, #0]
}
 800888a:	4618      	mov	r0, r3
 800888c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8008894:	b5b0      	push	{r4, r5, r7, lr}
 8008896:	b0cc      	sub	sp, #304	; 0x130
 8008898:	af00      	add	r7, sp, #0
 800889a:	4605      	mov	r5, r0
 800889c:	460c      	mov	r4, r1
 800889e:	4610      	mov	r0, r2
 80088a0:	4619      	mov	r1, r3
 80088a2:	1dfb      	adds	r3, r7, #7
 80088a4:	462a      	mov	r2, r5
 80088a6:	701a      	strb	r2, [r3, #0]
 80088a8:	1dbb      	adds	r3, r7, #6
 80088aa:	4622      	mov	r2, r4
 80088ac:	701a      	strb	r2, [r3, #0]
 80088ae:	1d7b      	adds	r3, r7, #5
 80088b0:	4602      	mov	r2, r0
 80088b2:	701a      	strb	r2, [r3, #0]
 80088b4:	1d3b      	adds	r3, r7, #4
 80088b6:	460a      	mov	r2, r1
 80088b8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80088ba:	f107 0310 	add.w	r3, r7, #16
 80088be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80088c2:	f107 030f 	add.w	r3, r7, #15
 80088c6:	2200      	movs	r2, #0
 80088c8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80088ca:	2300      	movs	r3, #0
 80088cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80088d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088d4:	1dfa      	adds	r2, r7, #7
 80088d6:	7812      	ldrb	r2, [r2, #0]
 80088d8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80088da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088de:	3301      	adds	r3, #1
 80088e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 80088e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088e8:	1dba      	adds	r2, r7, #6
 80088ea:	7812      	ldrb	r2, [r2, #0]
 80088ec:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80088ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088f2:	3301      	adds	r3, #1
 80088f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80088f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088fc:	1d7a      	adds	r2, r7, #5
 80088fe:	7812      	ldrb	r2, [r2, #0]
 8008900:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008902:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008906:	3301      	adds	r3, #1
 8008908:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800890c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008910:	1d3a      	adds	r2, r7, #4
 8008912:	7812      	ldrb	r2, [r2, #0]
 8008914:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008916:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800891a:	3301      	adds	r3, #1
 800891c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8008920:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008924:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8008928:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800892a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800892e:	3301      	adds	r3, #1
 8008930:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8008934:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008938:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800893c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800893e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008942:	3301      	adds	r3, #1
 8008944:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8008948:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800894c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008950:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008952:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008956:	3301      	adds	r3, #1
 8008958:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800895c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008960:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008964:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008968:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800896c:	3304      	adds	r3, #4
 800896e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8008972:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008976:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800897a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800897c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008980:	3301      	adds	r3, #1
 8008982:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008986:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800898a:	2218      	movs	r2, #24
 800898c:	2100      	movs	r1, #0
 800898e:	4618      	mov	r0, r3
 8008990:	f000 fddc 	bl	800954c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008994:	233f      	movs	r3, #63	; 0x3f
 8008996:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800899a:	2386      	movs	r3, #134	; 0x86
 800899c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80089a0:	f107 0310 	add.w	r3, r7, #16
 80089a4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80089a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80089b0:	f107 030f 	add.w	r3, r7, #15
 80089b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80089b8:	2301      	movs	r3, #1
 80089ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80089be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80089c2:	2100      	movs	r1, #0
 80089c4:	4618      	mov	r0, r3
 80089c6:	f000 fe69 	bl	800969c <hci_send_req>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	da01      	bge.n	80089d4 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 80089d0:	23ff      	movs	r3, #255	; 0xff
 80089d2:	e002      	b.n	80089da <aci_gap_set_authentication_requirement+0x146>
  return status;
 80089d4:	f107 030f 	add.w	r3, r7, #15
 80089d8:	781b      	ldrb	r3, [r3, #0]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bdb0      	pop	{r4, r5, r7, pc}

080089e4 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80089e4:	b590      	push	{r4, r7, lr}
 80089e6:	b0cd      	sub	sp, #308	; 0x134
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	4604      	mov	r4, r0
 80089ec:	4608      	mov	r0, r1
 80089ee:	4611      	mov	r1, r2
 80089f0:	463a      	mov	r2, r7
 80089f2:	6013      	str	r3, [r2, #0]
 80089f4:	1dfb      	adds	r3, r7, #7
 80089f6:	4622      	mov	r2, r4
 80089f8:	701a      	strb	r2, [r3, #0]
 80089fa:	1dbb      	adds	r3, r7, #6
 80089fc:	4602      	mov	r2, r0
 80089fe:	701a      	strb	r2, [r3, #0]
 8008a00:	1d7b      	adds	r3, r7, #5
 8008a02:	460a      	mov	r2, r1
 8008a04:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8008a06:	f107 0310 	add.w	r3, r7, #16
 8008a0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008a0e:	f107 0308 	add.w	r3, r7, #8
 8008a12:	2207      	movs	r2, #7
 8008a14:	2100      	movs	r1, #0
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 fd98 	bl	800954c <Osal_MemSet>
  int index_input = 0;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8008a22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a26:	1dfa      	adds	r2, r7, #7
 8008a28:	7812      	ldrb	r2, [r2, #0]
 8008a2a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008a2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a30:	3301      	adds	r3, #1
 8008a32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8008a36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a3a:	1dba      	adds	r2, r7, #6
 8008a3c:	7812      	ldrb	r2, [r2, #0]
 8008a3e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008a40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a44:	3301      	adds	r3, #1
 8008a46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8008a4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a4e:	1d7a      	adds	r2, r7, #5
 8008a50:	7812      	ldrb	r2, [r2, #0]
 8008a52:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008a54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a58:	3301      	adds	r3, #1
 8008a5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008a5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a62:	2218      	movs	r2, #24
 8008a64:	2100      	movs	r1, #0
 8008a66:	4618      	mov	r0, r3
 8008a68:	f000 fd70 	bl	800954c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008a6c:	233f      	movs	r3, #63	; 0x3f
 8008a6e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8008a72:	238a      	movs	r3, #138	; 0x8a
 8008a74:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008a78:	f107 0310 	add.w	r3, r7, #16
 8008a7c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008a80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a84:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008a88:	f107 0308 	add.w	r3, r7, #8
 8008a8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008a90:	2307      	movs	r3, #7
 8008a92:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008a96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f000 fdfd 	bl	800969c <hci_send_req>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	da01      	bge.n	8008aac <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8008aa8:	23ff      	movs	r3, #255	; 0xff
 8008aaa:	e021      	b.n	8008af0 <aci_gap_init+0x10c>
  if ( resp.Status )
 8008aac:	f107 0308 	add.w	r3, r7, #8
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d003      	beq.n	8008abe <aci_gap_init+0xda>
    return resp.Status;
 8008ab6:	f107 0308 	add.w	r3, r7, #8
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	e018      	b.n	8008af0 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8008abe:	f107 0308 	add.w	r3, r7, #8
 8008ac2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008ac6:	b29a      	uxth	r2, r3
 8008ac8:	463b      	mov	r3, r7
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8008ace:	f107 0308 	add.w	r3, r7, #8
 8008ad2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008ad6:	b29a      	uxth	r2, r3
 8008ad8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008adc:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8008ade:	f107 0308 	add.w	r3, r7, #8
 8008ae2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008aec:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd90      	pop	{r4, r7, pc}

08008afa <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b0cc      	sub	sp, #304	; 0x130
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	4602      	mov	r2, r0
 8008b02:	463b      	mov	r3, r7
 8008b04:	6019      	str	r1, [r3, #0]
 8008b06:	1dfb      	adds	r3, r7, #7
 8008b08:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8008b0a:	f107 0310 	add.w	r3, r7, #16
 8008b0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008b12:	f107 030f 	add.w	r3, r7, #15
 8008b16:	2200      	movs	r2, #0
 8008b18:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8008b20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b24:	1dfa      	adds	r2, r7, #7
 8008b26:	7812      	ldrb	r2, [r2, #0]
 8008b28:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008b2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b2e:	3301      	adds	r3, #1
 8008b30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8008b34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b38:	1c58      	adds	r0, r3, #1
 8008b3a:	1dfb      	adds	r3, r7, #7
 8008b3c:	781a      	ldrb	r2, [r3, #0]
 8008b3e:	463b      	mov	r3, r7
 8008b40:	6819      	ldr	r1, [r3, #0]
 8008b42:	f000 fcf3 	bl	800952c <Osal_MemCpy>
  index_input += AdvDataLen;
 8008b46:	1dfb      	adds	r3, r7, #7
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008b4e:	4413      	add	r3, r2
 8008b50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b58:	2218      	movs	r2, #24
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f000 fcf5 	bl	800954c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008b62:	233f      	movs	r3, #63	; 0x3f
 8008b64:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8008b68:	238e      	movs	r3, #142	; 0x8e
 8008b6a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008b6e:	f107 0310 	add.w	r3, r7, #16
 8008b72:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008b76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b7a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008b7e:	f107 030f 	add.w	r3, r7, #15
 8008b82:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008b86:	2301      	movs	r3, #1
 8008b88:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008b8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b90:	2100      	movs	r1, #0
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 fd82 	bl	800969c <hci_send_req>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	da01      	bge.n	8008ba2 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8008b9e:	23ff      	movs	r3, #255	; 0xff
 8008ba0:	e002      	b.n	8008ba8 <aci_gap_update_adv_data+0xae>
  return status;
 8008ba2:	f107 030f 	add.w	r3, r7, #15
 8008ba6:	781b      	ldrb	r3, [r3, #0]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b088      	sub	sp, #32
 8008bb6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008bbc:	f107 0308 	add.w	r3, r7, #8
 8008bc0:	2218      	movs	r2, #24
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f000 fcc1 	bl	800954c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008bca:	233f      	movs	r3, #63	; 0x3f
 8008bcc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8008bce:	2392      	movs	r3, #146	; 0x92
 8008bd0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008bd2:	1dfb      	adds	r3, r7, #7
 8008bd4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008bda:	f107 0308 	add.w	r3, r7, #8
 8008bde:	2100      	movs	r1, #0
 8008be0:	4618      	mov	r0, r3
 8008be2:	f000 fd5b 	bl	800969c <hci_send_req>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	da01      	bge.n	8008bf0 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008bec:	23ff      	movs	r3, #255	; 0xff
 8008bee:	e000      	b.n	8008bf2 <aci_gap_configure_whitelist+0x40>
  return status;
 8008bf0:	79fb      	ldrb	r3, [r7, #7]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3720      	adds	r7, #32
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b0cc      	sub	sp, #304	; 0x130
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	4602      	mov	r2, r0
 8008c02:	1dbb      	adds	r3, r7, #6
 8008c04:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 8008c06:	f107 0310 	add.w	r3, r7, #16
 8008c0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008c0e:	f107 030f 	add.w	r3, r7, #15
 8008c12:	2200      	movs	r2, #0
 8008c14:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008c16:	2300      	movs	r3, #0
 8008c18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c20:	1dba      	adds	r2, r7, #6
 8008c22:	8812      	ldrh	r2, [r2, #0]
 8008c24:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008c26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c2a:	3302      	adds	r3, #2
 8008c2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008c30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c34:	2218      	movs	r2, #24
 8008c36:	2100      	movs	r1, #0
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f000 fc87 	bl	800954c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008c3e:	233f      	movs	r3, #63	; 0x3f
 8008c40:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 8008c44:	2395      	movs	r3, #149	; 0x95
 8008c46:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008c4a:	f107 0310 	add.w	r3, r7, #16
 8008c4e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008c52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c56:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008c5a:	f107 030f 	add.w	r3, r7, #15
 8008c5e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008c62:	2301      	movs	r3, #1
 8008c64:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008c68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 fd14 	bl	800969c <hci_send_req>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	da01      	bge.n	8008c7e <aci_gap_allow_rebond+0x84>
    return BLE_STATUS_TIMEOUT;
 8008c7a:	23ff      	movs	r3, #255	; 0xff
 8008c7c:	e002      	b.n	8008c84 <aci_gap_allow_rebond+0x8a>
  return status;
 8008c7e:	f107 030f 	add.w	r3, r7, #15
 8008c82:	781b      	ldrb	r3, [r3, #0]
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b0cc      	sub	sp, #304	; 0x130
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	4602      	mov	r2, r0
 8008c96:	1dbb      	adds	r3, r7, #6
 8008c98:	801a      	strh	r2, [r3, #0]
 8008c9a:	1d7b      	adds	r3, r7, #5
 8008c9c:	460a      	mov	r2, r1
 8008c9e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8008ca0:	f107 0310 	add.w	r3, r7, #16
 8008ca4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008ca8:	f107 030f 	add.w	r3, r7, #15
 8008cac:	2200      	movs	r2, #0
 8008cae:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cba:	1dba      	adds	r2, r7, #6
 8008cbc:	8812      	ldrh	r2, [r2, #0]
 8008cbe:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008cc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cc4:	3302      	adds	r3, #2
 8008cc6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8008cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cce:	1d7a      	adds	r2, r7, #5
 8008cd0:	7812      	ldrb	r2, [r2, #0]
 8008cd2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008cd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cd8:	3301      	adds	r3, #1
 8008cda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008cde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ce2:	2218      	movs	r2, #24
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 fc30 	bl	800954c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008cec:	233f      	movs	r3, #63	; 0x3f
 8008cee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8008cf2:	23a5      	movs	r3, #165	; 0xa5
 8008cf4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008cf8:	f107 0310 	add.w	r3, r7, #16
 8008cfc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008d00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d04:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008d08:	f107 030f 	add.w	r3, r7, #15
 8008d0c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008d10:	2301      	movs	r3, #1
 8008d12:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008d16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f000 fcbd 	bl	800969c <hci_send_req>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	da01      	bge.n	8008d2c <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 8008d28:	23ff      	movs	r3, #255	; 0xff
 8008d2a:	e002      	b.n	8008d32 <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 8008d2c:	f107 030f 	add.w	r3, r7, #15
 8008d30:	781b      	ldrb	r3, [r3, #0]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b088      	sub	sp, #32
 8008d40:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008d42:	2300      	movs	r3, #0
 8008d44:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008d46:	f107 0308 	add.w	r3, r7, #8
 8008d4a:	2218      	movs	r2, #24
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 fbfc 	bl	800954c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008d54:	233f      	movs	r3, #63	; 0x3f
 8008d56:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8008d58:	f240 1301 	movw	r3, #257	; 0x101
 8008d5c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008d5e:	1dfb      	adds	r3, r7, #7
 8008d60:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008d62:	2301      	movs	r3, #1
 8008d64:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008d66:	f107 0308 	add.w	r3, r7, #8
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f000 fc95 	bl	800969c <hci_send_req>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	da01      	bge.n	8008d7c <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8008d78:	23ff      	movs	r3, #255	; 0xff
 8008d7a:	e000      	b.n	8008d7e <aci_gatt_init+0x42>
  return status;
 8008d7c:	79fb      	ldrb	r3, [r7, #7]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3720      	adds	r7, #32
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8008d86:	b590      	push	{r4, r7, lr}
 8008d88:	b0cf      	sub	sp, #316	; 0x13c
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	4604      	mov	r4, r0
 8008d8e:	4638      	mov	r0, r7
 8008d90:	6001      	str	r1, [r0, #0]
 8008d92:	4610      	mov	r0, r2
 8008d94:	4619      	mov	r1, r3
 8008d96:	1dfb      	adds	r3, r7, #7
 8008d98:	4622      	mov	r2, r4
 8008d9a:	701a      	strb	r2, [r3, #0]
 8008d9c:	1dbb      	adds	r3, r7, #6
 8008d9e:	4602      	mov	r2, r0
 8008da0:	701a      	strb	r2, [r3, #0]
 8008da2:	1d7b      	adds	r3, r7, #5
 8008da4:	460a      	mov	r2, r1
 8008da6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8008da8:	f107 0310 	add.w	r3, r7, #16
 8008dac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8008db0:	1dfb      	adds	r3, r7, #7
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d007      	beq.n	8008dc8 <aci_gatt_add_service+0x42>
 8008db8:	1dfb      	adds	r3, r7, #7
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	d101      	bne.n	8008dc4 <aci_gatt_add_service+0x3e>
 8008dc0:	2311      	movs	r3, #17
 8008dc2:	e002      	b.n	8008dca <aci_gatt_add_service+0x44>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e000      	b.n	8008dca <aci_gatt_add_service+0x44>
 8008dc8:	2303      	movs	r3, #3
 8008dca:	f107 0210 	add.w	r2, r7, #16
 8008dce:	4413      	add	r3, r2
 8008dd0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008dd4:	f107 030c 	add.w	r3, r7, #12
 8008dd8:	2203      	movs	r2, #3
 8008dda:	2100      	movs	r1, #0
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f000 fbb5 	bl	800954c <Osal_MemSet>
  int index_input = 0;
 8008de2:	2300      	movs	r3, #0
 8008de4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8008de8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008dec:	1dfa      	adds	r2, r7, #7
 8008dee:	7812      	ldrb	r2, [r2, #0]
 8008df0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008df2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008df6:	3301      	adds	r3, #1
 8008df8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8008dfc:	1dfb      	adds	r3, r7, #7
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d002      	beq.n	8008e0a <aci_gatt_add_service+0x84>
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	d004      	beq.n	8008e12 <aci_gatt_add_service+0x8c>
 8008e08:	e007      	b.n	8008e1a <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 8008e0a:	2302      	movs	r3, #2
 8008e0c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008e10:	e005      	b.n	8008e1e <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 8008e12:	2310      	movs	r3, #16
 8008e14:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008e18:	e001      	b.n	8008e1e <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8008e1a:	2347      	movs	r3, #71	; 0x47
 8008e1c:	e05d      	b.n	8008eda <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8008e1e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008e22:	1c58      	adds	r0, r3, #1
 8008e24:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8008e28:	463b      	mov	r3, r7
 8008e2a:	6819      	ldr	r1, [r3, #0]
 8008e2c:	f000 fb7e 	bl	800952c <Osal_MemCpy>
    index_input += size;
 8008e30:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8008e34:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008e38:	4413      	add	r3, r2
 8008e3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8008e3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e42:	1dba      	adds	r2, r7, #6
 8008e44:	7812      	ldrb	r2, [r2, #0]
 8008e46:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008e48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8008e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e56:	1d7a      	adds	r2, r7, #5
 8008e58:	7812      	ldrb	r2, [r2, #0]
 8008e5a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8008e5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e60:	3301      	adds	r3, #1
 8008e62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008e66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e6a:	2218      	movs	r2, #24
 8008e6c:	2100      	movs	r1, #0
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f000 fb6c 	bl	800954c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008e74:	233f      	movs	r3, #63	; 0x3f
 8008e76:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8008e7a:	f44f 7381 	mov.w	r3, #258	; 0x102
 8008e7e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008e82:	f107 0310 	add.w	r3, r7, #16
 8008e86:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008e8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e8e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008e92:	f107 030c 	add.w	r3, r7, #12
 8008e96:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008ea0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 fbf8 	bl	800969c <hci_send_req>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	da01      	bge.n	8008eb6 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 8008eb2:	23ff      	movs	r3, #255	; 0xff
 8008eb4:	e011      	b.n	8008eda <aci_gatt_add_service+0x154>
  if ( resp.Status )
 8008eb6:	f107 030c 	add.w	r3, r7, #12
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d003      	beq.n	8008ec8 <aci_gatt_add_service+0x142>
    return resp.Status;
 8008ec0:	f107 030c 	add.w	r3, r7, #12
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	e008      	b.n	8008eda <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 8008ec8:	f107 030c 	add.w	r3, r7, #12
 8008ecc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008ed6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd90      	pop	{r4, r7, pc}

08008ee4 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8008ee4:	b590      	push	{r4, r7, lr}
 8008ee6:	b0d1      	sub	sp, #324	; 0x144
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	4604      	mov	r4, r0
 8008eec:	4608      	mov	r0, r1
 8008eee:	f107 0108 	add.w	r1, r7, #8
 8008ef2:	600a      	str	r2, [r1, #0]
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	f107 030e 	add.w	r3, r7, #14
 8008efa:	4622      	mov	r2, r4
 8008efc:	801a      	strh	r2, [r3, #0]
 8008efe:	f107 030d 	add.w	r3, r7, #13
 8008f02:	4602      	mov	r2, r0
 8008f04:	701a      	strb	r2, [r3, #0]
 8008f06:	1dbb      	adds	r3, r7, #6
 8008f08:	460a      	mov	r2, r1
 8008f0a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8008f0c:	f107 0318 	add.w	r3, r7, #24
 8008f10:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8008f14:	f107 030d 	add.w	r3, r7, #13
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d008      	beq.n	8008f30 <aci_gatt_add_char+0x4c>
 8008f1e:	f107 030d 	add.w	r3, r7, #13
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	2b02      	cmp	r3, #2
 8008f26:	d101      	bne.n	8008f2c <aci_gatt_add_char+0x48>
 8008f28:	2313      	movs	r3, #19
 8008f2a:	e002      	b.n	8008f32 <aci_gatt_add_char+0x4e>
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	e000      	b.n	8008f32 <aci_gatt_add_char+0x4e>
 8008f30:	2305      	movs	r3, #5
 8008f32:	f107 0218 	add.w	r2, r7, #24
 8008f36:	4413      	add	r3, r2
 8008f38:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008f3c:	f107 0314 	add.w	r3, r7, #20
 8008f40:	2203      	movs	r2, #3
 8008f42:	2100      	movs	r1, #0
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 fb01 	bl	800954c <Osal_MemSet>
  int index_input = 0;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8008f50:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008f54:	f107 020e 	add.w	r2, r7, #14
 8008f58:	8812      	ldrh	r2, [r2, #0]
 8008f5a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008f5c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008f60:	3302      	adds	r3, #2
 8008f62:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8008f66:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008f6a:	f107 020d 	add.w	r2, r7, #13
 8008f6e:	7812      	ldrb	r2, [r2, #0]
 8008f70:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008f72:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008f76:	3301      	adds	r3, #1
 8008f78:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8008f7c:	f107 030d 	add.w	r3, r7, #13
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d002      	beq.n	8008f8c <aci_gatt_add_char+0xa8>
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	d004      	beq.n	8008f94 <aci_gatt_add_char+0xb0>
 8008f8a:	e007      	b.n	8008f9c <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8008f92:	e005      	b.n	8008fa0 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 8008f94:	2310      	movs	r3, #16
 8008f96:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8008f9a:	e001      	b.n	8008fa0 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 8008f9c:	2347      	movs	r3, #71	; 0x47
 8008f9e:	e086      	b.n	80090ae <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8008fa0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008fa4:	1cd8      	adds	r0, r3, #3
 8008fa6:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8008faa:	f107 0308 	add.w	r3, r7, #8
 8008fae:	6819      	ldr	r1, [r3, #0]
 8008fb0:	f000 fabc 	bl	800952c <Osal_MemCpy>
    index_input += size;
 8008fb4:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8008fb8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008fbc:	4413      	add	r3, r2
 8008fbe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8008fc2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008fc6:	1dba      	adds	r2, r7, #6
 8008fc8:	8812      	ldrh	r2, [r2, #0]
 8008fca:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008fcc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008fd0:	3302      	adds	r3, #2
 8008fd2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8008fd6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008fda:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008fde:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8008fe0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8008fea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008fee:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008ff2:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8008ff4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8008ffe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009002:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8009006:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8009008:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800900c:	3301      	adds	r3, #1
 800900e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8009012:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009016:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800901a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800901c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009020:	3301      	adds	r3, #1
 8009022:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8009026:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800902a:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800902e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8009030:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009034:	3301      	adds	r3, #1
 8009036:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800903a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800903e:	2218      	movs	r2, #24
 8009040:	2100      	movs	r1, #0
 8009042:	4618      	mov	r0, r3
 8009044:	f000 fa82 	bl	800954c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009048:	233f      	movs	r3, #63	; 0x3f
 800904a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800904e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009052:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8009056:	f107 0318 	add.w	r3, r7, #24
 800905a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800905e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009062:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8009066:	f107 0314 	add.w	r3, r7, #20
 800906a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800906e:	2303      	movs	r3, #3
 8009070:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009074:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009078:	2100      	movs	r1, #0
 800907a:	4618      	mov	r0, r3
 800907c:	f000 fb0e 	bl	800969c <hci_send_req>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	da01      	bge.n	800908a <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8009086:	23ff      	movs	r3, #255	; 0xff
 8009088:	e011      	b.n	80090ae <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 800908a:	f107 0314 	add.w	r3, r7, #20
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d003      	beq.n	800909c <aci_gatt_add_char+0x1b8>
    return resp.Status;
 8009094:	f107 0314 	add.w	r3, r7, #20
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	e008      	b.n	80090ae <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 800909c:	f107 0314 	add.w	r3, r7, #20
 80090a0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80090a4:	b29a      	uxth	r2, r3
 80090a6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80090aa:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd90      	pop	{r4, r7, pc}

080090b8 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80090b8:	b5b0      	push	{r4, r5, r7, lr}
 80090ba:	b0cc      	sub	sp, #304	; 0x130
 80090bc:	af00      	add	r7, sp, #0
 80090be:	4605      	mov	r5, r0
 80090c0:	460c      	mov	r4, r1
 80090c2:	4610      	mov	r0, r2
 80090c4:	4619      	mov	r1, r3
 80090c6:	1dbb      	adds	r3, r7, #6
 80090c8:	462a      	mov	r2, r5
 80090ca:	801a      	strh	r2, [r3, #0]
 80090cc:	1d3b      	adds	r3, r7, #4
 80090ce:	4622      	mov	r2, r4
 80090d0:	801a      	strh	r2, [r3, #0]
 80090d2:	1cfb      	adds	r3, r7, #3
 80090d4:	4602      	mov	r2, r0
 80090d6:	701a      	strb	r2, [r3, #0]
 80090d8:	1cbb      	adds	r3, r7, #2
 80090da:	460a      	mov	r2, r1
 80090dc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80090de:	f107 0310 	add.w	r3, r7, #16
 80090e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80090e6:	f107 030f 	add.w	r3, r7, #15
 80090ea:	2200      	movs	r2, #0
 80090ec:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80090ee:	2300      	movs	r3, #0
 80090f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80090f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090f8:	1dba      	adds	r2, r7, #6
 80090fa:	8812      	ldrh	r2, [r2, #0]
 80090fc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80090fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009102:	3302      	adds	r3, #2
 8009104:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8009108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800910c:	1d3a      	adds	r2, r7, #4
 800910e:	8812      	ldrh	r2, [r2, #0]
 8009110:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009112:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009116:	3302      	adds	r3, #2
 8009118:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800911c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009120:	1cfa      	adds	r2, r7, #3
 8009122:	7812      	ldrb	r2, [r2, #0]
 8009124:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009126:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800912a:	3301      	adds	r3, #1
 800912c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8009130:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009134:	1cba      	adds	r2, r7, #2
 8009136:	7812      	ldrb	r2, [r2, #0]
 8009138:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800913a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800913e:	3301      	adds	r3, #1
 8009140:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8009144:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009148:	1d98      	adds	r0, r3, #6
 800914a:	1cbb      	adds	r3, r7, #2
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	461a      	mov	r2, r3
 8009150:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8009154:	f000 f9ea 	bl	800952c <Osal_MemCpy>
  index_input += Char_Value_Length;
 8009158:	1cbb      	adds	r3, r7, #2
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009160:	4413      	add	r3, r2
 8009162:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009166:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800916a:	2218      	movs	r2, #24
 800916c:	2100      	movs	r1, #0
 800916e:	4618      	mov	r0, r3
 8009170:	f000 f9ec 	bl	800954c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009174:	233f      	movs	r3, #63	; 0x3f
 8009176:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800917a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800917e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009182:	f107 0310 	add.w	r3, r7, #16
 8009186:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800918a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800918e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009192:	f107 030f 	add.w	r3, r7, #15
 8009196:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800919a:	2301      	movs	r3, #1
 800919c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80091a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80091a4:	2100      	movs	r1, #0
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 fa78 	bl	800969c <hci_send_req>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	da01      	bge.n	80091b6 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 80091b2:	23ff      	movs	r3, #255	; 0xff
 80091b4:	e002      	b.n	80091bc <aci_gatt_update_char_value+0x104>
  return status;
 80091b6:	f107 030f 	add.w	r3, r7, #15
 80091ba:	781b      	ldrb	r3, [r3, #0]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bdb0      	pop	{r4, r5, r7, pc}

080091c6 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b0cc      	sub	sp, #304	; 0x130
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	463b      	mov	r3, r7
 80091ce:	601a      	str	r2, [r3, #0]
 80091d0:	1dfb      	adds	r3, r7, #7
 80091d2:	4602      	mov	r2, r0
 80091d4:	701a      	strb	r2, [r3, #0]
 80091d6:	1dbb      	adds	r3, r7, #6
 80091d8:	460a      	mov	r2, r1
 80091da:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80091dc:	f107 0310 	add.w	r3, r7, #16
 80091e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80091e4:	f107 030f 	add.w	r3, r7, #15
 80091e8:	2200      	movs	r2, #0
 80091ea:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80091ec:	2300      	movs	r3, #0
 80091ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 80091f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091f6:	1dfa      	adds	r2, r7, #7
 80091f8:	7812      	ldrb	r2, [r2, #0]
 80091fa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80091fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009200:	3301      	adds	r3, #1
 8009202:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8009206:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800920a:	1dba      	adds	r2, r7, #6
 800920c:	7812      	ldrb	r2, [r2, #0]
 800920e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009210:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009214:	3301      	adds	r3, #1
 8009216:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800921a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800921e:	1c98      	adds	r0, r3, #2
 8009220:	1dbb      	adds	r3, r7, #6
 8009222:	781a      	ldrb	r2, [r3, #0]
 8009224:	463b      	mov	r3, r7
 8009226:	6819      	ldr	r1, [r3, #0]
 8009228:	f000 f980 	bl	800952c <Osal_MemCpy>
  index_input += Length;
 800922c:	1dbb      	adds	r3, r7, #6
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009234:	4413      	add	r3, r2
 8009236:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800923a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800923e:	2218      	movs	r2, #24
 8009240:	2100      	movs	r1, #0
 8009242:	4618      	mov	r0, r3
 8009244:	f000 f982 	bl	800954c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009248:	233f      	movs	r3, #63	; 0x3f
 800924a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800924e:	230c      	movs	r3, #12
 8009250:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009254:	f107 0310 	add.w	r3, r7, #16
 8009258:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800925c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009260:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009264:	f107 030f 	add.w	r3, r7, #15
 8009268:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800926c:	2301      	movs	r3, #1
 800926e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009272:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009276:	2100      	movs	r1, #0
 8009278:	4618      	mov	r0, r3
 800927a:	f000 fa0f 	bl	800969c <hci_send_req>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	da01      	bge.n	8009288 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8009284:	23ff      	movs	r3, #255	; 0xff
 8009286:	e002      	b.n	800928e <aci_hal_write_config_data+0xc8>
  return status;
 8009288:	f107 030f 	add.w	r3, r7, #15
 800928c:	781b      	ldrb	r3, [r3, #0]
}
 800928e:	4618      	mov	r0, r3
 8009290:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b0cc      	sub	sp, #304	; 0x130
 800929c:	af00      	add	r7, sp, #0
 800929e:	4602      	mov	r2, r0
 80092a0:	1dfb      	adds	r3, r7, #7
 80092a2:	701a      	strb	r2, [r3, #0]
 80092a4:	1dbb      	adds	r3, r7, #6
 80092a6:	460a      	mov	r2, r1
 80092a8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80092aa:	f107 0310 	add.w	r3, r7, #16
 80092ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80092b2:	f107 030f 	add.w	r3, r7, #15
 80092b6:	2200      	movs	r2, #0
 80092b8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80092ba:	2300      	movs	r3, #0
 80092bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80092c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092c4:	1dfa      	adds	r2, r7, #7
 80092c6:	7812      	ldrb	r2, [r2, #0]
 80092c8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80092ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092ce:	3301      	adds	r3, #1
 80092d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80092d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092d8:	1dba      	adds	r2, r7, #6
 80092da:	7812      	ldrb	r2, [r2, #0]
 80092dc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80092de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092e2:	3301      	adds	r3, #1
 80092e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80092e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80092ec:	2218      	movs	r2, #24
 80092ee:	2100      	movs	r1, #0
 80092f0:	4618      	mov	r0, r3
 80092f2:	f000 f92b 	bl	800954c <Osal_MemSet>
  rq.ogf = 0x3f;
 80092f6:	233f      	movs	r3, #63	; 0x3f
 80092f8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80092fc:	230f      	movs	r3, #15
 80092fe:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009302:	f107 0310 	add.w	r3, r7, #16
 8009306:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800930a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800930e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009312:	f107 030f 	add.w	r3, r7, #15
 8009316:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800931a:	2301      	movs	r3, #1
 800931c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009320:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009324:	2100      	movs	r1, #0
 8009326:	4618      	mov	r0, r3
 8009328:	f000 f9b8 	bl	800969c <hci_send_req>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	da01      	bge.n	8009336 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8009332:	23ff      	movs	r3, #255	; 0xff
 8009334:	e002      	b.n	800933c <aci_hal_set_tx_power_level+0xa4>
  return status;
 8009336:	f107 030f 	add.w	r3, r7, #15
 800933a:	781b      	ldrb	r3, [r3, #0]
}
 800933c:	4618      	mov	r0, r3
 800933e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b088      	sub	sp, #32
 800934a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800934c:	2300      	movs	r3, #0
 800934e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009350:	f107 0308 	add.w	r3, r7, #8
 8009354:	2218      	movs	r2, #24
 8009356:	2100      	movs	r1, #0
 8009358:	4618      	mov	r0, r3
 800935a:	f000 f8f7 	bl	800954c <Osal_MemSet>
  rq.ogf = 0x03;
 800935e:	2303      	movs	r3, #3
 8009360:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8009362:	2303      	movs	r3, #3
 8009364:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009366:	1dfb      	adds	r3, r7, #7
 8009368:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800936a:	2301      	movs	r3, #1
 800936c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800936e:	f107 0308 	add.w	r3, r7, #8
 8009372:	2100      	movs	r1, #0
 8009374:	4618      	mov	r0, r3
 8009376:	f000 f991 	bl	800969c <hci_send_req>
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	da01      	bge.n	8009384 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009380:	23ff      	movs	r3, #255	; 0xff
 8009382:	e000      	b.n	8009386 <hci_reset+0x40>
  return status;
 8009384:	79fb      	ldrb	r3, [r7, #7]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3720      	adds	r7, #32
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b0ce      	sub	sp, #312	; 0x138
 8009392:	af00      	add	r7, sp, #0
 8009394:	f107 0308 	add.w	r3, r7, #8
 8009398:	6019      	str	r1, [r3, #0]
 800939a:	1d3b      	adds	r3, r7, #4
 800939c:	601a      	str	r2, [r3, #0]
 800939e:	f107 030e 	add.w	r3, r7, #14
 80093a2:	4602      	mov	r2, r0
 80093a4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 80093a6:	f107 0318 	add.w	r3, r7, #24
 80093aa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80093ae:	f107 0310 	add.w	r3, r7, #16
 80093b2:	2205      	movs	r2, #5
 80093b4:	2100      	movs	r1, #0
 80093b6:	4618      	mov	r0, r3
 80093b8:	f000 f8c8 	bl	800954c <Osal_MemSet>
  int index_input = 0;
 80093bc:	2300      	movs	r3, #0
 80093be:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 80093c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80093c6:	f107 020e 	add.w	r2, r7, #14
 80093ca:	8812      	ldrh	r2, [r2, #0]
 80093cc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80093ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80093d2:	3302      	adds	r3, #2
 80093d4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80093d8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80093dc:	2218      	movs	r2, #24
 80093de:	2100      	movs	r1, #0
 80093e0:	4618      	mov	r0, r3
 80093e2:	f000 f8b3 	bl	800954c <Osal_MemSet>
  rq.ogf = 0x08;
 80093e6:	2308      	movs	r3, #8
 80093e8:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 80093ec:	2330      	movs	r3, #48	; 0x30
 80093ee:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80093f2:	f107 0318 	add.w	r3, r7, #24
 80093f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80093fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80093fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8009402:	f107 0310 	add.w	r3, r7, #16
 8009406:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800940a:	2305      	movs	r3, #5
 800940c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009410:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009414:	2100      	movs	r1, #0
 8009416:	4618      	mov	r0, r3
 8009418:	f000 f940 	bl	800969c <hci_send_req>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	da01      	bge.n	8009426 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 8009422:	23ff      	movs	r3, #255	; 0xff
 8009424:	e016      	b.n	8009454 <hci_le_read_phy+0xc6>
  if ( resp.Status )
 8009426:	f107 0310 	add.w	r3, r7, #16
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d003      	beq.n	8009438 <hci_le_read_phy+0xaa>
    return resp.Status;
 8009430:	f107 0310 	add.w	r3, r7, #16
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	e00d      	b.n	8009454 <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 8009438:	f107 0310 	add.w	r3, r7, #16
 800943c:	78da      	ldrb	r2, [r3, #3]
 800943e:	f107 0308 	add.w	r3, r7, #8
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 8009446:	f107 0310 	add.w	r3, r7, #16
 800944a:	791a      	ldrb	r2, [r3, #4]
 800944c:	1d3b      	adds	r3, r7, #4
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800945e:	b590      	push	{r4, r7, lr}
 8009460:	b0cd      	sub	sp, #308	; 0x134
 8009462:	af00      	add	r7, sp, #0
 8009464:	4604      	mov	r4, r0
 8009466:	4608      	mov	r0, r1
 8009468:	4611      	mov	r1, r2
 800946a:	1dfb      	adds	r3, r7, #7
 800946c:	4622      	mov	r2, r4
 800946e:	701a      	strb	r2, [r3, #0]
 8009470:	1dbb      	adds	r3, r7, #6
 8009472:	4602      	mov	r2, r0
 8009474:	701a      	strb	r2, [r3, #0]
 8009476:	1d7b      	adds	r3, r7, #5
 8009478:	460a      	mov	r2, r1
 800947a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800947c:	f107 0310 	add.w	r3, r7, #16
 8009480:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009484:	f107 030f 	add.w	r3, r7, #15
 8009488:	2200      	movs	r2, #0
 800948a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800948c:	2300      	movs	r3, #0
 800948e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8009492:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009496:	1dfa      	adds	r2, r7, #7
 8009498:	7812      	ldrb	r2, [r2, #0]
 800949a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800949c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094a0:	3301      	adds	r3, #1
 80094a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 80094a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094aa:	1dba      	adds	r2, r7, #6
 80094ac:	7812      	ldrb	r2, [r2, #0]
 80094ae:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80094b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094b4:	3301      	adds	r3, #1
 80094b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 80094ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094be:	1d7a      	adds	r2, r7, #5
 80094c0:	7812      	ldrb	r2, [r2, #0]
 80094c2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80094c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094c8:	3301      	adds	r3, #1
 80094ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80094ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80094d2:	2218      	movs	r2, #24
 80094d4:	2100      	movs	r1, #0
 80094d6:	4618      	mov	r0, r3
 80094d8:	f000 f838 	bl	800954c <Osal_MemSet>
  rq.ogf = 0x08;
 80094dc:	2308      	movs	r3, #8
 80094de:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 80094e2:	2331      	movs	r3, #49	; 0x31
 80094e4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80094e8:	f107 0310 	add.w	r3, r7, #16
 80094ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80094f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80094f8:	f107 030f 	add.w	r3, r7, #15
 80094fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009500:	2301      	movs	r3, #1
 8009502:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009506:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800950a:	2100      	movs	r1, #0
 800950c:	4618      	mov	r0, r3
 800950e:	f000 f8c5 	bl	800969c <hci_send_req>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	da01      	bge.n	800951c <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8009518:	23ff      	movs	r3, #255	; 0xff
 800951a:	e002      	b.n	8009522 <hci_le_set_default_phy+0xc4>
  return status;
 800951c:	f107 030f 	add.w	r3, r7, #15
 8009520:	781b      	ldrb	r3, [r3, #0]
}
 8009522:	4618      	mov	r0, r3
 8009524:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009528:	46bd      	mov	sp, r7
 800952a:	bd90      	pop	{r4, r7, pc}

0800952c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	68b9      	ldr	r1, [r7, #8]
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f005 fc11 	bl	800ed64 <memcpy>
 8009542:	4603      	mov	r3, r0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3710      	adds	r7, #16
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	68b9      	ldr	r1, [r7, #8]
 800955c:	68f8      	ldr	r0, [r7, #12]
 800955e:	f005 fc0c 	bl	800ed7a <memset>
 8009562:	4603      	mov	r3, r0
}
 8009564:	4618      	mov	r0, r3
 8009566:	3710      	adds	r7, #16
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b088      	sub	sp, #32
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009574:	f107 030c 	add.w	r3, r7, #12
 8009578:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	2121      	movs	r1, #33	; 0x21
 8009584:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8009588:	f000 fa1e 	bl	80099c8 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	330b      	adds	r3, #11
 8009590:	78db      	ldrb	r3, [r3, #3]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3720      	adds	r7, #32
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b088      	sub	sp, #32
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80095a2:	f107 030c 	add.w	r3, r7, #12
 80095a6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	210f      	movs	r1, #15
 80095b2:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80095b6:	f000 fa07 	bl	80099c8 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	330b      	adds	r3, #11
 80095be:	78db      	ldrb	r3, [r3, #3]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3720      	adds	r7, #32
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	4a08      	ldr	r2, [pc, #32]	; (80095f8 <hci_init+0x30>)
 80095d8:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80095da:	4a08      	ldr	r2, [pc, #32]	; (80095fc <hci_init+0x34>)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80095e0:	4806      	ldr	r0, [pc, #24]	; (80095fc <hci_init+0x34>)
 80095e2:	f000 f973 	bl	80098cc <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4618      	mov	r0, r3
 80095ec:	f000 f8d4 	bl	8009798 <TlInit>

  return;
 80095f0:	bf00      	nop
}
 80095f2:	3708      	adds	r7, #8
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	200003ec 	.word	0x200003ec
 80095fc:	200003c4 	.word	0x200003c4

08009600 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009606:	4822      	ldr	r0, [pc, #136]	; (8009690 <hci_user_evt_proc+0x90>)
 8009608:	f000 ff00 	bl	800a40c <LST_is_empty>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d12b      	bne.n	800966a <hci_user_evt_proc+0x6a>
 8009612:	4b20      	ldr	r3, [pc, #128]	; (8009694 <hci_user_evt_proc+0x94>)
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d027      	beq.n	800966a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800961a:	f107 030c 	add.w	r3, r7, #12
 800961e:	4619      	mov	r1, r3
 8009620:	481b      	ldr	r0, [pc, #108]	; (8009690 <hci_user_evt_proc+0x90>)
 8009622:	f000 ff7a 	bl	800a51a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8009626:	4b1c      	ldr	r3, [pc, #112]	; (8009698 <hci_user_evt_proc+0x98>)
 8009628:	69db      	ldr	r3, [r3, #28]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00c      	beq.n	8009648 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8009632:	2301      	movs	r3, #1
 8009634:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009636:	4b18      	ldr	r3, [pc, #96]	; (8009698 <hci_user_evt_proc+0x98>)
 8009638:	69db      	ldr	r3, [r3, #28]
 800963a:	1d3a      	adds	r2, r7, #4
 800963c:	4610      	mov	r0, r2
 800963e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8009640:	793a      	ldrb	r2, [r7, #4]
 8009642:	4b14      	ldr	r3, [pc, #80]	; (8009694 <hci_user_evt_proc+0x94>)
 8009644:	701a      	strb	r2, [r3, #0]
 8009646:	e002      	b.n	800964e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009648:	4b12      	ldr	r3, [pc, #72]	; (8009694 <hci_user_evt_proc+0x94>)
 800964a:	2201      	movs	r2, #1
 800964c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800964e:	4b11      	ldr	r3, [pc, #68]	; (8009694 <hci_user_evt_proc+0x94>)
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d004      	beq.n	8009660 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	4618      	mov	r0, r3
 800965a:	f000 fc03 	bl	8009e64 <TL_MM_EvtDone>
 800965e:	e004      	b.n	800966a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	4619      	mov	r1, r3
 8009664:	480a      	ldr	r0, [pc, #40]	; (8009690 <hci_user_evt_proc+0x90>)
 8009666:	f000 fef1 	bl	800a44c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800966a:	4809      	ldr	r0, [pc, #36]	; (8009690 <hci_user_evt_proc+0x90>)
 800966c:	f000 fece 	bl	800a40c <LST_is_empty>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d107      	bne.n	8009686 <hci_user_evt_proc+0x86>
 8009676:	4b07      	ldr	r3, [pc, #28]	; (8009694 <hci_user_evt_proc+0x94>)
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d003      	beq.n	8009686 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800967e:	4804      	ldr	r0, [pc, #16]	; (8009690 <hci_user_evt_proc+0x90>)
 8009680:	f7f8 f84c 	bl	800171c <hci_notify_asynch_evt>
  }


  return;
 8009684:	bf00      	nop
 8009686:	bf00      	nop
}
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	20000360 	.word	0x20000360
 8009694:	2000036c 	.word	0x2000036c
 8009698:	200003c4 	.word	0x200003c4

0800969c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b088      	sub	sp, #32
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	460b      	mov	r3, r1
 80096a6:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80096a8:	2000      	movs	r0, #0
 80096aa:	f000 f8cb 	bl	8009844 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80096ae:	2300      	movs	r3, #0
 80096b0:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	885b      	ldrh	r3, [r3, #2]
 80096b6:	b21b      	sxth	r3, r3
 80096b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096bc:	b21a      	sxth	r2, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	881b      	ldrh	r3, [r3, #0]
 80096c2:	029b      	lsls	r3, r3, #10
 80096c4:	b21b      	sxth	r3, r3
 80096c6:	4313      	orrs	r3, r2
 80096c8:	b21b      	sxth	r3, r3
 80096ca:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	b2d9      	uxtb	r1, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	689a      	ldr	r2, [r3, #8]
 80096d6:	8bbb      	ldrh	r3, [r7, #28]
 80096d8:	4618      	mov	r0, r3
 80096da:	f000 f88d 	bl	80097f8 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80096de:	e04e      	b.n	800977e <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80096e0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80096e4:	f7f8 f83a 	bl	800175c <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80096e8:	e043      	b.n	8009772 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80096ea:	f107 030c 	add.w	r3, r7, #12
 80096ee:	4619      	mov	r1, r3
 80096f0:	4828      	ldr	r0, [pc, #160]	; (8009794 <hci_send_req+0xf8>)
 80096f2:	f000 ff12 	bl	800a51a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	7a5b      	ldrb	r3, [r3, #9]
 80096fa:	2b0f      	cmp	r3, #15
 80096fc:	d114      	bne.n	8009728 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	330b      	adds	r3, #11
 8009702:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	885b      	ldrh	r3, [r3, #2]
 8009708:	b29b      	uxth	r3, r3
 800970a:	8bba      	ldrh	r2, [r7, #28]
 800970c:	429a      	cmp	r2, r3
 800970e:	d104      	bne.n	800971a <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	693a      	ldr	r2, [r7, #16]
 8009716:	7812      	ldrb	r2, [r2, #0]
 8009718:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	785b      	ldrb	r3, [r3, #1]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d027      	beq.n	8009772 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009722:	2301      	movs	r3, #1
 8009724:	77fb      	strb	r3, [r7, #31]
 8009726:	e024      	b.n	8009772 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	330b      	adds	r3, #11
 800972c:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009734:	b29b      	uxth	r3, r3
 8009736:	8bba      	ldrh	r2, [r7, #28]
 8009738:	429a      	cmp	r2, r3
 800973a:	d114      	bne.n	8009766 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	7a9b      	ldrb	r3, [r3, #10]
 8009740:	3b03      	subs	r3, #3
 8009742:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	695a      	ldr	r2, [r3, #20]
 8009748:	7dfb      	ldrb	r3, [r7, #23]
 800974a:	429a      	cmp	r2, r3
 800974c:	bfa8      	it	ge
 800974e:	461a      	movge	r2, r3
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6918      	ldr	r0, [r3, #16]
 8009758:	69bb      	ldr	r3, [r7, #24]
 800975a:	1cd9      	adds	r1, r3, #3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	695b      	ldr	r3, [r3, #20]
 8009760:	461a      	mov	r2, r3
 8009762:	f005 faff 	bl	800ed64 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d001      	beq.n	8009772 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800976e:	2301      	movs	r3, #1
 8009770:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009772:	4808      	ldr	r0, [pc, #32]	; (8009794 <hci_send_req+0xf8>)
 8009774:	f000 fe4a 	bl	800a40c <LST_is_empty>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d0b5      	beq.n	80096ea <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800977e:	7ffb      	ldrb	r3, [r7, #31]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d0ad      	beq.n	80096e0 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8009784:	2001      	movs	r0, #1
 8009786:	f000 f85d 	bl	8009844 <NotifyCmdStatus>

  return 0;
 800978a:	2300      	movs	r3, #0
}
 800978c:	4618      	mov	r0, r3
 800978e:	3720      	adds	r7, #32
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	200003e4 	.word	0x200003e4

08009798 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b086      	sub	sp, #24
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80097a0:	480f      	ldr	r0, [pc, #60]	; (80097e0 <TlInit+0x48>)
 80097a2:	f000 fe23 	bl	800a3ec <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80097a6:	4a0f      	ldr	r2, [pc, #60]	; (80097e4 <TlInit+0x4c>)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80097ac:	480e      	ldr	r0, [pc, #56]	; (80097e8 <TlInit+0x50>)
 80097ae:	f000 fe1d 	bl	800a3ec <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80097b2:	4b0e      	ldr	r3, [pc, #56]	; (80097ec <TlInit+0x54>)
 80097b4:	2201      	movs	r2, #1
 80097b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80097b8:	4b0d      	ldr	r3, [pc, #52]	; (80097f0 <TlInit+0x58>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00a      	beq.n	80097d6 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80097c4:	4b0b      	ldr	r3, [pc, #44]	; (80097f4 <TlInit+0x5c>)
 80097c6:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80097c8:	4b09      	ldr	r3, [pc, #36]	; (80097f0 <TlInit+0x58>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f107 0208 	add.w	r2, r7, #8
 80097d0:	4610      	mov	r0, r2
 80097d2:	4798      	blx	r3
  }

  return;
 80097d4:	bf00      	nop
 80097d6:	bf00      	nop
}
 80097d8:	3718      	adds	r7, #24
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	200003e4 	.word	0x200003e4
 80097e4:	20000368 	.word	0x20000368
 80097e8:	20000360 	.word	0x20000360
 80097ec:	2000036c 	.word	0x2000036c
 80097f0:	200003c4 	.word	0x200003c4
 80097f4:	08009885 	.word	0x08009885

080097f8 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	4603      	mov	r3, r0
 8009800:	603a      	str	r2, [r7, #0]
 8009802:	80fb      	strh	r3, [r7, #6]
 8009804:	460b      	mov	r3, r1
 8009806:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009808:	4b0c      	ldr	r3, [pc, #48]	; (800983c <SendCmd+0x44>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	88fa      	ldrh	r2, [r7, #6]
 800980e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8009812:	4b0a      	ldr	r3, [pc, #40]	; (800983c <SendCmd+0x44>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	797a      	ldrb	r2, [r7, #5]
 8009818:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800981a:	4b08      	ldr	r3, [pc, #32]	; (800983c <SendCmd+0x44>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	330c      	adds	r3, #12
 8009820:	797a      	ldrb	r2, [r7, #5]
 8009822:	6839      	ldr	r1, [r7, #0]
 8009824:	4618      	mov	r0, r3
 8009826:	f005 fa9d 	bl	800ed64 <memcpy>

  hciContext.io.Send(0,0);
 800982a:	4b05      	ldr	r3, [pc, #20]	; (8009840 <SendCmd+0x48>)
 800982c:	691b      	ldr	r3, [r3, #16]
 800982e:	2100      	movs	r1, #0
 8009830:	2000      	movs	r0, #0
 8009832:	4798      	blx	r3

  return;
 8009834:	bf00      	nop
}
 8009836:	3708      	adds	r7, #8
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}
 800983c:	20000368 	.word	0x20000368
 8009840:	200003c4 	.word	0x200003c4

08009844 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	4603      	mov	r3, r0
 800984c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800984e:	79fb      	ldrb	r3, [r7, #7]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d108      	bne.n	8009866 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8009854:	4b0a      	ldr	r3, [pc, #40]	; (8009880 <NotifyCmdStatus+0x3c>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d00d      	beq.n	8009878 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800985c:	4b08      	ldr	r3, [pc, #32]	; (8009880 <NotifyCmdStatus+0x3c>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2000      	movs	r0, #0
 8009862:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8009864:	e008      	b.n	8009878 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8009866:	4b06      	ldr	r3, [pc, #24]	; (8009880 <NotifyCmdStatus+0x3c>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d004      	beq.n	8009878 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800986e:	4b04      	ldr	r3, [pc, #16]	; (8009880 <NotifyCmdStatus+0x3c>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2001      	movs	r0, #1
 8009874:	4798      	blx	r3
  return;
 8009876:	bf00      	nop
 8009878:	bf00      	nop
}
 800987a:	3708      	adds	r7, #8
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}
 8009880:	200003ec 	.word	0x200003ec

08009884 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	7a5b      	ldrb	r3, [r3, #9]
 8009890:	2b0f      	cmp	r3, #15
 8009892:	d003      	beq.n	800989c <TlEvtReceived+0x18>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	7a5b      	ldrb	r3, [r3, #9]
 8009898:	2b0e      	cmp	r3, #14
 800989a:	d107      	bne.n	80098ac <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800989c:	6879      	ldr	r1, [r7, #4]
 800989e:	4809      	ldr	r0, [pc, #36]	; (80098c4 <TlEvtReceived+0x40>)
 80098a0:	f000 fdf8 	bl	800a494 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80098a4:	2000      	movs	r0, #0
 80098a6:	f7f7 ff49 	bl	800173c <hci_cmd_resp_release>
 80098aa:	e006      	b.n	80098ba <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80098ac:	6879      	ldr	r1, [r7, #4]
 80098ae:	4806      	ldr	r0, [pc, #24]	; (80098c8 <TlEvtReceived+0x44>)
 80098b0:	f000 fdf0 	bl	800a494 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80098b4:	4804      	ldr	r0, [pc, #16]	; (80098c8 <TlEvtReceived+0x44>)
 80098b6:	f7f7 ff31 	bl	800171c <hci_notify_asynch_evt>
  }

  return;
 80098ba:	bf00      	nop
}
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	200003e4 	.word	0x200003e4
 80098c8:	20000360 	.word	0x20000360

080098cc <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	4a05      	ldr	r2, [pc, #20]	; (80098ec <hci_register_io_bus+0x20>)
 80098d8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a04      	ldr	r2, [pc, #16]	; (80098f0 <hci_register_io_bus+0x24>)
 80098de:	611a      	str	r2, [r3, #16]

  return;
 80098e0:	bf00      	nop
}
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr
 80098ec:	08009bdd 	.word	0x08009bdd
 80098f0:	08009c45 	.word	0x08009c45

080098f4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	4a08      	ldr	r2, [pc, #32]	; (8009924 <shci_init+0x30>)
 8009904:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8009906:	4a08      	ldr	r2, [pc, #32]	; (8009928 <shci_init+0x34>)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800990c:	4806      	ldr	r0, [pc, #24]	; (8009928 <shci_init+0x34>)
 800990e:	f000 f911 	bl	8009b34 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4618      	mov	r0, r3
 8009918:	f000 f894 	bl	8009a44 <TlInit>

  return;
 800991c:	bf00      	nop
}
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}
 8009924:	20000410 	.word	0x20000410
 8009928:	200003f0 	.word	0x200003f0

0800992c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009932:	4822      	ldr	r0, [pc, #136]	; (80099bc <shci_user_evt_proc+0x90>)
 8009934:	f000 fd6a 	bl	800a40c <LST_is_empty>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d12b      	bne.n	8009996 <shci_user_evt_proc+0x6a>
 800993e:	4b20      	ldr	r3, [pc, #128]	; (80099c0 <shci_user_evt_proc+0x94>)
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d027      	beq.n	8009996 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009946:	f107 030c 	add.w	r3, r7, #12
 800994a:	4619      	mov	r1, r3
 800994c:	481b      	ldr	r0, [pc, #108]	; (80099bc <shci_user_evt_proc+0x90>)
 800994e:	f000 fde4 	bl	800a51a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8009952:	4b1c      	ldr	r3, [pc, #112]	; (80099c4 <shci_user_evt_proc+0x98>)
 8009954:	69db      	ldr	r3, [r3, #28]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00c      	beq.n	8009974 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800995e:	2301      	movs	r3, #1
 8009960:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009962:	4b18      	ldr	r3, [pc, #96]	; (80099c4 <shci_user_evt_proc+0x98>)
 8009964:	69db      	ldr	r3, [r3, #28]
 8009966:	1d3a      	adds	r2, r7, #4
 8009968:	4610      	mov	r0, r2
 800996a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800996c:	793a      	ldrb	r2, [r7, #4]
 800996e:	4b14      	ldr	r3, [pc, #80]	; (80099c0 <shci_user_evt_proc+0x94>)
 8009970:	701a      	strb	r2, [r3, #0]
 8009972:	e002      	b.n	800997a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009974:	4b12      	ldr	r3, [pc, #72]	; (80099c0 <shci_user_evt_proc+0x94>)
 8009976:	2201      	movs	r2, #1
 8009978:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800997a:	4b11      	ldr	r3, [pc, #68]	; (80099c0 <shci_user_evt_proc+0x94>)
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d004      	beq.n	800998c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	4618      	mov	r0, r3
 8009986:	f000 fa6d 	bl	8009e64 <TL_MM_EvtDone>
 800998a:	e004      	b.n	8009996 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	4619      	mov	r1, r3
 8009990:	480a      	ldr	r0, [pc, #40]	; (80099bc <shci_user_evt_proc+0x90>)
 8009992:	f000 fd5b 	bl	800a44c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009996:	4809      	ldr	r0, [pc, #36]	; (80099bc <shci_user_evt_proc+0x90>)
 8009998:	f000 fd38 	bl	800a40c <LST_is_empty>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d107      	bne.n	80099b2 <shci_user_evt_proc+0x86>
 80099a2:	4b07      	ldr	r3, [pc, #28]	; (80099c0 <shci_user_evt_proc+0x94>)
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d003      	beq.n	80099b2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80099aa:	4804      	ldr	r0, [pc, #16]	; (80099bc <shci_user_evt_proc+0x90>)
 80099ac:	f7f8 fcfe 	bl	80023ac <shci_notify_asynch_evt>
  }


  return;
 80099b0:	bf00      	nop
 80099b2:	bf00      	nop
}
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	20000378 	.word	0x20000378
 80099c0:	20000388 	.word	0x20000388
 80099c4:	200003f0 	.word	0x200003f0

080099c8 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60ba      	str	r2, [r7, #8]
 80099d0:	607b      	str	r3, [r7, #4]
 80099d2:	4603      	mov	r3, r0
 80099d4:	81fb      	strh	r3, [r7, #14]
 80099d6:	460b      	mov	r3, r1
 80099d8:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80099da:	2000      	movs	r0, #0
 80099dc:	f000 f864 	bl	8009aa8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80099e0:	4b16      	ldr	r3, [pc, #88]	; (8009a3c <shci_send+0x74>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	89fa      	ldrh	r2, [r7, #14]
 80099e6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80099ea:	4b14      	ldr	r3, [pc, #80]	; (8009a3c <shci_send+0x74>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	7b7a      	ldrb	r2, [r7, #13]
 80099f0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80099f2:	4b12      	ldr	r3, [pc, #72]	; (8009a3c <shci_send+0x74>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	330c      	adds	r3, #12
 80099f8:	7b7a      	ldrb	r2, [r7, #13]
 80099fa:	68b9      	ldr	r1, [r7, #8]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f005 f9b1 	bl	800ed64 <memcpy>

  shciContext.io.Send(0,0);
 8009a02:	4b0f      	ldr	r3, [pc, #60]	; (8009a40 <shci_send+0x78>)
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	2100      	movs	r1, #0
 8009a08:	2000      	movs	r0, #0
 8009a0a:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8009a0c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009a10:	f7f8 fcec 	bl	80023ec <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f103 0008 	add.w	r0, r3, #8
 8009a1a:	4b08      	ldr	r3, [pc, #32]	; (8009a3c <shci_send+0x74>)
 8009a1c:	6819      	ldr	r1, [r3, #0]
 8009a1e:	4b07      	ldr	r3, [pc, #28]	; (8009a3c <shci_send+0x74>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	789b      	ldrb	r3, [r3, #2]
 8009a24:	3303      	adds	r3, #3
 8009a26:	461a      	mov	r2, r3
 8009a28:	f005 f99c 	bl	800ed64 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009a2c:	2001      	movs	r0, #1
 8009a2e:	f000 f83b 	bl	8009aa8 <Cmd_SetStatus>

  return;
 8009a32:	bf00      	nop
}
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	20000384 	.word	0x20000384
 8009a40:	200003f0 	.word	0x200003f0

08009a44 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b086      	sub	sp, #24
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8009a4c:	4a10      	ldr	r2, [pc, #64]	; (8009a90 <TlInit+0x4c>)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8009a52:	4810      	ldr	r0, [pc, #64]	; (8009a94 <TlInit+0x50>)
 8009a54:	f000 fcca 	bl	800a3ec <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009a58:	2001      	movs	r0, #1
 8009a5a:	f000 f825 	bl	8009aa8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009a5e:	4b0e      	ldr	r3, [pc, #56]	; (8009a98 <TlInit+0x54>)
 8009a60:	2201      	movs	r2, #1
 8009a62:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8009a64:	4b0d      	ldr	r3, [pc, #52]	; (8009a9c <TlInit+0x58>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00c      	beq.n	8009a86 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8009a70:	4b0b      	ldr	r3, [pc, #44]	; (8009aa0 <TlInit+0x5c>)
 8009a72:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8009a74:	4b0b      	ldr	r3, [pc, #44]	; (8009aa4 <TlInit+0x60>)
 8009a76:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009a78:	4b08      	ldr	r3, [pc, #32]	; (8009a9c <TlInit+0x58>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f107 020c 	add.w	r2, r7, #12
 8009a80:	4610      	mov	r0, r2
 8009a82:	4798      	blx	r3
  }

  return;
 8009a84:	bf00      	nop
 8009a86:	bf00      	nop
}
 8009a88:	3718      	adds	r7, #24
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	20000384 	.word	0x20000384
 8009a94:	20000378 	.word	0x20000378
 8009a98:	20000388 	.word	0x20000388
 8009a9c:	200003f0 	.word	0x200003f0
 8009aa0:	08009af9 	.word	0x08009af9
 8009aa4:	08009b11 	.word	0x08009b11

08009aa8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	4603      	mov	r3, r0
 8009ab0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8009ab2:	79fb      	ldrb	r3, [r7, #7]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d10b      	bne.n	8009ad0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009ab8:	4b0d      	ldr	r3, [pc, #52]	; (8009af0 <Cmd_SetStatus+0x48>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d003      	beq.n	8009ac8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8009ac0:	4b0b      	ldr	r3, [pc, #44]	; (8009af0 <Cmd_SetStatus+0x48>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2000      	movs	r0, #0
 8009ac6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8009ac8:	4b0a      	ldr	r3, [pc, #40]	; (8009af4 <Cmd_SetStatus+0x4c>)
 8009aca:	2200      	movs	r2, #0
 8009acc:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8009ace:	e00b      	b.n	8009ae8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009ad0:	4b08      	ldr	r3, [pc, #32]	; (8009af4 <Cmd_SetStatus+0x4c>)
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8009ad6:	4b06      	ldr	r3, [pc, #24]	; (8009af0 <Cmd_SetStatus+0x48>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d004      	beq.n	8009ae8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8009ade:	4b04      	ldr	r3, [pc, #16]	; (8009af0 <Cmd_SetStatus+0x48>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2001      	movs	r0, #1
 8009ae4:	4798      	blx	r3
  return;
 8009ae6:	bf00      	nop
 8009ae8:	bf00      	nop
}
 8009aea:	3708      	adds	r7, #8
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	20000410 	.word	0x20000410
 8009af4:	20000380 	.word	0x20000380

08009af8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009b00:	2000      	movs	r0, #0
 8009b02:	f7f8 fc63 	bl	80023cc <shci_cmd_resp_release>

  return;
 8009b06:	bf00      	nop
}
 8009b08:	3708      	adds	r7, #8
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
	...

08009b10 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009b18:	6879      	ldr	r1, [r7, #4]
 8009b1a:	4805      	ldr	r0, [pc, #20]	; (8009b30 <TlUserEvtReceived+0x20>)
 8009b1c:	f000 fcba 	bl	800a494 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009b20:	4803      	ldr	r0, [pc, #12]	; (8009b30 <TlUserEvtReceived+0x20>)
 8009b22:	f7f8 fc43 	bl	80023ac <shci_notify_asynch_evt>

  return;
 8009b26:	bf00      	nop
}
 8009b28:	3708      	adds	r7, #8
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	20000378 	.word	0x20000378

08009b34 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4a05      	ldr	r2, [pc, #20]	; (8009b54 <shci_register_io_bus+0x20>)
 8009b40:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	4a04      	ldr	r2, [pc, #16]	; (8009b58 <shci_register_io_bus+0x24>)
 8009b46:	611a      	str	r2, [r3, #16]

  return;
 8009b48:	bf00      	nop
}
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr
 8009b54:	08009cf1 	.word	0x08009cf1
 8009b58:	08009d45 	.word	0x08009d45

08009b5c <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8009b60:	f7f8 f8e8 	bl	8001d34 <HW_IPCC_Enable>

  return;
 8009b64:	bf00      	nop
}
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <TL_Init>:


void TL_Init( void )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8009b6c:	4b10      	ldr	r3, [pc, #64]	; (8009bb0 <TL_Init+0x48>)
 8009b6e:	4a11      	ldr	r2, [pc, #68]	; (8009bb4 <TL_Init+0x4c>)
 8009b70:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8009b72:	4b0f      	ldr	r3, [pc, #60]	; (8009bb0 <TL_Init+0x48>)
 8009b74:	4a10      	ldr	r2, [pc, #64]	; (8009bb8 <TL_Init+0x50>)
 8009b76:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8009b78:	4b0d      	ldr	r3, [pc, #52]	; (8009bb0 <TL_Init+0x48>)
 8009b7a:	4a10      	ldr	r2, [pc, #64]	; (8009bbc <TL_Init+0x54>)
 8009b7c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8009b7e:	4b0c      	ldr	r3, [pc, #48]	; (8009bb0 <TL_Init+0x48>)
 8009b80:	4a0f      	ldr	r2, [pc, #60]	; (8009bc0 <TL_Init+0x58>)
 8009b82:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 8009b84:	4b0a      	ldr	r3, [pc, #40]	; (8009bb0 <TL_Init+0x48>)
 8009b86:	4a0f      	ldr	r2, [pc, #60]	; (8009bc4 <TL_Init+0x5c>)
 8009b88:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8009b8a:	4b09      	ldr	r3, [pc, #36]	; (8009bb0 <TL_Init+0x48>)
 8009b8c:	4a0e      	ldr	r2, [pc, #56]	; (8009bc8 <TL_Init+0x60>)
 8009b8e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8009b90:	4b07      	ldr	r3, [pc, #28]	; (8009bb0 <TL_Init+0x48>)
 8009b92:	4a0e      	ldr	r2, [pc, #56]	; (8009bcc <TL_Init+0x64>)
 8009b94:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8009b96:	4b06      	ldr	r3, [pc, #24]	; (8009bb0 <TL_Init+0x48>)
 8009b98:	4a0d      	ldr	r2, [pc, #52]	; (8009bd0 <TL_Init+0x68>)
 8009b9a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8009b9c:	4b04      	ldr	r3, [pc, #16]	; (8009bb0 <TL_Init+0x48>)
 8009b9e:	4a0d      	ldr	r2, [pc, #52]	; (8009bd4 <TL_Init+0x6c>)
 8009ba0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8009ba2:	4b03      	ldr	r3, [pc, #12]	; (8009bb0 <TL_Init+0x48>)
 8009ba4:	4a0c      	ldr	r2, [pc, #48]	; (8009bd8 <TL_Init+0x70>)
 8009ba6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8009ba8:	f7f8 f8d8 	bl	8001d5c <HW_IPCC_Init>

  return;
 8009bac:	bf00      	nop
}
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	20030000 	.word	0x20030000
 8009bb4:	20030134 	.word	0x20030134
 8009bb8:	20030154 	.word	0x20030154
 8009bbc:	20030164 	.word	0x20030164
 8009bc0:	20030170 	.word	0x20030170
 8009bc4:	20030178 	.word	0x20030178
 8009bc8:	20030180 	.word	0x20030180
 8009bcc:	20030188 	.word	0x20030188
 8009bd0:	200301a4 	.word	0x200301a4
 8009bd4:	200301a8 	.word	0x200301a8
 8009bd8:	200301b4 	.word	0x200301b4

08009bdc <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8009be8:	4811      	ldr	r0, [pc, #68]	; (8009c30 <TL_BLE_Init+0x54>)
 8009bea:	f000 fbff 	bl	800a3ec <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8009bee:	4b11      	ldr	r3, [pc, #68]	; (8009c34 <TL_BLE_Init+0x58>)
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	689a      	ldr	r2, [r3, #8]
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	68da      	ldr	r2, [r3, #12]
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	4a0c      	ldr	r2, [pc, #48]	; (8009c38 <TL_BLE_Init+0x5c>)
 8009c08:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	4a08      	ldr	r2, [pc, #32]	; (8009c30 <TL_BLE_Init+0x54>)
 8009c0e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8009c10:	f7f8 f8ba 	bl	8001d88 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a08      	ldr	r2, [pc, #32]	; (8009c3c <TL_BLE_Init+0x60>)
 8009c1a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	4a07      	ldr	r2, [pc, #28]	; (8009c40 <TL_BLE_Init+0x64>)
 8009c22:	6013      	str	r3, [r2, #0]

  return 0;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	200301d0 	.word	0x200301d0
 8009c34:	20030000 	.word	0x20030000
 8009c38:	20030a48 	.word	0x20030a48
 8009c3c:	2000041c 	.word	0x2000041c
 8009c40:	20000420 	.word	0x20000420

08009c44 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8009c50:	4b09      	ldr	r3, [pc, #36]	; (8009c78 <TL_BLE_SendCmd+0x34>)
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2201      	movs	r2, #1
 8009c58:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8009c5a:	4b07      	ldr	r3, [pc, #28]	; (8009c78 <TL_BLE_SendCmd+0x34>)
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4619      	mov	r1, r3
 8009c62:	2001      	movs	r0, #1
 8009c64:	f000 f96c 	bl	8009f40 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8009c68:	f7f8 f898 	bl	8001d9c <HW_IPCC_BLE_SendCmd>

  return 0;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3708      	adds	r7, #8
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	20030000 	.word	0x20030000

08009c7c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8009c82:	e01c      	b.n	8009cbe <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8009c84:	1d3b      	adds	r3, r7, #4
 8009c86:	4619      	mov	r1, r3
 8009c88:	4812      	ldr	r0, [pc, #72]	; (8009cd4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009c8a:	f000 fc46 	bl	800a51a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	7a5b      	ldrb	r3, [r3, #9]
 8009c92:	2b0f      	cmp	r3, #15
 8009c94:	d003      	beq.n	8009c9e <HW_IPCC_BLE_RxEvtNot+0x22>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	7a5b      	ldrb	r3, [r3, #9]
 8009c9a:	2b0e      	cmp	r3, #14
 8009c9c:	d105      	bne.n	8009caa <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	2002      	movs	r0, #2
 8009ca4:	f000 f94c 	bl	8009f40 <OutputDbgTrace>
 8009ca8:	e004      	b.n	8009cb4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	4619      	mov	r1, r3
 8009cae:	2003      	movs	r0, #3
 8009cb0:	f000 f946 	bl	8009f40 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8009cb4:	4b08      	ldr	r3, [pc, #32]	; (8009cd8 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	4610      	mov	r0, r2
 8009cbc:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8009cbe:	4805      	ldr	r0, [pc, #20]	; (8009cd4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009cc0:	f000 fba4 	bl	800a40c <LST_is_empty>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d0dc      	beq.n	8009c84 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8009cca:	bf00      	nop
}
 8009ccc:	3708      	adds	r7, #8
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	200301d0 	.word	0x200301d0
 8009cd8:	2000041c 	.word	0x2000041c

08009cdc <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8009ce0:	4b02      	ldr	r3, [pc, #8]	; (8009cec <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4798      	blx	r3

  return;
 8009ce6:	bf00      	nop
}
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	20000420 	.word	0x20000420

08009cf0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8009cfc:	480d      	ldr	r0, [pc, #52]	; (8009d34 <TL_SYS_Init+0x44>)
 8009cfe:	f000 fb75 	bl	800a3ec <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8009d02:	4b0d      	ldr	r3, [pc, #52]	; (8009d38 <TL_SYS_Init+0x48>)
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	689a      	ldr	r2, [r3, #8]
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	4a08      	ldr	r2, [pc, #32]	; (8009d34 <TL_SYS_Init+0x44>)
 8009d14:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8009d16:	f7f8 f863 	bl	8001de0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a07      	ldr	r2, [pc, #28]	; (8009d3c <TL_SYS_Init+0x4c>)
 8009d20:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	4a06      	ldr	r2, [pc, #24]	; (8009d40 <TL_SYS_Init+0x50>)
 8009d28:	6013      	str	r3, [r2, #0]

  return 0;
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3710      	adds	r7, #16
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}
 8009d34:	200301d8 	.word	0x200301d8
 8009d38:	20030000 	.word	0x20030000
 8009d3c:	20000424 	.word	0x20000424
 8009d40:	20000428 	.word	0x20000428

08009d44 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8009d50:	4b09      	ldr	r3, [pc, #36]	; (8009d78 <TL_SYS_SendCmd+0x34>)
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2210      	movs	r2, #16
 8009d58:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8009d5a:	4b07      	ldr	r3, [pc, #28]	; (8009d78 <TL_SYS_SendCmd+0x34>)
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4619      	mov	r1, r3
 8009d62:	2004      	movs	r0, #4
 8009d64:	f000 f8ec 	bl	8009f40 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8009d68:	f7f8 f844 	bl	8001df4 <HW_IPCC_SYS_SendCmd>

  return 0;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	20030000 	.word	0x20030000

08009d7c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009d80:	4b07      	ldr	r3, [pc, #28]	; (8009da0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4619      	mov	r1, r3
 8009d88:	2005      	movs	r0, #5
 8009d8a:	f000 f8d9 	bl	8009f40 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009d8e:	4b05      	ldr	r3, [pc, #20]	; (8009da4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a03      	ldr	r2, [pc, #12]	; (8009da0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009d94:	68d2      	ldr	r2, [r2, #12]
 8009d96:	6812      	ldr	r2, [r2, #0]
 8009d98:	4610      	mov	r0, r2
 8009d9a:	4798      	blx	r3

  return;
 8009d9c:	bf00      	nop
}
 8009d9e:	bd80      	pop	{r7, pc}
 8009da0:	20030000 	.word	0x20030000
 8009da4:	20000424 	.word	0x20000424

08009da8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009dae:	e00e      	b.n	8009dce <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8009db0:	1d3b      	adds	r3, r7, #4
 8009db2:	4619      	mov	r1, r3
 8009db4:	480b      	ldr	r0, [pc, #44]	; (8009de4 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009db6:	f000 fbb0 	bl	800a51a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	2006      	movs	r0, #6
 8009dc0:	f000 f8be 	bl	8009f40 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8009dc4:	4b08      	ldr	r3, [pc, #32]	; (8009de8 <HW_IPCC_SYS_EvtNot+0x40>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	4610      	mov	r0, r2
 8009dcc:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009dce:	4805      	ldr	r0, [pc, #20]	; (8009de4 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009dd0:	f000 fb1c 	bl	800a40c <LST_is_empty>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d0ea      	beq.n	8009db0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8009dda:	bf00      	nop
}
 8009ddc:	3708      	adds	r7, #8
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	200301d8 	.word	0x200301d8
 8009de8:	20000428 	.word	0x20000428

08009dec <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8009df4:	4817      	ldr	r0, [pc, #92]	; (8009e54 <TL_MM_Init+0x68>)
 8009df6:	f000 faf9 	bl	800a3ec <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8009dfa:	4817      	ldr	r0, [pc, #92]	; (8009e58 <TL_MM_Init+0x6c>)
 8009dfc:	f000 faf6 	bl	800a3ec <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8009e00:	4b16      	ldr	r3, [pc, #88]	; (8009e5c <TL_MM_Init+0x70>)
 8009e02:	691b      	ldr	r3, [r3, #16]
 8009e04:	4a16      	ldr	r2, [pc, #88]	; (8009e60 <TL_MM_Init+0x74>)
 8009e06:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8009e08:	4b15      	ldr	r3, [pc, #84]	; (8009e60 <TL_MM_Init+0x74>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	6892      	ldr	r2, [r2, #8]
 8009e10:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8009e12:	4b13      	ldr	r3, [pc, #76]	; (8009e60 <TL_MM_Init+0x74>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	68d2      	ldr	r2, [r2, #12]
 8009e1a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8009e1c:	4b10      	ldr	r3, [pc, #64]	; (8009e60 <TL_MM_Init+0x74>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a0c      	ldr	r2, [pc, #48]	; (8009e54 <TL_MM_Init+0x68>)
 8009e22:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8009e24:	4b0e      	ldr	r3, [pc, #56]	; (8009e60 <TL_MM_Init+0x74>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	6812      	ldr	r2, [r2, #0]
 8009e2c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8009e2e:	4b0c      	ldr	r3, [pc, #48]	; (8009e60 <TL_MM_Init+0x74>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	6852      	ldr	r2, [r2, #4]
 8009e36:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8009e38:	4b09      	ldr	r3, [pc, #36]	; (8009e60 <TL_MM_Init+0x74>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	6912      	ldr	r2, [r2, #16]
 8009e40:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8009e42:	4b07      	ldr	r3, [pc, #28]	; (8009e60 <TL_MM_Init+0x74>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	6952      	ldr	r2, [r2, #20]
 8009e4a:	619a      	str	r2, [r3, #24]

  return;
 8009e4c:	bf00      	nop
}
 8009e4e:	3708      	adds	r7, #8
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	200301c0 	.word	0x200301c0
 8009e58:	20000414 	.word	0x20000414
 8009e5c:	20030000 	.word	0x20030000
 8009e60:	2000042c 	.word	0x2000042c

08009e64 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8009e6c:	6879      	ldr	r1, [r7, #4]
 8009e6e:	4807      	ldr	r0, [pc, #28]	; (8009e8c <TL_MM_EvtDone+0x28>)
 8009e70:	f000 fb10 	bl	800a494 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8009e74:	6879      	ldr	r1, [r7, #4]
 8009e76:	2000      	movs	r0, #0
 8009e78:	f000 f862 	bl	8009f40 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8009e7c:	4804      	ldr	r0, [pc, #16]	; (8009e90 <TL_MM_EvtDone+0x2c>)
 8009e7e:	f7f7 ffdf 	bl	8001e40 <HW_IPCC_MM_SendFreeBuf>

  return;
 8009e82:	bf00      	nop
}
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	20000414 	.word	0x20000414
 8009e90:	08009e95 	.word	0x08009e95

08009e94 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009e9a:	e00c      	b.n	8009eb6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8009e9c:	1d3b      	adds	r3, r7, #4
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	480a      	ldr	r0, [pc, #40]	; (8009ecc <SendFreeBuf+0x38>)
 8009ea2:	f000 fb3a 	bl	800a51a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8009ea6:	4b0a      	ldr	r3, [pc, #40]	; (8009ed0 <SendFreeBuf+0x3c>)
 8009ea8:	691b      	ldr	r3, [r3, #16]
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	4611      	mov	r1, r2
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f000 faef 	bl	800a494 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009eb6:	4805      	ldr	r0, [pc, #20]	; (8009ecc <SendFreeBuf+0x38>)
 8009eb8:	f000 faa8 	bl	800a40c <LST_is_empty>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d0ec      	beq.n	8009e9c <SendFreeBuf+0x8>
  }

  return;
 8009ec2:	bf00      	nop
}
 8009ec4:	3708      	adds	r7, #8
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	20000414 	.word	0x20000414
 8009ed0:	20030000 	.word	0x20030000

08009ed4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8009ed8:	4805      	ldr	r0, [pc, #20]	; (8009ef0 <TL_TRACES_Init+0x1c>)
 8009eda:	f000 fa87 	bl	800a3ec <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8009ede:	4b05      	ldr	r3, [pc, #20]	; (8009ef4 <TL_TRACES_Init+0x20>)
 8009ee0:	695b      	ldr	r3, [r3, #20]
 8009ee2:	4a03      	ldr	r2, [pc, #12]	; (8009ef0 <TL_TRACES_Init+0x1c>)
 8009ee4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8009ee6:	f7f7 ffe1 	bl	8001eac <HW_IPCC_TRACES_Init>

  return;
 8009eea:	bf00      	nop
}
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	200301c8 	.word	0x200301c8
 8009ef4:	20030000 	.word	0x20030000

08009ef8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009efe:	e008      	b.n	8009f12 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8009f00:	1d3b      	adds	r3, r7, #4
 8009f02:	4619      	mov	r1, r3
 8009f04:	4808      	ldr	r0, [pc, #32]	; (8009f28 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009f06:	f000 fb08 	bl	800a51a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f000 f80d 	bl	8009f2c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009f12:	4805      	ldr	r0, [pc, #20]	; (8009f28 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009f14:	f000 fa7a 	bl	800a40c <LST_is_empty>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d0f0      	beq.n	8009f00 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8009f1e:	bf00      	nop
}
 8009f20:	3708      	adds	r7, #8
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	200301c8 	.word	0x200301c8

08009f2c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8009f34:	bf00      	nop
 8009f36:	370c      	adds	r7, #12
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b085      	sub	sp, #20
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	4603      	mov	r3, r0
 8009f48:	6039      	str	r1, [r7, #0]
 8009f4a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8009f4c:	79fb      	ldrb	r3, [r7, #7]
 8009f4e:	2b06      	cmp	r3, #6
 8009f50:	d849      	bhi.n	8009fe6 <OutputDbgTrace+0xa6>
 8009f52:	a201      	add	r2, pc, #4	; (adr r2, 8009f58 <OutputDbgTrace+0x18>)
 8009f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f58:	08009f75 	.word	0x08009f75
 8009f5c:	08009f97 	.word	0x08009f97
 8009f60:	08009f9d 	.word	0x08009f9d
 8009f64:	08009fb7 	.word	0x08009fb7
 8009f68:	08009fc3 	.word	0x08009fc3
 8009f6c:	08009fc9 	.word	0x08009fc9
 8009f70:	08009fdb 	.word	0x08009fdb
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	7a5b      	ldrb	r3, [r3, #9]
 8009f7c:	2b0f      	cmp	r3, #15
 8009f7e:	d004      	beq.n	8009f8a <OutputDbgTrace+0x4a>
 8009f80:	2bff      	cmp	r3, #255	; 0xff
 8009f82:	d004      	beq.n	8009f8e <OutputDbgTrace+0x4e>
 8009f84:	2b0e      	cmp	r3, #14
 8009f86:	d004      	beq.n	8009f92 <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8009f88:	e004      	b.n	8009f94 <OutputDbgTrace+0x54>
          break;
 8009f8a:	bf00      	nop
 8009f8c:	e02c      	b.n	8009fe8 <OutputDbgTrace+0xa8>
          break;
 8009f8e:	bf00      	nop
 8009f90:	e02a      	b.n	8009fe8 <OutputDbgTrace+0xa8>
          break;
 8009f92:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8009f94:	e028      	b.n	8009fe8 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009f9a:	e025      	b.n	8009fe8 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	7a5b      	ldrb	r3, [r3, #9]
 8009fa4:	2b0e      	cmp	r3, #14
 8009fa6:	d002      	beq.n	8009fae <OutputDbgTrace+0x6e>
 8009fa8:	2b0f      	cmp	r3, #15
 8009faa:	d002      	beq.n	8009fb2 <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009fac:	e002      	b.n	8009fb4 <OutputDbgTrace+0x74>
          break;
 8009fae:	bf00      	nop
 8009fb0:	e01a      	b.n	8009fe8 <OutputDbgTrace+0xa8>
          break;
 8009fb2:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009fb4:	e018      	b.n	8009fe8 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	7a5b      	ldrb	r3, [r3, #9]
 8009fbe:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009fc0:	e012      	b.n	8009fe8 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009fc6:	e00f      	b.n	8009fe8 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	7a5b      	ldrb	r3, [r3, #9]
 8009fd0:	2b0e      	cmp	r3, #14
 8009fd2:	d000      	beq.n	8009fd6 <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009fd4:	e000      	b.n	8009fd8 <OutputDbgTrace+0x98>
          break;
 8009fd6:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009fd8:	e006      	b.n	8009fe8 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	7a5b      	ldrb	r3, [r3, #9]
 8009fe2:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009fe4:	e000      	b.n	8009fe8 <OutputDbgTrace+0xa8>

    default:
      break;
 8009fe6:	bf00      	nop
  }

  return;
 8009fe8:	bf00      	nop
}
 8009fea:	3714      	adds	r7, #20
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b08a      	sub	sp, #40	; 0x28
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	3301      	adds	r3, #1
 800a006:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800a008:	6a3b      	ldr	r3, [r7, #32]
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	2bff      	cmp	r3, #255	; 0xff
 800a00e:	d000      	beq.n	800a012 <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800a010:	e04a      	b.n	800a0a8 <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800a012:	6a3b      	ldr	r3, [r7, #32]
 800a014:	3302      	adds	r3, #2
 800a016:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	881b      	ldrh	r3, [r3, #0]
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	461a      	mov	r2, r3
 800a020:	f640 4301 	movw	r3, #3073	; 0xc01
 800a024:	429a      	cmp	r2, r3
 800a026:	d000      	beq.n	800a02a <PeerToPeer_Event_Handler+0x36>
          break;
 800a028:	e03d      	b.n	800a0a6 <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800a02a:	69fb      	ldr	r3, [r7, #28]
 800a02c:	3302      	adds	r3, #2
 800a02e:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800a030:	69bb      	ldr	r3, [r7, #24]
 800a032:	885b      	ldrh	r3, [r3, #2]
 800a034:	b29b      	uxth	r3, r3
 800a036:	461a      	mov	r2, r3
 800a038:	4b1e      	ldr	r3, [pc, #120]	; (800a0b4 <PeerToPeer_Event_Handler+0xc0>)
 800a03a:	889b      	ldrh	r3, [r3, #4]
 800a03c:	3302      	adds	r3, #2
 800a03e:	429a      	cmp	r2, r3
 800a040:	d118      	bne.n	800a074 <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 800a042:	2301      	movs	r3, #1
 800a044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	7a1b      	ldrb	r3, [r3, #8]
 800a04c:	f003 0301 	and.w	r3, r3, #1
 800a050:	2b00      	cmp	r3, #0
 800a052:	d007      	beq.n	800a064 <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800a054:	2300      	movs	r3, #0
 800a056:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800a058:	f107 0308 	add.w	r3, r7, #8
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7f7 fbcb 	bl	80017f8 <P2PS_STM_App_Notification>
        break;
 800a062:	e01f      	b.n	800a0a4 <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800a064:	2301      	movs	r3, #1
 800a066:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800a068:	f107 0308 	add.w	r3, r7, #8
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7f7 fbc3 	bl	80017f8 <P2PS_STM_App_Notification>
        break;
 800a072:	e017      	b.n	800a0a4 <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	885b      	ldrh	r3, [r3, #2]
 800a078:	b29b      	uxth	r3, r3
 800a07a:	461a      	mov	r2, r3
 800a07c:	4b0d      	ldr	r3, [pc, #52]	; (800a0b4 <PeerToPeer_Event_Handler+0xc0>)
 800a07e:	885b      	ldrh	r3, [r3, #2]
 800a080:	3301      	adds	r3, #1
 800a082:	429a      	cmp	r2, r3
 800a084:	d10e      	bne.n	800a0a4 <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800a086:	2303      	movs	r3, #3
 800a088:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	88db      	ldrh	r3, [r3, #6]
 800a08e:	b29b      	uxth	r3, r3
 800a090:	b2db      	uxtb	r3, r3
 800a092:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800a094:	69bb      	ldr	r3, [r7, #24]
 800a096:	3308      	adds	r3, #8
 800a098:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);
 800a09a:	f107 0308 	add.w	r3, r7, #8
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7f7 fbaa 	bl	80017f8 <P2PS_STM_App_Notification>
        break;
 800a0a4:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800a0a6:	bf00      	nop
  }

  return(return_value);
 800a0a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3728      	adds	r7, #40	; 0x28
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	20000370 	.word	0x20000370

0800a0b8 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b08a      	sub	sp, #40	; 0x28
 800a0bc:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800a0be:	484a      	ldr	r0, [pc, #296]	; (800a1e8 <P2PS_STM_Init+0x130>)
 800a0c0:	f7fe fa30 	bl	8008524 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800a0c4:	238f      	movs	r3, #143	; 0x8f
 800a0c6:	703b      	strb	r3, [r7, #0]
 800a0c8:	23e5      	movs	r3, #229	; 0xe5
 800a0ca:	707b      	strb	r3, [r7, #1]
 800a0cc:	23b3      	movs	r3, #179	; 0xb3
 800a0ce:	70bb      	strb	r3, [r7, #2]
 800a0d0:	23d5      	movs	r3, #213	; 0xd5
 800a0d2:	70fb      	strb	r3, [r7, #3]
 800a0d4:	232e      	movs	r3, #46	; 0x2e
 800a0d6:	713b      	strb	r3, [r7, #4]
 800a0d8:	237f      	movs	r3, #127	; 0x7f
 800a0da:	717b      	strb	r3, [r7, #5]
 800a0dc:	234a      	movs	r3, #74	; 0x4a
 800a0de:	71bb      	strb	r3, [r7, #6]
 800a0e0:	2398      	movs	r3, #152	; 0x98
 800a0e2:	71fb      	strb	r3, [r7, #7]
 800a0e4:	232a      	movs	r3, #42	; 0x2a
 800a0e6:	723b      	strb	r3, [r7, #8]
 800a0e8:	2348      	movs	r3, #72	; 0x48
 800a0ea:	727b      	strb	r3, [r7, #9]
 800a0ec:	237a      	movs	r3, #122	; 0x7a
 800a0ee:	72bb      	strb	r3, [r7, #10]
 800a0f0:	23cc      	movs	r3, #204	; 0xcc
 800a0f2:	72fb      	strb	r3, [r7, #11]
 800a0f4:	2340      	movs	r3, #64	; 0x40
 800a0f6:	733b      	strb	r3, [r7, #12]
 800a0f8:	23fe      	movs	r3, #254	; 0xfe
 800a0fa:	737b      	strb	r3, [r7, #13]
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	73bb      	strb	r3, [r7, #14]
 800a100:	2300      	movs	r3, #0
 800a102:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800a104:	4639      	mov	r1, r7
 800a106:	4b39      	ldr	r3, [pc, #228]	; (800a1ec <P2PS_STM_Init+0x134>)
 800a108:	9300      	str	r3, [sp, #0]
 800a10a:	2308      	movs	r3, #8
 800a10c:	2201      	movs	r2, #1
 800a10e:	2002      	movs	r0, #2
 800a110:	f7fe fe39 	bl	8008d86 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800a114:	2319      	movs	r3, #25
 800a116:	703b      	strb	r3, [r7, #0]
 800a118:	23ed      	movs	r3, #237	; 0xed
 800a11a:	707b      	strb	r3, [r7, #1]
 800a11c:	2382      	movs	r3, #130	; 0x82
 800a11e:	70bb      	strb	r3, [r7, #2]
 800a120:	23ae      	movs	r3, #174	; 0xae
 800a122:	70fb      	strb	r3, [r7, #3]
 800a124:	23ed      	movs	r3, #237	; 0xed
 800a126:	713b      	strb	r3, [r7, #4]
 800a128:	2321      	movs	r3, #33	; 0x21
 800a12a:	717b      	strb	r3, [r7, #5]
 800a12c:	234c      	movs	r3, #76	; 0x4c
 800a12e:	71bb      	strb	r3, [r7, #6]
 800a130:	239d      	movs	r3, #157	; 0x9d
 800a132:	71fb      	strb	r3, [r7, #7]
 800a134:	2341      	movs	r3, #65	; 0x41
 800a136:	723b      	strb	r3, [r7, #8]
 800a138:	2345      	movs	r3, #69	; 0x45
 800a13a:	727b      	strb	r3, [r7, #9]
 800a13c:	2322      	movs	r3, #34	; 0x22
 800a13e:	72bb      	strb	r3, [r7, #10]
 800a140:	238e      	movs	r3, #142	; 0x8e
 800a142:	72fb      	strb	r3, [r7, #11]
 800a144:	2341      	movs	r3, #65	; 0x41
 800a146:	733b      	strb	r3, [r7, #12]
 800a148:	23fe      	movs	r3, #254	; 0xfe
 800a14a:	737b      	strb	r3, [r7, #13]
 800a14c:	2300      	movs	r3, #0
 800a14e:	73bb      	strb	r3, [r7, #14]
 800a150:	2300      	movs	r3, #0
 800a152:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800a154:	4b25      	ldr	r3, [pc, #148]	; (800a1ec <P2PS_STM_Init+0x134>)
 800a156:	8818      	ldrh	r0, [r3, #0]
 800a158:	463a      	mov	r2, r7
 800a15a:	4b25      	ldr	r3, [pc, #148]	; (800a1f0 <P2PS_STM_Init+0x138>)
 800a15c:	9305      	str	r3, [sp, #20]
 800a15e:	2301      	movs	r3, #1
 800a160:	9304      	str	r3, [sp, #16]
 800a162:	230a      	movs	r3, #10
 800a164:	9303      	str	r3, [sp, #12]
 800a166:	2301      	movs	r3, #1
 800a168:	9302      	str	r3, [sp, #8]
 800a16a:	2300      	movs	r3, #0
 800a16c:	9301      	str	r3, [sp, #4]
 800a16e:	2306      	movs	r3, #6
 800a170:	9300      	str	r3, [sp, #0]
 800a172:	2302      	movs	r3, #2
 800a174:	2102      	movs	r1, #2
 800a176:	f7fe feb5 	bl	8008ee4 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800a17a:	2319      	movs	r3, #25
 800a17c:	703b      	strb	r3, [r7, #0]
 800a17e:	23ed      	movs	r3, #237	; 0xed
 800a180:	707b      	strb	r3, [r7, #1]
 800a182:	2382      	movs	r3, #130	; 0x82
 800a184:	70bb      	strb	r3, [r7, #2]
 800a186:	23ae      	movs	r3, #174	; 0xae
 800a188:	70fb      	strb	r3, [r7, #3]
 800a18a:	23ed      	movs	r3, #237	; 0xed
 800a18c:	713b      	strb	r3, [r7, #4]
 800a18e:	2321      	movs	r3, #33	; 0x21
 800a190:	717b      	strb	r3, [r7, #5]
 800a192:	234c      	movs	r3, #76	; 0x4c
 800a194:	71bb      	strb	r3, [r7, #6]
 800a196:	239d      	movs	r3, #157	; 0x9d
 800a198:	71fb      	strb	r3, [r7, #7]
 800a19a:	2341      	movs	r3, #65	; 0x41
 800a19c:	723b      	strb	r3, [r7, #8]
 800a19e:	2345      	movs	r3, #69	; 0x45
 800a1a0:	727b      	strb	r3, [r7, #9]
 800a1a2:	2322      	movs	r3, #34	; 0x22
 800a1a4:	72bb      	strb	r3, [r7, #10]
 800a1a6:	238e      	movs	r3, #142	; 0x8e
 800a1a8:	72fb      	strb	r3, [r7, #11]
 800a1aa:	2342      	movs	r3, #66	; 0x42
 800a1ac:	733b      	strb	r3, [r7, #12]
 800a1ae:	23fe      	movs	r3, #254	; 0xfe
 800a1b0:	737b      	strb	r3, [r7, #13]
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	73bb      	strb	r3, [r7, #14]
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800a1ba:	4b0c      	ldr	r3, [pc, #48]	; (800a1ec <P2PS_STM_Init+0x134>)
 800a1bc:	8818      	ldrh	r0, [r3, #0]
 800a1be:	463a      	mov	r2, r7
 800a1c0:	4b0c      	ldr	r3, [pc, #48]	; (800a1f4 <P2PS_STM_Init+0x13c>)
 800a1c2:	9305      	str	r3, [sp, #20]
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	9304      	str	r3, [sp, #16]
 800a1c8:	230a      	movs	r3, #10
 800a1ca:	9303      	str	r3, [sp, #12]
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	9302      	str	r3, [sp, #8]
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	9301      	str	r3, [sp, #4]
 800a1d4:	2310      	movs	r3, #16
 800a1d6:	9300      	str	r3, [sp, #0]
 800a1d8:	2302      	movs	r3, #2
 800a1da:	2102      	movs	r1, #2
 800a1dc:	f7fe fe82 	bl	8008ee4 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif


  return;
 800a1e0:	bf00      	nop
}
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	08009ff5 	.word	0x08009ff5
 800a1ec:	20000370 	.word	0x20000370
 800a1f0:	20000372 	.word	0x20000372
 800a1f4:	20000374 	.word	0x20000374

0800a1f8 <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b086      	sub	sp, #24
 800a1fc:	af02      	add	r7, sp, #8
 800a1fe:	4603      	mov	r3, r0
 800a200:	6039      	str	r1, [r7, #0]
 800a202:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800a204:	2342      	movs	r3, #66	; 0x42
 800a206:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800a208:	88fb      	ldrh	r3, [r7, #6]
 800a20a:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800a20e:	4293      	cmp	r3, r2
 800a210:	d000      	beq.n	800a214 <P2PS_STM_App_Update_Char+0x1c>
                             (uint8_t *)  pPayload);

      break;

    default:
      break;
 800a212:	e00c      	b.n	800a22e <P2PS_STM_App_Update_Char+0x36>
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800a214:	4b08      	ldr	r3, [pc, #32]	; (800a238 <P2PS_STM_App_Update_Char+0x40>)
 800a216:	8818      	ldrh	r0, [r3, #0]
 800a218:	4b07      	ldr	r3, [pc, #28]	; (800a238 <P2PS_STM_App_Update_Char+0x40>)
 800a21a:	8899      	ldrh	r1, [r3, #4]
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	9300      	str	r3, [sp, #0]
 800a220:	2302      	movs	r3, #2
 800a222:	2200      	movs	r2, #0
 800a224:	f7fe ff48 	bl	80090b8 <aci_gatt_update_char_value>
 800a228:	4603      	mov	r3, r0
 800a22a:	73fb      	strb	r3, [r7, #15]
      break;
 800a22c:	bf00      	nop
  }

  return result;
 800a22e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a230:	4618      	mov	r0, r3
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	20000370 	.word	0x20000370

0800a23c <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b086      	sub	sp, #24
 800a240:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a242:	f3ef 8310 	mrs	r3, PRIMASK
 800a246:	60fb      	str	r3, [r7, #12]
  return(result);
 800a248:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800a24a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a24c:	b672      	cpsid	i

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800a24e:	1cbb      	adds	r3, r7, #2
 800a250:	4619      	mov	r1, r3
 800a252:	4812      	ldr	r0, [pc, #72]	; (800a29c <DbgTrace_TxCpltCallback+0x60>)
 800a254:	f000 fbd7 	bl	800aa06 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800a258:	1cbb      	adds	r3, r7, #2
 800a25a:	4619      	mov	r1, r3
 800a25c:	480f      	ldr	r0, [pc, #60]	; (800a29c <DbgTrace_TxCpltCallback+0x60>)
 800a25e:	f000 fcc6 	bl	800abee <CircularQueue_Sense>
 800a262:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d00b      	beq.n	800a282 <DbgTrace_TxCpltCallback+0x46>
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800a274:	887b      	ldrh	r3, [r7, #2]
 800a276:	4a0a      	ldr	r2, [pc, #40]	; (800a2a0 <DbgTrace_TxCpltCallback+0x64>)
 800a278:	4619      	mov	r1, r3
 800a27a:	6938      	ldr	r0, [r7, #16]
 800a27c:	f7f7 ff89 	bl	8002192 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800a280:	e007      	b.n	800a292 <DbgTrace_TxCpltCallback+0x56>
    DbgTracePeripheralReady = SET;
 800a282:	4b08      	ldr	r3, [pc, #32]	; (800a2a4 <DbgTrace_TxCpltCallback+0x68>)
 800a284:	2201      	movs	r2, #1
 800a286:	701a      	strb	r2, [r3, #0]
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	607b      	str	r3, [r7, #4]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f383 8810 	msr	PRIMASK, r3
}
 800a292:	bf00      	nop
 800a294:	3718      	adds	r7, #24
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	20000430 	.word	0x20000430
 800a2a0:	0800a23d 	.word	0x0800a23d
 800a2a4:	20000035 	.word	0x20000035

0800a2a8 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800a2ae:	f7f7 ff6a 	bl	8002186 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800a2b2:	2302      	movs	r3, #2
 800a2b4:	9300      	str	r3, [sp, #0]
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a2bc:	4903      	ldr	r1, [pc, #12]	; (800a2cc <DbgTraceInit+0x24>)
 800a2be:	4804      	ldr	r0, [pc, #16]	; (800a2d0 <DbgTraceInit+0x28>)
 800a2c0:	f000 f948 	bl	800a554 <CircularQueue_Init>
#endif 
#endif
  return;
 800a2c4:	bf00      	nop
}
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	20000450 	.word	0x20000450
 800a2d0:	20000430 	.word	0x20000430

0800a2d4 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	68b9      	ldr	r1, [r7, #8]
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f000 f805 	bl	800a2f4 <DbgTraceWrite>
 800a2ea:	4603      	mov	r3, r0
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b08a      	sub	sp, #40	; 0x28
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	60f8      	str	r0, [r7, #12]
 800a2fc:	60b9      	str	r1, [r7, #8]
 800a2fe:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800a300:	2300      	movs	r3, #0
 800a302:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a304:	f3ef 8310 	mrs	r3, PRIMASK
 800a308:	61bb      	str	r3, [r7, #24]
  return(result);
 800a30a:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800a30c:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a314:	d102      	bne.n	800a31c <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800a316:	2300      	movs	r3, #0
 800a318:	627b      	str	r3, [r7, #36]	; 0x24
 800a31a:	e034      	b.n	800a386 <DbgTraceWrite+0x92>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d006      	beq.n	800a330 <DbgTraceWrite+0x3c>
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2b02      	cmp	r3, #2
 800a326:	d003      	beq.n	800a330 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800a328:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a32c:	627b      	str	r3, [r7, #36]	; 0x24
 800a32e:	e02a      	b.n	800a386 <DbgTraceWrite+0x92>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d027      	beq.n	800a386 <DbgTraceWrite+0x92>
  {
    chars_written = bufSize;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800a33a:	b672      	cpsid	i
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	b29a      	uxth	r2, r3
 800a340:	2301      	movs	r3, #1
 800a342:	68b9      	ldr	r1, [r7, #8]
 800a344:	4812      	ldr	r0, [pc, #72]	; (800a390 <DbgTraceWrite+0x9c>)
 800a346:	f000 f937 	bl	800a5b8 <CircularQueue_Add>
 800a34a:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800a34c:	69fb      	ldr	r3, [r7, #28]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d014      	beq.n	800a37c <DbgTraceWrite+0x88>
 800a352:	4b10      	ldr	r3, [pc, #64]	; (800a394 <DbgTraceWrite+0xa0>)
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	b2db      	uxtb	r3, r3
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d00f      	beq.n	800a37c <DbgTraceWrite+0x88>
    {
      DbgTracePeripheralReady = RESET;
 800a35c:	4b0d      	ldr	r3, [pc, #52]	; (800a394 <DbgTraceWrite+0xa0>)
 800a35e:	2200      	movs	r2, #0
 800a360:	701a      	strb	r2, [r3, #0]
 800a362:	6a3b      	ldr	r3, [r7, #32]
 800a364:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	f383 8810 	msr	PRIMASK, r3
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	b29b      	uxth	r3, r3
 800a370:	4a09      	ldr	r2, [pc, #36]	; (800a398 <DbgTraceWrite+0xa4>)
 800a372:	4619      	mov	r1, r3
 800a374:	69f8      	ldr	r0, [r7, #28]
 800a376:	f7f7 ff0c 	bl	8002192 <DbgOutputTraces>
 800a37a:	e004      	b.n	800a386 <DbgTraceWrite+0x92>
 800a37c:	6a3b      	ldr	r3, [r7, #32]
 800a37e:	613b      	str	r3, [r7, #16]
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	f383 8810 	msr	PRIMASK, r3
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800a386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3728      	adds	r7, #40	; 0x28
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	20000430 	.word	0x20000430
 800a394:	20000035 	.word	0x20000035
 800a398:	0800a23d 	.word	0x0800a23d

0800a39c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800a39c:	b480      	push	{r7}
 800a39e:	b085      	sub	sp, #20
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800a3a6:	4b0f      	ldr	r3, [pc, #60]	; (800a3e4 <OTP_Read+0x48>)
 800a3a8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a3aa:	e002      	b.n	800a3b2 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	3b08      	subs	r3, #8
 800a3b0:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	3307      	adds	r3, #7
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	79fa      	ldrb	r2, [r7, #7]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d003      	beq.n	800a3c6 <OTP_Read+0x2a>
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	4a09      	ldr	r2, [pc, #36]	; (800a3e8 <OTP_Read+0x4c>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d1f2      	bne.n	800a3ac <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	3307      	adds	r3, #7
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	79fa      	ldrb	r2, [r7, #7]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d001      	beq.n	800a3d6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3714      	adds	r7, #20
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr
 800a3e4:	1fff73f8 	.word	0x1fff73f8
 800a3e8:	1fff7000 	.word	0x1fff7000

0800a3ec <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b083      	sub	sp, #12
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	605a      	str	r2, [r3, #4]
}
 800a400:	bf00      	nop
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b087      	sub	sp, #28
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a414:	f3ef 8310 	mrs	r3, PRIMASK
 800a418:	60fb      	str	r3, [r7, #12]
  return(result);
 800a41a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a41c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a41e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	429a      	cmp	r2, r3
 800a428:	d102      	bne.n	800a430 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800a42a:	2301      	movs	r3, #1
 800a42c:	75fb      	strb	r3, [r7, #23]
 800a42e:	e001      	b.n	800a434 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800a430:	2300      	movs	r3, #0
 800a432:	75fb      	strb	r3, [r7, #23]
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a43e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a440:	4618      	mov	r0, r3
 800a442:	371c      	adds	r7, #28
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b087      	sub	sp, #28
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a456:	f3ef 8310 	mrs	r3, PRIMASK
 800a45a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a45c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a45e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a460:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	683a      	ldr	r2, [r7, #0]
 800a474:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	683a      	ldr	r2, [r7, #0]
 800a47c:	605a      	str	r2, [r3, #4]
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a488:	bf00      	nop
 800a48a:	371c      	adds	r7, #28
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr

0800a494 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a494:	b480      	push	{r7}
 800a496:	b087      	sub	sp, #28
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a49e:	f3ef 8310 	mrs	r3, PRIMASK
 800a4a2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a4a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a4a8:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	685a      	ldr	r2, [r3, #4]
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	683a      	ldr	r2, [r7, #0]
 800a4bc:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	683a      	ldr	r2, [r7, #0]
 800a4c4:	601a      	str	r2, [r3, #0]
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a4d0:	bf00      	nop
 800a4d2:	371c      	adds	r7, #28
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b087      	sub	sp, #28
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4e4:	f3ef 8310 	mrs	r3, PRIMASK
 800a4e8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a4ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a4ee:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	6812      	ldr	r2, [r2, #0]
 800a4f8:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	6852      	ldr	r2, [r2, #4]
 800a502:	605a      	str	r2, [r3, #4]
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a50e:	bf00      	nop
 800a510:	371c      	adds	r7, #28
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr

0800a51a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b086      	sub	sp, #24
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
 800a522:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a524:	f3ef 8310 	mrs	r3, PRIMASK
 800a528:	60fb      	str	r3, [r7, #12]
  return(result);
 800a52a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a52c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a52e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4618      	mov	r0, r3
 800a53e:	f7ff ffcd 	bl	800a4dc <LST_remove_node>
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a54c:	bf00      	nop
 800a54e:	3718      	adds	r7, #24
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800a554:	b480      	push	{r7}
 800a556:	b085      	sub	sp, #20
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	607a      	str	r2, [r7, #4]
 800a560:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	68ba      	ldr	r2, [r7, #8]
 800a566:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2200      	movs	r2, #0
 800a56c:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2200      	movs	r2, #0
 800a572:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2200      	movs	r2, #0
 800a578:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	887a      	ldrh	r2, [r7, #2]
 800a58a:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	7e3a      	ldrb	r2, [r7, #24]
 800a590:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800a592:	7e3b      	ldrb	r3, [r7, #24]
 800a594:	f003 0302 	and.w	r3, r3, #2
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d006      	beq.n	800a5aa <CircularQueue_Init+0x56>
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	891b      	ldrh	r3, [r3, #8]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d002      	beq.n	800a5aa <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800a5a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5a8:	e000      	b.n	800a5ac <CircularQueue_Init+0x58>
  }
  return 0;
 800a5aa:	2300      	movs	r3, #0
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3714      	adds	r7, #20
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b08e      	sub	sp, #56	; 0x38
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	603b      	str	r3, [r7, #0]
 800a5c4:	4613      	mov	r3, r2
 800a5c6:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5d8:	2300      	movs	r3, #0
 800a5da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800a5dc:	2300      	movs	r3, #0
 800a5de:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	891b      	ldrh	r3, [r3, #8]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d101      	bne.n	800a5f0 <CircularQueue_Add+0x38>
 800a5ec:	2302      	movs	r3, #2
 800a5ee:	e000      	b.n	800a5f2 <CircularQueue_Add+0x3a>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	695b      	ldr	r3, [r3, #20]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d02a      	beq.n	800a652 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	891b      	ldrh	r3, [r3, #8]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d123      	bne.n	800a64c <CircularQueue_Add+0x94>
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	691b      	ldr	r3, [r3, #16]
 800a60c:	4413      	add	r3, r2
 800a60e:	781b      	ldrb	r3, [r3, #0]
 800a610:	b29a      	uxth	r2, r3
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	6819      	ldr	r1, [r3, #0]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	1c58      	adds	r0, r3, #1
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	4298      	cmp	r0, r3
 800a622:	d306      	bcc.n	800a632 <CircularQueue_Add+0x7a>
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6918      	ldr	r0, [r3, #16]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	1ac3      	subs	r3, r0, r3
 800a62e:	3301      	adds	r3, #1
 800a630:	e002      	b.n	800a638 <CircularQueue_Add+0x80>
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	691b      	ldr	r3, [r3, #16]
 800a636:	3301      	adds	r3, #1
 800a638:	440b      	add	r3, r1
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	021b      	lsls	r3, r3, #8
 800a640:	b29b      	uxth	r3, r3
 800a642:	4413      	add	r3, r2
 800a644:	b29b      	uxth	r3, r3
 800a646:	3302      	adds	r3, #2
 800a648:	b29b      	uxth	r3, r3
 800a64a:	e001      	b.n	800a650 <CircularQueue_Add+0x98>
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	891b      	ldrh	r3, [r3, #8]
 800a650:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	891b      	ldrh	r3, [r3, #8]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d002      	beq.n	800a660 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	891b      	ldrh	r3, [r3, #8]
 800a65e:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	691a      	ldr	r2, [r3, #16]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d307      	bcc.n	800a67c <CircularQueue_Add+0xc4>
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	685a      	ldr	r2, [r3, #4]
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6919      	ldr	r1, [r3, #16]
 800a674:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a676:	440b      	add	r3, r1
 800a678:	1ad3      	subs	r3, r2, r3
 800a67a:	e000      	b.n	800a67e <CircularQueue_Add+0xc6>
 800a67c:	2300      	movs	r3, #0
 800a67e:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800a680:	88fa      	ldrh	r2, [r7, #6]
 800a682:	7ffb      	ldrb	r3, [r7, #31]
 800a684:	4413      	add	r3, r2
 800a686:	461a      	mov	r2, r3
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	fb03 f302 	mul.w	r3, r3, r2
 800a68e:	69ba      	ldr	r2, [r7, #24]
 800a690:	429a      	cmp	r2, r3
 800a692:	d80b      	bhi.n	800a6ac <CircularQueue_Add+0xf4>
 800a694:	88fa      	ldrh	r2, [r7, #6]
 800a696:	7ffb      	ldrb	r3, [r7, #31]
 800a698:	4413      	add	r3, r2
 800a69a:	461a      	mov	r2, r3
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a6a2:	fb02 f201 	mul.w	r2, r2, r1
 800a6a6:	1a9b      	subs	r3, r3, r2
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	e000      	b.n	800a6ae <CircularQueue_Add+0xf6>
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800a6b0:	7dfa      	ldrb	r2, [r7, #23]
 800a6b2:	7ffb      	ldrb	r3, [r7, #31]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	bf8c      	ite	hi
 800a6b8:	2301      	movhi	r3, #1
 800a6ba:	2300      	movls	r3, #0
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800a6c0:	7fbb      	ldrb	r3, [r7, #30]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d008      	beq.n	800a6d8 <CircularQueue_Add+0x120>
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	7f1b      	ldrb	r3, [r3, #28]
 800a6ca:	f003 0301 	and.w	r3, r3, #1
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d002      	beq.n	800a6d8 <CircularQueue_Add+0x120>
 800a6d2:	7dfb      	ldrb	r3, [r7, #23]
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	e000      	b.n	800a6da <CircularQueue_Add+0x122>
 800a6d8:	8bbb      	ldrh	r3, [r7, #28]
 800a6da:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800a6dc:	7fbb      	ldrb	r3, [r7, #30]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d008      	beq.n	800a6f4 <CircularQueue_Add+0x13c>
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	7f1b      	ldrb	r3, [r3, #28]
 800a6e6:	f003 0302 	and.w	r3, r3, #2
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d002      	beq.n	800a6f4 <CircularQueue_Add+0x13c>
 800a6ee:	7ffb      	ldrb	r3, [r7, #31]
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	e000      	b.n	800a6f6 <CircularQueue_Add+0x13e>
 800a6f4:	8bbb      	ldrh	r3, [r7, #28]
 800a6f6:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800a6f8:	88fb      	ldrh	r3, [r7, #6]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f000 817e 	beq.w	800a9fc <CircularQueue_Add+0x444>
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	695a      	ldr	r2, [r3, #20]
 800a704:	88f9      	ldrh	r1, [r7, #6]
 800a706:	7ffb      	ldrb	r3, [r7, #31]
 800a708:	440b      	add	r3, r1
 800a70a:	4619      	mov	r1, r3
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	fb03 f301 	mul.w	r3, r3, r1
 800a712:	441a      	add	r2, r3
 800a714:	8bbb      	ldrh	r3, [r7, #28]
 800a716:	441a      	add	r2, r3
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	f200 816d 	bhi.w	800a9fc <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800a722:	2300      	movs	r3, #0
 800a724:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a726:	e14a      	b.n	800a9be <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	691a      	ldr	r2, [r3, #16]
 800a72c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a72e:	441a      	add	r2, r3
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	429a      	cmp	r2, r3
 800a736:	d307      	bcc.n	800a748 <CircularQueue_Add+0x190>
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	691a      	ldr	r2, [r3, #16]
 800a73c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a73e:	441a      	add	r2, r3
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	1ad3      	subs	r3, r2, r3
 800a746:	e003      	b.n	800a750 <CircularQueue_Add+0x198>
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	691a      	ldr	r2, [r3, #16]
 800a74c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a74e:	4413      	add	r3, r2
 800a750:	68fa      	ldr	r2, [r7, #12]
 800a752:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	691b      	ldr	r3, [r3, #16]
 800a758:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	891b      	ldrh	r3, [r3, #8]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d130      	bne.n	800a7c4 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681a      	ldr	r2, [r3, #0]
 800a766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a768:	1c59      	adds	r1, r3, #1
 800a76a:	6339      	str	r1, [r7, #48]	; 0x30
 800a76c:	4413      	add	r3, r2
 800a76e:	88fa      	ldrh	r2, [r7, #6]
 800a770:	b2d2      	uxtb	r2, r2
 800a772:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d304      	bcc.n	800a788 <CircularQueue_Add+0x1d0>
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a784:	1ad3      	subs	r3, r2, r3
 800a786:	e000      	b.n	800a78a <CircularQueue_Add+0x1d2>
 800a788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a78a:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800a78c:	88fb      	ldrh	r3, [r7, #6]
 800a78e:	0a1b      	lsrs	r3, r3, #8
 800a790:	b298      	uxth	r0, r3
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681a      	ldr	r2, [r3, #0]
 800a796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a798:	1c59      	adds	r1, r3, #1
 800a79a:	6339      	str	r1, [r7, #48]	; 0x30
 800a79c:	4413      	add	r3, r2
 800a79e:	b2c2      	uxtb	r2, r0
 800a7a0:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d304      	bcc.n	800a7b6 <CircularQueue_Add+0x1fe>
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7b2:	1ad3      	subs	r3, r2, r3
 800a7b4:	e000      	b.n	800a7b8 <CircularQueue_Add+0x200>
 800a7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b8:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	695b      	ldr	r3, [r3, #20]
 800a7be:	1c9a      	adds	r2, r3, #2
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800a7c4:	88fa      	ldrh	r2, [r7, #6]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6859      	ldr	r1, [r3, #4]
 800a7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7cc:	1acb      	subs	r3, r1, r3
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	bf28      	it	cs
 800a7d2:	4613      	movcs	r3, r2
 800a7d4:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800a7d6:	88fb      	ldrh	r3, [r7, #6]
 800a7d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d007      	beq.n	800a7ee <CircularQueue_Add+0x236>
 800a7de:	88fb      	ldrh	r3, [r7, #6]
 800a7e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d225      	bcs.n	800a832 <CircularQueue_Add+0x27a>
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	7f1b      	ldrb	r3, [r3, #28]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d121      	bne.n	800a832 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f4:	18d0      	adds	r0, r2, r3
 800a7f6:	88fb      	ldrh	r3, [r7, #6]
 800a7f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7fa:	fb02 f303 	mul.w	r3, r2, r3
 800a7fe:	68ba      	ldr	r2, [r7, #8]
 800a800:	4413      	add	r3, r2
 800a802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a804:	4619      	mov	r1, r3
 800a806:	f004 faad 	bl	800ed64 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	695a      	ldr	r2, [r3, #20]
 800a80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a810:	441a      	add	r2, r3
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800a816:	2300      	movs	r3, #0
 800a818:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800a81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81c:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800a81e:	88fa      	ldrh	r2, [r7, #6]
 800a820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a822:	1ad3      	subs	r3, r2, r3
 800a824:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800a826:	7ffb      	ldrb	r3, [r7, #31]
 800a828:	b29a      	uxth	r2, r3
 800a82a:	88fb      	ldrh	r3, [r7, #6]
 800a82c:	4413      	add	r3, r2
 800a82e:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a830:	e0a4      	b.n	800a97c <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800a832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a834:	2b00      	cmp	r3, #0
 800a836:	f000 80a1 	beq.w	800a97c <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	7f1b      	ldrb	r3, [r3, #28]
 800a83e:	f003 0301 	and.w	r3, r3, #1
 800a842:	2b00      	cmp	r3, #0
 800a844:	d03a      	beq.n	800a8bc <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	891b      	ldrh	r3, [r3, #8]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d10d      	bne.n	800a86a <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a854:	3b02      	subs	r3, #2
 800a856:	4413      	add	r3, r2
 800a858:	22ff      	movs	r2, #255	; 0xff
 800a85a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a862:	3b01      	subs	r3, #1
 800a864:	4413      	add	r3, r2
 800a866:	22ff      	movs	r2, #255	; 0xff
 800a868:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	695a      	ldr	r2, [r3, #20]
 800a86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a870:	441a      	add	r2, r3
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800a876:	2300      	movs	r3, #0
 800a878:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800a87a:	88fb      	ldrh	r3, [r7, #6]
 800a87c:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800a87e:	2300      	movs	r3, #0
 800a880:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	891b      	ldrh	r3, [r3, #8]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d16f      	bne.n	800a96a <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a890:	1c59      	adds	r1, r3, #1
 800a892:	6339      	str	r1, [r7, #48]	; 0x30
 800a894:	4413      	add	r3, r2
 800a896:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a898:	b2d2      	uxtb	r2, r2
 800a89a:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89e:	0a18      	lsrs	r0, r3, #8
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a6:	1c59      	adds	r1, r3, #1
 800a8a8:	6339      	str	r1, [r7, #48]	; 0x30
 800a8aa:	4413      	add	r3, r2
 800a8ac:	b2c2      	uxtb	r2, r0
 800a8ae:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	695b      	ldr	r3, [r3, #20]
 800a8b4:	1c9a      	adds	r2, r3, #2
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	615a      	str	r2, [r3, #20]
 800a8ba:	e056      	b.n	800a96a <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	7f1b      	ldrb	r3, [r3, #28]
 800a8c0:	f003 0302 	and.w	r3, r3, #2
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d050      	beq.n	800a96a <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	891b      	ldrh	r3, [r3, #8]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d14a      	bne.n	800a966 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681a      	ldr	r2, [r3, #0]
 800a8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d6:	3b02      	subs	r3, #2
 800a8d8:	4413      	add	r3, r2
 800a8da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8dc:	b2d2      	uxtb	r2, r2
 800a8de:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e2:	0a19      	lsrs	r1, r3, #8
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ea:	3b01      	subs	r3, #1
 800a8ec:	4413      	add	r3, r2
 800a8ee:	b2ca      	uxtb	r2, r1
 800a8f0:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f8:	18d0      	adds	r0, r2, r3
 800a8fa:	88fb      	ldrh	r3, [r7, #6]
 800a8fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8fe:	fb02 f303 	mul.w	r3, r2, r3
 800a902:	68ba      	ldr	r2, [r7, #8]
 800a904:	4413      	add	r3, r2
 800a906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a908:	4619      	mov	r1, r3
 800a90a:	f004 fa2b 	bl	800ed64 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	695a      	ldr	r2, [r3, #20]
 800a912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a914:	441a      	add	r2, r3
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800a91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a91c:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800a91e:	88fa      	ldrh	r2, [r7, #6]
 800a920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a922:	1ad3      	subs	r3, r2, r3
 800a924:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	699b      	ldr	r3, [r3, #24]
 800a92a:	1c5a      	adds	r2, r3, #1
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800a930:	2300      	movs	r3, #0
 800a932:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93a:	1c59      	adds	r1, r3, #1
 800a93c:	6339      	str	r1, [r7, #48]	; 0x30
 800a93e:	4413      	add	r3, r2
 800a940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a942:	b2d2      	uxtb	r2, r2
 800a944:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a948:	0a18      	lsrs	r0, r3, #8
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a950:	1c59      	adds	r1, r3, #1
 800a952:	6339      	str	r1, [r7, #48]	; 0x30
 800a954:	4413      	add	r3, r2
 800a956:	b2c2      	uxtb	r2, r0
 800a958:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	695b      	ldr	r3, [r3, #20]
 800a95e:	1c9a      	adds	r2, r3, #2
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	615a      	str	r2, [r3, #20]
 800a964:	e001      	b.n	800a96a <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800a966:	2300      	movs	r3, #0
 800a968:	e049      	b.n	800a9fe <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800a96a:	7ffb      	ldrb	r3, [r7, #31]
 800a96c:	b29a      	uxth	r2, r3
 800a96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a970:	b29b      	uxth	r3, r3
 800a972:	4413      	add	r3, r2
 800a974:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2200      	movs	r2, #0
 800a97a:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800a97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d015      	beq.n	800a9ae <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a988:	18d0      	adds	r0, r2, r3
 800a98a:	88fb      	ldrh	r3, [r7, #6]
 800a98c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a98e:	fb02 f203 	mul.w	r2, r2, r3
 800a992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a994:	4413      	add	r3, r2
 800a996:	68ba      	ldr	r2, [r7, #8]
 800a998:	4413      	add	r3, r2
 800a99a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a99c:	4619      	mov	r1, r3
 800a99e:	f004 f9e1 	bl	800ed64 <memcpy>
        q->byteCount += NbBytesToCopy;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	695a      	ldr	r2, [r3, #20]
 800a9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a8:	441a      	add	r2, r3
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	699b      	ldr	r3, [r3, #24]
 800a9b2:	1c5a      	adds	r2, r3, #1
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800a9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ba:	3301      	adds	r3, #1
 800a9bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a9be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	f4ff aeb0 	bcc.w	800a728 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	6919      	ldr	r1, [r3, #16]
 800a9d0:	7ffb      	ldrb	r3, [r7, #31]
 800a9d2:	4419      	add	r1, r3
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	4299      	cmp	r1, r3
 800a9da:	d307      	bcc.n	800a9ec <CircularQueue_Add+0x434>
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	6919      	ldr	r1, [r3, #16]
 800a9e0:	7ffb      	ldrb	r3, [r7, #31]
 800a9e2:	4419      	add	r1, r3
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	1acb      	subs	r3, r1, r3
 800a9ea:	e003      	b.n	800a9f4 <CircularQueue_Add+0x43c>
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	6919      	ldr	r1, [r3, #16]
 800a9f0:	7ffb      	ldrb	r3, [r7, #31]
 800a9f2:	440b      	add	r3, r1
 800a9f4:	4413      	add	r3, r2
 800a9f6:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800a9f8:	6a3b      	ldr	r3, [r7, #32]
 800a9fa:	e000      	b.n	800a9fe <CircularQueue_Add+0x446>
    return NULL;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3738      	adds	r7, #56	; 0x38
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed  
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800aa06:	b480      	push	{r7}
 800aa08:	b085      	sub	sp, #20
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
 800aa0e:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800aa10:	2300      	movs	r3, #0
 800aa12:	72fb      	strb	r3, [r7, #11]
  uint8_t* ptr= NULL;
 800aa14:	2300      	movs	r3, #0
 800aa16:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	891b      	ldrh	r3, [r3, #8]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d101      	bne.n	800aa24 <CircularQueue_Remove+0x1e>
 800aa20:	2302      	movs	r3, #2
 800aa22:	e000      	b.n	800aa26 <CircularQueue_Remove+0x20>
 800aa24:	2300      	movs	r3, #0
 800aa26:	72fb      	strb	r3, [r7, #11]
  *elementSize = 0;
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	801a      	strh	r2, [r3, #0]
  if (q->byteCount > 0) 
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	695b      	ldr	r3, [r3, #20]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	f000 80d4 	beq.w	800abe0 <CircularQueue_Remove+0x1da>
  {
    /* retreive element Size */
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	891b      	ldrh	r3, [r3, #8]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d121      	bne.n	800aa84 <CircularQueue_Remove+0x7e>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	4413      	add	r3, r2
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	b29a      	uxth	r2, r3
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6819      	ldr	r1, [r3, #0]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	1c58      	adds	r0, r3, #1
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	4298      	cmp	r0, r3
 800aa5e:	d306      	bcc.n	800aa6e <CircularQueue_Remove+0x68>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	68d8      	ldr	r0, [r3, #12]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	1ac3      	subs	r3, r0, r3
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	e002      	b.n	800aa74 <CircularQueue_Remove+0x6e>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	68db      	ldr	r3, [r3, #12]
 800aa72:	3301      	adds	r3, #1
 800aa74:	440b      	add	r3, r1
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	b29b      	uxth	r3, r3
 800aa7a:	021b      	lsls	r3, r3, #8
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	4413      	add	r3, r2
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	e001      	b.n	800aa88 <CircularQueue_Remove+0x82>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	891b      	ldrh	r3, [r3, #8]
 800aa88:	683a      	ldr	r2, [r7, #0]
 800aa8a:	8013      	strh	r3, [r2, #0]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	7f1b      	ldrb	r3, [r3, #28]
 800aa90:	f003 0301 	and.w	r3, r3, #1
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d059      	beq.n	800ab4c <CircularQueue_Remove+0x146>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	7f1b      	ldrb	r3, [r3, #28]
 800aa9c:	f003 0302 	and.w	r3, r3, #2
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d153      	bne.n	800ab4c <CircularQueue_Remove+0x146>
     {
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	881b      	ldrh	r3, [r3, #0]
 800aaa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d103      	bne.n	800aab8 <CircularQueue_Remove+0xb2>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	891b      	ldrh	r3, [r3, #8]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d012      	beq.n	800aade <CircularQueue_Remove+0xd8>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	68da      	ldr	r2, [r3, #12]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	691b      	ldr	r3, [r3, #16]
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d943      	bls.n	800ab4c <CircularQueue_Remove+0x146>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	891b      	ldrh	r3, [r3, #8]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d03f      	beq.n	800ab4c <CircularQueue_Remove+0x146>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	685a      	ldr	r2, [r3, #4]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	1ad3      	subs	r3, r2, r3
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	8912      	ldrh	r2, [r2, #8]
 800aada:	4293      	cmp	r3, r2
 800aadc:	d236      	bcs.n	800ab4c <CircularQueue_Remove+0x146>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	695a      	ldr	r2, [r3, #20]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	68d9      	ldr	r1, [r3, #12]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	1acb      	subs	r3, r1, r3
 800aaec:	441a      	add	r2, r3
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	891b      	ldrh	r3, [r3, #8]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d121      	bne.n	800ab44 <CircularQueue_Remove+0x13e>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	4413      	add	r3, r2
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	b29a      	uxth	r2, r3
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6819      	ldr	r1, [r3, #0]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	68db      	ldr	r3, [r3, #12]
 800ab16:	1c58      	adds	r0, r3, #1
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	4298      	cmp	r0, r3
 800ab1e:	d306      	bcc.n	800ab2e <CircularQueue_Remove+0x128>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	68d8      	ldr	r0, [r3, #12]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	1ac3      	subs	r3, r0, r3
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	e002      	b.n	800ab34 <CircularQueue_Remove+0x12e>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	3301      	adds	r3, #1
 800ab34:	440b      	add	r3, r1
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	021b      	lsls	r3, r3, #8
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	4413      	add	r3, r2
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	e001      	b.n	800ab48 <CircularQueue_Remove+0x142>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	891b      	ldrh	r3, [r3, #8]
 800ab48:	683a      	ldr	r2, [r7, #0]
 800ab4a:	8013      	strh	r3, [r2, #0]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	68d9      	ldr	r1, [r3, #12]
 800ab54:	7afb      	ldrb	r3, [r7, #11]
 800ab56:	4419      	add	r1, r3
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	4299      	cmp	r1, r3
 800ab5e:	d307      	bcc.n	800ab70 <CircularQueue_Remove+0x16a>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	68d9      	ldr	r1, [r3, #12]
 800ab64:	7afb      	ldrb	r3, [r7, #11]
 800ab66:	4419      	add	r1, r3
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	1acb      	subs	r3, r1, r3
 800ab6e:	e003      	b.n	800ab78 <CircularQueue_Remove+0x172>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	68d9      	ldr	r1, [r3, #12]
 800ab74:	7afb      	ldrb	r3, [r7, #11]
 800ab76:	440b      	add	r3, r1
 800ab78:	4413      	add	r3, r2
 800ab7a:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	695b      	ldr	r3, [r3, #20]
 800ab80:	683a      	ldr	r2, [r7, #0]
 800ab82:	8812      	ldrh	r2, [r2, #0]
 800ab84:	4611      	mov	r1, r2
 800ab86:	7afa      	ldrb	r2, [r7, #11]
 800ab88:	440a      	add	r2, r1
 800ab8a:	1a9a      	subs	r2, r3, r2
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	695b      	ldr	r3, [r3, #20]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d01e      	beq.n	800abd6 <CircularQueue_Remove+0x1d0>
    {
      q->first = MOD((q->first+ *elementSize + elemSizeStorageRoom ), q->queueMaxSize);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	683a      	ldr	r2, [r7, #0]
 800ab9e:	8812      	ldrh	r2, [r2, #0]
 800aba0:	441a      	add	r2, r3
 800aba2:	7afb      	ldrb	r3, [r7, #11]
 800aba4:	441a      	add	r2, r3
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d30a      	bcc.n	800abc4 <CircularQueue_Remove+0x1be>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	68db      	ldr	r3, [r3, #12]
 800abb2:	683a      	ldr	r2, [r7, #0]
 800abb4:	8812      	ldrh	r2, [r2, #0]
 800abb6:	441a      	add	r2, r3
 800abb8:	7afb      	ldrb	r3, [r7, #11]
 800abba:	441a      	add	r2, r3
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	1ad3      	subs	r3, r2, r3
 800abc2:	e006      	b.n	800abd2 <CircularQueue_Remove+0x1cc>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	68db      	ldr	r3, [r3, #12]
 800abc8:	683a      	ldr	r2, [r7, #0]
 800abca:	8812      	ldrh	r2, [r2, #0]
 800abcc:	441a      	add	r2, r3
 800abce:	7afb      	ldrb	r3, [r7, #11]
 800abd0:	4413      	add	r3, r2
 800abd2:	687a      	ldr	r2, [r7, #4]
 800abd4:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	699b      	ldr	r3, [r3, #24]
 800abda:	1e5a      	subs	r2, r3, #1
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	619a      	str	r2, [r3, #24]
  }
  return ptr;
 800abe0:	68fb      	ldr	r3, [r7, #12]
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3714      	adds	r7, #20
 800abe6:	46bd      	mov	sp, r7
 800abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abec:	4770      	bx	lr

0800abee <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed  
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800abee:	b480      	push	{r7}
 800abf0:	b087      	sub	sp, #28
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
 800abf6:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800abf8:	2300      	movs	r3, #0
 800abfa:	73fb      	strb	r3, [r7, #15]
  uint8_t* x= NULL;
 800abfc:	2300      	movs	r3, #0
 800abfe:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	891b      	ldrh	r3, [r3, #8]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d101      	bne.n	800ac0c <CircularQueue_Sense+0x1e>
 800ac08:	2302      	movs	r3, #2
 800ac0a:	e000      	b.n	800ac0e <CircularQueue_Sense+0x20>
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	73fb      	strb	r3, [r7, #15]
  *elementSize = 0;
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	2200      	movs	r2, #0
 800ac14:	801a      	strh	r2, [r3, #0]
  uint32_t FirstElemetPos = 0;
 800ac16:	2300      	movs	r3, #0
 800ac18:	613b      	str	r3, [r7, #16]
    
  if (q->byteCount > 0) 
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	695b      	ldr	r3, [r3, #20]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	f000 8093 	beq.w	800ad4a <CircularQueue_Sense+0x15c>
  {
    FirstElemetPos = q->first;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	613b      	str	r3, [r7, #16]
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	891b      	ldrh	r3, [r3, #8]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d121      	bne.n	800ac76 <CircularQueue_Sense+0x88>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	68db      	ldr	r3, [r3, #12]
 800ac3a:	4413      	add	r3, r2
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	b29a      	uxth	r2, r3
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6819      	ldr	r1, [r3, #0]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	68db      	ldr	r3, [r3, #12]
 800ac48:	1c58      	adds	r0, r3, #1
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	4298      	cmp	r0, r3
 800ac50:	d306      	bcc.n	800ac60 <CircularQueue_Sense+0x72>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	68d8      	ldr	r0, [r3, #12]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	1ac3      	subs	r3, r0, r3
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	e002      	b.n	800ac66 <CircularQueue_Sense+0x78>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	68db      	ldr	r3, [r3, #12]
 800ac64:	3301      	adds	r3, #1
 800ac66:	440b      	add	r3, r1
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	021b      	lsls	r3, r3, #8
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	4413      	add	r3, r2
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	e001      	b.n	800ac7a <CircularQueue_Sense+0x8c>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	891b      	ldrh	r3, [r3, #8]
 800ac7a:	683a      	ldr	r2, [r7, #0]
 800ac7c:	8013      	strh	r3, [r2, #0]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	7f1b      	ldrb	r3, [r3, #28]
 800ac82:	f003 0301 	and.w	r3, r3, #1
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d04a      	beq.n	800ad20 <CircularQueue_Sense+0x132>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	7f1b      	ldrb	r3, [r3, #28]
 800ac8e:	f003 0302 	and.w	r3, r3, #2
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d144      	bne.n	800ad20 <CircularQueue_Sense+0x132>
    { 
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	881b      	ldrh	r3, [r3, #0]
 800ac9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d103      	bne.n	800acaa <CircularQueue_Sense+0xbc>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	891b      	ldrh	r3, [r3, #8]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d012      	beq.n	800acd0 <CircularQueue_Sense+0xe2>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	68da      	ldr	r2, [r3, #12]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	691b      	ldr	r3, [r3, #16]
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d934      	bls.n	800ad20 <CircularQueue_Sense+0x132>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	891b      	ldrh	r3, [r3, #8]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d030      	beq.n	800ad20 <CircularQueue_Sense+0x132>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	685a      	ldr	r2, [r3, #4]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	68db      	ldr	r3, [r3, #12]
 800acc6:	1ad3      	subs	r3, r2, r3
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	8912      	ldrh	r2, [r2, #8]
 800accc:	4293      	cmp	r3, r2
 800acce:	d227      	bcs.n	800ad20 <CircularQueue_Sense+0x132>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800acd0:	2300      	movs	r3, #0
 800acd2:	613b      	str	r3, [r7, #16]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	891b      	ldrh	r3, [r3, #8]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d11d      	bne.n	800ad18 <CircularQueue_Sense+0x12a>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681a      	ldr	r2, [r3, #0]
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	4413      	add	r3, r2
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	b29a      	uxth	r2, r3
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6819      	ldr	r1, [r3, #0]
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	1c58      	adds	r0, r3, #1
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	4298      	cmp	r0, r3
 800acf6:	d305      	bcc.n	800ad04 <CircularQueue_Sense+0x116>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	6938      	ldr	r0, [r7, #16]
 800acfe:	1ac3      	subs	r3, r0, r3
 800ad00:	3301      	adds	r3, #1
 800ad02:	e001      	b.n	800ad08 <CircularQueue_Sense+0x11a>
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	3301      	adds	r3, #1
 800ad08:	440b      	add	r3, r1
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	b29b      	uxth	r3, r3
 800ad0e:	021b      	lsls	r3, r3, #8
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	4413      	add	r3, r2
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	e001      	b.n	800ad1c <CircularQueue_Sense+0x12e>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	891b      	ldrh	r3, [r3, #8]
 800ad1c:	683a      	ldr	r2, [r7, #0]
 800ad1e:	8013      	strh	r3, [r2, #0]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	7bf9      	ldrb	r1, [r7, #15]
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	4419      	add	r1, r3
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	4299      	cmp	r1, r3
 800ad30:	d306      	bcc.n	800ad40 <CircularQueue_Sense+0x152>
 800ad32:	7bf9      	ldrb	r1, [r7, #15]
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	4419      	add	r1, r3
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	1acb      	subs	r3, r1, r3
 800ad3e:	e002      	b.n	800ad46 <CircularQueue_Sense+0x158>
 800ad40:	7bf9      	ldrb	r1, [r7, #15]
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	440b      	add	r3, r1
 800ad46:	4413      	add	r3, r2
 800ad48:	617b      	str	r3, [r7, #20]
  }
  return x;
 800ad4a:	697b      	ldr	r3, [r7, #20]
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	371c      	adds	r7, #28
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ad58:	b480      	push	{r7}
 800ad5a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800ad5c:	bf00      	nop
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr
	...

0800ad68 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ad68:	b480      	push	{r7}
 800ad6a:	b085      	sub	sp, #20
 800ad6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad6e:	f3ef 8305 	mrs	r3, IPSR
 800ad72:	60bb      	str	r3, [r7, #8]
  return(result);
 800ad74:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d10f      	bne.n	800ad9a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad7a:	f3ef 8310 	mrs	r3, PRIMASK
 800ad7e:	607b      	str	r3, [r7, #4]
  return(result);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d105      	bne.n	800ad92 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ad86:	f3ef 8311 	mrs	r3, BASEPRI
 800ad8a:	603b      	str	r3, [r7, #0]
  return(result);
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d007      	beq.n	800ada2 <osKernelInitialize+0x3a>
 800ad92:	4b0e      	ldr	r3, [pc, #56]	; (800adcc <osKernelInitialize+0x64>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	2b02      	cmp	r3, #2
 800ad98:	d103      	bne.n	800ada2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800ad9a:	f06f 0305 	mvn.w	r3, #5
 800ad9e:	60fb      	str	r3, [r7, #12]
 800ada0:	e00c      	b.n	800adbc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ada2:	4b0a      	ldr	r3, [pc, #40]	; (800adcc <osKernelInitialize+0x64>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d105      	bne.n	800adb6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800adaa:	4b08      	ldr	r3, [pc, #32]	; (800adcc <osKernelInitialize+0x64>)
 800adac:	2201      	movs	r2, #1
 800adae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800adb0:	2300      	movs	r3, #0
 800adb2:	60fb      	str	r3, [r7, #12]
 800adb4:	e002      	b.n	800adbc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800adb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800adba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800adbc:	68fb      	ldr	r3, [r7, #12]
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3714      	adds	r7, #20
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr
 800adca:	bf00      	nop
 800adcc:	20001450 	.word	0x20001450

0800add0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800add6:	f3ef 8305 	mrs	r3, IPSR
 800adda:	60bb      	str	r3, [r7, #8]
  return(result);
 800addc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d10f      	bne.n	800ae02 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ade2:	f3ef 8310 	mrs	r3, PRIMASK
 800ade6:	607b      	str	r3, [r7, #4]
  return(result);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d105      	bne.n	800adfa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800adee:	f3ef 8311 	mrs	r3, BASEPRI
 800adf2:	603b      	str	r3, [r7, #0]
  return(result);
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d007      	beq.n	800ae0a <osKernelStart+0x3a>
 800adfa:	4b0f      	ldr	r3, [pc, #60]	; (800ae38 <osKernelStart+0x68>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	2b02      	cmp	r3, #2
 800ae00:	d103      	bne.n	800ae0a <osKernelStart+0x3a>
    stat = osErrorISR;
 800ae02:	f06f 0305 	mvn.w	r3, #5
 800ae06:	60fb      	str	r3, [r7, #12]
 800ae08:	e010      	b.n	800ae2c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ae0a:	4b0b      	ldr	r3, [pc, #44]	; (800ae38 <osKernelStart+0x68>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d109      	bne.n	800ae26 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ae12:	f7ff ffa1 	bl	800ad58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ae16:	4b08      	ldr	r3, [pc, #32]	; (800ae38 <osKernelStart+0x68>)
 800ae18:	2202      	movs	r2, #2
 800ae1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ae1c:	f002 fb8a 	bl	800d534 <vTaskStartScheduler>
      stat = osOK;
 800ae20:	2300      	movs	r3, #0
 800ae22:	60fb      	str	r3, [r7, #12]
 800ae24:	e002      	b.n	800ae2c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800ae26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae2a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3710      	adds	r7, #16
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	20001450 	.word	0x20001450

0800ae3c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b090      	sub	sp, #64	; 0x40
 800ae40:	af04      	add	r7, sp, #16
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae4c:	f3ef 8305 	mrs	r3, IPSR
 800ae50:	61fb      	str	r3, [r7, #28]
  return(result);
 800ae52:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	f040 808f 	bne.w	800af78 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae5a:	f3ef 8310 	mrs	r3, PRIMASK
 800ae5e:	61bb      	str	r3, [r7, #24]
  return(result);
 800ae60:	69bb      	ldr	r3, [r7, #24]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d105      	bne.n	800ae72 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ae66:	f3ef 8311 	mrs	r3, BASEPRI
 800ae6a:	617b      	str	r3, [r7, #20]
  return(result);
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d003      	beq.n	800ae7a <osThreadNew+0x3e>
 800ae72:	4b44      	ldr	r3, [pc, #272]	; (800af84 <osThreadNew+0x148>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2b02      	cmp	r3, #2
 800ae78:	d07e      	beq.n	800af78 <osThreadNew+0x13c>
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d07b      	beq.n	800af78 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800ae80:	2380      	movs	r3, #128	; 0x80
 800ae82:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800ae84:	2318      	movs	r3, #24
 800ae86:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800ae8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae90:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d045      	beq.n	800af24 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d002      	beq.n	800aea6 <osThreadNew+0x6a>
        name = attr->name;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	699b      	ldr	r3, [r3, #24]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d002      	beq.n	800aeb4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	699b      	ldr	r3, [r3, #24]
 800aeb2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800aeb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d008      	beq.n	800aecc <osThreadNew+0x90>
 800aeba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebc:	2b38      	cmp	r3, #56	; 0x38
 800aebe:	d805      	bhi.n	800aecc <osThreadNew+0x90>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	f003 0301 	and.w	r3, r3, #1
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d001      	beq.n	800aed0 <osThreadNew+0x94>
        return (NULL);
 800aecc:	2300      	movs	r3, #0
 800aece:	e054      	b.n	800af7a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	695b      	ldr	r3, [r3, #20]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d003      	beq.n	800aee0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	695b      	ldr	r3, [r3, #20]
 800aedc:	089b      	lsrs	r3, r3, #2
 800aede:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	689b      	ldr	r3, [r3, #8]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d00e      	beq.n	800af06 <osThreadNew+0xca>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	68db      	ldr	r3, [r3, #12]
 800aeec:	2b5b      	cmp	r3, #91	; 0x5b
 800aeee:	d90a      	bls.n	800af06 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d006      	beq.n	800af06 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	695b      	ldr	r3, [r3, #20]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d002      	beq.n	800af06 <osThreadNew+0xca>
        mem = 1;
 800af00:	2301      	movs	r3, #1
 800af02:	623b      	str	r3, [r7, #32]
 800af04:	e010      	b.n	800af28 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	689b      	ldr	r3, [r3, #8]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d10c      	bne.n	800af28 <osThreadNew+0xec>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d108      	bne.n	800af28 <osThreadNew+0xec>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	691b      	ldr	r3, [r3, #16]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d104      	bne.n	800af28 <osThreadNew+0xec>
          mem = 0;
 800af1e:	2300      	movs	r3, #0
 800af20:	623b      	str	r3, [r7, #32]
 800af22:	e001      	b.n	800af28 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800af24:	2300      	movs	r3, #0
 800af26:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800af28:	6a3b      	ldr	r3, [r7, #32]
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d110      	bne.n	800af50 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800af36:	9202      	str	r2, [sp, #8]
 800af38:	9301      	str	r3, [sp, #4]
 800af3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3c:	9300      	str	r3, [sp, #0]
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af44:	68f8      	ldr	r0, [r7, #12]
 800af46:	f002 f957 	bl	800d1f8 <xTaskCreateStatic>
 800af4a:	4603      	mov	r3, r0
 800af4c:	613b      	str	r3, [r7, #16]
 800af4e:	e013      	b.n	800af78 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800af50:	6a3b      	ldr	r3, [r7, #32]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d110      	bne.n	800af78 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800af56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af58:	b29a      	uxth	r2, r3
 800af5a:	f107 0310 	add.w	r3, r7, #16
 800af5e:	9301      	str	r3, [sp, #4]
 800af60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af62:	9300      	str	r3, [sp, #0]
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af68:	68f8      	ldr	r0, [r7, #12]
 800af6a:	f002 f99f 	bl	800d2ac <xTaskCreate>
 800af6e:	4603      	mov	r3, r0
 800af70:	2b01      	cmp	r3, #1
 800af72:	d001      	beq.n	800af78 <osThreadNew+0x13c>
          hTask = NULL;
 800af74:	2300      	movs	r3, #0
 800af76:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800af78:	693b      	ldr	r3, [r7, #16]
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3730      	adds	r7, #48	; 0x30
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	20001450 	.word	0x20001450

0800af88 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800af88:	b580      	push	{r7, lr}
 800af8a:	b08a      	sub	sp, #40	; 0x28
 800af8c:	af02      	add	r7, sp, #8
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800af96:	69fb      	ldr	r3, [r7, #28]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d002      	beq.n	800afa2 <osThreadFlagsSet+0x1a>
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	da03      	bge.n	800afaa <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800afa2:	f06f 0303 	mvn.w	r3, #3
 800afa6:	60fb      	str	r3, [r7, #12]
 800afa8:	e046      	b.n	800b038 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800afaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afb0:	f3ef 8305 	mrs	r3, IPSR
 800afb4:	61bb      	str	r3, [r7, #24]
  return(result);
 800afb6:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d10f      	bne.n	800afdc <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afbc:	f3ef 8310 	mrs	r3, PRIMASK
 800afc0:	617b      	str	r3, [r7, #20]
  return(result);
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d105      	bne.n	800afd4 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800afc8:	f3ef 8311 	mrs	r3, BASEPRI
 800afcc:	613b      	str	r3, [r7, #16]
  return(result);
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d024      	beq.n	800b01e <osThreadFlagsSet+0x96>
 800afd4:	4b1b      	ldr	r3, [pc, #108]	; (800b044 <osThreadFlagsSet+0xbc>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	2b02      	cmp	r3, #2
 800afda:	d120      	bne.n	800b01e <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800afdc:	2300      	movs	r3, #0
 800afde:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800afe0:	f107 0308 	add.w	r3, r7, #8
 800afe4:	9300      	str	r3, [sp, #0]
 800afe6:	2300      	movs	r3, #0
 800afe8:	2201      	movs	r2, #1
 800afea:	6839      	ldr	r1, [r7, #0]
 800afec:	69f8      	ldr	r0, [r7, #28]
 800afee:	f003 f9dd 	bl	800e3ac <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800aff2:	f107 020c 	add.w	r2, r7, #12
 800aff6:	2300      	movs	r3, #0
 800aff8:	9300      	str	r3, [sp, #0]
 800affa:	4613      	mov	r3, r2
 800affc:	2200      	movs	r2, #0
 800affe:	2100      	movs	r1, #0
 800b000:	69f8      	ldr	r0, [r7, #28]
 800b002:	f003 f9d3 	bl	800e3ac <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d015      	beq.n	800b038 <osThreadFlagsSet+0xb0>
 800b00c:	4b0e      	ldr	r3, [pc, #56]	; (800b048 <osThreadFlagsSet+0xc0>)
 800b00e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b012:	601a      	str	r2, [r3, #0]
 800b014:	f3bf 8f4f 	dsb	sy
 800b018:	f3bf 8f6f 	isb	sy
 800b01c:	e00c      	b.n	800b038 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800b01e:	2300      	movs	r3, #0
 800b020:	2201      	movs	r2, #1
 800b022:	6839      	ldr	r1, [r7, #0]
 800b024:	69f8      	ldr	r0, [r7, #28]
 800b026:	f003 f90b 	bl	800e240 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800b02a:	f107 030c 	add.w	r3, r7, #12
 800b02e:	2200      	movs	r2, #0
 800b030:	2100      	movs	r1, #0
 800b032:	69f8      	ldr	r0, [r7, #28]
 800b034:	f003 f904 	bl	800e240 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800b038:	68fb      	ldr	r3, [r7, #12]
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3720      	adds	r7, #32
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	20001450 	.word	0x20001450
 800b048:	e000ed04 	.word	0xe000ed04

0800b04c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b08e      	sub	sp, #56	; 0x38
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b058:	f3ef 8305 	mrs	r3, IPSR
 800b05c:	61fb      	str	r3, [r7, #28]
  return(result);
 800b05e:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800b060:	2b00      	cmp	r3, #0
 800b062:	d10f      	bne.n	800b084 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b064:	f3ef 8310 	mrs	r3, PRIMASK
 800b068:	61bb      	str	r3, [r7, #24]
  return(result);
 800b06a:	69bb      	ldr	r3, [r7, #24]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d105      	bne.n	800b07c <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b070:	f3ef 8311 	mrs	r3, BASEPRI
 800b074:	617b      	str	r3, [r7, #20]
  return(result);
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d007      	beq.n	800b08c <osThreadFlagsWait+0x40>
 800b07c:	4b3c      	ldr	r3, [pc, #240]	; (800b170 <osThreadFlagsWait+0x124>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2b02      	cmp	r3, #2
 800b082:	d103      	bne.n	800b08c <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800b084:	f06f 0305 	mvn.w	r3, #5
 800b088:	637b      	str	r3, [r7, #52]	; 0x34
 800b08a:	e06b      	b.n	800b164 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	da03      	bge.n	800b09a <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800b092:	f06f 0303 	mvn.w	r3, #3
 800b096:	637b      	str	r3, [r7, #52]	; 0x34
 800b098:	e064      	b.n	800b164 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	f003 0302 	and.w	r3, r3, #2
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d002      	beq.n	800b0aa <osThreadFlagsWait+0x5e>
      clear = 0U;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	633b      	str	r3, [r7, #48]	; 0x30
 800b0a8:	e001      	b.n	800b0ae <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800b0b6:	f002 fb83 	bl	800d7c0 <xTaskGetTickCount>
 800b0ba:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800b0bc:	f107 0210 	add.w	r2, r7, #16
 800b0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b0c4:	2000      	movs	r0, #0
 800b0c6:	f003 f861 	bl	800e18c <xTaskNotifyWait>
 800b0ca:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800b0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d137      	bne.n	800b142 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800b0d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	4013      	ands	r3, r2
 800b0d8:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	f003 0301 	and.w	r3, r3, #1
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d00c      	beq.n	800b106 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800b0ec:	68fa      	ldr	r2, [r7, #12]
 800b0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0f0:	4013      	ands	r3, r2
 800b0f2:	68fa      	ldr	r2, [r7, #12]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d032      	beq.n	800b15e <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d10f      	bne.n	800b11e <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800b0fe:	f06f 0302 	mvn.w	r3, #2
 800b102:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800b104:	e02e      	b.n	800b164 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800b106:	68fa      	ldr	r2, [r7, #12]
 800b108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b10a:	4013      	ands	r3, r2
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d128      	bne.n	800b162 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d103      	bne.n	800b11e <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800b116:	f06f 0302 	mvn.w	r3, #2
 800b11a:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800b11c:	e022      	b.n	800b164 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800b11e:	f002 fb4f 	bl	800d7c0 <xTaskGetTickCount>
 800b122:	4602      	mov	r2, r0
 800b124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b126:	1ad3      	subs	r3, r2, r3
 800b128:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800b12a:	6a3a      	ldr	r2, [r7, #32]
 800b12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b12e:	429a      	cmp	r2, r3
 800b130:	d902      	bls.n	800b138 <osThreadFlagsWait+0xec>
          tout  = 0;
 800b132:	2300      	movs	r3, #0
 800b134:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b136:	e00e      	b.n	800b156 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800b138:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b13a:	6a3b      	ldr	r3, [r7, #32]
 800b13c:	1ad3      	subs	r3, r2, r3
 800b13e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b140:	e009      	b.n	800b156 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d103      	bne.n	800b150 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800b148:	f06f 0302 	mvn.w	r3, #2
 800b14c:	637b      	str	r3, [r7, #52]	; 0x34
 800b14e:	e002      	b.n	800b156 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800b150:	f06f 0301 	mvn.w	r3, #1
 800b154:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800b156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d1af      	bne.n	800b0bc <osThreadFlagsWait+0x70>
 800b15c:	e002      	b.n	800b164 <osThreadFlagsWait+0x118>
            break;
 800b15e:	bf00      	nop
 800b160:	e000      	b.n	800b164 <osThreadFlagsWait+0x118>
            break;
 800b162:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800b164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b166:	4618      	mov	r0, r3
 800b168:	3738      	adds	r7, #56	; 0x38
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	20001450 	.word	0x20001450

0800b174 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b174:	b580      	push	{r7, lr}
 800b176:	b08a      	sub	sp, #40	; 0x28
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b17c:	2300      	movs	r3, #0
 800b17e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b180:	f3ef 8305 	mrs	r3, IPSR
 800b184:	613b      	str	r3, [r7, #16]
  return(result);
 800b186:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800b188:	2b00      	cmp	r3, #0
 800b18a:	f040 8085 	bne.w	800b298 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b18e:	f3ef 8310 	mrs	r3, PRIMASK
 800b192:	60fb      	str	r3, [r7, #12]
  return(result);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d105      	bne.n	800b1a6 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b19a:	f3ef 8311 	mrs	r3, BASEPRI
 800b19e:	60bb      	str	r3, [r7, #8]
  return(result);
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d003      	beq.n	800b1ae <osMutexNew+0x3a>
 800b1a6:	4b3f      	ldr	r3, [pc, #252]	; (800b2a4 <osMutexNew+0x130>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	2b02      	cmp	r3, #2
 800b1ac:	d074      	beq.n	800b298 <osMutexNew+0x124>
    if (attr != NULL) {
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d003      	beq.n	800b1bc <osMutexNew+0x48>
      type = attr->attr_bits;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	623b      	str	r3, [r7, #32]
 800b1ba:	e001      	b.n	800b1c0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b1c0:	6a3b      	ldr	r3, [r7, #32]
 800b1c2:	f003 0301 	and.w	r3, r3, #1
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d002      	beq.n	800b1d0 <osMutexNew+0x5c>
      rmtx = 1U;
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	61fb      	str	r3, [r7, #28]
 800b1ce:	e001      	b.n	800b1d4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b1d4:	6a3b      	ldr	r3, [r7, #32]
 800b1d6:	f003 0308 	and.w	r3, r3, #8
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d15c      	bne.n	800b298 <osMutexNew+0x124>
      mem = -1;
 800b1de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1e2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d015      	beq.n	800b216 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d006      	beq.n	800b200 <osMutexNew+0x8c>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	68db      	ldr	r3, [r3, #12]
 800b1f6:	2b4f      	cmp	r3, #79	; 0x4f
 800b1f8:	d902      	bls.n	800b200 <osMutexNew+0x8c>
          mem = 1;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	61bb      	str	r3, [r7, #24]
 800b1fe:	e00c      	b.n	800b21a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d108      	bne.n	800b21a <osMutexNew+0xa6>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d104      	bne.n	800b21a <osMutexNew+0xa6>
            mem = 0;
 800b210:	2300      	movs	r3, #0
 800b212:	61bb      	str	r3, [r7, #24]
 800b214:	e001      	b.n	800b21a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800b216:	2300      	movs	r3, #0
 800b218:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800b21a:	69bb      	ldr	r3, [r7, #24]
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d112      	bne.n	800b246 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800b220:	69fb      	ldr	r3, [r7, #28]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d007      	beq.n	800b236 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	689b      	ldr	r3, [r3, #8]
 800b22a:	4619      	mov	r1, r3
 800b22c:	2004      	movs	r0, #4
 800b22e:	f001 f8b0 	bl	800c392 <xQueueCreateMutexStatic>
 800b232:	6278      	str	r0, [r7, #36]	; 0x24
 800b234:	e016      	b.n	800b264 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	689b      	ldr	r3, [r3, #8]
 800b23a:	4619      	mov	r1, r3
 800b23c:	2001      	movs	r0, #1
 800b23e:	f001 f8a8 	bl	800c392 <xQueueCreateMutexStatic>
 800b242:	6278      	str	r0, [r7, #36]	; 0x24
 800b244:	e00e      	b.n	800b264 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d10b      	bne.n	800b264 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d004      	beq.n	800b25c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800b252:	2004      	movs	r0, #4
 800b254:	f001 f885 	bl	800c362 <xQueueCreateMutex>
 800b258:	6278      	str	r0, [r7, #36]	; 0x24
 800b25a:	e003      	b.n	800b264 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800b25c:	2001      	movs	r0, #1
 800b25e:	f001 f880 	bl	800c362 <xQueueCreateMutex>
 800b262:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b266:	2b00      	cmp	r3, #0
 800b268:	d00c      	beq.n	800b284 <osMutexNew+0x110>
        if (attr != NULL) {
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d003      	beq.n	800b278 <osMutexNew+0x104>
          name = attr->name;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	617b      	str	r3, [r7, #20]
 800b276:	e001      	b.n	800b27c <osMutexNew+0x108>
        } else {
          name = NULL;
 800b278:	2300      	movs	r3, #0
 800b27a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800b27c:	6979      	ldr	r1, [r7, #20]
 800b27e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b280:	f001 ff34 	bl	800d0ec <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b286:	2b00      	cmp	r3, #0
 800b288:	d006      	beq.n	800b298 <osMutexNew+0x124>
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d003      	beq.n	800b298 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b292:	f043 0301 	orr.w	r3, r3, #1
 800b296:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3728      	adds	r7, #40	; 0x28
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	20001450 	.word	0x20001450

0800b2a8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b088      	sub	sp, #32
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f023 0301 	bic.w	r3, r3, #1
 800b2b8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f003 0301 	and.w	r3, r3, #1
 800b2c0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2c6:	f3ef 8305 	mrs	r3, IPSR
 800b2ca:	613b      	str	r3, [r7, #16]
  return(result);
 800b2cc:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d10f      	bne.n	800b2f2 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2d2:	f3ef 8310 	mrs	r3, PRIMASK
 800b2d6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d105      	bne.n	800b2ea <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b2de:	f3ef 8311 	mrs	r3, BASEPRI
 800b2e2:	60bb      	str	r3, [r7, #8]
  return(result);
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d007      	beq.n	800b2fa <osMutexAcquire+0x52>
 800b2ea:	4b1d      	ldr	r3, [pc, #116]	; (800b360 <osMutexAcquire+0xb8>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	2b02      	cmp	r3, #2
 800b2f0:	d103      	bne.n	800b2fa <osMutexAcquire+0x52>
    stat = osErrorISR;
 800b2f2:	f06f 0305 	mvn.w	r3, #5
 800b2f6:	61fb      	str	r3, [r7, #28]
 800b2f8:	e02c      	b.n	800b354 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800b2fa:	69bb      	ldr	r3, [r7, #24]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d103      	bne.n	800b308 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800b300:	f06f 0303 	mvn.w	r3, #3
 800b304:	61fb      	str	r3, [r7, #28]
 800b306:	e025      	b.n	800b354 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d011      	beq.n	800b332 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b30e:	6839      	ldr	r1, [r7, #0]
 800b310:	69b8      	ldr	r0, [r7, #24]
 800b312:	f001 f88c 	bl	800c42e <xQueueTakeMutexRecursive>
 800b316:	4603      	mov	r3, r0
 800b318:	2b01      	cmp	r3, #1
 800b31a:	d01b      	beq.n	800b354 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d003      	beq.n	800b32a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800b322:	f06f 0301 	mvn.w	r3, #1
 800b326:	61fb      	str	r3, [r7, #28]
 800b328:	e014      	b.n	800b354 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800b32a:	f06f 0302 	mvn.w	r3, #2
 800b32e:	61fb      	str	r3, [r7, #28]
 800b330:	e010      	b.n	800b354 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b332:	6839      	ldr	r1, [r7, #0]
 800b334:	69b8      	ldr	r0, [r7, #24]
 800b336:	f001 fc09 	bl	800cb4c <xQueueSemaphoreTake>
 800b33a:	4603      	mov	r3, r0
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d009      	beq.n	800b354 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d003      	beq.n	800b34e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800b346:	f06f 0301 	mvn.w	r3, #1
 800b34a:	61fb      	str	r3, [r7, #28]
 800b34c:	e002      	b.n	800b354 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800b34e:	f06f 0302 	mvn.w	r3, #2
 800b352:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b354:	69fb      	ldr	r3, [r7, #28]
}
 800b356:	4618      	mov	r0, r3
 800b358:	3720      	adds	r7, #32
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	20001450 	.word	0x20001450

0800b364 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b364:	b580      	push	{r7, lr}
 800b366:	b088      	sub	sp, #32
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f023 0301 	bic.w	r3, r3, #1
 800b372:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f003 0301 	and.w	r3, r3, #1
 800b37a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800b37c:	2300      	movs	r3, #0
 800b37e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b380:	f3ef 8305 	mrs	r3, IPSR
 800b384:	613b      	str	r3, [r7, #16]
  return(result);
 800b386:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d10f      	bne.n	800b3ac <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b38c:	f3ef 8310 	mrs	r3, PRIMASK
 800b390:	60fb      	str	r3, [r7, #12]
  return(result);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d105      	bne.n	800b3a4 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b398:	f3ef 8311 	mrs	r3, BASEPRI
 800b39c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d007      	beq.n	800b3b4 <osMutexRelease+0x50>
 800b3a4:	4b16      	ldr	r3, [pc, #88]	; (800b400 <osMutexRelease+0x9c>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	2b02      	cmp	r3, #2
 800b3aa:	d103      	bne.n	800b3b4 <osMutexRelease+0x50>
    stat = osErrorISR;
 800b3ac:	f06f 0305 	mvn.w	r3, #5
 800b3b0:	61fb      	str	r3, [r7, #28]
 800b3b2:	e01f      	b.n	800b3f4 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800b3b4:	69bb      	ldr	r3, [r7, #24]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d103      	bne.n	800b3c2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800b3ba:	f06f 0303 	mvn.w	r3, #3
 800b3be:	61fb      	str	r3, [r7, #28]
 800b3c0:	e018      	b.n	800b3f4 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d009      	beq.n	800b3dc <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b3c8:	69b8      	ldr	r0, [r7, #24]
 800b3ca:	f000 fffd 	bl	800c3c8 <xQueueGiveMutexRecursive>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	d00f      	beq.n	800b3f4 <osMutexRelease+0x90>
        stat = osErrorResource;
 800b3d4:	f06f 0302 	mvn.w	r3, #2
 800b3d8:	61fb      	str	r3, [r7, #28]
 800b3da:	e00b      	b.n	800b3f4 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b3dc:	2300      	movs	r3, #0
 800b3de:	2200      	movs	r2, #0
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	69b8      	ldr	r0, [r7, #24]
 800b3e4:	f001 f8be 	bl	800c564 <xQueueGenericSend>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d002      	beq.n	800b3f4 <osMutexRelease+0x90>
        stat = osErrorResource;
 800b3ee:	f06f 0302 	mvn.w	r3, #2
 800b3f2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800b3f4:	69fb      	ldr	r3, [r7, #28]
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3720      	adds	r7, #32
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	bf00      	nop
 800b400:	20001450 	.word	0x20001450

0800b404 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b404:	b580      	push	{r7, lr}
 800b406:	b08c      	sub	sp, #48	; 0x30
 800b408:	af02      	add	r7, sp, #8
 800b40a:	60f8      	str	r0, [r7, #12]
 800b40c:	60b9      	str	r1, [r7, #8]
 800b40e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b410:	2300      	movs	r3, #0
 800b412:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b414:	f3ef 8305 	mrs	r3, IPSR
 800b418:	61bb      	str	r3, [r7, #24]
  return(result);
 800b41a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	f040 8087 	bne.w	800b530 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b422:	f3ef 8310 	mrs	r3, PRIMASK
 800b426:	617b      	str	r3, [r7, #20]
  return(result);
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d105      	bne.n	800b43a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b42e:	f3ef 8311 	mrs	r3, BASEPRI
 800b432:	613b      	str	r3, [r7, #16]
  return(result);
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d003      	beq.n	800b442 <osSemaphoreNew+0x3e>
 800b43a:	4b40      	ldr	r3, [pc, #256]	; (800b53c <osSemaphoreNew+0x138>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	2b02      	cmp	r3, #2
 800b440:	d076      	beq.n	800b530 <osSemaphoreNew+0x12c>
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d073      	beq.n	800b530 <osSemaphoreNew+0x12c>
 800b448:	68ba      	ldr	r2, [r7, #8]
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d86f      	bhi.n	800b530 <osSemaphoreNew+0x12c>
    mem = -1;
 800b450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b454:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d015      	beq.n	800b488 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	689b      	ldr	r3, [r3, #8]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d006      	beq.n	800b472 <osSemaphoreNew+0x6e>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	2b4f      	cmp	r3, #79	; 0x4f
 800b46a:	d902      	bls.n	800b472 <osSemaphoreNew+0x6e>
        mem = 1;
 800b46c:	2301      	movs	r3, #1
 800b46e:	623b      	str	r3, [r7, #32]
 800b470:	e00c      	b.n	800b48c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	689b      	ldr	r3, [r3, #8]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d108      	bne.n	800b48c <osSemaphoreNew+0x88>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	68db      	ldr	r3, [r3, #12]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d104      	bne.n	800b48c <osSemaphoreNew+0x88>
          mem = 0;
 800b482:	2300      	movs	r3, #0
 800b484:	623b      	str	r3, [r7, #32]
 800b486:	e001      	b.n	800b48c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800b488:	2300      	movs	r3, #0
 800b48a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800b48c:	6a3b      	ldr	r3, [r7, #32]
 800b48e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b492:	d04d      	beq.n	800b530 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2b01      	cmp	r3, #1
 800b498:	d129      	bne.n	800b4ee <osSemaphoreNew+0xea>
        if (mem == 1) {
 800b49a:	6a3b      	ldr	r3, [r7, #32]
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d10b      	bne.n	800b4b8 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	689a      	ldr	r2, [r3, #8]
 800b4a4:	2303      	movs	r3, #3
 800b4a6:	9300      	str	r3, [sp, #0]
 800b4a8:	4613      	mov	r3, r2
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	2100      	movs	r1, #0
 800b4ae:	2001      	movs	r0, #1
 800b4b0:	f000 fe68 	bl	800c184 <xQueueGenericCreateStatic>
 800b4b4:	6278      	str	r0, [r7, #36]	; 0x24
 800b4b6:	e005      	b.n	800b4c4 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800b4b8:	2203      	movs	r2, #3
 800b4ba:	2100      	movs	r1, #0
 800b4bc:	2001      	movs	r0, #1
 800b4be:	f000 fed4 	bl	800c26a <xQueueGenericCreate>
 800b4c2:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d022      	beq.n	800b510 <osSemaphoreNew+0x10c>
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d01f      	beq.n	800b510 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4d8:	f001 f844 	bl	800c564 <xQueueGenericSend>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	2b01      	cmp	r3, #1
 800b4e0:	d016      	beq.n	800b510 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800b4e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4e4:	f001 fcb7 	bl	800ce56 <vQueueDelete>
            hSemaphore = NULL;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	627b      	str	r3, [r7, #36]	; 0x24
 800b4ec:	e010      	b.n	800b510 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800b4ee:	6a3b      	ldr	r3, [r7, #32]
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d108      	bne.n	800b506 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	68b9      	ldr	r1, [r7, #8]
 800b4fc:	68f8      	ldr	r0, [r7, #12]
 800b4fe:	f000 ffcb 	bl	800c498 <xQueueCreateCountingSemaphoreStatic>
 800b502:	6278      	str	r0, [r7, #36]	; 0x24
 800b504:	e004      	b.n	800b510 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b506:	68b9      	ldr	r1, [r7, #8]
 800b508:	68f8      	ldr	r0, [r7, #12]
 800b50a:	f000 fffa 	bl	800c502 <xQueueCreateCountingSemaphore>
 800b50e:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b512:	2b00      	cmp	r3, #0
 800b514:	d00c      	beq.n	800b530 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d003      	beq.n	800b524 <osSemaphoreNew+0x120>
          name = attr->name;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	61fb      	str	r3, [r7, #28]
 800b522:	e001      	b.n	800b528 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800b524:	2300      	movs	r3, #0
 800b526:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b528:	69f9      	ldr	r1, [r7, #28]
 800b52a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b52c:	f001 fdde 	bl	800d0ec <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b532:	4618      	mov	r0, r3
 800b534:	3728      	adds	r7, #40	; 0x28
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	20001450 	.word	0x20001450

0800b540 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b540:	b580      	push	{r7, lr}
 800b542:	b088      	sub	sp, #32
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b54e:	2300      	movs	r3, #0
 800b550:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800b552:	69bb      	ldr	r3, [r7, #24]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d103      	bne.n	800b560 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b558:	f06f 0303 	mvn.w	r3, #3
 800b55c:	61fb      	str	r3, [r7, #28]
 800b55e:	e04b      	b.n	800b5f8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b560:	f3ef 8305 	mrs	r3, IPSR
 800b564:	617b      	str	r3, [r7, #20]
  return(result);
 800b566:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d10f      	bne.n	800b58c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b56c:	f3ef 8310 	mrs	r3, PRIMASK
 800b570:	613b      	str	r3, [r7, #16]
  return(result);
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d105      	bne.n	800b584 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b578:	f3ef 8311 	mrs	r3, BASEPRI
 800b57c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d026      	beq.n	800b5d2 <osSemaphoreAcquire+0x92>
 800b584:	4b1f      	ldr	r3, [pc, #124]	; (800b604 <osSemaphoreAcquire+0xc4>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	2b02      	cmp	r3, #2
 800b58a:	d122      	bne.n	800b5d2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d003      	beq.n	800b59a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800b592:	f06f 0303 	mvn.w	r3, #3
 800b596:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800b598:	e02d      	b.n	800b5f6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800b59a:	2300      	movs	r3, #0
 800b59c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b59e:	f107 0308 	add.w	r3, r7, #8
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	2100      	movs	r1, #0
 800b5a6:	69b8      	ldr	r0, [r7, #24]
 800b5a8:	f001 fbd8 	bl	800cd5c <xQueueReceiveFromISR>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d003      	beq.n	800b5ba <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800b5b2:	f06f 0302 	mvn.w	r3, #2
 800b5b6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800b5b8:	e01d      	b.n	800b5f6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d01a      	beq.n	800b5f6 <osSemaphoreAcquire+0xb6>
 800b5c0:	4b11      	ldr	r3, [pc, #68]	; (800b608 <osSemaphoreAcquire+0xc8>)
 800b5c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5c6:	601a      	str	r2, [r3, #0]
 800b5c8:	f3bf 8f4f 	dsb	sy
 800b5cc:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800b5d0:	e011      	b.n	800b5f6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b5d2:	6839      	ldr	r1, [r7, #0]
 800b5d4:	69b8      	ldr	r0, [r7, #24]
 800b5d6:	f001 fab9 	bl	800cb4c <xQueueSemaphoreTake>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d00b      	beq.n	800b5f8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d003      	beq.n	800b5ee <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800b5e6:	f06f 0301 	mvn.w	r3, #1
 800b5ea:	61fb      	str	r3, [r7, #28]
 800b5ec:	e004      	b.n	800b5f8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800b5ee:	f06f 0302 	mvn.w	r3, #2
 800b5f2:	61fb      	str	r3, [r7, #28]
 800b5f4:	e000      	b.n	800b5f8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800b5f6:	bf00      	nop
      }
    }
  }

  return (stat);
 800b5f8:	69fb      	ldr	r3, [r7, #28]
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3720      	adds	r7, #32
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	20001450 	.word	0x20001450
 800b608:	e000ed04 	.word	0xe000ed04

0800b60c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b088      	sub	sp, #32
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b618:	2300      	movs	r3, #0
 800b61a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800b61c:	69bb      	ldr	r3, [r7, #24]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d103      	bne.n	800b62a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b622:	f06f 0303 	mvn.w	r3, #3
 800b626:	61fb      	str	r3, [r7, #28]
 800b628:	e03e      	b.n	800b6a8 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b62a:	f3ef 8305 	mrs	r3, IPSR
 800b62e:	617b      	str	r3, [r7, #20]
  return(result);
 800b630:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800b632:	2b00      	cmp	r3, #0
 800b634:	d10f      	bne.n	800b656 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b636:	f3ef 8310 	mrs	r3, PRIMASK
 800b63a:	613b      	str	r3, [r7, #16]
  return(result);
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d105      	bne.n	800b64e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b642:	f3ef 8311 	mrs	r3, BASEPRI
 800b646:	60fb      	str	r3, [r7, #12]
  return(result);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d01e      	beq.n	800b68c <osSemaphoreRelease+0x80>
 800b64e:	4b19      	ldr	r3, [pc, #100]	; (800b6b4 <osSemaphoreRelease+0xa8>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	2b02      	cmp	r3, #2
 800b654:	d11a      	bne.n	800b68c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800b656:	2300      	movs	r3, #0
 800b658:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b65a:	f107 0308 	add.w	r3, r7, #8
 800b65e:	4619      	mov	r1, r3
 800b660:	69b8      	ldr	r0, [r7, #24]
 800b662:	f001 f90d 	bl	800c880 <xQueueGiveFromISR>
 800b666:	4603      	mov	r3, r0
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d003      	beq.n	800b674 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800b66c:	f06f 0302 	mvn.w	r3, #2
 800b670:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b672:	e018      	b.n	800b6a6 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d015      	beq.n	800b6a6 <osSemaphoreRelease+0x9a>
 800b67a:	4b0f      	ldr	r3, [pc, #60]	; (800b6b8 <osSemaphoreRelease+0xac>)
 800b67c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b680:	601a      	str	r2, [r3, #0]
 800b682:	f3bf 8f4f 	dsb	sy
 800b686:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b68a:	e00c      	b.n	800b6a6 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b68c:	2300      	movs	r3, #0
 800b68e:	2200      	movs	r2, #0
 800b690:	2100      	movs	r1, #0
 800b692:	69b8      	ldr	r0, [r7, #24]
 800b694:	f000 ff66 	bl	800c564 <xQueueGenericSend>
 800b698:	4603      	mov	r3, r0
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d004      	beq.n	800b6a8 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800b69e:	f06f 0302 	mvn.w	r3, #2
 800b6a2:	61fb      	str	r3, [r7, #28]
 800b6a4:	e000      	b.n	800b6a8 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b6a6:	bf00      	nop
    }
  }

  return (stat);
 800b6a8:	69fb      	ldr	r3, [r7, #28]
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3720      	adds	r7, #32
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	20001450 	.word	0x20001450
 800b6b8:	e000ed04 	.word	0xe000ed04

0800b6bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b6bc:	b480      	push	{r7}
 800b6be:	b085      	sub	sp, #20
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	4a07      	ldr	r2, [pc, #28]	; (800b6e8 <vApplicationGetIdleTaskMemory+0x2c>)
 800b6cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	4a06      	ldr	r2, [pc, #24]	; (800b6ec <vApplicationGetIdleTaskMemory+0x30>)
 800b6d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2280      	movs	r2, #128	; 0x80
 800b6d8:	601a      	str	r2, [r3, #0]
}
 800b6da:	bf00      	nop
 800b6dc:	3714      	adds	r7, #20
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr
 800b6e6:	bf00      	nop
 800b6e8:	20001454 	.word	0x20001454
 800b6ec:	200014b0 	.word	0x200014b0

0800b6f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b6f0:	b480      	push	{r7}
 800b6f2:	b085      	sub	sp, #20
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	60b9      	str	r1, [r7, #8]
 800b6fa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	4a07      	ldr	r2, [pc, #28]	; (800b71c <vApplicationGetTimerTaskMemory+0x2c>)
 800b700:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	4a06      	ldr	r2, [pc, #24]	; (800b720 <vApplicationGetTimerTaskMemory+0x30>)
 800b706:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b70e:	601a      	str	r2, [r3, #0]
}
 800b710:	bf00      	nop
 800b712:	3714      	adds	r7, #20
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr
 800b71c:	200016b0 	.word	0x200016b0
 800b720:	2000170c 	.word	0x2000170c

0800b724 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b724:	b480      	push	{r7}
 800b726:	b085      	sub	sp, #20
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	3b04      	subs	r3, #4
 800b734:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b73c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	3b04      	subs	r3, #4
 800b742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	f023 0201 	bic.w	r2, r3, #1
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	3b04      	subs	r3, #4
 800b752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b754:	4a0c      	ldr	r2, [pc, #48]	; (800b788 <pxPortInitialiseStack+0x64>)
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	3b14      	subs	r3, #20
 800b75e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	3b04      	subs	r3, #4
 800b76a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f06f 0202 	mvn.w	r2, #2
 800b772:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	3b20      	subs	r3, #32
 800b778:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b77a:	68fb      	ldr	r3, [r7, #12]
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3714      	adds	r7, #20
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr
 800b788:	0800b78d 	.word	0x0800b78d

0800b78c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b78c:	b480      	push	{r7}
 800b78e:	b085      	sub	sp, #20
 800b790:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b792:	2300      	movs	r3, #0
 800b794:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b796:	4b11      	ldr	r3, [pc, #68]	; (800b7dc <prvTaskExitError+0x50>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b79e:	d009      	beq.n	800b7b4 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a4:	f383 8811 	msr	BASEPRI, r3
 800b7a8:	f3bf 8f6f 	isb	sy
 800b7ac:	f3bf 8f4f 	dsb	sy
 800b7b0:	60fb      	str	r3, [r7, #12]
 800b7b2:	e7fe      	b.n	800b7b2 <prvTaskExitError+0x26>
 800b7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b8:	f383 8811 	msr	BASEPRI, r3
 800b7bc:	f3bf 8f6f 	isb	sy
 800b7c0:	f3bf 8f4f 	dsb	sy
 800b7c4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b7c6:	bf00      	nop
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d0fc      	beq.n	800b7c8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b7ce:	bf00      	nop
 800b7d0:	3714      	adds	r7, #20
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr
 800b7da:	bf00      	nop
 800b7dc:	20000038 	.word	0x20000038

0800b7e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b7e0:	4b07      	ldr	r3, [pc, #28]	; (800b800 <pxCurrentTCBConst2>)
 800b7e2:	6819      	ldr	r1, [r3, #0]
 800b7e4:	6808      	ldr	r0, [r1, #0]
 800b7e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ea:	f380 8809 	msr	PSP, r0
 800b7ee:	f3bf 8f6f 	isb	sy
 800b7f2:	f04f 0000 	mov.w	r0, #0
 800b7f6:	f380 8811 	msr	BASEPRI, r0
 800b7fa:	4770      	bx	lr
 800b7fc:	f3af 8000 	nop.w

0800b800 <pxCurrentTCBConst2>:
 800b800:	2000329c 	.word	0x2000329c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b804:	bf00      	nop
 800b806:	bf00      	nop

0800b808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b808:	4808      	ldr	r0, [pc, #32]	; (800b82c <prvPortStartFirstTask+0x24>)
 800b80a:	6800      	ldr	r0, [r0, #0]
 800b80c:	6800      	ldr	r0, [r0, #0]
 800b80e:	f380 8808 	msr	MSP, r0
 800b812:	f04f 0000 	mov.w	r0, #0
 800b816:	f380 8814 	msr	CONTROL, r0
 800b81a:	b662      	cpsie	i
 800b81c:	b661      	cpsie	f
 800b81e:	f3bf 8f4f 	dsb	sy
 800b822:	f3bf 8f6f 	isb	sy
 800b826:	df00      	svc	0
 800b828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b82a:	bf00      	nop
 800b82c:	e000ed08 	.word	0xe000ed08

0800b830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b086      	sub	sp, #24
 800b834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b836:	4b44      	ldr	r3, [pc, #272]	; (800b948 <xPortStartScheduler+0x118>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	4a44      	ldr	r2, [pc, #272]	; (800b94c <xPortStartScheduler+0x11c>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d109      	bne.n	800b854 <xPortStartScheduler+0x24>
 800b840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b844:	f383 8811 	msr	BASEPRI, r3
 800b848:	f3bf 8f6f 	isb	sy
 800b84c:	f3bf 8f4f 	dsb	sy
 800b850:	613b      	str	r3, [r7, #16]
 800b852:	e7fe      	b.n	800b852 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b854:	4b3c      	ldr	r3, [pc, #240]	; (800b948 <xPortStartScheduler+0x118>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	4a3d      	ldr	r2, [pc, #244]	; (800b950 <xPortStartScheduler+0x120>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d109      	bne.n	800b872 <xPortStartScheduler+0x42>
 800b85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b862:	f383 8811 	msr	BASEPRI, r3
 800b866:	f3bf 8f6f 	isb	sy
 800b86a:	f3bf 8f4f 	dsb	sy
 800b86e:	60fb      	str	r3, [r7, #12]
 800b870:	e7fe      	b.n	800b870 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b872:	4b38      	ldr	r3, [pc, #224]	; (800b954 <xPortStartScheduler+0x124>)
 800b874:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	b2db      	uxtb	r3, r3
 800b87c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	22ff      	movs	r2, #255	; 0xff
 800b882:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b88c:	78fb      	ldrb	r3, [r7, #3]
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b894:	b2da      	uxtb	r2, r3
 800b896:	4b30      	ldr	r3, [pc, #192]	; (800b958 <xPortStartScheduler+0x128>)
 800b898:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b89a:	4b30      	ldr	r3, [pc, #192]	; (800b95c <xPortStartScheduler+0x12c>)
 800b89c:	2207      	movs	r2, #7
 800b89e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b8a0:	e009      	b.n	800b8b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b8a2:	4b2e      	ldr	r3, [pc, #184]	; (800b95c <xPortStartScheduler+0x12c>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	3b01      	subs	r3, #1
 800b8a8:	4a2c      	ldr	r2, [pc, #176]	; (800b95c <xPortStartScheduler+0x12c>)
 800b8aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b8ac:	78fb      	ldrb	r3, [r7, #3]
 800b8ae:	b2db      	uxtb	r3, r3
 800b8b0:	005b      	lsls	r3, r3, #1
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b8b6:	78fb      	ldrb	r3, [r7, #3]
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8be:	2b80      	cmp	r3, #128	; 0x80
 800b8c0:	d0ef      	beq.n	800b8a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b8c2:	4b26      	ldr	r3, [pc, #152]	; (800b95c <xPortStartScheduler+0x12c>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f1c3 0307 	rsb	r3, r3, #7
 800b8ca:	2b04      	cmp	r3, #4
 800b8cc:	d009      	beq.n	800b8e2 <xPortStartScheduler+0xb2>
 800b8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d2:	f383 8811 	msr	BASEPRI, r3
 800b8d6:	f3bf 8f6f 	isb	sy
 800b8da:	f3bf 8f4f 	dsb	sy
 800b8de:	60bb      	str	r3, [r7, #8]
 800b8e0:	e7fe      	b.n	800b8e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b8e2:	4b1e      	ldr	r3, [pc, #120]	; (800b95c <xPortStartScheduler+0x12c>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	021b      	lsls	r3, r3, #8
 800b8e8:	4a1c      	ldr	r2, [pc, #112]	; (800b95c <xPortStartScheduler+0x12c>)
 800b8ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b8ec:	4b1b      	ldr	r3, [pc, #108]	; (800b95c <xPortStartScheduler+0x12c>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b8f4:	4a19      	ldr	r2, [pc, #100]	; (800b95c <xPortStartScheduler+0x12c>)
 800b8f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	b2da      	uxtb	r2, r3
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b900:	4b17      	ldr	r3, [pc, #92]	; (800b960 <xPortStartScheduler+0x130>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4a16      	ldr	r2, [pc, #88]	; (800b960 <xPortStartScheduler+0x130>)
 800b906:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b90a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b90c:	4b14      	ldr	r3, [pc, #80]	; (800b960 <xPortStartScheduler+0x130>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a13      	ldr	r2, [pc, #76]	; (800b960 <xPortStartScheduler+0x130>)
 800b912:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b916:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b918:	f000 f8d6 	bl	800bac8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b91c:	4b11      	ldr	r3, [pc, #68]	; (800b964 <xPortStartScheduler+0x134>)
 800b91e:	2200      	movs	r2, #0
 800b920:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b922:	f000 f8f5 	bl	800bb10 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b926:	4b10      	ldr	r3, [pc, #64]	; (800b968 <xPortStartScheduler+0x138>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4a0f      	ldr	r2, [pc, #60]	; (800b968 <xPortStartScheduler+0x138>)
 800b92c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b930:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b932:	f7ff ff69 	bl	800b808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b936:	f002 f80b 	bl	800d950 <vTaskSwitchContext>
	prvTaskExitError();
 800b93a:	f7ff ff27 	bl	800b78c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b93e:	2300      	movs	r3, #0
}
 800b940:	4618      	mov	r0, r3
 800b942:	3718      	adds	r7, #24
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}
 800b948:	e000ed00 	.word	0xe000ed00
 800b94c:	410fc271 	.word	0x410fc271
 800b950:	410fc270 	.word	0x410fc270
 800b954:	e000e400 	.word	0xe000e400
 800b958:	20001b0c 	.word	0x20001b0c
 800b95c:	20001b10 	.word	0x20001b10
 800b960:	e000ed20 	.word	0xe000ed20
 800b964:	20000038 	.word	0x20000038
 800b968:	e000ef34 	.word	0xe000ef34

0800b96c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b976:	f383 8811 	msr	BASEPRI, r3
 800b97a:	f3bf 8f6f 	isb	sy
 800b97e:	f3bf 8f4f 	dsb	sy
 800b982:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b984:	4b0e      	ldr	r3, [pc, #56]	; (800b9c0 <vPortEnterCritical+0x54>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	3301      	adds	r3, #1
 800b98a:	4a0d      	ldr	r2, [pc, #52]	; (800b9c0 <vPortEnterCritical+0x54>)
 800b98c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b98e:	4b0c      	ldr	r3, [pc, #48]	; (800b9c0 <vPortEnterCritical+0x54>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	2b01      	cmp	r3, #1
 800b994:	d10e      	bne.n	800b9b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b996:	4b0b      	ldr	r3, [pc, #44]	; (800b9c4 <vPortEnterCritical+0x58>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d009      	beq.n	800b9b4 <vPortEnterCritical+0x48>
 800b9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a4:	f383 8811 	msr	BASEPRI, r3
 800b9a8:	f3bf 8f6f 	isb	sy
 800b9ac:	f3bf 8f4f 	dsb	sy
 800b9b0:	603b      	str	r3, [r7, #0]
 800b9b2:	e7fe      	b.n	800b9b2 <vPortEnterCritical+0x46>
	}
}
 800b9b4:	bf00      	nop
 800b9b6:	370c      	adds	r7, #12
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr
 800b9c0:	20000038 	.word	0x20000038
 800b9c4:	e000ed04 	.word	0xe000ed04

0800b9c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b083      	sub	sp, #12
 800b9cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b9ce:	4b11      	ldr	r3, [pc, #68]	; (800ba14 <vPortExitCritical+0x4c>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d109      	bne.n	800b9ea <vPortExitCritical+0x22>
 800b9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9da:	f383 8811 	msr	BASEPRI, r3
 800b9de:	f3bf 8f6f 	isb	sy
 800b9e2:	f3bf 8f4f 	dsb	sy
 800b9e6:	607b      	str	r3, [r7, #4]
 800b9e8:	e7fe      	b.n	800b9e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b9ea:	4b0a      	ldr	r3, [pc, #40]	; (800ba14 <vPortExitCritical+0x4c>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	3b01      	subs	r3, #1
 800b9f0:	4a08      	ldr	r2, [pc, #32]	; (800ba14 <vPortExitCritical+0x4c>)
 800b9f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b9f4:	4b07      	ldr	r3, [pc, #28]	; (800ba14 <vPortExitCritical+0x4c>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d104      	bne.n	800ba06 <vPortExitCritical+0x3e>
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ba06:	bf00      	nop
 800ba08:	370c      	adds	r7, #12
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr
 800ba12:	bf00      	nop
 800ba14:	20000038 	.word	0x20000038
	...

0800ba20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ba20:	f3ef 8009 	mrs	r0, PSP
 800ba24:	f3bf 8f6f 	isb	sy
 800ba28:	4b15      	ldr	r3, [pc, #84]	; (800ba80 <pxCurrentTCBConst>)
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	f01e 0f10 	tst.w	lr, #16
 800ba30:	bf08      	it	eq
 800ba32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ba36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba3a:	6010      	str	r0, [r2, #0]
 800ba3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ba40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ba44:	f380 8811 	msr	BASEPRI, r0
 800ba48:	f3bf 8f4f 	dsb	sy
 800ba4c:	f3bf 8f6f 	isb	sy
 800ba50:	f001 ff7e 	bl	800d950 <vTaskSwitchContext>
 800ba54:	f04f 0000 	mov.w	r0, #0
 800ba58:	f380 8811 	msr	BASEPRI, r0
 800ba5c:	bc09      	pop	{r0, r3}
 800ba5e:	6819      	ldr	r1, [r3, #0]
 800ba60:	6808      	ldr	r0, [r1, #0]
 800ba62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba66:	f01e 0f10 	tst.w	lr, #16
 800ba6a:	bf08      	it	eq
 800ba6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ba70:	f380 8809 	msr	PSP, r0
 800ba74:	f3bf 8f6f 	isb	sy
 800ba78:	4770      	bx	lr
 800ba7a:	bf00      	nop
 800ba7c:	f3af 8000 	nop.w

0800ba80 <pxCurrentTCBConst>:
 800ba80:	2000329c 	.word	0x2000329c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ba84:	bf00      	nop
 800ba86:	bf00      	nop

0800ba88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b082      	sub	sp, #8
 800ba8c:	af00      	add	r7, sp, #0
	__asm volatile
 800ba8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba92:	f383 8811 	msr	BASEPRI, r3
 800ba96:	f3bf 8f6f 	isb	sy
 800ba9a:	f3bf 8f4f 	dsb	sy
 800ba9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800baa0:	f001 fe9e 	bl	800d7e0 <xTaskIncrementTick>
 800baa4:	4603      	mov	r3, r0
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d003      	beq.n	800bab2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800baaa:	4b06      	ldr	r3, [pc, #24]	; (800bac4 <SysTick_Handler+0x3c>)
 800baac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bab0:	601a      	str	r2, [r3, #0]
 800bab2:	2300      	movs	r3, #0
 800bab4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800babc:	bf00      	nop
 800babe:	3708      	adds	r7, #8
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	e000ed04 	.word	0xe000ed04

0800bac8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bac8:	b480      	push	{r7}
 800baca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bacc:	4b0b      	ldr	r3, [pc, #44]	; (800bafc <vPortSetupTimerInterrupt+0x34>)
 800bace:	2200      	movs	r2, #0
 800bad0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bad2:	4b0b      	ldr	r3, [pc, #44]	; (800bb00 <vPortSetupTimerInterrupt+0x38>)
 800bad4:	2200      	movs	r2, #0
 800bad6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bad8:	4b0a      	ldr	r3, [pc, #40]	; (800bb04 <vPortSetupTimerInterrupt+0x3c>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4a0a      	ldr	r2, [pc, #40]	; (800bb08 <vPortSetupTimerInterrupt+0x40>)
 800bade:	fba2 2303 	umull	r2, r3, r2, r3
 800bae2:	099b      	lsrs	r3, r3, #6
 800bae4:	4a09      	ldr	r2, [pc, #36]	; (800bb0c <vPortSetupTimerInterrupt+0x44>)
 800bae6:	3b01      	subs	r3, #1
 800bae8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800baea:	4b04      	ldr	r3, [pc, #16]	; (800bafc <vPortSetupTimerInterrupt+0x34>)
 800baec:	2207      	movs	r2, #7
 800baee:	601a      	str	r2, [r3, #0]
}
 800baf0:	bf00      	nop
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr
 800bafa:	bf00      	nop
 800bafc:	e000e010 	.word	0xe000e010
 800bb00:	e000e018 	.word	0xe000e018
 800bb04:	2000002c 	.word	0x2000002c
 800bb08:	10624dd3 	.word	0x10624dd3
 800bb0c:	e000e014 	.word	0xe000e014

0800bb10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bb10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bb20 <vPortEnableVFP+0x10>
 800bb14:	6801      	ldr	r1, [r0, #0]
 800bb16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bb1a:	6001      	str	r1, [r0, #0]
 800bb1c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bb1e:	bf00      	nop
 800bb20:	e000ed88 	.word	0xe000ed88

0800bb24 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bb24:	b480      	push	{r7}
 800bb26:	b085      	sub	sp, #20
 800bb28:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bb2a:	f3ef 8305 	mrs	r3, IPSR
 800bb2e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2b0f      	cmp	r3, #15
 800bb34:	d913      	bls.n	800bb5e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bb36:	4a16      	ldr	r2, [pc, #88]	; (800bb90 <vPortValidateInterruptPriority+0x6c>)
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bb40:	4b14      	ldr	r3, [pc, #80]	; (800bb94 <vPortValidateInterruptPriority+0x70>)
 800bb42:	781b      	ldrb	r3, [r3, #0]
 800bb44:	7afa      	ldrb	r2, [r7, #11]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d209      	bcs.n	800bb5e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800bb4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb4e:	f383 8811 	msr	BASEPRI, r3
 800bb52:	f3bf 8f6f 	isb	sy
 800bb56:	f3bf 8f4f 	dsb	sy
 800bb5a:	607b      	str	r3, [r7, #4]
 800bb5c:	e7fe      	b.n	800bb5c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bb5e:	4b0e      	ldr	r3, [pc, #56]	; (800bb98 <vPortValidateInterruptPriority+0x74>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bb66:	4b0d      	ldr	r3, [pc, #52]	; (800bb9c <vPortValidateInterruptPriority+0x78>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d909      	bls.n	800bb82 <vPortValidateInterruptPriority+0x5e>
 800bb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb72:	f383 8811 	msr	BASEPRI, r3
 800bb76:	f3bf 8f6f 	isb	sy
 800bb7a:	f3bf 8f4f 	dsb	sy
 800bb7e:	603b      	str	r3, [r7, #0]
 800bb80:	e7fe      	b.n	800bb80 <vPortValidateInterruptPriority+0x5c>
	}
 800bb82:	bf00      	nop
 800bb84:	3714      	adds	r7, #20
 800bb86:	46bd      	mov	sp, r7
 800bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8c:	4770      	bx	lr
 800bb8e:	bf00      	nop
 800bb90:	e000e3f0 	.word	0xe000e3f0
 800bb94:	20001b0c 	.word	0x20001b0c
 800bb98:	e000ed0c 	.word	0xe000ed0c
 800bb9c:	20001b10 	.word	0x20001b10

0800bba0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b08a      	sub	sp, #40	; 0x28
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bbac:	f001 fd26 	bl	800d5fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bbb0:	4b57      	ldr	r3, [pc, #348]	; (800bd10 <pvPortMalloc+0x170>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d101      	bne.n	800bbbc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bbb8:	f000 f90c 	bl	800bdd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bbbc:	4b55      	ldr	r3, [pc, #340]	; (800bd14 <pvPortMalloc+0x174>)
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	4013      	ands	r3, r2
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	f040 808c 	bne.w	800bce2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d01c      	beq.n	800bc0a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800bbd0:	2208      	movs	r2, #8
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	4413      	add	r3, r2
 800bbd6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f003 0307 	and.w	r3, r3, #7
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d013      	beq.n	800bc0a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f023 0307 	bic.w	r3, r3, #7
 800bbe8:	3308      	adds	r3, #8
 800bbea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f003 0307 	and.w	r3, r3, #7
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d009      	beq.n	800bc0a <pvPortMalloc+0x6a>
 800bbf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfa:	f383 8811 	msr	BASEPRI, r3
 800bbfe:	f3bf 8f6f 	isb	sy
 800bc02:	f3bf 8f4f 	dsb	sy
 800bc06:	617b      	str	r3, [r7, #20]
 800bc08:	e7fe      	b.n	800bc08 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d068      	beq.n	800bce2 <pvPortMalloc+0x142>
 800bc10:	4b41      	ldr	r3, [pc, #260]	; (800bd18 <pvPortMalloc+0x178>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d863      	bhi.n	800bce2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bc1a:	4b40      	ldr	r3, [pc, #256]	; (800bd1c <pvPortMalloc+0x17c>)
 800bc1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bc1e:	4b3f      	ldr	r3, [pc, #252]	; (800bd1c <pvPortMalloc+0x17c>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bc24:	e004      	b.n	800bc30 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800bc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d903      	bls.n	800bc42 <pvPortMalloc+0xa2>
 800bc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d1f1      	bne.n	800bc26 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bc42:	4b33      	ldr	r3, [pc, #204]	; (800bd10 <pvPortMalloc+0x170>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d04a      	beq.n	800bce2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bc4c:	6a3b      	ldr	r3, [r7, #32]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2208      	movs	r2, #8
 800bc52:	4413      	add	r3, r2
 800bc54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	6a3b      	ldr	r3, [r7, #32]
 800bc5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc60:	685a      	ldr	r2, [r3, #4]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	1ad2      	subs	r2, r2, r3
 800bc66:	2308      	movs	r3, #8
 800bc68:	005b      	lsls	r3, r3, #1
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d91e      	bls.n	800bcac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bc6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	4413      	add	r3, r2
 800bc74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc76:	69bb      	ldr	r3, [r7, #24]
 800bc78:	f003 0307 	and.w	r3, r3, #7
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d009      	beq.n	800bc94 <pvPortMalloc+0xf4>
 800bc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc84:	f383 8811 	msr	BASEPRI, r3
 800bc88:	f3bf 8f6f 	isb	sy
 800bc8c:	f3bf 8f4f 	dsb	sy
 800bc90:	613b      	str	r3, [r7, #16]
 800bc92:	e7fe      	b.n	800bc92 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc96:	685a      	ldr	r2, [r3, #4]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	1ad2      	subs	r2, r2, r3
 800bc9c:	69bb      	ldr	r3, [r7, #24]
 800bc9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bca6:	69b8      	ldr	r0, [r7, #24]
 800bca8:	f000 f8f6 	bl	800be98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bcac:	4b1a      	ldr	r3, [pc, #104]	; (800bd18 <pvPortMalloc+0x178>)
 800bcae:	681a      	ldr	r2, [r3, #0]
 800bcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	1ad3      	subs	r3, r2, r3
 800bcb6:	4a18      	ldr	r2, [pc, #96]	; (800bd18 <pvPortMalloc+0x178>)
 800bcb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bcba:	4b17      	ldr	r3, [pc, #92]	; (800bd18 <pvPortMalloc+0x178>)
 800bcbc:	681a      	ldr	r2, [r3, #0]
 800bcbe:	4b18      	ldr	r3, [pc, #96]	; (800bd20 <pvPortMalloc+0x180>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d203      	bcs.n	800bcce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bcc6:	4b14      	ldr	r3, [pc, #80]	; (800bd18 <pvPortMalloc+0x178>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4a15      	ldr	r2, [pc, #84]	; (800bd20 <pvPortMalloc+0x180>)
 800bccc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bcce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd0:	685a      	ldr	r2, [r3, #4]
 800bcd2:	4b10      	ldr	r3, [pc, #64]	; (800bd14 <pvPortMalloc+0x174>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	431a      	orrs	r2, r3
 800bcd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bcdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcde:	2200      	movs	r2, #0
 800bce0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bce2:	f001 fcd1 	bl	800d688 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bce6:	69fb      	ldr	r3, [r7, #28]
 800bce8:	f003 0307 	and.w	r3, r3, #7
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d009      	beq.n	800bd04 <pvPortMalloc+0x164>
 800bcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf4:	f383 8811 	msr	BASEPRI, r3
 800bcf8:	f3bf 8f6f 	isb	sy
 800bcfc:	f3bf 8f4f 	dsb	sy
 800bd00:	60fb      	str	r3, [r7, #12]
 800bd02:	e7fe      	b.n	800bd02 <pvPortMalloc+0x162>
	return pvReturn;
 800bd04:	69fb      	ldr	r3, [r7, #28]
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3728      	adds	r7, #40	; 0x28
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	2000328c 	.word	0x2000328c
 800bd14:	20003298 	.word	0x20003298
 800bd18:	20003290 	.word	0x20003290
 800bd1c:	20003284 	.word	0x20003284
 800bd20:	20003294 	.word	0x20003294

0800bd24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b086      	sub	sp, #24
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d046      	beq.n	800bdc4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bd36:	2308      	movs	r3, #8
 800bd38:	425b      	negs	r3, r3
 800bd3a:	697a      	ldr	r2, [r7, #20]
 800bd3c:	4413      	add	r3, r2
 800bd3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	685a      	ldr	r2, [r3, #4]
 800bd48:	4b20      	ldr	r3, [pc, #128]	; (800bdcc <vPortFree+0xa8>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4013      	ands	r3, r2
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d109      	bne.n	800bd66 <vPortFree+0x42>
 800bd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd56:	f383 8811 	msr	BASEPRI, r3
 800bd5a:	f3bf 8f6f 	isb	sy
 800bd5e:	f3bf 8f4f 	dsb	sy
 800bd62:	60fb      	str	r3, [r7, #12]
 800bd64:	e7fe      	b.n	800bd64 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d009      	beq.n	800bd82 <vPortFree+0x5e>
 800bd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd72:	f383 8811 	msr	BASEPRI, r3
 800bd76:	f3bf 8f6f 	isb	sy
 800bd7a:	f3bf 8f4f 	dsb	sy
 800bd7e:	60bb      	str	r3, [r7, #8]
 800bd80:	e7fe      	b.n	800bd80 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	685a      	ldr	r2, [r3, #4]
 800bd86:	4b11      	ldr	r3, [pc, #68]	; (800bdcc <vPortFree+0xa8>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4013      	ands	r3, r2
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d019      	beq.n	800bdc4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d115      	bne.n	800bdc4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	685a      	ldr	r2, [r3, #4]
 800bd9c:	4b0b      	ldr	r3, [pc, #44]	; (800bdcc <vPortFree+0xa8>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	43db      	mvns	r3, r3
 800bda2:	401a      	ands	r2, r3
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bda8:	f001 fc28 	bl	800d5fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	685a      	ldr	r2, [r3, #4]
 800bdb0:	4b07      	ldr	r3, [pc, #28]	; (800bdd0 <vPortFree+0xac>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4413      	add	r3, r2
 800bdb6:	4a06      	ldr	r2, [pc, #24]	; (800bdd0 <vPortFree+0xac>)
 800bdb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bdba:	6938      	ldr	r0, [r7, #16]
 800bdbc:	f000 f86c 	bl	800be98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bdc0:	f001 fc62 	bl	800d688 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bdc4:	bf00      	nop
 800bdc6:	3718      	adds	r7, #24
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	20003298 	.word	0x20003298
 800bdd0:	20003290 	.word	0x20003290

0800bdd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b085      	sub	sp, #20
 800bdd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bdda:	f241 7370 	movw	r3, #6000	; 0x1770
 800bdde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bde0:	4b27      	ldr	r3, [pc, #156]	; (800be80 <prvHeapInit+0xac>)
 800bde2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f003 0307 	and.w	r3, r3, #7
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00c      	beq.n	800be08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	3307      	adds	r3, #7
 800bdf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f023 0307 	bic.w	r3, r3, #7
 800bdfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bdfc:	68ba      	ldr	r2, [r7, #8]
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	1ad3      	subs	r3, r2, r3
 800be02:	4a1f      	ldr	r2, [pc, #124]	; (800be80 <prvHeapInit+0xac>)
 800be04:	4413      	add	r3, r2
 800be06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800be0c:	4a1d      	ldr	r2, [pc, #116]	; (800be84 <prvHeapInit+0xb0>)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800be12:	4b1c      	ldr	r3, [pc, #112]	; (800be84 <prvHeapInit+0xb0>)
 800be14:	2200      	movs	r2, #0
 800be16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	68ba      	ldr	r2, [r7, #8]
 800be1c:	4413      	add	r3, r2
 800be1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800be20:	2208      	movs	r2, #8
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	1a9b      	subs	r3, r3, r2
 800be26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f023 0307 	bic.w	r3, r3, #7
 800be2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	4a15      	ldr	r2, [pc, #84]	; (800be88 <prvHeapInit+0xb4>)
 800be34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800be36:	4b14      	ldr	r3, [pc, #80]	; (800be88 <prvHeapInit+0xb4>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	2200      	movs	r2, #0
 800be3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800be3e:	4b12      	ldr	r3, [pc, #72]	; (800be88 <prvHeapInit+0xb4>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	2200      	movs	r2, #0
 800be44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	68fa      	ldr	r2, [r7, #12]
 800be4e:	1ad2      	subs	r2, r2, r3
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800be54:	4b0c      	ldr	r3, [pc, #48]	; (800be88 <prvHeapInit+0xb4>)
 800be56:	681a      	ldr	r2, [r3, #0]
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	4a0a      	ldr	r2, [pc, #40]	; (800be8c <prvHeapInit+0xb8>)
 800be62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	685b      	ldr	r3, [r3, #4]
 800be68:	4a09      	ldr	r2, [pc, #36]	; (800be90 <prvHeapInit+0xbc>)
 800be6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800be6c:	4b09      	ldr	r3, [pc, #36]	; (800be94 <prvHeapInit+0xc0>)
 800be6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800be72:	601a      	str	r2, [r3, #0]
}
 800be74:	bf00      	nop
 800be76:	3714      	adds	r7, #20
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr
 800be80:	20001b14 	.word	0x20001b14
 800be84:	20003284 	.word	0x20003284
 800be88:	2000328c 	.word	0x2000328c
 800be8c:	20003294 	.word	0x20003294
 800be90:	20003290 	.word	0x20003290
 800be94:	20003298 	.word	0x20003298

0800be98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800be98:	b480      	push	{r7}
 800be9a:	b085      	sub	sp, #20
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bea0:	4b28      	ldr	r3, [pc, #160]	; (800bf44 <prvInsertBlockIntoFreeList+0xac>)
 800bea2:	60fb      	str	r3, [r7, #12]
 800bea4:	e002      	b.n	800beac <prvInsertBlockIntoFreeList+0x14>
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	60fb      	str	r3, [r7, #12]
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d8f7      	bhi.n	800bea6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	68ba      	ldr	r2, [r7, #8]
 800bec0:	4413      	add	r3, r2
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d108      	bne.n	800beda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	685a      	ldr	r2, [r3, #4]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	685b      	ldr	r3, [r3, #4]
 800bed0:	441a      	add	r2, r3
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	68ba      	ldr	r2, [r7, #8]
 800bee4:	441a      	add	r2, r3
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	429a      	cmp	r2, r3
 800beec:	d118      	bne.n	800bf20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	4b15      	ldr	r3, [pc, #84]	; (800bf48 <prvInsertBlockIntoFreeList+0xb0>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d00d      	beq.n	800bf16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	685a      	ldr	r2, [r3, #4]
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	441a      	add	r2, r3
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	601a      	str	r2, [r3, #0]
 800bf14:	e008      	b.n	800bf28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bf16:	4b0c      	ldr	r3, [pc, #48]	; (800bf48 <prvInsertBlockIntoFreeList+0xb0>)
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	601a      	str	r2, [r3, #0]
 800bf1e:	e003      	b.n	800bf28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681a      	ldr	r2, [r3, #0]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bf28:	68fa      	ldr	r2, [r7, #12]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d002      	beq.n	800bf36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf36:	bf00      	nop
 800bf38:	3714      	adds	r7, #20
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr
 800bf42:	bf00      	nop
 800bf44:	20003284 	.word	0x20003284
 800bf48:	2000328c 	.word	0x2000328c

0800bf4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b083      	sub	sp, #12
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f103 0208 	add.w	r2, r3, #8
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f103 0208 	add.w	r2, r3, #8
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f103 0208 	add.w	r2, r3, #8
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bf80:	bf00      	nop
 800bf82:	370c      	adds	r7, #12
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr

0800bf8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b083      	sub	sp, #12
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2200      	movs	r2, #0
 800bf98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bf9a:	bf00      	nop
 800bf9c:	370c      	adds	r7, #12
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr

0800bfa6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bfa6:	b480      	push	{r7}
 800bfa8:	b085      	sub	sp, #20
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
 800bfae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	68fa      	ldr	r2, [r7, #12]
 800bfba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	689a      	ldr	r2, [r3, #8]
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	689b      	ldr	r3, [r3, #8]
 800bfc8:	683a      	ldr	r2, [r7, #0]
 800bfca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	683a      	ldr	r2, [r7, #0]
 800bfd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	687a      	ldr	r2, [r7, #4]
 800bfd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	1c5a      	adds	r2, r3, #1
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	601a      	str	r2, [r3, #0]
}
 800bfe2:	bf00      	nop
 800bfe4:	3714      	adds	r7, #20
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr

0800bfee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bfee:	b480      	push	{r7}
 800bff0:	b085      	sub	sp, #20
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
 800bff6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c004:	d103      	bne.n	800c00e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	691b      	ldr	r3, [r3, #16]
 800c00a:	60fb      	str	r3, [r7, #12]
 800c00c:	e00c      	b.n	800c028 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	3308      	adds	r3, #8
 800c012:	60fb      	str	r3, [r7, #12]
 800c014:	e002      	b.n	800c01c <vListInsert+0x2e>
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	60fb      	str	r3, [r7, #12]
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	68ba      	ldr	r2, [r7, #8]
 800c024:	429a      	cmp	r2, r3
 800c026:	d2f6      	bcs.n	800c016 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	685a      	ldr	r2, [r3, #4]
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	683a      	ldr	r2, [r7, #0]
 800c036:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	68fa      	ldr	r2, [r7, #12]
 800c03c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	683a      	ldr	r2, [r7, #0]
 800c042:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	1c5a      	adds	r2, r3, #1
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	601a      	str	r2, [r3, #0]
}
 800c054:	bf00      	nop
 800c056:	3714      	adds	r7, #20
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr

0800c060 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c060:	b480      	push	{r7}
 800c062:	b085      	sub	sp, #20
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	691b      	ldr	r3, [r3, #16]
 800c06c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	6892      	ldr	r2, [r2, #8]
 800c076:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	689b      	ldr	r3, [r3, #8]
 800c07c:	687a      	ldr	r2, [r7, #4]
 800c07e:	6852      	ldr	r2, [r2, #4]
 800c080:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	685b      	ldr	r3, [r3, #4]
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	429a      	cmp	r2, r3
 800c08a:	d103      	bne.n	800c094 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	689a      	ldr	r2, [r3, #8]
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2200      	movs	r2, #0
 800c098:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	1e5a      	subs	r2, r3, #1
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3714      	adds	r7, #20
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr

0800c0b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b084      	sub	sp, #16
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d109      	bne.n	800c0dc <xQueueGenericReset+0x28>
 800c0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0cc:	f383 8811 	msr	BASEPRI, r3
 800c0d0:	f3bf 8f6f 	isb	sy
 800c0d4:	f3bf 8f4f 	dsb	sy
 800c0d8:	60bb      	str	r3, [r7, #8]
 800c0da:	e7fe      	b.n	800c0da <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800c0dc:	f7ff fc46 	bl	800b96c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681a      	ldr	r2, [r3, #0]
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0e8:	68f9      	ldr	r1, [r7, #12]
 800c0ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c0ec:	fb01 f303 	mul.w	r3, r1, r3
 800c0f0:	441a      	add	r2, r3
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681a      	ldr	r2, [r3, #0]
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681a      	ldr	r2, [r3, #0]
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c10c:	3b01      	subs	r3, #1
 800c10e:	68f9      	ldr	r1, [r7, #12]
 800c110:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c112:	fb01 f303 	mul.w	r3, r1, r3
 800c116:	441a      	add	r2, r3
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	22ff      	movs	r2, #255	; 0xff
 800c120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	22ff      	movs	r2, #255	; 0xff
 800c128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d114      	bne.n	800c15c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	691b      	ldr	r3, [r3, #16]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d01a      	beq.n	800c170 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	3310      	adds	r3, #16
 800c13e:	4618      	mov	r0, r3
 800c140:	f001 fcb0 	bl	800daa4 <xTaskRemoveFromEventList>
 800c144:	4603      	mov	r3, r0
 800c146:	2b00      	cmp	r3, #0
 800c148:	d012      	beq.n	800c170 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c14a:	4b0d      	ldr	r3, [pc, #52]	; (800c180 <xQueueGenericReset+0xcc>)
 800c14c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c150:	601a      	str	r2, [r3, #0]
 800c152:	f3bf 8f4f 	dsb	sy
 800c156:	f3bf 8f6f 	isb	sy
 800c15a:	e009      	b.n	800c170 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	3310      	adds	r3, #16
 800c160:	4618      	mov	r0, r3
 800c162:	f7ff fef3 	bl	800bf4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	3324      	adds	r3, #36	; 0x24
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7ff feee 	bl	800bf4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c170:	f7ff fc2a 	bl	800b9c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c174:	2301      	movs	r3, #1
}
 800c176:	4618      	mov	r0, r3
 800c178:	3710      	adds	r7, #16
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop
 800c180:	e000ed04 	.word	0xe000ed04

0800c184 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c184:	b580      	push	{r7, lr}
 800c186:	b08e      	sub	sp, #56	; 0x38
 800c188:	af02      	add	r7, sp, #8
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	60b9      	str	r1, [r7, #8]
 800c18e:	607a      	str	r2, [r7, #4]
 800c190:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d109      	bne.n	800c1ac <xQueueGenericCreateStatic+0x28>
 800c198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19c:	f383 8811 	msr	BASEPRI, r3
 800c1a0:	f3bf 8f6f 	isb	sy
 800c1a4:	f3bf 8f4f 	dsb	sy
 800c1a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c1aa:	e7fe      	b.n	800c1aa <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d109      	bne.n	800c1c6 <xQueueGenericCreateStatic+0x42>
 800c1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b6:	f383 8811 	msr	BASEPRI, r3
 800c1ba:	f3bf 8f6f 	isb	sy
 800c1be:	f3bf 8f4f 	dsb	sy
 800c1c2:	627b      	str	r3, [r7, #36]	; 0x24
 800c1c4:	e7fe      	b.n	800c1c4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d002      	beq.n	800c1d2 <xQueueGenericCreateStatic+0x4e>
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d001      	beq.n	800c1d6 <xQueueGenericCreateStatic+0x52>
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	e000      	b.n	800c1d8 <xQueueGenericCreateStatic+0x54>
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d109      	bne.n	800c1f0 <xQueueGenericCreateStatic+0x6c>
 800c1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e0:	f383 8811 	msr	BASEPRI, r3
 800c1e4:	f3bf 8f6f 	isb	sy
 800c1e8:	f3bf 8f4f 	dsb	sy
 800c1ec:	623b      	str	r3, [r7, #32]
 800c1ee:	e7fe      	b.n	800c1ee <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d102      	bne.n	800c1fc <xQueueGenericCreateStatic+0x78>
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d101      	bne.n	800c200 <xQueueGenericCreateStatic+0x7c>
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	e000      	b.n	800c202 <xQueueGenericCreateStatic+0x7e>
 800c200:	2300      	movs	r3, #0
 800c202:	2b00      	cmp	r3, #0
 800c204:	d109      	bne.n	800c21a <xQueueGenericCreateStatic+0x96>
 800c206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c20a:	f383 8811 	msr	BASEPRI, r3
 800c20e:	f3bf 8f6f 	isb	sy
 800c212:	f3bf 8f4f 	dsb	sy
 800c216:	61fb      	str	r3, [r7, #28]
 800c218:	e7fe      	b.n	800c218 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c21a:	2350      	movs	r3, #80	; 0x50
 800c21c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	2b50      	cmp	r3, #80	; 0x50
 800c222:	d009      	beq.n	800c238 <xQueueGenericCreateStatic+0xb4>
 800c224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c228:	f383 8811 	msr	BASEPRI, r3
 800c22c:	f3bf 8f6f 	isb	sy
 800c230:	f3bf 8f4f 	dsb	sy
 800c234:	61bb      	str	r3, [r7, #24]
 800c236:	e7fe      	b.n	800c236 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c238:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c240:	2b00      	cmp	r3, #0
 800c242:	d00d      	beq.n	800c260 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c246:	2201      	movs	r2, #1
 800c248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c24c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c252:	9300      	str	r3, [sp, #0]
 800c254:	4613      	mov	r3, r2
 800c256:	687a      	ldr	r2, [r7, #4]
 800c258:	68b9      	ldr	r1, [r7, #8]
 800c25a:	68f8      	ldr	r0, [r7, #12]
 800c25c:	f000 f844 	bl	800c2e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c262:	4618      	mov	r0, r3
 800c264:	3730      	adds	r7, #48	; 0x30
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}

0800c26a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c26a:	b580      	push	{r7, lr}
 800c26c:	b08a      	sub	sp, #40	; 0x28
 800c26e:	af02      	add	r7, sp, #8
 800c270:	60f8      	str	r0, [r7, #12]
 800c272:	60b9      	str	r1, [r7, #8]
 800c274:	4613      	mov	r3, r2
 800c276:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d109      	bne.n	800c292 <xQueueGenericCreate+0x28>
 800c27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c282:	f383 8811 	msr	BASEPRI, r3
 800c286:	f3bf 8f6f 	isb	sy
 800c28a:	f3bf 8f4f 	dsb	sy
 800c28e:	613b      	str	r3, [r7, #16]
 800c290:	e7fe      	b.n	800c290 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d102      	bne.n	800c29e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c298:	2300      	movs	r3, #0
 800c29a:	61fb      	str	r3, [r7, #28]
 800c29c:	e004      	b.n	800c2a8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	68ba      	ldr	r2, [r7, #8]
 800c2a2:	fb02 f303 	mul.w	r3, r2, r3
 800c2a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	3350      	adds	r3, #80	; 0x50
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7ff fc77 	bl	800bba0 <pvPortMalloc>
 800c2b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c2b4:	69bb      	ldr	r3, [r7, #24]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d011      	beq.n	800c2de <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c2ba:	69bb      	ldr	r3, [r7, #24]
 800c2bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	3350      	adds	r3, #80	; 0x50
 800c2c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c2c4:	69bb      	ldr	r3, [r7, #24]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c2cc:	79fa      	ldrb	r2, [r7, #7]
 800c2ce:	69bb      	ldr	r3, [r7, #24]
 800c2d0:	9300      	str	r3, [sp, #0]
 800c2d2:	4613      	mov	r3, r2
 800c2d4:	697a      	ldr	r2, [r7, #20]
 800c2d6:	68b9      	ldr	r1, [r7, #8]
 800c2d8:	68f8      	ldr	r0, [r7, #12]
 800c2da:	f000 f805 	bl	800c2e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c2de:	69bb      	ldr	r3, [r7, #24]
	}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3720      	adds	r7, #32
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}

0800c2e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b084      	sub	sp, #16
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	60f8      	str	r0, [r7, #12]
 800c2f0:	60b9      	str	r1, [r7, #8]
 800c2f2:	607a      	str	r2, [r7, #4]
 800c2f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d103      	bne.n	800c304 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c2fc:	69bb      	ldr	r3, [r7, #24]
 800c2fe:	69ba      	ldr	r2, [r7, #24]
 800c300:	601a      	str	r2, [r3, #0]
 800c302:	e002      	b.n	800c30a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c304:	69bb      	ldr	r3, [r7, #24]
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c30a:	69bb      	ldr	r3, [r7, #24]
 800c30c:	68fa      	ldr	r2, [r7, #12]
 800c30e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c310:	69bb      	ldr	r3, [r7, #24]
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c316:	2101      	movs	r1, #1
 800c318:	69b8      	ldr	r0, [r7, #24]
 800c31a:	f7ff fecb 	bl	800c0b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c31e:	69bb      	ldr	r3, [r7, #24]
 800c320:	78fa      	ldrb	r2, [r7, #3]
 800c322:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c326:	bf00      	nop
 800c328:	3710      	adds	r7, #16
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}

0800c32e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c32e:	b580      	push	{r7, lr}
 800c330:	b082      	sub	sp, #8
 800c332:	af00      	add	r7, sp, #0
 800c334:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d00e      	beq.n	800c35a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2200      	movs	r2, #0
 800c340:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2200      	movs	r2, #0
 800c346:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2200      	movs	r2, #0
 800c34c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c34e:	2300      	movs	r3, #0
 800c350:	2200      	movs	r2, #0
 800c352:	2100      	movs	r1, #0
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f000 f905 	bl	800c564 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c35a:	bf00      	nop
 800c35c:	3708      	adds	r7, #8
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}

0800c362 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c362:	b580      	push	{r7, lr}
 800c364:	b086      	sub	sp, #24
 800c366:	af00      	add	r7, sp, #0
 800c368:	4603      	mov	r3, r0
 800c36a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c36c:	2301      	movs	r3, #1
 800c36e:	617b      	str	r3, [r7, #20]
 800c370:	2300      	movs	r3, #0
 800c372:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c374:	79fb      	ldrb	r3, [r7, #7]
 800c376:	461a      	mov	r2, r3
 800c378:	6939      	ldr	r1, [r7, #16]
 800c37a:	6978      	ldr	r0, [r7, #20]
 800c37c:	f7ff ff75 	bl	800c26a <xQueueGenericCreate>
 800c380:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c382:	68f8      	ldr	r0, [r7, #12]
 800c384:	f7ff ffd3 	bl	800c32e <prvInitialiseMutex>

		return xNewQueue;
 800c388:	68fb      	ldr	r3, [r7, #12]
	}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3718      	adds	r7, #24
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}

0800c392 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c392:	b580      	push	{r7, lr}
 800c394:	b088      	sub	sp, #32
 800c396:	af02      	add	r7, sp, #8
 800c398:	4603      	mov	r3, r0
 800c39a:	6039      	str	r1, [r7, #0]
 800c39c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c39e:	2301      	movs	r3, #1
 800c3a0:	617b      	str	r3, [r7, #20]
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c3a6:	79fb      	ldrb	r3, [r7, #7]
 800c3a8:	9300      	str	r3, [sp, #0]
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	6939      	ldr	r1, [r7, #16]
 800c3b0:	6978      	ldr	r0, [r7, #20]
 800c3b2:	f7ff fee7 	bl	800c184 <xQueueGenericCreateStatic>
 800c3b6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c3b8:	68f8      	ldr	r0, [r7, #12]
 800c3ba:	f7ff ffb8 	bl	800c32e <prvInitialiseMutex>

		return xNewQueue;
 800c3be:	68fb      	ldr	r3, [r7, #12]
	}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3718      	adds	r7, #24
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800c3c8:	b590      	push	{r4, r7, lr}
 800c3ca:	b087      	sub	sp, #28
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d109      	bne.n	800c3ee <xQueueGiveMutexRecursive+0x26>
 800c3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3de:	f383 8811 	msr	BASEPRI, r3
 800c3e2:	f3bf 8f6f 	isb	sy
 800c3e6:	f3bf 8f4f 	dsb	sy
 800c3ea:	60fb      	str	r3, [r7, #12]
 800c3ec:	e7fe      	b.n	800c3ec <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	689c      	ldr	r4, [r3, #8]
 800c3f2:	f001 fd35 	bl	800de60 <xTaskGetCurrentTaskHandle>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	429c      	cmp	r4, r3
 800c3fa:	d111      	bne.n	800c420 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	1e5a      	subs	r2, r3, #1
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	68db      	ldr	r3, [r3, #12]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d105      	bne.n	800c41a <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c40e:	2300      	movs	r3, #0
 800c410:	2200      	movs	r2, #0
 800c412:	2100      	movs	r1, #0
 800c414:	6938      	ldr	r0, [r7, #16]
 800c416:	f000 f8a5 	bl	800c564 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800c41a:	2301      	movs	r3, #1
 800c41c:	617b      	str	r3, [r7, #20]
 800c41e:	e001      	b.n	800c424 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800c420:	2300      	movs	r3, #0
 800c422:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800c424:	697b      	ldr	r3, [r7, #20]
	}
 800c426:	4618      	mov	r0, r3
 800c428:	371c      	adds	r7, #28
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd90      	pop	{r4, r7, pc}

0800c42e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800c42e:	b590      	push	{r4, r7, lr}
 800c430:	b087      	sub	sp, #28
 800c432:	af00      	add	r7, sp, #0
 800c434:	6078      	str	r0, [r7, #4]
 800c436:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d109      	bne.n	800c456 <xQueueTakeMutexRecursive+0x28>
 800c442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c446:	f383 8811 	msr	BASEPRI, r3
 800c44a:	f3bf 8f6f 	isb	sy
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	60fb      	str	r3, [r7, #12]
 800c454:	e7fe      	b.n	800c454 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	689c      	ldr	r4, [r3, #8]
 800c45a:	f001 fd01 	bl	800de60 <xTaskGetCurrentTaskHandle>
 800c45e:	4603      	mov	r3, r0
 800c460:	429c      	cmp	r4, r3
 800c462:	d107      	bne.n	800c474 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	1c5a      	adds	r2, r3, #1
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800c46e:	2301      	movs	r3, #1
 800c470:	617b      	str	r3, [r7, #20]
 800c472:	e00c      	b.n	800c48e <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c474:	6839      	ldr	r1, [r7, #0]
 800c476:	6938      	ldr	r0, [r7, #16]
 800c478:	f000 fb68 	bl	800cb4c <xQueueSemaphoreTake>
 800c47c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d004      	beq.n	800c48e <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	68db      	ldr	r3, [r3, #12]
 800c488:	1c5a      	adds	r2, r3, #1
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800c48e:	697b      	ldr	r3, [r7, #20]
	}
 800c490:	4618      	mov	r0, r3
 800c492:	371c      	adds	r7, #28
 800c494:	46bd      	mov	sp, r7
 800c496:	bd90      	pop	{r4, r7, pc}

0800c498 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b08a      	sub	sp, #40	; 0x28
 800c49c:	af02      	add	r7, sp, #8
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	60b9      	str	r1, [r7, #8]
 800c4a2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d109      	bne.n	800c4be <xQueueCreateCountingSemaphoreStatic+0x26>
 800c4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ae:	f383 8811 	msr	BASEPRI, r3
 800c4b2:	f3bf 8f6f 	isb	sy
 800c4b6:	f3bf 8f4f 	dsb	sy
 800c4ba:	61bb      	str	r3, [r7, #24]
 800c4bc:	e7fe      	b.n	800c4bc <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c4be:	68ba      	ldr	r2, [r7, #8]
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d909      	bls.n	800c4da <xQueueCreateCountingSemaphoreStatic+0x42>
 800c4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ca:	f383 8811 	msr	BASEPRI, r3
 800c4ce:	f3bf 8f6f 	isb	sy
 800c4d2:	f3bf 8f4f 	dsb	sy
 800c4d6:	617b      	str	r3, [r7, #20]
 800c4d8:	e7fe      	b.n	800c4d8 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c4da:	2302      	movs	r3, #2
 800c4dc:	9300      	str	r3, [sp, #0]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	2100      	movs	r1, #0
 800c4e4:	68f8      	ldr	r0, [r7, #12]
 800c4e6:	f7ff fe4d 	bl	800c184 <xQueueGenericCreateStatic>
 800c4ea:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c4ec:	69fb      	ldr	r3, [r7, #28]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d002      	beq.n	800c4f8 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c4f2:	69fb      	ldr	r3, [r7, #28]
 800c4f4:	68ba      	ldr	r2, [r7, #8]
 800c4f6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c4f8:	69fb      	ldr	r3, [r7, #28]
	}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3720      	adds	r7, #32
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c502:	b580      	push	{r7, lr}
 800c504:	b086      	sub	sp, #24
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
 800c50a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d109      	bne.n	800c526 <xQueueCreateCountingSemaphore+0x24>
 800c512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c516:	f383 8811 	msr	BASEPRI, r3
 800c51a:	f3bf 8f6f 	isb	sy
 800c51e:	f3bf 8f4f 	dsb	sy
 800c522:	613b      	str	r3, [r7, #16]
 800c524:	e7fe      	b.n	800c524 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c526:	683a      	ldr	r2, [r7, #0]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d909      	bls.n	800c542 <xQueueCreateCountingSemaphore+0x40>
 800c52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c532:	f383 8811 	msr	BASEPRI, r3
 800c536:	f3bf 8f6f 	isb	sy
 800c53a:	f3bf 8f4f 	dsb	sy
 800c53e:	60fb      	str	r3, [r7, #12]
 800c540:	e7fe      	b.n	800c540 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c542:	2202      	movs	r2, #2
 800c544:	2100      	movs	r1, #0
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f7ff fe8f 	bl	800c26a <xQueueGenericCreate>
 800c54c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d002      	beq.n	800c55a <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	683a      	ldr	r2, [r7, #0]
 800c558:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c55a:	697b      	ldr	r3, [r7, #20]
	}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3718      	adds	r7, #24
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b08e      	sub	sp, #56	; 0x38
 800c568:	af00      	add	r7, sp, #0
 800c56a:	60f8      	str	r0, [r7, #12]
 800c56c:	60b9      	str	r1, [r7, #8]
 800c56e:	607a      	str	r2, [r7, #4]
 800c570:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c572:	2300      	movs	r3, #0
 800c574:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d109      	bne.n	800c594 <xQueueGenericSend+0x30>
 800c580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c584:	f383 8811 	msr	BASEPRI, r3
 800c588:	f3bf 8f6f 	isb	sy
 800c58c:	f3bf 8f4f 	dsb	sy
 800c590:	62bb      	str	r3, [r7, #40]	; 0x28
 800c592:	e7fe      	b.n	800c592 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d103      	bne.n	800c5a2 <xQueueGenericSend+0x3e>
 800c59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d101      	bne.n	800c5a6 <xQueueGenericSend+0x42>
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	e000      	b.n	800c5a8 <xQueueGenericSend+0x44>
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d109      	bne.n	800c5c0 <xQueueGenericSend+0x5c>
 800c5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b0:	f383 8811 	msr	BASEPRI, r3
 800c5b4:	f3bf 8f6f 	isb	sy
 800c5b8:	f3bf 8f4f 	dsb	sy
 800c5bc:	627b      	str	r3, [r7, #36]	; 0x24
 800c5be:	e7fe      	b.n	800c5be <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	2b02      	cmp	r3, #2
 800c5c4:	d103      	bne.n	800c5ce <xQueueGenericSend+0x6a>
 800c5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	d101      	bne.n	800c5d2 <xQueueGenericSend+0x6e>
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	e000      	b.n	800c5d4 <xQueueGenericSend+0x70>
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d109      	bne.n	800c5ec <xQueueGenericSend+0x88>
 800c5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5dc:	f383 8811 	msr	BASEPRI, r3
 800c5e0:	f3bf 8f6f 	isb	sy
 800c5e4:	f3bf 8f4f 	dsb	sy
 800c5e8:	623b      	str	r3, [r7, #32]
 800c5ea:	e7fe      	b.n	800c5ea <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c5ec:	f001 fc48 	bl	800de80 <xTaskGetSchedulerState>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d102      	bne.n	800c5fc <xQueueGenericSend+0x98>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d101      	bne.n	800c600 <xQueueGenericSend+0x9c>
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	e000      	b.n	800c602 <xQueueGenericSend+0x9e>
 800c600:	2300      	movs	r3, #0
 800c602:	2b00      	cmp	r3, #0
 800c604:	d109      	bne.n	800c61a <xQueueGenericSend+0xb6>
 800c606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60a:	f383 8811 	msr	BASEPRI, r3
 800c60e:	f3bf 8f6f 	isb	sy
 800c612:	f3bf 8f4f 	dsb	sy
 800c616:	61fb      	str	r3, [r7, #28]
 800c618:	e7fe      	b.n	800c618 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c61a:	f7ff f9a7 	bl	800b96c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c626:	429a      	cmp	r2, r3
 800c628:	d302      	bcc.n	800c630 <xQueueGenericSend+0xcc>
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	2b02      	cmp	r3, #2
 800c62e:	d129      	bne.n	800c684 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c630:	683a      	ldr	r2, [r7, #0]
 800c632:	68b9      	ldr	r1, [r7, #8]
 800c634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c636:	f000 fc48 	bl	800ceca <prvCopyDataToQueue>
 800c63a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c640:	2b00      	cmp	r3, #0
 800c642:	d010      	beq.n	800c666 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c646:	3324      	adds	r3, #36	; 0x24
 800c648:	4618      	mov	r0, r3
 800c64a:	f001 fa2b 	bl	800daa4 <xTaskRemoveFromEventList>
 800c64e:	4603      	mov	r3, r0
 800c650:	2b00      	cmp	r3, #0
 800c652:	d013      	beq.n	800c67c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c654:	4b3f      	ldr	r3, [pc, #252]	; (800c754 <xQueueGenericSend+0x1f0>)
 800c656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c65a:	601a      	str	r2, [r3, #0]
 800c65c:	f3bf 8f4f 	dsb	sy
 800c660:	f3bf 8f6f 	isb	sy
 800c664:	e00a      	b.n	800c67c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d007      	beq.n	800c67c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c66c:	4b39      	ldr	r3, [pc, #228]	; (800c754 <xQueueGenericSend+0x1f0>)
 800c66e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c672:	601a      	str	r2, [r3, #0]
 800c674:	f3bf 8f4f 	dsb	sy
 800c678:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c67c:	f7ff f9a4 	bl	800b9c8 <vPortExitCritical>
				return pdPASS;
 800c680:	2301      	movs	r3, #1
 800c682:	e063      	b.n	800c74c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d103      	bne.n	800c692 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c68a:	f7ff f99d 	bl	800b9c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c68e:	2300      	movs	r3, #0
 800c690:	e05c      	b.n	800c74c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c694:	2b00      	cmp	r3, #0
 800c696:	d106      	bne.n	800c6a6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c698:	f107 0314 	add.w	r3, r7, #20
 800c69c:	4618      	mov	r0, r3
 800c69e:	f001 fa65 	bl	800db6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c6a6:	f7ff f98f 	bl	800b9c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c6aa:	f000 ffa7 	bl	800d5fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6ae:	f7ff f95d 	bl	800b96c <vPortEnterCritical>
 800c6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6b8:	b25b      	sxtb	r3, r3
 800c6ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6be:	d103      	bne.n	800c6c8 <xQueueGenericSend+0x164>
 800c6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6ce:	b25b      	sxtb	r3, r3
 800c6d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6d4:	d103      	bne.n	800c6de <xQueueGenericSend+0x17a>
 800c6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d8:	2200      	movs	r2, #0
 800c6da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6de:	f7ff f973 	bl	800b9c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c6e2:	1d3a      	adds	r2, r7, #4
 800c6e4:	f107 0314 	add.w	r3, r7, #20
 800c6e8:	4611      	mov	r1, r2
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f001 fa54 	bl	800db98 <xTaskCheckForTimeOut>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d124      	bne.n	800c740 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c6f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6f8:	f000 fcdf 	bl	800d0ba <prvIsQueueFull>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d018      	beq.n	800c734 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c704:	3310      	adds	r3, #16
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	4611      	mov	r1, r2
 800c70a:	4618      	mov	r0, r3
 800c70c:	f001 f97c 	bl	800da08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c710:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c712:	f000 fc6a 	bl	800cfea <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c716:	f000 ffb7 	bl	800d688 <xTaskResumeAll>
 800c71a:	4603      	mov	r3, r0
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	f47f af7c 	bne.w	800c61a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800c722:	4b0c      	ldr	r3, [pc, #48]	; (800c754 <xQueueGenericSend+0x1f0>)
 800c724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c728:	601a      	str	r2, [r3, #0]
 800c72a:	f3bf 8f4f 	dsb	sy
 800c72e:	f3bf 8f6f 	isb	sy
 800c732:	e772      	b.n	800c61a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c734:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c736:	f000 fc58 	bl	800cfea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c73a:	f000 ffa5 	bl	800d688 <xTaskResumeAll>
 800c73e:	e76c      	b.n	800c61a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c742:	f000 fc52 	bl	800cfea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c746:	f000 ff9f 	bl	800d688 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c74a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3738      	adds	r7, #56	; 0x38
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}
 800c754:	e000ed04 	.word	0xe000ed04

0800c758 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b08e      	sub	sp, #56	; 0x38
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	60b9      	str	r1, [r7, #8]
 800c762:	607a      	str	r2, [r7, #4]
 800c764:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d109      	bne.n	800c784 <xQueueGenericSendFromISR+0x2c>
 800c770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c774:	f383 8811 	msr	BASEPRI, r3
 800c778:	f3bf 8f6f 	isb	sy
 800c77c:	f3bf 8f4f 	dsb	sy
 800c780:	627b      	str	r3, [r7, #36]	; 0x24
 800c782:	e7fe      	b.n	800c782 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d103      	bne.n	800c792 <xQueueGenericSendFromISR+0x3a>
 800c78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d101      	bne.n	800c796 <xQueueGenericSendFromISR+0x3e>
 800c792:	2301      	movs	r3, #1
 800c794:	e000      	b.n	800c798 <xQueueGenericSendFromISR+0x40>
 800c796:	2300      	movs	r3, #0
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d109      	bne.n	800c7b0 <xQueueGenericSendFromISR+0x58>
 800c79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a0:	f383 8811 	msr	BASEPRI, r3
 800c7a4:	f3bf 8f6f 	isb	sy
 800c7a8:	f3bf 8f4f 	dsb	sy
 800c7ac:	623b      	str	r3, [r7, #32]
 800c7ae:	e7fe      	b.n	800c7ae <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	2b02      	cmp	r3, #2
 800c7b4:	d103      	bne.n	800c7be <xQueueGenericSendFromISR+0x66>
 800c7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7ba:	2b01      	cmp	r3, #1
 800c7bc:	d101      	bne.n	800c7c2 <xQueueGenericSendFromISR+0x6a>
 800c7be:	2301      	movs	r3, #1
 800c7c0:	e000      	b.n	800c7c4 <xQueueGenericSendFromISR+0x6c>
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d109      	bne.n	800c7dc <xQueueGenericSendFromISR+0x84>
 800c7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7cc:	f383 8811 	msr	BASEPRI, r3
 800c7d0:	f3bf 8f6f 	isb	sy
 800c7d4:	f3bf 8f4f 	dsb	sy
 800c7d8:	61fb      	str	r3, [r7, #28]
 800c7da:	e7fe      	b.n	800c7da <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c7dc:	f7ff f9a2 	bl	800bb24 <vPortValidateInterruptPriority>
	__asm volatile
 800c7e0:	f3ef 8211 	mrs	r2, BASEPRI
 800c7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e8:	f383 8811 	msr	BASEPRI, r3
 800c7ec:	f3bf 8f6f 	isb	sy
 800c7f0:	f3bf 8f4f 	dsb	sy
 800c7f4:	61ba      	str	r2, [r7, #24]
 800c7f6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c7f8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c7fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c804:	429a      	cmp	r2, r3
 800c806:	d302      	bcc.n	800c80e <xQueueGenericSendFromISR+0xb6>
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	2b02      	cmp	r3, #2
 800c80c:	d12c      	bne.n	800c868 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c810:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c814:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c818:	683a      	ldr	r2, [r7, #0]
 800c81a:	68b9      	ldr	r1, [r7, #8]
 800c81c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c81e:	f000 fb54 	bl	800ceca <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c822:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c826:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c82a:	d112      	bne.n	800c852 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c830:	2b00      	cmp	r3, #0
 800c832:	d016      	beq.n	800c862 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c836:	3324      	adds	r3, #36	; 0x24
 800c838:	4618      	mov	r0, r3
 800c83a:	f001 f933 	bl	800daa4 <xTaskRemoveFromEventList>
 800c83e:	4603      	mov	r3, r0
 800c840:	2b00      	cmp	r3, #0
 800c842:	d00e      	beq.n	800c862 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d00b      	beq.n	800c862 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2201      	movs	r2, #1
 800c84e:	601a      	str	r2, [r3, #0]
 800c850:	e007      	b.n	800c862 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c852:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c856:	3301      	adds	r3, #1
 800c858:	b2db      	uxtb	r3, r3
 800c85a:	b25a      	sxtb	r2, r3
 800c85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c85e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c862:	2301      	movs	r3, #1
 800c864:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c866:	e001      	b.n	800c86c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c868:	2300      	movs	r3, #0
 800c86a:	637b      	str	r3, [r7, #52]	; 0x34
 800c86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86e:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3738      	adds	r7, #56	; 0x38
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}

0800c880 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b08e      	sub	sp, #56	; 0x38
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c890:	2b00      	cmp	r3, #0
 800c892:	d109      	bne.n	800c8a8 <xQueueGiveFromISR+0x28>
	__asm volatile
 800c894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c898:	f383 8811 	msr	BASEPRI, r3
 800c89c:	f3bf 8f6f 	isb	sy
 800c8a0:	f3bf 8f4f 	dsb	sy
 800c8a4:	623b      	str	r3, [r7, #32]
 800c8a6:	e7fe      	b.n	800c8a6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d009      	beq.n	800c8c4 <xQueueGiveFromISR+0x44>
 800c8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b4:	f383 8811 	msr	BASEPRI, r3
 800c8b8:	f3bf 8f6f 	isb	sy
 800c8bc:	f3bf 8f4f 	dsb	sy
 800c8c0:	61fb      	str	r3, [r7, #28]
 800c8c2:	e7fe      	b.n	800c8c2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d103      	bne.n	800c8d4 <xQueueGiveFromISR+0x54>
 800c8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ce:	689b      	ldr	r3, [r3, #8]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d101      	bne.n	800c8d8 <xQueueGiveFromISR+0x58>
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	e000      	b.n	800c8da <xQueueGiveFromISR+0x5a>
 800c8d8:	2300      	movs	r3, #0
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d109      	bne.n	800c8f2 <xQueueGiveFromISR+0x72>
 800c8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e2:	f383 8811 	msr	BASEPRI, r3
 800c8e6:	f3bf 8f6f 	isb	sy
 800c8ea:	f3bf 8f4f 	dsb	sy
 800c8ee:	61bb      	str	r3, [r7, #24]
 800c8f0:	e7fe      	b.n	800c8f0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c8f2:	f7ff f917 	bl	800bb24 <vPortValidateInterruptPriority>
	__asm volatile
 800c8f6:	f3ef 8211 	mrs	r2, BASEPRI
 800c8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fe:	f383 8811 	msr	BASEPRI, r3
 800c902:	f3bf 8f6f 	isb	sy
 800c906:	f3bf 8f4f 	dsb	sy
 800c90a:	617a      	str	r2, [r7, #20]
 800c90c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c90e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c910:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c916:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c91a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c91c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c91e:	429a      	cmp	r2, r3
 800c920:	d22b      	bcs.n	800c97a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c924:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92e:	1c5a      	adds	r2, r3, #1
 800c930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c932:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c934:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c93c:	d112      	bne.n	800c964 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c942:	2b00      	cmp	r3, #0
 800c944:	d016      	beq.n	800c974 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c948:	3324      	adds	r3, #36	; 0x24
 800c94a:	4618      	mov	r0, r3
 800c94c:	f001 f8aa 	bl	800daa4 <xTaskRemoveFromEventList>
 800c950:	4603      	mov	r3, r0
 800c952:	2b00      	cmp	r3, #0
 800c954:	d00e      	beq.n	800c974 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d00b      	beq.n	800c974 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	2201      	movs	r2, #1
 800c960:	601a      	str	r2, [r3, #0]
 800c962:	e007      	b.n	800c974 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c968:	3301      	adds	r3, #1
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	b25a      	sxtb	r2, r3
 800c96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c974:	2301      	movs	r3, #1
 800c976:	637b      	str	r3, [r7, #52]	; 0x34
 800c978:	e001      	b.n	800c97e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c97a:	2300      	movs	r3, #0
 800c97c:	637b      	str	r3, [r7, #52]	; 0x34
 800c97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c980:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3738      	adds	r7, #56	; 0x38
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}
	...

0800c994 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b08c      	sub	sp, #48	; 0x30
 800c998:	af00      	add	r7, sp, #0
 800c99a:	60f8      	str	r0, [r7, #12]
 800c99c:	60b9      	str	r1, [r7, #8]
 800c99e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d109      	bne.n	800c9c2 <xQueueReceive+0x2e>
	__asm volatile
 800c9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b2:	f383 8811 	msr	BASEPRI, r3
 800c9b6:	f3bf 8f6f 	isb	sy
 800c9ba:	f3bf 8f4f 	dsb	sy
 800c9be:	623b      	str	r3, [r7, #32]
 800c9c0:	e7fe      	b.n	800c9c0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d103      	bne.n	800c9d0 <xQueueReceive+0x3c>
 800c9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d101      	bne.n	800c9d4 <xQueueReceive+0x40>
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	e000      	b.n	800c9d6 <xQueueReceive+0x42>
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d109      	bne.n	800c9ee <xQueueReceive+0x5a>
 800c9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9de:	f383 8811 	msr	BASEPRI, r3
 800c9e2:	f3bf 8f6f 	isb	sy
 800c9e6:	f3bf 8f4f 	dsb	sy
 800c9ea:	61fb      	str	r3, [r7, #28]
 800c9ec:	e7fe      	b.n	800c9ec <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c9ee:	f001 fa47 	bl	800de80 <xTaskGetSchedulerState>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d102      	bne.n	800c9fe <xQueueReceive+0x6a>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d101      	bne.n	800ca02 <xQueueReceive+0x6e>
 800c9fe:	2301      	movs	r3, #1
 800ca00:	e000      	b.n	800ca04 <xQueueReceive+0x70>
 800ca02:	2300      	movs	r3, #0
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d109      	bne.n	800ca1c <xQueueReceive+0x88>
 800ca08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca0c:	f383 8811 	msr	BASEPRI, r3
 800ca10:	f3bf 8f6f 	isb	sy
 800ca14:	f3bf 8f4f 	dsb	sy
 800ca18:	61bb      	str	r3, [r7, #24]
 800ca1a:	e7fe      	b.n	800ca1a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ca1c:	f7fe ffa6 	bl	800b96c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca24:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d01f      	beq.n	800ca6c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ca2c:	68b9      	ldr	r1, [r7, #8]
 800ca2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca30:	f000 fab5 	bl	800cf9e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ca34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca36:	1e5a      	subs	r2, r3, #1
 800ca38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca3a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca3e:	691b      	ldr	r3, [r3, #16]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d00f      	beq.n	800ca64 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca46:	3310      	adds	r3, #16
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f001 f82b 	bl	800daa4 <xTaskRemoveFromEventList>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d007      	beq.n	800ca64 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ca54:	4b3c      	ldr	r3, [pc, #240]	; (800cb48 <xQueueReceive+0x1b4>)
 800ca56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca5a:	601a      	str	r2, [r3, #0]
 800ca5c:	f3bf 8f4f 	dsb	sy
 800ca60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ca64:	f7fe ffb0 	bl	800b9c8 <vPortExitCritical>
				return pdPASS;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	e069      	b.n	800cb40 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d103      	bne.n	800ca7a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ca72:	f7fe ffa9 	bl	800b9c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ca76:	2300      	movs	r3, #0
 800ca78:	e062      	b.n	800cb40 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ca7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d106      	bne.n	800ca8e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca80:	f107 0310 	add.w	r3, r7, #16
 800ca84:	4618      	mov	r0, r3
 800ca86:	f001 f871 	bl	800db6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ca8e:	f7fe ff9b 	bl	800b9c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ca92:	f000 fdb3 	bl	800d5fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca96:	f7fe ff69 	bl	800b96c <vPortEnterCritical>
 800ca9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800caa0:	b25b      	sxtb	r3, r3
 800caa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800caa6:	d103      	bne.n	800cab0 <xQueueReceive+0x11c>
 800caa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caaa:	2200      	movs	r2, #0
 800caac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cab6:	b25b      	sxtb	r3, r3
 800cab8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cabc:	d103      	bne.n	800cac6 <xQueueReceive+0x132>
 800cabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac0:	2200      	movs	r2, #0
 800cac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cac6:	f7fe ff7f 	bl	800b9c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800caca:	1d3a      	adds	r2, r7, #4
 800cacc:	f107 0310 	add.w	r3, r7, #16
 800cad0:	4611      	mov	r1, r2
 800cad2:	4618      	mov	r0, r3
 800cad4:	f001 f860 	bl	800db98 <xTaskCheckForTimeOut>
 800cad8:	4603      	mov	r3, r0
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d123      	bne.n	800cb26 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cade:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cae0:	f000 fad5 	bl	800d08e <prvIsQueueEmpty>
 800cae4:	4603      	mov	r3, r0
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d017      	beq.n	800cb1a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800caea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caec:	3324      	adds	r3, #36	; 0x24
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	4611      	mov	r1, r2
 800caf2:	4618      	mov	r0, r3
 800caf4:	f000 ff88 	bl	800da08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800caf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cafa:	f000 fa76 	bl	800cfea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cafe:	f000 fdc3 	bl	800d688 <xTaskResumeAll>
 800cb02:	4603      	mov	r3, r0
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d189      	bne.n	800ca1c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800cb08:	4b0f      	ldr	r3, [pc, #60]	; (800cb48 <xQueueReceive+0x1b4>)
 800cb0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb0e:	601a      	str	r2, [r3, #0]
 800cb10:	f3bf 8f4f 	dsb	sy
 800cb14:	f3bf 8f6f 	isb	sy
 800cb18:	e780      	b.n	800ca1c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cb1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb1c:	f000 fa65 	bl	800cfea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cb20:	f000 fdb2 	bl	800d688 <xTaskResumeAll>
 800cb24:	e77a      	b.n	800ca1c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cb26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb28:	f000 fa5f 	bl	800cfea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cb2c:	f000 fdac 	bl	800d688 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb32:	f000 faac 	bl	800d08e <prvIsQueueEmpty>
 800cb36:	4603      	mov	r3, r0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	f43f af6f 	beq.w	800ca1c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cb3e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3730      	adds	r7, #48	; 0x30
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	e000ed04 	.word	0xe000ed04

0800cb4c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b08e      	sub	sp, #56	; 0x38
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cb56:	2300      	movs	r3, #0
 800cb58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d109      	bne.n	800cb7c <xQueueSemaphoreTake+0x30>
 800cb68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb6c:	f383 8811 	msr	BASEPRI, r3
 800cb70:	f3bf 8f6f 	isb	sy
 800cb74:	f3bf 8f4f 	dsb	sy
 800cb78:	623b      	str	r3, [r7, #32]
 800cb7a:	e7fe      	b.n	800cb7a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cb7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d009      	beq.n	800cb98 <xQueueSemaphoreTake+0x4c>
 800cb84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb88:	f383 8811 	msr	BASEPRI, r3
 800cb8c:	f3bf 8f6f 	isb	sy
 800cb90:	f3bf 8f4f 	dsb	sy
 800cb94:	61fb      	str	r3, [r7, #28]
 800cb96:	e7fe      	b.n	800cb96 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb98:	f001 f972 	bl	800de80 <xTaskGetSchedulerState>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d102      	bne.n	800cba8 <xQueueSemaphoreTake+0x5c>
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d101      	bne.n	800cbac <xQueueSemaphoreTake+0x60>
 800cba8:	2301      	movs	r3, #1
 800cbaa:	e000      	b.n	800cbae <xQueueSemaphoreTake+0x62>
 800cbac:	2300      	movs	r3, #0
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d109      	bne.n	800cbc6 <xQueueSemaphoreTake+0x7a>
 800cbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb6:	f383 8811 	msr	BASEPRI, r3
 800cbba:	f3bf 8f6f 	isb	sy
 800cbbe:	f3bf 8f4f 	dsb	sy
 800cbc2:	61bb      	str	r3, [r7, #24]
 800cbc4:	e7fe      	b.n	800cbc4 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cbc6:	f7fe fed1 	bl	800b96c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cbca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbce:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d024      	beq.n	800cc20 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd8:	1e5a      	subs	r2, r3, #1
 800cbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbdc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d104      	bne.n	800cbf0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cbe6:	f001 fabd 	bl	800e164 <pvTaskIncrementMutexHeldCount>
 800cbea:	4602      	mov	r2, r0
 800cbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbee:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf2:	691b      	ldr	r3, [r3, #16]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d00f      	beq.n	800cc18 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbfa:	3310      	adds	r3, #16
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f000 ff51 	bl	800daa4 <xTaskRemoveFromEventList>
 800cc02:	4603      	mov	r3, r0
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d007      	beq.n	800cc18 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cc08:	4b53      	ldr	r3, [pc, #332]	; (800cd58 <xQueueSemaphoreTake+0x20c>)
 800cc0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc0e:	601a      	str	r2, [r3, #0]
 800cc10:	f3bf 8f4f 	dsb	sy
 800cc14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cc18:	f7fe fed6 	bl	800b9c8 <vPortExitCritical>
				return pdPASS;
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	e096      	b.n	800cd4e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d110      	bne.n	800cc48 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d009      	beq.n	800cc40 <xQueueSemaphoreTake+0xf4>
 800cc2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc30:	f383 8811 	msr	BASEPRI, r3
 800cc34:	f3bf 8f6f 	isb	sy
 800cc38:	f3bf 8f4f 	dsb	sy
 800cc3c:	617b      	str	r3, [r7, #20]
 800cc3e:	e7fe      	b.n	800cc3e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cc40:	f7fe fec2 	bl	800b9c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cc44:	2300      	movs	r3, #0
 800cc46:	e082      	b.n	800cd4e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d106      	bne.n	800cc5c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc4e:	f107 030c 	add.w	r3, r7, #12
 800cc52:	4618      	mov	r0, r3
 800cc54:	f000 ff8a 	bl	800db6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc58:	2301      	movs	r3, #1
 800cc5a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc5c:	f7fe feb4 	bl	800b9c8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc60:	f000 fccc 	bl	800d5fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc64:	f7fe fe82 	bl	800b96c <vPortEnterCritical>
 800cc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc6e:	b25b      	sxtb	r3, r3
 800cc70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc74:	d103      	bne.n	800cc7e <xQueueSemaphoreTake+0x132>
 800cc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc78:	2200      	movs	r2, #0
 800cc7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc84:	b25b      	sxtb	r3, r3
 800cc86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc8a:	d103      	bne.n	800cc94 <xQueueSemaphoreTake+0x148>
 800cc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cc94:	f7fe fe98 	bl	800b9c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc98:	463a      	mov	r2, r7
 800cc9a:	f107 030c 	add.w	r3, r7, #12
 800cc9e:	4611      	mov	r1, r2
 800cca0:	4618      	mov	r0, r3
 800cca2:	f000 ff79 	bl	800db98 <xTaskCheckForTimeOut>
 800cca6:	4603      	mov	r3, r0
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d132      	bne.n	800cd12 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ccac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccae:	f000 f9ee 	bl	800d08e <prvIsQueueEmpty>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d026      	beq.n	800cd06 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ccb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d109      	bne.n	800ccd4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800ccc0:	f7fe fe54 	bl	800b96c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ccc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc6:	689b      	ldr	r3, [r3, #8]
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f001 f8f7 	bl	800debc <xTaskPriorityInherit>
 800ccce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ccd0:	f7fe fe7a 	bl	800b9c8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ccd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd6:	3324      	adds	r3, #36	; 0x24
 800ccd8:	683a      	ldr	r2, [r7, #0]
 800ccda:	4611      	mov	r1, r2
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f000 fe93 	bl	800da08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cce2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cce4:	f000 f981 	bl	800cfea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cce8:	f000 fcce 	bl	800d688 <xTaskResumeAll>
 800ccec:	4603      	mov	r3, r0
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	f47f af69 	bne.w	800cbc6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800ccf4:	4b18      	ldr	r3, [pc, #96]	; (800cd58 <xQueueSemaphoreTake+0x20c>)
 800ccf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccfa:	601a      	str	r2, [r3, #0]
 800ccfc:	f3bf 8f4f 	dsb	sy
 800cd00:	f3bf 8f6f 	isb	sy
 800cd04:	e75f      	b.n	800cbc6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cd06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd08:	f000 f96f 	bl	800cfea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd0c:	f000 fcbc 	bl	800d688 <xTaskResumeAll>
 800cd10:	e759      	b.n	800cbc6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cd12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd14:	f000 f969 	bl	800cfea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd18:	f000 fcb6 	bl	800d688 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cd1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd1e:	f000 f9b6 	bl	800d08e <prvIsQueueEmpty>
 800cd22:	4603      	mov	r3, r0
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f43f af4e 	beq.w	800cbc6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d00d      	beq.n	800cd4c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800cd30:	f7fe fe1c 	bl	800b96c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cd34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd36:	f000 f8b0 	bl	800ce9a <prvGetDisinheritPriorityAfterTimeout>
 800cd3a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3e:	689b      	ldr	r3, [r3, #8]
 800cd40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd42:	4618      	mov	r0, r3
 800cd44:	f001 f98e 	bl	800e064 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cd48:	f7fe fe3e 	bl	800b9c8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cd4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3738      	adds	r7, #56	; 0x38
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}
 800cd56:	bf00      	nop
 800cd58:	e000ed04 	.word	0xe000ed04

0800cd5c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b08e      	sub	sp, #56	; 0x38
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	60f8      	str	r0, [r7, #12]
 800cd64:	60b9      	str	r1, [r7, #8]
 800cd66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d109      	bne.n	800cd86 <xQueueReceiveFromISR+0x2a>
 800cd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd76:	f383 8811 	msr	BASEPRI, r3
 800cd7a:	f3bf 8f6f 	isb	sy
 800cd7e:	f3bf 8f4f 	dsb	sy
 800cd82:	623b      	str	r3, [r7, #32]
 800cd84:	e7fe      	b.n	800cd84 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d103      	bne.n	800cd94 <xQueueReceiveFromISR+0x38>
 800cd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d101      	bne.n	800cd98 <xQueueReceiveFromISR+0x3c>
 800cd94:	2301      	movs	r3, #1
 800cd96:	e000      	b.n	800cd9a <xQueueReceiveFromISR+0x3e>
 800cd98:	2300      	movs	r3, #0
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d109      	bne.n	800cdb2 <xQueueReceiveFromISR+0x56>
 800cd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda2:	f383 8811 	msr	BASEPRI, r3
 800cda6:	f3bf 8f6f 	isb	sy
 800cdaa:	f3bf 8f4f 	dsb	sy
 800cdae:	61fb      	str	r3, [r7, #28]
 800cdb0:	e7fe      	b.n	800cdb0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cdb2:	f7fe feb7 	bl	800bb24 <vPortValidateInterruptPriority>
	__asm volatile
 800cdb6:	f3ef 8211 	mrs	r2, BASEPRI
 800cdba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdbe:	f383 8811 	msr	BASEPRI, r3
 800cdc2:	f3bf 8f6f 	isb	sy
 800cdc6:	f3bf 8f4f 	dsb	sy
 800cdca:	61ba      	str	r2, [r7, #24]
 800cdcc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cdce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cdd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdd6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cdd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d02f      	beq.n	800ce3e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cdde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cde4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cde8:	68b9      	ldr	r1, [r7, #8]
 800cdea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdec:	f000 f8d7 	bl	800cf9e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf2:	1e5a      	subs	r2, r3, #1
 800cdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cdf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cdfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce00:	d112      	bne.n	800ce28 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce04:	691b      	ldr	r3, [r3, #16]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d016      	beq.n	800ce38 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0c:	3310      	adds	r3, #16
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f000 fe48 	bl	800daa4 <xTaskRemoveFromEventList>
 800ce14:	4603      	mov	r3, r0
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d00e      	beq.n	800ce38 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d00b      	beq.n	800ce38 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2201      	movs	r2, #1
 800ce24:	601a      	str	r2, [r3, #0]
 800ce26:	e007      	b.n	800ce38 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ce28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce2c:	3301      	adds	r3, #1
 800ce2e:	b2db      	uxtb	r3, r3
 800ce30:	b25a      	sxtb	r2, r3
 800ce32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ce38:	2301      	movs	r3, #1
 800ce3a:	637b      	str	r3, [r7, #52]	; 0x34
 800ce3c:	e001      	b.n	800ce42 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	637b      	str	r3, [r7, #52]	; 0x34
 800ce42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce44:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3738      	adds	r7, #56	; 0x38
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}

0800ce56 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ce56:	b580      	push	{r7, lr}
 800ce58:	b084      	sub	sp, #16
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d109      	bne.n	800ce7c <vQueueDelete+0x26>
	__asm volatile
 800ce68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce6c:	f383 8811 	msr	BASEPRI, r3
 800ce70:	f3bf 8f6f 	isb	sy
 800ce74:	f3bf 8f4f 	dsb	sy
 800ce78:	60bb      	str	r3, [r7, #8]
 800ce7a:	e7fe      	b.n	800ce7a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ce7c:	68f8      	ldr	r0, [r7, #12]
 800ce7e:	f000 f95d 	bl	800d13c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d102      	bne.n	800ce92 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800ce8c:	68f8      	ldr	r0, [r7, #12]
 800ce8e:	f7fe ff49 	bl	800bd24 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ce92:	bf00      	nop
 800ce94:	3710      	adds	r7, #16
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}

0800ce9a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ce9a:	b480      	push	{r7}
 800ce9c:	b085      	sub	sp, #20
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d006      	beq.n	800ceb8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ceb4:	60fb      	str	r3, [r7, #12]
 800ceb6:	e001      	b.n	800cebc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cebc:	68fb      	ldr	r3, [r7, #12]
	}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3714      	adds	r7, #20
 800cec2:	46bd      	mov	sp, r7
 800cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec8:	4770      	bx	lr

0800ceca <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ceca:	b580      	push	{r7, lr}
 800cecc:	b086      	sub	sp, #24
 800cece:	af00      	add	r7, sp, #0
 800ced0:	60f8      	str	r0, [r7, #12]
 800ced2:	60b9      	str	r1, [r7, #8]
 800ced4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ced6:	2300      	movs	r3, #0
 800ced8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cede:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d10d      	bne.n	800cf04 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d14d      	bne.n	800cf8c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	689b      	ldr	r3, [r3, #8]
 800cef4:	4618      	mov	r0, r3
 800cef6:	f001 f849 	bl	800df8c <xTaskPriorityDisinherit>
 800cefa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2200      	movs	r2, #0
 800cf00:	609a      	str	r2, [r3, #8]
 800cf02:	e043      	b.n	800cf8c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d119      	bne.n	800cf3e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	6858      	ldr	r0, [r3, #4]
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf12:	461a      	mov	r2, r3
 800cf14:	68b9      	ldr	r1, [r7, #8]
 800cf16:	f001 ff25 	bl	800ed64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	685a      	ldr	r2, [r3, #4]
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf22:	441a      	add	r2, r3
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	685a      	ldr	r2, [r3, #4]
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	689b      	ldr	r3, [r3, #8]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d32b      	bcc.n	800cf8c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681a      	ldr	r2, [r3, #0]
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	605a      	str	r2, [r3, #4]
 800cf3c:	e026      	b.n	800cf8c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	68d8      	ldr	r0, [r3, #12]
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf46:	461a      	mov	r2, r3
 800cf48:	68b9      	ldr	r1, [r7, #8]
 800cf4a:	f001 ff0b 	bl	800ed64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	68da      	ldr	r2, [r3, #12]
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf56:	425b      	negs	r3, r3
 800cf58:	441a      	add	r2, r3
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	68da      	ldr	r2, [r3, #12]
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d207      	bcs.n	800cf7a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	689a      	ldr	r2, [r3, #8]
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf72:	425b      	negs	r3, r3
 800cf74:	441a      	add	r2, r3
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2b02      	cmp	r3, #2
 800cf7e:	d105      	bne.n	800cf8c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d002      	beq.n	800cf8c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	3b01      	subs	r3, #1
 800cf8a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	1c5a      	adds	r2, r3, #1
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cf94:	697b      	ldr	r3, [r7, #20]
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3718      	adds	r7, #24
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}

0800cf9e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cf9e:	b580      	push	{r7, lr}
 800cfa0:	b082      	sub	sp, #8
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	6078      	str	r0, [r7, #4]
 800cfa6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d018      	beq.n	800cfe2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	68da      	ldr	r2, [r3, #12]
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfb8:	441a      	add	r2, r3
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	68da      	ldr	r2, [r3, #12]
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	689b      	ldr	r3, [r3, #8]
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d303      	bcc.n	800cfd2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	68d9      	ldr	r1, [r3, #12]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfda:	461a      	mov	r2, r3
 800cfdc:	6838      	ldr	r0, [r7, #0]
 800cfde:	f001 fec1 	bl	800ed64 <memcpy>
	}
}
 800cfe2:	bf00      	nop
 800cfe4:	3708      	adds	r7, #8
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}

0800cfea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cfea:	b580      	push	{r7, lr}
 800cfec:	b084      	sub	sp, #16
 800cfee:	af00      	add	r7, sp, #0
 800cff0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cff2:	f7fe fcbb 	bl	800b96c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cffc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cffe:	e011      	b.n	800d024 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d004:	2b00      	cmp	r3, #0
 800d006:	d012      	beq.n	800d02e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	3324      	adds	r3, #36	; 0x24
 800d00c:	4618      	mov	r0, r3
 800d00e:	f000 fd49 	bl	800daa4 <xTaskRemoveFromEventList>
 800d012:	4603      	mov	r3, r0
 800d014:	2b00      	cmp	r3, #0
 800d016:	d001      	beq.n	800d01c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d018:	f000 fe1e 	bl	800dc58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d01c:	7bfb      	ldrb	r3, [r7, #15]
 800d01e:	3b01      	subs	r3, #1
 800d020:	b2db      	uxtb	r3, r3
 800d022:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	dce9      	bgt.n	800d000 <prvUnlockQueue+0x16>
 800d02c:	e000      	b.n	800d030 <prvUnlockQueue+0x46>
					break;
 800d02e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	22ff      	movs	r2, #255	; 0xff
 800d034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d038:	f7fe fcc6 	bl	800b9c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d03c:	f7fe fc96 	bl	800b96c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d046:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d048:	e011      	b.n	800d06e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	691b      	ldr	r3, [r3, #16]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d012      	beq.n	800d078 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	3310      	adds	r3, #16
 800d056:	4618      	mov	r0, r3
 800d058:	f000 fd24 	bl	800daa4 <xTaskRemoveFromEventList>
 800d05c:	4603      	mov	r3, r0
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d001      	beq.n	800d066 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d062:	f000 fdf9 	bl	800dc58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d066:	7bbb      	ldrb	r3, [r7, #14]
 800d068:	3b01      	subs	r3, #1
 800d06a:	b2db      	uxtb	r3, r3
 800d06c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d06e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d072:	2b00      	cmp	r3, #0
 800d074:	dce9      	bgt.n	800d04a <prvUnlockQueue+0x60>
 800d076:	e000      	b.n	800d07a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d078:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	22ff      	movs	r2, #255	; 0xff
 800d07e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d082:	f7fe fca1 	bl	800b9c8 <vPortExitCritical>
}
 800d086:	bf00      	nop
 800d088:	3710      	adds	r7, #16
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}

0800d08e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d08e:	b580      	push	{r7, lr}
 800d090:	b084      	sub	sp, #16
 800d092:	af00      	add	r7, sp, #0
 800d094:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d096:	f7fe fc69 	bl	800b96c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d102      	bne.n	800d0a8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	60fb      	str	r3, [r7, #12]
 800d0a6:	e001      	b.n	800d0ac <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d0ac:	f7fe fc8c 	bl	800b9c8 <vPortExitCritical>

	return xReturn;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3710      	adds	r7, #16
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}

0800d0ba <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d0ba:	b580      	push	{r7, lr}
 800d0bc:	b084      	sub	sp, #16
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d0c2:	f7fe fc53 	bl	800b96c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d102      	bne.n	800d0d8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	60fb      	str	r3, [r7, #12]
 800d0d6:	e001      	b.n	800d0dc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d0dc:	f7fe fc74 	bl	800b9c8 <vPortExitCritical>

	return xReturn;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3710      	adds	r7, #16
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}
	...

0800d0ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b085      	sub	sp, #20
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	60fb      	str	r3, [r7, #12]
 800d0fa:	e014      	b.n	800d126 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d0fc:	4a0e      	ldr	r2, [pc, #56]	; (800d138 <vQueueAddToRegistry+0x4c>)
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d10b      	bne.n	800d120 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d108:	490b      	ldr	r1, [pc, #44]	; (800d138 <vQueueAddToRegistry+0x4c>)
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	683a      	ldr	r2, [r7, #0]
 800d10e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d112:	4a09      	ldr	r2, [pc, #36]	; (800d138 <vQueueAddToRegistry+0x4c>)
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	00db      	lsls	r3, r3, #3
 800d118:	4413      	add	r3, r2
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d11e:	e005      	b.n	800d12c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	3301      	adds	r3, #1
 800d124:	60fb      	str	r3, [r7, #12]
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	2b07      	cmp	r3, #7
 800d12a:	d9e7      	bls.n	800d0fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d12c:	bf00      	nop
 800d12e:	3714      	adds	r7, #20
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr
 800d138:	20003b58 	.word	0x20003b58

0800d13c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d13c:	b480      	push	{r7}
 800d13e:	b085      	sub	sp, #20
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d144:	2300      	movs	r3, #0
 800d146:	60fb      	str	r3, [r7, #12]
 800d148:	e016      	b.n	800d178 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d14a:	4a10      	ldr	r2, [pc, #64]	; (800d18c <vQueueUnregisterQueue+0x50>)
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	00db      	lsls	r3, r3, #3
 800d150:	4413      	add	r3, r2
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	687a      	ldr	r2, [r7, #4]
 800d156:	429a      	cmp	r2, r3
 800d158:	d10b      	bne.n	800d172 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d15a:	4a0c      	ldr	r2, [pc, #48]	; (800d18c <vQueueUnregisterQueue+0x50>)
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	2100      	movs	r1, #0
 800d160:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d164:	4a09      	ldr	r2, [pc, #36]	; (800d18c <vQueueUnregisterQueue+0x50>)
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	00db      	lsls	r3, r3, #3
 800d16a:	4413      	add	r3, r2
 800d16c:	2200      	movs	r2, #0
 800d16e:	605a      	str	r2, [r3, #4]
				break;
 800d170:	e005      	b.n	800d17e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	3301      	adds	r3, #1
 800d176:	60fb      	str	r3, [r7, #12]
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2b07      	cmp	r3, #7
 800d17c:	d9e5      	bls.n	800d14a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d17e:	bf00      	nop
 800d180:	3714      	adds	r7, #20
 800d182:	46bd      	mov	sp, r7
 800d184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d188:	4770      	bx	lr
 800d18a:	bf00      	nop
 800d18c:	20003b58 	.word	0x20003b58

0800d190 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d190:	b580      	push	{r7, lr}
 800d192:	b086      	sub	sp, #24
 800d194:	af00      	add	r7, sp, #0
 800d196:	60f8      	str	r0, [r7, #12]
 800d198:	60b9      	str	r1, [r7, #8]
 800d19a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d1a0:	f7fe fbe4 	bl	800b96c <vPortEnterCritical>
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1aa:	b25b      	sxtb	r3, r3
 800d1ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1b0:	d103      	bne.n	800d1ba <vQueueWaitForMessageRestricted+0x2a>
 800d1b2:	697b      	ldr	r3, [r7, #20]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1c0:	b25b      	sxtb	r3, r3
 800d1c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1c6:	d103      	bne.n	800d1d0 <vQueueWaitForMessageRestricted+0x40>
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1d0:	f7fe fbfa 	bl	800b9c8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d106      	bne.n	800d1ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	3324      	adds	r3, #36	; 0x24
 800d1e0:	687a      	ldr	r2, [r7, #4]
 800d1e2:	68b9      	ldr	r1, [r7, #8]
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f000 fc33 	bl	800da50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d1ea:	6978      	ldr	r0, [r7, #20]
 800d1ec:	f7ff fefd 	bl	800cfea <prvUnlockQueue>
	}
 800d1f0:	bf00      	nop
 800d1f2:	3718      	adds	r7, #24
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}

0800d1f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b08e      	sub	sp, #56	; 0x38
 800d1fc:	af04      	add	r7, sp, #16
 800d1fe:	60f8      	str	r0, [r7, #12]
 800d200:	60b9      	str	r1, [r7, #8]
 800d202:	607a      	str	r2, [r7, #4]
 800d204:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d109      	bne.n	800d220 <xTaskCreateStatic+0x28>
 800d20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d210:	f383 8811 	msr	BASEPRI, r3
 800d214:	f3bf 8f6f 	isb	sy
 800d218:	f3bf 8f4f 	dsb	sy
 800d21c:	623b      	str	r3, [r7, #32]
 800d21e:	e7fe      	b.n	800d21e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800d220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d222:	2b00      	cmp	r3, #0
 800d224:	d109      	bne.n	800d23a <xTaskCreateStatic+0x42>
 800d226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d22a:	f383 8811 	msr	BASEPRI, r3
 800d22e:	f3bf 8f6f 	isb	sy
 800d232:	f3bf 8f4f 	dsb	sy
 800d236:	61fb      	str	r3, [r7, #28]
 800d238:	e7fe      	b.n	800d238 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d23a:	235c      	movs	r3, #92	; 0x5c
 800d23c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	2b5c      	cmp	r3, #92	; 0x5c
 800d242:	d009      	beq.n	800d258 <xTaskCreateStatic+0x60>
 800d244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d248:	f383 8811 	msr	BASEPRI, r3
 800d24c:	f3bf 8f6f 	isb	sy
 800d250:	f3bf 8f4f 	dsb	sy
 800d254:	61bb      	str	r3, [r7, #24]
 800d256:	e7fe      	b.n	800d256 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d258:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d01e      	beq.n	800d29e <xTaskCreateStatic+0xa6>
 800d260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d262:	2b00      	cmp	r3, #0
 800d264:	d01b      	beq.n	800d29e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d268:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d26c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d26e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d272:	2202      	movs	r2, #2
 800d274:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d278:	2300      	movs	r3, #0
 800d27a:	9303      	str	r3, [sp, #12]
 800d27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27e:	9302      	str	r3, [sp, #8]
 800d280:	f107 0314 	add.w	r3, r7, #20
 800d284:	9301      	str	r3, [sp, #4]
 800d286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d288:	9300      	str	r3, [sp, #0]
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	687a      	ldr	r2, [r7, #4]
 800d28e:	68b9      	ldr	r1, [r7, #8]
 800d290:	68f8      	ldr	r0, [r7, #12]
 800d292:	f000 f850 	bl	800d336 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d296:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d298:	f000 f8dc 	bl	800d454 <prvAddNewTaskToReadyList>
 800d29c:	e001      	b.n	800d2a2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d2a2:	697b      	ldr	r3, [r7, #20]
	}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	3728      	adds	r7, #40	; 0x28
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}

0800d2ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b08c      	sub	sp, #48	; 0x30
 800d2b0:	af04      	add	r7, sp, #16
 800d2b2:	60f8      	str	r0, [r7, #12]
 800d2b4:	60b9      	str	r1, [r7, #8]
 800d2b6:	603b      	str	r3, [r7, #0]
 800d2b8:	4613      	mov	r3, r2
 800d2ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d2bc:	88fb      	ldrh	r3, [r7, #6]
 800d2be:	009b      	lsls	r3, r3, #2
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f7fe fc6d 	bl	800bba0 <pvPortMalloc>
 800d2c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d00e      	beq.n	800d2ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d2ce:	205c      	movs	r0, #92	; 0x5c
 800d2d0:	f7fe fc66 	bl	800bba0 <pvPortMalloc>
 800d2d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d2d6:	69fb      	ldr	r3, [r7, #28]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d003      	beq.n	800d2e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d2dc:	69fb      	ldr	r3, [r7, #28]
 800d2de:	697a      	ldr	r2, [r7, #20]
 800d2e0:	631a      	str	r2, [r3, #48]	; 0x30
 800d2e2:	e005      	b.n	800d2f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d2e4:	6978      	ldr	r0, [r7, #20]
 800d2e6:	f7fe fd1d 	bl	800bd24 <vPortFree>
 800d2ea:	e001      	b.n	800d2f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d2f0:	69fb      	ldr	r3, [r7, #28]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d017      	beq.n	800d326 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d2f6:	69fb      	ldr	r3, [r7, #28]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d2fe:	88fa      	ldrh	r2, [r7, #6]
 800d300:	2300      	movs	r3, #0
 800d302:	9303      	str	r3, [sp, #12]
 800d304:	69fb      	ldr	r3, [r7, #28]
 800d306:	9302      	str	r3, [sp, #8]
 800d308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30a:	9301      	str	r3, [sp, #4]
 800d30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30e:	9300      	str	r3, [sp, #0]
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	68b9      	ldr	r1, [r7, #8]
 800d314:	68f8      	ldr	r0, [r7, #12]
 800d316:	f000 f80e 	bl	800d336 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d31a:	69f8      	ldr	r0, [r7, #28]
 800d31c:	f000 f89a 	bl	800d454 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d320:	2301      	movs	r3, #1
 800d322:	61bb      	str	r3, [r7, #24]
 800d324:	e002      	b.n	800d32c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d32a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d32c:	69bb      	ldr	r3, [r7, #24]
	}
 800d32e:	4618      	mov	r0, r3
 800d330:	3720      	adds	r7, #32
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}

0800d336 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d336:	b580      	push	{r7, lr}
 800d338:	b088      	sub	sp, #32
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	60f8      	str	r0, [r7, #12]
 800d33e:	60b9      	str	r1, [r7, #8]
 800d340:	607a      	str	r2, [r7, #4]
 800d342:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d346:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	009b      	lsls	r3, r3, #2
 800d34c:	461a      	mov	r2, r3
 800d34e:	21a5      	movs	r1, #165	; 0xa5
 800d350:	f001 fd13 	bl	800ed7a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d35e:	3b01      	subs	r3, #1
 800d360:	009b      	lsls	r3, r3, #2
 800d362:	4413      	add	r3, r2
 800d364:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d366:	69bb      	ldr	r3, [r7, #24]
 800d368:	f023 0307 	bic.w	r3, r3, #7
 800d36c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d36e:	69bb      	ldr	r3, [r7, #24]
 800d370:	f003 0307 	and.w	r3, r3, #7
 800d374:	2b00      	cmp	r3, #0
 800d376:	d009      	beq.n	800d38c <prvInitialiseNewTask+0x56>
 800d378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d37c:	f383 8811 	msr	BASEPRI, r3
 800d380:	f3bf 8f6f 	isb	sy
 800d384:	f3bf 8f4f 	dsb	sy
 800d388:	617b      	str	r3, [r7, #20]
 800d38a:	e7fe      	b.n	800d38a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d01f      	beq.n	800d3d2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d392:	2300      	movs	r3, #0
 800d394:	61fb      	str	r3, [r7, #28]
 800d396:	e012      	b.n	800d3be <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d398:	68ba      	ldr	r2, [r7, #8]
 800d39a:	69fb      	ldr	r3, [r7, #28]
 800d39c:	4413      	add	r3, r2
 800d39e:	7819      	ldrb	r1, [r3, #0]
 800d3a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3a2:	69fb      	ldr	r3, [r7, #28]
 800d3a4:	4413      	add	r3, r2
 800d3a6:	3334      	adds	r3, #52	; 0x34
 800d3a8:	460a      	mov	r2, r1
 800d3aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d3ac:	68ba      	ldr	r2, [r7, #8]
 800d3ae:	69fb      	ldr	r3, [r7, #28]
 800d3b0:	4413      	add	r3, r2
 800d3b2:	781b      	ldrb	r3, [r3, #0]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d006      	beq.n	800d3c6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d3b8:	69fb      	ldr	r3, [r7, #28]
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	61fb      	str	r3, [r7, #28]
 800d3be:	69fb      	ldr	r3, [r7, #28]
 800d3c0:	2b0f      	cmp	r3, #15
 800d3c2:	d9e9      	bls.n	800d398 <prvInitialiseNewTask+0x62>
 800d3c4:	e000      	b.n	800d3c8 <prvInitialiseNewTask+0x92>
			{
				break;
 800d3c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d3d0:	e003      	b.n	800d3da <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3dc:	2b37      	cmp	r3, #55	; 0x37
 800d3de:	d901      	bls.n	800d3e4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d3e0:	2337      	movs	r3, #55	; 0x37
 800d3e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f8:	3304      	adds	r3, #4
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7fe fdc6 	bl	800bf8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d402:	3318      	adds	r3, #24
 800d404:	4618      	mov	r0, r3
 800d406:	f7fe fdc1 	bl	800bf8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d40c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d40e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d412:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d418:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d41c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d41e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d422:	2200      	movs	r2, #0
 800d424:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d428:	2200      	movs	r2, #0
 800d42a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d42e:	683a      	ldr	r2, [r7, #0]
 800d430:	68f9      	ldr	r1, [r7, #12]
 800d432:	69b8      	ldr	r0, [r7, #24]
 800d434:	f7fe f976 	bl	800b724 <pxPortInitialiseStack>
 800d438:	4602      	mov	r2, r0
 800d43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d440:	2b00      	cmp	r3, #0
 800d442:	d002      	beq.n	800d44a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d448:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d44a:	bf00      	nop
 800d44c:	3720      	adds	r7, #32
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}
	...

0800d454 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b082      	sub	sp, #8
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d45c:	f7fe fa86 	bl	800b96c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d460:	4b2d      	ldr	r3, [pc, #180]	; (800d518 <prvAddNewTaskToReadyList+0xc4>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	3301      	adds	r3, #1
 800d466:	4a2c      	ldr	r2, [pc, #176]	; (800d518 <prvAddNewTaskToReadyList+0xc4>)
 800d468:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d46a:	4b2c      	ldr	r3, [pc, #176]	; (800d51c <prvAddNewTaskToReadyList+0xc8>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d109      	bne.n	800d486 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d472:	4a2a      	ldr	r2, [pc, #168]	; (800d51c <prvAddNewTaskToReadyList+0xc8>)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d478:	4b27      	ldr	r3, [pc, #156]	; (800d518 <prvAddNewTaskToReadyList+0xc4>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	d110      	bne.n	800d4a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d480:	f000 fc34 	bl	800dcec <prvInitialiseTaskLists>
 800d484:	e00d      	b.n	800d4a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d486:	4b26      	ldr	r3, [pc, #152]	; (800d520 <prvAddNewTaskToReadyList+0xcc>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d109      	bne.n	800d4a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d48e:	4b23      	ldr	r3, [pc, #140]	; (800d51c <prvAddNewTaskToReadyList+0xc8>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d498:	429a      	cmp	r2, r3
 800d49a:	d802      	bhi.n	800d4a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d49c:	4a1f      	ldr	r2, [pc, #124]	; (800d51c <prvAddNewTaskToReadyList+0xc8>)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d4a2:	4b20      	ldr	r3, [pc, #128]	; (800d524 <prvAddNewTaskToReadyList+0xd0>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	4a1e      	ldr	r2, [pc, #120]	; (800d524 <prvAddNewTaskToReadyList+0xd0>)
 800d4aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d4ac:	4b1d      	ldr	r3, [pc, #116]	; (800d524 <prvAddNewTaskToReadyList+0xd0>)
 800d4ae:	681a      	ldr	r2, [r3, #0]
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4b8:	4b1b      	ldr	r3, [pc, #108]	; (800d528 <prvAddNewTaskToReadyList+0xd4>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d903      	bls.n	800d4c8 <prvAddNewTaskToReadyList+0x74>
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c4:	4a18      	ldr	r2, [pc, #96]	; (800d528 <prvAddNewTaskToReadyList+0xd4>)
 800d4c6:	6013      	str	r3, [r2, #0]
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4cc:	4613      	mov	r3, r2
 800d4ce:	009b      	lsls	r3, r3, #2
 800d4d0:	4413      	add	r3, r2
 800d4d2:	009b      	lsls	r3, r3, #2
 800d4d4:	4a15      	ldr	r2, [pc, #84]	; (800d52c <prvAddNewTaskToReadyList+0xd8>)
 800d4d6:	441a      	add	r2, r3
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	3304      	adds	r3, #4
 800d4dc:	4619      	mov	r1, r3
 800d4de:	4610      	mov	r0, r2
 800d4e0:	f7fe fd61 	bl	800bfa6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d4e4:	f7fe fa70 	bl	800b9c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d4e8:	4b0d      	ldr	r3, [pc, #52]	; (800d520 <prvAddNewTaskToReadyList+0xcc>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d00e      	beq.n	800d50e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d4f0:	4b0a      	ldr	r3, [pc, #40]	; (800d51c <prvAddNewTaskToReadyList+0xc8>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d207      	bcs.n	800d50e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d4fe:	4b0c      	ldr	r3, [pc, #48]	; (800d530 <prvAddNewTaskToReadyList+0xdc>)
 800d500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d504:	601a      	str	r2, [r3, #0]
 800d506:	f3bf 8f4f 	dsb	sy
 800d50a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d50e:	bf00      	nop
 800d510:	3708      	adds	r7, #8
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}
 800d516:	bf00      	nop
 800d518:	20003770 	.word	0x20003770
 800d51c:	2000329c 	.word	0x2000329c
 800d520:	2000377c 	.word	0x2000377c
 800d524:	2000378c 	.word	0x2000378c
 800d528:	20003778 	.word	0x20003778
 800d52c:	200032a0 	.word	0x200032a0
 800d530:	e000ed04 	.word	0xe000ed04

0800d534 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b08a      	sub	sp, #40	; 0x28
 800d538:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d53a:	2300      	movs	r3, #0
 800d53c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d53e:	2300      	movs	r3, #0
 800d540:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d542:	463a      	mov	r2, r7
 800d544:	1d39      	adds	r1, r7, #4
 800d546:	f107 0308 	add.w	r3, r7, #8
 800d54a:	4618      	mov	r0, r3
 800d54c:	f7fe f8b6 	bl	800b6bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d550:	6839      	ldr	r1, [r7, #0]
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	68ba      	ldr	r2, [r7, #8]
 800d556:	9202      	str	r2, [sp, #8]
 800d558:	9301      	str	r3, [sp, #4]
 800d55a:	2300      	movs	r3, #0
 800d55c:	9300      	str	r3, [sp, #0]
 800d55e:	2300      	movs	r3, #0
 800d560:	460a      	mov	r2, r1
 800d562:	4920      	ldr	r1, [pc, #128]	; (800d5e4 <vTaskStartScheduler+0xb0>)
 800d564:	4820      	ldr	r0, [pc, #128]	; (800d5e8 <vTaskStartScheduler+0xb4>)
 800d566:	f7ff fe47 	bl	800d1f8 <xTaskCreateStatic>
 800d56a:	4602      	mov	r2, r0
 800d56c:	4b1f      	ldr	r3, [pc, #124]	; (800d5ec <vTaskStartScheduler+0xb8>)
 800d56e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d570:	4b1e      	ldr	r3, [pc, #120]	; (800d5ec <vTaskStartScheduler+0xb8>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d002      	beq.n	800d57e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d578:	2301      	movs	r3, #1
 800d57a:	617b      	str	r3, [r7, #20]
 800d57c:	e001      	b.n	800d582 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d57e:	2300      	movs	r3, #0
 800d580:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	2b01      	cmp	r3, #1
 800d586:	d102      	bne.n	800d58e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d588:	f001 f83c 	bl	800e604 <xTimerCreateTimerTask>
 800d58c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	2b01      	cmp	r3, #1
 800d592:	d115      	bne.n	800d5c0 <vTaskStartScheduler+0x8c>
 800d594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d598:	f383 8811 	msr	BASEPRI, r3
 800d59c:	f3bf 8f6f 	isb	sy
 800d5a0:	f3bf 8f4f 	dsb	sy
 800d5a4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d5a6:	4b12      	ldr	r3, [pc, #72]	; (800d5f0 <vTaskStartScheduler+0xbc>)
 800d5a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d5ae:	4b11      	ldr	r3, [pc, #68]	; (800d5f4 <vTaskStartScheduler+0xc0>)
 800d5b0:	2201      	movs	r2, #1
 800d5b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d5b4:	4b10      	ldr	r3, [pc, #64]	; (800d5f8 <vTaskStartScheduler+0xc4>)
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d5ba:	f7fe f939 	bl	800b830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d5be:	e00d      	b.n	800d5dc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d5c6:	d109      	bne.n	800d5dc <vTaskStartScheduler+0xa8>
 800d5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5cc:	f383 8811 	msr	BASEPRI, r3
 800d5d0:	f3bf 8f6f 	isb	sy
 800d5d4:	f3bf 8f4f 	dsb	sy
 800d5d8:	60fb      	str	r3, [r7, #12]
 800d5da:	e7fe      	b.n	800d5da <vTaskStartScheduler+0xa6>
}
 800d5dc:	bf00      	nop
 800d5de:	3718      	adds	r7, #24
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}
 800d5e4:	08011ca8 	.word	0x08011ca8
 800d5e8:	0800dc71 	.word	0x0800dc71
 800d5ec:	20003794 	.word	0x20003794
 800d5f0:	20003790 	.word	0x20003790
 800d5f4:	2000377c 	.word	0x2000377c
 800d5f8:	20003774 	.word	0x20003774

0800d5fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d600:	4b04      	ldr	r3, [pc, #16]	; (800d614 <vTaskSuspendAll+0x18>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	3301      	adds	r3, #1
 800d606:	4a03      	ldr	r2, [pc, #12]	; (800d614 <vTaskSuspendAll+0x18>)
 800d608:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d60a:	bf00      	nop
 800d60c:	46bd      	mov	sp, r7
 800d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d612:	4770      	bx	lr
 800d614:	20003798 	.word	0x20003798

0800d618 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800d618:	b480      	push	{r7}
 800d61a:	b083      	sub	sp, #12
 800d61c:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800d61e:	2300      	movs	r3, #0
 800d620:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800d622:	4b14      	ldr	r3, [pc, #80]	; (800d674 <prvGetExpectedIdleTime+0x5c>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d001      	beq.n	800d62e <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800d62a:	2301      	movs	r3, #1
 800d62c:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800d62e:	4b12      	ldr	r3, [pc, #72]	; (800d678 <prvGetExpectedIdleTime+0x60>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d634:	2b00      	cmp	r3, #0
 800d636:	d002      	beq.n	800d63e <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800d638:	2300      	movs	r3, #0
 800d63a:	607b      	str	r3, [r7, #4]
 800d63c:	e012      	b.n	800d664 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800d63e:	4b0f      	ldr	r3, [pc, #60]	; (800d67c <prvGetExpectedIdleTime+0x64>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	2b01      	cmp	r3, #1
 800d644:	d902      	bls.n	800d64c <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800d646:	2300      	movs	r3, #0
 800d648:	607b      	str	r3, [r7, #4]
 800d64a:	e00b      	b.n	800d664 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d002      	beq.n	800d658 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800d652:	2300      	movs	r3, #0
 800d654:	607b      	str	r3, [r7, #4]
 800d656:	e005      	b.n	800d664 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800d658:	4b09      	ldr	r3, [pc, #36]	; (800d680 <prvGetExpectedIdleTime+0x68>)
 800d65a:	681a      	ldr	r2, [r3, #0]
 800d65c:	4b09      	ldr	r3, [pc, #36]	; (800d684 <prvGetExpectedIdleTime+0x6c>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	1ad3      	subs	r3, r2, r3
 800d662:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800d664:	687b      	ldr	r3, [r7, #4]
	}
 800d666:	4618      	mov	r0, r3
 800d668:	370c      	adds	r7, #12
 800d66a:	46bd      	mov	sp, r7
 800d66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d670:	4770      	bx	lr
 800d672:	bf00      	nop
 800d674:	20003778 	.word	0x20003778
 800d678:	2000329c 	.word	0x2000329c
 800d67c:	200032a0 	.word	0x200032a0
 800d680:	20003790 	.word	0x20003790
 800d684:	20003774 	.word	0x20003774

0800d688 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b084      	sub	sp, #16
 800d68c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d68e:	2300      	movs	r3, #0
 800d690:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d692:	2300      	movs	r3, #0
 800d694:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d696:	4b41      	ldr	r3, [pc, #260]	; (800d79c <xTaskResumeAll+0x114>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d109      	bne.n	800d6b2 <xTaskResumeAll+0x2a>
 800d69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a2:	f383 8811 	msr	BASEPRI, r3
 800d6a6:	f3bf 8f6f 	isb	sy
 800d6aa:	f3bf 8f4f 	dsb	sy
 800d6ae:	603b      	str	r3, [r7, #0]
 800d6b0:	e7fe      	b.n	800d6b0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d6b2:	f7fe f95b 	bl	800b96c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d6b6:	4b39      	ldr	r3, [pc, #228]	; (800d79c <xTaskResumeAll+0x114>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	3b01      	subs	r3, #1
 800d6bc:	4a37      	ldr	r2, [pc, #220]	; (800d79c <xTaskResumeAll+0x114>)
 800d6be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d6c0:	4b36      	ldr	r3, [pc, #216]	; (800d79c <xTaskResumeAll+0x114>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d162      	bne.n	800d78e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d6c8:	4b35      	ldr	r3, [pc, #212]	; (800d7a0 <xTaskResumeAll+0x118>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d05e      	beq.n	800d78e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d6d0:	e02f      	b.n	800d732 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6d2:	4b34      	ldr	r3, [pc, #208]	; (800d7a4 <xTaskResumeAll+0x11c>)
 800d6d4:	68db      	ldr	r3, [r3, #12]
 800d6d6:	68db      	ldr	r3, [r3, #12]
 800d6d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	3318      	adds	r3, #24
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7fe fcbe 	bl	800c060 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	3304      	adds	r3, #4
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f7fe fcb9 	bl	800c060 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6f2:	4b2d      	ldr	r3, [pc, #180]	; (800d7a8 <xTaskResumeAll+0x120>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d903      	bls.n	800d702 <xTaskResumeAll+0x7a>
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6fe:	4a2a      	ldr	r2, [pc, #168]	; (800d7a8 <xTaskResumeAll+0x120>)
 800d700:	6013      	str	r3, [r2, #0]
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d706:	4613      	mov	r3, r2
 800d708:	009b      	lsls	r3, r3, #2
 800d70a:	4413      	add	r3, r2
 800d70c:	009b      	lsls	r3, r3, #2
 800d70e:	4a27      	ldr	r2, [pc, #156]	; (800d7ac <xTaskResumeAll+0x124>)
 800d710:	441a      	add	r2, r3
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	3304      	adds	r3, #4
 800d716:	4619      	mov	r1, r3
 800d718:	4610      	mov	r0, r2
 800d71a:	f7fe fc44 	bl	800bfa6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d722:	4b23      	ldr	r3, [pc, #140]	; (800d7b0 <xTaskResumeAll+0x128>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d728:	429a      	cmp	r2, r3
 800d72a:	d302      	bcc.n	800d732 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d72c:	4b21      	ldr	r3, [pc, #132]	; (800d7b4 <xTaskResumeAll+0x12c>)
 800d72e:	2201      	movs	r2, #1
 800d730:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d732:	4b1c      	ldr	r3, [pc, #112]	; (800d7a4 <xTaskResumeAll+0x11c>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d1cb      	bne.n	800d6d2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d001      	beq.n	800d744 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d740:	f000 fb6e 	bl	800de20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d744:	4b1c      	ldr	r3, [pc, #112]	; (800d7b8 <xTaskResumeAll+0x130>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d010      	beq.n	800d772 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d750:	f000 f846 	bl	800d7e0 <xTaskIncrementTick>
 800d754:	4603      	mov	r3, r0
 800d756:	2b00      	cmp	r3, #0
 800d758:	d002      	beq.n	800d760 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d75a:	4b16      	ldr	r3, [pc, #88]	; (800d7b4 <xTaskResumeAll+0x12c>)
 800d75c:	2201      	movs	r2, #1
 800d75e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	3b01      	subs	r3, #1
 800d764:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d1f1      	bne.n	800d750 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800d76c:	4b12      	ldr	r3, [pc, #72]	; (800d7b8 <xTaskResumeAll+0x130>)
 800d76e:	2200      	movs	r2, #0
 800d770:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d772:	4b10      	ldr	r3, [pc, #64]	; (800d7b4 <xTaskResumeAll+0x12c>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d009      	beq.n	800d78e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d77a:	2301      	movs	r3, #1
 800d77c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d77e:	4b0f      	ldr	r3, [pc, #60]	; (800d7bc <xTaskResumeAll+0x134>)
 800d780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d784:	601a      	str	r2, [r3, #0]
 800d786:	f3bf 8f4f 	dsb	sy
 800d78a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d78e:	f7fe f91b 	bl	800b9c8 <vPortExitCritical>

	return xAlreadyYielded;
 800d792:	68bb      	ldr	r3, [r7, #8]
}
 800d794:	4618      	mov	r0, r3
 800d796:	3710      	adds	r7, #16
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}
 800d79c:	20003798 	.word	0x20003798
 800d7a0:	20003770 	.word	0x20003770
 800d7a4:	20003730 	.word	0x20003730
 800d7a8:	20003778 	.word	0x20003778
 800d7ac:	200032a0 	.word	0x200032a0
 800d7b0:	2000329c 	.word	0x2000329c
 800d7b4:	20003784 	.word	0x20003784
 800d7b8:	20003780 	.word	0x20003780
 800d7bc:	e000ed04 	.word	0xe000ed04

0800d7c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b083      	sub	sp, #12
 800d7c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d7c6:	4b05      	ldr	r3, [pc, #20]	; (800d7dc <xTaskGetTickCount+0x1c>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d7cc:	687b      	ldr	r3, [r7, #4]
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	370c      	adds	r7, #12
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d8:	4770      	bx	lr
 800d7da:	bf00      	nop
 800d7dc:	20003774 	.word	0x20003774

0800d7e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b086      	sub	sp, #24
 800d7e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7ea:	4b4e      	ldr	r3, [pc, #312]	; (800d924 <xTaskIncrementTick+0x144>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	f040 8088 	bne.w	800d904 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d7f4:	4b4c      	ldr	r3, [pc, #304]	; (800d928 <xTaskIncrementTick+0x148>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	3301      	adds	r3, #1
 800d7fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d7fc:	4a4a      	ldr	r2, [pc, #296]	; (800d928 <xTaskIncrementTick+0x148>)
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d11f      	bne.n	800d848 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800d808:	4b48      	ldr	r3, [pc, #288]	; (800d92c <xTaskIncrementTick+0x14c>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d009      	beq.n	800d826 <xTaskIncrementTick+0x46>
 800d812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d816:	f383 8811 	msr	BASEPRI, r3
 800d81a:	f3bf 8f6f 	isb	sy
 800d81e:	f3bf 8f4f 	dsb	sy
 800d822:	603b      	str	r3, [r7, #0]
 800d824:	e7fe      	b.n	800d824 <xTaskIncrementTick+0x44>
 800d826:	4b41      	ldr	r3, [pc, #260]	; (800d92c <xTaskIncrementTick+0x14c>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	60fb      	str	r3, [r7, #12]
 800d82c:	4b40      	ldr	r3, [pc, #256]	; (800d930 <xTaskIncrementTick+0x150>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	4a3e      	ldr	r2, [pc, #248]	; (800d92c <xTaskIncrementTick+0x14c>)
 800d832:	6013      	str	r3, [r2, #0]
 800d834:	4a3e      	ldr	r2, [pc, #248]	; (800d930 <xTaskIncrementTick+0x150>)
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	6013      	str	r3, [r2, #0]
 800d83a:	4b3e      	ldr	r3, [pc, #248]	; (800d934 <xTaskIncrementTick+0x154>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	3301      	adds	r3, #1
 800d840:	4a3c      	ldr	r2, [pc, #240]	; (800d934 <xTaskIncrementTick+0x154>)
 800d842:	6013      	str	r3, [r2, #0]
 800d844:	f000 faec 	bl	800de20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d848:	4b3b      	ldr	r3, [pc, #236]	; (800d938 <xTaskIncrementTick+0x158>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	693a      	ldr	r2, [r7, #16]
 800d84e:	429a      	cmp	r2, r3
 800d850:	d349      	bcc.n	800d8e6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d852:	4b36      	ldr	r3, [pc, #216]	; (800d92c <xTaskIncrementTick+0x14c>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d104      	bne.n	800d866 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d85c:	4b36      	ldr	r3, [pc, #216]	; (800d938 <xTaskIncrementTick+0x158>)
 800d85e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d862:	601a      	str	r2, [r3, #0]
					break;
 800d864:	e03f      	b.n	800d8e6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d866:	4b31      	ldr	r3, [pc, #196]	; (800d92c <xTaskIncrementTick+0x14c>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	68db      	ldr	r3, [r3, #12]
 800d86c:	68db      	ldr	r3, [r3, #12]
 800d86e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	685b      	ldr	r3, [r3, #4]
 800d874:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d876:	693a      	ldr	r2, [r7, #16]
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d203      	bcs.n	800d886 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d87e:	4a2e      	ldr	r2, [pc, #184]	; (800d938 <xTaskIncrementTick+0x158>)
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d884:	e02f      	b.n	800d8e6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	3304      	adds	r3, #4
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7fe fbe8 	bl	800c060 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d894:	2b00      	cmp	r3, #0
 800d896:	d004      	beq.n	800d8a2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	3318      	adds	r3, #24
 800d89c:	4618      	mov	r0, r3
 800d89e:	f7fe fbdf 	bl	800c060 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8a6:	4b25      	ldr	r3, [pc, #148]	; (800d93c <xTaskIncrementTick+0x15c>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d903      	bls.n	800d8b6 <xTaskIncrementTick+0xd6>
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8b2:	4a22      	ldr	r2, [pc, #136]	; (800d93c <xTaskIncrementTick+0x15c>)
 800d8b4:	6013      	str	r3, [r2, #0]
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ba:	4613      	mov	r3, r2
 800d8bc:	009b      	lsls	r3, r3, #2
 800d8be:	4413      	add	r3, r2
 800d8c0:	009b      	lsls	r3, r3, #2
 800d8c2:	4a1f      	ldr	r2, [pc, #124]	; (800d940 <xTaskIncrementTick+0x160>)
 800d8c4:	441a      	add	r2, r3
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	3304      	adds	r3, #4
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	4610      	mov	r0, r2
 800d8ce:	f7fe fb6a 	bl	800bfa6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8d6:	4b1b      	ldr	r3, [pc, #108]	; (800d944 <xTaskIncrementTick+0x164>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d3b8      	bcc.n	800d852 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d8e4:	e7b5      	b.n	800d852 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d8e6:	4b17      	ldr	r3, [pc, #92]	; (800d944 <xTaskIncrementTick+0x164>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ec:	4914      	ldr	r1, [pc, #80]	; (800d940 <xTaskIncrementTick+0x160>)
 800d8ee:	4613      	mov	r3, r2
 800d8f0:	009b      	lsls	r3, r3, #2
 800d8f2:	4413      	add	r3, r2
 800d8f4:	009b      	lsls	r3, r3, #2
 800d8f6:	440b      	add	r3, r1
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	2b01      	cmp	r3, #1
 800d8fc:	d907      	bls.n	800d90e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800d8fe:	2301      	movs	r3, #1
 800d900:	617b      	str	r3, [r7, #20]
 800d902:	e004      	b.n	800d90e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d904:	4b10      	ldr	r3, [pc, #64]	; (800d948 <xTaskIncrementTick+0x168>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	3301      	adds	r3, #1
 800d90a:	4a0f      	ldr	r2, [pc, #60]	; (800d948 <xTaskIncrementTick+0x168>)
 800d90c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d90e:	4b0f      	ldr	r3, [pc, #60]	; (800d94c <xTaskIncrementTick+0x16c>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d001      	beq.n	800d91a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800d916:	2301      	movs	r3, #1
 800d918:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d91a:	697b      	ldr	r3, [r7, #20]
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3718      	adds	r7, #24
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}
 800d924:	20003798 	.word	0x20003798
 800d928:	20003774 	.word	0x20003774
 800d92c:	20003728 	.word	0x20003728
 800d930:	2000372c 	.word	0x2000372c
 800d934:	20003788 	.word	0x20003788
 800d938:	20003790 	.word	0x20003790
 800d93c:	20003778 	.word	0x20003778
 800d940:	200032a0 	.word	0x200032a0
 800d944:	2000329c 	.word	0x2000329c
 800d948:	20003780 	.word	0x20003780
 800d94c:	20003784 	.word	0x20003784

0800d950 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d950:	b480      	push	{r7}
 800d952:	b085      	sub	sp, #20
 800d954:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d956:	4b27      	ldr	r3, [pc, #156]	; (800d9f4 <vTaskSwitchContext+0xa4>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d003      	beq.n	800d966 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d95e:	4b26      	ldr	r3, [pc, #152]	; (800d9f8 <vTaskSwitchContext+0xa8>)
 800d960:	2201      	movs	r2, #1
 800d962:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d964:	e040      	b.n	800d9e8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800d966:	4b24      	ldr	r3, [pc, #144]	; (800d9f8 <vTaskSwitchContext+0xa8>)
 800d968:	2200      	movs	r2, #0
 800d96a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d96c:	4b23      	ldr	r3, [pc, #140]	; (800d9fc <vTaskSwitchContext+0xac>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	60fb      	str	r3, [r7, #12]
 800d972:	e00f      	b.n	800d994 <vTaskSwitchContext+0x44>
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d109      	bne.n	800d98e <vTaskSwitchContext+0x3e>
 800d97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d97e:	f383 8811 	msr	BASEPRI, r3
 800d982:	f3bf 8f6f 	isb	sy
 800d986:	f3bf 8f4f 	dsb	sy
 800d98a:	607b      	str	r3, [r7, #4]
 800d98c:	e7fe      	b.n	800d98c <vTaskSwitchContext+0x3c>
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	3b01      	subs	r3, #1
 800d992:	60fb      	str	r3, [r7, #12]
 800d994:	491a      	ldr	r1, [pc, #104]	; (800da00 <vTaskSwitchContext+0xb0>)
 800d996:	68fa      	ldr	r2, [r7, #12]
 800d998:	4613      	mov	r3, r2
 800d99a:	009b      	lsls	r3, r3, #2
 800d99c:	4413      	add	r3, r2
 800d99e:	009b      	lsls	r3, r3, #2
 800d9a0:	440b      	add	r3, r1
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d0e5      	beq.n	800d974 <vTaskSwitchContext+0x24>
 800d9a8:	68fa      	ldr	r2, [r7, #12]
 800d9aa:	4613      	mov	r3, r2
 800d9ac:	009b      	lsls	r3, r3, #2
 800d9ae:	4413      	add	r3, r2
 800d9b0:	009b      	lsls	r3, r3, #2
 800d9b2:	4a13      	ldr	r2, [pc, #76]	; (800da00 <vTaskSwitchContext+0xb0>)
 800d9b4:	4413      	add	r3, r2
 800d9b6:	60bb      	str	r3, [r7, #8]
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	685b      	ldr	r3, [r3, #4]
 800d9bc:	685a      	ldr	r2, [r3, #4]
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	605a      	str	r2, [r3, #4]
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	685a      	ldr	r2, [r3, #4]
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	3308      	adds	r3, #8
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	d104      	bne.n	800d9d8 <vTaskSwitchContext+0x88>
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	685b      	ldr	r3, [r3, #4]
 800d9d2:	685a      	ldr	r2, [r3, #4]
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	605a      	str	r2, [r3, #4]
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	685b      	ldr	r3, [r3, #4]
 800d9dc:	68db      	ldr	r3, [r3, #12]
 800d9de:	4a09      	ldr	r2, [pc, #36]	; (800da04 <vTaskSwitchContext+0xb4>)
 800d9e0:	6013      	str	r3, [r2, #0]
 800d9e2:	4a06      	ldr	r2, [pc, #24]	; (800d9fc <vTaskSwitchContext+0xac>)
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	6013      	str	r3, [r2, #0]
}
 800d9e8:	bf00      	nop
 800d9ea:	3714      	adds	r7, #20
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f2:	4770      	bx	lr
 800d9f4:	20003798 	.word	0x20003798
 800d9f8:	20003784 	.word	0x20003784
 800d9fc:	20003778 	.word	0x20003778
 800da00:	200032a0 	.word	0x200032a0
 800da04:	2000329c 	.word	0x2000329c

0800da08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b084      	sub	sp, #16
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
 800da10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d109      	bne.n	800da2c <vTaskPlaceOnEventList+0x24>
 800da18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da1c:	f383 8811 	msr	BASEPRI, r3
 800da20:	f3bf 8f6f 	isb	sy
 800da24:	f3bf 8f4f 	dsb	sy
 800da28:	60fb      	str	r3, [r7, #12]
 800da2a:	e7fe      	b.n	800da2a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800da2c:	4b07      	ldr	r3, [pc, #28]	; (800da4c <vTaskPlaceOnEventList+0x44>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	3318      	adds	r3, #24
 800da32:	4619      	mov	r1, r3
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f7fe fada 	bl	800bfee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800da3a:	2101      	movs	r1, #1
 800da3c:	6838      	ldr	r0, [r7, #0]
 800da3e:	f000 fd8d 	bl	800e55c <prvAddCurrentTaskToDelayedList>
}
 800da42:	bf00      	nop
 800da44:	3710      	adds	r7, #16
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}
 800da4a:	bf00      	nop
 800da4c:	2000329c 	.word	0x2000329c

0800da50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800da50:	b580      	push	{r7, lr}
 800da52:	b086      	sub	sp, #24
 800da54:	af00      	add	r7, sp, #0
 800da56:	60f8      	str	r0, [r7, #12]
 800da58:	60b9      	str	r1, [r7, #8]
 800da5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d109      	bne.n	800da76 <vTaskPlaceOnEventListRestricted+0x26>
 800da62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da66:	f383 8811 	msr	BASEPRI, r3
 800da6a:	f3bf 8f6f 	isb	sy
 800da6e:	f3bf 8f4f 	dsb	sy
 800da72:	617b      	str	r3, [r7, #20]
 800da74:	e7fe      	b.n	800da74 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800da76:	4b0a      	ldr	r3, [pc, #40]	; (800daa0 <vTaskPlaceOnEventListRestricted+0x50>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	3318      	adds	r3, #24
 800da7c:	4619      	mov	r1, r3
 800da7e:	68f8      	ldr	r0, [r7, #12]
 800da80:	f7fe fa91 	bl	800bfa6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d002      	beq.n	800da90 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800da8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da8e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800da90:	6879      	ldr	r1, [r7, #4]
 800da92:	68b8      	ldr	r0, [r7, #8]
 800da94:	f000 fd62 	bl	800e55c <prvAddCurrentTaskToDelayedList>
	}
 800da98:	bf00      	nop
 800da9a:	3718      	adds	r7, #24
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	2000329c 	.word	0x2000329c

0800daa4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b086      	sub	sp, #24
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	68db      	ldr	r3, [r3, #12]
 800dab0:	68db      	ldr	r3, [r3, #12]
 800dab2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d109      	bne.n	800dace <xTaskRemoveFromEventList+0x2a>
 800daba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dabe:	f383 8811 	msr	BASEPRI, r3
 800dac2:	f3bf 8f6f 	isb	sy
 800dac6:	f3bf 8f4f 	dsb	sy
 800daca:	60fb      	str	r3, [r7, #12]
 800dacc:	e7fe      	b.n	800dacc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	3318      	adds	r3, #24
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7fe fac4 	bl	800c060 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dad8:	4b1e      	ldr	r3, [pc, #120]	; (800db54 <xTaskRemoveFromEventList+0xb0>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d11f      	bne.n	800db20 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	3304      	adds	r3, #4
 800dae4:	4618      	mov	r0, r3
 800dae6:	f7fe fabb 	bl	800c060 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daee:	4b1a      	ldr	r3, [pc, #104]	; (800db58 <xTaskRemoveFromEventList+0xb4>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d903      	bls.n	800dafe <xTaskRemoveFromEventList+0x5a>
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dafa:	4a17      	ldr	r2, [pc, #92]	; (800db58 <xTaskRemoveFromEventList+0xb4>)
 800dafc:	6013      	str	r3, [r2, #0]
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db02:	4613      	mov	r3, r2
 800db04:	009b      	lsls	r3, r3, #2
 800db06:	4413      	add	r3, r2
 800db08:	009b      	lsls	r3, r3, #2
 800db0a:	4a14      	ldr	r2, [pc, #80]	; (800db5c <xTaskRemoveFromEventList+0xb8>)
 800db0c:	441a      	add	r2, r3
 800db0e:	693b      	ldr	r3, [r7, #16]
 800db10:	3304      	adds	r3, #4
 800db12:	4619      	mov	r1, r3
 800db14:	4610      	mov	r0, r2
 800db16:	f7fe fa46 	bl	800bfa6 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800db1a:	f000 f981 	bl	800de20 <prvResetNextTaskUnblockTime>
 800db1e:	e005      	b.n	800db2c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	3318      	adds	r3, #24
 800db24:	4619      	mov	r1, r3
 800db26:	480e      	ldr	r0, [pc, #56]	; (800db60 <xTaskRemoveFromEventList+0xbc>)
 800db28:	f7fe fa3d 	bl	800bfa6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db30:	4b0c      	ldr	r3, [pc, #48]	; (800db64 <xTaskRemoveFromEventList+0xc0>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db36:	429a      	cmp	r2, r3
 800db38:	d905      	bls.n	800db46 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800db3a:	2301      	movs	r3, #1
 800db3c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800db3e:	4b0a      	ldr	r3, [pc, #40]	; (800db68 <xTaskRemoveFromEventList+0xc4>)
 800db40:	2201      	movs	r2, #1
 800db42:	601a      	str	r2, [r3, #0]
 800db44:	e001      	b.n	800db4a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800db46:	2300      	movs	r3, #0
 800db48:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800db4a:	697b      	ldr	r3, [r7, #20]
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3718      	adds	r7, #24
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}
 800db54:	20003798 	.word	0x20003798
 800db58:	20003778 	.word	0x20003778
 800db5c:	200032a0 	.word	0x200032a0
 800db60:	20003730 	.word	0x20003730
 800db64:	2000329c 	.word	0x2000329c
 800db68:	20003784 	.word	0x20003784

0800db6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800db6c:	b480      	push	{r7}
 800db6e:	b083      	sub	sp, #12
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800db74:	4b06      	ldr	r3, [pc, #24]	; (800db90 <vTaskInternalSetTimeOutState+0x24>)
 800db76:	681a      	ldr	r2, [r3, #0]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800db7c:	4b05      	ldr	r3, [pc, #20]	; (800db94 <vTaskInternalSetTimeOutState+0x28>)
 800db7e:	681a      	ldr	r2, [r3, #0]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	605a      	str	r2, [r3, #4]
}
 800db84:	bf00      	nop
 800db86:	370c      	adds	r7, #12
 800db88:	46bd      	mov	sp, r7
 800db8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8e:	4770      	bx	lr
 800db90:	20003788 	.word	0x20003788
 800db94:	20003774 	.word	0x20003774

0800db98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b088      	sub	sp, #32
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d109      	bne.n	800dbbc <xTaskCheckForTimeOut+0x24>
 800dba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbac:	f383 8811 	msr	BASEPRI, r3
 800dbb0:	f3bf 8f6f 	isb	sy
 800dbb4:	f3bf 8f4f 	dsb	sy
 800dbb8:	613b      	str	r3, [r7, #16]
 800dbba:	e7fe      	b.n	800dbba <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d109      	bne.n	800dbd6 <xTaskCheckForTimeOut+0x3e>
 800dbc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc6:	f383 8811 	msr	BASEPRI, r3
 800dbca:	f3bf 8f6f 	isb	sy
 800dbce:	f3bf 8f4f 	dsb	sy
 800dbd2:	60fb      	str	r3, [r7, #12]
 800dbd4:	e7fe      	b.n	800dbd4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800dbd6:	f7fd fec9 	bl	800b96c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dbda:	4b1d      	ldr	r3, [pc, #116]	; (800dc50 <xTaskCheckForTimeOut+0xb8>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	685b      	ldr	r3, [r3, #4]
 800dbe4:	69ba      	ldr	r2, [r7, #24]
 800dbe6:	1ad3      	subs	r3, r2, r3
 800dbe8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dbf2:	d102      	bne.n	800dbfa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	61fb      	str	r3, [r7, #28]
 800dbf8:	e023      	b.n	800dc42 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681a      	ldr	r2, [r3, #0]
 800dbfe:	4b15      	ldr	r3, [pc, #84]	; (800dc54 <xTaskCheckForTimeOut+0xbc>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	429a      	cmp	r2, r3
 800dc04:	d007      	beq.n	800dc16 <xTaskCheckForTimeOut+0x7e>
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	685b      	ldr	r3, [r3, #4]
 800dc0a:	69ba      	ldr	r2, [r7, #24]
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	d302      	bcc.n	800dc16 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dc10:	2301      	movs	r3, #1
 800dc12:	61fb      	str	r3, [r7, #28]
 800dc14:	e015      	b.n	800dc42 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	697a      	ldr	r2, [r7, #20]
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	d20b      	bcs.n	800dc38 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	681a      	ldr	r2, [r3, #0]
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	1ad2      	subs	r2, r2, r3
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f7ff ff9d 	bl	800db6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dc32:	2300      	movs	r3, #0
 800dc34:	61fb      	str	r3, [r7, #28]
 800dc36:	e004      	b.n	800dc42 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dc3e:	2301      	movs	r3, #1
 800dc40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dc42:	f7fd fec1 	bl	800b9c8 <vPortExitCritical>

	return xReturn;
 800dc46:	69fb      	ldr	r3, [r7, #28]
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3720      	adds	r7, #32
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}
 800dc50:	20003774 	.word	0x20003774
 800dc54:	20003788 	.word	0x20003788

0800dc58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dc58:	b480      	push	{r7}
 800dc5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dc5c:	4b03      	ldr	r3, [pc, #12]	; (800dc6c <vTaskMissedYield+0x14>)
 800dc5e:	2201      	movs	r2, #1
 800dc60:	601a      	str	r2, [r3, #0]
}
 800dc62:	bf00      	nop
 800dc64:	46bd      	mov	sp, r7
 800dc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6a:	4770      	bx	lr
 800dc6c:	20003784 	.word	0x20003784

0800dc70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b084      	sub	sp, #16
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dc78:	f000 f878 	bl	800dd6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dc7c:	4b17      	ldr	r3, [pc, #92]	; (800dcdc <prvIdleTask+0x6c>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	2b01      	cmp	r3, #1
 800dc82:	d907      	bls.n	800dc94 <prvIdleTask+0x24>
			{
				taskYIELD();
 800dc84:	4b16      	ldr	r3, [pc, #88]	; (800dce0 <prvIdleTask+0x70>)
 800dc86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc8a:	601a      	str	r2, [r3, #0]
 800dc8c:	f3bf 8f4f 	dsb	sy
 800dc90:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800dc94:	f7ff fcc0 	bl	800d618 <prvGetExpectedIdleTime>
 800dc98:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2b01      	cmp	r3, #1
 800dc9e:	d9eb      	bls.n	800dc78 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800dca0:	f7ff fcac 	bl	800d5fc <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800dca4:	4b0f      	ldr	r3, [pc, #60]	; (800dce4 <prvIdleTask+0x74>)
 800dca6:	681a      	ldr	r2, [r3, #0]
 800dca8:	4b0f      	ldr	r3, [pc, #60]	; (800dce8 <prvIdleTask+0x78>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	429a      	cmp	r2, r3
 800dcae:	d209      	bcs.n	800dcc4 <prvIdleTask+0x54>
 800dcb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb4:	f383 8811 	msr	BASEPRI, r3
 800dcb8:	f3bf 8f6f 	isb	sy
 800dcbc:	f3bf 8f4f 	dsb	sy
 800dcc0:	60bb      	str	r3, [r7, #8]
 800dcc2:	e7fe      	b.n	800dcc2 <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800dcc4:	f7ff fca8 	bl	800d618 <prvGetExpectedIdleTime>
 800dcc8:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	2b01      	cmp	r3, #1
 800dcce:	d902      	bls.n	800dcd6 <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800dcd0:	68f8      	ldr	r0, [r7, #12]
 800dcd2:	f7f4 fbb7 	bl	8002444 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800dcd6:	f7ff fcd7 	bl	800d688 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800dcda:	e7cd      	b.n	800dc78 <prvIdleTask+0x8>
 800dcdc:	200032a0 	.word	0x200032a0
 800dce0:	e000ed04 	.word	0xe000ed04
 800dce4:	20003790 	.word	0x20003790
 800dce8:	20003774 	.word	0x20003774

0800dcec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b082      	sub	sp, #8
 800dcf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	607b      	str	r3, [r7, #4]
 800dcf6:	e00c      	b.n	800dd12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dcf8:	687a      	ldr	r2, [r7, #4]
 800dcfa:	4613      	mov	r3, r2
 800dcfc:	009b      	lsls	r3, r3, #2
 800dcfe:	4413      	add	r3, r2
 800dd00:	009b      	lsls	r3, r3, #2
 800dd02:	4a12      	ldr	r2, [pc, #72]	; (800dd4c <prvInitialiseTaskLists+0x60>)
 800dd04:	4413      	add	r3, r2
 800dd06:	4618      	mov	r0, r3
 800dd08:	f7fe f920 	bl	800bf4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	3301      	adds	r3, #1
 800dd10:	607b      	str	r3, [r7, #4]
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2b37      	cmp	r3, #55	; 0x37
 800dd16:	d9ef      	bls.n	800dcf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dd18:	480d      	ldr	r0, [pc, #52]	; (800dd50 <prvInitialiseTaskLists+0x64>)
 800dd1a:	f7fe f917 	bl	800bf4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dd1e:	480d      	ldr	r0, [pc, #52]	; (800dd54 <prvInitialiseTaskLists+0x68>)
 800dd20:	f7fe f914 	bl	800bf4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dd24:	480c      	ldr	r0, [pc, #48]	; (800dd58 <prvInitialiseTaskLists+0x6c>)
 800dd26:	f7fe f911 	bl	800bf4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dd2a:	480c      	ldr	r0, [pc, #48]	; (800dd5c <prvInitialiseTaskLists+0x70>)
 800dd2c:	f7fe f90e 	bl	800bf4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dd30:	480b      	ldr	r0, [pc, #44]	; (800dd60 <prvInitialiseTaskLists+0x74>)
 800dd32:	f7fe f90b 	bl	800bf4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dd36:	4b0b      	ldr	r3, [pc, #44]	; (800dd64 <prvInitialiseTaskLists+0x78>)
 800dd38:	4a05      	ldr	r2, [pc, #20]	; (800dd50 <prvInitialiseTaskLists+0x64>)
 800dd3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dd3c:	4b0a      	ldr	r3, [pc, #40]	; (800dd68 <prvInitialiseTaskLists+0x7c>)
 800dd3e:	4a05      	ldr	r2, [pc, #20]	; (800dd54 <prvInitialiseTaskLists+0x68>)
 800dd40:	601a      	str	r2, [r3, #0]
}
 800dd42:	bf00      	nop
 800dd44:	3708      	adds	r7, #8
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}
 800dd4a:	bf00      	nop
 800dd4c:	200032a0 	.word	0x200032a0
 800dd50:	20003700 	.word	0x20003700
 800dd54:	20003714 	.word	0x20003714
 800dd58:	20003730 	.word	0x20003730
 800dd5c:	20003744 	.word	0x20003744
 800dd60:	2000375c 	.word	0x2000375c
 800dd64:	20003728 	.word	0x20003728
 800dd68:	2000372c 	.word	0x2000372c

0800dd6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b082      	sub	sp, #8
 800dd70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dd72:	e019      	b.n	800dda8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dd74:	f7fd fdfa 	bl	800b96c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd78:	4b0f      	ldr	r3, [pc, #60]	; (800ddb8 <prvCheckTasksWaitingTermination+0x4c>)
 800dd7a:	68db      	ldr	r3, [r3, #12]
 800dd7c:	68db      	ldr	r3, [r3, #12]
 800dd7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	3304      	adds	r3, #4
 800dd84:	4618      	mov	r0, r3
 800dd86:	f7fe f96b 	bl	800c060 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dd8a:	4b0c      	ldr	r3, [pc, #48]	; (800ddbc <prvCheckTasksWaitingTermination+0x50>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	3b01      	subs	r3, #1
 800dd90:	4a0a      	ldr	r2, [pc, #40]	; (800ddbc <prvCheckTasksWaitingTermination+0x50>)
 800dd92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dd94:	4b0a      	ldr	r3, [pc, #40]	; (800ddc0 <prvCheckTasksWaitingTermination+0x54>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	3b01      	subs	r3, #1
 800dd9a:	4a09      	ldr	r2, [pc, #36]	; (800ddc0 <prvCheckTasksWaitingTermination+0x54>)
 800dd9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dd9e:	f7fd fe13 	bl	800b9c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f000 f80e 	bl	800ddc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dda8:	4b05      	ldr	r3, [pc, #20]	; (800ddc0 <prvCheckTasksWaitingTermination+0x54>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d1e1      	bne.n	800dd74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ddb0:	bf00      	nop
 800ddb2:	3708      	adds	r7, #8
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}
 800ddb8:	20003744 	.word	0x20003744
 800ddbc:	20003770 	.word	0x20003770
 800ddc0:	20003758 	.word	0x20003758

0800ddc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b084      	sub	sp, #16
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d108      	bne.n	800dde8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7fd ffa2 	bl	800bd24 <vPortFree>
				vPortFree( pxTCB );
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f7fd ff9f 	bl	800bd24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dde6:	e017      	b.n	800de18 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ddee:	2b01      	cmp	r3, #1
 800ddf0:	d103      	bne.n	800ddfa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f7fd ff96 	bl	800bd24 <vPortFree>
	}
 800ddf8:	e00e      	b.n	800de18 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800de00:	2b02      	cmp	r3, #2
 800de02:	d009      	beq.n	800de18 <prvDeleteTCB+0x54>
 800de04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de08:	f383 8811 	msr	BASEPRI, r3
 800de0c:	f3bf 8f6f 	isb	sy
 800de10:	f3bf 8f4f 	dsb	sy
 800de14:	60fb      	str	r3, [r7, #12]
 800de16:	e7fe      	b.n	800de16 <prvDeleteTCB+0x52>
	}
 800de18:	bf00      	nop
 800de1a:	3710      	adds	r7, #16
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}

0800de20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800de20:	b480      	push	{r7}
 800de22:	b083      	sub	sp, #12
 800de24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de26:	4b0c      	ldr	r3, [pc, #48]	; (800de58 <prvResetNextTaskUnblockTime+0x38>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d104      	bne.n	800de3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800de30:	4b0a      	ldr	r3, [pc, #40]	; (800de5c <prvResetNextTaskUnblockTime+0x3c>)
 800de32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800de38:	e008      	b.n	800de4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de3a:	4b07      	ldr	r3, [pc, #28]	; (800de58 <prvResetNextTaskUnblockTime+0x38>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	68db      	ldr	r3, [r3, #12]
 800de40:	68db      	ldr	r3, [r3, #12]
 800de42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	685b      	ldr	r3, [r3, #4]
 800de48:	4a04      	ldr	r2, [pc, #16]	; (800de5c <prvResetNextTaskUnblockTime+0x3c>)
 800de4a:	6013      	str	r3, [r2, #0]
}
 800de4c:	bf00      	nop
 800de4e:	370c      	adds	r7, #12
 800de50:	46bd      	mov	sp, r7
 800de52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de56:	4770      	bx	lr
 800de58:	20003728 	.word	0x20003728
 800de5c:	20003790 	.word	0x20003790

0800de60 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800de60:	b480      	push	{r7}
 800de62:	b083      	sub	sp, #12
 800de64:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800de66:	4b05      	ldr	r3, [pc, #20]	; (800de7c <xTaskGetCurrentTaskHandle+0x1c>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800de6c:	687b      	ldr	r3, [r7, #4]
	}
 800de6e:	4618      	mov	r0, r3
 800de70:	370c      	adds	r7, #12
 800de72:	46bd      	mov	sp, r7
 800de74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de78:	4770      	bx	lr
 800de7a:	bf00      	nop
 800de7c:	2000329c 	.word	0x2000329c

0800de80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800de80:	b480      	push	{r7}
 800de82:	b083      	sub	sp, #12
 800de84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800de86:	4b0b      	ldr	r3, [pc, #44]	; (800deb4 <xTaskGetSchedulerState+0x34>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d102      	bne.n	800de94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800de8e:	2301      	movs	r3, #1
 800de90:	607b      	str	r3, [r7, #4]
 800de92:	e008      	b.n	800dea6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de94:	4b08      	ldr	r3, [pc, #32]	; (800deb8 <xTaskGetSchedulerState+0x38>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d102      	bne.n	800dea2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800de9c:	2302      	movs	r3, #2
 800de9e:	607b      	str	r3, [r7, #4]
 800dea0:	e001      	b.n	800dea6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dea2:	2300      	movs	r3, #0
 800dea4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dea6:	687b      	ldr	r3, [r7, #4]
	}
 800dea8:	4618      	mov	r0, r3
 800deaa:	370c      	adds	r7, #12
 800deac:	46bd      	mov	sp, r7
 800deae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb2:	4770      	bx	lr
 800deb4:	2000377c 	.word	0x2000377c
 800deb8:	20003798 	.word	0x20003798

0800debc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800debc:	b580      	push	{r7, lr}
 800debe:	b084      	sub	sp, #16
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dec8:	2300      	movs	r3, #0
 800deca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d051      	beq.n	800df76 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ded6:	4b2a      	ldr	r3, [pc, #168]	; (800df80 <xTaskPriorityInherit+0xc4>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dedc:	429a      	cmp	r2, r3
 800dede:	d241      	bcs.n	800df64 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	699b      	ldr	r3, [r3, #24]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	db06      	blt.n	800def6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dee8:	4b25      	ldr	r3, [pc, #148]	; (800df80 <xTaskPriorityInherit+0xc4>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	6959      	ldr	r1, [r3, #20]
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800defe:	4613      	mov	r3, r2
 800df00:	009b      	lsls	r3, r3, #2
 800df02:	4413      	add	r3, r2
 800df04:	009b      	lsls	r3, r3, #2
 800df06:	4a1f      	ldr	r2, [pc, #124]	; (800df84 <xTaskPriorityInherit+0xc8>)
 800df08:	4413      	add	r3, r2
 800df0a:	4299      	cmp	r1, r3
 800df0c:	d122      	bne.n	800df54 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	3304      	adds	r3, #4
 800df12:	4618      	mov	r0, r3
 800df14:	f7fe f8a4 	bl	800c060 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800df18:	4b19      	ldr	r3, [pc, #100]	; (800df80 <xTaskPriorityInherit+0xc4>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df26:	4b18      	ldr	r3, [pc, #96]	; (800df88 <xTaskPriorityInherit+0xcc>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	429a      	cmp	r2, r3
 800df2c:	d903      	bls.n	800df36 <xTaskPriorityInherit+0x7a>
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df32:	4a15      	ldr	r2, [pc, #84]	; (800df88 <xTaskPriorityInherit+0xcc>)
 800df34:	6013      	str	r3, [r2, #0]
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df3a:	4613      	mov	r3, r2
 800df3c:	009b      	lsls	r3, r3, #2
 800df3e:	4413      	add	r3, r2
 800df40:	009b      	lsls	r3, r3, #2
 800df42:	4a10      	ldr	r2, [pc, #64]	; (800df84 <xTaskPriorityInherit+0xc8>)
 800df44:	441a      	add	r2, r3
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	3304      	adds	r3, #4
 800df4a:	4619      	mov	r1, r3
 800df4c:	4610      	mov	r0, r2
 800df4e:	f7fe f82a 	bl	800bfa6 <vListInsertEnd>
 800df52:	e004      	b.n	800df5e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800df54:	4b0a      	ldr	r3, [pc, #40]	; (800df80 <xTaskPriorityInherit+0xc4>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800df5e:	2301      	movs	r3, #1
 800df60:	60fb      	str	r3, [r7, #12]
 800df62:	e008      	b.n	800df76 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800df68:	4b05      	ldr	r3, [pc, #20]	; (800df80 <xTaskPriorityInherit+0xc4>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df6e:	429a      	cmp	r2, r3
 800df70:	d201      	bcs.n	800df76 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800df72:	2301      	movs	r3, #1
 800df74:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800df76:	68fb      	ldr	r3, [r7, #12]
	}
 800df78:	4618      	mov	r0, r3
 800df7a:	3710      	adds	r7, #16
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}
 800df80:	2000329c 	.word	0x2000329c
 800df84:	200032a0 	.word	0x200032a0
 800df88:	20003778 	.word	0x20003778

0800df8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b086      	sub	sp, #24
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800df98:	2300      	movs	r3, #0
 800df9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d054      	beq.n	800e04c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dfa2:	4b2d      	ldr	r3, [pc, #180]	; (800e058 <xTaskPriorityDisinherit+0xcc>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	693a      	ldr	r2, [r7, #16]
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d009      	beq.n	800dfc0 <xTaskPriorityDisinherit+0x34>
 800dfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfb0:	f383 8811 	msr	BASEPRI, r3
 800dfb4:	f3bf 8f6f 	isb	sy
 800dfb8:	f3bf 8f4f 	dsb	sy
 800dfbc:	60fb      	str	r3, [r7, #12]
 800dfbe:	e7fe      	b.n	800dfbe <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d109      	bne.n	800dfdc <xTaskPriorityDisinherit+0x50>
 800dfc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfcc:	f383 8811 	msr	BASEPRI, r3
 800dfd0:	f3bf 8f6f 	isb	sy
 800dfd4:	f3bf 8f4f 	dsb	sy
 800dfd8:	60bb      	str	r3, [r7, #8]
 800dfda:	e7fe      	b.n	800dfda <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfe0:	1e5a      	subs	r2, r3, #1
 800dfe2:	693b      	ldr	r3, [r7, #16]
 800dfe4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dfe6:	693b      	ldr	r3, [r7, #16]
 800dfe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d02c      	beq.n	800e04c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d128      	bne.n	800e04c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	3304      	adds	r3, #4
 800dffe:	4618      	mov	r0, r3
 800e000:	f7fe f82e 	bl	800c060 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e008:	693b      	ldr	r3, [r7, #16]
 800e00a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e010:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e014:	693b      	ldr	r3, [r7, #16]
 800e016:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e018:	693b      	ldr	r3, [r7, #16]
 800e01a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e01c:	4b0f      	ldr	r3, [pc, #60]	; (800e05c <xTaskPriorityDisinherit+0xd0>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	429a      	cmp	r2, r3
 800e022:	d903      	bls.n	800e02c <xTaskPriorityDisinherit+0xa0>
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e028:	4a0c      	ldr	r2, [pc, #48]	; (800e05c <xTaskPriorityDisinherit+0xd0>)
 800e02a:	6013      	str	r3, [r2, #0]
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e030:	4613      	mov	r3, r2
 800e032:	009b      	lsls	r3, r3, #2
 800e034:	4413      	add	r3, r2
 800e036:	009b      	lsls	r3, r3, #2
 800e038:	4a09      	ldr	r2, [pc, #36]	; (800e060 <xTaskPriorityDisinherit+0xd4>)
 800e03a:	441a      	add	r2, r3
 800e03c:	693b      	ldr	r3, [r7, #16]
 800e03e:	3304      	adds	r3, #4
 800e040:	4619      	mov	r1, r3
 800e042:	4610      	mov	r0, r2
 800e044:	f7fd ffaf 	bl	800bfa6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e048:	2301      	movs	r3, #1
 800e04a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e04c:	697b      	ldr	r3, [r7, #20]
	}
 800e04e:	4618      	mov	r0, r3
 800e050:	3718      	adds	r7, #24
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
 800e056:	bf00      	nop
 800e058:	2000329c 	.word	0x2000329c
 800e05c:	20003778 	.word	0x20003778
 800e060:	200032a0 	.word	0x200032a0

0800e064 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e064:	b580      	push	{r7, lr}
 800e066:	b088      	sub	sp, #32
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
 800e06c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e072:	2301      	movs	r3, #1
 800e074:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d068      	beq.n	800e14e <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e07c:	69bb      	ldr	r3, [r7, #24]
 800e07e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e080:	2b00      	cmp	r3, #0
 800e082:	d109      	bne.n	800e098 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800e084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e088:	f383 8811 	msr	BASEPRI, r3
 800e08c:	f3bf 8f6f 	isb	sy
 800e090:	f3bf 8f4f 	dsb	sy
 800e094:	60fb      	str	r3, [r7, #12]
 800e096:	e7fe      	b.n	800e096 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e098:	69bb      	ldr	r3, [r7, #24]
 800e09a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e09c:	683a      	ldr	r2, [r7, #0]
 800e09e:	429a      	cmp	r2, r3
 800e0a0:	d902      	bls.n	800e0a8 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	61fb      	str	r3, [r7, #28]
 800e0a6:	e002      	b.n	800e0ae <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e0a8:	69bb      	ldr	r3, [r7, #24]
 800e0aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0ac:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e0ae:	69bb      	ldr	r3, [r7, #24]
 800e0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0b2:	69fa      	ldr	r2, [r7, #28]
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d04a      	beq.n	800e14e <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e0b8:	69bb      	ldr	r3, [r7, #24]
 800e0ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0bc:	697a      	ldr	r2, [r7, #20]
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d145      	bne.n	800e14e <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e0c2:	4b25      	ldr	r3, [pc, #148]	; (800e158 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	69ba      	ldr	r2, [r7, #24]
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d109      	bne.n	800e0e0 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800e0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d0:	f383 8811 	msr	BASEPRI, r3
 800e0d4:	f3bf 8f6f 	isb	sy
 800e0d8:	f3bf 8f4f 	dsb	sy
 800e0dc:	60bb      	str	r3, [r7, #8]
 800e0de:	e7fe      	b.n	800e0de <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e0e0:	69bb      	ldr	r3, [r7, #24]
 800e0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0e4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e0e6:	69bb      	ldr	r3, [r7, #24]
 800e0e8:	69fa      	ldr	r2, [r7, #28]
 800e0ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e0ec:	69bb      	ldr	r3, [r7, #24]
 800e0ee:	699b      	ldr	r3, [r3, #24]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	db04      	blt.n	800e0fe <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0f4:	69fb      	ldr	r3, [r7, #28]
 800e0f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e0fa:	69bb      	ldr	r3, [r7, #24]
 800e0fc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e0fe:	69bb      	ldr	r3, [r7, #24]
 800e100:	6959      	ldr	r1, [r3, #20]
 800e102:	693a      	ldr	r2, [r7, #16]
 800e104:	4613      	mov	r3, r2
 800e106:	009b      	lsls	r3, r3, #2
 800e108:	4413      	add	r3, r2
 800e10a:	009b      	lsls	r3, r3, #2
 800e10c:	4a13      	ldr	r2, [pc, #76]	; (800e15c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e10e:	4413      	add	r3, r2
 800e110:	4299      	cmp	r1, r3
 800e112:	d11c      	bne.n	800e14e <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e114:	69bb      	ldr	r3, [r7, #24]
 800e116:	3304      	adds	r3, #4
 800e118:	4618      	mov	r0, r3
 800e11a:	f7fd ffa1 	bl	800c060 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e11e:	69bb      	ldr	r3, [r7, #24]
 800e120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e122:	4b0f      	ldr	r3, [pc, #60]	; (800e160 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	429a      	cmp	r2, r3
 800e128:	d903      	bls.n	800e132 <vTaskPriorityDisinheritAfterTimeout+0xce>
 800e12a:	69bb      	ldr	r3, [r7, #24]
 800e12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e12e:	4a0c      	ldr	r2, [pc, #48]	; (800e160 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e130:	6013      	str	r3, [r2, #0]
 800e132:	69bb      	ldr	r3, [r7, #24]
 800e134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e136:	4613      	mov	r3, r2
 800e138:	009b      	lsls	r3, r3, #2
 800e13a:	4413      	add	r3, r2
 800e13c:	009b      	lsls	r3, r3, #2
 800e13e:	4a07      	ldr	r2, [pc, #28]	; (800e15c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e140:	441a      	add	r2, r3
 800e142:	69bb      	ldr	r3, [r7, #24]
 800e144:	3304      	adds	r3, #4
 800e146:	4619      	mov	r1, r3
 800e148:	4610      	mov	r0, r2
 800e14a:	f7fd ff2c 	bl	800bfa6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e14e:	bf00      	nop
 800e150:	3720      	adds	r7, #32
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	2000329c 	.word	0x2000329c
 800e15c:	200032a0 	.word	0x200032a0
 800e160:	20003778 	.word	0x20003778

0800e164 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e164:	b480      	push	{r7}
 800e166:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e168:	4b07      	ldr	r3, [pc, #28]	; (800e188 <pvTaskIncrementMutexHeldCount+0x24>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d004      	beq.n	800e17a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e170:	4b05      	ldr	r3, [pc, #20]	; (800e188 <pvTaskIncrementMutexHeldCount+0x24>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e176:	3201      	adds	r2, #1
 800e178:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e17a:	4b03      	ldr	r3, [pc, #12]	; (800e188 <pvTaskIncrementMutexHeldCount+0x24>)
 800e17c:	681b      	ldr	r3, [r3, #0]
	}
 800e17e:	4618      	mov	r0, r3
 800e180:	46bd      	mov	sp, r7
 800e182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e186:	4770      	bx	lr
 800e188:	2000329c 	.word	0x2000329c

0800e18c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b086      	sub	sp, #24
 800e190:	af00      	add	r7, sp, #0
 800e192:	60f8      	str	r0, [r7, #12]
 800e194:	60b9      	str	r1, [r7, #8]
 800e196:	607a      	str	r2, [r7, #4]
 800e198:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800e19a:	f7fd fbe7 	bl	800b96c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800e19e:	4b26      	ldr	r3, [pc, #152]	; (800e238 <xTaskNotifyWait+0xac>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800e1a6:	b2db      	uxtb	r3, r3
 800e1a8:	2b02      	cmp	r3, #2
 800e1aa:	d01a      	beq.n	800e1e2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800e1ac:	4b22      	ldr	r3, [pc, #136]	; (800e238 <xTaskNotifyWait+0xac>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e1b2:	68fa      	ldr	r2, [r7, #12]
 800e1b4:	43d2      	mvns	r2, r2
 800e1b6:	400a      	ands	r2, r1
 800e1b8:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800e1ba:	4b1f      	ldr	r3, [pc, #124]	; (800e238 <xTaskNotifyWait+0xac>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	2201      	movs	r2, #1
 800e1c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d00b      	beq.n	800e1e2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e1ca:	2101      	movs	r1, #1
 800e1cc:	6838      	ldr	r0, [r7, #0]
 800e1ce:	f000 f9c5 	bl	800e55c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800e1d2:	4b1a      	ldr	r3, [pc, #104]	; (800e23c <xTaskNotifyWait+0xb0>)
 800e1d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1d8:	601a      	str	r2, [r3, #0]
 800e1da:	f3bf 8f4f 	dsb	sy
 800e1de:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e1e2:	f7fd fbf1 	bl	800b9c8 <vPortExitCritical>

		taskENTER_CRITICAL();
 800e1e6:	f7fd fbc1 	bl	800b96c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d004      	beq.n	800e1fa <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800e1f0:	4b11      	ldr	r3, [pc, #68]	; (800e238 <xTaskNotifyWait+0xac>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800e1fa:	4b0f      	ldr	r3, [pc, #60]	; (800e238 <xTaskNotifyWait+0xac>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800e202:	b2db      	uxtb	r3, r3
 800e204:	2b02      	cmp	r3, #2
 800e206:	d002      	beq.n	800e20e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800e208:	2300      	movs	r3, #0
 800e20a:	617b      	str	r3, [r7, #20]
 800e20c:	e008      	b.n	800e220 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800e20e:	4b0a      	ldr	r3, [pc, #40]	; (800e238 <xTaskNotifyWait+0xac>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e214:	68ba      	ldr	r2, [r7, #8]
 800e216:	43d2      	mvns	r2, r2
 800e218:	400a      	ands	r2, r1
 800e21a:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800e21c:	2301      	movs	r3, #1
 800e21e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e220:	4b05      	ldr	r3, [pc, #20]	; (800e238 <xTaskNotifyWait+0xac>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	2200      	movs	r2, #0
 800e226:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800e22a:	f7fd fbcd 	bl	800b9c8 <vPortExitCritical>

		return xReturn;
 800e22e:	697b      	ldr	r3, [r7, #20]
	}
 800e230:	4618      	mov	r0, r3
 800e232:	3718      	adds	r7, #24
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}
 800e238:	2000329c 	.word	0x2000329c
 800e23c:	e000ed04 	.word	0xe000ed04

0800e240 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800e240:	b580      	push	{r7, lr}
 800e242:	b08a      	sub	sp, #40	; 0x28
 800e244:	af00      	add	r7, sp, #0
 800e246:	60f8      	str	r0, [r7, #12]
 800e248:	60b9      	str	r1, [r7, #8]
 800e24a:	603b      	str	r3, [r7, #0]
 800e24c:	4613      	mov	r3, r2
 800e24e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800e250:	2301      	movs	r3, #1
 800e252:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d109      	bne.n	800e26e <xTaskGenericNotify+0x2e>
 800e25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e25e:	f383 8811 	msr	BASEPRI, r3
 800e262:	f3bf 8f6f 	isb	sy
 800e266:	f3bf 8f4f 	dsb	sy
 800e26a:	61bb      	str	r3, [r7, #24]
 800e26c:	e7fe      	b.n	800e26c <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800e272:	f7fd fb7b 	bl	800b96c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d003      	beq.n	800e284 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e27c:	6a3b      	ldr	r3, [r7, #32]
 800e27e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800e284:	6a3b      	ldr	r3, [r7, #32]
 800e286:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800e28a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800e28c:	6a3b      	ldr	r3, [r7, #32]
 800e28e:	2202      	movs	r2, #2
 800e290:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800e294:	79fb      	ldrb	r3, [r7, #7]
 800e296:	2b04      	cmp	r3, #4
 800e298:	d827      	bhi.n	800e2ea <xTaskGenericNotify+0xaa>
 800e29a:	a201      	add	r2, pc, #4	; (adr r2, 800e2a0 <xTaskGenericNotify+0x60>)
 800e29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2a0:	0800e309 	.word	0x0800e309
 800e2a4:	0800e2b5 	.word	0x0800e2b5
 800e2a8:	0800e2c3 	.word	0x0800e2c3
 800e2ac:	0800e2cf 	.word	0x0800e2cf
 800e2b0:	0800e2d7 	.word	0x0800e2d7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800e2b4:	6a3b      	ldr	r3, [r7, #32]
 800e2b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	431a      	orrs	r2, r3
 800e2bc:	6a3b      	ldr	r3, [r7, #32]
 800e2be:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800e2c0:	e025      	b.n	800e30e <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800e2c2:	6a3b      	ldr	r3, [r7, #32]
 800e2c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2c6:	1c5a      	adds	r2, r3, #1
 800e2c8:	6a3b      	ldr	r3, [r7, #32]
 800e2ca:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800e2cc:	e01f      	b.n	800e30e <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800e2ce:	6a3b      	ldr	r3, [r7, #32]
 800e2d0:	68ba      	ldr	r2, [r7, #8]
 800e2d2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800e2d4:	e01b      	b.n	800e30e <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800e2d6:	7ffb      	ldrb	r3, [r7, #31]
 800e2d8:	2b02      	cmp	r3, #2
 800e2da:	d003      	beq.n	800e2e4 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e2dc:	6a3b      	ldr	r3, [r7, #32]
 800e2de:	68ba      	ldr	r2, [r7, #8]
 800e2e0:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800e2e2:	e014      	b.n	800e30e <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800e2e8:	e011      	b.n	800e30e <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800e2ea:	6a3b      	ldr	r3, [r7, #32]
 800e2ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2f2:	d00b      	beq.n	800e30c <xTaskGenericNotify+0xcc>
 800e2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f8:	f383 8811 	msr	BASEPRI, r3
 800e2fc:	f3bf 8f6f 	isb	sy
 800e300:	f3bf 8f4f 	dsb	sy
 800e304:	617b      	str	r3, [r7, #20]
 800e306:	e7fe      	b.n	800e306 <xTaskGenericNotify+0xc6>
					break;
 800e308:	bf00      	nop
 800e30a:	e000      	b.n	800e30e <xTaskGenericNotify+0xce>

					break;
 800e30c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800e30e:	7ffb      	ldrb	r3, [r7, #31]
 800e310:	2b01      	cmp	r3, #1
 800e312:	d13b      	bne.n	800e38c <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e314:	6a3b      	ldr	r3, [r7, #32]
 800e316:	3304      	adds	r3, #4
 800e318:	4618      	mov	r0, r3
 800e31a:	f7fd fea1 	bl	800c060 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800e31e:	6a3b      	ldr	r3, [r7, #32]
 800e320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e322:	4b1e      	ldr	r3, [pc, #120]	; (800e39c <xTaskGenericNotify+0x15c>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	429a      	cmp	r2, r3
 800e328:	d903      	bls.n	800e332 <xTaskGenericNotify+0xf2>
 800e32a:	6a3b      	ldr	r3, [r7, #32]
 800e32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e32e:	4a1b      	ldr	r2, [pc, #108]	; (800e39c <xTaskGenericNotify+0x15c>)
 800e330:	6013      	str	r3, [r2, #0]
 800e332:	6a3b      	ldr	r3, [r7, #32]
 800e334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e336:	4613      	mov	r3, r2
 800e338:	009b      	lsls	r3, r3, #2
 800e33a:	4413      	add	r3, r2
 800e33c:	009b      	lsls	r3, r3, #2
 800e33e:	4a18      	ldr	r2, [pc, #96]	; (800e3a0 <xTaskGenericNotify+0x160>)
 800e340:	441a      	add	r2, r3
 800e342:	6a3b      	ldr	r3, [r7, #32]
 800e344:	3304      	adds	r3, #4
 800e346:	4619      	mov	r1, r3
 800e348:	4610      	mov	r0, r2
 800e34a:	f7fd fe2c 	bl	800bfa6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e34e:	6a3b      	ldr	r3, [r7, #32]
 800e350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e352:	2b00      	cmp	r3, #0
 800e354:	d009      	beq.n	800e36a <xTaskGenericNotify+0x12a>
 800e356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e35a:	f383 8811 	msr	BASEPRI, r3
 800e35e:	f3bf 8f6f 	isb	sy
 800e362:	f3bf 8f4f 	dsb	sy
 800e366:	613b      	str	r3, [r7, #16]
 800e368:	e7fe      	b.n	800e368 <xTaskGenericNotify+0x128>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 800e36a:	f7ff fd59 	bl	800de20 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e36e:	6a3b      	ldr	r3, [r7, #32]
 800e370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e372:	4b0c      	ldr	r3, [pc, #48]	; (800e3a4 <xTaskGenericNotify+0x164>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e378:	429a      	cmp	r2, r3
 800e37a:	d907      	bls.n	800e38c <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800e37c:	4b0a      	ldr	r3, [pc, #40]	; (800e3a8 <xTaskGenericNotify+0x168>)
 800e37e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e382:	601a      	str	r2, [r3, #0]
 800e384:	f3bf 8f4f 	dsb	sy
 800e388:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e38c:	f7fd fb1c 	bl	800b9c8 <vPortExitCritical>

		return xReturn;
 800e390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800e392:	4618      	mov	r0, r3
 800e394:	3728      	adds	r7, #40	; 0x28
 800e396:	46bd      	mov	sp, r7
 800e398:	bd80      	pop	{r7, pc}
 800e39a:	bf00      	nop
 800e39c:	20003778 	.word	0x20003778
 800e3a0:	200032a0 	.word	0x200032a0
 800e3a4:	2000329c 	.word	0x2000329c
 800e3a8:	e000ed04 	.word	0xe000ed04

0800e3ac <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b08e      	sub	sp, #56	; 0x38
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	60f8      	str	r0, [r7, #12]
 800e3b4:	60b9      	str	r1, [r7, #8]
 800e3b6:	603b      	str	r3, [r7, #0]
 800e3b8:	4613      	mov	r3, r2
 800e3ba:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800e3bc:	2301      	movs	r3, #1
 800e3be:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d109      	bne.n	800e3da <xTaskGenericNotifyFromISR+0x2e>
 800e3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ca:	f383 8811 	msr	BASEPRI, r3
 800e3ce:	f3bf 8f6f 	isb	sy
 800e3d2:	f3bf 8f4f 	dsb	sy
 800e3d6:	627b      	str	r3, [r7, #36]	; 0x24
 800e3d8:	e7fe      	b.n	800e3d8 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e3da:	f7fd fba3 	bl	800bb24 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800e3e2:	f3ef 8211 	mrs	r2, BASEPRI
 800e3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ea:	f383 8811 	msr	BASEPRI, r3
 800e3ee:	f3bf 8f6f 	isb	sy
 800e3f2:	f3bf 8f4f 	dsb	sy
 800e3f6:	623a      	str	r2, [r7, #32]
 800e3f8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800e3fa:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d003      	beq.n	800e40c <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e406:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800e40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e40e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800e412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800e416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e418:	2202      	movs	r2, #2
 800e41a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800e41e:	79fb      	ldrb	r3, [r7, #7]
 800e420:	2b04      	cmp	r3, #4
 800e422:	d829      	bhi.n	800e478 <xTaskGenericNotifyFromISR+0xcc>
 800e424:	a201      	add	r2, pc, #4	; (adr r2, 800e42c <xTaskGenericNotifyFromISR+0x80>)
 800e426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e42a:	bf00      	nop
 800e42c:	0800e497 	.word	0x0800e497
 800e430:	0800e441 	.word	0x0800e441
 800e434:	0800e44f 	.word	0x0800e44f
 800e438:	0800e45b 	.word	0x0800e45b
 800e43c:	0800e463 	.word	0x0800e463
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800e440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e442:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	431a      	orrs	r2, r3
 800e448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e44a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800e44c:	e026      	b.n	800e49c <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800e44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e452:	1c5a      	adds	r2, r3, #1
 800e454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e456:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800e458:	e020      	b.n	800e49c <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800e45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e45c:	68ba      	ldr	r2, [r7, #8]
 800e45e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800e460:	e01c      	b.n	800e49c <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800e462:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e466:	2b02      	cmp	r3, #2
 800e468:	d003      	beq.n	800e472 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e46c:	68ba      	ldr	r2, [r7, #8]
 800e46e:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800e470:	e014      	b.n	800e49c <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 800e472:	2300      	movs	r3, #0
 800e474:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800e476:	e011      	b.n	800e49c <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800e478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e47a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e47c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e480:	d00b      	beq.n	800e49a <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 800e482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e486:	f383 8811 	msr	BASEPRI, r3
 800e48a:	f3bf 8f6f 	isb	sy
 800e48e:	f3bf 8f4f 	dsb	sy
 800e492:	61bb      	str	r3, [r7, #24]
 800e494:	e7fe      	b.n	800e494 <xTaskGenericNotifyFromISR+0xe8>
					break;
 800e496:	bf00      	nop
 800e498:	e000      	b.n	800e49c <xTaskGenericNotifyFromISR+0xf0>
					break;
 800e49a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800e49c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e4a0:	2b01      	cmp	r3, #1
 800e4a2:	d145      	bne.n	800e530 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d009      	beq.n	800e4c0 <xTaskGenericNotifyFromISR+0x114>
 800e4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b0:	f383 8811 	msr	BASEPRI, r3
 800e4b4:	f3bf 8f6f 	isb	sy
 800e4b8:	f3bf 8f4f 	dsb	sy
 800e4bc:	617b      	str	r3, [r7, #20]
 800e4be:	e7fe      	b.n	800e4be <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4c0:	4b20      	ldr	r3, [pc, #128]	; (800e544 <xTaskGenericNotifyFromISR+0x198>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d11d      	bne.n	800e504 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ca:	3304      	adds	r3, #4
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f7fd fdc7 	bl	800c060 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4d6:	4b1c      	ldr	r3, [pc, #112]	; (800e548 <xTaskGenericNotifyFromISR+0x19c>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d903      	bls.n	800e4e6 <xTaskGenericNotifyFromISR+0x13a>
 800e4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4e2:	4a19      	ldr	r2, [pc, #100]	; (800e548 <xTaskGenericNotifyFromISR+0x19c>)
 800e4e4:	6013      	str	r3, [r2, #0]
 800e4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4ea:	4613      	mov	r3, r2
 800e4ec:	009b      	lsls	r3, r3, #2
 800e4ee:	4413      	add	r3, r2
 800e4f0:	009b      	lsls	r3, r3, #2
 800e4f2:	4a16      	ldr	r2, [pc, #88]	; (800e54c <xTaskGenericNotifyFromISR+0x1a0>)
 800e4f4:	441a      	add	r2, r3
 800e4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4f8:	3304      	adds	r3, #4
 800e4fa:	4619      	mov	r1, r3
 800e4fc:	4610      	mov	r0, r2
 800e4fe:	f7fd fd52 	bl	800bfa6 <vListInsertEnd>
 800e502:	e005      	b.n	800e510 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800e504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e506:	3318      	adds	r3, #24
 800e508:	4619      	mov	r1, r3
 800e50a:	4811      	ldr	r0, [pc, #68]	; (800e550 <xTaskGenericNotifyFromISR+0x1a4>)
 800e50c:	f7fd fd4b 	bl	800bfa6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e514:	4b0f      	ldr	r3, [pc, #60]	; (800e554 <xTaskGenericNotifyFromISR+0x1a8>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e51a:	429a      	cmp	r2, r3
 800e51c:	d908      	bls.n	800e530 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800e51e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e520:	2b00      	cmp	r3, #0
 800e522:	d002      	beq.n	800e52a <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800e524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e526:	2201      	movs	r2, #1
 800e528:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800e52a:	4b0b      	ldr	r3, [pc, #44]	; (800e558 <xTaskGenericNotifyFromISR+0x1ac>)
 800e52c:	2201      	movs	r2, #1
 800e52e:	601a      	str	r2, [r3, #0]
 800e530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e532:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800e53a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800e53c:	4618      	mov	r0, r3
 800e53e:	3738      	adds	r7, #56	; 0x38
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}
 800e544:	20003798 	.word	0x20003798
 800e548:	20003778 	.word	0x20003778
 800e54c:	200032a0 	.word	0x200032a0
 800e550:	20003730 	.word	0x20003730
 800e554:	2000329c 	.word	0x2000329c
 800e558:	20003784 	.word	0x20003784

0800e55c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b084      	sub	sp, #16
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
 800e564:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e566:	4b21      	ldr	r3, [pc, #132]	; (800e5ec <prvAddCurrentTaskToDelayedList+0x90>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e56c:	4b20      	ldr	r3, [pc, #128]	; (800e5f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	3304      	adds	r3, #4
 800e572:	4618      	mov	r0, r3
 800e574:	f7fd fd74 	bl	800c060 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e57e:	d10a      	bne.n	800e596 <prvAddCurrentTaskToDelayedList+0x3a>
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d007      	beq.n	800e596 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e586:	4b1a      	ldr	r3, [pc, #104]	; (800e5f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	3304      	adds	r3, #4
 800e58c:	4619      	mov	r1, r3
 800e58e:	4819      	ldr	r0, [pc, #100]	; (800e5f4 <prvAddCurrentTaskToDelayedList+0x98>)
 800e590:	f7fd fd09 	bl	800bfa6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e594:	e026      	b.n	800e5e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e596:	68fa      	ldr	r2, [r7, #12]
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	4413      	add	r3, r2
 800e59c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e59e:	4b14      	ldr	r3, [pc, #80]	; (800e5f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	68ba      	ldr	r2, [r7, #8]
 800e5a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e5a6:	68ba      	ldr	r2, [r7, #8]
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	429a      	cmp	r2, r3
 800e5ac:	d209      	bcs.n	800e5c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5ae:	4b12      	ldr	r3, [pc, #72]	; (800e5f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e5b0:	681a      	ldr	r2, [r3, #0]
 800e5b2:	4b0f      	ldr	r3, [pc, #60]	; (800e5f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	3304      	adds	r3, #4
 800e5b8:	4619      	mov	r1, r3
 800e5ba:	4610      	mov	r0, r2
 800e5bc:	f7fd fd17 	bl	800bfee <vListInsert>
}
 800e5c0:	e010      	b.n	800e5e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5c2:	4b0e      	ldr	r3, [pc, #56]	; (800e5fc <prvAddCurrentTaskToDelayedList+0xa0>)
 800e5c4:	681a      	ldr	r2, [r3, #0]
 800e5c6:	4b0a      	ldr	r3, [pc, #40]	; (800e5f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	3304      	adds	r3, #4
 800e5cc:	4619      	mov	r1, r3
 800e5ce:	4610      	mov	r0, r2
 800e5d0:	f7fd fd0d 	bl	800bfee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e5d4:	4b0a      	ldr	r3, [pc, #40]	; (800e600 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	68ba      	ldr	r2, [r7, #8]
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d202      	bcs.n	800e5e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e5de:	4a08      	ldr	r2, [pc, #32]	; (800e600 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	6013      	str	r3, [r2, #0]
}
 800e5e4:	bf00      	nop
 800e5e6:	3710      	adds	r7, #16
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}
 800e5ec:	20003774 	.word	0x20003774
 800e5f0:	2000329c 	.word	0x2000329c
 800e5f4:	2000375c 	.word	0x2000375c
 800e5f8:	2000372c 	.word	0x2000372c
 800e5fc:	20003728 	.word	0x20003728
 800e600:	20003790 	.word	0x20003790

0800e604 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b08a      	sub	sp, #40	; 0x28
 800e608:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e60a:	2300      	movs	r3, #0
 800e60c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e60e:	f000 faff 	bl	800ec10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e612:	4b1c      	ldr	r3, [pc, #112]	; (800e684 <xTimerCreateTimerTask+0x80>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d021      	beq.n	800e65e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e61a:	2300      	movs	r3, #0
 800e61c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e61e:	2300      	movs	r3, #0
 800e620:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e622:	1d3a      	adds	r2, r7, #4
 800e624:	f107 0108 	add.w	r1, r7, #8
 800e628:	f107 030c 	add.w	r3, r7, #12
 800e62c:	4618      	mov	r0, r3
 800e62e:	f7fd f85f 	bl	800b6f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e632:	6879      	ldr	r1, [r7, #4]
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	68fa      	ldr	r2, [r7, #12]
 800e638:	9202      	str	r2, [sp, #8]
 800e63a:	9301      	str	r3, [sp, #4]
 800e63c:	2302      	movs	r3, #2
 800e63e:	9300      	str	r3, [sp, #0]
 800e640:	2300      	movs	r3, #0
 800e642:	460a      	mov	r2, r1
 800e644:	4910      	ldr	r1, [pc, #64]	; (800e688 <xTimerCreateTimerTask+0x84>)
 800e646:	4811      	ldr	r0, [pc, #68]	; (800e68c <xTimerCreateTimerTask+0x88>)
 800e648:	f7fe fdd6 	bl	800d1f8 <xTaskCreateStatic>
 800e64c:	4602      	mov	r2, r0
 800e64e:	4b10      	ldr	r3, [pc, #64]	; (800e690 <xTimerCreateTimerTask+0x8c>)
 800e650:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e652:	4b0f      	ldr	r3, [pc, #60]	; (800e690 <xTimerCreateTimerTask+0x8c>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d001      	beq.n	800e65e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e65a:	2301      	movs	r3, #1
 800e65c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d109      	bne.n	800e678 <xTimerCreateTimerTask+0x74>
	__asm volatile
 800e664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e668:	f383 8811 	msr	BASEPRI, r3
 800e66c:	f3bf 8f6f 	isb	sy
 800e670:	f3bf 8f4f 	dsb	sy
 800e674:	613b      	str	r3, [r7, #16]
 800e676:	e7fe      	b.n	800e676 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800e678:	697b      	ldr	r3, [r7, #20]
}
 800e67a:	4618      	mov	r0, r3
 800e67c:	3718      	adds	r7, #24
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}
 800e682:	bf00      	nop
 800e684:	200037cc 	.word	0x200037cc
 800e688:	08011cb0 	.word	0x08011cb0
 800e68c:	0800e7c5 	.word	0x0800e7c5
 800e690:	200037d0 	.word	0x200037d0

0800e694 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b08a      	sub	sp, #40	; 0x28
 800e698:	af00      	add	r7, sp, #0
 800e69a:	60f8      	str	r0, [r7, #12]
 800e69c:	60b9      	str	r1, [r7, #8]
 800e69e:	607a      	str	r2, [r7, #4]
 800e6a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d109      	bne.n	800e6c0 <xTimerGenericCommand+0x2c>
 800e6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6b0:	f383 8811 	msr	BASEPRI, r3
 800e6b4:	f3bf 8f6f 	isb	sy
 800e6b8:	f3bf 8f4f 	dsb	sy
 800e6bc:	623b      	str	r3, [r7, #32]
 800e6be:	e7fe      	b.n	800e6be <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e6c0:	4b19      	ldr	r3, [pc, #100]	; (800e728 <xTimerGenericCommand+0x94>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d02a      	beq.n	800e71e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	2b05      	cmp	r3, #5
 800e6d8:	dc18      	bgt.n	800e70c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e6da:	f7ff fbd1 	bl	800de80 <xTaskGetSchedulerState>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	2b02      	cmp	r3, #2
 800e6e2:	d109      	bne.n	800e6f8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e6e4:	4b10      	ldr	r3, [pc, #64]	; (800e728 <xTimerGenericCommand+0x94>)
 800e6e6:	6818      	ldr	r0, [r3, #0]
 800e6e8:	f107 0110 	add.w	r1, r7, #16
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6f0:	f7fd ff38 	bl	800c564 <xQueueGenericSend>
 800e6f4:	6278      	str	r0, [r7, #36]	; 0x24
 800e6f6:	e012      	b.n	800e71e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e6f8:	4b0b      	ldr	r3, [pc, #44]	; (800e728 <xTimerGenericCommand+0x94>)
 800e6fa:	6818      	ldr	r0, [r3, #0]
 800e6fc:	f107 0110 	add.w	r1, r7, #16
 800e700:	2300      	movs	r3, #0
 800e702:	2200      	movs	r2, #0
 800e704:	f7fd ff2e 	bl	800c564 <xQueueGenericSend>
 800e708:	6278      	str	r0, [r7, #36]	; 0x24
 800e70a:	e008      	b.n	800e71e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e70c:	4b06      	ldr	r3, [pc, #24]	; (800e728 <xTimerGenericCommand+0x94>)
 800e70e:	6818      	ldr	r0, [r3, #0]
 800e710:	f107 0110 	add.w	r1, r7, #16
 800e714:	2300      	movs	r3, #0
 800e716:	683a      	ldr	r2, [r7, #0]
 800e718:	f7fe f81e 	bl	800c758 <xQueueGenericSendFromISR>
 800e71c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e720:	4618      	mov	r0, r3
 800e722:	3728      	adds	r7, #40	; 0x28
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}
 800e728:	200037cc 	.word	0x200037cc

0800e72c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b088      	sub	sp, #32
 800e730:	af02      	add	r7, sp, #8
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e736:	4b22      	ldr	r3, [pc, #136]	; (800e7c0 <prvProcessExpiredTimer+0x94>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	68db      	ldr	r3, [r3, #12]
 800e73c:	68db      	ldr	r3, [r3, #12]
 800e73e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	3304      	adds	r3, #4
 800e744:	4618      	mov	r0, r3
 800e746:	f7fd fc8b 	bl	800c060 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e74a:	697b      	ldr	r3, [r7, #20]
 800e74c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e750:	f003 0304 	and.w	r3, r3, #4
 800e754:	2b00      	cmp	r3, #0
 800e756:	d021      	beq.n	800e79c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	699a      	ldr	r2, [r3, #24]
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	18d1      	adds	r1, r2, r3
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	683a      	ldr	r2, [r7, #0]
 800e764:	6978      	ldr	r0, [r7, #20]
 800e766:	f000 f8d1 	bl	800e90c <prvInsertTimerInActiveList>
 800e76a:	4603      	mov	r3, r0
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d01e      	beq.n	800e7ae <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e770:	2300      	movs	r3, #0
 800e772:	9300      	str	r3, [sp, #0]
 800e774:	2300      	movs	r3, #0
 800e776:	687a      	ldr	r2, [r7, #4]
 800e778:	2100      	movs	r1, #0
 800e77a:	6978      	ldr	r0, [r7, #20]
 800e77c:	f7ff ff8a 	bl	800e694 <xTimerGenericCommand>
 800e780:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e782:	693b      	ldr	r3, [r7, #16]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d112      	bne.n	800e7ae <prvProcessExpiredTimer+0x82>
 800e788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e78c:	f383 8811 	msr	BASEPRI, r3
 800e790:	f3bf 8f6f 	isb	sy
 800e794:	f3bf 8f4f 	dsb	sy
 800e798:	60fb      	str	r3, [r7, #12]
 800e79a:	e7fe      	b.n	800e79a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7a2:	f023 0301 	bic.w	r3, r3, #1
 800e7a6:	b2da      	uxtb	r2, r3
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	6a1b      	ldr	r3, [r3, #32]
 800e7b2:	6978      	ldr	r0, [r7, #20]
 800e7b4:	4798      	blx	r3
}
 800e7b6:	bf00      	nop
 800e7b8:	3718      	adds	r7, #24
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
 800e7be:	bf00      	nop
 800e7c0:	200037c4 	.word	0x200037c4

0800e7c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b084      	sub	sp, #16
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e7cc:	f107 0308 	add.w	r3, r7, #8
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f000 f857 	bl	800e884 <prvGetNextExpireTime>
 800e7d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	4619      	mov	r1, r3
 800e7dc:	68f8      	ldr	r0, [r7, #12]
 800e7de:	f000 f803 	bl	800e7e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e7e2:	f000 f8d5 	bl	800e990 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e7e6:	e7f1      	b.n	800e7cc <prvTimerTask+0x8>

0800e7e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b084      	sub	sp, #16
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e7f2:	f7fe ff03 	bl	800d5fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e7f6:	f107 0308 	add.w	r3, r7, #8
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f000 f866 	bl	800e8cc <prvSampleTimeNow>
 800e800:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d130      	bne.n	800e86a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d10a      	bne.n	800e824 <prvProcessTimerOrBlockTask+0x3c>
 800e80e:	687a      	ldr	r2, [r7, #4]
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	429a      	cmp	r2, r3
 800e814:	d806      	bhi.n	800e824 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e816:	f7fe ff37 	bl	800d688 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e81a:	68f9      	ldr	r1, [r7, #12]
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f7ff ff85 	bl	800e72c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e822:	e024      	b.n	800e86e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d008      	beq.n	800e83c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e82a:	4b13      	ldr	r3, [pc, #76]	; (800e878 <prvProcessTimerOrBlockTask+0x90>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d101      	bne.n	800e838 <prvProcessTimerOrBlockTask+0x50>
 800e834:	2301      	movs	r3, #1
 800e836:	e000      	b.n	800e83a <prvProcessTimerOrBlockTask+0x52>
 800e838:	2300      	movs	r3, #0
 800e83a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e83c:	4b0f      	ldr	r3, [pc, #60]	; (800e87c <prvProcessTimerOrBlockTask+0x94>)
 800e83e:	6818      	ldr	r0, [r3, #0]
 800e840:	687a      	ldr	r2, [r7, #4]
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	1ad3      	subs	r3, r2, r3
 800e846:	683a      	ldr	r2, [r7, #0]
 800e848:	4619      	mov	r1, r3
 800e84a:	f7fe fca1 	bl	800d190 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e84e:	f7fe ff1b 	bl	800d688 <xTaskResumeAll>
 800e852:	4603      	mov	r3, r0
 800e854:	2b00      	cmp	r3, #0
 800e856:	d10a      	bne.n	800e86e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e858:	4b09      	ldr	r3, [pc, #36]	; (800e880 <prvProcessTimerOrBlockTask+0x98>)
 800e85a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e85e:	601a      	str	r2, [r3, #0]
 800e860:	f3bf 8f4f 	dsb	sy
 800e864:	f3bf 8f6f 	isb	sy
}
 800e868:	e001      	b.n	800e86e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e86a:	f7fe ff0d 	bl	800d688 <xTaskResumeAll>
}
 800e86e:	bf00      	nop
 800e870:	3710      	adds	r7, #16
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}
 800e876:	bf00      	nop
 800e878:	200037c8 	.word	0x200037c8
 800e87c:	200037cc 	.word	0x200037cc
 800e880:	e000ed04 	.word	0xe000ed04

0800e884 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e884:	b480      	push	{r7}
 800e886:	b085      	sub	sp, #20
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e88c:	4b0e      	ldr	r3, [pc, #56]	; (800e8c8 <prvGetNextExpireTime+0x44>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d101      	bne.n	800e89a <prvGetNextExpireTime+0x16>
 800e896:	2201      	movs	r2, #1
 800e898:	e000      	b.n	800e89c <prvGetNextExpireTime+0x18>
 800e89a:	2200      	movs	r2, #0
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d105      	bne.n	800e8b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e8a8:	4b07      	ldr	r3, [pc, #28]	; (800e8c8 <prvGetNextExpireTime+0x44>)
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	68db      	ldr	r3, [r3, #12]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	60fb      	str	r3, [r7, #12]
 800e8b2:	e001      	b.n	800e8b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
}
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	3714      	adds	r7, #20
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c4:	4770      	bx	lr
 800e8c6:	bf00      	nop
 800e8c8:	200037c4 	.word	0x200037c4

0800e8cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b084      	sub	sp, #16
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e8d4:	f7fe ff74 	bl	800d7c0 <xTaskGetTickCount>
 800e8d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e8da:	4b0b      	ldr	r3, [pc, #44]	; (800e908 <prvSampleTimeNow+0x3c>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	68fa      	ldr	r2, [r7, #12]
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d205      	bcs.n	800e8f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e8e4:	f000 f930 	bl	800eb48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2201      	movs	r2, #1
 800e8ec:	601a      	str	r2, [r3, #0]
 800e8ee:	e002      	b.n	800e8f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e8f6:	4a04      	ldr	r2, [pc, #16]	; (800e908 <prvSampleTimeNow+0x3c>)
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	3710      	adds	r7, #16
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}
 800e906:	bf00      	nop
 800e908:	200037d4 	.word	0x200037d4

0800e90c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b086      	sub	sp, #24
 800e910:	af00      	add	r7, sp, #0
 800e912:	60f8      	str	r0, [r7, #12]
 800e914:	60b9      	str	r1, [r7, #8]
 800e916:	607a      	str	r2, [r7, #4]
 800e918:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e91a:	2300      	movs	r3, #0
 800e91c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	68ba      	ldr	r2, [r7, #8]
 800e922:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	68fa      	ldr	r2, [r7, #12]
 800e928:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e92a:	68ba      	ldr	r2, [r7, #8]
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	429a      	cmp	r2, r3
 800e930:	d812      	bhi.n	800e958 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e932:	687a      	ldr	r2, [r7, #4]
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	1ad2      	subs	r2, r2, r3
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	699b      	ldr	r3, [r3, #24]
 800e93c:	429a      	cmp	r2, r3
 800e93e:	d302      	bcc.n	800e946 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e940:	2301      	movs	r3, #1
 800e942:	617b      	str	r3, [r7, #20]
 800e944:	e01b      	b.n	800e97e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e946:	4b10      	ldr	r3, [pc, #64]	; (800e988 <prvInsertTimerInActiveList+0x7c>)
 800e948:	681a      	ldr	r2, [r3, #0]
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	3304      	adds	r3, #4
 800e94e:	4619      	mov	r1, r3
 800e950:	4610      	mov	r0, r2
 800e952:	f7fd fb4c 	bl	800bfee <vListInsert>
 800e956:	e012      	b.n	800e97e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e958:	687a      	ldr	r2, [r7, #4]
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	429a      	cmp	r2, r3
 800e95e:	d206      	bcs.n	800e96e <prvInsertTimerInActiveList+0x62>
 800e960:	68ba      	ldr	r2, [r7, #8]
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	429a      	cmp	r2, r3
 800e966:	d302      	bcc.n	800e96e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e968:	2301      	movs	r3, #1
 800e96a:	617b      	str	r3, [r7, #20]
 800e96c:	e007      	b.n	800e97e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e96e:	4b07      	ldr	r3, [pc, #28]	; (800e98c <prvInsertTimerInActiveList+0x80>)
 800e970:	681a      	ldr	r2, [r3, #0]
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	3304      	adds	r3, #4
 800e976:	4619      	mov	r1, r3
 800e978:	4610      	mov	r0, r2
 800e97a:	f7fd fb38 	bl	800bfee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e97e:	697b      	ldr	r3, [r7, #20]
}
 800e980:	4618      	mov	r0, r3
 800e982:	3718      	adds	r7, #24
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}
 800e988:	200037c8 	.word	0x200037c8
 800e98c:	200037c4 	.word	0x200037c4

0800e990 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b08e      	sub	sp, #56	; 0x38
 800e994:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e996:	e0c6      	b.n	800eb26 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	da17      	bge.n	800e9ce <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e99e:	1d3b      	adds	r3, r7, #4
 800e9a0:	3304      	adds	r3, #4
 800e9a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d109      	bne.n	800e9be <prvProcessReceivedCommands+0x2e>
 800e9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ae:	f383 8811 	msr	BASEPRI, r3
 800e9b2:	f3bf 8f6f 	isb	sy
 800e9b6:	f3bf 8f4f 	dsb	sy
 800e9ba:	61fb      	str	r3, [r7, #28]
 800e9bc:	e7fe      	b.n	800e9bc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9c4:	6850      	ldr	r0, [r2, #4]
 800e9c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9c8:	6892      	ldr	r2, [r2, #8]
 800e9ca:	4611      	mov	r1, r2
 800e9cc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	f2c0 80a7 	blt.w	800eb24 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9dc:	695b      	ldr	r3, [r3, #20]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d004      	beq.n	800e9ec <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e4:	3304      	adds	r3, #4
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f7fd fb3a 	bl	800c060 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e9ec:	463b      	mov	r3, r7
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7ff ff6c 	bl	800e8cc <prvSampleTimeNow>
 800e9f4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2b09      	cmp	r3, #9
 800e9fa:	f200 8094 	bhi.w	800eb26 <prvProcessReceivedCommands+0x196>
 800e9fe:	a201      	add	r2, pc, #4	; (adr r2, 800ea04 <prvProcessReceivedCommands+0x74>)
 800ea00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea04:	0800ea2d 	.word	0x0800ea2d
 800ea08:	0800ea2d 	.word	0x0800ea2d
 800ea0c:	0800ea2d 	.word	0x0800ea2d
 800ea10:	0800ea9f 	.word	0x0800ea9f
 800ea14:	0800eab3 	.word	0x0800eab3
 800ea18:	0800eafb 	.word	0x0800eafb
 800ea1c:	0800ea2d 	.word	0x0800ea2d
 800ea20:	0800ea2d 	.word	0x0800ea2d
 800ea24:	0800ea9f 	.word	0x0800ea9f
 800ea28:	0800eab3 	.word	0x0800eab3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ea2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea32:	f043 0301 	orr.w	r3, r3, #1
 800ea36:	b2da      	uxtb	r2, r3
 800ea38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ea3e:	68ba      	ldr	r2, [r7, #8]
 800ea40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea42:	699b      	ldr	r3, [r3, #24]
 800ea44:	18d1      	adds	r1, r2, r3
 800ea46:	68bb      	ldr	r3, [r7, #8]
 800ea48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea4c:	f7ff ff5e 	bl	800e90c <prvInsertTimerInActiveList>
 800ea50:	4603      	mov	r3, r0
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d067      	beq.n	800eb26 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ea56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea58:	6a1b      	ldr	r3, [r3, #32]
 800ea5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ea5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea64:	f003 0304 	and.w	r3, r3, #4
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d05c      	beq.n	800eb26 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ea6c:	68ba      	ldr	r2, [r7, #8]
 800ea6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea70:	699b      	ldr	r3, [r3, #24]
 800ea72:	441a      	add	r2, r3
 800ea74:	2300      	movs	r3, #0
 800ea76:	9300      	str	r3, [sp, #0]
 800ea78:	2300      	movs	r3, #0
 800ea7a:	2100      	movs	r1, #0
 800ea7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea7e:	f7ff fe09 	bl	800e694 <xTimerGenericCommand>
 800ea82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ea84:	6a3b      	ldr	r3, [r7, #32]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d14d      	bne.n	800eb26 <prvProcessReceivedCommands+0x196>
 800ea8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea8e:	f383 8811 	msr	BASEPRI, r3
 800ea92:	f3bf 8f6f 	isb	sy
 800ea96:	f3bf 8f4f 	dsb	sy
 800ea9a:	61bb      	str	r3, [r7, #24]
 800ea9c:	e7fe      	b.n	800ea9c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eaa4:	f023 0301 	bic.w	r3, r3, #1
 800eaa8:	b2da      	uxtb	r2, r3
 800eaaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800eab0:	e039      	b.n	800eb26 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eab4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eab8:	f043 0301 	orr.w	r3, r3, #1
 800eabc:	b2da      	uxtb	r2, r3
 800eabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eac0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800eac4:	68ba      	ldr	r2, [r7, #8]
 800eac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eac8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800eaca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eacc:	699b      	ldr	r3, [r3, #24]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d109      	bne.n	800eae6 <prvProcessReceivedCommands+0x156>
 800ead2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead6:	f383 8811 	msr	BASEPRI, r3
 800eada:	f3bf 8f6f 	isb	sy
 800eade:	f3bf 8f4f 	dsb	sy
 800eae2:	617b      	str	r3, [r7, #20]
 800eae4:	e7fe      	b.n	800eae4 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800eae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae8:	699a      	ldr	r2, [r3, #24]
 800eaea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaec:	18d1      	adds	r1, r2, r3
 800eaee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eaf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eaf4:	f7ff ff0a 	bl	800e90c <prvInsertTimerInActiveList>
					break;
 800eaf8:	e015      	b.n	800eb26 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800eafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eafc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb00:	f003 0302 	and.w	r3, r3, #2
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d103      	bne.n	800eb10 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800eb08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb0a:	f7fd f90b 	bl	800bd24 <vPortFree>
 800eb0e:	e00a      	b.n	800eb26 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb16:	f023 0301 	bic.w	r3, r3, #1
 800eb1a:	b2da      	uxtb	r2, r3
 800eb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800eb22:	e000      	b.n	800eb26 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800eb24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eb26:	4b07      	ldr	r3, [pc, #28]	; (800eb44 <prvProcessReceivedCommands+0x1b4>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	1d39      	adds	r1, r7, #4
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f7fd ff30 	bl	800c994 <xQueueReceive>
 800eb34:	4603      	mov	r3, r0
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	f47f af2e 	bne.w	800e998 <prvProcessReceivedCommands+0x8>
	}
}
 800eb3c:	bf00      	nop
 800eb3e:	3730      	adds	r7, #48	; 0x30
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}
 800eb44:	200037cc 	.word	0x200037cc

0800eb48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b088      	sub	sp, #32
 800eb4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eb4e:	e047      	b.n	800ebe0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eb50:	4b2d      	ldr	r3, [pc, #180]	; (800ec08 <prvSwitchTimerLists+0xc0>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	68db      	ldr	r3, [r3, #12]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb5a:	4b2b      	ldr	r3, [pc, #172]	; (800ec08 <prvSwitchTimerLists+0xc0>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	68db      	ldr	r3, [r3, #12]
 800eb60:	68db      	ldr	r3, [r3, #12]
 800eb62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	3304      	adds	r3, #4
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f7fd fa79 	bl	800c060 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	6a1b      	ldr	r3, [r3, #32]
 800eb72:	68f8      	ldr	r0, [r7, #12]
 800eb74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb7c:	f003 0304 	and.w	r3, r3, #4
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d02d      	beq.n	800ebe0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	699b      	ldr	r3, [r3, #24]
 800eb88:	693a      	ldr	r2, [r7, #16]
 800eb8a:	4413      	add	r3, r2
 800eb8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800eb8e:	68ba      	ldr	r2, [r7, #8]
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d90e      	bls.n	800ebb4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	68ba      	ldr	r2, [r7, #8]
 800eb9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	68fa      	ldr	r2, [r7, #12]
 800eba0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eba2:	4b19      	ldr	r3, [pc, #100]	; (800ec08 <prvSwitchTimerLists+0xc0>)
 800eba4:	681a      	ldr	r2, [r3, #0]
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	3304      	adds	r3, #4
 800ebaa:	4619      	mov	r1, r3
 800ebac:	4610      	mov	r0, r2
 800ebae:	f7fd fa1e 	bl	800bfee <vListInsert>
 800ebb2:	e015      	b.n	800ebe0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	9300      	str	r3, [sp, #0]
 800ebb8:	2300      	movs	r3, #0
 800ebba:	693a      	ldr	r2, [r7, #16]
 800ebbc:	2100      	movs	r1, #0
 800ebbe:	68f8      	ldr	r0, [r7, #12]
 800ebc0:	f7ff fd68 	bl	800e694 <xTimerGenericCommand>
 800ebc4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d109      	bne.n	800ebe0 <prvSwitchTimerLists+0x98>
 800ebcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd0:	f383 8811 	msr	BASEPRI, r3
 800ebd4:	f3bf 8f6f 	isb	sy
 800ebd8:	f3bf 8f4f 	dsb	sy
 800ebdc:	603b      	str	r3, [r7, #0]
 800ebde:	e7fe      	b.n	800ebde <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ebe0:	4b09      	ldr	r3, [pc, #36]	; (800ec08 <prvSwitchTimerLists+0xc0>)
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d1b2      	bne.n	800eb50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ebea:	4b07      	ldr	r3, [pc, #28]	; (800ec08 <prvSwitchTimerLists+0xc0>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ebf0:	4b06      	ldr	r3, [pc, #24]	; (800ec0c <prvSwitchTimerLists+0xc4>)
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	4a04      	ldr	r2, [pc, #16]	; (800ec08 <prvSwitchTimerLists+0xc0>)
 800ebf6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ebf8:	4a04      	ldr	r2, [pc, #16]	; (800ec0c <prvSwitchTimerLists+0xc4>)
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	6013      	str	r3, [r2, #0]
}
 800ebfe:	bf00      	nop
 800ec00:	3718      	adds	r7, #24
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}
 800ec06:	bf00      	nop
 800ec08:	200037c4 	.word	0x200037c4
 800ec0c:	200037c8 	.word	0x200037c8

0800ec10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ec16:	f7fc fea9 	bl	800b96c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ec1a:	4b15      	ldr	r3, [pc, #84]	; (800ec70 <prvCheckForValidListAndQueue+0x60>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d120      	bne.n	800ec64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ec22:	4814      	ldr	r0, [pc, #80]	; (800ec74 <prvCheckForValidListAndQueue+0x64>)
 800ec24:	f7fd f992 	bl	800bf4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ec28:	4813      	ldr	r0, [pc, #76]	; (800ec78 <prvCheckForValidListAndQueue+0x68>)
 800ec2a:	f7fd f98f 	bl	800bf4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ec2e:	4b13      	ldr	r3, [pc, #76]	; (800ec7c <prvCheckForValidListAndQueue+0x6c>)
 800ec30:	4a10      	ldr	r2, [pc, #64]	; (800ec74 <prvCheckForValidListAndQueue+0x64>)
 800ec32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ec34:	4b12      	ldr	r3, [pc, #72]	; (800ec80 <prvCheckForValidListAndQueue+0x70>)
 800ec36:	4a10      	ldr	r2, [pc, #64]	; (800ec78 <prvCheckForValidListAndQueue+0x68>)
 800ec38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	9300      	str	r3, [sp, #0]
 800ec3e:	4b11      	ldr	r3, [pc, #68]	; (800ec84 <prvCheckForValidListAndQueue+0x74>)
 800ec40:	4a11      	ldr	r2, [pc, #68]	; (800ec88 <prvCheckForValidListAndQueue+0x78>)
 800ec42:	2110      	movs	r1, #16
 800ec44:	200a      	movs	r0, #10
 800ec46:	f7fd fa9d 	bl	800c184 <xQueueGenericCreateStatic>
 800ec4a:	4602      	mov	r2, r0
 800ec4c:	4b08      	ldr	r3, [pc, #32]	; (800ec70 <prvCheckForValidListAndQueue+0x60>)
 800ec4e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ec50:	4b07      	ldr	r3, [pc, #28]	; (800ec70 <prvCheckForValidListAndQueue+0x60>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d005      	beq.n	800ec64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ec58:	4b05      	ldr	r3, [pc, #20]	; (800ec70 <prvCheckForValidListAndQueue+0x60>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	490b      	ldr	r1, [pc, #44]	; (800ec8c <prvCheckForValidListAndQueue+0x7c>)
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f7fe fa44 	bl	800d0ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ec64:	f7fc feb0 	bl	800b9c8 <vPortExitCritical>
}
 800ec68:	bf00      	nop
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}
 800ec6e:	bf00      	nop
 800ec70:	200037cc 	.word	0x200037cc
 800ec74:	2000379c 	.word	0x2000379c
 800ec78:	200037b0 	.word	0x200037b0
 800ec7c:	200037c4 	.word	0x200037c4
 800ec80:	200037c8 	.word	0x200037c8
 800ec84:	20003878 	.word	0x20003878
 800ec88:	200037d8 	.word	0x200037d8
 800ec8c:	08011cb8 	.word	0x08011cb8

0800ec90 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800ec90:	b480      	push	{r7}
 800ec92:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800ec94:	4b05      	ldr	r3, [pc, #20]	; (800ecac <UTIL_LPM_Init+0x1c>)
 800ec96:	2200      	movs	r2, #0
 800ec98:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800ec9a:	4b05      	ldr	r3, [pc, #20]	; (800ecb0 <UTIL_LPM_Init+0x20>)
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800eca0:	bf00      	nop
 800eca2:	46bd      	mov	sp, r7
 800eca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca8:	4770      	bx	lr
 800ecaa:	bf00      	nop
 800ecac:	200038c8 	.word	0x200038c8
 800ecb0:	200038cc 	.word	0x200038cc

0800ecb4 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b087      	sub	sp, #28
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
 800ecbc:	460b      	mov	r3, r1
 800ecbe:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecc0:	f3ef 8310 	mrs	r3, PRIMASK
 800ecc4:	613b      	str	r3, [r7, #16]
  return(result);
 800ecc6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ecc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ecca:	b672      	cpsid	i
  
  switch(state)
 800eccc:	78fb      	ldrb	r3, [r7, #3]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d009      	beq.n	800ece6 <UTIL_LPM_SetOffMode+0x32>
 800ecd2:	2b01      	cmp	r3, #1
 800ecd4:	d000      	beq.n	800ecd8 <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 800ecd6:	e00e      	b.n	800ecf6 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 800ecd8:	4b0c      	ldr	r3, [pc, #48]	; (800ed0c <UTIL_LPM_SetOffMode+0x58>)
 800ecda:	681a      	ldr	r2, [r3, #0]
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	4313      	orrs	r3, r2
 800ece0:	4a0a      	ldr	r2, [pc, #40]	; (800ed0c <UTIL_LPM_SetOffMode+0x58>)
 800ece2:	6013      	str	r3, [r2, #0]
      break;
 800ece4:	e007      	b.n	800ecf6 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	43da      	mvns	r2, r3
 800ecea:	4b08      	ldr	r3, [pc, #32]	; (800ed0c <UTIL_LPM_SetOffMode+0x58>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	4013      	ands	r3, r2
 800ecf0:	4a06      	ldr	r2, [pc, #24]	; (800ed0c <UTIL_LPM_SetOffMode+0x58>)
 800ecf2:	6013      	str	r3, [r2, #0]
      break;
 800ecf4:	bf00      	nop
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800ed00:	bf00      	nop
 800ed02:	371c      	adds	r7, #28
 800ed04:	46bd      	mov	sp, r7
 800ed06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0a:	4770      	bx	lr
 800ed0c:	200038cc 	.word	0x200038cc

0800ed10 <__errno>:
 800ed10:	4b01      	ldr	r3, [pc, #4]	; (800ed18 <__errno+0x8>)
 800ed12:	6818      	ldr	r0, [r3, #0]
 800ed14:	4770      	bx	lr
 800ed16:	bf00      	nop
 800ed18:	2000003c 	.word	0x2000003c

0800ed1c <__libc_init_array>:
 800ed1c:	b570      	push	{r4, r5, r6, lr}
 800ed1e:	4e0d      	ldr	r6, [pc, #52]	; (800ed54 <__libc_init_array+0x38>)
 800ed20:	4c0d      	ldr	r4, [pc, #52]	; (800ed58 <__libc_init_array+0x3c>)
 800ed22:	1ba4      	subs	r4, r4, r6
 800ed24:	10a4      	asrs	r4, r4, #2
 800ed26:	2500      	movs	r5, #0
 800ed28:	42a5      	cmp	r5, r4
 800ed2a:	d109      	bne.n	800ed40 <__libc_init_array+0x24>
 800ed2c:	4e0b      	ldr	r6, [pc, #44]	; (800ed5c <__libc_init_array+0x40>)
 800ed2e:	4c0c      	ldr	r4, [pc, #48]	; (800ed60 <__libc_init_array+0x44>)
 800ed30:	f002 fbae 	bl	8011490 <_init>
 800ed34:	1ba4      	subs	r4, r4, r6
 800ed36:	10a4      	asrs	r4, r4, #2
 800ed38:	2500      	movs	r5, #0
 800ed3a:	42a5      	cmp	r5, r4
 800ed3c:	d105      	bne.n	800ed4a <__libc_init_array+0x2e>
 800ed3e:	bd70      	pop	{r4, r5, r6, pc}
 800ed40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ed44:	4798      	blx	r3
 800ed46:	3501      	adds	r5, #1
 800ed48:	e7ee      	b.n	800ed28 <__libc_init_array+0xc>
 800ed4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ed4e:	4798      	blx	r3
 800ed50:	3501      	adds	r5, #1
 800ed52:	e7f2      	b.n	800ed3a <__libc_init_array+0x1e>
 800ed54:	08012248 	.word	0x08012248
 800ed58:	08012248 	.word	0x08012248
 800ed5c:	08012248 	.word	0x08012248
 800ed60:	0801224c 	.word	0x0801224c

0800ed64 <memcpy>:
 800ed64:	b510      	push	{r4, lr}
 800ed66:	1e43      	subs	r3, r0, #1
 800ed68:	440a      	add	r2, r1
 800ed6a:	4291      	cmp	r1, r2
 800ed6c:	d100      	bne.n	800ed70 <memcpy+0xc>
 800ed6e:	bd10      	pop	{r4, pc}
 800ed70:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed74:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed78:	e7f7      	b.n	800ed6a <memcpy+0x6>

0800ed7a <memset>:
 800ed7a:	4402      	add	r2, r0
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	4293      	cmp	r3, r2
 800ed80:	d100      	bne.n	800ed84 <memset+0xa>
 800ed82:	4770      	bx	lr
 800ed84:	f803 1b01 	strb.w	r1, [r3], #1
 800ed88:	e7f9      	b.n	800ed7e <memset+0x4>

0800ed8a <__cvt>:
 800ed8a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed8e:	ec55 4b10 	vmov	r4, r5, d0
 800ed92:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800ed94:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ed98:	2d00      	cmp	r5, #0
 800ed9a:	460e      	mov	r6, r1
 800ed9c:	4691      	mov	r9, r2
 800ed9e:	4619      	mov	r1, r3
 800eda0:	bfb8      	it	lt
 800eda2:	4622      	movlt	r2, r4
 800eda4:	462b      	mov	r3, r5
 800eda6:	f027 0720 	bic.w	r7, r7, #32
 800edaa:	bfbb      	ittet	lt
 800edac:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800edb0:	461d      	movlt	r5, r3
 800edb2:	2300      	movge	r3, #0
 800edb4:	232d      	movlt	r3, #45	; 0x2d
 800edb6:	bfb8      	it	lt
 800edb8:	4614      	movlt	r4, r2
 800edba:	2f46      	cmp	r7, #70	; 0x46
 800edbc:	700b      	strb	r3, [r1, #0]
 800edbe:	d004      	beq.n	800edca <__cvt+0x40>
 800edc0:	2f45      	cmp	r7, #69	; 0x45
 800edc2:	d100      	bne.n	800edc6 <__cvt+0x3c>
 800edc4:	3601      	adds	r6, #1
 800edc6:	2102      	movs	r1, #2
 800edc8:	e000      	b.n	800edcc <__cvt+0x42>
 800edca:	2103      	movs	r1, #3
 800edcc:	ab03      	add	r3, sp, #12
 800edce:	9301      	str	r3, [sp, #4]
 800edd0:	ab02      	add	r3, sp, #8
 800edd2:	9300      	str	r3, [sp, #0]
 800edd4:	4632      	mov	r2, r6
 800edd6:	4653      	mov	r3, sl
 800edd8:	ec45 4b10 	vmov	d0, r4, r5
 800eddc:	f000 fdfc 	bl	800f9d8 <_dtoa_r>
 800ede0:	2f47      	cmp	r7, #71	; 0x47
 800ede2:	4680      	mov	r8, r0
 800ede4:	d102      	bne.n	800edec <__cvt+0x62>
 800ede6:	f019 0f01 	tst.w	r9, #1
 800edea:	d026      	beq.n	800ee3a <__cvt+0xb0>
 800edec:	2f46      	cmp	r7, #70	; 0x46
 800edee:	eb08 0906 	add.w	r9, r8, r6
 800edf2:	d111      	bne.n	800ee18 <__cvt+0x8e>
 800edf4:	f898 3000 	ldrb.w	r3, [r8]
 800edf8:	2b30      	cmp	r3, #48	; 0x30
 800edfa:	d10a      	bne.n	800ee12 <__cvt+0x88>
 800edfc:	2200      	movs	r2, #0
 800edfe:	2300      	movs	r3, #0
 800ee00:	4620      	mov	r0, r4
 800ee02:	4629      	mov	r1, r5
 800ee04:	f7f1 fe38 	bl	8000a78 <__aeabi_dcmpeq>
 800ee08:	b918      	cbnz	r0, 800ee12 <__cvt+0x88>
 800ee0a:	f1c6 0601 	rsb	r6, r6, #1
 800ee0e:	f8ca 6000 	str.w	r6, [sl]
 800ee12:	f8da 3000 	ldr.w	r3, [sl]
 800ee16:	4499      	add	r9, r3
 800ee18:	2200      	movs	r2, #0
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	4620      	mov	r0, r4
 800ee1e:	4629      	mov	r1, r5
 800ee20:	f7f1 fe2a 	bl	8000a78 <__aeabi_dcmpeq>
 800ee24:	b938      	cbnz	r0, 800ee36 <__cvt+0xac>
 800ee26:	2230      	movs	r2, #48	; 0x30
 800ee28:	9b03      	ldr	r3, [sp, #12]
 800ee2a:	454b      	cmp	r3, r9
 800ee2c:	d205      	bcs.n	800ee3a <__cvt+0xb0>
 800ee2e:	1c59      	adds	r1, r3, #1
 800ee30:	9103      	str	r1, [sp, #12]
 800ee32:	701a      	strb	r2, [r3, #0]
 800ee34:	e7f8      	b.n	800ee28 <__cvt+0x9e>
 800ee36:	f8cd 900c 	str.w	r9, [sp, #12]
 800ee3a:	9b03      	ldr	r3, [sp, #12]
 800ee3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ee3e:	eba3 0308 	sub.w	r3, r3, r8
 800ee42:	4640      	mov	r0, r8
 800ee44:	6013      	str	r3, [r2, #0]
 800ee46:	b004      	add	sp, #16
 800ee48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ee4c <__exponent>:
 800ee4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee4e:	2900      	cmp	r1, #0
 800ee50:	4604      	mov	r4, r0
 800ee52:	bfba      	itte	lt
 800ee54:	4249      	neglt	r1, r1
 800ee56:	232d      	movlt	r3, #45	; 0x2d
 800ee58:	232b      	movge	r3, #43	; 0x2b
 800ee5a:	2909      	cmp	r1, #9
 800ee5c:	f804 2b02 	strb.w	r2, [r4], #2
 800ee60:	7043      	strb	r3, [r0, #1]
 800ee62:	dd20      	ble.n	800eea6 <__exponent+0x5a>
 800ee64:	f10d 0307 	add.w	r3, sp, #7
 800ee68:	461f      	mov	r7, r3
 800ee6a:	260a      	movs	r6, #10
 800ee6c:	fb91 f5f6 	sdiv	r5, r1, r6
 800ee70:	fb06 1115 	mls	r1, r6, r5, r1
 800ee74:	3130      	adds	r1, #48	; 0x30
 800ee76:	2d09      	cmp	r5, #9
 800ee78:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ee7c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800ee80:	4629      	mov	r1, r5
 800ee82:	dc09      	bgt.n	800ee98 <__exponent+0x4c>
 800ee84:	3130      	adds	r1, #48	; 0x30
 800ee86:	3b02      	subs	r3, #2
 800ee88:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ee8c:	42bb      	cmp	r3, r7
 800ee8e:	4622      	mov	r2, r4
 800ee90:	d304      	bcc.n	800ee9c <__exponent+0x50>
 800ee92:	1a10      	subs	r0, r2, r0
 800ee94:	b003      	add	sp, #12
 800ee96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee98:	4613      	mov	r3, r2
 800ee9a:	e7e7      	b.n	800ee6c <__exponent+0x20>
 800ee9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eea0:	f804 2b01 	strb.w	r2, [r4], #1
 800eea4:	e7f2      	b.n	800ee8c <__exponent+0x40>
 800eea6:	2330      	movs	r3, #48	; 0x30
 800eea8:	4419      	add	r1, r3
 800eeaa:	7083      	strb	r3, [r0, #2]
 800eeac:	1d02      	adds	r2, r0, #4
 800eeae:	70c1      	strb	r1, [r0, #3]
 800eeb0:	e7ef      	b.n	800ee92 <__exponent+0x46>
	...

0800eeb4 <_printf_float>:
 800eeb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeb8:	b08d      	sub	sp, #52	; 0x34
 800eeba:	460c      	mov	r4, r1
 800eebc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800eec0:	4616      	mov	r6, r2
 800eec2:	461f      	mov	r7, r3
 800eec4:	4605      	mov	r5, r0
 800eec6:	f001 fcb9 	bl	801083c <_localeconv_r>
 800eeca:	6803      	ldr	r3, [r0, #0]
 800eecc:	9304      	str	r3, [sp, #16]
 800eece:	4618      	mov	r0, r3
 800eed0:	f7f1 f956 	bl	8000180 <strlen>
 800eed4:	2300      	movs	r3, #0
 800eed6:	930a      	str	r3, [sp, #40]	; 0x28
 800eed8:	f8d8 3000 	ldr.w	r3, [r8]
 800eedc:	9005      	str	r0, [sp, #20]
 800eede:	3307      	adds	r3, #7
 800eee0:	f023 0307 	bic.w	r3, r3, #7
 800eee4:	f103 0208 	add.w	r2, r3, #8
 800eee8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800eeec:	f8d4 b000 	ldr.w	fp, [r4]
 800eef0:	f8c8 2000 	str.w	r2, [r8]
 800eef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800eefc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ef00:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ef04:	9307      	str	r3, [sp, #28]
 800ef06:	f8cd 8018 	str.w	r8, [sp, #24]
 800ef0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ef0e:	4ba7      	ldr	r3, [pc, #668]	; (800f1ac <_printf_float+0x2f8>)
 800ef10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef14:	f7f1 fde2 	bl	8000adc <__aeabi_dcmpun>
 800ef18:	bb70      	cbnz	r0, 800ef78 <_printf_float+0xc4>
 800ef1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ef1e:	4ba3      	ldr	r3, [pc, #652]	; (800f1ac <_printf_float+0x2f8>)
 800ef20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef24:	f7f1 fdbc 	bl	8000aa0 <__aeabi_dcmple>
 800ef28:	bb30      	cbnz	r0, 800ef78 <_printf_float+0xc4>
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	4640      	mov	r0, r8
 800ef30:	4649      	mov	r1, r9
 800ef32:	f7f1 fdab 	bl	8000a8c <__aeabi_dcmplt>
 800ef36:	b110      	cbz	r0, 800ef3e <_printf_float+0x8a>
 800ef38:	232d      	movs	r3, #45	; 0x2d
 800ef3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef3e:	4a9c      	ldr	r2, [pc, #624]	; (800f1b0 <_printf_float+0x2fc>)
 800ef40:	4b9c      	ldr	r3, [pc, #624]	; (800f1b4 <_printf_float+0x300>)
 800ef42:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ef46:	bf8c      	ite	hi
 800ef48:	4690      	movhi	r8, r2
 800ef4a:	4698      	movls	r8, r3
 800ef4c:	2303      	movs	r3, #3
 800ef4e:	f02b 0204 	bic.w	r2, fp, #4
 800ef52:	6123      	str	r3, [r4, #16]
 800ef54:	6022      	str	r2, [r4, #0]
 800ef56:	f04f 0900 	mov.w	r9, #0
 800ef5a:	9700      	str	r7, [sp, #0]
 800ef5c:	4633      	mov	r3, r6
 800ef5e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ef60:	4621      	mov	r1, r4
 800ef62:	4628      	mov	r0, r5
 800ef64:	f000 f9e6 	bl	800f334 <_printf_common>
 800ef68:	3001      	adds	r0, #1
 800ef6a:	f040 808d 	bne.w	800f088 <_printf_float+0x1d4>
 800ef6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef72:	b00d      	add	sp, #52	; 0x34
 800ef74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef78:	4642      	mov	r2, r8
 800ef7a:	464b      	mov	r3, r9
 800ef7c:	4640      	mov	r0, r8
 800ef7e:	4649      	mov	r1, r9
 800ef80:	f7f1 fdac 	bl	8000adc <__aeabi_dcmpun>
 800ef84:	b110      	cbz	r0, 800ef8c <_printf_float+0xd8>
 800ef86:	4a8c      	ldr	r2, [pc, #560]	; (800f1b8 <_printf_float+0x304>)
 800ef88:	4b8c      	ldr	r3, [pc, #560]	; (800f1bc <_printf_float+0x308>)
 800ef8a:	e7da      	b.n	800ef42 <_printf_float+0x8e>
 800ef8c:	6861      	ldr	r1, [r4, #4]
 800ef8e:	1c4b      	adds	r3, r1, #1
 800ef90:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800ef94:	a80a      	add	r0, sp, #40	; 0x28
 800ef96:	d13e      	bne.n	800f016 <_printf_float+0x162>
 800ef98:	2306      	movs	r3, #6
 800ef9a:	6063      	str	r3, [r4, #4]
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800efa2:	ab09      	add	r3, sp, #36	; 0x24
 800efa4:	9300      	str	r3, [sp, #0]
 800efa6:	ec49 8b10 	vmov	d0, r8, r9
 800efaa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800efae:	6022      	str	r2, [r4, #0]
 800efb0:	f8cd a004 	str.w	sl, [sp, #4]
 800efb4:	6861      	ldr	r1, [r4, #4]
 800efb6:	4628      	mov	r0, r5
 800efb8:	f7ff fee7 	bl	800ed8a <__cvt>
 800efbc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800efc0:	2b47      	cmp	r3, #71	; 0x47
 800efc2:	4680      	mov	r8, r0
 800efc4:	d109      	bne.n	800efda <_printf_float+0x126>
 800efc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efc8:	1cd8      	adds	r0, r3, #3
 800efca:	db02      	blt.n	800efd2 <_printf_float+0x11e>
 800efcc:	6862      	ldr	r2, [r4, #4]
 800efce:	4293      	cmp	r3, r2
 800efd0:	dd47      	ble.n	800f062 <_printf_float+0x1ae>
 800efd2:	f1aa 0a02 	sub.w	sl, sl, #2
 800efd6:	fa5f fa8a 	uxtb.w	sl, sl
 800efda:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800efde:	9909      	ldr	r1, [sp, #36]	; 0x24
 800efe0:	d824      	bhi.n	800f02c <_printf_float+0x178>
 800efe2:	3901      	subs	r1, #1
 800efe4:	4652      	mov	r2, sl
 800efe6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800efea:	9109      	str	r1, [sp, #36]	; 0x24
 800efec:	f7ff ff2e 	bl	800ee4c <__exponent>
 800eff0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eff2:	1813      	adds	r3, r2, r0
 800eff4:	2a01      	cmp	r2, #1
 800eff6:	4681      	mov	r9, r0
 800eff8:	6123      	str	r3, [r4, #16]
 800effa:	dc02      	bgt.n	800f002 <_printf_float+0x14e>
 800effc:	6822      	ldr	r2, [r4, #0]
 800effe:	07d1      	lsls	r1, r2, #31
 800f000:	d501      	bpl.n	800f006 <_printf_float+0x152>
 800f002:	3301      	adds	r3, #1
 800f004:	6123      	str	r3, [r4, #16]
 800f006:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d0a5      	beq.n	800ef5a <_printf_float+0xa6>
 800f00e:	232d      	movs	r3, #45	; 0x2d
 800f010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f014:	e7a1      	b.n	800ef5a <_printf_float+0xa6>
 800f016:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800f01a:	f000 8177 	beq.w	800f30c <_printf_float+0x458>
 800f01e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f022:	d1bb      	bne.n	800ef9c <_printf_float+0xe8>
 800f024:	2900      	cmp	r1, #0
 800f026:	d1b9      	bne.n	800ef9c <_printf_float+0xe8>
 800f028:	2301      	movs	r3, #1
 800f02a:	e7b6      	b.n	800ef9a <_printf_float+0xe6>
 800f02c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800f030:	d119      	bne.n	800f066 <_printf_float+0x1b2>
 800f032:	2900      	cmp	r1, #0
 800f034:	6863      	ldr	r3, [r4, #4]
 800f036:	dd0c      	ble.n	800f052 <_printf_float+0x19e>
 800f038:	6121      	str	r1, [r4, #16]
 800f03a:	b913      	cbnz	r3, 800f042 <_printf_float+0x18e>
 800f03c:	6822      	ldr	r2, [r4, #0]
 800f03e:	07d2      	lsls	r2, r2, #31
 800f040:	d502      	bpl.n	800f048 <_printf_float+0x194>
 800f042:	3301      	adds	r3, #1
 800f044:	440b      	add	r3, r1
 800f046:	6123      	str	r3, [r4, #16]
 800f048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f04a:	65a3      	str	r3, [r4, #88]	; 0x58
 800f04c:	f04f 0900 	mov.w	r9, #0
 800f050:	e7d9      	b.n	800f006 <_printf_float+0x152>
 800f052:	b913      	cbnz	r3, 800f05a <_printf_float+0x1a6>
 800f054:	6822      	ldr	r2, [r4, #0]
 800f056:	07d0      	lsls	r0, r2, #31
 800f058:	d501      	bpl.n	800f05e <_printf_float+0x1aa>
 800f05a:	3302      	adds	r3, #2
 800f05c:	e7f3      	b.n	800f046 <_printf_float+0x192>
 800f05e:	2301      	movs	r3, #1
 800f060:	e7f1      	b.n	800f046 <_printf_float+0x192>
 800f062:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800f066:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f06a:	4293      	cmp	r3, r2
 800f06c:	db05      	blt.n	800f07a <_printf_float+0x1c6>
 800f06e:	6822      	ldr	r2, [r4, #0]
 800f070:	6123      	str	r3, [r4, #16]
 800f072:	07d1      	lsls	r1, r2, #31
 800f074:	d5e8      	bpl.n	800f048 <_printf_float+0x194>
 800f076:	3301      	adds	r3, #1
 800f078:	e7e5      	b.n	800f046 <_printf_float+0x192>
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	bfd4      	ite	le
 800f07e:	f1c3 0302 	rsble	r3, r3, #2
 800f082:	2301      	movgt	r3, #1
 800f084:	4413      	add	r3, r2
 800f086:	e7de      	b.n	800f046 <_printf_float+0x192>
 800f088:	6823      	ldr	r3, [r4, #0]
 800f08a:	055a      	lsls	r2, r3, #21
 800f08c:	d407      	bmi.n	800f09e <_printf_float+0x1ea>
 800f08e:	6923      	ldr	r3, [r4, #16]
 800f090:	4642      	mov	r2, r8
 800f092:	4631      	mov	r1, r6
 800f094:	4628      	mov	r0, r5
 800f096:	47b8      	blx	r7
 800f098:	3001      	adds	r0, #1
 800f09a:	d12b      	bne.n	800f0f4 <_printf_float+0x240>
 800f09c:	e767      	b.n	800ef6e <_printf_float+0xba>
 800f09e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f0a2:	f240 80dc 	bls.w	800f25e <_printf_float+0x3aa>
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f0ae:	f7f1 fce3 	bl	8000a78 <__aeabi_dcmpeq>
 800f0b2:	2800      	cmp	r0, #0
 800f0b4:	d033      	beq.n	800f11e <_printf_float+0x26a>
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	4a41      	ldr	r2, [pc, #260]	; (800f1c0 <_printf_float+0x30c>)
 800f0ba:	4631      	mov	r1, r6
 800f0bc:	4628      	mov	r0, r5
 800f0be:	47b8      	blx	r7
 800f0c0:	3001      	adds	r0, #1
 800f0c2:	f43f af54 	beq.w	800ef6e <_printf_float+0xba>
 800f0c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f0ca:	429a      	cmp	r2, r3
 800f0cc:	db02      	blt.n	800f0d4 <_printf_float+0x220>
 800f0ce:	6823      	ldr	r3, [r4, #0]
 800f0d0:	07d8      	lsls	r0, r3, #31
 800f0d2:	d50f      	bpl.n	800f0f4 <_printf_float+0x240>
 800f0d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f0d8:	4631      	mov	r1, r6
 800f0da:	4628      	mov	r0, r5
 800f0dc:	47b8      	blx	r7
 800f0de:	3001      	adds	r0, #1
 800f0e0:	f43f af45 	beq.w	800ef6e <_printf_float+0xba>
 800f0e4:	f04f 0800 	mov.w	r8, #0
 800f0e8:	f104 091a 	add.w	r9, r4, #26
 800f0ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0ee:	3b01      	subs	r3, #1
 800f0f0:	4543      	cmp	r3, r8
 800f0f2:	dc09      	bgt.n	800f108 <_printf_float+0x254>
 800f0f4:	6823      	ldr	r3, [r4, #0]
 800f0f6:	079b      	lsls	r3, r3, #30
 800f0f8:	f100 8103 	bmi.w	800f302 <_printf_float+0x44e>
 800f0fc:	68e0      	ldr	r0, [r4, #12]
 800f0fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f100:	4298      	cmp	r0, r3
 800f102:	bfb8      	it	lt
 800f104:	4618      	movlt	r0, r3
 800f106:	e734      	b.n	800ef72 <_printf_float+0xbe>
 800f108:	2301      	movs	r3, #1
 800f10a:	464a      	mov	r2, r9
 800f10c:	4631      	mov	r1, r6
 800f10e:	4628      	mov	r0, r5
 800f110:	47b8      	blx	r7
 800f112:	3001      	adds	r0, #1
 800f114:	f43f af2b 	beq.w	800ef6e <_printf_float+0xba>
 800f118:	f108 0801 	add.w	r8, r8, #1
 800f11c:	e7e6      	b.n	800f0ec <_printf_float+0x238>
 800f11e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f120:	2b00      	cmp	r3, #0
 800f122:	dc2b      	bgt.n	800f17c <_printf_float+0x2c8>
 800f124:	2301      	movs	r3, #1
 800f126:	4a26      	ldr	r2, [pc, #152]	; (800f1c0 <_printf_float+0x30c>)
 800f128:	4631      	mov	r1, r6
 800f12a:	4628      	mov	r0, r5
 800f12c:	47b8      	blx	r7
 800f12e:	3001      	adds	r0, #1
 800f130:	f43f af1d 	beq.w	800ef6e <_printf_float+0xba>
 800f134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f136:	b923      	cbnz	r3, 800f142 <_printf_float+0x28e>
 800f138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f13a:	b913      	cbnz	r3, 800f142 <_printf_float+0x28e>
 800f13c:	6823      	ldr	r3, [r4, #0]
 800f13e:	07d9      	lsls	r1, r3, #31
 800f140:	d5d8      	bpl.n	800f0f4 <_printf_float+0x240>
 800f142:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f146:	4631      	mov	r1, r6
 800f148:	4628      	mov	r0, r5
 800f14a:	47b8      	blx	r7
 800f14c:	3001      	adds	r0, #1
 800f14e:	f43f af0e 	beq.w	800ef6e <_printf_float+0xba>
 800f152:	f04f 0900 	mov.w	r9, #0
 800f156:	f104 0a1a 	add.w	sl, r4, #26
 800f15a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f15c:	425b      	negs	r3, r3
 800f15e:	454b      	cmp	r3, r9
 800f160:	dc01      	bgt.n	800f166 <_printf_float+0x2b2>
 800f162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f164:	e794      	b.n	800f090 <_printf_float+0x1dc>
 800f166:	2301      	movs	r3, #1
 800f168:	4652      	mov	r2, sl
 800f16a:	4631      	mov	r1, r6
 800f16c:	4628      	mov	r0, r5
 800f16e:	47b8      	blx	r7
 800f170:	3001      	adds	r0, #1
 800f172:	f43f aefc 	beq.w	800ef6e <_printf_float+0xba>
 800f176:	f109 0901 	add.w	r9, r9, #1
 800f17a:	e7ee      	b.n	800f15a <_printf_float+0x2a6>
 800f17c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f17e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f180:	429a      	cmp	r2, r3
 800f182:	bfa8      	it	ge
 800f184:	461a      	movge	r2, r3
 800f186:	2a00      	cmp	r2, #0
 800f188:	4691      	mov	r9, r2
 800f18a:	dd07      	ble.n	800f19c <_printf_float+0x2e8>
 800f18c:	4613      	mov	r3, r2
 800f18e:	4631      	mov	r1, r6
 800f190:	4642      	mov	r2, r8
 800f192:	4628      	mov	r0, r5
 800f194:	47b8      	blx	r7
 800f196:	3001      	adds	r0, #1
 800f198:	f43f aee9 	beq.w	800ef6e <_printf_float+0xba>
 800f19c:	f104 031a 	add.w	r3, r4, #26
 800f1a0:	f04f 0b00 	mov.w	fp, #0
 800f1a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f1a8:	9306      	str	r3, [sp, #24]
 800f1aa:	e015      	b.n	800f1d8 <_printf_float+0x324>
 800f1ac:	7fefffff 	.word	0x7fefffff
 800f1b0:	08011f88 	.word	0x08011f88
 800f1b4:	08011f84 	.word	0x08011f84
 800f1b8:	08011f90 	.word	0x08011f90
 800f1bc:	08011f8c 	.word	0x08011f8c
 800f1c0:	08011f94 	.word	0x08011f94
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	9a06      	ldr	r2, [sp, #24]
 800f1c8:	4631      	mov	r1, r6
 800f1ca:	4628      	mov	r0, r5
 800f1cc:	47b8      	blx	r7
 800f1ce:	3001      	adds	r0, #1
 800f1d0:	f43f aecd 	beq.w	800ef6e <_printf_float+0xba>
 800f1d4:	f10b 0b01 	add.w	fp, fp, #1
 800f1d8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800f1dc:	ebaa 0309 	sub.w	r3, sl, r9
 800f1e0:	455b      	cmp	r3, fp
 800f1e2:	dcef      	bgt.n	800f1c4 <_printf_float+0x310>
 800f1e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	44d0      	add	r8, sl
 800f1ec:	db15      	blt.n	800f21a <_printf_float+0x366>
 800f1ee:	6823      	ldr	r3, [r4, #0]
 800f1f0:	07da      	lsls	r2, r3, #31
 800f1f2:	d412      	bmi.n	800f21a <_printf_float+0x366>
 800f1f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f1f8:	eba3 020a 	sub.w	r2, r3, sl
 800f1fc:	eba3 0a01 	sub.w	sl, r3, r1
 800f200:	4592      	cmp	sl, r2
 800f202:	bfa8      	it	ge
 800f204:	4692      	movge	sl, r2
 800f206:	f1ba 0f00 	cmp.w	sl, #0
 800f20a:	dc0e      	bgt.n	800f22a <_printf_float+0x376>
 800f20c:	f04f 0800 	mov.w	r8, #0
 800f210:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f214:	f104 091a 	add.w	r9, r4, #26
 800f218:	e019      	b.n	800f24e <_printf_float+0x39a>
 800f21a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f21e:	4631      	mov	r1, r6
 800f220:	4628      	mov	r0, r5
 800f222:	47b8      	blx	r7
 800f224:	3001      	adds	r0, #1
 800f226:	d1e5      	bne.n	800f1f4 <_printf_float+0x340>
 800f228:	e6a1      	b.n	800ef6e <_printf_float+0xba>
 800f22a:	4653      	mov	r3, sl
 800f22c:	4642      	mov	r2, r8
 800f22e:	4631      	mov	r1, r6
 800f230:	4628      	mov	r0, r5
 800f232:	47b8      	blx	r7
 800f234:	3001      	adds	r0, #1
 800f236:	d1e9      	bne.n	800f20c <_printf_float+0x358>
 800f238:	e699      	b.n	800ef6e <_printf_float+0xba>
 800f23a:	2301      	movs	r3, #1
 800f23c:	464a      	mov	r2, r9
 800f23e:	4631      	mov	r1, r6
 800f240:	4628      	mov	r0, r5
 800f242:	47b8      	blx	r7
 800f244:	3001      	adds	r0, #1
 800f246:	f43f ae92 	beq.w	800ef6e <_printf_float+0xba>
 800f24a:	f108 0801 	add.w	r8, r8, #1
 800f24e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f252:	1a9b      	subs	r3, r3, r2
 800f254:	eba3 030a 	sub.w	r3, r3, sl
 800f258:	4543      	cmp	r3, r8
 800f25a:	dcee      	bgt.n	800f23a <_printf_float+0x386>
 800f25c:	e74a      	b.n	800f0f4 <_printf_float+0x240>
 800f25e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f260:	2a01      	cmp	r2, #1
 800f262:	dc01      	bgt.n	800f268 <_printf_float+0x3b4>
 800f264:	07db      	lsls	r3, r3, #31
 800f266:	d53a      	bpl.n	800f2de <_printf_float+0x42a>
 800f268:	2301      	movs	r3, #1
 800f26a:	4642      	mov	r2, r8
 800f26c:	4631      	mov	r1, r6
 800f26e:	4628      	mov	r0, r5
 800f270:	47b8      	blx	r7
 800f272:	3001      	adds	r0, #1
 800f274:	f43f ae7b 	beq.w	800ef6e <_printf_float+0xba>
 800f278:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f27c:	4631      	mov	r1, r6
 800f27e:	4628      	mov	r0, r5
 800f280:	47b8      	blx	r7
 800f282:	3001      	adds	r0, #1
 800f284:	f108 0801 	add.w	r8, r8, #1
 800f288:	f43f ae71 	beq.w	800ef6e <_printf_float+0xba>
 800f28c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f28e:	2200      	movs	r2, #0
 800f290:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800f294:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f298:	2300      	movs	r3, #0
 800f29a:	f7f1 fbed 	bl	8000a78 <__aeabi_dcmpeq>
 800f29e:	b9c8      	cbnz	r0, 800f2d4 <_printf_float+0x420>
 800f2a0:	4653      	mov	r3, sl
 800f2a2:	4642      	mov	r2, r8
 800f2a4:	4631      	mov	r1, r6
 800f2a6:	4628      	mov	r0, r5
 800f2a8:	47b8      	blx	r7
 800f2aa:	3001      	adds	r0, #1
 800f2ac:	d10e      	bne.n	800f2cc <_printf_float+0x418>
 800f2ae:	e65e      	b.n	800ef6e <_printf_float+0xba>
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	4652      	mov	r2, sl
 800f2b4:	4631      	mov	r1, r6
 800f2b6:	4628      	mov	r0, r5
 800f2b8:	47b8      	blx	r7
 800f2ba:	3001      	adds	r0, #1
 800f2bc:	f43f ae57 	beq.w	800ef6e <_printf_float+0xba>
 800f2c0:	f108 0801 	add.w	r8, r8, #1
 800f2c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2c6:	3b01      	subs	r3, #1
 800f2c8:	4543      	cmp	r3, r8
 800f2ca:	dcf1      	bgt.n	800f2b0 <_printf_float+0x3fc>
 800f2cc:	464b      	mov	r3, r9
 800f2ce:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f2d2:	e6de      	b.n	800f092 <_printf_float+0x1de>
 800f2d4:	f04f 0800 	mov.w	r8, #0
 800f2d8:	f104 0a1a 	add.w	sl, r4, #26
 800f2dc:	e7f2      	b.n	800f2c4 <_printf_float+0x410>
 800f2de:	2301      	movs	r3, #1
 800f2e0:	e7df      	b.n	800f2a2 <_printf_float+0x3ee>
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	464a      	mov	r2, r9
 800f2e6:	4631      	mov	r1, r6
 800f2e8:	4628      	mov	r0, r5
 800f2ea:	47b8      	blx	r7
 800f2ec:	3001      	adds	r0, #1
 800f2ee:	f43f ae3e 	beq.w	800ef6e <_printf_float+0xba>
 800f2f2:	f108 0801 	add.w	r8, r8, #1
 800f2f6:	68e3      	ldr	r3, [r4, #12]
 800f2f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f2fa:	1a9b      	subs	r3, r3, r2
 800f2fc:	4543      	cmp	r3, r8
 800f2fe:	dcf0      	bgt.n	800f2e2 <_printf_float+0x42e>
 800f300:	e6fc      	b.n	800f0fc <_printf_float+0x248>
 800f302:	f04f 0800 	mov.w	r8, #0
 800f306:	f104 0919 	add.w	r9, r4, #25
 800f30a:	e7f4      	b.n	800f2f6 <_printf_float+0x442>
 800f30c:	2900      	cmp	r1, #0
 800f30e:	f43f ae8b 	beq.w	800f028 <_printf_float+0x174>
 800f312:	2300      	movs	r3, #0
 800f314:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f318:	ab09      	add	r3, sp, #36	; 0x24
 800f31a:	9300      	str	r3, [sp, #0]
 800f31c:	ec49 8b10 	vmov	d0, r8, r9
 800f320:	6022      	str	r2, [r4, #0]
 800f322:	f8cd a004 	str.w	sl, [sp, #4]
 800f326:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f32a:	4628      	mov	r0, r5
 800f32c:	f7ff fd2d 	bl	800ed8a <__cvt>
 800f330:	4680      	mov	r8, r0
 800f332:	e648      	b.n	800efc6 <_printf_float+0x112>

0800f334 <_printf_common>:
 800f334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f338:	4691      	mov	r9, r2
 800f33a:	461f      	mov	r7, r3
 800f33c:	688a      	ldr	r2, [r1, #8]
 800f33e:	690b      	ldr	r3, [r1, #16]
 800f340:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f344:	4293      	cmp	r3, r2
 800f346:	bfb8      	it	lt
 800f348:	4613      	movlt	r3, r2
 800f34a:	f8c9 3000 	str.w	r3, [r9]
 800f34e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f352:	4606      	mov	r6, r0
 800f354:	460c      	mov	r4, r1
 800f356:	b112      	cbz	r2, 800f35e <_printf_common+0x2a>
 800f358:	3301      	adds	r3, #1
 800f35a:	f8c9 3000 	str.w	r3, [r9]
 800f35e:	6823      	ldr	r3, [r4, #0]
 800f360:	0699      	lsls	r1, r3, #26
 800f362:	bf42      	ittt	mi
 800f364:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f368:	3302      	addmi	r3, #2
 800f36a:	f8c9 3000 	strmi.w	r3, [r9]
 800f36e:	6825      	ldr	r5, [r4, #0]
 800f370:	f015 0506 	ands.w	r5, r5, #6
 800f374:	d107      	bne.n	800f386 <_printf_common+0x52>
 800f376:	f104 0a19 	add.w	sl, r4, #25
 800f37a:	68e3      	ldr	r3, [r4, #12]
 800f37c:	f8d9 2000 	ldr.w	r2, [r9]
 800f380:	1a9b      	subs	r3, r3, r2
 800f382:	42ab      	cmp	r3, r5
 800f384:	dc28      	bgt.n	800f3d8 <_printf_common+0xa4>
 800f386:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f38a:	6822      	ldr	r2, [r4, #0]
 800f38c:	3300      	adds	r3, #0
 800f38e:	bf18      	it	ne
 800f390:	2301      	movne	r3, #1
 800f392:	0692      	lsls	r2, r2, #26
 800f394:	d42d      	bmi.n	800f3f2 <_printf_common+0xbe>
 800f396:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f39a:	4639      	mov	r1, r7
 800f39c:	4630      	mov	r0, r6
 800f39e:	47c0      	blx	r8
 800f3a0:	3001      	adds	r0, #1
 800f3a2:	d020      	beq.n	800f3e6 <_printf_common+0xb2>
 800f3a4:	6823      	ldr	r3, [r4, #0]
 800f3a6:	68e5      	ldr	r5, [r4, #12]
 800f3a8:	f8d9 2000 	ldr.w	r2, [r9]
 800f3ac:	f003 0306 	and.w	r3, r3, #6
 800f3b0:	2b04      	cmp	r3, #4
 800f3b2:	bf08      	it	eq
 800f3b4:	1aad      	subeq	r5, r5, r2
 800f3b6:	68a3      	ldr	r3, [r4, #8]
 800f3b8:	6922      	ldr	r2, [r4, #16]
 800f3ba:	bf0c      	ite	eq
 800f3bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f3c0:	2500      	movne	r5, #0
 800f3c2:	4293      	cmp	r3, r2
 800f3c4:	bfc4      	itt	gt
 800f3c6:	1a9b      	subgt	r3, r3, r2
 800f3c8:	18ed      	addgt	r5, r5, r3
 800f3ca:	f04f 0900 	mov.w	r9, #0
 800f3ce:	341a      	adds	r4, #26
 800f3d0:	454d      	cmp	r5, r9
 800f3d2:	d11a      	bne.n	800f40a <_printf_common+0xd6>
 800f3d4:	2000      	movs	r0, #0
 800f3d6:	e008      	b.n	800f3ea <_printf_common+0xb6>
 800f3d8:	2301      	movs	r3, #1
 800f3da:	4652      	mov	r2, sl
 800f3dc:	4639      	mov	r1, r7
 800f3de:	4630      	mov	r0, r6
 800f3e0:	47c0      	blx	r8
 800f3e2:	3001      	adds	r0, #1
 800f3e4:	d103      	bne.n	800f3ee <_printf_common+0xba>
 800f3e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f3ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3ee:	3501      	adds	r5, #1
 800f3f0:	e7c3      	b.n	800f37a <_printf_common+0x46>
 800f3f2:	18e1      	adds	r1, r4, r3
 800f3f4:	1c5a      	adds	r2, r3, #1
 800f3f6:	2030      	movs	r0, #48	; 0x30
 800f3f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f3fc:	4422      	add	r2, r4
 800f3fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f402:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f406:	3302      	adds	r3, #2
 800f408:	e7c5      	b.n	800f396 <_printf_common+0x62>
 800f40a:	2301      	movs	r3, #1
 800f40c:	4622      	mov	r2, r4
 800f40e:	4639      	mov	r1, r7
 800f410:	4630      	mov	r0, r6
 800f412:	47c0      	blx	r8
 800f414:	3001      	adds	r0, #1
 800f416:	d0e6      	beq.n	800f3e6 <_printf_common+0xb2>
 800f418:	f109 0901 	add.w	r9, r9, #1
 800f41c:	e7d8      	b.n	800f3d0 <_printf_common+0x9c>
	...

0800f420 <_printf_i>:
 800f420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f424:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f428:	460c      	mov	r4, r1
 800f42a:	7e09      	ldrb	r1, [r1, #24]
 800f42c:	b085      	sub	sp, #20
 800f42e:	296e      	cmp	r1, #110	; 0x6e
 800f430:	4617      	mov	r7, r2
 800f432:	4606      	mov	r6, r0
 800f434:	4698      	mov	r8, r3
 800f436:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f438:	f000 80b3 	beq.w	800f5a2 <_printf_i+0x182>
 800f43c:	d822      	bhi.n	800f484 <_printf_i+0x64>
 800f43e:	2963      	cmp	r1, #99	; 0x63
 800f440:	d036      	beq.n	800f4b0 <_printf_i+0x90>
 800f442:	d80a      	bhi.n	800f45a <_printf_i+0x3a>
 800f444:	2900      	cmp	r1, #0
 800f446:	f000 80b9 	beq.w	800f5bc <_printf_i+0x19c>
 800f44a:	2958      	cmp	r1, #88	; 0x58
 800f44c:	f000 8083 	beq.w	800f556 <_printf_i+0x136>
 800f450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f454:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f458:	e032      	b.n	800f4c0 <_printf_i+0xa0>
 800f45a:	2964      	cmp	r1, #100	; 0x64
 800f45c:	d001      	beq.n	800f462 <_printf_i+0x42>
 800f45e:	2969      	cmp	r1, #105	; 0x69
 800f460:	d1f6      	bne.n	800f450 <_printf_i+0x30>
 800f462:	6820      	ldr	r0, [r4, #0]
 800f464:	6813      	ldr	r3, [r2, #0]
 800f466:	0605      	lsls	r5, r0, #24
 800f468:	f103 0104 	add.w	r1, r3, #4
 800f46c:	d52a      	bpl.n	800f4c4 <_printf_i+0xa4>
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	6011      	str	r1, [r2, #0]
 800f472:	2b00      	cmp	r3, #0
 800f474:	da03      	bge.n	800f47e <_printf_i+0x5e>
 800f476:	222d      	movs	r2, #45	; 0x2d
 800f478:	425b      	negs	r3, r3
 800f47a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f47e:	486f      	ldr	r0, [pc, #444]	; (800f63c <_printf_i+0x21c>)
 800f480:	220a      	movs	r2, #10
 800f482:	e039      	b.n	800f4f8 <_printf_i+0xd8>
 800f484:	2973      	cmp	r1, #115	; 0x73
 800f486:	f000 809d 	beq.w	800f5c4 <_printf_i+0x1a4>
 800f48a:	d808      	bhi.n	800f49e <_printf_i+0x7e>
 800f48c:	296f      	cmp	r1, #111	; 0x6f
 800f48e:	d020      	beq.n	800f4d2 <_printf_i+0xb2>
 800f490:	2970      	cmp	r1, #112	; 0x70
 800f492:	d1dd      	bne.n	800f450 <_printf_i+0x30>
 800f494:	6823      	ldr	r3, [r4, #0]
 800f496:	f043 0320 	orr.w	r3, r3, #32
 800f49a:	6023      	str	r3, [r4, #0]
 800f49c:	e003      	b.n	800f4a6 <_printf_i+0x86>
 800f49e:	2975      	cmp	r1, #117	; 0x75
 800f4a0:	d017      	beq.n	800f4d2 <_printf_i+0xb2>
 800f4a2:	2978      	cmp	r1, #120	; 0x78
 800f4a4:	d1d4      	bne.n	800f450 <_printf_i+0x30>
 800f4a6:	2378      	movs	r3, #120	; 0x78
 800f4a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f4ac:	4864      	ldr	r0, [pc, #400]	; (800f640 <_printf_i+0x220>)
 800f4ae:	e055      	b.n	800f55c <_printf_i+0x13c>
 800f4b0:	6813      	ldr	r3, [r2, #0]
 800f4b2:	1d19      	adds	r1, r3, #4
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	6011      	str	r1, [r2, #0]
 800f4b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f4bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	e08c      	b.n	800f5de <_printf_i+0x1be>
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	6011      	str	r1, [r2, #0]
 800f4c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f4cc:	bf18      	it	ne
 800f4ce:	b21b      	sxthne	r3, r3
 800f4d0:	e7cf      	b.n	800f472 <_printf_i+0x52>
 800f4d2:	6813      	ldr	r3, [r2, #0]
 800f4d4:	6825      	ldr	r5, [r4, #0]
 800f4d6:	1d18      	adds	r0, r3, #4
 800f4d8:	6010      	str	r0, [r2, #0]
 800f4da:	0628      	lsls	r0, r5, #24
 800f4dc:	d501      	bpl.n	800f4e2 <_printf_i+0xc2>
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	e002      	b.n	800f4e8 <_printf_i+0xc8>
 800f4e2:	0668      	lsls	r0, r5, #25
 800f4e4:	d5fb      	bpl.n	800f4de <_printf_i+0xbe>
 800f4e6:	881b      	ldrh	r3, [r3, #0]
 800f4e8:	4854      	ldr	r0, [pc, #336]	; (800f63c <_printf_i+0x21c>)
 800f4ea:	296f      	cmp	r1, #111	; 0x6f
 800f4ec:	bf14      	ite	ne
 800f4ee:	220a      	movne	r2, #10
 800f4f0:	2208      	moveq	r2, #8
 800f4f2:	2100      	movs	r1, #0
 800f4f4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f4f8:	6865      	ldr	r5, [r4, #4]
 800f4fa:	60a5      	str	r5, [r4, #8]
 800f4fc:	2d00      	cmp	r5, #0
 800f4fe:	f2c0 8095 	blt.w	800f62c <_printf_i+0x20c>
 800f502:	6821      	ldr	r1, [r4, #0]
 800f504:	f021 0104 	bic.w	r1, r1, #4
 800f508:	6021      	str	r1, [r4, #0]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d13d      	bne.n	800f58a <_printf_i+0x16a>
 800f50e:	2d00      	cmp	r5, #0
 800f510:	f040 808e 	bne.w	800f630 <_printf_i+0x210>
 800f514:	4665      	mov	r5, ip
 800f516:	2a08      	cmp	r2, #8
 800f518:	d10b      	bne.n	800f532 <_printf_i+0x112>
 800f51a:	6823      	ldr	r3, [r4, #0]
 800f51c:	07db      	lsls	r3, r3, #31
 800f51e:	d508      	bpl.n	800f532 <_printf_i+0x112>
 800f520:	6923      	ldr	r3, [r4, #16]
 800f522:	6862      	ldr	r2, [r4, #4]
 800f524:	429a      	cmp	r2, r3
 800f526:	bfde      	ittt	le
 800f528:	2330      	movle	r3, #48	; 0x30
 800f52a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f52e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f532:	ebac 0305 	sub.w	r3, ip, r5
 800f536:	6123      	str	r3, [r4, #16]
 800f538:	f8cd 8000 	str.w	r8, [sp]
 800f53c:	463b      	mov	r3, r7
 800f53e:	aa03      	add	r2, sp, #12
 800f540:	4621      	mov	r1, r4
 800f542:	4630      	mov	r0, r6
 800f544:	f7ff fef6 	bl	800f334 <_printf_common>
 800f548:	3001      	adds	r0, #1
 800f54a:	d14d      	bne.n	800f5e8 <_printf_i+0x1c8>
 800f54c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f550:	b005      	add	sp, #20
 800f552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f556:	4839      	ldr	r0, [pc, #228]	; (800f63c <_printf_i+0x21c>)
 800f558:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f55c:	6813      	ldr	r3, [r2, #0]
 800f55e:	6821      	ldr	r1, [r4, #0]
 800f560:	1d1d      	adds	r5, r3, #4
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	6015      	str	r5, [r2, #0]
 800f566:	060a      	lsls	r2, r1, #24
 800f568:	d50b      	bpl.n	800f582 <_printf_i+0x162>
 800f56a:	07ca      	lsls	r2, r1, #31
 800f56c:	bf44      	itt	mi
 800f56e:	f041 0120 	orrmi.w	r1, r1, #32
 800f572:	6021      	strmi	r1, [r4, #0]
 800f574:	b91b      	cbnz	r3, 800f57e <_printf_i+0x15e>
 800f576:	6822      	ldr	r2, [r4, #0]
 800f578:	f022 0220 	bic.w	r2, r2, #32
 800f57c:	6022      	str	r2, [r4, #0]
 800f57e:	2210      	movs	r2, #16
 800f580:	e7b7      	b.n	800f4f2 <_printf_i+0xd2>
 800f582:	064d      	lsls	r5, r1, #25
 800f584:	bf48      	it	mi
 800f586:	b29b      	uxthmi	r3, r3
 800f588:	e7ef      	b.n	800f56a <_printf_i+0x14a>
 800f58a:	4665      	mov	r5, ip
 800f58c:	fbb3 f1f2 	udiv	r1, r3, r2
 800f590:	fb02 3311 	mls	r3, r2, r1, r3
 800f594:	5cc3      	ldrb	r3, [r0, r3]
 800f596:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f59a:	460b      	mov	r3, r1
 800f59c:	2900      	cmp	r1, #0
 800f59e:	d1f5      	bne.n	800f58c <_printf_i+0x16c>
 800f5a0:	e7b9      	b.n	800f516 <_printf_i+0xf6>
 800f5a2:	6813      	ldr	r3, [r2, #0]
 800f5a4:	6825      	ldr	r5, [r4, #0]
 800f5a6:	6961      	ldr	r1, [r4, #20]
 800f5a8:	1d18      	adds	r0, r3, #4
 800f5aa:	6010      	str	r0, [r2, #0]
 800f5ac:	0628      	lsls	r0, r5, #24
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	d501      	bpl.n	800f5b6 <_printf_i+0x196>
 800f5b2:	6019      	str	r1, [r3, #0]
 800f5b4:	e002      	b.n	800f5bc <_printf_i+0x19c>
 800f5b6:	066a      	lsls	r2, r5, #25
 800f5b8:	d5fb      	bpl.n	800f5b2 <_printf_i+0x192>
 800f5ba:	8019      	strh	r1, [r3, #0]
 800f5bc:	2300      	movs	r3, #0
 800f5be:	6123      	str	r3, [r4, #16]
 800f5c0:	4665      	mov	r5, ip
 800f5c2:	e7b9      	b.n	800f538 <_printf_i+0x118>
 800f5c4:	6813      	ldr	r3, [r2, #0]
 800f5c6:	1d19      	adds	r1, r3, #4
 800f5c8:	6011      	str	r1, [r2, #0]
 800f5ca:	681d      	ldr	r5, [r3, #0]
 800f5cc:	6862      	ldr	r2, [r4, #4]
 800f5ce:	2100      	movs	r1, #0
 800f5d0:	4628      	mov	r0, r5
 800f5d2:	f7f0 fddd 	bl	8000190 <memchr>
 800f5d6:	b108      	cbz	r0, 800f5dc <_printf_i+0x1bc>
 800f5d8:	1b40      	subs	r0, r0, r5
 800f5da:	6060      	str	r0, [r4, #4]
 800f5dc:	6863      	ldr	r3, [r4, #4]
 800f5de:	6123      	str	r3, [r4, #16]
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5e6:	e7a7      	b.n	800f538 <_printf_i+0x118>
 800f5e8:	6923      	ldr	r3, [r4, #16]
 800f5ea:	462a      	mov	r2, r5
 800f5ec:	4639      	mov	r1, r7
 800f5ee:	4630      	mov	r0, r6
 800f5f0:	47c0      	blx	r8
 800f5f2:	3001      	adds	r0, #1
 800f5f4:	d0aa      	beq.n	800f54c <_printf_i+0x12c>
 800f5f6:	6823      	ldr	r3, [r4, #0]
 800f5f8:	079b      	lsls	r3, r3, #30
 800f5fa:	d413      	bmi.n	800f624 <_printf_i+0x204>
 800f5fc:	68e0      	ldr	r0, [r4, #12]
 800f5fe:	9b03      	ldr	r3, [sp, #12]
 800f600:	4298      	cmp	r0, r3
 800f602:	bfb8      	it	lt
 800f604:	4618      	movlt	r0, r3
 800f606:	e7a3      	b.n	800f550 <_printf_i+0x130>
 800f608:	2301      	movs	r3, #1
 800f60a:	464a      	mov	r2, r9
 800f60c:	4639      	mov	r1, r7
 800f60e:	4630      	mov	r0, r6
 800f610:	47c0      	blx	r8
 800f612:	3001      	adds	r0, #1
 800f614:	d09a      	beq.n	800f54c <_printf_i+0x12c>
 800f616:	3501      	adds	r5, #1
 800f618:	68e3      	ldr	r3, [r4, #12]
 800f61a:	9a03      	ldr	r2, [sp, #12]
 800f61c:	1a9b      	subs	r3, r3, r2
 800f61e:	42ab      	cmp	r3, r5
 800f620:	dcf2      	bgt.n	800f608 <_printf_i+0x1e8>
 800f622:	e7eb      	b.n	800f5fc <_printf_i+0x1dc>
 800f624:	2500      	movs	r5, #0
 800f626:	f104 0919 	add.w	r9, r4, #25
 800f62a:	e7f5      	b.n	800f618 <_printf_i+0x1f8>
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d1ac      	bne.n	800f58a <_printf_i+0x16a>
 800f630:	7803      	ldrb	r3, [r0, #0]
 800f632:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f636:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f63a:	e76c      	b.n	800f516 <_printf_i+0xf6>
 800f63c:	08011f96 	.word	0x08011f96
 800f640:	08011fa7 	.word	0x08011fa7

0800f644 <iprintf>:
 800f644:	b40f      	push	{r0, r1, r2, r3}
 800f646:	4b0a      	ldr	r3, [pc, #40]	; (800f670 <iprintf+0x2c>)
 800f648:	b513      	push	{r0, r1, r4, lr}
 800f64a:	681c      	ldr	r4, [r3, #0]
 800f64c:	b124      	cbz	r4, 800f658 <iprintf+0x14>
 800f64e:	69a3      	ldr	r3, [r4, #24]
 800f650:	b913      	cbnz	r3, 800f658 <iprintf+0x14>
 800f652:	4620      	mov	r0, r4
 800f654:	f001 f868 	bl	8010728 <__sinit>
 800f658:	ab05      	add	r3, sp, #20
 800f65a:	9a04      	ldr	r2, [sp, #16]
 800f65c:	68a1      	ldr	r1, [r4, #8]
 800f65e:	9301      	str	r3, [sp, #4]
 800f660:	4620      	mov	r0, r4
 800f662:	f001 fd21 	bl	80110a8 <_vfiprintf_r>
 800f666:	b002      	add	sp, #8
 800f668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f66c:	b004      	add	sp, #16
 800f66e:	4770      	bx	lr
 800f670:	2000003c 	.word	0x2000003c

0800f674 <_puts_r>:
 800f674:	b570      	push	{r4, r5, r6, lr}
 800f676:	460e      	mov	r6, r1
 800f678:	4605      	mov	r5, r0
 800f67a:	b118      	cbz	r0, 800f684 <_puts_r+0x10>
 800f67c:	6983      	ldr	r3, [r0, #24]
 800f67e:	b90b      	cbnz	r3, 800f684 <_puts_r+0x10>
 800f680:	f001 f852 	bl	8010728 <__sinit>
 800f684:	69ab      	ldr	r3, [r5, #24]
 800f686:	68ac      	ldr	r4, [r5, #8]
 800f688:	b913      	cbnz	r3, 800f690 <_puts_r+0x1c>
 800f68a:	4628      	mov	r0, r5
 800f68c:	f001 f84c 	bl	8010728 <__sinit>
 800f690:	4b23      	ldr	r3, [pc, #140]	; (800f720 <_puts_r+0xac>)
 800f692:	429c      	cmp	r4, r3
 800f694:	d117      	bne.n	800f6c6 <_puts_r+0x52>
 800f696:	686c      	ldr	r4, [r5, #4]
 800f698:	89a3      	ldrh	r3, [r4, #12]
 800f69a:	071b      	lsls	r3, r3, #28
 800f69c:	d51d      	bpl.n	800f6da <_puts_r+0x66>
 800f69e:	6923      	ldr	r3, [r4, #16]
 800f6a0:	b1db      	cbz	r3, 800f6da <_puts_r+0x66>
 800f6a2:	3e01      	subs	r6, #1
 800f6a4:	68a3      	ldr	r3, [r4, #8]
 800f6a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f6aa:	3b01      	subs	r3, #1
 800f6ac:	60a3      	str	r3, [r4, #8]
 800f6ae:	b9e9      	cbnz	r1, 800f6ec <_puts_r+0x78>
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	da2e      	bge.n	800f712 <_puts_r+0x9e>
 800f6b4:	4622      	mov	r2, r4
 800f6b6:	210a      	movs	r1, #10
 800f6b8:	4628      	mov	r0, r5
 800f6ba:	f000 f83f 	bl	800f73c <__swbuf_r>
 800f6be:	3001      	adds	r0, #1
 800f6c0:	d011      	beq.n	800f6e6 <_puts_r+0x72>
 800f6c2:	200a      	movs	r0, #10
 800f6c4:	e011      	b.n	800f6ea <_puts_r+0x76>
 800f6c6:	4b17      	ldr	r3, [pc, #92]	; (800f724 <_puts_r+0xb0>)
 800f6c8:	429c      	cmp	r4, r3
 800f6ca:	d101      	bne.n	800f6d0 <_puts_r+0x5c>
 800f6cc:	68ac      	ldr	r4, [r5, #8]
 800f6ce:	e7e3      	b.n	800f698 <_puts_r+0x24>
 800f6d0:	4b15      	ldr	r3, [pc, #84]	; (800f728 <_puts_r+0xb4>)
 800f6d2:	429c      	cmp	r4, r3
 800f6d4:	bf08      	it	eq
 800f6d6:	68ec      	ldreq	r4, [r5, #12]
 800f6d8:	e7de      	b.n	800f698 <_puts_r+0x24>
 800f6da:	4621      	mov	r1, r4
 800f6dc:	4628      	mov	r0, r5
 800f6de:	f000 f87f 	bl	800f7e0 <__swsetup_r>
 800f6e2:	2800      	cmp	r0, #0
 800f6e4:	d0dd      	beq.n	800f6a2 <_puts_r+0x2e>
 800f6e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f6ea:	bd70      	pop	{r4, r5, r6, pc}
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	da04      	bge.n	800f6fa <_puts_r+0x86>
 800f6f0:	69a2      	ldr	r2, [r4, #24]
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	dc06      	bgt.n	800f704 <_puts_r+0x90>
 800f6f6:	290a      	cmp	r1, #10
 800f6f8:	d004      	beq.n	800f704 <_puts_r+0x90>
 800f6fa:	6823      	ldr	r3, [r4, #0]
 800f6fc:	1c5a      	adds	r2, r3, #1
 800f6fe:	6022      	str	r2, [r4, #0]
 800f700:	7019      	strb	r1, [r3, #0]
 800f702:	e7cf      	b.n	800f6a4 <_puts_r+0x30>
 800f704:	4622      	mov	r2, r4
 800f706:	4628      	mov	r0, r5
 800f708:	f000 f818 	bl	800f73c <__swbuf_r>
 800f70c:	3001      	adds	r0, #1
 800f70e:	d1c9      	bne.n	800f6a4 <_puts_r+0x30>
 800f710:	e7e9      	b.n	800f6e6 <_puts_r+0x72>
 800f712:	6823      	ldr	r3, [r4, #0]
 800f714:	200a      	movs	r0, #10
 800f716:	1c5a      	adds	r2, r3, #1
 800f718:	6022      	str	r2, [r4, #0]
 800f71a:	7018      	strb	r0, [r3, #0]
 800f71c:	e7e5      	b.n	800f6ea <_puts_r+0x76>
 800f71e:	bf00      	nop
 800f720:	08011fe8 	.word	0x08011fe8
 800f724:	08012008 	.word	0x08012008
 800f728:	08011fc8 	.word	0x08011fc8

0800f72c <puts>:
 800f72c:	4b02      	ldr	r3, [pc, #8]	; (800f738 <puts+0xc>)
 800f72e:	4601      	mov	r1, r0
 800f730:	6818      	ldr	r0, [r3, #0]
 800f732:	f7ff bf9f 	b.w	800f674 <_puts_r>
 800f736:	bf00      	nop
 800f738:	2000003c 	.word	0x2000003c

0800f73c <__swbuf_r>:
 800f73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f73e:	460e      	mov	r6, r1
 800f740:	4614      	mov	r4, r2
 800f742:	4605      	mov	r5, r0
 800f744:	b118      	cbz	r0, 800f74e <__swbuf_r+0x12>
 800f746:	6983      	ldr	r3, [r0, #24]
 800f748:	b90b      	cbnz	r3, 800f74e <__swbuf_r+0x12>
 800f74a:	f000 ffed 	bl	8010728 <__sinit>
 800f74e:	4b21      	ldr	r3, [pc, #132]	; (800f7d4 <__swbuf_r+0x98>)
 800f750:	429c      	cmp	r4, r3
 800f752:	d12a      	bne.n	800f7aa <__swbuf_r+0x6e>
 800f754:	686c      	ldr	r4, [r5, #4]
 800f756:	69a3      	ldr	r3, [r4, #24]
 800f758:	60a3      	str	r3, [r4, #8]
 800f75a:	89a3      	ldrh	r3, [r4, #12]
 800f75c:	071a      	lsls	r2, r3, #28
 800f75e:	d52e      	bpl.n	800f7be <__swbuf_r+0x82>
 800f760:	6923      	ldr	r3, [r4, #16]
 800f762:	b363      	cbz	r3, 800f7be <__swbuf_r+0x82>
 800f764:	6923      	ldr	r3, [r4, #16]
 800f766:	6820      	ldr	r0, [r4, #0]
 800f768:	1ac0      	subs	r0, r0, r3
 800f76a:	6963      	ldr	r3, [r4, #20]
 800f76c:	b2f6      	uxtb	r6, r6
 800f76e:	4283      	cmp	r3, r0
 800f770:	4637      	mov	r7, r6
 800f772:	dc04      	bgt.n	800f77e <__swbuf_r+0x42>
 800f774:	4621      	mov	r1, r4
 800f776:	4628      	mov	r0, r5
 800f778:	f000 ff6c 	bl	8010654 <_fflush_r>
 800f77c:	bb28      	cbnz	r0, 800f7ca <__swbuf_r+0x8e>
 800f77e:	68a3      	ldr	r3, [r4, #8]
 800f780:	3b01      	subs	r3, #1
 800f782:	60a3      	str	r3, [r4, #8]
 800f784:	6823      	ldr	r3, [r4, #0]
 800f786:	1c5a      	adds	r2, r3, #1
 800f788:	6022      	str	r2, [r4, #0]
 800f78a:	701e      	strb	r6, [r3, #0]
 800f78c:	6963      	ldr	r3, [r4, #20]
 800f78e:	3001      	adds	r0, #1
 800f790:	4283      	cmp	r3, r0
 800f792:	d004      	beq.n	800f79e <__swbuf_r+0x62>
 800f794:	89a3      	ldrh	r3, [r4, #12]
 800f796:	07db      	lsls	r3, r3, #31
 800f798:	d519      	bpl.n	800f7ce <__swbuf_r+0x92>
 800f79a:	2e0a      	cmp	r6, #10
 800f79c:	d117      	bne.n	800f7ce <__swbuf_r+0x92>
 800f79e:	4621      	mov	r1, r4
 800f7a0:	4628      	mov	r0, r5
 800f7a2:	f000 ff57 	bl	8010654 <_fflush_r>
 800f7a6:	b190      	cbz	r0, 800f7ce <__swbuf_r+0x92>
 800f7a8:	e00f      	b.n	800f7ca <__swbuf_r+0x8e>
 800f7aa:	4b0b      	ldr	r3, [pc, #44]	; (800f7d8 <__swbuf_r+0x9c>)
 800f7ac:	429c      	cmp	r4, r3
 800f7ae:	d101      	bne.n	800f7b4 <__swbuf_r+0x78>
 800f7b0:	68ac      	ldr	r4, [r5, #8]
 800f7b2:	e7d0      	b.n	800f756 <__swbuf_r+0x1a>
 800f7b4:	4b09      	ldr	r3, [pc, #36]	; (800f7dc <__swbuf_r+0xa0>)
 800f7b6:	429c      	cmp	r4, r3
 800f7b8:	bf08      	it	eq
 800f7ba:	68ec      	ldreq	r4, [r5, #12]
 800f7bc:	e7cb      	b.n	800f756 <__swbuf_r+0x1a>
 800f7be:	4621      	mov	r1, r4
 800f7c0:	4628      	mov	r0, r5
 800f7c2:	f000 f80d 	bl	800f7e0 <__swsetup_r>
 800f7c6:	2800      	cmp	r0, #0
 800f7c8:	d0cc      	beq.n	800f764 <__swbuf_r+0x28>
 800f7ca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f7ce:	4638      	mov	r0, r7
 800f7d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7d2:	bf00      	nop
 800f7d4:	08011fe8 	.word	0x08011fe8
 800f7d8:	08012008 	.word	0x08012008
 800f7dc:	08011fc8 	.word	0x08011fc8

0800f7e0 <__swsetup_r>:
 800f7e0:	4b32      	ldr	r3, [pc, #200]	; (800f8ac <__swsetup_r+0xcc>)
 800f7e2:	b570      	push	{r4, r5, r6, lr}
 800f7e4:	681d      	ldr	r5, [r3, #0]
 800f7e6:	4606      	mov	r6, r0
 800f7e8:	460c      	mov	r4, r1
 800f7ea:	b125      	cbz	r5, 800f7f6 <__swsetup_r+0x16>
 800f7ec:	69ab      	ldr	r3, [r5, #24]
 800f7ee:	b913      	cbnz	r3, 800f7f6 <__swsetup_r+0x16>
 800f7f0:	4628      	mov	r0, r5
 800f7f2:	f000 ff99 	bl	8010728 <__sinit>
 800f7f6:	4b2e      	ldr	r3, [pc, #184]	; (800f8b0 <__swsetup_r+0xd0>)
 800f7f8:	429c      	cmp	r4, r3
 800f7fa:	d10f      	bne.n	800f81c <__swsetup_r+0x3c>
 800f7fc:	686c      	ldr	r4, [r5, #4]
 800f7fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f802:	b29a      	uxth	r2, r3
 800f804:	0715      	lsls	r5, r2, #28
 800f806:	d42c      	bmi.n	800f862 <__swsetup_r+0x82>
 800f808:	06d0      	lsls	r0, r2, #27
 800f80a:	d411      	bmi.n	800f830 <__swsetup_r+0x50>
 800f80c:	2209      	movs	r2, #9
 800f80e:	6032      	str	r2, [r6, #0]
 800f810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f814:	81a3      	strh	r3, [r4, #12]
 800f816:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f81a:	e03e      	b.n	800f89a <__swsetup_r+0xba>
 800f81c:	4b25      	ldr	r3, [pc, #148]	; (800f8b4 <__swsetup_r+0xd4>)
 800f81e:	429c      	cmp	r4, r3
 800f820:	d101      	bne.n	800f826 <__swsetup_r+0x46>
 800f822:	68ac      	ldr	r4, [r5, #8]
 800f824:	e7eb      	b.n	800f7fe <__swsetup_r+0x1e>
 800f826:	4b24      	ldr	r3, [pc, #144]	; (800f8b8 <__swsetup_r+0xd8>)
 800f828:	429c      	cmp	r4, r3
 800f82a:	bf08      	it	eq
 800f82c:	68ec      	ldreq	r4, [r5, #12]
 800f82e:	e7e6      	b.n	800f7fe <__swsetup_r+0x1e>
 800f830:	0751      	lsls	r1, r2, #29
 800f832:	d512      	bpl.n	800f85a <__swsetup_r+0x7a>
 800f834:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f836:	b141      	cbz	r1, 800f84a <__swsetup_r+0x6a>
 800f838:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f83c:	4299      	cmp	r1, r3
 800f83e:	d002      	beq.n	800f846 <__swsetup_r+0x66>
 800f840:	4630      	mov	r0, r6
 800f842:	f001 fb5f 	bl	8010f04 <_free_r>
 800f846:	2300      	movs	r3, #0
 800f848:	6363      	str	r3, [r4, #52]	; 0x34
 800f84a:	89a3      	ldrh	r3, [r4, #12]
 800f84c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f850:	81a3      	strh	r3, [r4, #12]
 800f852:	2300      	movs	r3, #0
 800f854:	6063      	str	r3, [r4, #4]
 800f856:	6923      	ldr	r3, [r4, #16]
 800f858:	6023      	str	r3, [r4, #0]
 800f85a:	89a3      	ldrh	r3, [r4, #12]
 800f85c:	f043 0308 	orr.w	r3, r3, #8
 800f860:	81a3      	strh	r3, [r4, #12]
 800f862:	6923      	ldr	r3, [r4, #16]
 800f864:	b94b      	cbnz	r3, 800f87a <__swsetup_r+0x9a>
 800f866:	89a3      	ldrh	r3, [r4, #12]
 800f868:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f86c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f870:	d003      	beq.n	800f87a <__swsetup_r+0x9a>
 800f872:	4621      	mov	r1, r4
 800f874:	4630      	mov	r0, r6
 800f876:	f001 f813 	bl	80108a0 <__smakebuf_r>
 800f87a:	89a2      	ldrh	r2, [r4, #12]
 800f87c:	f012 0301 	ands.w	r3, r2, #1
 800f880:	d00c      	beq.n	800f89c <__swsetup_r+0xbc>
 800f882:	2300      	movs	r3, #0
 800f884:	60a3      	str	r3, [r4, #8]
 800f886:	6963      	ldr	r3, [r4, #20]
 800f888:	425b      	negs	r3, r3
 800f88a:	61a3      	str	r3, [r4, #24]
 800f88c:	6923      	ldr	r3, [r4, #16]
 800f88e:	b953      	cbnz	r3, 800f8a6 <__swsetup_r+0xc6>
 800f890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f894:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f898:	d1ba      	bne.n	800f810 <__swsetup_r+0x30>
 800f89a:	bd70      	pop	{r4, r5, r6, pc}
 800f89c:	0792      	lsls	r2, r2, #30
 800f89e:	bf58      	it	pl
 800f8a0:	6963      	ldrpl	r3, [r4, #20]
 800f8a2:	60a3      	str	r3, [r4, #8]
 800f8a4:	e7f2      	b.n	800f88c <__swsetup_r+0xac>
 800f8a6:	2000      	movs	r0, #0
 800f8a8:	e7f7      	b.n	800f89a <__swsetup_r+0xba>
 800f8aa:	bf00      	nop
 800f8ac:	2000003c 	.word	0x2000003c
 800f8b0:	08011fe8 	.word	0x08011fe8
 800f8b4:	08012008 	.word	0x08012008
 800f8b8:	08011fc8 	.word	0x08011fc8

0800f8bc <quorem>:
 800f8bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8c0:	6903      	ldr	r3, [r0, #16]
 800f8c2:	690c      	ldr	r4, [r1, #16]
 800f8c4:	42a3      	cmp	r3, r4
 800f8c6:	4680      	mov	r8, r0
 800f8c8:	f2c0 8082 	blt.w	800f9d0 <quorem+0x114>
 800f8cc:	3c01      	subs	r4, #1
 800f8ce:	f101 0714 	add.w	r7, r1, #20
 800f8d2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800f8d6:	f100 0614 	add.w	r6, r0, #20
 800f8da:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f8de:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f8e2:	eb06 030c 	add.w	r3, r6, ip
 800f8e6:	3501      	adds	r5, #1
 800f8e8:	eb07 090c 	add.w	r9, r7, ip
 800f8ec:	9301      	str	r3, [sp, #4]
 800f8ee:	fbb0 f5f5 	udiv	r5, r0, r5
 800f8f2:	b395      	cbz	r5, 800f95a <quorem+0x9e>
 800f8f4:	f04f 0a00 	mov.w	sl, #0
 800f8f8:	4638      	mov	r0, r7
 800f8fa:	46b6      	mov	lr, r6
 800f8fc:	46d3      	mov	fp, sl
 800f8fe:	f850 2b04 	ldr.w	r2, [r0], #4
 800f902:	b293      	uxth	r3, r2
 800f904:	fb05 a303 	mla	r3, r5, r3, sl
 800f908:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f90c:	b29b      	uxth	r3, r3
 800f90e:	ebab 0303 	sub.w	r3, fp, r3
 800f912:	0c12      	lsrs	r2, r2, #16
 800f914:	f8de b000 	ldr.w	fp, [lr]
 800f918:	fb05 a202 	mla	r2, r5, r2, sl
 800f91c:	fa13 f38b 	uxtah	r3, r3, fp
 800f920:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f924:	fa1f fb82 	uxth.w	fp, r2
 800f928:	f8de 2000 	ldr.w	r2, [lr]
 800f92c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f930:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f934:	b29b      	uxth	r3, r3
 800f936:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f93a:	4581      	cmp	r9, r0
 800f93c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f940:	f84e 3b04 	str.w	r3, [lr], #4
 800f944:	d2db      	bcs.n	800f8fe <quorem+0x42>
 800f946:	f856 300c 	ldr.w	r3, [r6, ip]
 800f94a:	b933      	cbnz	r3, 800f95a <quorem+0x9e>
 800f94c:	9b01      	ldr	r3, [sp, #4]
 800f94e:	3b04      	subs	r3, #4
 800f950:	429e      	cmp	r6, r3
 800f952:	461a      	mov	r2, r3
 800f954:	d330      	bcc.n	800f9b8 <quorem+0xfc>
 800f956:	f8c8 4010 	str.w	r4, [r8, #16]
 800f95a:	4640      	mov	r0, r8
 800f95c:	f001 f9fe 	bl	8010d5c <__mcmp>
 800f960:	2800      	cmp	r0, #0
 800f962:	db25      	blt.n	800f9b0 <quorem+0xf4>
 800f964:	3501      	adds	r5, #1
 800f966:	4630      	mov	r0, r6
 800f968:	f04f 0c00 	mov.w	ip, #0
 800f96c:	f857 2b04 	ldr.w	r2, [r7], #4
 800f970:	f8d0 e000 	ldr.w	lr, [r0]
 800f974:	b293      	uxth	r3, r2
 800f976:	ebac 0303 	sub.w	r3, ip, r3
 800f97a:	0c12      	lsrs	r2, r2, #16
 800f97c:	fa13 f38e 	uxtah	r3, r3, lr
 800f980:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f984:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f988:	b29b      	uxth	r3, r3
 800f98a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f98e:	45b9      	cmp	r9, r7
 800f990:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f994:	f840 3b04 	str.w	r3, [r0], #4
 800f998:	d2e8      	bcs.n	800f96c <quorem+0xb0>
 800f99a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800f99e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f9a2:	b92a      	cbnz	r2, 800f9b0 <quorem+0xf4>
 800f9a4:	3b04      	subs	r3, #4
 800f9a6:	429e      	cmp	r6, r3
 800f9a8:	461a      	mov	r2, r3
 800f9aa:	d30b      	bcc.n	800f9c4 <quorem+0x108>
 800f9ac:	f8c8 4010 	str.w	r4, [r8, #16]
 800f9b0:	4628      	mov	r0, r5
 800f9b2:	b003      	add	sp, #12
 800f9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9b8:	6812      	ldr	r2, [r2, #0]
 800f9ba:	3b04      	subs	r3, #4
 800f9bc:	2a00      	cmp	r2, #0
 800f9be:	d1ca      	bne.n	800f956 <quorem+0x9a>
 800f9c0:	3c01      	subs	r4, #1
 800f9c2:	e7c5      	b.n	800f950 <quorem+0x94>
 800f9c4:	6812      	ldr	r2, [r2, #0]
 800f9c6:	3b04      	subs	r3, #4
 800f9c8:	2a00      	cmp	r2, #0
 800f9ca:	d1ef      	bne.n	800f9ac <quorem+0xf0>
 800f9cc:	3c01      	subs	r4, #1
 800f9ce:	e7ea      	b.n	800f9a6 <quorem+0xea>
 800f9d0:	2000      	movs	r0, #0
 800f9d2:	e7ee      	b.n	800f9b2 <quorem+0xf6>
 800f9d4:	0000      	movs	r0, r0
	...

0800f9d8 <_dtoa_r>:
 800f9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9dc:	ec57 6b10 	vmov	r6, r7, d0
 800f9e0:	b097      	sub	sp, #92	; 0x5c
 800f9e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f9e4:	9106      	str	r1, [sp, #24]
 800f9e6:	4604      	mov	r4, r0
 800f9e8:	920b      	str	r2, [sp, #44]	; 0x2c
 800f9ea:	9312      	str	r3, [sp, #72]	; 0x48
 800f9ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f9f0:	e9cd 6700 	strd	r6, r7, [sp]
 800f9f4:	b93d      	cbnz	r5, 800fa06 <_dtoa_r+0x2e>
 800f9f6:	2010      	movs	r0, #16
 800f9f8:	f000 ff92 	bl	8010920 <malloc>
 800f9fc:	6260      	str	r0, [r4, #36]	; 0x24
 800f9fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fa02:	6005      	str	r5, [r0, #0]
 800fa04:	60c5      	str	r5, [r0, #12]
 800fa06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa08:	6819      	ldr	r1, [r3, #0]
 800fa0a:	b151      	cbz	r1, 800fa22 <_dtoa_r+0x4a>
 800fa0c:	685a      	ldr	r2, [r3, #4]
 800fa0e:	604a      	str	r2, [r1, #4]
 800fa10:	2301      	movs	r3, #1
 800fa12:	4093      	lsls	r3, r2
 800fa14:	608b      	str	r3, [r1, #8]
 800fa16:	4620      	mov	r0, r4
 800fa18:	f000 ffbe 	bl	8010998 <_Bfree>
 800fa1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa1e:	2200      	movs	r2, #0
 800fa20:	601a      	str	r2, [r3, #0]
 800fa22:	1e3b      	subs	r3, r7, #0
 800fa24:	bfbb      	ittet	lt
 800fa26:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fa2a:	9301      	strlt	r3, [sp, #4]
 800fa2c:	2300      	movge	r3, #0
 800fa2e:	2201      	movlt	r2, #1
 800fa30:	bfac      	ite	ge
 800fa32:	f8c8 3000 	strge.w	r3, [r8]
 800fa36:	f8c8 2000 	strlt.w	r2, [r8]
 800fa3a:	4baf      	ldr	r3, [pc, #700]	; (800fcf8 <_dtoa_r+0x320>)
 800fa3c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fa40:	ea33 0308 	bics.w	r3, r3, r8
 800fa44:	d114      	bne.n	800fa70 <_dtoa_r+0x98>
 800fa46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fa48:	f242 730f 	movw	r3, #9999	; 0x270f
 800fa4c:	6013      	str	r3, [r2, #0]
 800fa4e:	9b00      	ldr	r3, [sp, #0]
 800fa50:	b923      	cbnz	r3, 800fa5c <_dtoa_r+0x84>
 800fa52:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800fa56:	2800      	cmp	r0, #0
 800fa58:	f000 8542 	beq.w	80104e0 <_dtoa_r+0xb08>
 800fa5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa5e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800fd0c <_dtoa_r+0x334>
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	f000 8544 	beq.w	80104f0 <_dtoa_r+0xb18>
 800fa68:	f10b 0303 	add.w	r3, fp, #3
 800fa6c:	f000 bd3e 	b.w	80104ec <_dtoa_r+0xb14>
 800fa70:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fa74:	2200      	movs	r2, #0
 800fa76:	2300      	movs	r3, #0
 800fa78:	4630      	mov	r0, r6
 800fa7a:	4639      	mov	r1, r7
 800fa7c:	f7f0 fffc 	bl	8000a78 <__aeabi_dcmpeq>
 800fa80:	4681      	mov	r9, r0
 800fa82:	b168      	cbz	r0, 800faa0 <_dtoa_r+0xc8>
 800fa84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fa86:	2301      	movs	r3, #1
 800fa88:	6013      	str	r3, [r2, #0]
 800fa8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	f000 8524 	beq.w	80104da <_dtoa_r+0xb02>
 800fa92:	4b9a      	ldr	r3, [pc, #616]	; (800fcfc <_dtoa_r+0x324>)
 800fa94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fa96:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800fa9a:	6013      	str	r3, [r2, #0]
 800fa9c:	f000 bd28 	b.w	80104f0 <_dtoa_r+0xb18>
 800faa0:	aa14      	add	r2, sp, #80	; 0x50
 800faa2:	a915      	add	r1, sp, #84	; 0x54
 800faa4:	ec47 6b10 	vmov	d0, r6, r7
 800faa8:	4620      	mov	r0, r4
 800faaa:	f001 f9ce 	bl	8010e4a <__d2b>
 800faae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800fab2:	9004      	str	r0, [sp, #16]
 800fab4:	2d00      	cmp	r5, #0
 800fab6:	d07c      	beq.n	800fbb2 <_dtoa_r+0x1da>
 800fab8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fabc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800fac0:	46b2      	mov	sl, r6
 800fac2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800fac6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800faca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800face:	2200      	movs	r2, #0
 800fad0:	4b8b      	ldr	r3, [pc, #556]	; (800fd00 <_dtoa_r+0x328>)
 800fad2:	4650      	mov	r0, sl
 800fad4:	4659      	mov	r1, fp
 800fad6:	f7f0 fbaf 	bl	8000238 <__aeabi_dsub>
 800fada:	a381      	add	r3, pc, #516	; (adr r3, 800fce0 <_dtoa_r+0x308>)
 800fadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae0:	f7f0 fd62 	bl	80005a8 <__aeabi_dmul>
 800fae4:	a380      	add	r3, pc, #512	; (adr r3, 800fce8 <_dtoa_r+0x310>)
 800fae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faea:	f7f0 fba7 	bl	800023c <__adddf3>
 800faee:	4606      	mov	r6, r0
 800faf0:	4628      	mov	r0, r5
 800faf2:	460f      	mov	r7, r1
 800faf4:	f7f0 fcee 	bl	80004d4 <__aeabi_i2d>
 800faf8:	a37d      	add	r3, pc, #500	; (adr r3, 800fcf0 <_dtoa_r+0x318>)
 800fafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fafe:	f7f0 fd53 	bl	80005a8 <__aeabi_dmul>
 800fb02:	4602      	mov	r2, r0
 800fb04:	460b      	mov	r3, r1
 800fb06:	4630      	mov	r0, r6
 800fb08:	4639      	mov	r1, r7
 800fb0a:	f7f0 fb97 	bl	800023c <__adddf3>
 800fb0e:	4606      	mov	r6, r0
 800fb10:	460f      	mov	r7, r1
 800fb12:	f7f0 fff9 	bl	8000b08 <__aeabi_d2iz>
 800fb16:	2200      	movs	r2, #0
 800fb18:	4682      	mov	sl, r0
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	4630      	mov	r0, r6
 800fb1e:	4639      	mov	r1, r7
 800fb20:	f7f0 ffb4 	bl	8000a8c <__aeabi_dcmplt>
 800fb24:	b148      	cbz	r0, 800fb3a <_dtoa_r+0x162>
 800fb26:	4650      	mov	r0, sl
 800fb28:	f7f0 fcd4 	bl	80004d4 <__aeabi_i2d>
 800fb2c:	4632      	mov	r2, r6
 800fb2e:	463b      	mov	r3, r7
 800fb30:	f7f0 ffa2 	bl	8000a78 <__aeabi_dcmpeq>
 800fb34:	b908      	cbnz	r0, 800fb3a <_dtoa_r+0x162>
 800fb36:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fb3a:	f1ba 0f16 	cmp.w	sl, #22
 800fb3e:	d859      	bhi.n	800fbf4 <_dtoa_r+0x21c>
 800fb40:	4970      	ldr	r1, [pc, #448]	; (800fd04 <_dtoa_r+0x32c>)
 800fb42:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800fb46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb4e:	f7f0 ffbb 	bl	8000ac8 <__aeabi_dcmpgt>
 800fb52:	2800      	cmp	r0, #0
 800fb54:	d050      	beq.n	800fbf8 <_dtoa_r+0x220>
 800fb56:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	930f      	str	r3, [sp, #60]	; 0x3c
 800fb5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fb60:	1b5d      	subs	r5, r3, r5
 800fb62:	f1b5 0801 	subs.w	r8, r5, #1
 800fb66:	bf49      	itett	mi
 800fb68:	f1c5 0301 	rsbmi	r3, r5, #1
 800fb6c:	2300      	movpl	r3, #0
 800fb6e:	9305      	strmi	r3, [sp, #20]
 800fb70:	f04f 0800 	movmi.w	r8, #0
 800fb74:	bf58      	it	pl
 800fb76:	9305      	strpl	r3, [sp, #20]
 800fb78:	f1ba 0f00 	cmp.w	sl, #0
 800fb7c:	db3e      	blt.n	800fbfc <_dtoa_r+0x224>
 800fb7e:	2300      	movs	r3, #0
 800fb80:	44d0      	add	r8, sl
 800fb82:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800fb86:	9307      	str	r3, [sp, #28]
 800fb88:	9b06      	ldr	r3, [sp, #24]
 800fb8a:	2b09      	cmp	r3, #9
 800fb8c:	f200 8090 	bhi.w	800fcb0 <_dtoa_r+0x2d8>
 800fb90:	2b05      	cmp	r3, #5
 800fb92:	bfc4      	itt	gt
 800fb94:	3b04      	subgt	r3, #4
 800fb96:	9306      	strgt	r3, [sp, #24]
 800fb98:	9b06      	ldr	r3, [sp, #24]
 800fb9a:	f1a3 0302 	sub.w	r3, r3, #2
 800fb9e:	bfcc      	ite	gt
 800fba0:	2500      	movgt	r5, #0
 800fba2:	2501      	movle	r5, #1
 800fba4:	2b03      	cmp	r3, #3
 800fba6:	f200 808f 	bhi.w	800fcc8 <_dtoa_r+0x2f0>
 800fbaa:	e8df f003 	tbb	[pc, r3]
 800fbae:	7f7d      	.short	0x7f7d
 800fbb0:	7131      	.short	0x7131
 800fbb2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800fbb6:	441d      	add	r5, r3
 800fbb8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800fbbc:	2820      	cmp	r0, #32
 800fbbe:	dd13      	ble.n	800fbe8 <_dtoa_r+0x210>
 800fbc0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800fbc4:	9b00      	ldr	r3, [sp, #0]
 800fbc6:	fa08 f800 	lsl.w	r8, r8, r0
 800fbca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800fbce:	fa23 f000 	lsr.w	r0, r3, r0
 800fbd2:	ea48 0000 	orr.w	r0, r8, r0
 800fbd6:	f7f0 fc6d 	bl	80004b4 <__aeabi_ui2d>
 800fbda:	2301      	movs	r3, #1
 800fbdc:	4682      	mov	sl, r0
 800fbde:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800fbe2:	3d01      	subs	r5, #1
 800fbe4:	9313      	str	r3, [sp, #76]	; 0x4c
 800fbe6:	e772      	b.n	800face <_dtoa_r+0xf6>
 800fbe8:	9b00      	ldr	r3, [sp, #0]
 800fbea:	f1c0 0020 	rsb	r0, r0, #32
 800fbee:	fa03 f000 	lsl.w	r0, r3, r0
 800fbf2:	e7f0      	b.n	800fbd6 <_dtoa_r+0x1fe>
 800fbf4:	2301      	movs	r3, #1
 800fbf6:	e7b1      	b.n	800fb5c <_dtoa_r+0x184>
 800fbf8:	900f      	str	r0, [sp, #60]	; 0x3c
 800fbfa:	e7b0      	b.n	800fb5e <_dtoa_r+0x186>
 800fbfc:	9b05      	ldr	r3, [sp, #20]
 800fbfe:	eba3 030a 	sub.w	r3, r3, sl
 800fc02:	9305      	str	r3, [sp, #20]
 800fc04:	f1ca 0300 	rsb	r3, sl, #0
 800fc08:	9307      	str	r3, [sp, #28]
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	930e      	str	r3, [sp, #56]	; 0x38
 800fc0e:	e7bb      	b.n	800fb88 <_dtoa_r+0x1b0>
 800fc10:	2301      	movs	r3, #1
 800fc12:	930a      	str	r3, [sp, #40]	; 0x28
 800fc14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	dd59      	ble.n	800fcce <_dtoa_r+0x2f6>
 800fc1a:	9302      	str	r3, [sp, #8]
 800fc1c:	4699      	mov	r9, r3
 800fc1e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fc20:	2200      	movs	r2, #0
 800fc22:	6072      	str	r2, [r6, #4]
 800fc24:	2204      	movs	r2, #4
 800fc26:	f102 0014 	add.w	r0, r2, #20
 800fc2a:	4298      	cmp	r0, r3
 800fc2c:	6871      	ldr	r1, [r6, #4]
 800fc2e:	d953      	bls.n	800fcd8 <_dtoa_r+0x300>
 800fc30:	4620      	mov	r0, r4
 800fc32:	f000 fe7d 	bl	8010930 <_Balloc>
 800fc36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc38:	6030      	str	r0, [r6, #0]
 800fc3a:	f1b9 0f0e 	cmp.w	r9, #14
 800fc3e:	f8d3 b000 	ldr.w	fp, [r3]
 800fc42:	f200 80e6 	bhi.w	800fe12 <_dtoa_r+0x43a>
 800fc46:	2d00      	cmp	r5, #0
 800fc48:	f000 80e3 	beq.w	800fe12 <_dtoa_r+0x43a>
 800fc4c:	ed9d 7b00 	vldr	d7, [sp]
 800fc50:	f1ba 0f00 	cmp.w	sl, #0
 800fc54:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800fc58:	dd74      	ble.n	800fd44 <_dtoa_r+0x36c>
 800fc5a:	4a2a      	ldr	r2, [pc, #168]	; (800fd04 <_dtoa_r+0x32c>)
 800fc5c:	f00a 030f 	and.w	r3, sl, #15
 800fc60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fc64:	ed93 7b00 	vldr	d7, [r3]
 800fc68:	ea4f 162a 	mov.w	r6, sl, asr #4
 800fc6c:	06f0      	lsls	r0, r6, #27
 800fc6e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800fc72:	d565      	bpl.n	800fd40 <_dtoa_r+0x368>
 800fc74:	4b24      	ldr	r3, [pc, #144]	; (800fd08 <_dtoa_r+0x330>)
 800fc76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fc7a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fc7e:	f7f0 fdbd 	bl	80007fc <__aeabi_ddiv>
 800fc82:	e9cd 0100 	strd	r0, r1, [sp]
 800fc86:	f006 060f 	and.w	r6, r6, #15
 800fc8a:	2503      	movs	r5, #3
 800fc8c:	4f1e      	ldr	r7, [pc, #120]	; (800fd08 <_dtoa_r+0x330>)
 800fc8e:	e04c      	b.n	800fd2a <_dtoa_r+0x352>
 800fc90:	2301      	movs	r3, #1
 800fc92:	930a      	str	r3, [sp, #40]	; 0x28
 800fc94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc96:	4453      	add	r3, sl
 800fc98:	f103 0901 	add.w	r9, r3, #1
 800fc9c:	9302      	str	r3, [sp, #8]
 800fc9e:	464b      	mov	r3, r9
 800fca0:	2b01      	cmp	r3, #1
 800fca2:	bfb8      	it	lt
 800fca4:	2301      	movlt	r3, #1
 800fca6:	e7ba      	b.n	800fc1e <_dtoa_r+0x246>
 800fca8:	2300      	movs	r3, #0
 800fcaa:	e7b2      	b.n	800fc12 <_dtoa_r+0x23a>
 800fcac:	2300      	movs	r3, #0
 800fcae:	e7f0      	b.n	800fc92 <_dtoa_r+0x2ba>
 800fcb0:	2501      	movs	r5, #1
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	9306      	str	r3, [sp, #24]
 800fcb6:	950a      	str	r5, [sp, #40]	; 0x28
 800fcb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fcbc:	9302      	str	r3, [sp, #8]
 800fcbe:	4699      	mov	r9, r3
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	2312      	movs	r3, #18
 800fcc4:	920b      	str	r2, [sp, #44]	; 0x2c
 800fcc6:	e7aa      	b.n	800fc1e <_dtoa_r+0x246>
 800fcc8:	2301      	movs	r3, #1
 800fcca:	930a      	str	r3, [sp, #40]	; 0x28
 800fccc:	e7f4      	b.n	800fcb8 <_dtoa_r+0x2e0>
 800fcce:	2301      	movs	r3, #1
 800fcd0:	9302      	str	r3, [sp, #8]
 800fcd2:	4699      	mov	r9, r3
 800fcd4:	461a      	mov	r2, r3
 800fcd6:	e7f5      	b.n	800fcc4 <_dtoa_r+0x2ec>
 800fcd8:	3101      	adds	r1, #1
 800fcda:	6071      	str	r1, [r6, #4]
 800fcdc:	0052      	lsls	r2, r2, #1
 800fcde:	e7a2      	b.n	800fc26 <_dtoa_r+0x24e>
 800fce0:	636f4361 	.word	0x636f4361
 800fce4:	3fd287a7 	.word	0x3fd287a7
 800fce8:	8b60c8b3 	.word	0x8b60c8b3
 800fcec:	3fc68a28 	.word	0x3fc68a28
 800fcf0:	509f79fb 	.word	0x509f79fb
 800fcf4:	3fd34413 	.word	0x3fd34413
 800fcf8:	7ff00000 	.word	0x7ff00000
 800fcfc:	08011f95 	.word	0x08011f95
 800fd00:	3ff80000 	.word	0x3ff80000
 800fd04:	08012050 	.word	0x08012050
 800fd08:	08012028 	.word	0x08012028
 800fd0c:	08011fc1 	.word	0x08011fc1
 800fd10:	07f1      	lsls	r1, r6, #31
 800fd12:	d508      	bpl.n	800fd26 <_dtoa_r+0x34e>
 800fd14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fd18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd1c:	f7f0 fc44 	bl	80005a8 <__aeabi_dmul>
 800fd20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fd24:	3501      	adds	r5, #1
 800fd26:	1076      	asrs	r6, r6, #1
 800fd28:	3708      	adds	r7, #8
 800fd2a:	2e00      	cmp	r6, #0
 800fd2c:	d1f0      	bne.n	800fd10 <_dtoa_r+0x338>
 800fd2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fd32:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fd36:	f7f0 fd61 	bl	80007fc <__aeabi_ddiv>
 800fd3a:	e9cd 0100 	strd	r0, r1, [sp]
 800fd3e:	e01a      	b.n	800fd76 <_dtoa_r+0x39e>
 800fd40:	2502      	movs	r5, #2
 800fd42:	e7a3      	b.n	800fc8c <_dtoa_r+0x2b4>
 800fd44:	f000 80a0 	beq.w	800fe88 <_dtoa_r+0x4b0>
 800fd48:	f1ca 0600 	rsb	r6, sl, #0
 800fd4c:	4b9f      	ldr	r3, [pc, #636]	; (800ffcc <_dtoa_r+0x5f4>)
 800fd4e:	4fa0      	ldr	r7, [pc, #640]	; (800ffd0 <_dtoa_r+0x5f8>)
 800fd50:	f006 020f 	and.w	r2, r6, #15
 800fd54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fd60:	f7f0 fc22 	bl	80005a8 <__aeabi_dmul>
 800fd64:	e9cd 0100 	strd	r0, r1, [sp]
 800fd68:	1136      	asrs	r6, r6, #4
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	2502      	movs	r5, #2
 800fd6e:	2e00      	cmp	r6, #0
 800fd70:	d17f      	bne.n	800fe72 <_dtoa_r+0x49a>
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d1e1      	bne.n	800fd3a <_dtoa_r+0x362>
 800fd76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	f000 8087 	beq.w	800fe8c <_dtoa_r+0x4b4>
 800fd7e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fd82:	2200      	movs	r2, #0
 800fd84:	4b93      	ldr	r3, [pc, #588]	; (800ffd4 <_dtoa_r+0x5fc>)
 800fd86:	4630      	mov	r0, r6
 800fd88:	4639      	mov	r1, r7
 800fd8a:	f7f0 fe7f 	bl	8000a8c <__aeabi_dcmplt>
 800fd8e:	2800      	cmp	r0, #0
 800fd90:	d07c      	beq.n	800fe8c <_dtoa_r+0x4b4>
 800fd92:	f1b9 0f00 	cmp.w	r9, #0
 800fd96:	d079      	beq.n	800fe8c <_dtoa_r+0x4b4>
 800fd98:	9b02      	ldr	r3, [sp, #8]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	dd35      	ble.n	800fe0a <_dtoa_r+0x432>
 800fd9e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800fda2:	9308      	str	r3, [sp, #32]
 800fda4:	4639      	mov	r1, r7
 800fda6:	2200      	movs	r2, #0
 800fda8:	4b8b      	ldr	r3, [pc, #556]	; (800ffd8 <_dtoa_r+0x600>)
 800fdaa:	4630      	mov	r0, r6
 800fdac:	f7f0 fbfc 	bl	80005a8 <__aeabi_dmul>
 800fdb0:	e9cd 0100 	strd	r0, r1, [sp]
 800fdb4:	9f02      	ldr	r7, [sp, #8]
 800fdb6:	3501      	adds	r5, #1
 800fdb8:	4628      	mov	r0, r5
 800fdba:	f7f0 fb8b 	bl	80004d4 <__aeabi_i2d>
 800fdbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fdc2:	f7f0 fbf1 	bl	80005a8 <__aeabi_dmul>
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	4b84      	ldr	r3, [pc, #528]	; (800ffdc <_dtoa_r+0x604>)
 800fdca:	f7f0 fa37 	bl	800023c <__adddf3>
 800fdce:	4605      	mov	r5, r0
 800fdd0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800fdd4:	2f00      	cmp	r7, #0
 800fdd6:	d15d      	bne.n	800fe94 <_dtoa_r+0x4bc>
 800fdd8:	2200      	movs	r2, #0
 800fdda:	4b81      	ldr	r3, [pc, #516]	; (800ffe0 <_dtoa_r+0x608>)
 800fddc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fde0:	f7f0 fa2a 	bl	8000238 <__aeabi_dsub>
 800fde4:	462a      	mov	r2, r5
 800fde6:	4633      	mov	r3, r6
 800fde8:	e9cd 0100 	strd	r0, r1, [sp]
 800fdec:	f7f0 fe6c 	bl	8000ac8 <__aeabi_dcmpgt>
 800fdf0:	2800      	cmp	r0, #0
 800fdf2:	f040 8288 	bne.w	8010306 <_dtoa_r+0x92e>
 800fdf6:	462a      	mov	r2, r5
 800fdf8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800fdfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe00:	f7f0 fe44 	bl	8000a8c <__aeabi_dcmplt>
 800fe04:	2800      	cmp	r0, #0
 800fe06:	f040 827c 	bne.w	8010302 <_dtoa_r+0x92a>
 800fe0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fe0e:	e9cd 2300 	strd	r2, r3, [sp]
 800fe12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	f2c0 8150 	blt.w	80100ba <_dtoa_r+0x6e2>
 800fe1a:	f1ba 0f0e 	cmp.w	sl, #14
 800fe1e:	f300 814c 	bgt.w	80100ba <_dtoa_r+0x6e2>
 800fe22:	4b6a      	ldr	r3, [pc, #424]	; (800ffcc <_dtoa_r+0x5f4>)
 800fe24:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fe28:	ed93 7b00 	vldr	d7, [r3]
 800fe2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fe34:	f280 80d8 	bge.w	800ffe8 <_dtoa_r+0x610>
 800fe38:	f1b9 0f00 	cmp.w	r9, #0
 800fe3c:	f300 80d4 	bgt.w	800ffe8 <_dtoa_r+0x610>
 800fe40:	f040 825e 	bne.w	8010300 <_dtoa_r+0x928>
 800fe44:	2200      	movs	r2, #0
 800fe46:	4b66      	ldr	r3, [pc, #408]	; (800ffe0 <_dtoa_r+0x608>)
 800fe48:	ec51 0b17 	vmov	r0, r1, d7
 800fe4c:	f7f0 fbac 	bl	80005a8 <__aeabi_dmul>
 800fe50:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe54:	f7f0 fe2e 	bl	8000ab4 <__aeabi_dcmpge>
 800fe58:	464f      	mov	r7, r9
 800fe5a:	464e      	mov	r6, r9
 800fe5c:	2800      	cmp	r0, #0
 800fe5e:	f040 8234 	bne.w	80102ca <_dtoa_r+0x8f2>
 800fe62:	2331      	movs	r3, #49	; 0x31
 800fe64:	f10b 0501 	add.w	r5, fp, #1
 800fe68:	f88b 3000 	strb.w	r3, [fp]
 800fe6c:	f10a 0a01 	add.w	sl, sl, #1
 800fe70:	e22f      	b.n	80102d2 <_dtoa_r+0x8fa>
 800fe72:	07f2      	lsls	r2, r6, #31
 800fe74:	d505      	bpl.n	800fe82 <_dtoa_r+0x4aa>
 800fe76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe7a:	f7f0 fb95 	bl	80005a8 <__aeabi_dmul>
 800fe7e:	3501      	adds	r5, #1
 800fe80:	2301      	movs	r3, #1
 800fe82:	1076      	asrs	r6, r6, #1
 800fe84:	3708      	adds	r7, #8
 800fe86:	e772      	b.n	800fd6e <_dtoa_r+0x396>
 800fe88:	2502      	movs	r5, #2
 800fe8a:	e774      	b.n	800fd76 <_dtoa_r+0x39e>
 800fe8c:	f8cd a020 	str.w	sl, [sp, #32]
 800fe90:	464f      	mov	r7, r9
 800fe92:	e791      	b.n	800fdb8 <_dtoa_r+0x3e0>
 800fe94:	4b4d      	ldr	r3, [pc, #308]	; (800ffcc <_dtoa_r+0x5f4>)
 800fe96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fe9a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800fe9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d047      	beq.n	800ff34 <_dtoa_r+0x55c>
 800fea4:	4602      	mov	r2, r0
 800fea6:	460b      	mov	r3, r1
 800fea8:	2000      	movs	r0, #0
 800feaa:	494e      	ldr	r1, [pc, #312]	; (800ffe4 <_dtoa_r+0x60c>)
 800feac:	f7f0 fca6 	bl	80007fc <__aeabi_ddiv>
 800feb0:	462a      	mov	r2, r5
 800feb2:	4633      	mov	r3, r6
 800feb4:	f7f0 f9c0 	bl	8000238 <__aeabi_dsub>
 800feb8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800febc:	465d      	mov	r5, fp
 800febe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fec2:	f7f0 fe21 	bl	8000b08 <__aeabi_d2iz>
 800fec6:	4606      	mov	r6, r0
 800fec8:	f7f0 fb04 	bl	80004d4 <__aeabi_i2d>
 800fecc:	4602      	mov	r2, r0
 800fece:	460b      	mov	r3, r1
 800fed0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fed4:	f7f0 f9b0 	bl	8000238 <__aeabi_dsub>
 800fed8:	3630      	adds	r6, #48	; 0x30
 800feda:	f805 6b01 	strb.w	r6, [r5], #1
 800fede:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fee2:	e9cd 0100 	strd	r0, r1, [sp]
 800fee6:	f7f0 fdd1 	bl	8000a8c <__aeabi_dcmplt>
 800feea:	2800      	cmp	r0, #0
 800feec:	d163      	bne.n	800ffb6 <_dtoa_r+0x5de>
 800feee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fef2:	2000      	movs	r0, #0
 800fef4:	4937      	ldr	r1, [pc, #220]	; (800ffd4 <_dtoa_r+0x5fc>)
 800fef6:	f7f0 f99f 	bl	8000238 <__aeabi_dsub>
 800fefa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fefe:	f7f0 fdc5 	bl	8000a8c <__aeabi_dcmplt>
 800ff02:	2800      	cmp	r0, #0
 800ff04:	f040 80b7 	bne.w	8010076 <_dtoa_r+0x69e>
 800ff08:	eba5 030b 	sub.w	r3, r5, fp
 800ff0c:	429f      	cmp	r7, r3
 800ff0e:	f77f af7c 	ble.w	800fe0a <_dtoa_r+0x432>
 800ff12:	2200      	movs	r2, #0
 800ff14:	4b30      	ldr	r3, [pc, #192]	; (800ffd8 <_dtoa_r+0x600>)
 800ff16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ff1a:	f7f0 fb45 	bl	80005a8 <__aeabi_dmul>
 800ff1e:	2200      	movs	r2, #0
 800ff20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ff24:	4b2c      	ldr	r3, [pc, #176]	; (800ffd8 <_dtoa_r+0x600>)
 800ff26:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff2a:	f7f0 fb3d 	bl	80005a8 <__aeabi_dmul>
 800ff2e:	e9cd 0100 	strd	r0, r1, [sp]
 800ff32:	e7c4      	b.n	800febe <_dtoa_r+0x4e6>
 800ff34:	462a      	mov	r2, r5
 800ff36:	4633      	mov	r3, r6
 800ff38:	f7f0 fb36 	bl	80005a8 <__aeabi_dmul>
 800ff3c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ff40:	eb0b 0507 	add.w	r5, fp, r7
 800ff44:	465e      	mov	r6, fp
 800ff46:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff4a:	f7f0 fddd 	bl	8000b08 <__aeabi_d2iz>
 800ff4e:	4607      	mov	r7, r0
 800ff50:	f7f0 fac0 	bl	80004d4 <__aeabi_i2d>
 800ff54:	3730      	adds	r7, #48	; 0x30
 800ff56:	4602      	mov	r2, r0
 800ff58:	460b      	mov	r3, r1
 800ff5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff5e:	f7f0 f96b 	bl	8000238 <__aeabi_dsub>
 800ff62:	f806 7b01 	strb.w	r7, [r6], #1
 800ff66:	42ae      	cmp	r6, r5
 800ff68:	e9cd 0100 	strd	r0, r1, [sp]
 800ff6c:	f04f 0200 	mov.w	r2, #0
 800ff70:	d126      	bne.n	800ffc0 <_dtoa_r+0x5e8>
 800ff72:	4b1c      	ldr	r3, [pc, #112]	; (800ffe4 <_dtoa_r+0x60c>)
 800ff74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ff78:	f7f0 f960 	bl	800023c <__adddf3>
 800ff7c:	4602      	mov	r2, r0
 800ff7e:	460b      	mov	r3, r1
 800ff80:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff84:	f7f0 fda0 	bl	8000ac8 <__aeabi_dcmpgt>
 800ff88:	2800      	cmp	r0, #0
 800ff8a:	d174      	bne.n	8010076 <_dtoa_r+0x69e>
 800ff8c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ff90:	2000      	movs	r0, #0
 800ff92:	4914      	ldr	r1, [pc, #80]	; (800ffe4 <_dtoa_r+0x60c>)
 800ff94:	f7f0 f950 	bl	8000238 <__aeabi_dsub>
 800ff98:	4602      	mov	r2, r0
 800ff9a:	460b      	mov	r3, r1
 800ff9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ffa0:	f7f0 fd74 	bl	8000a8c <__aeabi_dcmplt>
 800ffa4:	2800      	cmp	r0, #0
 800ffa6:	f43f af30 	beq.w	800fe0a <_dtoa_r+0x432>
 800ffaa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ffae:	2b30      	cmp	r3, #48	; 0x30
 800ffb0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800ffb4:	d002      	beq.n	800ffbc <_dtoa_r+0x5e4>
 800ffb6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ffba:	e04a      	b.n	8010052 <_dtoa_r+0x67a>
 800ffbc:	4615      	mov	r5, r2
 800ffbe:	e7f4      	b.n	800ffaa <_dtoa_r+0x5d2>
 800ffc0:	4b05      	ldr	r3, [pc, #20]	; (800ffd8 <_dtoa_r+0x600>)
 800ffc2:	f7f0 faf1 	bl	80005a8 <__aeabi_dmul>
 800ffc6:	e9cd 0100 	strd	r0, r1, [sp]
 800ffca:	e7bc      	b.n	800ff46 <_dtoa_r+0x56e>
 800ffcc:	08012050 	.word	0x08012050
 800ffd0:	08012028 	.word	0x08012028
 800ffd4:	3ff00000 	.word	0x3ff00000
 800ffd8:	40240000 	.word	0x40240000
 800ffdc:	401c0000 	.word	0x401c0000
 800ffe0:	40140000 	.word	0x40140000
 800ffe4:	3fe00000 	.word	0x3fe00000
 800ffe8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ffec:	465d      	mov	r5, fp
 800ffee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fff2:	4630      	mov	r0, r6
 800fff4:	4639      	mov	r1, r7
 800fff6:	f7f0 fc01 	bl	80007fc <__aeabi_ddiv>
 800fffa:	f7f0 fd85 	bl	8000b08 <__aeabi_d2iz>
 800fffe:	4680      	mov	r8, r0
 8010000:	f7f0 fa68 	bl	80004d4 <__aeabi_i2d>
 8010004:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010008:	f7f0 face 	bl	80005a8 <__aeabi_dmul>
 801000c:	4602      	mov	r2, r0
 801000e:	460b      	mov	r3, r1
 8010010:	4630      	mov	r0, r6
 8010012:	4639      	mov	r1, r7
 8010014:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8010018:	f7f0 f90e 	bl	8000238 <__aeabi_dsub>
 801001c:	f805 6b01 	strb.w	r6, [r5], #1
 8010020:	eba5 060b 	sub.w	r6, r5, fp
 8010024:	45b1      	cmp	r9, r6
 8010026:	4602      	mov	r2, r0
 8010028:	460b      	mov	r3, r1
 801002a:	d139      	bne.n	80100a0 <_dtoa_r+0x6c8>
 801002c:	f7f0 f906 	bl	800023c <__adddf3>
 8010030:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010034:	4606      	mov	r6, r0
 8010036:	460f      	mov	r7, r1
 8010038:	f7f0 fd46 	bl	8000ac8 <__aeabi_dcmpgt>
 801003c:	b9c8      	cbnz	r0, 8010072 <_dtoa_r+0x69a>
 801003e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010042:	4630      	mov	r0, r6
 8010044:	4639      	mov	r1, r7
 8010046:	f7f0 fd17 	bl	8000a78 <__aeabi_dcmpeq>
 801004a:	b110      	cbz	r0, 8010052 <_dtoa_r+0x67a>
 801004c:	f018 0f01 	tst.w	r8, #1
 8010050:	d10f      	bne.n	8010072 <_dtoa_r+0x69a>
 8010052:	9904      	ldr	r1, [sp, #16]
 8010054:	4620      	mov	r0, r4
 8010056:	f000 fc9f 	bl	8010998 <_Bfree>
 801005a:	2300      	movs	r3, #0
 801005c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801005e:	702b      	strb	r3, [r5, #0]
 8010060:	f10a 0301 	add.w	r3, sl, #1
 8010064:	6013      	str	r3, [r2, #0]
 8010066:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010068:	2b00      	cmp	r3, #0
 801006a:	f000 8241 	beq.w	80104f0 <_dtoa_r+0xb18>
 801006e:	601d      	str	r5, [r3, #0]
 8010070:	e23e      	b.n	80104f0 <_dtoa_r+0xb18>
 8010072:	f8cd a020 	str.w	sl, [sp, #32]
 8010076:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801007a:	2a39      	cmp	r2, #57	; 0x39
 801007c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8010080:	d108      	bne.n	8010094 <_dtoa_r+0x6bc>
 8010082:	459b      	cmp	fp, r3
 8010084:	d10a      	bne.n	801009c <_dtoa_r+0x6c4>
 8010086:	9b08      	ldr	r3, [sp, #32]
 8010088:	3301      	adds	r3, #1
 801008a:	9308      	str	r3, [sp, #32]
 801008c:	2330      	movs	r3, #48	; 0x30
 801008e:	f88b 3000 	strb.w	r3, [fp]
 8010092:	465b      	mov	r3, fp
 8010094:	781a      	ldrb	r2, [r3, #0]
 8010096:	3201      	adds	r2, #1
 8010098:	701a      	strb	r2, [r3, #0]
 801009a:	e78c      	b.n	800ffb6 <_dtoa_r+0x5de>
 801009c:	461d      	mov	r5, r3
 801009e:	e7ea      	b.n	8010076 <_dtoa_r+0x69e>
 80100a0:	2200      	movs	r2, #0
 80100a2:	4b9b      	ldr	r3, [pc, #620]	; (8010310 <_dtoa_r+0x938>)
 80100a4:	f7f0 fa80 	bl	80005a8 <__aeabi_dmul>
 80100a8:	2200      	movs	r2, #0
 80100aa:	2300      	movs	r3, #0
 80100ac:	4606      	mov	r6, r0
 80100ae:	460f      	mov	r7, r1
 80100b0:	f7f0 fce2 	bl	8000a78 <__aeabi_dcmpeq>
 80100b4:	2800      	cmp	r0, #0
 80100b6:	d09a      	beq.n	800ffee <_dtoa_r+0x616>
 80100b8:	e7cb      	b.n	8010052 <_dtoa_r+0x67a>
 80100ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80100bc:	2a00      	cmp	r2, #0
 80100be:	f000 808b 	beq.w	80101d8 <_dtoa_r+0x800>
 80100c2:	9a06      	ldr	r2, [sp, #24]
 80100c4:	2a01      	cmp	r2, #1
 80100c6:	dc6e      	bgt.n	80101a6 <_dtoa_r+0x7ce>
 80100c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80100ca:	2a00      	cmp	r2, #0
 80100cc:	d067      	beq.n	801019e <_dtoa_r+0x7c6>
 80100ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80100d2:	9f07      	ldr	r7, [sp, #28]
 80100d4:	9d05      	ldr	r5, [sp, #20]
 80100d6:	9a05      	ldr	r2, [sp, #20]
 80100d8:	2101      	movs	r1, #1
 80100da:	441a      	add	r2, r3
 80100dc:	4620      	mov	r0, r4
 80100de:	9205      	str	r2, [sp, #20]
 80100e0:	4498      	add	r8, r3
 80100e2:	f000 fcf9 	bl	8010ad8 <__i2b>
 80100e6:	4606      	mov	r6, r0
 80100e8:	2d00      	cmp	r5, #0
 80100ea:	dd0c      	ble.n	8010106 <_dtoa_r+0x72e>
 80100ec:	f1b8 0f00 	cmp.w	r8, #0
 80100f0:	dd09      	ble.n	8010106 <_dtoa_r+0x72e>
 80100f2:	4545      	cmp	r5, r8
 80100f4:	9a05      	ldr	r2, [sp, #20]
 80100f6:	462b      	mov	r3, r5
 80100f8:	bfa8      	it	ge
 80100fa:	4643      	movge	r3, r8
 80100fc:	1ad2      	subs	r2, r2, r3
 80100fe:	9205      	str	r2, [sp, #20]
 8010100:	1aed      	subs	r5, r5, r3
 8010102:	eba8 0803 	sub.w	r8, r8, r3
 8010106:	9b07      	ldr	r3, [sp, #28]
 8010108:	b1eb      	cbz	r3, 8010146 <_dtoa_r+0x76e>
 801010a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801010c:	2b00      	cmp	r3, #0
 801010e:	d067      	beq.n	80101e0 <_dtoa_r+0x808>
 8010110:	b18f      	cbz	r7, 8010136 <_dtoa_r+0x75e>
 8010112:	4631      	mov	r1, r6
 8010114:	463a      	mov	r2, r7
 8010116:	4620      	mov	r0, r4
 8010118:	f000 fd7e 	bl	8010c18 <__pow5mult>
 801011c:	9a04      	ldr	r2, [sp, #16]
 801011e:	4601      	mov	r1, r0
 8010120:	4606      	mov	r6, r0
 8010122:	4620      	mov	r0, r4
 8010124:	f000 fce1 	bl	8010aea <__multiply>
 8010128:	9904      	ldr	r1, [sp, #16]
 801012a:	9008      	str	r0, [sp, #32]
 801012c:	4620      	mov	r0, r4
 801012e:	f000 fc33 	bl	8010998 <_Bfree>
 8010132:	9b08      	ldr	r3, [sp, #32]
 8010134:	9304      	str	r3, [sp, #16]
 8010136:	9b07      	ldr	r3, [sp, #28]
 8010138:	1bda      	subs	r2, r3, r7
 801013a:	d004      	beq.n	8010146 <_dtoa_r+0x76e>
 801013c:	9904      	ldr	r1, [sp, #16]
 801013e:	4620      	mov	r0, r4
 8010140:	f000 fd6a 	bl	8010c18 <__pow5mult>
 8010144:	9004      	str	r0, [sp, #16]
 8010146:	2101      	movs	r1, #1
 8010148:	4620      	mov	r0, r4
 801014a:	f000 fcc5 	bl	8010ad8 <__i2b>
 801014e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010150:	4607      	mov	r7, r0
 8010152:	2b00      	cmp	r3, #0
 8010154:	f000 81d0 	beq.w	80104f8 <_dtoa_r+0xb20>
 8010158:	461a      	mov	r2, r3
 801015a:	4601      	mov	r1, r0
 801015c:	4620      	mov	r0, r4
 801015e:	f000 fd5b 	bl	8010c18 <__pow5mult>
 8010162:	9b06      	ldr	r3, [sp, #24]
 8010164:	2b01      	cmp	r3, #1
 8010166:	4607      	mov	r7, r0
 8010168:	dc40      	bgt.n	80101ec <_dtoa_r+0x814>
 801016a:	9b00      	ldr	r3, [sp, #0]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d139      	bne.n	80101e4 <_dtoa_r+0x80c>
 8010170:	9b01      	ldr	r3, [sp, #4]
 8010172:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010176:	2b00      	cmp	r3, #0
 8010178:	d136      	bne.n	80101e8 <_dtoa_r+0x810>
 801017a:	9b01      	ldr	r3, [sp, #4]
 801017c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010180:	0d1b      	lsrs	r3, r3, #20
 8010182:	051b      	lsls	r3, r3, #20
 8010184:	b12b      	cbz	r3, 8010192 <_dtoa_r+0x7ba>
 8010186:	9b05      	ldr	r3, [sp, #20]
 8010188:	3301      	adds	r3, #1
 801018a:	9305      	str	r3, [sp, #20]
 801018c:	f108 0801 	add.w	r8, r8, #1
 8010190:	2301      	movs	r3, #1
 8010192:	9307      	str	r3, [sp, #28]
 8010194:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010196:	2b00      	cmp	r3, #0
 8010198:	d12a      	bne.n	80101f0 <_dtoa_r+0x818>
 801019a:	2001      	movs	r0, #1
 801019c:	e030      	b.n	8010200 <_dtoa_r+0x828>
 801019e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80101a0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80101a4:	e795      	b.n	80100d2 <_dtoa_r+0x6fa>
 80101a6:	9b07      	ldr	r3, [sp, #28]
 80101a8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80101ac:	42bb      	cmp	r3, r7
 80101ae:	bfbf      	itttt	lt
 80101b0:	9b07      	ldrlt	r3, [sp, #28]
 80101b2:	9707      	strlt	r7, [sp, #28]
 80101b4:	1afa      	sublt	r2, r7, r3
 80101b6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80101b8:	bfbb      	ittet	lt
 80101ba:	189b      	addlt	r3, r3, r2
 80101bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80101be:	1bdf      	subge	r7, r3, r7
 80101c0:	2700      	movlt	r7, #0
 80101c2:	f1b9 0f00 	cmp.w	r9, #0
 80101c6:	bfb5      	itete	lt
 80101c8:	9b05      	ldrlt	r3, [sp, #20]
 80101ca:	9d05      	ldrge	r5, [sp, #20]
 80101cc:	eba3 0509 	sublt.w	r5, r3, r9
 80101d0:	464b      	movge	r3, r9
 80101d2:	bfb8      	it	lt
 80101d4:	2300      	movlt	r3, #0
 80101d6:	e77e      	b.n	80100d6 <_dtoa_r+0x6fe>
 80101d8:	9f07      	ldr	r7, [sp, #28]
 80101da:	9d05      	ldr	r5, [sp, #20]
 80101dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80101de:	e783      	b.n	80100e8 <_dtoa_r+0x710>
 80101e0:	9a07      	ldr	r2, [sp, #28]
 80101e2:	e7ab      	b.n	801013c <_dtoa_r+0x764>
 80101e4:	2300      	movs	r3, #0
 80101e6:	e7d4      	b.n	8010192 <_dtoa_r+0x7ba>
 80101e8:	9b00      	ldr	r3, [sp, #0]
 80101ea:	e7d2      	b.n	8010192 <_dtoa_r+0x7ba>
 80101ec:	2300      	movs	r3, #0
 80101ee:	9307      	str	r3, [sp, #28]
 80101f0:	693b      	ldr	r3, [r7, #16]
 80101f2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80101f6:	6918      	ldr	r0, [r3, #16]
 80101f8:	f000 fc20 	bl	8010a3c <__hi0bits>
 80101fc:	f1c0 0020 	rsb	r0, r0, #32
 8010200:	4440      	add	r0, r8
 8010202:	f010 001f 	ands.w	r0, r0, #31
 8010206:	d047      	beq.n	8010298 <_dtoa_r+0x8c0>
 8010208:	f1c0 0320 	rsb	r3, r0, #32
 801020c:	2b04      	cmp	r3, #4
 801020e:	dd3b      	ble.n	8010288 <_dtoa_r+0x8b0>
 8010210:	9b05      	ldr	r3, [sp, #20]
 8010212:	f1c0 001c 	rsb	r0, r0, #28
 8010216:	4403      	add	r3, r0
 8010218:	9305      	str	r3, [sp, #20]
 801021a:	4405      	add	r5, r0
 801021c:	4480      	add	r8, r0
 801021e:	9b05      	ldr	r3, [sp, #20]
 8010220:	2b00      	cmp	r3, #0
 8010222:	dd05      	ble.n	8010230 <_dtoa_r+0x858>
 8010224:	461a      	mov	r2, r3
 8010226:	9904      	ldr	r1, [sp, #16]
 8010228:	4620      	mov	r0, r4
 801022a:	f000 fd43 	bl	8010cb4 <__lshift>
 801022e:	9004      	str	r0, [sp, #16]
 8010230:	f1b8 0f00 	cmp.w	r8, #0
 8010234:	dd05      	ble.n	8010242 <_dtoa_r+0x86a>
 8010236:	4639      	mov	r1, r7
 8010238:	4642      	mov	r2, r8
 801023a:	4620      	mov	r0, r4
 801023c:	f000 fd3a 	bl	8010cb4 <__lshift>
 8010240:	4607      	mov	r7, r0
 8010242:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010244:	b353      	cbz	r3, 801029c <_dtoa_r+0x8c4>
 8010246:	4639      	mov	r1, r7
 8010248:	9804      	ldr	r0, [sp, #16]
 801024a:	f000 fd87 	bl	8010d5c <__mcmp>
 801024e:	2800      	cmp	r0, #0
 8010250:	da24      	bge.n	801029c <_dtoa_r+0x8c4>
 8010252:	2300      	movs	r3, #0
 8010254:	220a      	movs	r2, #10
 8010256:	9904      	ldr	r1, [sp, #16]
 8010258:	4620      	mov	r0, r4
 801025a:	f000 fbb4 	bl	80109c6 <__multadd>
 801025e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010260:	9004      	str	r0, [sp, #16]
 8010262:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010266:	2b00      	cmp	r3, #0
 8010268:	f000 814d 	beq.w	8010506 <_dtoa_r+0xb2e>
 801026c:	2300      	movs	r3, #0
 801026e:	4631      	mov	r1, r6
 8010270:	220a      	movs	r2, #10
 8010272:	4620      	mov	r0, r4
 8010274:	f000 fba7 	bl	80109c6 <__multadd>
 8010278:	9b02      	ldr	r3, [sp, #8]
 801027a:	2b00      	cmp	r3, #0
 801027c:	4606      	mov	r6, r0
 801027e:	dc4f      	bgt.n	8010320 <_dtoa_r+0x948>
 8010280:	9b06      	ldr	r3, [sp, #24]
 8010282:	2b02      	cmp	r3, #2
 8010284:	dd4c      	ble.n	8010320 <_dtoa_r+0x948>
 8010286:	e011      	b.n	80102ac <_dtoa_r+0x8d4>
 8010288:	d0c9      	beq.n	801021e <_dtoa_r+0x846>
 801028a:	9a05      	ldr	r2, [sp, #20]
 801028c:	331c      	adds	r3, #28
 801028e:	441a      	add	r2, r3
 8010290:	9205      	str	r2, [sp, #20]
 8010292:	441d      	add	r5, r3
 8010294:	4498      	add	r8, r3
 8010296:	e7c2      	b.n	801021e <_dtoa_r+0x846>
 8010298:	4603      	mov	r3, r0
 801029a:	e7f6      	b.n	801028a <_dtoa_r+0x8b2>
 801029c:	f1b9 0f00 	cmp.w	r9, #0
 80102a0:	dc38      	bgt.n	8010314 <_dtoa_r+0x93c>
 80102a2:	9b06      	ldr	r3, [sp, #24]
 80102a4:	2b02      	cmp	r3, #2
 80102a6:	dd35      	ble.n	8010314 <_dtoa_r+0x93c>
 80102a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80102ac:	9b02      	ldr	r3, [sp, #8]
 80102ae:	b963      	cbnz	r3, 80102ca <_dtoa_r+0x8f2>
 80102b0:	4639      	mov	r1, r7
 80102b2:	2205      	movs	r2, #5
 80102b4:	4620      	mov	r0, r4
 80102b6:	f000 fb86 	bl	80109c6 <__multadd>
 80102ba:	4601      	mov	r1, r0
 80102bc:	4607      	mov	r7, r0
 80102be:	9804      	ldr	r0, [sp, #16]
 80102c0:	f000 fd4c 	bl	8010d5c <__mcmp>
 80102c4:	2800      	cmp	r0, #0
 80102c6:	f73f adcc 	bgt.w	800fe62 <_dtoa_r+0x48a>
 80102ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102cc:	465d      	mov	r5, fp
 80102ce:	ea6f 0a03 	mvn.w	sl, r3
 80102d2:	f04f 0900 	mov.w	r9, #0
 80102d6:	4639      	mov	r1, r7
 80102d8:	4620      	mov	r0, r4
 80102da:	f000 fb5d 	bl	8010998 <_Bfree>
 80102de:	2e00      	cmp	r6, #0
 80102e0:	f43f aeb7 	beq.w	8010052 <_dtoa_r+0x67a>
 80102e4:	f1b9 0f00 	cmp.w	r9, #0
 80102e8:	d005      	beq.n	80102f6 <_dtoa_r+0x91e>
 80102ea:	45b1      	cmp	r9, r6
 80102ec:	d003      	beq.n	80102f6 <_dtoa_r+0x91e>
 80102ee:	4649      	mov	r1, r9
 80102f0:	4620      	mov	r0, r4
 80102f2:	f000 fb51 	bl	8010998 <_Bfree>
 80102f6:	4631      	mov	r1, r6
 80102f8:	4620      	mov	r0, r4
 80102fa:	f000 fb4d 	bl	8010998 <_Bfree>
 80102fe:	e6a8      	b.n	8010052 <_dtoa_r+0x67a>
 8010300:	2700      	movs	r7, #0
 8010302:	463e      	mov	r6, r7
 8010304:	e7e1      	b.n	80102ca <_dtoa_r+0x8f2>
 8010306:	f8dd a020 	ldr.w	sl, [sp, #32]
 801030a:	463e      	mov	r6, r7
 801030c:	e5a9      	b.n	800fe62 <_dtoa_r+0x48a>
 801030e:	bf00      	nop
 8010310:	40240000 	.word	0x40240000
 8010314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010316:	f8cd 9008 	str.w	r9, [sp, #8]
 801031a:	2b00      	cmp	r3, #0
 801031c:	f000 80fa 	beq.w	8010514 <_dtoa_r+0xb3c>
 8010320:	2d00      	cmp	r5, #0
 8010322:	dd05      	ble.n	8010330 <_dtoa_r+0x958>
 8010324:	4631      	mov	r1, r6
 8010326:	462a      	mov	r2, r5
 8010328:	4620      	mov	r0, r4
 801032a:	f000 fcc3 	bl	8010cb4 <__lshift>
 801032e:	4606      	mov	r6, r0
 8010330:	9b07      	ldr	r3, [sp, #28]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d04c      	beq.n	80103d0 <_dtoa_r+0x9f8>
 8010336:	6871      	ldr	r1, [r6, #4]
 8010338:	4620      	mov	r0, r4
 801033a:	f000 faf9 	bl	8010930 <_Balloc>
 801033e:	6932      	ldr	r2, [r6, #16]
 8010340:	3202      	adds	r2, #2
 8010342:	4605      	mov	r5, r0
 8010344:	0092      	lsls	r2, r2, #2
 8010346:	f106 010c 	add.w	r1, r6, #12
 801034a:	300c      	adds	r0, #12
 801034c:	f7fe fd0a 	bl	800ed64 <memcpy>
 8010350:	2201      	movs	r2, #1
 8010352:	4629      	mov	r1, r5
 8010354:	4620      	mov	r0, r4
 8010356:	f000 fcad 	bl	8010cb4 <__lshift>
 801035a:	9b00      	ldr	r3, [sp, #0]
 801035c:	f8cd b014 	str.w	fp, [sp, #20]
 8010360:	f003 0301 	and.w	r3, r3, #1
 8010364:	46b1      	mov	r9, r6
 8010366:	9307      	str	r3, [sp, #28]
 8010368:	4606      	mov	r6, r0
 801036a:	4639      	mov	r1, r7
 801036c:	9804      	ldr	r0, [sp, #16]
 801036e:	f7ff faa5 	bl	800f8bc <quorem>
 8010372:	4649      	mov	r1, r9
 8010374:	4605      	mov	r5, r0
 8010376:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801037a:	9804      	ldr	r0, [sp, #16]
 801037c:	f000 fcee 	bl	8010d5c <__mcmp>
 8010380:	4632      	mov	r2, r6
 8010382:	9000      	str	r0, [sp, #0]
 8010384:	4639      	mov	r1, r7
 8010386:	4620      	mov	r0, r4
 8010388:	f000 fd02 	bl	8010d90 <__mdiff>
 801038c:	68c3      	ldr	r3, [r0, #12]
 801038e:	4602      	mov	r2, r0
 8010390:	bb03      	cbnz	r3, 80103d4 <_dtoa_r+0x9fc>
 8010392:	4601      	mov	r1, r0
 8010394:	9008      	str	r0, [sp, #32]
 8010396:	9804      	ldr	r0, [sp, #16]
 8010398:	f000 fce0 	bl	8010d5c <__mcmp>
 801039c:	9a08      	ldr	r2, [sp, #32]
 801039e:	4603      	mov	r3, r0
 80103a0:	4611      	mov	r1, r2
 80103a2:	4620      	mov	r0, r4
 80103a4:	9308      	str	r3, [sp, #32]
 80103a6:	f000 faf7 	bl	8010998 <_Bfree>
 80103aa:	9b08      	ldr	r3, [sp, #32]
 80103ac:	b9a3      	cbnz	r3, 80103d8 <_dtoa_r+0xa00>
 80103ae:	9a06      	ldr	r2, [sp, #24]
 80103b0:	b992      	cbnz	r2, 80103d8 <_dtoa_r+0xa00>
 80103b2:	9a07      	ldr	r2, [sp, #28]
 80103b4:	b982      	cbnz	r2, 80103d8 <_dtoa_r+0xa00>
 80103b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80103ba:	d029      	beq.n	8010410 <_dtoa_r+0xa38>
 80103bc:	9b00      	ldr	r3, [sp, #0]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	dd01      	ble.n	80103c6 <_dtoa_r+0x9ee>
 80103c2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80103c6:	9b05      	ldr	r3, [sp, #20]
 80103c8:	1c5d      	adds	r5, r3, #1
 80103ca:	f883 8000 	strb.w	r8, [r3]
 80103ce:	e782      	b.n	80102d6 <_dtoa_r+0x8fe>
 80103d0:	4630      	mov	r0, r6
 80103d2:	e7c2      	b.n	801035a <_dtoa_r+0x982>
 80103d4:	2301      	movs	r3, #1
 80103d6:	e7e3      	b.n	80103a0 <_dtoa_r+0x9c8>
 80103d8:	9a00      	ldr	r2, [sp, #0]
 80103da:	2a00      	cmp	r2, #0
 80103dc:	db04      	blt.n	80103e8 <_dtoa_r+0xa10>
 80103de:	d125      	bne.n	801042c <_dtoa_r+0xa54>
 80103e0:	9a06      	ldr	r2, [sp, #24]
 80103e2:	bb1a      	cbnz	r2, 801042c <_dtoa_r+0xa54>
 80103e4:	9a07      	ldr	r2, [sp, #28]
 80103e6:	bb0a      	cbnz	r2, 801042c <_dtoa_r+0xa54>
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	ddec      	ble.n	80103c6 <_dtoa_r+0x9ee>
 80103ec:	2201      	movs	r2, #1
 80103ee:	9904      	ldr	r1, [sp, #16]
 80103f0:	4620      	mov	r0, r4
 80103f2:	f000 fc5f 	bl	8010cb4 <__lshift>
 80103f6:	4639      	mov	r1, r7
 80103f8:	9004      	str	r0, [sp, #16]
 80103fa:	f000 fcaf 	bl	8010d5c <__mcmp>
 80103fe:	2800      	cmp	r0, #0
 8010400:	dc03      	bgt.n	801040a <_dtoa_r+0xa32>
 8010402:	d1e0      	bne.n	80103c6 <_dtoa_r+0x9ee>
 8010404:	f018 0f01 	tst.w	r8, #1
 8010408:	d0dd      	beq.n	80103c6 <_dtoa_r+0x9ee>
 801040a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801040e:	d1d8      	bne.n	80103c2 <_dtoa_r+0x9ea>
 8010410:	9b05      	ldr	r3, [sp, #20]
 8010412:	9a05      	ldr	r2, [sp, #20]
 8010414:	1c5d      	adds	r5, r3, #1
 8010416:	2339      	movs	r3, #57	; 0x39
 8010418:	7013      	strb	r3, [r2, #0]
 801041a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801041e:	2b39      	cmp	r3, #57	; 0x39
 8010420:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8010424:	d04f      	beq.n	80104c6 <_dtoa_r+0xaee>
 8010426:	3301      	adds	r3, #1
 8010428:	7013      	strb	r3, [r2, #0]
 801042a:	e754      	b.n	80102d6 <_dtoa_r+0x8fe>
 801042c:	9a05      	ldr	r2, [sp, #20]
 801042e:	2b00      	cmp	r3, #0
 8010430:	f102 0501 	add.w	r5, r2, #1
 8010434:	dd06      	ble.n	8010444 <_dtoa_r+0xa6c>
 8010436:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801043a:	d0e9      	beq.n	8010410 <_dtoa_r+0xa38>
 801043c:	f108 0801 	add.w	r8, r8, #1
 8010440:	9b05      	ldr	r3, [sp, #20]
 8010442:	e7c2      	b.n	80103ca <_dtoa_r+0x9f2>
 8010444:	9a02      	ldr	r2, [sp, #8]
 8010446:	f805 8c01 	strb.w	r8, [r5, #-1]
 801044a:	eba5 030b 	sub.w	r3, r5, fp
 801044e:	4293      	cmp	r3, r2
 8010450:	d021      	beq.n	8010496 <_dtoa_r+0xabe>
 8010452:	2300      	movs	r3, #0
 8010454:	220a      	movs	r2, #10
 8010456:	9904      	ldr	r1, [sp, #16]
 8010458:	4620      	mov	r0, r4
 801045a:	f000 fab4 	bl	80109c6 <__multadd>
 801045e:	45b1      	cmp	r9, r6
 8010460:	9004      	str	r0, [sp, #16]
 8010462:	f04f 0300 	mov.w	r3, #0
 8010466:	f04f 020a 	mov.w	r2, #10
 801046a:	4649      	mov	r1, r9
 801046c:	4620      	mov	r0, r4
 801046e:	d105      	bne.n	801047c <_dtoa_r+0xaa4>
 8010470:	f000 faa9 	bl	80109c6 <__multadd>
 8010474:	4681      	mov	r9, r0
 8010476:	4606      	mov	r6, r0
 8010478:	9505      	str	r5, [sp, #20]
 801047a:	e776      	b.n	801036a <_dtoa_r+0x992>
 801047c:	f000 faa3 	bl	80109c6 <__multadd>
 8010480:	4631      	mov	r1, r6
 8010482:	4681      	mov	r9, r0
 8010484:	2300      	movs	r3, #0
 8010486:	220a      	movs	r2, #10
 8010488:	4620      	mov	r0, r4
 801048a:	f000 fa9c 	bl	80109c6 <__multadd>
 801048e:	4606      	mov	r6, r0
 8010490:	e7f2      	b.n	8010478 <_dtoa_r+0xaa0>
 8010492:	f04f 0900 	mov.w	r9, #0
 8010496:	2201      	movs	r2, #1
 8010498:	9904      	ldr	r1, [sp, #16]
 801049a:	4620      	mov	r0, r4
 801049c:	f000 fc0a 	bl	8010cb4 <__lshift>
 80104a0:	4639      	mov	r1, r7
 80104a2:	9004      	str	r0, [sp, #16]
 80104a4:	f000 fc5a 	bl	8010d5c <__mcmp>
 80104a8:	2800      	cmp	r0, #0
 80104aa:	dcb6      	bgt.n	801041a <_dtoa_r+0xa42>
 80104ac:	d102      	bne.n	80104b4 <_dtoa_r+0xadc>
 80104ae:	f018 0f01 	tst.w	r8, #1
 80104b2:	d1b2      	bne.n	801041a <_dtoa_r+0xa42>
 80104b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80104b8:	2b30      	cmp	r3, #48	; 0x30
 80104ba:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80104be:	f47f af0a 	bne.w	80102d6 <_dtoa_r+0x8fe>
 80104c2:	4615      	mov	r5, r2
 80104c4:	e7f6      	b.n	80104b4 <_dtoa_r+0xadc>
 80104c6:	4593      	cmp	fp, r2
 80104c8:	d105      	bne.n	80104d6 <_dtoa_r+0xafe>
 80104ca:	2331      	movs	r3, #49	; 0x31
 80104cc:	f10a 0a01 	add.w	sl, sl, #1
 80104d0:	f88b 3000 	strb.w	r3, [fp]
 80104d4:	e6ff      	b.n	80102d6 <_dtoa_r+0x8fe>
 80104d6:	4615      	mov	r5, r2
 80104d8:	e79f      	b.n	801041a <_dtoa_r+0xa42>
 80104da:	f8df b064 	ldr.w	fp, [pc, #100]	; 8010540 <_dtoa_r+0xb68>
 80104de:	e007      	b.n	80104f0 <_dtoa_r+0xb18>
 80104e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80104e2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8010544 <_dtoa_r+0xb6c>
 80104e6:	b11b      	cbz	r3, 80104f0 <_dtoa_r+0xb18>
 80104e8:	f10b 0308 	add.w	r3, fp, #8
 80104ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80104ee:	6013      	str	r3, [r2, #0]
 80104f0:	4658      	mov	r0, fp
 80104f2:	b017      	add	sp, #92	; 0x5c
 80104f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104f8:	9b06      	ldr	r3, [sp, #24]
 80104fa:	2b01      	cmp	r3, #1
 80104fc:	f77f ae35 	ble.w	801016a <_dtoa_r+0x792>
 8010500:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010502:	9307      	str	r3, [sp, #28]
 8010504:	e649      	b.n	801019a <_dtoa_r+0x7c2>
 8010506:	9b02      	ldr	r3, [sp, #8]
 8010508:	2b00      	cmp	r3, #0
 801050a:	dc03      	bgt.n	8010514 <_dtoa_r+0xb3c>
 801050c:	9b06      	ldr	r3, [sp, #24]
 801050e:	2b02      	cmp	r3, #2
 8010510:	f73f aecc 	bgt.w	80102ac <_dtoa_r+0x8d4>
 8010514:	465d      	mov	r5, fp
 8010516:	4639      	mov	r1, r7
 8010518:	9804      	ldr	r0, [sp, #16]
 801051a:	f7ff f9cf 	bl	800f8bc <quorem>
 801051e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010522:	f805 8b01 	strb.w	r8, [r5], #1
 8010526:	9a02      	ldr	r2, [sp, #8]
 8010528:	eba5 030b 	sub.w	r3, r5, fp
 801052c:	429a      	cmp	r2, r3
 801052e:	ddb0      	ble.n	8010492 <_dtoa_r+0xaba>
 8010530:	2300      	movs	r3, #0
 8010532:	220a      	movs	r2, #10
 8010534:	9904      	ldr	r1, [sp, #16]
 8010536:	4620      	mov	r0, r4
 8010538:	f000 fa45 	bl	80109c6 <__multadd>
 801053c:	9004      	str	r0, [sp, #16]
 801053e:	e7ea      	b.n	8010516 <_dtoa_r+0xb3e>
 8010540:	08011f94 	.word	0x08011f94
 8010544:	08011fb8 	.word	0x08011fb8

08010548 <__sflush_r>:
 8010548:	898a      	ldrh	r2, [r1, #12]
 801054a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801054e:	4605      	mov	r5, r0
 8010550:	0710      	lsls	r0, r2, #28
 8010552:	460c      	mov	r4, r1
 8010554:	d458      	bmi.n	8010608 <__sflush_r+0xc0>
 8010556:	684b      	ldr	r3, [r1, #4]
 8010558:	2b00      	cmp	r3, #0
 801055a:	dc05      	bgt.n	8010568 <__sflush_r+0x20>
 801055c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801055e:	2b00      	cmp	r3, #0
 8010560:	dc02      	bgt.n	8010568 <__sflush_r+0x20>
 8010562:	2000      	movs	r0, #0
 8010564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010568:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801056a:	2e00      	cmp	r6, #0
 801056c:	d0f9      	beq.n	8010562 <__sflush_r+0x1a>
 801056e:	2300      	movs	r3, #0
 8010570:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010574:	682f      	ldr	r7, [r5, #0]
 8010576:	6a21      	ldr	r1, [r4, #32]
 8010578:	602b      	str	r3, [r5, #0]
 801057a:	d032      	beq.n	80105e2 <__sflush_r+0x9a>
 801057c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801057e:	89a3      	ldrh	r3, [r4, #12]
 8010580:	075a      	lsls	r2, r3, #29
 8010582:	d505      	bpl.n	8010590 <__sflush_r+0x48>
 8010584:	6863      	ldr	r3, [r4, #4]
 8010586:	1ac0      	subs	r0, r0, r3
 8010588:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801058a:	b10b      	cbz	r3, 8010590 <__sflush_r+0x48>
 801058c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801058e:	1ac0      	subs	r0, r0, r3
 8010590:	2300      	movs	r3, #0
 8010592:	4602      	mov	r2, r0
 8010594:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010596:	6a21      	ldr	r1, [r4, #32]
 8010598:	4628      	mov	r0, r5
 801059a:	47b0      	blx	r6
 801059c:	1c43      	adds	r3, r0, #1
 801059e:	89a3      	ldrh	r3, [r4, #12]
 80105a0:	d106      	bne.n	80105b0 <__sflush_r+0x68>
 80105a2:	6829      	ldr	r1, [r5, #0]
 80105a4:	291d      	cmp	r1, #29
 80105a6:	d848      	bhi.n	801063a <__sflush_r+0xf2>
 80105a8:	4a29      	ldr	r2, [pc, #164]	; (8010650 <__sflush_r+0x108>)
 80105aa:	40ca      	lsrs	r2, r1
 80105ac:	07d6      	lsls	r6, r2, #31
 80105ae:	d544      	bpl.n	801063a <__sflush_r+0xf2>
 80105b0:	2200      	movs	r2, #0
 80105b2:	6062      	str	r2, [r4, #4]
 80105b4:	04d9      	lsls	r1, r3, #19
 80105b6:	6922      	ldr	r2, [r4, #16]
 80105b8:	6022      	str	r2, [r4, #0]
 80105ba:	d504      	bpl.n	80105c6 <__sflush_r+0x7e>
 80105bc:	1c42      	adds	r2, r0, #1
 80105be:	d101      	bne.n	80105c4 <__sflush_r+0x7c>
 80105c0:	682b      	ldr	r3, [r5, #0]
 80105c2:	b903      	cbnz	r3, 80105c6 <__sflush_r+0x7e>
 80105c4:	6560      	str	r0, [r4, #84]	; 0x54
 80105c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80105c8:	602f      	str	r7, [r5, #0]
 80105ca:	2900      	cmp	r1, #0
 80105cc:	d0c9      	beq.n	8010562 <__sflush_r+0x1a>
 80105ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80105d2:	4299      	cmp	r1, r3
 80105d4:	d002      	beq.n	80105dc <__sflush_r+0x94>
 80105d6:	4628      	mov	r0, r5
 80105d8:	f000 fc94 	bl	8010f04 <_free_r>
 80105dc:	2000      	movs	r0, #0
 80105de:	6360      	str	r0, [r4, #52]	; 0x34
 80105e0:	e7c0      	b.n	8010564 <__sflush_r+0x1c>
 80105e2:	2301      	movs	r3, #1
 80105e4:	4628      	mov	r0, r5
 80105e6:	47b0      	blx	r6
 80105e8:	1c41      	adds	r1, r0, #1
 80105ea:	d1c8      	bne.n	801057e <__sflush_r+0x36>
 80105ec:	682b      	ldr	r3, [r5, #0]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d0c5      	beq.n	801057e <__sflush_r+0x36>
 80105f2:	2b1d      	cmp	r3, #29
 80105f4:	d001      	beq.n	80105fa <__sflush_r+0xb2>
 80105f6:	2b16      	cmp	r3, #22
 80105f8:	d101      	bne.n	80105fe <__sflush_r+0xb6>
 80105fa:	602f      	str	r7, [r5, #0]
 80105fc:	e7b1      	b.n	8010562 <__sflush_r+0x1a>
 80105fe:	89a3      	ldrh	r3, [r4, #12]
 8010600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010604:	81a3      	strh	r3, [r4, #12]
 8010606:	e7ad      	b.n	8010564 <__sflush_r+0x1c>
 8010608:	690f      	ldr	r7, [r1, #16]
 801060a:	2f00      	cmp	r7, #0
 801060c:	d0a9      	beq.n	8010562 <__sflush_r+0x1a>
 801060e:	0793      	lsls	r3, r2, #30
 8010610:	680e      	ldr	r6, [r1, #0]
 8010612:	bf08      	it	eq
 8010614:	694b      	ldreq	r3, [r1, #20]
 8010616:	600f      	str	r7, [r1, #0]
 8010618:	bf18      	it	ne
 801061a:	2300      	movne	r3, #0
 801061c:	eba6 0807 	sub.w	r8, r6, r7
 8010620:	608b      	str	r3, [r1, #8]
 8010622:	f1b8 0f00 	cmp.w	r8, #0
 8010626:	dd9c      	ble.n	8010562 <__sflush_r+0x1a>
 8010628:	4643      	mov	r3, r8
 801062a:	463a      	mov	r2, r7
 801062c:	6a21      	ldr	r1, [r4, #32]
 801062e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010630:	4628      	mov	r0, r5
 8010632:	47b0      	blx	r6
 8010634:	2800      	cmp	r0, #0
 8010636:	dc06      	bgt.n	8010646 <__sflush_r+0xfe>
 8010638:	89a3      	ldrh	r3, [r4, #12]
 801063a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801063e:	81a3      	strh	r3, [r4, #12]
 8010640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010644:	e78e      	b.n	8010564 <__sflush_r+0x1c>
 8010646:	4407      	add	r7, r0
 8010648:	eba8 0800 	sub.w	r8, r8, r0
 801064c:	e7e9      	b.n	8010622 <__sflush_r+0xda>
 801064e:	bf00      	nop
 8010650:	20400001 	.word	0x20400001

08010654 <_fflush_r>:
 8010654:	b538      	push	{r3, r4, r5, lr}
 8010656:	690b      	ldr	r3, [r1, #16]
 8010658:	4605      	mov	r5, r0
 801065a:	460c      	mov	r4, r1
 801065c:	b1db      	cbz	r3, 8010696 <_fflush_r+0x42>
 801065e:	b118      	cbz	r0, 8010668 <_fflush_r+0x14>
 8010660:	6983      	ldr	r3, [r0, #24]
 8010662:	b90b      	cbnz	r3, 8010668 <_fflush_r+0x14>
 8010664:	f000 f860 	bl	8010728 <__sinit>
 8010668:	4b0c      	ldr	r3, [pc, #48]	; (801069c <_fflush_r+0x48>)
 801066a:	429c      	cmp	r4, r3
 801066c:	d109      	bne.n	8010682 <_fflush_r+0x2e>
 801066e:	686c      	ldr	r4, [r5, #4]
 8010670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010674:	b17b      	cbz	r3, 8010696 <_fflush_r+0x42>
 8010676:	4621      	mov	r1, r4
 8010678:	4628      	mov	r0, r5
 801067a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801067e:	f7ff bf63 	b.w	8010548 <__sflush_r>
 8010682:	4b07      	ldr	r3, [pc, #28]	; (80106a0 <_fflush_r+0x4c>)
 8010684:	429c      	cmp	r4, r3
 8010686:	d101      	bne.n	801068c <_fflush_r+0x38>
 8010688:	68ac      	ldr	r4, [r5, #8]
 801068a:	e7f1      	b.n	8010670 <_fflush_r+0x1c>
 801068c:	4b05      	ldr	r3, [pc, #20]	; (80106a4 <_fflush_r+0x50>)
 801068e:	429c      	cmp	r4, r3
 8010690:	bf08      	it	eq
 8010692:	68ec      	ldreq	r4, [r5, #12]
 8010694:	e7ec      	b.n	8010670 <_fflush_r+0x1c>
 8010696:	2000      	movs	r0, #0
 8010698:	bd38      	pop	{r3, r4, r5, pc}
 801069a:	bf00      	nop
 801069c:	08011fe8 	.word	0x08011fe8
 80106a0:	08012008 	.word	0x08012008
 80106a4:	08011fc8 	.word	0x08011fc8

080106a8 <std>:
 80106a8:	2300      	movs	r3, #0
 80106aa:	b510      	push	{r4, lr}
 80106ac:	4604      	mov	r4, r0
 80106ae:	e9c0 3300 	strd	r3, r3, [r0]
 80106b2:	6083      	str	r3, [r0, #8]
 80106b4:	8181      	strh	r1, [r0, #12]
 80106b6:	6643      	str	r3, [r0, #100]	; 0x64
 80106b8:	81c2      	strh	r2, [r0, #14]
 80106ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80106be:	6183      	str	r3, [r0, #24]
 80106c0:	4619      	mov	r1, r3
 80106c2:	2208      	movs	r2, #8
 80106c4:	305c      	adds	r0, #92	; 0x5c
 80106c6:	f7fe fb58 	bl	800ed7a <memset>
 80106ca:	4b05      	ldr	r3, [pc, #20]	; (80106e0 <std+0x38>)
 80106cc:	6263      	str	r3, [r4, #36]	; 0x24
 80106ce:	4b05      	ldr	r3, [pc, #20]	; (80106e4 <std+0x3c>)
 80106d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80106d2:	4b05      	ldr	r3, [pc, #20]	; (80106e8 <std+0x40>)
 80106d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80106d6:	4b05      	ldr	r3, [pc, #20]	; (80106ec <std+0x44>)
 80106d8:	6224      	str	r4, [r4, #32]
 80106da:	6323      	str	r3, [r4, #48]	; 0x30
 80106dc:	bd10      	pop	{r4, pc}
 80106de:	bf00      	nop
 80106e0:	080112f5 	.word	0x080112f5
 80106e4:	08011317 	.word	0x08011317
 80106e8:	0801134f 	.word	0x0801134f
 80106ec:	08011373 	.word	0x08011373

080106f0 <_cleanup_r>:
 80106f0:	4901      	ldr	r1, [pc, #4]	; (80106f8 <_cleanup_r+0x8>)
 80106f2:	f000 b885 	b.w	8010800 <_fwalk_reent>
 80106f6:	bf00      	nop
 80106f8:	08010655 	.word	0x08010655

080106fc <__sfmoreglue>:
 80106fc:	b570      	push	{r4, r5, r6, lr}
 80106fe:	1e4a      	subs	r2, r1, #1
 8010700:	2568      	movs	r5, #104	; 0x68
 8010702:	4355      	muls	r5, r2
 8010704:	460e      	mov	r6, r1
 8010706:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801070a:	f000 fc49 	bl	8010fa0 <_malloc_r>
 801070e:	4604      	mov	r4, r0
 8010710:	b140      	cbz	r0, 8010724 <__sfmoreglue+0x28>
 8010712:	2100      	movs	r1, #0
 8010714:	e9c0 1600 	strd	r1, r6, [r0]
 8010718:	300c      	adds	r0, #12
 801071a:	60a0      	str	r0, [r4, #8]
 801071c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010720:	f7fe fb2b 	bl	800ed7a <memset>
 8010724:	4620      	mov	r0, r4
 8010726:	bd70      	pop	{r4, r5, r6, pc}

08010728 <__sinit>:
 8010728:	6983      	ldr	r3, [r0, #24]
 801072a:	b510      	push	{r4, lr}
 801072c:	4604      	mov	r4, r0
 801072e:	bb33      	cbnz	r3, 801077e <__sinit+0x56>
 8010730:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8010734:	6503      	str	r3, [r0, #80]	; 0x50
 8010736:	4b12      	ldr	r3, [pc, #72]	; (8010780 <__sinit+0x58>)
 8010738:	4a12      	ldr	r2, [pc, #72]	; (8010784 <__sinit+0x5c>)
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	6282      	str	r2, [r0, #40]	; 0x28
 801073e:	4298      	cmp	r0, r3
 8010740:	bf04      	itt	eq
 8010742:	2301      	moveq	r3, #1
 8010744:	6183      	streq	r3, [r0, #24]
 8010746:	f000 f81f 	bl	8010788 <__sfp>
 801074a:	6060      	str	r0, [r4, #4]
 801074c:	4620      	mov	r0, r4
 801074e:	f000 f81b 	bl	8010788 <__sfp>
 8010752:	60a0      	str	r0, [r4, #8]
 8010754:	4620      	mov	r0, r4
 8010756:	f000 f817 	bl	8010788 <__sfp>
 801075a:	2200      	movs	r2, #0
 801075c:	60e0      	str	r0, [r4, #12]
 801075e:	2104      	movs	r1, #4
 8010760:	6860      	ldr	r0, [r4, #4]
 8010762:	f7ff ffa1 	bl	80106a8 <std>
 8010766:	2201      	movs	r2, #1
 8010768:	2109      	movs	r1, #9
 801076a:	68a0      	ldr	r0, [r4, #8]
 801076c:	f7ff ff9c 	bl	80106a8 <std>
 8010770:	2202      	movs	r2, #2
 8010772:	2112      	movs	r1, #18
 8010774:	68e0      	ldr	r0, [r4, #12]
 8010776:	f7ff ff97 	bl	80106a8 <std>
 801077a:	2301      	movs	r3, #1
 801077c:	61a3      	str	r3, [r4, #24]
 801077e:	bd10      	pop	{r4, pc}
 8010780:	08011f80 	.word	0x08011f80
 8010784:	080106f1 	.word	0x080106f1

08010788 <__sfp>:
 8010788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801078a:	4b1b      	ldr	r3, [pc, #108]	; (80107f8 <__sfp+0x70>)
 801078c:	681e      	ldr	r6, [r3, #0]
 801078e:	69b3      	ldr	r3, [r6, #24]
 8010790:	4607      	mov	r7, r0
 8010792:	b913      	cbnz	r3, 801079a <__sfp+0x12>
 8010794:	4630      	mov	r0, r6
 8010796:	f7ff ffc7 	bl	8010728 <__sinit>
 801079a:	3648      	adds	r6, #72	; 0x48
 801079c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80107a0:	3b01      	subs	r3, #1
 80107a2:	d503      	bpl.n	80107ac <__sfp+0x24>
 80107a4:	6833      	ldr	r3, [r6, #0]
 80107a6:	b133      	cbz	r3, 80107b6 <__sfp+0x2e>
 80107a8:	6836      	ldr	r6, [r6, #0]
 80107aa:	e7f7      	b.n	801079c <__sfp+0x14>
 80107ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80107b0:	b16d      	cbz	r5, 80107ce <__sfp+0x46>
 80107b2:	3468      	adds	r4, #104	; 0x68
 80107b4:	e7f4      	b.n	80107a0 <__sfp+0x18>
 80107b6:	2104      	movs	r1, #4
 80107b8:	4638      	mov	r0, r7
 80107ba:	f7ff ff9f 	bl	80106fc <__sfmoreglue>
 80107be:	6030      	str	r0, [r6, #0]
 80107c0:	2800      	cmp	r0, #0
 80107c2:	d1f1      	bne.n	80107a8 <__sfp+0x20>
 80107c4:	230c      	movs	r3, #12
 80107c6:	603b      	str	r3, [r7, #0]
 80107c8:	4604      	mov	r4, r0
 80107ca:	4620      	mov	r0, r4
 80107cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107ce:	4b0b      	ldr	r3, [pc, #44]	; (80107fc <__sfp+0x74>)
 80107d0:	6665      	str	r5, [r4, #100]	; 0x64
 80107d2:	e9c4 5500 	strd	r5, r5, [r4]
 80107d6:	60a5      	str	r5, [r4, #8]
 80107d8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80107dc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80107e0:	2208      	movs	r2, #8
 80107e2:	4629      	mov	r1, r5
 80107e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80107e8:	f7fe fac7 	bl	800ed7a <memset>
 80107ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80107f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80107f4:	e7e9      	b.n	80107ca <__sfp+0x42>
 80107f6:	bf00      	nop
 80107f8:	08011f80 	.word	0x08011f80
 80107fc:	ffff0001 	.word	0xffff0001

08010800 <_fwalk_reent>:
 8010800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010804:	4680      	mov	r8, r0
 8010806:	4689      	mov	r9, r1
 8010808:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801080c:	2600      	movs	r6, #0
 801080e:	b914      	cbnz	r4, 8010816 <_fwalk_reent+0x16>
 8010810:	4630      	mov	r0, r6
 8010812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010816:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801081a:	3f01      	subs	r7, #1
 801081c:	d501      	bpl.n	8010822 <_fwalk_reent+0x22>
 801081e:	6824      	ldr	r4, [r4, #0]
 8010820:	e7f5      	b.n	801080e <_fwalk_reent+0xe>
 8010822:	89ab      	ldrh	r3, [r5, #12]
 8010824:	2b01      	cmp	r3, #1
 8010826:	d907      	bls.n	8010838 <_fwalk_reent+0x38>
 8010828:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801082c:	3301      	adds	r3, #1
 801082e:	d003      	beq.n	8010838 <_fwalk_reent+0x38>
 8010830:	4629      	mov	r1, r5
 8010832:	4640      	mov	r0, r8
 8010834:	47c8      	blx	r9
 8010836:	4306      	orrs	r6, r0
 8010838:	3568      	adds	r5, #104	; 0x68
 801083a:	e7ee      	b.n	801081a <_fwalk_reent+0x1a>

0801083c <_localeconv_r>:
 801083c:	4b04      	ldr	r3, [pc, #16]	; (8010850 <_localeconv_r+0x14>)
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	6a18      	ldr	r0, [r3, #32]
 8010842:	4b04      	ldr	r3, [pc, #16]	; (8010854 <_localeconv_r+0x18>)
 8010844:	2800      	cmp	r0, #0
 8010846:	bf08      	it	eq
 8010848:	4618      	moveq	r0, r3
 801084a:	30f0      	adds	r0, #240	; 0xf0
 801084c:	4770      	bx	lr
 801084e:	bf00      	nop
 8010850:	2000003c 	.word	0x2000003c
 8010854:	200000a0 	.word	0x200000a0

08010858 <__swhatbuf_r>:
 8010858:	b570      	push	{r4, r5, r6, lr}
 801085a:	460e      	mov	r6, r1
 801085c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010860:	2900      	cmp	r1, #0
 8010862:	b096      	sub	sp, #88	; 0x58
 8010864:	4614      	mov	r4, r2
 8010866:	461d      	mov	r5, r3
 8010868:	da07      	bge.n	801087a <__swhatbuf_r+0x22>
 801086a:	2300      	movs	r3, #0
 801086c:	602b      	str	r3, [r5, #0]
 801086e:	89b3      	ldrh	r3, [r6, #12]
 8010870:	061a      	lsls	r2, r3, #24
 8010872:	d410      	bmi.n	8010896 <__swhatbuf_r+0x3e>
 8010874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010878:	e00e      	b.n	8010898 <__swhatbuf_r+0x40>
 801087a:	466a      	mov	r2, sp
 801087c:	f000 fda0 	bl	80113c0 <_fstat_r>
 8010880:	2800      	cmp	r0, #0
 8010882:	dbf2      	blt.n	801086a <__swhatbuf_r+0x12>
 8010884:	9a01      	ldr	r2, [sp, #4]
 8010886:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801088a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801088e:	425a      	negs	r2, r3
 8010890:	415a      	adcs	r2, r3
 8010892:	602a      	str	r2, [r5, #0]
 8010894:	e7ee      	b.n	8010874 <__swhatbuf_r+0x1c>
 8010896:	2340      	movs	r3, #64	; 0x40
 8010898:	2000      	movs	r0, #0
 801089a:	6023      	str	r3, [r4, #0]
 801089c:	b016      	add	sp, #88	; 0x58
 801089e:	bd70      	pop	{r4, r5, r6, pc}

080108a0 <__smakebuf_r>:
 80108a0:	898b      	ldrh	r3, [r1, #12]
 80108a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80108a4:	079d      	lsls	r5, r3, #30
 80108a6:	4606      	mov	r6, r0
 80108a8:	460c      	mov	r4, r1
 80108aa:	d507      	bpl.n	80108bc <__smakebuf_r+0x1c>
 80108ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80108b0:	6023      	str	r3, [r4, #0]
 80108b2:	6123      	str	r3, [r4, #16]
 80108b4:	2301      	movs	r3, #1
 80108b6:	6163      	str	r3, [r4, #20]
 80108b8:	b002      	add	sp, #8
 80108ba:	bd70      	pop	{r4, r5, r6, pc}
 80108bc:	ab01      	add	r3, sp, #4
 80108be:	466a      	mov	r2, sp
 80108c0:	f7ff ffca 	bl	8010858 <__swhatbuf_r>
 80108c4:	9900      	ldr	r1, [sp, #0]
 80108c6:	4605      	mov	r5, r0
 80108c8:	4630      	mov	r0, r6
 80108ca:	f000 fb69 	bl	8010fa0 <_malloc_r>
 80108ce:	b948      	cbnz	r0, 80108e4 <__smakebuf_r+0x44>
 80108d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108d4:	059a      	lsls	r2, r3, #22
 80108d6:	d4ef      	bmi.n	80108b8 <__smakebuf_r+0x18>
 80108d8:	f023 0303 	bic.w	r3, r3, #3
 80108dc:	f043 0302 	orr.w	r3, r3, #2
 80108e0:	81a3      	strh	r3, [r4, #12]
 80108e2:	e7e3      	b.n	80108ac <__smakebuf_r+0xc>
 80108e4:	4b0d      	ldr	r3, [pc, #52]	; (801091c <__smakebuf_r+0x7c>)
 80108e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80108e8:	89a3      	ldrh	r3, [r4, #12]
 80108ea:	6020      	str	r0, [r4, #0]
 80108ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108f0:	81a3      	strh	r3, [r4, #12]
 80108f2:	9b00      	ldr	r3, [sp, #0]
 80108f4:	6163      	str	r3, [r4, #20]
 80108f6:	9b01      	ldr	r3, [sp, #4]
 80108f8:	6120      	str	r0, [r4, #16]
 80108fa:	b15b      	cbz	r3, 8010914 <__smakebuf_r+0x74>
 80108fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010900:	4630      	mov	r0, r6
 8010902:	f000 fd6f 	bl	80113e4 <_isatty_r>
 8010906:	b128      	cbz	r0, 8010914 <__smakebuf_r+0x74>
 8010908:	89a3      	ldrh	r3, [r4, #12]
 801090a:	f023 0303 	bic.w	r3, r3, #3
 801090e:	f043 0301 	orr.w	r3, r3, #1
 8010912:	81a3      	strh	r3, [r4, #12]
 8010914:	89a3      	ldrh	r3, [r4, #12]
 8010916:	431d      	orrs	r5, r3
 8010918:	81a5      	strh	r5, [r4, #12]
 801091a:	e7cd      	b.n	80108b8 <__smakebuf_r+0x18>
 801091c:	080106f1 	.word	0x080106f1

08010920 <malloc>:
 8010920:	4b02      	ldr	r3, [pc, #8]	; (801092c <malloc+0xc>)
 8010922:	4601      	mov	r1, r0
 8010924:	6818      	ldr	r0, [r3, #0]
 8010926:	f000 bb3b 	b.w	8010fa0 <_malloc_r>
 801092a:	bf00      	nop
 801092c:	2000003c 	.word	0x2000003c

08010930 <_Balloc>:
 8010930:	b570      	push	{r4, r5, r6, lr}
 8010932:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010934:	4604      	mov	r4, r0
 8010936:	460e      	mov	r6, r1
 8010938:	b93d      	cbnz	r5, 801094a <_Balloc+0x1a>
 801093a:	2010      	movs	r0, #16
 801093c:	f7ff fff0 	bl	8010920 <malloc>
 8010940:	6260      	str	r0, [r4, #36]	; 0x24
 8010942:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010946:	6005      	str	r5, [r0, #0]
 8010948:	60c5      	str	r5, [r0, #12]
 801094a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801094c:	68eb      	ldr	r3, [r5, #12]
 801094e:	b183      	cbz	r3, 8010972 <_Balloc+0x42>
 8010950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010952:	68db      	ldr	r3, [r3, #12]
 8010954:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010958:	b9b8      	cbnz	r0, 801098a <_Balloc+0x5a>
 801095a:	2101      	movs	r1, #1
 801095c:	fa01 f506 	lsl.w	r5, r1, r6
 8010960:	1d6a      	adds	r2, r5, #5
 8010962:	0092      	lsls	r2, r2, #2
 8010964:	4620      	mov	r0, r4
 8010966:	f000 fabf 	bl	8010ee8 <_calloc_r>
 801096a:	b160      	cbz	r0, 8010986 <_Balloc+0x56>
 801096c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8010970:	e00e      	b.n	8010990 <_Balloc+0x60>
 8010972:	2221      	movs	r2, #33	; 0x21
 8010974:	2104      	movs	r1, #4
 8010976:	4620      	mov	r0, r4
 8010978:	f000 fab6 	bl	8010ee8 <_calloc_r>
 801097c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801097e:	60e8      	str	r0, [r5, #12]
 8010980:	68db      	ldr	r3, [r3, #12]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d1e4      	bne.n	8010950 <_Balloc+0x20>
 8010986:	2000      	movs	r0, #0
 8010988:	bd70      	pop	{r4, r5, r6, pc}
 801098a:	6802      	ldr	r2, [r0, #0]
 801098c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8010990:	2300      	movs	r3, #0
 8010992:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010996:	e7f7      	b.n	8010988 <_Balloc+0x58>

08010998 <_Bfree>:
 8010998:	b570      	push	{r4, r5, r6, lr}
 801099a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801099c:	4606      	mov	r6, r0
 801099e:	460d      	mov	r5, r1
 80109a0:	b93c      	cbnz	r4, 80109b2 <_Bfree+0x1a>
 80109a2:	2010      	movs	r0, #16
 80109a4:	f7ff ffbc 	bl	8010920 <malloc>
 80109a8:	6270      	str	r0, [r6, #36]	; 0x24
 80109aa:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80109ae:	6004      	str	r4, [r0, #0]
 80109b0:	60c4      	str	r4, [r0, #12]
 80109b2:	b13d      	cbz	r5, 80109c4 <_Bfree+0x2c>
 80109b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80109b6:	686a      	ldr	r2, [r5, #4]
 80109b8:	68db      	ldr	r3, [r3, #12]
 80109ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80109be:	6029      	str	r1, [r5, #0]
 80109c0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80109c4:	bd70      	pop	{r4, r5, r6, pc}

080109c6 <__multadd>:
 80109c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109ca:	690d      	ldr	r5, [r1, #16]
 80109cc:	461f      	mov	r7, r3
 80109ce:	4606      	mov	r6, r0
 80109d0:	460c      	mov	r4, r1
 80109d2:	f101 0c14 	add.w	ip, r1, #20
 80109d6:	2300      	movs	r3, #0
 80109d8:	f8dc 0000 	ldr.w	r0, [ip]
 80109dc:	b281      	uxth	r1, r0
 80109de:	fb02 7101 	mla	r1, r2, r1, r7
 80109e2:	0c0f      	lsrs	r7, r1, #16
 80109e4:	0c00      	lsrs	r0, r0, #16
 80109e6:	fb02 7000 	mla	r0, r2, r0, r7
 80109ea:	b289      	uxth	r1, r1
 80109ec:	3301      	adds	r3, #1
 80109ee:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80109f2:	429d      	cmp	r5, r3
 80109f4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80109f8:	f84c 1b04 	str.w	r1, [ip], #4
 80109fc:	dcec      	bgt.n	80109d8 <__multadd+0x12>
 80109fe:	b1d7      	cbz	r7, 8010a36 <__multadd+0x70>
 8010a00:	68a3      	ldr	r3, [r4, #8]
 8010a02:	42ab      	cmp	r3, r5
 8010a04:	dc12      	bgt.n	8010a2c <__multadd+0x66>
 8010a06:	6861      	ldr	r1, [r4, #4]
 8010a08:	4630      	mov	r0, r6
 8010a0a:	3101      	adds	r1, #1
 8010a0c:	f7ff ff90 	bl	8010930 <_Balloc>
 8010a10:	6922      	ldr	r2, [r4, #16]
 8010a12:	3202      	adds	r2, #2
 8010a14:	f104 010c 	add.w	r1, r4, #12
 8010a18:	4680      	mov	r8, r0
 8010a1a:	0092      	lsls	r2, r2, #2
 8010a1c:	300c      	adds	r0, #12
 8010a1e:	f7fe f9a1 	bl	800ed64 <memcpy>
 8010a22:	4621      	mov	r1, r4
 8010a24:	4630      	mov	r0, r6
 8010a26:	f7ff ffb7 	bl	8010998 <_Bfree>
 8010a2a:	4644      	mov	r4, r8
 8010a2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010a30:	3501      	adds	r5, #1
 8010a32:	615f      	str	r7, [r3, #20]
 8010a34:	6125      	str	r5, [r4, #16]
 8010a36:	4620      	mov	r0, r4
 8010a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010a3c <__hi0bits>:
 8010a3c:	0c02      	lsrs	r2, r0, #16
 8010a3e:	0412      	lsls	r2, r2, #16
 8010a40:	4603      	mov	r3, r0
 8010a42:	b9b2      	cbnz	r2, 8010a72 <__hi0bits+0x36>
 8010a44:	0403      	lsls	r3, r0, #16
 8010a46:	2010      	movs	r0, #16
 8010a48:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010a4c:	bf04      	itt	eq
 8010a4e:	021b      	lsleq	r3, r3, #8
 8010a50:	3008      	addeq	r0, #8
 8010a52:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010a56:	bf04      	itt	eq
 8010a58:	011b      	lsleq	r3, r3, #4
 8010a5a:	3004      	addeq	r0, #4
 8010a5c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010a60:	bf04      	itt	eq
 8010a62:	009b      	lsleq	r3, r3, #2
 8010a64:	3002      	addeq	r0, #2
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	db06      	blt.n	8010a78 <__hi0bits+0x3c>
 8010a6a:	005b      	lsls	r3, r3, #1
 8010a6c:	d503      	bpl.n	8010a76 <__hi0bits+0x3a>
 8010a6e:	3001      	adds	r0, #1
 8010a70:	4770      	bx	lr
 8010a72:	2000      	movs	r0, #0
 8010a74:	e7e8      	b.n	8010a48 <__hi0bits+0xc>
 8010a76:	2020      	movs	r0, #32
 8010a78:	4770      	bx	lr

08010a7a <__lo0bits>:
 8010a7a:	6803      	ldr	r3, [r0, #0]
 8010a7c:	f013 0207 	ands.w	r2, r3, #7
 8010a80:	4601      	mov	r1, r0
 8010a82:	d00b      	beq.n	8010a9c <__lo0bits+0x22>
 8010a84:	07da      	lsls	r2, r3, #31
 8010a86:	d423      	bmi.n	8010ad0 <__lo0bits+0x56>
 8010a88:	0798      	lsls	r0, r3, #30
 8010a8a:	bf49      	itett	mi
 8010a8c:	085b      	lsrmi	r3, r3, #1
 8010a8e:	089b      	lsrpl	r3, r3, #2
 8010a90:	2001      	movmi	r0, #1
 8010a92:	600b      	strmi	r3, [r1, #0]
 8010a94:	bf5c      	itt	pl
 8010a96:	600b      	strpl	r3, [r1, #0]
 8010a98:	2002      	movpl	r0, #2
 8010a9a:	4770      	bx	lr
 8010a9c:	b298      	uxth	r0, r3
 8010a9e:	b9a8      	cbnz	r0, 8010acc <__lo0bits+0x52>
 8010aa0:	0c1b      	lsrs	r3, r3, #16
 8010aa2:	2010      	movs	r0, #16
 8010aa4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010aa8:	bf04      	itt	eq
 8010aaa:	0a1b      	lsreq	r3, r3, #8
 8010aac:	3008      	addeq	r0, #8
 8010aae:	071a      	lsls	r2, r3, #28
 8010ab0:	bf04      	itt	eq
 8010ab2:	091b      	lsreq	r3, r3, #4
 8010ab4:	3004      	addeq	r0, #4
 8010ab6:	079a      	lsls	r2, r3, #30
 8010ab8:	bf04      	itt	eq
 8010aba:	089b      	lsreq	r3, r3, #2
 8010abc:	3002      	addeq	r0, #2
 8010abe:	07da      	lsls	r2, r3, #31
 8010ac0:	d402      	bmi.n	8010ac8 <__lo0bits+0x4e>
 8010ac2:	085b      	lsrs	r3, r3, #1
 8010ac4:	d006      	beq.n	8010ad4 <__lo0bits+0x5a>
 8010ac6:	3001      	adds	r0, #1
 8010ac8:	600b      	str	r3, [r1, #0]
 8010aca:	4770      	bx	lr
 8010acc:	4610      	mov	r0, r2
 8010ace:	e7e9      	b.n	8010aa4 <__lo0bits+0x2a>
 8010ad0:	2000      	movs	r0, #0
 8010ad2:	4770      	bx	lr
 8010ad4:	2020      	movs	r0, #32
 8010ad6:	4770      	bx	lr

08010ad8 <__i2b>:
 8010ad8:	b510      	push	{r4, lr}
 8010ada:	460c      	mov	r4, r1
 8010adc:	2101      	movs	r1, #1
 8010ade:	f7ff ff27 	bl	8010930 <_Balloc>
 8010ae2:	2201      	movs	r2, #1
 8010ae4:	6144      	str	r4, [r0, #20]
 8010ae6:	6102      	str	r2, [r0, #16]
 8010ae8:	bd10      	pop	{r4, pc}

08010aea <__multiply>:
 8010aea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aee:	4614      	mov	r4, r2
 8010af0:	690a      	ldr	r2, [r1, #16]
 8010af2:	6923      	ldr	r3, [r4, #16]
 8010af4:	429a      	cmp	r2, r3
 8010af6:	bfb8      	it	lt
 8010af8:	460b      	movlt	r3, r1
 8010afa:	4688      	mov	r8, r1
 8010afc:	bfbc      	itt	lt
 8010afe:	46a0      	movlt	r8, r4
 8010b00:	461c      	movlt	r4, r3
 8010b02:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010b06:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010b0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010b0e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010b12:	eb07 0609 	add.w	r6, r7, r9
 8010b16:	42b3      	cmp	r3, r6
 8010b18:	bfb8      	it	lt
 8010b1a:	3101      	addlt	r1, #1
 8010b1c:	f7ff ff08 	bl	8010930 <_Balloc>
 8010b20:	f100 0514 	add.w	r5, r0, #20
 8010b24:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8010b28:	462b      	mov	r3, r5
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	4573      	cmp	r3, lr
 8010b2e:	d316      	bcc.n	8010b5e <__multiply+0x74>
 8010b30:	f104 0214 	add.w	r2, r4, #20
 8010b34:	f108 0114 	add.w	r1, r8, #20
 8010b38:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8010b3c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8010b40:	9300      	str	r3, [sp, #0]
 8010b42:	9b00      	ldr	r3, [sp, #0]
 8010b44:	9201      	str	r2, [sp, #4]
 8010b46:	4293      	cmp	r3, r2
 8010b48:	d80c      	bhi.n	8010b64 <__multiply+0x7a>
 8010b4a:	2e00      	cmp	r6, #0
 8010b4c:	dd03      	ble.n	8010b56 <__multiply+0x6c>
 8010b4e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d05d      	beq.n	8010c12 <__multiply+0x128>
 8010b56:	6106      	str	r6, [r0, #16]
 8010b58:	b003      	add	sp, #12
 8010b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b5e:	f843 2b04 	str.w	r2, [r3], #4
 8010b62:	e7e3      	b.n	8010b2c <__multiply+0x42>
 8010b64:	f8b2 b000 	ldrh.w	fp, [r2]
 8010b68:	f1bb 0f00 	cmp.w	fp, #0
 8010b6c:	d023      	beq.n	8010bb6 <__multiply+0xcc>
 8010b6e:	4689      	mov	r9, r1
 8010b70:	46ac      	mov	ip, r5
 8010b72:	f04f 0800 	mov.w	r8, #0
 8010b76:	f859 4b04 	ldr.w	r4, [r9], #4
 8010b7a:	f8dc a000 	ldr.w	sl, [ip]
 8010b7e:	b2a3      	uxth	r3, r4
 8010b80:	fa1f fa8a 	uxth.w	sl, sl
 8010b84:	fb0b a303 	mla	r3, fp, r3, sl
 8010b88:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010b8c:	f8dc 4000 	ldr.w	r4, [ip]
 8010b90:	4443      	add	r3, r8
 8010b92:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010b96:	fb0b 840a 	mla	r4, fp, sl, r8
 8010b9a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8010b9e:	46e2      	mov	sl, ip
 8010ba0:	b29b      	uxth	r3, r3
 8010ba2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010ba6:	454f      	cmp	r7, r9
 8010ba8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010bac:	f84a 3b04 	str.w	r3, [sl], #4
 8010bb0:	d82b      	bhi.n	8010c0a <__multiply+0x120>
 8010bb2:	f8cc 8004 	str.w	r8, [ip, #4]
 8010bb6:	9b01      	ldr	r3, [sp, #4]
 8010bb8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8010bbc:	3204      	adds	r2, #4
 8010bbe:	f1ba 0f00 	cmp.w	sl, #0
 8010bc2:	d020      	beq.n	8010c06 <__multiply+0x11c>
 8010bc4:	682b      	ldr	r3, [r5, #0]
 8010bc6:	4689      	mov	r9, r1
 8010bc8:	46a8      	mov	r8, r5
 8010bca:	f04f 0b00 	mov.w	fp, #0
 8010bce:	f8b9 c000 	ldrh.w	ip, [r9]
 8010bd2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010bd6:	fb0a 440c 	mla	r4, sl, ip, r4
 8010bda:	445c      	add	r4, fp
 8010bdc:	46c4      	mov	ip, r8
 8010bde:	b29b      	uxth	r3, r3
 8010be0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010be4:	f84c 3b04 	str.w	r3, [ip], #4
 8010be8:	f859 3b04 	ldr.w	r3, [r9], #4
 8010bec:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8010bf0:	0c1b      	lsrs	r3, r3, #16
 8010bf2:	fb0a b303 	mla	r3, sl, r3, fp
 8010bf6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8010bfa:	454f      	cmp	r7, r9
 8010bfc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8010c00:	d805      	bhi.n	8010c0e <__multiply+0x124>
 8010c02:	f8c8 3004 	str.w	r3, [r8, #4]
 8010c06:	3504      	adds	r5, #4
 8010c08:	e79b      	b.n	8010b42 <__multiply+0x58>
 8010c0a:	46d4      	mov	ip, sl
 8010c0c:	e7b3      	b.n	8010b76 <__multiply+0x8c>
 8010c0e:	46e0      	mov	r8, ip
 8010c10:	e7dd      	b.n	8010bce <__multiply+0xe4>
 8010c12:	3e01      	subs	r6, #1
 8010c14:	e799      	b.n	8010b4a <__multiply+0x60>
	...

08010c18 <__pow5mult>:
 8010c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c1c:	4615      	mov	r5, r2
 8010c1e:	f012 0203 	ands.w	r2, r2, #3
 8010c22:	4606      	mov	r6, r0
 8010c24:	460f      	mov	r7, r1
 8010c26:	d007      	beq.n	8010c38 <__pow5mult+0x20>
 8010c28:	3a01      	subs	r2, #1
 8010c2a:	4c21      	ldr	r4, [pc, #132]	; (8010cb0 <__pow5mult+0x98>)
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010c32:	f7ff fec8 	bl	80109c6 <__multadd>
 8010c36:	4607      	mov	r7, r0
 8010c38:	10ad      	asrs	r5, r5, #2
 8010c3a:	d035      	beq.n	8010ca8 <__pow5mult+0x90>
 8010c3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010c3e:	b93c      	cbnz	r4, 8010c50 <__pow5mult+0x38>
 8010c40:	2010      	movs	r0, #16
 8010c42:	f7ff fe6d 	bl	8010920 <malloc>
 8010c46:	6270      	str	r0, [r6, #36]	; 0x24
 8010c48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010c4c:	6004      	str	r4, [r0, #0]
 8010c4e:	60c4      	str	r4, [r0, #12]
 8010c50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010c54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010c58:	b94c      	cbnz	r4, 8010c6e <__pow5mult+0x56>
 8010c5a:	f240 2171 	movw	r1, #625	; 0x271
 8010c5e:	4630      	mov	r0, r6
 8010c60:	f7ff ff3a 	bl	8010ad8 <__i2b>
 8010c64:	2300      	movs	r3, #0
 8010c66:	f8c8 0008 	str.w	r0, [r8, #8]
 8010c6a:	4604      	mov	r4, r0
 8010c6c:	6003      	str	r3, [r0, #0]
 8010c6e:	f04f 0800 	mov.w	r8, #0
 8010c72:	07eb      	lsls	r3, r5, #31
 8010c74:	d50a      	bpl.n	8010c8c <__pow5mult+0x74>
 8010c76:	4639      	mov	r1, r7
 8010c78:	4622      	mov	r2, r4
 8010c7a:	4630      	mov	r0, r6
 8010c7c:	f7ff ff35 	bl	8010aea <__multiply>
 8010c80:	4639      	mov	r1, r7
 8010c82:	4681      	mov	r9, r0
 8010c84:	4630      	mov	r0, r6
 8010c86:	f7ff fe87 	bl	8010998 <_Bfree>
 8010c8a:	464f      	mov	r7, r9
 8010c8c:	106d      	asrs	r5, r5, #1
 8010c8e:	d00b      	beq.n	8010ca8 <__pow5mult+0x90>
 8010c90:	6820      	ldr	r0, [r4, #0]
 8010c92:	b938      	cbnz	r0, 8010ca4 <__pow5mult+0x8c>
 8010c94:	4622      	mov	r2, r4
 8010c96:	4621      	mov	r1, r4
 8010c98:	4630      	mov	r0, r6
 8010c9a:	f7ff ff26 	bl	8010aea <__multiply>
 8010c9e:	6020      	str	r0, [r4, #0]
 8010ca0:	f8c0 8000 	str.w	r8, [r0]
 8010ca4:	4604      	mov	r4, r0
 8010ca6:	e7e4      	b.n	8010c72 <__pow5mult+0x5a>
 8010ca8:	4638      	mov	r0, r7
 8010caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cae:	bf00      	nop
 8010cb0:	08012118 	.word	0x08012118

08010cb4 <__lshift>:
 8010cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cb8:	460c      	mov	r4, r1
 8010cba:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010cbe:	6923      	ldr	r3, [r4, #16]
 8010cc0:	6849      	ldr	r1, [r1, #4]
 8010cc2:	eb0a 0903 	add.w	r9, sl, r3
 8010cc6:	68a3      	ldr	r3, [r4, #8]
 8010cc8:	4607      	mov	r7, r0
 8010cca:	4616      	mov	r6, r2
 8010ccc:	f109 0501 	add.w	r5, r9, #1
 8010cd0:	42ab      	cmp	r3, r5
 8010cd2:	db32      	blt.n	8010d3a <__lshift+0x86>
 8010cd4:	4638      	mov	r0, r7
 8010cd6:	f7ff fe2b 	bl	8010930 <_Balloc>
 8010cda:	2300      	movs	r3, #0
 8010cdc:	4680      	mov	r8, r0
 8010cde:	f100 0114 	add.w	r1, r0, #20
 8010ce2:	461a      	mov	r2, r3
 8010ce4:	4553      	cmp	r3, sl
 8010ce6:	db2b      	blt.n	8010d40 <__lshift+0x8c>
 8010ce8:	6920      	ldr	r0, [r4, #16]
 8010cea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010cee:	f104 0314 	add.w	r3, r4, #20
 8010cf2:	f016 021f 	ands.w	r2, r6, #31
 8010cf6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010cfa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010cfe:	d025      	beq.n	8010d4c <__lshift+0x98>
 8010d00:	f1c2 0e20 	rsb	lr, r2, #32
 8010d04:	2000      	movs	r0, #0
 8010d06:	681e      	ldr	r6, [r3, #0]
 8010d08:	468a      	mov	sl, r1
 8010d0a:	4096      	lsls	r6, r2
 8010d0c:	4330      	orrs	r0, r6
 8010d0e:	f84a 0b04 	str.w	r0, [sl], #4
 8010d12:	f853 0b04 	ldr.w	r0, [r3], #4
 8010d16:	459c      	cmp	ip, r3
 8010d18:	fa20 f00e 	lsr.w	r0, r0, lr
 8010d1c:	d814      	bhi.n	8010d48 <__lshift+0x94>
 8010d1e:	6048      	str	r0, [r1, #4]
 8010d20:	b108      	cbz	r0, 8010d26 <__lshift+0x72>
 8010d22:	f109 0502 	add.w	r5, r9, #2
 8010d26:	3d01      	subs	r5, #1
 8010d28:	4638      	mov	r0, r7
 8010d2a:	f8c8 5010 	str.w	r5, [r8, #16]
 8010d2e:	4621      	mov	r1, r4
 8010d30:	f7ff fe32 	bl	8010998 <_Bfree>
 8010d34:	4640      	mov	r0, r8
 8010d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d3a:	3101      	adds	r1, #1
 8010d3c:	005b      	lsls	r3, r3, #1
 8010d3e:	e7c7      	b.n	8010cd0 <__lshift+0x1c>
 8010d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010d44:	3301      	adds	r3, #1
 8010d46:	e7cd      	b.n	8010ce4 <__lshift+0x30>
 8010d48:	4651      	mov	r1, sl
 8010d4a:	e7dc      	b.n	8010d06 <__lshift+0x52>
 8010d4c:	3904      	subs	r1, #4
 8010d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d52:	f841 2f04 	str.w	r2, [r1, #4]!
 8010d56:	459c      	cmp	ip, r3
 8010d58:	d8f9      	bhi.n	8010d4e <__lshift+0x9a>
 8010d5a:	e7e4      	b.n	8010d26 <__lshift+0x72>

08010d5c <__mcmp>:
 8010d5c:	6903      	ldr	r3, [r0, #16]
 8010d5e:	690a      	ldr	r2, [r1, #16]
 8010d60:	1a9b      	subs	r3, r3, r2
 8010d62:	b530      	push	{r4, r5, lr}
 8010d64:	d10c      	bne.n	8010d80 <__mcmp+0x24>
 8010d66:	0092      	lsls	r2, r2, #2
 8010d68:	3014      	adds	r0, #20
 8010d6a:	3114      	adds	r1, #20
 8010d6c:	1884      	adds	r4, r0, r2
 8010d6e:	4411      	add	r1, r2
 8010d70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010d74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010d78:	4295      	cmp	r5, r2
 8010d7a:	d003      	beq.n	8010d84 <__mcmp+0x28>
 8010d7c:	d305      	bcc.n	8010d8a <__mcmp+0x2e>
 8010d7e:	2301      	movs	r3, #1
 8010d80:	4618      	mov	r0, r3
 8010d82:	bd30      	pop	{r4, r5, pc}
 8010d84:	42a0      	cmp	r0, r4
 8010d86:	d3f3      	bcc.n	8010d70 <__mcmp+0x14>
 8010d88:	e7fa      	b.n	8010d80 <__mcmp+0x24>
 8010d8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d8e:	e7f7      	b.n	8010d80 <__mcmp+0x24>

08010d90 <__mdiff>:
 8010d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d94:	460d      	mov	r5, r1
 8010d96:	4607      	mov	r7, r0
 8010d98:	4611      	mov	r1, r2
 8010d9a:	4628      	mov	r0, r5
 8010d9c:	4614      	mov	r4, r2
 8010d9e:	f7ff ffdd 	bl	8010d5c <__mcmp>
 8010da2:	1e06      	subs	r6, r0, #0
 8010da4:	d108      	bne.n	8010db8 <__mdiff+0x28>
 8010da6:	4631      	mov	r1, r6
 8010da8:	4638      	mov	r0, r7
 8010daa:	f7ff fdc1 	bl	8010930 <_Balloc>
 8010dae:	2301      	movs	r3, #1
 8010db0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010db8:	bfa4      	itt	ge
 8010dba:	4623      	movge	r3, r4
 8010dbc:	462c      	movge	r4, r5
 8010dbe:	4638      	mov	r0, r7
 8010dc0:	6861      	ldr	r1, [r4, #4]
 8010dc2:	bfa6      	itte	ge
 8010dc4:	461d      	movge	r5, r3
 8010dc6:	2600      	movge	r6, #0
 8010dc8:	2601      	movlt	r6, #1
 8010dca:	f7ff fdb1 	bl	8010930 <_Balloc>
 8010dce:	692b      	ldr	r3, [r5, #16]
 8010dd0:	60c6      	str	r6, [r0, #12]
 8010dd2:	6926      	ldr	r6, [r4, #16]
 8010dd4:	f105 0914 	add.w	r9, r5, #20
 8010dd8:	f104 0214 	add.w	r2, r4, #20
 8010ddc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8010de0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8010de4:	f100 0514 	add.w	r5, r0, #20
 8010de8:	f04f 0e00 	mov.w	lr, #0
 8010dec:	f852 ab04 	ldr.w	sl, [r2], #4
 8010df0:	f859 4b04 	ldr.w	r4, [r9], #4
 8010df4:	fa1e f18a 	uxtah	r1, lr, sl
 8010df8:	b2a3      	uxth	r3, r4
 8010dfa:	1ac9      	subs	r1, r1, r3
 8010dfc:	0c23      	lsrs	r3, r4, #16
 8010dfe:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8010e02:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010e06:	b289      	uxth	r1, r1
 8010e08:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8010e0c:	45c8      	cmp	r8, r9
 8010e0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010e12:	4694      	mov	ip, r2
 8010e14:	f845 3b04 	str.w	r3, [r5], #4
 8010e18:	d8e8      	bhi.n	8010dec <__mdiff+0x5c>
 8010e1a:	45bc      	cmp	ip, r7
 8010e1c:	d304      	bcc.n	8010e28 <__mdiff+0x98>
 8010e1e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8010e22:	b183      	cbz	r3, 8010e46 <__mdiff+0xb6>
 8010e24:	6106      	str	r6, [r0, #16]
 8010e26:	e7c5      	b.n	8010db4 <__mdiff+0x24>
 8010e28:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010e2c:	fa1e f381 	uxtah	r3, lr, r1
 8010e30:	141a      	asrs	r2, r3, #16
 8010e32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010e36:	b29b      	uxth	r3, r3
 8010e38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010e3c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010e40:	f845 3b04 	str.w	r3, [r5], #4
 8010e44:	e7e9      	b.n	8010e1a <__mdiff+0x8a>
 8010e46:	3e01      	subs	r6, #1
 8010e48:	e7e9      	b.n	8010e1e <__mdiff+0x8e>

08010e4a <__d2b>:
 8010e4a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010e4e:	460e      	mov	r6, r1
 8010e50:	2101      	movs	r1, #1
 8010e52:	ec59 8b10 	vmov	r8, r9, d0
 8010e56:	4615      	mov	r5, r2
 8010e58:	f7ff fd6a 	bl	8010930 <_Balloc>
 8010e5c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010e60:	4607      	mov	r7, r0
 8010e62:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010e66:	bb34      	cbnz	r4, 8010eb6 <__d2b+0x6c>
 8010e68:	9301      	str	r3, [sp, #4]
 8010e6a:	f1b8 0300 	subs.w	r3, r8, #0
 8010e6e:	d027      	beq.n	8010ec0 <__d2b+0x76>
 8010e70:	a802      	add	r0, sp, #8
 8010e72:	f840 3d08 	str.w	r3, [r0, #-8]!
 8010e76:	f7ff fe00 	bl	8010a7a <__lo0bits>
 8010e7a:	9900      	ldr	r1, [sp, #0]
 8010e7c:	b1f0      	cbz	r0, 8010ebc <__d2b+0x72>
 8010e7e:	9a01      	ldr	r2, [sp, #4]
 8010e80:	f1c0 0320 	rsb	r3, r0, #32
 8010e84:	fa02 f303 	lsl.w	r3, r2, r3
 8010e88:	430b      	orrs	r3, r1
 8010e8a:	40c2      	lsrs	r2, r0
 8010e8c:	617b      	str	r3, [r7, #20]
 8010e8e:	9201      	str	r2, [sp, #4]
 8010e90:	9b01      	ldr	r3, [sp, #4]
 8010e92:	61bb      	str	r3, [r7, #24]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	bf14      	ite	ne
 8010e98:	2102      	movne	r1, #2
 8010e9a:	2101      	moveq	r1, #1
 8010e9c:	6139      	str	r1, [r7, #16]
 8010e9e:	b1c4      	cbz	r4, 8010ed2 <__d2b+0x88>
 8010ea0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010ea4:	4404      	add	r4, r0
 8010ea6:	6034      	str	r4, [r6, #0]
 8010ea8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010eac:	6028      	str	r0, [r5, #0]
 8010eae:	4638      	mov	r0, r7
 8010eb0:	b003      	add	sp, #12
 8010eb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010eb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010eba:	e7d5      	b.n	8010e68 <__d2b+0x1e>
 8010ebc:	6179      	str	r1, [r7, #20]
 8010ebe:	e7e7      	b.n	8010e90 <__d2b+0x46>
 8010ec0:	a801      	add	r0, sp, #4
 8010ec2:	f7ff fdda 	bl	8010a7a <__lo0bits>
 8010ec6:	9b01      	ldr	r3, [sp, #4]
 8010ec8:	617b      	str	r3, [r7, #20]
 8010eca:	2101      	movs	r1, #1
 8010ecc:	6139      	str	r1, [r7, #16]
 8010ece:	3020      	adds	r0, #32
 8010ed0:	e7e5      	b.n	8010e9e <__d2b+0x54>
 8010ed2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010ed6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010eda:	6030      	str	r0, [r6, #0]
 8010edc:	6918      	ldr	r0, [r3, #16]
 8010ede:	f7ff fdad 	bl	8010a3c <__hi0bits>
 8010ee2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010ee6:	e7e1      	b.n	8010eac <__d2b+0x62>

08010ee8 <_calloc_r>:
 8010ee8:	b538      	push	{r3, r4, r5, lr}
 8010eea:	fb02 f401 	mul.w	r4, r2, r1
 8010eee:	4621      	mov	r1, r4
 8010ef0:	f000 f856 	bl	8010fa0 <_malloc_r>
 8010ef4:	4605      	mov	r5, r0
 8010ef6:	b118      	cbz	r0, 8010f00 <_calloc_r+0x18>
 8010ef8:	4622      	mov	r2, r4
 8010efa:	2100      	movs	r1, #0
 8010efc:	f7fd ff3d 	bl	800ed7a <memset>
 8010f00:	4628      	mov	r0, r5
 8010f02:	bd38      	pop	{r3, r4, r5, pc}

08010f04 <_free_r>:
 8010f04:	b538      	push	{r3, r4, r5, lr}
 8010f06:	4605      	mov	r5, r0
 8010f08:	2900      	cmp	r1, #0
 8010f0a:	d045      	beq.n	8010f98 <_free_r+0x94>
 8010f0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f10:	1f0c      	subs	r4, r1, #4
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	bfb8      	it	lt
 8010f16:	18e4      	addlt	r4, r4, r3
 8010f18:	f000 fa98 	bl	801144c <__malloc_lock>
 8010f1c:	4a1f      	ldr	r2, [pc, #124]	; (8010f9c <_free_r+0x98>)
 8010f1e:	6813      	ldr	r3, [r2, #0]
 8010f20:	4610      	mov	r0, r2
 8010f22:	b933      	cbnz	r3, 8010f32 <_free_r+0x2e>
 8010f24:	6063      	str	r3, [r4, #4]
 8010f26:	6014      	str	r4, [r2, #0]
 8010f28:	4628      	mov	r0, r5
 8010f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f2e:	f000 ba8e 	b.w	801144e <__malloc_unlock>
 8010f32:	42a3      	cmp	r3, r4
 8010f34:	d90c      	bls.n	8010f50 <_free_r+0x4c>
 8010f36:	6821      	ldr	r1, [r4, #0]
 8010f38:	1862      	adds	r2, r4, r1
 8010f3a:	4293      	cmp	r3, r2
 8010f3c:	bf04      	itt	eq
 8010f3e:	681a      	ldreq	r2, [r3, #0]
 8010f40:	685b      	ldreq	r3, [r3, #4]
 8010f42:	6063      	str	r3, [r4, #4]
 8010f44:	bf04      	itt	eq
 8010f46:	1852      	addeq	r2, r2, r1
 8010f48:	6022      	streq	r2, [r4, #0]
 8010f4a:	6004      	str	r4, [r0, #0]
 8010f4c:	e7ec      	b.n	8010f28 <_free_r+0x24>
 8010f4e:	4613      	mov	r3, r2
 8010f50:	685a      	ldr	r2, [r3, #4]
 8010f52:	b10a      	cbz	r2, 8010f58 <_free_r+0x54>
 8010f54:	42a2      	cmp	r2, r4
 8010f56:	d9fa      	bls.n	8010f4e <_free_r+0x4a>
 8010f58:	6819      	ldr	r1, [r3, #0]
 8010f5a:	1858      	adds	r0, r3, r1
 8010f5c:	42a0      	cmp	r0, r4
 8010f5e:	d10b      	bne.n	8010f78 <_free_r+0x74>
 8010f60:	6820      	ldr	r0, [r4, #0]
 8010f62:	4401      	add	r1, r0
 8010f64:	1858      	adds	r0, r3, r1
 8010f66:	4282      	cmp	r2, r0
 8010f68:	6019      	str	r1, [r3, #0]
 8010f6a:	d1dd      	bne.n	8010f28 <_free_r+0x24>
 8010f6c:	6810      	ldr	r0, [r2, #0]
 8010f6e:	6852      	ldr	r2, [r2, #4]
 8010f70:	605a      	str	r2, [r3, #4]
 8010f72:	4401      	add	r1, r0
 8010f74:	6019      	str	r1, [r3, #0]
 8010f76:	e7d7      	b.n	8010f28 <_free_r+0x24>
 8010f78:	d902      	bls.n	8010f80 <_free_r+0x7c>
 8010f7a:	230c      	movs	r3, #12
 8010f7c:	602b      	str	r3, [r5, #0]
 8010f7e:	e7d3      	b.n	8010f28 <_free_r+0x24>
 8010f80:	6820      	ldr	r0, [r4, #0]
 8010f82:	1821      	adds	r1, r4, r0
 8010f84:	428a      	cmp	r2, r1
 8010f86:	bf04      	itt	eq
 8010f88:	6811      	ldreq	r1, [r2, #0]
 8010f8a:	6852      	ldreq	r2, [r2, #4]
 8010f8c:	6062      	str	r2, [r4, #4]
 8010f8e:	bf04      	itt	eq
 8010f90:	1809      	addeq	r1, r1, r0
 8010f92:	6021      	streq	r1, [r4, #0]
 8010f94:	605c      	str	r4, [r3, #4]
 8010f96:	e7c7      	b.n	8010f28 <_free_r+0x24>
 8010f98:	bd38      	pop	{r3, r4, r5, pc}
 8010f9a:	bf00      	nop
 8010f9c:	200038d0 	.word	0x200038d0

08010fa0 <_malloc_r>:
 8010fa0:	b570      	push	{r4, r5, r6, lr}
 8010fa2:	1ccd      	adds	r5, r1, #3
 8010fa4:	f025 0503 	bic.w	r5, r5, #3
 8010fa8:	3508      	adds	r5, #8
 8010faa:	2d0c      	cmp	r5, #12
 8010fac:	bf38      	it	cc
 8010fae:	250c      	movcc	r5, #12
 8010fb0:	2d00      	cmp	r5, #0
 8010fb2:	4606      	mov	r6, r0
 8010fb4:	db01      	blt.n	8010fba <_malloc_r+0x1a>
 8010fb6:	42a9      	cmp	r1, r5
 8010fb8:	d903      	bls.n	8010fc2 <_malloc_r+0x22>
 8010fba:	230c      	movs	r3, #12
 8010fbc:	6033      	str	r3, [r6, #0]
 8010fbe:	2000      	movs	r0, #0
 8010fc0:	bd70      	pop	{r4, r5, r6, pc}
 8010fc2:	f000 fa43 	bl	801144c <__malloc_lock>
 8010fc6:	4a21      	ldr	r2, [pc, #132]	; (801104c <_malloc_r+0xac>)
 8010fc8:	6814      	ldr	r4, [r2, #0]
 8010fca:	4621      	mov	r1, r4
 8010fcc:	b991      	cbnz	r1, 8010ff4 <_malloc_r+0x54>
 8010fce:	4c20      	ldr	r4, [pc, #128]	; (8011050 <_malloc_r+0xb0>)
 8010fd0:	6823      	ldr	r3, [r4, #0]
 8010fd2:	b91b      	cbnz	r3, 8010fdc <_malloc_r+0x3c>
 8010fd4:	4630      	mov	r0, r6
 8010fd6:	f000 f97d 	bl	80112d4 <_sbrk_r>
 8010fda:	6020      	str	r0, [r4, #0]
 8010fdc:	4629      	mov	r1, r5
 8010fde:	4630      	mov	r0, r6
 8010fe0:	f000 f978 	bl	80112d4 <_sbrk_r>
 8010fe4:	1c43      	adds	r3, r0, #1
 8010fe6:	d124      	bne.n	8011032 <_malloc_r+0x92>
 8010fe8:	230c      	movs	r3, #12
 8010fea:	6033      	str	r3, [r6, #0]
 8010fec:	4630      	mov	r0, r6
 8010fee:	f000 fa2e 	bl	801144e <__malloc_unlock>
 8010ff2:	e7e4      	b.n	8010fbe <_malloc_r+0x1e>
 8010ff4:	680b      	ldr	r3, [r1, #0]
 8010ff6:	1b5b      	subs	r3, r3, r5
 8010ff8:	d418      	bmi.n	801102c <_malloc_r+0x8c>
 8010ffa:	2b0b      	cmp	r3, #11
 8010ffc:	d90f      	bls.n	801101e <_malloc_r+0x7e>
 8010ffe:	600b      	str	r3, [r1, #0]
 8011000:	50cd      	str	r5, [r1, r3]
 8011002:	18cc      	adds	r4, r1, r3
 8011004:	4630      	mov	r0, r6
 8011006:	f000 fa22 	bl	801144e <__malloc_unlock>
 801100a:	f104 000b 	add.w	r0, r4, #11
 801100e:	1d23      	adds	r3, r4, #4
 8011010:	f020 0007 	bic.w	r0, r0, #7
 8011014:	1ac3      	subs	r3, r0, r3
 8011016:	d0d3      	beq.n	8010fc0 <_malloc_r+0x20>
 8011018:	425a      	negs	r2, r3
 801101a:	50e2      	str	r2, [r4, r3]
 801101c:	e7d0      	b.n	8010fc0 <_malloc_r+0x20>
 801101e:	428c      	cmp	r4, r1
 8011020:	684b      	ldr	r3, [r1, #4]
 8011022:	bf16      	itet	ne
 8011024:	6063      	strne	r3, [r4, #4]
 8011026:	6013      	streq	r3, [r2, #0]
 8011028:	460c      	movne	r4, r1
 801102a:	e7eb      	b.n	8011004 <_malloc_r+0x64>
 801102c:	460c      	mov	r4, r1
 801102e:	6849      	ldr	r1, [r1, #4]
 8011030:	e7cc      	b.n	8010fcc <_malloc_r+0x2c>
 8011032:	1cc4      	adds	r4, r0, #3
 8011034:	f024 0403 	bic.w	r4, r4, #3
 8011038:	42a0      	cmp	r0, r4
 801103a:	d005      	beq.n	8011048 <_malloc_r+0xa8>
 801103c:	1a21      	subs	r1, r4, r0
 801103e:	4630      	mov	r0, r6
 8011040:	f000 f948 	bl	80112d4 <_sbrk_r>
 8011044:	3001      	adds	r0, #1
 8011046:	d0cf      	beq.n	8010fe8 <_malloc_r+0x48>
 8011048:	6025      	str	r5, [r4, #0]
 801104a:	e7db      	b.n	8011004 <_malloc_r+0x64>
 801104c:	200038d0 	.word	0x200038d0
 8011050:	200038d4 	.word	0x200038d4

08011054 <__sfputc_r>:
 8011054:	6893      	ldr	r3, [r2, #8]
 8011056:	3b01      	subs	r3, #1
 8011058:	2b00      	cmp	r3, #0
 801105a:	b410      	push	{r4}
 801105c:	6093      	str	r3, [r2, #8]
 801105e:	da08      	bge.n	8011072 <__sfputc_r+0x1e>
 8011060:	6994      	ldr	r4, [r2, #24]
 8011062:	42a3      	cmp	r3, r4
 8011064:	db01      	blt.n	801106a <__sfputc_r+0x16>
 8011066:	290a      	cmp	r1, #10
 8011068:	d103      	bne.n	8011072 <__sfputc_r+0x1e>
 801106a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801106e:	f7fe bb65 	b.w	800f73c <__swbuf_r>
 8011072:	6813      	ldr	r3, [r2, #0]
 8011074:	1c58      	adds	r0, r3, #1
 8011076:	6010      	str	r0, [r2, #0]
 8011078:	7019      	strb	r1, [r3, #0]
 801107a:	4608      	mov	r0, r1
 801107c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011080:	4770      	bx	lr

08011082 <__sfputs_r>:
 8011082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011084:	4606      	mov	r6, r0
 8011086:	460f      	mov	r7, r1
 8011088:	4614      	mov	r4, r2
 801108a:	18d5      	adds	r5, r2, r3
 801108c:	42ac      	cmp	r4, r5
 801108e:	d101      	bne.n	8011094 <__sfputs_r+0x12>
 8011090:	2000      	movs	r0, #0
 8011092:	e007      	b.n	80110a4 <__sfputs_r+0x22>
 8011094:	463a      	mov	r2, r7
 8011096:	f814 1b01 	ldrb.w	r1, [r4], #1
 801109a:	4630      	mov	r0, r6
 801109c:	f7ff ffda 	bl	8011054 <__sfputc_r>
 80110a0:	1c43      	adds	r3, r0, #1
 80110a2:	d1f3      	bne.n	801108c <__sfputs_r+0xa>
 80110a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080110a8 <_vfiprintf_r>:
 80110a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110ac:	460c      	mov	r4, r1
 80110ae:	b09d      	sub	sp, #116	; 0x74
 80110b0:	4617      	mov	r7, r2
 80110b2:	461d      	mov	r5, r3
 80110b4:	4606      	mov	r6, r0
 80110b6:	b118      	cbz	r0, 80110c0 <_vfiprintf_r+0x18>
 80110b8:	6983      	ldr	r3, [r0, #24]
 80110ba:	b90b      	cbnz	r3, 80110c0 <_vfiprintf_r+0x18>
 80110bc:	f7ff fb34 	bl	8010728 <__sinit>
 80110c0:	4b7c      	ldr	r3, [pc, #496]	; (80112b4 <_vfiprintf_r+0x20c>)
 80110c2:	429c      	cmp	r4, r3
 80110c4:	d158      	bne.n	8011178 <_vfiprintf_r+0xd0>
 80110c6:	6874      	ldr	r4, [r6, #4]
 80110c8:	89a3      	ldrh	r3, [r4, #12]
 80110ca:	0718      	lsls	r0, r3, #28
 80110cc:	d55e      	bpl.n	801118c <_vfiprintf_r+0xe4>
 80110ce:	6923      	ldr	r3, [r4, #16]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d05b      	beq.n	801118c <_vfiprintf_r+0xe4>
 80110d4:	2300      	movs	r3, #0
 80110d6:	9309      	str	r3, [sp, #36]	; 0x24
 80110d8:	2320      	movs	r3, #32
 80110da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80110de:	2330      	movs	r3, #48	; 0x30
 80110e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80110e4:	9503      	str	r5, [sp, #12]
 80110e6:	f04f 0b01 	mov.w	fp, #1
 80110ea:	46b8      	mov	r8, r7
 80110ec:	4645      	mov	r5, r8
 80110ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80110f2:	b10b      	cbz	r3, 80110f8 <_vfiprintf_r+0x50>
 80110f4:	2b25      	cmp	r3, #37	; 0x25
 80110f6:	d154      	bne.n	80111a2 <_vfiprintf_r+0xfa>
 80110f8:	ebb8 0a07 	subs.w	sl, r8, r7
 80110fc:	d00b      	beq.n	8011116 <_vfiprintf_r+0x6e>
 80110fe:	4653      	mov	r3, sl
 8011100:	463a      	mov	r2, r7
 8011102:	4621      	mov	r1, r4
 8011104:	4630      	mov	r0, r6
 8011106:	f7ff ffbc 	bl	8011082 <__sfputs_r>
 801110a:	3001      	adds	r0, #1
 801110c:	f000 80c2 	beq.w	8011294 <_vfiprintf_r+0x1ec>
 8011110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011112:	4453      	add	r3, sl
 8011114:	9309      	str	r3, [sp, #36]	; 0x24
 8011116:	f898 3000 	ldrb.w	r3, [r8]
 801111a:	2b00      	cmp	r3, #0
 801111c:	f000 80ba 	beq.w	8011294 <_vfiprintf_r+0x1ec>
 8011120:	2300      	movs	r3, #0
 8011122:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011126:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801112a:	9304      	str	r3, [sp, #16]
 801112c:	9307      	str	r3, [sp, #28]
 801112e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011132:	931a      	str	r3, [sp, #104]	; 0x68
 8011134:	46a8      	mov	r8, r5
 8011136:	2205      	movs	r2, #5
 8011138:	f818 1b01 	ldrb.w	r1, [r8], #1
 801113c:	485e      	ldr	r0, [pc, #376]	; (80112b8 <_vfiprintf_r+0x210>)
 801113e:	f7ef f827 	bl	8000190 <memchr>
 8011142:	9b04      	ldr	r3, [sp, #16]
 8011144:	bb78      	cbnz	r0, 80111a6 <_vfiprintf_r+0xfe>
 8011146:	06d9      	lsls	r1, r3, #27
 8011148:	bf44      	itt	mi
 801114a:	2220      	movmi	r2, #32
 801114c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011150:	071a      	lsls	r2, r3, #28
 8011152:	bf44      	itt	mi
 8011154:	222b      	movmi	r2, #43	; 0x2b
 8011156:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801115a:	782a      	ldrb	r2, [r5, #0]
 801115c:	2a2a      	cmp	r2, #42	; 0x2a
 801115e:	d02a      	beq.n	80111b6 <_vfiprintf_r+0x10e>
 8011160:	9a07      	ldr	r2, [sp, #28]
 8011162:	46a8      	mov	r8, r5
 8011164:	2000      	movs	r0, #0
 8011166:	250a      	movs	r5, #10
 8011168:	4641      	mov	r1, r8
 801116a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801116e:	3b30      	subs	r3, #48	; 0x30
 8011170:	2b09      	cmp	r3, #9
 8011172:	d969      	bls.n	8011248 <_vfiprintf_r+0x1a0>
 8011174:	b360      	cbz	r0, 80111d0 <_vfiprintf_r+0x128>
 8011176:	e024      	b.n	80111c2 <_vfiprintf_r+0x11a>
 8011178:	4b50      	ldr	r3, [pc, #320]	; (80112bc <_vfiprintf_r+0x214>)
 801117a:	429c      	cmp	r4, r3
 801117c:	d101      	bne.n	8011182 <_vfiprintf_r+0xda>
 801117e:	68b4      	ldr	r4, [r6, #8]
 8011180:	e7a2      	b.n	80110c8 <_vfiprintf_r+0x20>
 8011182:	4b4f      	ldr	r3, [pc, #316]	; (80112c0 <_vfiprintf_r+0x218>)
 8011184:	429c      	cmp	r4, r3
 8011186:	bf08      	it	eq
 8011188:	68f4      	ldreq	r4, [r6, #12]
 801118a:	e79d      	b.n	80110c8 <_vfiprintf_r+0x20>
 801118c:	4621      	mov	r1, r4
 801118e:	4630      	mov	r0, r6
 8011190:	f7fe fb26 	bl	800f7e0 <__swsetup_r>
 8011194:	2800      	cmp	r0, #0
 8011196:	d09d      	beq.n	80110d4 <_vfiprintf_r+0x2c>
 8011198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801119c:	b01d      	add	sp, #116	; 0x74
 801119e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111a2:	46a8      	mov	r8, r5
 80111a4:	e7a2      	b.n	80110ec <_vfiprintf_r+0x44>
 80111a6:	4a44      	ldr	r2, [pc, #272]	; (80112b8 <_vfiprintf_r+0x210>)
 80111a8:	1a80      	subs	r0, r0, r2
 80111aa:	fa0b f000 	lsl.w	r0, fp, r0
 80111ae:	4318      	orrs	r0, r3
 80111b0:	9004      	str	r0, [sp, #16]
 80111b2:	4645      	mov	r5, r8
 80111b4:	e7be      	b.n	8011134 <_vfiprintf_r+0x8c>
 80111b6:	9a03      	ldr	r2, [sp, #12]
 80111b8:	1d11      	adds	r1, r2, #4
 80111ba:	6812      	ldr	r2, [r2, #0]
 80111bc:	9103      	str	r1, [sp, #12]
 80111be:	2a00      	cmp	r2, #0
 80111c0:	db01      	blt.n	80111c6 <_vfiprintf_r+0x11e>
 80111c2:	9207      	str	r2, [sp, #28]
 80111c4:	e004      	b.n	80111d0 <_vfiprintf_r+0x128>
 80111c6:	4252      	negs	r2, r2
 80111c8:	f043 0302 	orr.w	r3, r3, #2
 80111cc:	9207      	str	r2, [sp, #28]
 80111ce:	9304      	str	r3, [sp, #16]
 80111d0:	f898 3000 	ldrb.w	r3, [r8]
 80111d4:	2b2e      	cmp	r3, #46	; 0x2e
 80111d6:	d10e      	bne.n	80111f6 <_vfiprintf_r+0x14e>
 80111d8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80111dc:	2b2a      	cmp	r3, #42	; 0x2a
 80111de:	d138      	bne.n	8011252 <_vfiprintf_r+0x1aa>
 80111e0:	9b03      	ldr	r3, [sp, #12]
 80111e2:	1d1a      	adds	r2, r3, #4
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	9203      	str	r2, [sp, #12]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	bfb8      	it	lt
 80111ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80111f0:	f108 0802 	add.w	r8, r8, #2
 80111f4:	9305      	str	r3, [sp, #20]
 80111f6:	4d33      	ldr	r5, [pc, #204]	; (80112c4 <_vfiprintf_r+0x21c>)
 80111f8:	f898 1000 	ldrb.w	r1, [r8]
 80111fc:	2203      	movs	r2, #3
 80111fe:	4628      	mov	r0, r5
 8011200:	f7ee ffc6 	bl	8000190 <memchr>
 8011204:	b140      	cbz	r0, 8011218 <_vfiprintf_r+0x170>
 8011206:	2340      	movs	r3, #64	; 0x40
 8011208:	1b40      	subs	r0, r0, r5
 801120a:	fa03 f000 	lsl.w	r0, r3, r0
 801120e:	9b04      	ldr	r3, [sp, #16]
 8011210:	4303      	orrs	r3, r0
 8011212:	f108 0801 	add.w	r8, r8, #1
 8011216:	9304      	str	r3, [sp, #16]
 8011218:	f898 1000 	ldrb.w	r1, [r8]
 801121c:	482a      	ldr	r0, [pc, #168]	; (80112c8 <_vfiprintf_r+0x220>)
 801121e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011222:	2206      	movs	r2, #6
 8011224:	f108 0701 	add.w	r7, r8, #1
 8011228:	f7ee ffb2 	bl	8000190 <memchr>
 801122c:	2800      	cmp	r0, #0
 801122e:	d037      	beq.n	80112a0 <_vfiprintf_r+0x1f8>
 8011230:	4b26      	ldr	r3, [pc, #152]	; (80112cc <_vfiprintf_r+0x224>)
 8011232:	bb1b      	cbnz	r3, 801127c <_vfiprintf_r+0x1d4>
 8011234:	9b03      	ldr	r3, [sp, #12]
 8011236:	3307      	adds	r3, #7
 8011238:	f023 0307 	bic.w	r3, r3, #7
 801123c:	3308      	adds	r3, #8
 801123e:	9303      	str	r3, [sp, #12]
 8011240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011242:	444b      	add	r3, r9
 8011244:	9309      	str	r3, [sp, #36]	; 0x24
 8011246:	e750      	b.n	80110ea <_vfiprintf_r+0x42>
 8011248:	fb05 3202 	mla	r2, r5, r2, r3
 801124c:	2001      	movs	r0, #1
 801124e:	4688      	mov	r8, r1
 8011250:	e78a      	b.n	8011168 <_vfiprintf_r+0xc0>
 8011252:	2300      	movs	r3, #0
 8011254:	f108 0801 	add.w	r8, r8, #1
 8011258:	9305      	str	r3, [sp, #20]
 801125a:	4619      	mov	r1, r3
 801125c:	250a      	movs	r5, #10
 801125e:	4640      	mov	r0, r8
 8011260:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011264:	3a30      	subs	r2, #48	; 0x30
 8011266:	2a09      	cmp	r2, #9
 8011268:	d903      	bls.n	8011272 <_vfiprintf_r+0x1ca>
 801126a:	2b00      	cmp	r3, #0
 801126c:	d0c3      	beq.n	80111f6 <_vfiprintf_r+0x14e>
 801126e:	9105      	str	r1, [sp, #20]
 8011270:	e7c1      	b.n	80111f6 <_vfiprintf_r+0x14e>
 8011272:	fb05 2101 	mla	r1, r5, r1, r2
 8011276:	2301      	movs	r3, #1
 8011278:	4680      	mov	r8, r0
 801127a:	e7f0      	b.n	801125e <_vfiprintf_r+0x1b6>
 801127c:	ab03      	add	r3, sp, #12
 801127e:	9300      	str	r3, [sp, #0]
 8011280:	4622      	mov	r2, r4
 8011282:	4b13      	ldr	r3, [pc, #76]	; (80112d0 <_vfiprintf_r+0x228>)
 8011284:	a904      	add	r1, sp, #16
 8011286:	4630      	mov	r0, r6
 8011288:	f7fd fe14 	bl	800eeb4 <_printf_float>
 801128c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8011290:	4681      	mov	r9, r0
 8011292:	d1d5      	bne.n	8011240 <_vfiprintf_r+0x198>
 8011294:	89a3      	ldrh	r3, [r4, #12]
 8011296:	065b      	lsls	r3, r3, #25
 8011298:	f53f af7e 	bmi.w	8011198 <_vfiprintf_r+0xf0>
 801129c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801129e:	e77d      	b.n	801119c <_vfiprintf_r+0xf4>
 80112a0:	ab03      	add	r3, sp, #12
 80112a2:	9300      	str	r3, [sp, #0]
 80112a4:	4622      	mov	r2, r4
 80112a6:	4b0a      	ldr	r3, [pc, #40]	; (80112d0 <_vfiprintf_r+0x228>)
 80112a8:	a904      	add	r1, sp, #16
 80112aa:	4630      	mov	r0, r6
 80112ac:	f7fe f8b8 	bl	800f420 <_printf_i>
 80112b0:	e7ec      	b.n	801128c <_vfiprintf_r+0x1e4>
 80112b2:	bf00      	nop
 80112b4:	08011fe8 	.word	0x08011fe8
 80112b8:	08012124 	.word	0x08012124
 80112bc:	08012008 	.word	0x08012008
 80112c0:	08011fc8 	.word	0x08011fc8
 80112c4:	0801212a 	.word	0x0801212a
 80112c8:	0801212e 	.word	0x0801212e
 80112cc:	0800eeb5 	.word	0x0800eeb5
 80112d0:	08011083 	.word	0x08011083

080112d4 <_sbrk_r>:
 80112d4:	b538      	push	{r3, r4, r5, lr}
 80112d6:	4c06      	ldr	r4, [pc, #24]	; (80112f0 <_sbrk_r+0x1c>)
 80112d8:	2300      	movs	r3, #0
 80112da:	4605      	mov	r5, r0
 80112dc:	4608      	mov	r0, r1
 80112de:	6023      	str	r3, [r4, #0]
 80112e0:	f7f2 fe74 	bl	8003fcc <_sbrk>
 80112e4:	1c43      	adds	r3, r0, #1
 80112e6:	d102      	bne.n	80112ee <_sbrk_r+0x1a>
 80112e8:	6823      	ldr	r3, [r4, #0]
 80112ea:	b103      	cbz	r3, 80112ee <_sbrk_r+0x1a>
 80112ec:	602b      	str	r3, [r5, #0]
 80112ee:	bd38      	pop	{r3, r4, r5, pc}
 80112f0:	20003b98 	.word	0x20003b98

080112f4 <__sread>:
 80112f4:	b510      	push	{r4, lr}
 80112f6:	460c      	mov	r4, r1
 80112f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112fc:	f000 f8a8 	bl	8011450 <_read_r>
 8011300:	2800      	cmp	r0, #0
 8011302:	bfab      	itete	ge
 8011304:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011306:	89a3      	ldrhlt	r3, [r4, #12]
 8011308:	181b      	addge	r3, r3, r0
 801130a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801130e:	bfac      	ite	ge
 8011310:	6563      	strge	r3, [r4, #84]	; 0x54
 8011312:	81a3      	strhlt	r3, [r4, #12]
 8011314:	bd10      	pop	{r4, pc}

08011316 <__swrite>:
 8011316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801131a:	461f      	mov	r7, r3
 801131c:	898b      	ldrh	r3, [r1, #12]
 801131e:	05db      	lsls	r3, r3, #23
 8011320:	4605      	mov	r5, r0
 8011322:	460c      	mov	r4, r1
 8011324:	4616      	mov	r6, r2
 8011326:	d505      	bpl.n	8011334 <__swrite+0x1e>
 8011328:	2302      	movs	r3, #2
 801132a:	2200      	movs	r2, #0
 801132c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011330:	f000 f868 	bl	8011404 <_lseek_r>
 8011334:	89a3      	ldrh	r3, [r4, #12]
 8011336:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801133a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801133e:	81a3      	strh	r3, [r4, #12]
 8011340:	4632      	mov	r2, r6
 8011342:	463b      	mov	r3, r7
 8011344:	4628      	mov	r0, r5
 8011346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801134a:	f000 b817 	b.w	801137c <_write_r>

0801134e <__sseek>:
 801134e:	b510      	push	{r4, lr}
 8011350:	460c      	mov	r4, r1
 8011352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011356:	f000 f855 	bl	8011404 <_lseek_r>
 801135a:	1c43      	adds	r3, r0, #1
 801135c:	89a3      	ldrh	r3, [r4, #12]
 801135e:	bf15      	itete	ne
 8011360:	6560      	strne	r0, [r4, #84]	; 0x54
 8011362:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011366:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801136a:	81a3      	strheq	r3, [r4, #12]
 801136c:	bf18      	it	ne
 801136e:	81a3      	strhne	r3, [r4, #12]
 8011370:	bd10      	pop	{r4, pc}

08011372 <__sclose>:
 8011372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011376:	f000 b813 	b.w	80113a0 <_close_r>
	...

0801137c <_write_r>:
 801137c:	b538      	push	{r3, r4, r5, lr}
 801137e:	4c07      	ldr	r4, [pc, #28]	; (801139c <_write_r+0x20>)
 8011380:	4605      	mov	r5, r0
 8011382:	4608      	mov	r0, r1
 8011384:	4611      	mov	r1, r2
 8011386:	2200      	movs	r2, #0
 8011388:	6022      	str	r2, [r4, #0]
 801138a:	461a      	mov	r2, r3
 801138c:	f7f8 ffa2 	bl	800a2d4 <_write>
 8011390:	1c43      	adds	r3, r0, #1
 8011392:	d102      	bne.n	801139a <_write_r+0x1e>
 8011394:	6823      	ldr	r3, [r4, #0]
 8011396:	b103      	cbz	r3, 801139a <_write_r+0x1e>
 8011398:	602b      	str	r3, [r5, #0]
 801139a:	bd38      	pop	{r3, r4, r5, pc}
 801139c:	20003b98 	.word	0x20003b98

080113a0 <_close_r>:
 80113a0:	b538      	push	{r3, r4, r5, lr}
 80113a2:	4c06      	ldr	r4, [pc, #24]	; (80113bc <_close_r+0x1c>)
 80113a4:	2300      	movs	r3, #0
 80113a6:	4605      	mov	r5, r0
 80113a8:	4608      	mov	r0, r1
 80113aa:	6023      	str	r3, [r4, #0]
 80113ac:	f7f2 fdda 	bl	8003f64 <_close>
 80113b0:	1c43      	adds	r3, r0, #1
 80113b2:	d102      	bne.n	80113ba <_close_r+0x1a>
 80113b4:	6823      	ldr	r3, [r4, #0]
 80113b6:	b103      	cbz	r3, 80113ba <_close_r+0x1a>
 80113b8:	602b      	str	r3, [r5, #0]
 80113ba:	bd38      	pop	{r3, r4, r5, pc}
 80113bc:	20003b98 	.word	0x20003b98

080113c0 <_fstat_r>:
 80113c0:	b538      	push	{r3, r4, r5, lr}
 80113c2:	4c07      	ldr	r4, [pc, #28]	; (80113e0 <_fstat_r+0x20>)
 80113c4:	2300      	movs	r3, #0
 80113c6:	4605      	mov	r5, r0
 80113c8:	4608      	mov	r0, r1
 80113ca:	4611      	mov	r1, r2
 80113cc:	6023      	str	r3, [r4, #0]
 80113ce:	f7f2 fdd5 	bl	8003f7c <_fstat>
 80113d2:	1c43      	adds	r3, r0, #1
 80113d4:	d102      	bne.n	80113dc <_fstat_r+0x1c>
 80113d6:	6823      	ldr	r3, [r4, #0]
 80113d8:	b103      	cbz	r3, 80113dc <_fstat_r+0x1c>
 80113da:	602b      	str	r3, [r5, #0]
 80113dc:	bd38      	pop	{r3, r4, r5, pc}
 80113de:	bf00      	nop
 80113e0:	20003b98 	.word	0x20003b98

080113e4 <_isatty_r>:
 80113e4:	b538      	push	{r3, r4, r5, lr}
 80113e6:	4c06      	ldr	r4, [pc, #24]	; (8011400 <_isatty_r+0x1c>)
 80113e8:	2300      	movs	r3, #0
 80113ea:	4605      	mov	r5, r0
 80113ec:	4608      	mov	r0, r1
 80113ee:	6023      	str	r3, [r4, #0]
 80113f0:	f7f2 fdd4 	bl	8003f9c <_isatty>
 80113f4:	1c43      	adds	r3, r0, #1
 80113f6:	d102      	bne.n	80113fe <_isatty_r+0x1a>
 80113f8:	6823      	ldr	r3, [r4, #0]
 80113fa:	b103      	cbz	r3, 80113fe <_isatty_r+0x1a>
 80113fc:	602b      	str	r3, [r5, #0]
 80113fe:	bd38      	pop	{r3, r4, r5, pc}
 8011400:	20003b98 	.word	0x20003b98

08011404 <_lseek_r>:
 8011404:	b538      	push	{r3, r4, r5, lr}
 8011406:	4c07      	ldr	r4, [pc, #28]	; (8011424 <_lseek_r+0x20>)
 8011408:	4605      	mov	r5, r0
 801140a:	4608      	mov	r0, r1
 801140c:	4611      	mov	r1, r2
 801140e:	2200      	movs	r2, #0
 8011410:	6022      	str	r2, [r4, #0]
 8011412:	461a      	mov	r2, r3
 8011414:	f7f2 fdcd 	bl	8003fb2 <_lseek>
 8011418:	1c43      	adds	r3, r0, #1
 801141a:	d102      	bne.n	8011422 <_lseek_r+0x1e>
 801141c:	6823      	ldr	r3, [r4, #0]
 801141e:	b103      	cbz	r3, 8011422 <_lseek_r+0x1e>
 8011420:	602b      	str	r3, [r5, #0]
 8011422:	bd38      	pop	{r3, r4, r5, pc}
 8011424:	20003b98 	.word	0x20003b98

08011428 <__ascii_mbtowc>:
 8011428:	b082      	sub	sp, #8
 801142a:	b901      	cbnz	r1, 801142e <__ascii_mbtowc+0x6>
 801142c:	a901      	add	r1, sp, #4
 801142e:	b142      	cbz	r2, 8011442 <__ascii_mbtowc+0x1a>
 8011430:	b14b      	cbz	r3, 8011446 <__ascii_mbtowc+0x1e>
 8011432:	7813      	ldrb	r3, [r2, #0]
 8011434:	600b      	str	r3, [r1, #0]
 8011436:	7812      	ldrb	r2, [r2, #0]
 8011438:	1c10      	adds	r0, r2, #0
 801143a:	bf18      	it	ne
 801143c:	2001      	movne	r0, #1
 801143e:	b002      	add	sp, #8
 8011440:	4770      	bx	lr
 8011442:	4610      	mov	r0, r2
 8011444:	e7fb      	b.n	801143e <__ascii_mbtowc+0x16>
 8011446:	f06f 0001 	mvn.w	r0, #1
 801144a:	e7f8      	b.n	801143e <__ascii_mbtowc+0x16>

0801144c <__malloc_lock>:
 801144c:	4770      	bx	lr

0801144e <__malloc_unlock>:
 801144e:	4770      	bx	lr

08011450 <_read_r>:
 8011450:	b538      	push	{r3, r4, r5, lr}
 8011452:	4c07      	ldr	r4, [pc, #28]	; (8011470 <_read_r+0x20>)
 8011454:	4605      	mov	r5, r0
 8011456:	4608      	mov	r0, r1
 8011458:	4611      	mov	r1, r2
 801145a:	2200      	movs	r2, #0
 801145c:	6022      	str	r2, [r4, #0]
 801145e:	461a      	mov	r2, r3
 8011460:	f7f2 fd63 	bl	8003f2a <_read>
 8011464:	1c43      	adds	r3, r0, #1
 8011466:	d102      	bne.n	801146e <_read_r+0x1e>
 8011468:	6823      	ldr	r3, [r4, #0]
 801146a:	b103      	cbz	r3, 801146e <_read_r+0x1e>
 801146c:	602b      	str	r3, [r5, #0]
 801146e:	bd38      	pop	{r3, r4, r5, pc}
 8011470:	20003b98 	.word	0x20003b98

08011474 <__ascii_wctomb>:
 8011474:	b149      	cbz	r1, 801148a <__ascii_wctomb+0x16>
 8011476:	2aff      	cmp	r2, #255	; 0xff
 8011478:	bf85      	ittet	hi
 801147a:	238a      	movhi	r3, #138	; 0x8a
 801147c:	6003      	strhi	r3, [r0, #0]
 801147e:	700a      	strbls	r2, [r1, #0]
 8011480:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011484:	bf98      	it	ls
 8011486:	2001      	movls	r0, #1
 8011488:	4770      	bx	lr
 801148a:	4608      	mov	r0, r1
 801148c:	4770      	bx	lr
	...

08011490 <_init>:
 8011490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011492:	bf00      	nop
 8011494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011496:	bc08      	pop	{r3}
 8011498:	469e      	mov	lr, r3
 801149a:	4770      	bx	lr

0801149c <_fini>:
 801149c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801149e:	bf00      	nop
 80114a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80114a2:	bc08      	pop	{r3}
 80114a4:	469e      	mov	lr, r3
 80114a6:	4770      	bx	lr
