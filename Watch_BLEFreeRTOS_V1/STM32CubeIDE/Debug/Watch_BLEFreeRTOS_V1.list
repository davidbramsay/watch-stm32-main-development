
Watch_BLEFreeRTOS_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015a30  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fb0  08015b70  08015b70  00025b70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017b20  08017b20  00027b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017b28  08017b28  00027b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017b2c  08017b2c  00027b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f0  20000004  08017b30  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_APP_CONTEXT 000000d0  200001f8  08017d20  000301f8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  8 TIMERSERVER_CONTEXT 00000099  200002c8  08017df0  000302c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_DRIVER_CONTEXT 0000003e  20000364  08017e89  00030364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 SYSTEM_DRIVER_CONTEXT 00000011  200003a4  08017ec7  000303a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005d00  200003b8  08017ed8  000303b8  2**2
                  ALLOC
 12 ._user_heap_stack 00001400  200060b8  08017ed8  000360b8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000303b5  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 15 MB_MEM1       000001b8  20030028  20030028  00040000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00040000  2**2
                  ALLOC
 17 .debug_info   0005470b  00000000  00000000  000303e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 00008efb  00000000  00000000  00084af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00003a68  00000000  00000000  0008d9f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00003698  00000000  00000000  00091458  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  000334f1  00000000  00000000  00094af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   00036ea0  00000000  00000000  000c7fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    001125c2  00000000  00000000  000fee81  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  00211443  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00010504  00000000  00000000  002114c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200003b8 	.word	0x200003b8
 800015c:	00000000 	.word	0x00000000
 8000160:	08015b58 	.word	0x08015b58

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200003bc 	.word	0x200003bc
 800017c:	08015b58 	.word	0x08015b58

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800036e:	f1a4 0401 	sub.w	r4, r4, #1
 8000372:	d1e9      	bne.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b972 	b.w	8000e54 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9e08      	ldr	r6, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	4688      	mov	r8, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d14b      	bne.n	8000c2e <__udivmoddi4+0xa6>
 8000b96:	428a      	cmp	r2, r1
 8000b98:	4615      	mov	r5, r2
 8000b9a:	d967      	bls.n	8000c6c <__udivmoddi4+0xe4>
 8000b9c:	fab2 f282 	clz	r2, r2
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0720 	rsb	r7, r2, #32
 8000ba6:	fa01 f302 	lsl.w	r3, r1, r2
 8000baa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bae:	4095      	lsls	r5, r2
 8000bb0:	ea47 0803 	orr.w	r8, r7, r3
 8000bb4:	4094      	lsls	r4, r2
 8000bb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bba:	0c23      	lsrs	r3, r4, #16
 8000bbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bc0:	fa1f fc85 	uxth.w	ip, r5
 8000bc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bcc:	fb07 f10c 	mul.w	r1, r7, ip
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x60>
 8000bd4:	18eb      	adds	r3, r5, r3
 8000bd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bda:	f080 811b 	bcs.w	8000e14 <__udivmoddi4+0x28c>
 8000bde:	4299      	cmp	r1, r3
 8000be0:	f240 8118 	bls.w	8000e14 <__udivmoddi4+0x28c>
 8000be4:	3f02      	subs	r7, #2
 8000be6:	442b      	add	r3, r5
 8000be8:	1a5b      	subs	r3, r3, r1
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bfc:	45a4      	cmp	ip, r4
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x8c>
 8000c00:	192c      	adds	r4, r5, r4
 8000c02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c06:	f080 8107 	bcs.w	8000e18 <__udivmoddi4+0x290>
 8000c0a:	45a4      	cmp	ip, r4
 8000c0c:	f240 8104 	bls.w	8000e18 <__udivmoddi4+0x290>
 8000c10:	3802      	subs	r0, #2
 8000c12:	442c      	add	r4, r5
 8000c14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c18:	eba4 040c 	sub.w	r4, r4, ip
 8000c1c:	2700      	movs	r7, #0
 8000c1e:	b11e      	cbz	r6, 8000c28 <__udivmoddi4+0xa0>
 8000c20:	40d4      	lsrs	r4, r2
 8000c22:	2300      	movs	r3, #0
 8000c24:	e9c6 4300 	strd	r4, r3, [r6]
 8000c28:	4639      	mov	r1, r7
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d909      	bls.n	8000c46 <__udivmoddi4+0xbe>
 8000c32:	2e00      	cmp	r6, #0
 8000c34:	f000 80eb 	beq.w	8000e0e <__udivmoddi4+0x286>
 8000c38:	2700      	movs	r7, #0
 8000c3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c3e:	4638      	mov	r0, r7
 8000c40:	4639      	mov	r1, r7
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	fab3 f783 	clz	r7, r3
 8000c4a:	2f00      	cmp	r7, #0
 8000c4c:	d147      	bne.n	8000cde <__udivmoddi4+0x156>
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d302      	bcc.n	8000c58 <__udivmoddi4+0xd0>
 8000c52:	4282      	cmp	r2, r0
 8000c54:	f200 80fa 	bhi.w	8000e4c <__udivmoddi4+0x2c4>
 8000c58:	1a84      	subs	r4, r0, r2
 8000c5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5e:	2001      	movs	r0, #1
 8000c60:	4698      	mov	r8, r3
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	d0e0      	beq.n	8000c28 <__udivmoddi4+0xa0>
 8000c66:	e9c6 4800 	strd	r4, r8, [r6]
 8000c6a:	e7dd      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000c6c:	b902      	cbnz	r2, 8000c70 <__udivmoddi4+0xe8>
 8000c6e:	deff      	udf	#255	; 0xff
 8000c70:	fab2 f282 	clz	r2, r2
 8000c74:	2a00      	cmp	r2, #0
 8000c76:	f040 808f 	bne.w	8000d98 <__udivmoddi4+0x210>
 8000c7a:	1b49      	subs	r1, r1, r5
 8000c7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c80:	fa1f f885 	uxth.w	r8, r5
 8000c84:	2701      	movs	r7, #1
 8000c86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c94:	fb08 f10c 	mul.w	r1, r8, ip
 8000c98:	4299      	cmp	r1, r3
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0x124>
 8000c9c:	18eb      	adds	r3, r5, r3
 8000c9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x122>
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	f200 80cd 	bhi.w	8000e44 <__udivmoddi4+0x2bc>
 8000caa:	4684      	mov	ip, r0
 8000cac:	1a59      	subs	r1, r3, r1
 8000cae:	b2a3      	uxth	r3, r4
 8000cb0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cb8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cbc:	fb08 f800 	mul.w	r8, r8, r0
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x14c>
 8000cc4:	192c      	adds	r4, r5, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x14a>
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	f200 80b6 	bhi.w	8000e3e <__udivmoddi4+0x2b6>
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	eba4 0408 	sub.w	r4, r4, r8
 8000cd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cdc:	e79f      	b.n	8000c1e <__udivmoddi4+0x96>
 8000cde:	f1c7 0c20 	rsb	ip, r7, #32
 8000ce2:	40bb      	lsls	r3, r7
 8000ce4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ce8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cec:	fa01 f407 	lsl.w	r4, r1, r7
 8000cf0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cf4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cf8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cfc:	4325      	orrs	r5, r4
 8000cfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d02:	0c2c      	lsrs	r4, r5, #16
 8000d04:	fb08 3319 	mls	r3, r8, r9, r3
 8000d08:	fa1f fa8e 	uxth.w	sl, lr
 8000d0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d10:	fb09 f40a 	mul.w	r4, r9, sl
 8000d14:	429c      	cmp	r4, r3
 8000d16:	fa02 f207 	lsl.w	r2, r2, r7
 8000d1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b0>
 8000d20:	eb1e 0303 	adds.w	r3, lr, r3
 8000d24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d28:	f080 8087 	bcs.w	8000e3a <__udivmoddi4+0x2b2>
 8000d2c:	429c      	cmp	r4, r3
 8000d2e:	f240 8084 	bls.w	8000e3a <__udivmoddi4+0x2b2>
 8000d32:	f1a9 0902 	sub.w	r9, r9, #2
 8000d36:	4473      	add	r3, lr
 8000d38:	1b1b      	subs	r3, r3, r4
 8000d3a:	b2ad      	uxth	r5, r5
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d4c:	45a2      	cmp	sl, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1da>
 8000d50:	eb1e 0404 	adds.w	r4, lr, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d58:	d26b      	bcs.n	8000e32 <__udivmoddi4+0x2aa>
 8000d5a:	45a2      	cmp	sl, r4
 8000d5c:	d969      	bls.n	8000e32 <__udivmoddi4+0x2aa>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4474      	add	r4, lr
 8000d62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d66:	fba0 8902 	umull	r8, r9, r0, r2
 8000d6a:	eba4 040a 	sub.w	r4, r4, sl
 8000d6e:	454c      	cmp	r4, r9
 8000d70:	46c2      	mov	sl, r8
 8000d72:	464b      	mov	r3, r9
 8000d74:	d354      	bcc.n	8000e20 <__udivmoddi4+0x298>
 8000d76:	d051      	beq.n	8000e1c <__udivmoddi4+0x294>
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d069      	beq.n	8000e50 <__udivmoddi4+0x2c8>
 8000d7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d80:	eb64 0403 	sbc.w	r4, r4, r3
 8000d84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d88:	40fd      	lsrs	r5, r7
 8000d8a:	40fc      	lsrs	r4, r7
 8000d8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000d90:	e9c6 5400 	strd	r5, r4, [r6]
 8000d94:	2700      	movs	r7, #0
 8000d96:	e747      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000d98:	f1c2 0320 	rsb	r3, r2, #32
 8000d9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000da0:	4095      	lsls	r5, r2
 8000da2:	fa01 f002 	lsl.w	r0, r1, r2
 8000da6:	fa21 f303 	lsr.w	r3, r1, r3
 8000daa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dae:	4338      	orrs	r0, r7
 8000db0:	0c01      	lsrs	r1, r0, #16
 8000db2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000db6:	fa1f f885 	uxth.w	r8, r5
 8000dba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc2:	fb07 f308 	mul.w	r3, r7, r8
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d907      	bls.n	8000dde <__udivmoddi4+0x256>
 8000dce:	1869      	adds	r1, r5, r1
 8000dd0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dd4:	d22f      	bcs.n	8000e36 <__udivmoddi4+0x2ae>
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	d92d      	bls.n	8000e36 <__udivmoddi4+0x2ae>
 8000dda:	3f02      	subs	r7, #2
 8000ddc:	4429      	add	r1, r5
 8000dde:	1acb      	subs	r3, r1, r3
 8000de0:	b281      	uxth	r1, r0
 8000de2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dee:	fb00 f308 	mul.w	r3, r0, r8
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d907      	bls.n	8000e06 <__udivmoddi4+0x27e>
 8000df6:	1869      	adds	r1, r5, r1
 8000df8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dfc:	d217      	bcs.n	8000e2e <__udivmoddi4+0x2a6>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d915      	bls.n	8000e2e <__udivmoddi4+0x2a6>
 8000e02:	3802      	subs	r0, #2
 8000e04:	4429      	add	r1, r5
 8000e06:	1ac9      	subs	r1, r1, r3
 8000e08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e0c:	e73b      	b.n	8000c86 <__udivmoddi4+0xfe>
 8000e0e:	4637      	mov	r7, r6
 8000e10:	4630      	mov	r0, r6
 8000e12:	e709      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000e14:	4607      	mov	r7, r0
 8000e16:	e6e7      	b.n	8000be8 <__udivmoddi4+0x60>
 8000e18:	4618      	mov	r0, r3
 8000e1a:	e6fb      	b.n	8000c14 <__udivmoddi4+0x8c>
 8000e1c:	4541      	cmp	r1, r8
 8000e1e:	d2ab      	bcs.n	8000d78 <__udivmoddi4+0x1f0>
 8000e20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e24:	eb69 020e 	sbc.w	r2, r9, lr
 8000e28:	3801      	subs	r0, #1
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	e7a4      	b.n	8000d78 <__udivmoddi4+0x1f0>
 8000e2e:	4660      	mov	r0, ip
 8000e30:	e7e9      	b.n	8000e06 <__udivmoddi4+0x27e>
 8000e32:	4618      	mov	r0, r3
 8000e34:	e795      	b.n	8000d62 <__udivmoddi4+0x1da>
 8000e36:	4667      	mov	r7, ip
 8000e38:	e7d1      	b.n	8000dde <__udivmoddi4+0x256>
 8000e3a:	4681      	mov	r9, r0
 8000e3c:	e77c      	b.n	8000d38 <__udivmoddi4+0x1b0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	442c      	add	r4, r5
 8000e42:	e747      	b.n	8000cd4 <__udivmoddi4+0x14c>
 8000e44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e48:	442b      	add	r3, r5
 8000e4a:	e72f      	b.n	8000cac <__udivmoddi4+0x124>
 8000e4c:	4638      	mov	r0, r7
 8000e4e:	e708      	b.n	8000c62 <__udivmoddi4+0xda>
 8000e50:	4637      	mov	r7, r6
 8000e52:	e6e9      	b.n	8000c28 <__udivmoddi4+0xa0>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <LL_FLASH_GetUDN+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	1fff7580 	.word	0x1fff7580

08000e70 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <LL_FLASH_GetDeviceID+0x14>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	b2db      	uxtb	r3, r3
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	1fff7584 	.word	0x1fff7584

08000e88 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <LL_FLASH_GetSTCompanyID+0x14>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	0a1b      	lsrs	r3, r3, #8
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	1fff7584 	.word	0x1fff7584

08000ea0 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8000ea0:	b5b0      	push	{r4, r5, r7, lr}
 8000ea2:	b08c      	sub	sp, #48	; 0x30
 8000ea4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8000ea6:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <APP_BLE_Init+0xb4>)
 8000ea8:	463c      	mov	r4, r7
 8000eaa:	461d      	mov	r5, r3
 8000eac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000eb8:	c407      	stmia	r4!, {r0, r1, r2}
 8000eba:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8000ebc:	f000 f9fe 	bl	80012bc <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	2002      	movs	r0, #2
 8000ec4:	f012 f842 	bl	8012f4c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  HciUserEvtProcessId = osThreadNew(HciUserEvtProcess, NULL, &HciUserEvtProcess_attr);
 8000ec8:	4a23      	ldr	r2, [pc, #140]	; (8000f58 <APP_BLE_Init+0xb8>)
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4823      	ldr	r0, [pc, #140]	; (8000f5c <APP_BLE_Init+0xbc>)
 8000ece:	f00d fee5 	bl	800ec9c <osThreadNew>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	4b22      	ldr	r3, [pc, #136]	; (8000f60 <APP_BLE_Init+0xc0>)
 8000ed6:	601a      	str	r2, [r3, #0]

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 8000ed8:	463b      	mov	r3, r7
 8000eda:	4618      	mov	r0, r3
 8000edc:	f00c fa72 	bl	800d3c4 <SHCI_C2_BLE_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <APP_BLE_Init+0x4a>
  {
    Error_Handler();
 8000ee6:	f004 fbdb 	bl	80056a0 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8000eea:	f000 fa0f 	bl	800130c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8000eee:	f00b fa15 	bl	800c31c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <APP_BLE_Init+0xc4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8000efa:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <APP_BLE_Init+0xc4>)
 8000efc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f00:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  AdvUpdateProcessId = osThreadNew(AdvUpdateProcess, NULL, &AdvUpdateProcess_attr);
 8000f02:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <APP_BLE_Init+0xc8>)
 8000f04:	2100      	movs	r1, #0
 8000f06:	4819      	ldr	r0, [pc, #100]	; (8000f6c <APP_BLE_Init+0xcc>)
 8000f08:	f00d fec8 	bl	800ec9c <osThreadNew>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <APP_BLE_Init+0xd0>)
 8000f10:	601a      	str	r2, [r3, #0]

  /**
   * Initialize HRS Application
   */
  //P2P FIX HRSAPP_Init();
  index_con_int = 0;
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <APP_BLE_Init+0xd4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 8000f18:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <APP_BLE_Init+0xd8>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	701a      	strb	r2, [r3, #0]
  P2PS_APP_Init();
 8000f1e:	f000 fca3 	bl	8001868 <P2PS_APP_Init>

  /**
   * Create timer to handle the connection state machine
   */

  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Mgr);
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <APP_BLE_Init+0xdc>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	4916      	ldr	r1, [pc, #88]	; (8000f80 <APP_BLE_Init+0xe0>)
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f002 fc4d 	bl	80037c8 <HW_TS_Create>
  /**
   * Make device discoverable
   */

  //P2P FIX lines below
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL; //AD_TYPE_16_BIT_SERV_UUID;
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <APP_BLE_Init+0xc4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;//1;
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <APP_BLE_Init+0xc4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	761a      	strb	r2, [r3, #24]
  //P2P FIX Add_Advertisment_Service_UUID(HEART_RATE_SERVICE_UUID);
  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8000f3a:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <APP_BLE_Init+0xe4>)
 8000f3c:	2280      	movs	r2, #128	; 0x80
 8000f3e:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <APP_BLE_Init+0xe8>)
 8000f42:	22a0      	movs	r2, #160	; 0xa0
 8000f44:	801a      	strh	r2, [r3, #0]

  /**
  * Start to Advertise to be connected by Collector
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8000f46:	2001      	movs	r0, #1
 8000f48:	f000 fabc 	bl	80014c4 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8000f4c:	bf00      	nop
}
 8000f4e:	3730      	adds	r7, #48	; 0x30
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bdb0      	pop	{r4, r5, r7, pc}
 8000f54:	08015b9c 	.word	0x08015b9c
 8000f58:	0801646c 	.word	0x0801646c
 8000f5c:	080016d9 	.word	0x080016d9
 8000f60:	20005c30 	.word	0x20005c30
 8000f64:	20000210 	.word	0x20000210
 8000f68:	08016448 	.word	0x08016448
 8000f6c:	080016b1 	.word	0x080016b1
 8000f70:	20005c48 	.word	0x20005c48
 8000f74:	20005c3d 	.word	0x20005c3d
 8000f78:	20005c3c 	.word	0x20005c3c
 8000f7c:	08001699 	.word	0x08001699
 8000f80:	20000291 	.word	0x20000291
 8000f84:	20000294 	.word	0x20000294
 8000f88:	20000296 	.word	0x20000296

08000f8c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08c      	sub	sp, #48	; 0x30
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8000f94:	2342      	movs	r3, #66	; 0x42
 8000f96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8000fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b3e      	cmp	r3, #62	; 0x3e
 8000fa6:	d028      	beq.n	8000ffa <SVCCTL_App_Notification+0x6e>
 8000fa8:	2bff      	cmp	r3, #255	; 0xff
 8000faa:	f000 80a5 	beq.w	80010f8 <SVCCTL_App_Notification+0x16c>
 8000fae:	2b05      	cmp	r3, #5
 8000fb0:	d000      	beq.n	8000fb4 <SVCCTL_App_Notification+0x28>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
        break;
 8000fb2:	e145      	b.n	8001240 <SVCCTL_App_Notification+0x2b4>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8000fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	613b      	str	r3, [r7, #16]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	4ba2      	ldr	r3, [pc, #648]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 8000fc4:	8adb      	ldrh	r3, [r3, #22]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d109      	bne.n	8000fde <SVCCTL_App_Notification+0x52>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8000fca:	4ba0      	ldr	r3, [pc, #640]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8000fd0:	4b9e      	ldr	r3, [pc, #632]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 8000fd8:	489d      	ldr	r0, [pc, #628]	; (8001250 <SVCCTL_App_Notification+0x2c4>)
 8000fda:	f012 fda3 	bl	8013b24 <puts>
      Adv_Request(APP_BLE_FAST_ADV);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f000 fa70 	bl	80014c4 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8000fe4:	4b9b      	ldr	r3, [pc, #620]	; (8001254 <SVCCTL_App_Notification+0x2c8>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8000fea:	4b98      	ldr	r3, [pc, #608]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 8000fec:	8ada      	ldrh	r2, [r3, #22]
 8000fee:	4b99      	ldr	r3, [pc, #612]	; (8001254 <SVCCTL_App_Notification+0x2c8>)
 8000ff0:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 8000ff2:	4898      	ldr	r0, [pc, #608]	; (8001254 <SVCCTL_App_Notification+0x2c8>)
 8000ff4:	f000 fc24 	bl	8001840 <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 8000ff8:	e122      	b.n	8001240 <SVCCTL_App_Notification+0x2b4>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8000ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	61fb      	str	r3, [r7, #28]
      switch (meta_evt->subevent)
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b03      	cmp	r3, #3
 8001006:	d004      	beq.n	8001012 <SVCCTL_App_Notification+0x86>
 8001008:	2b0c      	cmp	r3, #12
 800100a:	d006      	beq.n	800101a <SVCCTL_App_Notification+0x8e>
 800100c:	2b01      	cmp	r3, #1
 800100e:	d042      	beq.n	8001096 <SVCCTL_App_Notification+0x10a>
          break;
 8001010:	e071      	b.n	80010f6 <SVCCTL_App_Notification+0x16a>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 8001012:	4891      	ldr	r0, [pc, #580]	; (8001258 <SVCCTL_App_Notification+0x2cc>)
 8001014:	f012 fd86 	bl	8013b24 <puts>
          break;
 8001018:	e06d      	b.n	80010f6 <SVCCTL_App_Notification+0x16a>
          APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE \n");
 800101a:	4890      	ldr	r0, [pc, #576]	; (800125c <SVCCTL_App_Notification+0x2d0>)
 800101c:	f012 fd82 	bl	8013b24 <puts>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	3301      	adds	r3, #1
 8001024:	61bb      	str	r3, [r7, #24]
          if (evt_le_phy_update_complete->Status == 0)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d103      	bne.n	8001036 <SVCCTL_App_Notification+0xaa>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status ok \n");
 800102e:	488c      	ldr	r0, [pc, #560]	; (8001260 <SVCCTL_App_Notification+0x2d4>)
 8001030:	f012 fd78 	bl	8013b24 <puts>
 8001034:	e002      	b.n	800103c <SVCCTL_App_Notification+0xb0>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status nok \n");
 8001036:	488b      	ldr	r0, [pc, #556]	; (8001264 <SVCCTL_App_Notification+0x2d8>)
 8001038:	f012 fd74 	bl	8013b24 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800103c:	4b83      	ldr	r3, [pc, #524]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 800103e:	8adb      	ldrh	r3, [r3, #22]
 8001040:	f107 020e 	add.w	r2, r7, #14
 8001044:	f107 010f 	add.w	r1, r7, #15
 8001048:	4618      	mov	r0, r3
 800104a:	f00c f8cc 	bl	800d1e6 <hci_le_read_phy>
 800104e:	4603      	mov	r3, r0
 8001050:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret == BLE_STATUS_SUCCESS)
 8001054:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001058:	2b00      	cmp	r3, #0
 800105a:	d118      	bne.n	800108e <SVCCTL_App_Notification+0x102>
            APP_DBG_MSG("Read_PHY success \n");
 800105c:	4882      	ldr	r0, [pc, #520]	; (8001268 <SVCCTL_App_Notification+0x2dc>)
 800105e:	f012 fd61 	bl	8013b24 <puts>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	2b02      	cmp	r3, #2
 8001066:	d10a      	bne.n	800107e <SVCCTL_App_Notification+0xf2>
 8001068:	7bbb      	ldrb	r3, [r7, #14]
 800106a:	2b02      	cmp	r3, #2
 800106c:	d107      	bne.n	800107e <SVCCTL_App_Notification+0xf2>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	4619      	mov	r1, r3
 8001072:	7bbb      	ldrb	r3, [r7, #14]
 8001074:	461a      	mov	r2, r3
 8001076:	487d      	ldr	r0, [pc, #500]	; (800126c <SVCCTL_App_Notification+0x2e0>)
 8001078:	f012 fce0 	bl	8013a3c <iprintf>
          break;
 800107c:	e03b      	b.n	80010f6 <SVCCTL_App_Notification+0x16a>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	4619      	mov	r1, r3
 8001082:	7bbb      	ldrb	r3, [r7, #14]
 8001084:	461a      	mov	r2, r3
 8001086:	4879      	ldr	r0, [pc, #484]	; (800126c <SVCCTL_App_Notification+0x2e0>)
 8001088:	f012 fcd8 	bl	8013a3c <iprintf>
          break;
 800108c:	e033      	b.n	80010f6 <SVCCTL_App_Notification+0x16a>
            APP_DBG_MSG("Read conf not succeess \n");
 800108e:	4878      	ldr	r0, [pc, #480]	; (8001270 <SVCCTL_App_Notification+0x2e4>)
 8001090:	f012 fd48 	bl	8013b24 <puts>
          break;
 8001094:	e02f      	b.n	80010f6 <SVCCTL_App_Notification+0x16a>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800109c:	4b6b      	ldr	r3, [pc, #428]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 800109e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80010a2:	4618      	mov	r0, r3
 80010a4:	f002 fc06 	bl	80038b4 <HW_TS_Stop>
          APP_DBG_MSG("EVT_LE_CONN_COMPLETE for connection handle 0x%x\n", connection_complete_event->Connection_Handle);
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	4619      	mov	r1, r3
 80010b2:	4870      	ldr	r0, [pc, #448]	; (8001274 <SVCCTL_App_Notification+0x2e8>)
 80010b4:	f012 fcc2 	bl	8013a3c <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80010b8:	4b64      	ldr	r3, [pc, #400]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 80010ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80010be:	2b04      	cmp	r3, #4
 80010c0:	d104      	bne.n	80010cc <SVCCTL_App_Notification+0x140>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80010c2:	4b62      	ldr	r3, [pc, #392]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 80010c4:	2206      	movs	r2, #6
 80010c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80010ca:	e003      	b.n	80010d4 <SVCCTL_App_Notification+0x148>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80010cc:	4b5f      	ldr	r3, [pc, #380]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 80010ce:	2205      	movs	r2, #5
 80010d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	4b5b      	ldr	r3, [pc, #364]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 80010de:	82da      	strh	r2, [r3, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 80010e0:	4b5c      	ldr	r3, [pc, #368]	; (8001254 <SVCCTL_App_Notification+0x2c8>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80010e6:	4b59      	ldr	r3, [pc, #356]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 80010e8:	8ada      	ldrh	r2, [r3, #22]
 80010ea:	4b5a      	ldr	r3, [pc, #360]	; (8001254 <SVCCTL_App_Notification+0x2c8>)
 80010ec:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 80010ee:	4859      	ldr	r0, [pc, #356]	; (8001254 <SVCCTL_App_Notification+0x2c8>)
 80010f0:	f000 fba6 	bl	8001840 <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 80010f4:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 80010f6:	e0a3      	b.n	8001240 <SVCCTL_App_Notification+0x2b4>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 80010f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010fa:	3302      	adds	r3, #2
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blue_evt->ecode)
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	b29b      	uxth	r3, r3
 8001104:	f240 4205 	movw	r2, #1029	; 0x405
 8001108:	4293      	cmp	r3, r2
 800110a:	d04a      	beq.n	80011a2 <SVCCTL_App_Notification+0x216>
 800110c:	f240 4205 	movw	r2, #1029	; 0x405
 8001110:	4293      	cmp	r3, r2
 8001112:	dc18      	bgt.n	8001146 <SVCCTL_App_Notification+0x1ba>
 8001114:	f240 4202 	movw	r2, #1026	; 0x402
 8001118:	4293      	cmp	r3, r2
 800111a:	d033      	beq.n	8001184 <SVCCTL_App_Notification+0x1f8>
 800111c:	f240 4202 	movw	r2, #1026	; 0x402
 8001120:	4293      	cmp	r3, r2
 8001122:	dc07      	bgt.n	8001134 <SVCCTL_App_Notification+0x1a8>
 8001124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001128:	d028      	beq.n	800117c <SVCCTL_App_Notification+0x1f0>
 800112a:	f240 4201 	movw	r2, #1025	; 0x401
 800112e:	4293      	cmp	r3, r2
 8001130:	d069      	beq.n	8001206 <SVCCTL_App_Notification+0x27a>
      break; /* EVT_VENDOR */
 8001132:	e084      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
      switch (blue_evt->ecode)
 8001134:	f240 4203 	movw	r2, #1027	; 0x403
 8001138:	4293      	cmp	r3, r2
 800113a:	d02a      	beq.n	8001192 <SVCCTL_App_Notification+0x206>
 800113c:	f240 4204 	movw	r2, #1028	; 0x404
 8001140:	4293      	cmp	r3, r2
 8001142:	d02a      	beq.n	800119a <SVCCTL_App_Notification+0x20e>
      break; /* EVT_VENDOR */
 8001144:	e07b      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
      switch (blue_evt->ecode)
 8001146:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800114a:	d03a      	beq.n	80011c2 <SVCCTL_App_Notification+0x236>
 800114c:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8001150:	dc08      	bgt.n	8001164 <SVCCTL_App_Notification+0x1d8>
 8001152:	f240 4206 	movw	r2, #1030	; 0x406
 8001156:	4293      	cmp	r3, r2
 8001158:	d02f      	beq.n	80011ba <SVCCTL_App_Notification+0x22e>
 800115a:	f240 4207 	movw	r2, #1031	; 0x407
 800115e:	4293      	cmp	r3, r2
 8001160:	d069      	beq.n	8001236 <SVCCTL_App_Notification+0x2aa>
      break; /* EVT_VENDOR */
 8001162:	e06c      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
      switch (blue_evt->ecode)
 8001164:	f240 420a 	movw	r2, #1034	; 0x40a
 8001168:	4293      	cmp	r3, r2
 800116a:	d02e      	beq.n	80011ca <SVCCTL_App_Notification+0x23e>
 800116c:	f240 420a 	movw	r2, #1034	; 0x40a
 8001170:	4293      	cmp	r3, r2
 8001172:	db2e      	blt.n	80011d2 <SVCCTL_App_Notification+0x246>
 8001174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001178:	d05a      	beq.n	8001230 <SVCCTL_App_Notification+0x2a4>
      break; /* EVT_VENDOR */
 800117a:	e060      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_LIMITED_DISCOVERABLE \n");
 800117c:	483e      	ldr	r0, [pc, #248]	; (8001278 <SVCCTL_App_Notification+0x2ec>)
 800117e:	f012 fcd1 	bl	8013b24 <puts>
          break; /* EVT_BLUE_GAP_LIMITED_DISCOVERABLE */
 8001182:	e05c      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PASS_KEY_REQUEST \n");
 8001184:	483d      	ldr	r0, [pc, #244]	; (800127c <SVCCTL_App_Notification+0x2f0>)
 8001186:	f012 fccd 	bl	8013b24 <puts>
        APP_DBG_MSG("\r\n\r** aci_gap_pass_key_resp \n");
 800118a:	483d      	ldr	r0, [pc, #244]	; (8001280 <SVCCTL_App_Notification+0x2f4>)
 800118c:	f012 fcca 	bl	8013b24 <puts>
          break; /* EVT_BLUE_GAP_PASS_KEY_REQUEST */
 8001190:	e055      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_AUTHORIZATION_REQUEST \n");
 8001192:	483c      	ldr	r0, [pc, #240]	; (8001284 <SVCCTL_App_Notification+0x2f8>)
 8001194:	f012 fcc6 	bl	8013b24 <puts>
          break; /* EVT_BLUE_GAP_AUTHORIZATION_REQUEST */
 8001198:	e051      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_SLAVE_SECURITY_INITIATED \n");
 800119a:	483b      	ldr	r0, [pc, #236]	; (8001288 <SVCCTL_App_Notification+0x2fc>)
 800119c:	f012 fcc2 	bl	8013b24 <puts>
          break; /* EVT_BLUE_GAP_SLAVE_SECURITY_INITIATED */
 80011a0:	e04d      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_BOND_LOST \n");
 80011a2:	483a      	ldr	r0, [pc, #232]	; (800128c <SVCCTL_App_Notification+0x300>)
 80011a4:	f012 fcbe 	bl	8013b24 <puts>
          aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 80011a8:	4b28      	ldr	r3, [pc, #160]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 80011aa:	8adb      	ldrh	r3, [r3, #22]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f00b fc50 	bl	800ca52 <aci_gap_allow_rebond>
        APP_DBG_MSG("\r\n\r** Send allow rebond \n");
 80011b2:	4837      	ldr	r0, [pc, #220]	; (8001290 <SVCCTL_App_Notification+0x304>)
 80011b4:	f012 fcb6 	bl	8013b24 <puts>
          break; /* EVT_BLUE_GAP_BOND_LOST */
 80011b8:	e041      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_DEVICE_FOUND \n");
 80011ba:	4836      	ldr	r0, [pc, #216]	; (8001294 <SVCCTL_App_Notification+0x308>)
 80011bc:	f012 fcb2 	bl	8013b24 <puts>
          break; /* EVT_BLUE_GAP_DEVICE_FOUND */
 80011c0:	e03d      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
         APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_DEVICE_FOUND \n");
 80011c2:	4834      	ldr	r0, [pc, #208]	; (8001294 <SVCCTL_App_Notification+0x308>)
 80011c4:	f012 fcae 	bl	8013b24 <puts>
          break; /* EVT_BLUE_GAP_DEVICE_FOUND */
 80011c8:	e039      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
         APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_KEYPRESS_NOTIFICATION \n");
 80011ca:	4833      	ldr	r0, [pc, #204]	; (8001298 <SVCCTL_App_Notification+0x30c>)
 80011cc:	f012 fcaa 	bl	8013b24 <puts>
          break; /* EVT_BLUE_GAP_KEY_PRESS_NOTIFICATION */    
 80011d0:	e035      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(blue_evt->data))->Numeric_Value);
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	3302      	adds	r3, #2
          APP_DBG_MSG("numeric_value = %ld\n",
 80011d6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80011da:	4619      	mov	r1, r3
 80011dc:	482f      	ldr	r0, [pc, #188]	; (800129c <SVCCTL_App_Notification+0x310>)
 80011de:	f012 fc2d 	bl	8013a3c <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(blue_evt->data))->Numeric_Value);
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	3302      	adds	r3, #2
          APP_DBG_MSG("Hex_value = %lx\n",
 80011e6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80011ea:	4619      	mov	r1, r3
 80011ec:	482c      	ldr	r0, [pc, #176]	; (80012a0 <SVCCTL_App_Notification+0x314>)
 80011ee:	f012 fc25 	bl	8013a3c <iprintf>
          aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 1); /* CONFIRM_YES = 1 */
 80011f2:	4b16      	ldr	r3, [pc, #88]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 80011f4:	8adb      	ldrh	r3, [r3, #22]
 80011f6:	2101      	movs	r1, #1
 80011f8:	4618      	mov	r0, r3
 80011fa:	f00b fc74 	bl	800cae6 <aci_gap_numeric_comparison_value_confirm_yesno>
          APP_DBG_MSG("\r\n\r** aci_gap_numeric_comparison_value_confirm_yesno-->YES \n");
 80011fe:	4829      	ldr	r0, [pc, #164]	; (80012a4 <SVCCTL_App_Notification+0x318>)
 8001200:	f012 fc90 	bl	8013b24 <puts>
          break;
 8001204:	e01b      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blue_evt->data;
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001208:	3302      	adds	r3, #2
 800120a:	623b      	str	r3, [r7, #32]
            APP_DBG_MSG("BLE_CTRL_App_Notification: EVT_BLUE_GAP_PAIRING_CMPLT, pairing_complete->Status = %d\n",pairing_complete->Status);
 800120c:	6a3b      	ldr	r3, [r7, #32]
 800120e:	789b      	ldrb	r3, [r3, #2]
 8001210:	4619      	mov	r1, r3
 8001212:	4825      	ldr	r0, [pc, #148]	; (80012a8 <SVCCTL_App_Notification+0x31c>)
 8001214:	f012 fc12 	bl	8013a3c <iprintf>
            if (pairing_complete->Status == 0)
 8001218:	6a3b      	ldr	r3, [r7, #32]
 800121a:	789b      	ldrb	r3, [r3, #2]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d103      	bne.n	8001228 <SVCCTL_App_Notification+0x29c>
              APP_DBG_MSG("\r\n\r** Pairing OK \n");
 8001220:	4822      	ldr	r0, [pc, #136]	; (80012ac <SVCCTL_App_Notification+0x320>)
 8001222:	f012 fc7f 	bl	8013b24 <puts>
           break;    
 8001226:	e00a      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
              APP_DBG_MSG("\r\n\r** Pairing KO \n");
 8001228:	4821      	ldr	r0, [pc, #132]	; (80012b0 <SVCCTL_App_Notification+0x324>)
 800122a:	f012 fc7b 	bl	8013b24 <puts>
           break;    
 800122e:	e006      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
          mutex = 1;
 8001230:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <SVCCTL_App_Notification+0x328>)
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PROCEDURE_COMPLETE \n");
 8001236:	4820      	ldr	r0, [pc, #128]	; (80012b8 <SVCCTL_App_Notification+0x32c>)
 8001238:	f012 fc74 	bl	8013b24 <puts>
          break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800123c:	bf00      	nop
      break; /* EVT_VENDOR */
 800123e:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8001240:	2301      	movs	r3, #1
}
 8001242:	4618      	mov	r0, r3
 8001244:	3730      	adds	r7, #48	; 0x30
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000210 	.word	0x20000210
 8001250:	08015bcc 	.word	0x08015bcc
 8001254:	20005c34 	.word	0x20005c34
 8001258:	08015bf4 	.word	0x08015bf4
 800125c:	08015c20 	.word	0x08015c20
 8001260:	08015c3c 	.word	0x08015c3c
 8001264:	08015c60 	.word	0x08015c60
 8001268:	08015c88 	.word	0x08015c88
 800126c:	08015c9c 	.word	0x08015c9c
 8001270:	08015cb8 	.word	0x08015cb8
 8001274:	08015cd0 	.word	0x08015cd0
 8001278:	08015d04 	.word	0x08015d04
 800127c:	08015d30 	.word	0x08015d30
 8001280:	08015d58 	.word	0x08015d58
 8001284:	08015d78 	.word	0x08015d78
 8001288:	08015da4 	.word	0x08015da4
 800128c:	08015dd4 	.word	0x08015dd4
 8001290:	08015df4 	.word	0x08015df4
 8001294:	08015e10 	.word	0x08015e10
 8001298:	08015e34 	.word	0x08015e34
 800129c:	08015e60 	.word	0x08015e60
 80012a0:	08015e78 	.word	0x08015e78
 80012a4:	08015e8c 	.word	0x08015e8c
 80012a8:	08015ec8 	.word	0x08015ec8
 80012ac:	08015f20 	.word	0x08015f20
 80012b0:	08015f34 	.word	0x08015f34
 80012b4:	20005c3c 	.word	0x20005c3c
 80012b8:	08015f48 	.word	0x08015f48

080012bc <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  MtxHciId = osMutexNew( NULL );
 80012c2:	2000      	movs	r0, #0
 80012c4:	f00d feb4 	bl	800f030 <osMutexNew>
 80012c8:	4602      	mov	r2, r0
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <Ble_Tl_Init+0x3c>)
 80012cc:	601a      	str	r2, [r3, #0]
  SemHciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	2001      	movs	r0, #1
 80012d4:	f00d fff4 	bl	800f2c0 <osSemaphoreNew>
 80012d8:	4602      	mov	r2, r0
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <Ble_Tl_Init+0x40>)
 80012dc:	601a      	str	r2, [r3, #0]

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <Ble_Tl_Init+0x44>)
 80012e0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <Ble_Tl_Init+0x48>)
 80012e4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80012e6:	463b      	mov	r3, r7
 80012e8:	4619      	mov	r1, r3
 80012ea:	4807      	ldr	r0, [pc, #28]	; (8001308 <Ble_Tl_Init+0x4c>)
 80012ec:	f00c f898 	bl	800d420 <hci_init>

  return;
 80012f0:	bf00      	nop
}
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20005c40 	.word	0x20005c40
 80012fc:	20005c2c 	.word	0x20005c2c
 8001300:	20030028 	.word	0x20030028
 8001304:	08001791 	.word	0x08001791
 8001308:	08001759 	.word	0x08001759

0800130c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 800130c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130e:	b08f      	sub	sp, #60	; 0x3c
 8001310:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8001312:	f44f 7350 	mov.w	r3, #832	; 0x340
 8001316:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8001318:	f00b ff41 	bl	800d19e <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800131c:	f000 f978 	bl	8001610 <BleGetBdAddress>
 8001320:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8001322:	69fa      	ldr	r2, [r7, #28]
 8001324:	2106      	movs	r1, #6
 8001326:	2000      	movs	r0, #0
 8001328:	f00b fe79 	bl	800d01e <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	795a      	ldrb	r2, [r3, #5]
 8001330:	4b5c      	ldr	r3, [pc, #368]	; (80014a4 <Ble_Hci_Gap_Gatt_Init+0x198>)
 8001332:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	791a      	ldrb	r2, [r3, #4]
 8001338:	4b5a      	ldr	r3, [pc, #360]	; (80014a4 <Ble_Hci_Gap_Gatt_Init+0x198>)
 800133a:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	78da      	ldrb	r2, [r3, #3]
 8001340:	4b58      	ldr	r3, [pc, #352]	; (80014a4 <Ble_Hci_Gap_Gatt_Init+0x198>)
 8001342:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	789a      	ldrb	r2, [r3, #2]
 8001348:	4b56      	ldr	r3, [pc, #344]	; (80014a4 <Ble_Hci_Gap_Gatt_Init+0x198>)
 800134a:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	785a      	ldrb	r2, [r3, #1]
 8001350:	4b54      	ldr	r3, [pc, #336]	; (80014a4 <Ble_Hci_Gap_Gatt_Init+0x198>)
 8001352:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	781a      	ldrb	r2, [r3, #0]
 8001358:	4b52      	ldr	r3, [pc, #328]	; (80014a4 <Ble_Hci_Gap_Gatt_Init+0x198>)
 800135a:	735a      	strb	r2, [r3, #13]

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET,
 800135c:	4a52      	ldr	r2, [pc, #328]	; (80014a8 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800135e:	2110      	movs	r1, #16
 8001360:	2018      	movs	r0, #24
 8001362:	f00b fe5c 	bl	800d01e <aci_hal_write_config_data>
                            (uint8_t*) BLE_CFG_IR_VALUE);

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET,
 8001366:	4a51      	ldr	r2, [pc, #324]	; (80014ac <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8001368:	2110      	movs	r1, #16
 800136a:	2008      	movs	r0, #8
 800136c:	f00b fe57 	bl	800d01e <aci_hal_write_config_data>
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8001370:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8001374:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8001376:	f7ff fd6f 	bl	8000e58 <LL_FLASH_GetUDN>
 800137a:	4603      	mov	r3, r0
 800137c:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	461a      	mov	r2, r3
 8001382:	2106      	movs	r1, #6
 8001384:	202e      	movs	r0, #46	; 0x2e
 8001386:	f00b fe4a 	bl	800d01e <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800138a:	4a47      	ldr	r2, [pc, #284]	; (80014a8 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800138c:	2110      	movs	r1, #16
 800138e:	2018      	movs	r0, #24
 8001390:	f00b fe45 	bl	800d01e <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8001394:	4a45      	ldr	r2, [pc, #276]	; (80014ac <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8001396:	2110      	movs	r1, #16
 8001398:	2008      	movs	r0, #8
 800139a:	f00b fe40 	bl	800d01e <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800139e:	2118      	movs	r1, #24
 80013a0:	2001      	movs	r0, #1
 80013a2:	f00b fea5 	bl	800d0f0 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 80013a6:	f00b fbf5 	bl	800cb94 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80013ae:	7efb      	ldrb	r3, [r7, #27]
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 80013b6:	7efb      	ldrb	r3, [r7, #27]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d024      	beq.n	8001406 <Ble_Hci_Gap_Gatt_Init+0xfa>
  {
    const char *name = "DRAMSAY";
 80013bc:	4b3c      	ldr	r3, [pc, #240]	; (80014b0 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 80013be:	617b      	str	r3, [r7, #20]
    aci_gap_init(role, 0,
 80013c0:	f107 0212 	add.w	r2, r7, #18
 80013c4:	7ef8      	ldrb	r0, [r7, #27]
 80013c6:	f107 030e 	add.w	r3, r7, #14
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	4613      	mov	r3, r2
 80013d4:	2207      	movs	r2, #7
 80013d6:	2100      	movs	r1, #0
 80013d8:	f00b fa30 	bl	800c83c <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 80013dc:	8a7c      	ldrh	r4, [r7, #18]
 80013de:	8a3d      	ldrh	r5, [r7, #16]
 80013e0:	6978      	ldr	r0, [r7, #20]
 80013e2:	f7fe fecd 	bl	8000180 <strlen>
 80013e6:	4603      	mov	r3, r0
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	4613      	mov	r3, r2
 80013f0:	2200      	movs	r2, #0
 80013f2:	4629      	mov	r1, r5
 80013f4:	4620      	mov	r0, r4
 80013f6:	f00b fd8b 	bl	800cf10 <aci_gatt_update_char_value>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d002      	beq.n	8001406 <Ble_Hci_Gap_Gatt_Init+0xfa>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
 8001400:	482c      	ldr	r0, [pc, #176]	; (80014b4 <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 8001402:	f012 fb8f 	bl	8013b24 <puts>
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8001406:	8a78      	ldrh	r0, [r7, #18]
 8001408:	89f9      	ldrh	r1, [r7, #14]
 800140a:	463b      	mov	r3, r7
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2302      	movs	r3, #2
 8001410:	2200      	movs	r2, #0
 8001412:	f00b fd7d 	bl	800cf10 <aci_gatt_update_char_value>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d002      	beq.n	8001422 <Ble_Hci_Gap_Gatt_Init+0x116>
                                gap_appearance_char_handle,
                                0,
                                2,
                                (uint8_t *)&appearance))
  {
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
 800141c:	4826      	ldr	r0, [pc, #152]	; (80014b8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800141e:	f012 fb81 	bl	8013b24 <puts>
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8001422:	2202      	movs	r2, #2
 8001424:	2102      	movs	r1, #2
 8001426:	2000      	movs	r0, #0
 8001428:	f00b ff45 	bl	800d2b6 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800142c:	4b23      	ldr	r3, [pc, #140]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800142e:	2201      	movs	r2, #1
 8001430:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8001432:	4b22      	ldr	r3, [pc, #136]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f00b f90e 	bl	800c658 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800143e:	2201      	movs	r2, #1
 8001440:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8001442:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001444:	2208      	movs	r2, #8
 8001446:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8001448:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800144a:	2210      	movs	r2, #16
 800144c:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800144e:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001450:	2200      	movs	r2, #0
 8001452:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8001454:	4b19      	ldr	r3, [pc, #100]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001456:	4a1a      	ldr	r2, [pc, #104]	; (80014c0 <Ble_Hci_Gap_Gatt_Init+0x1b4>)
 8001458:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800145a:	4b18      	ldr	r3, [pc, #96]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800145c:	2201      	movs	r2, #1
 800145e:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8001460:	4b16      	ldr	r3, [pc, #88]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001462:	789d      	ldrb	r5, [r3, #2]
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001466:	785e      	ldrb	r6, [r3, #1]
 8001468:	4b14      	ldr	r3, [pc, #80]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800146a:	791b      	ldrb	r3, [r3, #4]
 800146c:	4a13      	ldr	r2, [pc, #76]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800146e:	7952      	ldrb	r2, [r2, #5]
 8001470:	4912      	ldr	r1, [pc, #72]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001472:	78c9      	ldrb	r1, [r1, #3]
 8001474:	4811      	ldr	r0, [pc, #68]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001476:	6880      	ldr	r0, [r0, #8]
 8001478:	2400      	movs	r4, #0
 800147a:	9404      	str	r4, [sp, #16]
 800147c:	9003      	str	r0, [sp, #12]
 800147e:	9102      	str	r1, [sp, #8]
 8001480:	9201      	str	r2, [sp, #4]
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	2300      	movs	r3, #0
 8001486:	2201      	movs	r2, #1
 8001488:	4631      	mov	r1, r6
 800148a:	4628      	mov	r0, r5
 800148c:	f00b f92e 	bl	800c6ec <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8001490:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001492:	789b      	ldrb	r3, [r3, #2]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <Ble_Hci_Gap_Gatt_Init+0x190>
   {
     aci_gap_configure_whitelist();
 8001498:	f00b fab7 	bl	800ca0a <aci_gap_configure_whitelist>
   }
}
 800149c:	bf00      	nop
 800149e:	3724      	adds	r7, #36	; 0x24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014a4:	20000004 	.word	0x20000004
 80014a8:	08016420 	.word	0x08016420
 80014ac:	08016430 	.word	0x08016430
 80014b0:	08015f70 	.word	0x08015f70
 80014b4:	08015f78 	.word	0x08015f78
 80014b8:	08015fa8 	.word	0x08015fa8
 80014bc:	20000210 	.word	0x20000210
 80014c0:	0001b207 	.word	0x0001b207

080014c4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08c      	sub	sp, #48	; 0x30
 80014c8:	af08      	add	r7, sp, #32
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80014ce:	2342      	movs	r3, #66	; 0x42
 80014d0:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d106      	bne.n	80014e6 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 80014d8:	4b3f      	ldr	r3, [pc, #252]	; (80015d8 <Adv_Request+0x114>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 80014de:	4b3f      	ldr	r3, [pc, #252]	; (80015dc <Adv_Request+0x118>)
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	81bb      	strh	r3, [r7, #12]
 80014e4:	e005      	b.n	80014f2 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 80014e6:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80014ea:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 80014ec:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80014f0:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80014f2:	4b3b      	ldr	r3, [pc, #236]	; (80015e0 <Adv_Request+0x11c>)
 80014f4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80014f8:	4618      	mov	r0, r3
 80014fa:	f002 f9db 	bl	80038b4 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
 80014fe:	4b38      	ldr	r3, [pc, #224]	; (80015e0 <Adv_Request+0x11c>)
 8001500:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001504:	4619      	mov	r1, r3
 8001506:	4837      	ldr	r0, [pc, #220]	; (80015e4 <Adv_Request+0x120>)
 8001508:	f012 fa98 	bl	8013a3c <iprintf>

    if ((New_Status == APP_BLE_LP_ADV)
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d119      	bne.n	8001546 <Adv_Request+0x82>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8001512:	4b33      	ldr	r3, [pc, #204]	; (80015e0 <Adv_Request+0x11c>)
 8001514:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001518:	2b01      	cmp	r3, #1
 800151a:	d004      	beq.n	8001526 <Adv_Request+0x62>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800151c:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <Adv_Request+0x11c>)
 800151e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001522:	2b02      	cmp	r3, #2
 8001524:	d10f      	bne.n	8001546 <Adv_Request+0x82>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 8001526:	f00a ff95 	bl	800c454 <aci_gap_set_non_discoverable>
 800152a:	4603      	mov	r3, r0
 800152c:	72fb      	strb	r3, [r7, #11]
      if (ret == BLE_STATUS_SUCCESS)
 800152e:	7afb      	ldrb	r3, [r7, #11]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d103      	bne.n	800153c <Adv_Request+0x78>
      {
        APP_DBG_MSG("Successfully Stopped Advertising \n");
 8001534:	482c      	ldr	r0, [pc, #176]	; (80015e8 <Adv_Request+0x124>)
 8001536:	f012 faf5 	bl	8013b24 <puts>
 800153a:	e004      	b.n	8001546 <Adv_Request+0x82>
      }
      else
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
 800153c:	7afb      	ldrb	r3, [r7, #11]
 800153e:	4619      	mov	r1, r3
 8001540:	482a      	ldr	r0, [pc, #168]	; (80015ec <Adv_Request+0x128>)
 8001542:	f012 fa7b 	bl	8013a3c <iprintf>
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 8001546:	4a26      	ldr	r2, [pc, #152]	; (80015e0 <Adv_Request+0x11c>)
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800154e:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <Adv_Request+0x11c>)
 8001550:	7e1b      	ldrb	r3, [r3, #24]
 8001552:	89b8      	ldrh	r0, [r7, #12]
 8001554:	89f9      	ldrh	r1, [r7, #14]
 8001556:	2200      	movs	r2, #0
 8001558:	9206      	str	r2, [sp, #24]
 800155a:	2200      	movs	r2, #0
 800155c:	9205      	str	r2, [sp, #20]
 800155e:	4a24      	ldr	r2, [pc, #144]	; (80015f0 <Adv_Request+0x12c>)
 8001560:	9204      	str	r2, [sp, #16]
 8001562:	9303      	str	r3, [sp, #12]
 8001564:	4b23      	ldr	r3, [pc, #140]	; (80015f4 <Adv_Request+0x130>)
 8001566:	9302      	str	r3, [sp, #8]
 8001568:	2308      	movs	r3, #8
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	2300      	movs	r3, #0
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2300      	movs	r3, #0
 8001572:	4602      	mov	r2, r0
 8001574:	2000      	movs	r0, #0
 8001576:	f00a ff91 	bl	800c49c <aci_gap_set_discoverable>
 800157a:	4603      	mov	r3, r0
 800157c:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800157e:	491e      	ldr	r1, [pc, #120]	; (80015f8 <Adv_Request+0x134>)
 8001580:	200e      	movs	r0, #14
 8001582:	f00b f9e6 	bl	800c952 <aci_gap_update_adv_data>
 8001586:	4603      	mov	r3, r0
 8001588:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 800158a:	7afb      	ldrb	r3, [r7, #11]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d111      	bne.n	80015b4 <Adv_Request+0xf0>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d10a      	bne.n	80015ac <Adv_Request+0xe8>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 8001596:	4819      	ldr	r0, [pc, #100]	; (80015fc <Adv_Request+0x138>)
 8001598:	f012 fac4 	bl	8013b24 <puts>
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800159c:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <Adv_Request+0x11c>)
 800159e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80015a2:	4917      	ldr	r1, [pc, #92]	; (8001600 <Adv_Request+0x13c>)
 80015a4:	4618      	mov	r0, r3
 80015a6:	f002 fa0f 	bl	80039c8 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 80015aa:	e012      	b.n	80015d2 <Adv_Request+0x10e>
        APP_DBG_MSG("Successfully Start Low Power Advertising \n");
 80015ac:	4815      	ldr	r0, [pc, #84]	; (8001604 <Adv_Request+0x140>)
 80015ae:	f012 fab9 	bl	8013b24 <puts>
  return;
 80015b2:	e00e      	b.n	80015d2 <Adv_Request+0x10e>
      if (New_Status == APP_BLE_FAST_ADV)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d105      	bne.n	80015c6 <Adv_Request+0x102>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 80015ba:	7afb      	ldrb	r3, [r7, #11]
 80015bc:	4619      	mov	r1, r3
 80015be:	4812      	ldr	r0, [pc, #72]	; (8001608 <Adv_Request+0x144>)
 80015c0:	f012 fa3c 	bl	8013a3c <iprintf>
  return;
 80015c4:	e005      	b.n	80015d2 <Adv_Request+0x10e>
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
 80015c6:	7afb      	ldrb	r3, [r7, #11]
 80015c8:	4619      	mov	r1, r3
 80015ca:	4810      	ldr	r0, [pc, #64]	; (800160c <Adv_Request+0x148>)
 80015cc:	f012 fa36 	bl	8013a3c <iprintf>
  return;
 80015d0:	bf00      	nop
}
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000294 	.word	0x20000294
 80015dc:	20000296 	.word	0x20000296
 80015e0:	20000210 	.word	0x20000210
 80015e4:	08015fd8 	.word	0x08015fd8
 80015e8:	08015ff4 	.word	0x08015ff4
 80015ec:	08016018 	.word	0x08016018
 80015f0:	20000229 	.word	0x20000229
 80015f4:	08016440 	.word	0x08016440
 80015f8:	20000004 	.word	0x20000004
 80015fc:	08016040 	.word	0x08016040
 8001600:	0001e046 	.word	0x0001e046
 8001604:	08016068 	.word	0x08016068
 8001608:	08016094 	.word	0x08016094
 800160c:	080160c4 	.word	0x080160c4

08001610 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8001616:	f7ff fc1f 	bl	8000e58 <LL_FLASH_GetUDN>
 800161a:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001622:	d023      	beq.n	800166c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8001624:	f7ff fc30 	bl	8000e88 <LL_FLASH_GetSTCompanyID>
 8001628:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800162a:	f7ff fc21 	bl	8000e70 <LL_FLASH_GetDeviceID>
 800162e:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <BleGetBdAddress+0x80>)
 8001636:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	0a1b      	lsrs	r3, r3, #8
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4b14      	ldr	r3, [pc, #80]	; (8001690 <BleGetBdAddress+0x80>)
 8001640:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	0c1b      	lsrs	r3, r3, #16
 8001646:	b2da      	uxtb	r2, r3
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <BleGetBdAddress+0x80>)
 800164a:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	b2da      	uxtb	r2, r3
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <BleGetBdAddress+0x80>)
 8001652:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <BleGetBdAddress+0x80>)
 800165a:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	0a1b      	lsrs	r3, r3, #8
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <BleGetBdAddress+0x80>)
 8001664:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <BleGetBdAddress+0x80>)
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	e00b      	b.n	8001684 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800166c:	2000      	movs	r0, #0
 800166e:	f00c fdc5 	bl	800e1fc <OTP_Read>
 8001672:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d002      	beq.n	8001680 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	e001      	b.n	8001684 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <BleGetBdAddress+0x84>)
 8001682:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 8001684:	697b      	ldr	r3, [r7, #20]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200003d4 	.word	0x200003d4
 8001694:	08016418 	.word	0x08016418

08001698 <Adv_Mgr>:
  return;
}
*/

static void Adv_Mgr( void )
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as an aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  osThreadFlagsSet( AdvUpdateProcessId, 1 );
 800169c:	4b03      	ldr	r3, [pc, #12]	; (80016ac <Adv_Mgr+0x14>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2101      	movs	r1, #1
 80016a2:	4618      	mov	r0, r3
 80016a4:	f00d fba0 	bl	800ede8 <osThreadFlagsSet>

  return;
 80016a8:	bf00      	nop
}
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20005c48 	.word	0x20005c48

080016b0 <AdvUpdateProcess>:

static void AdvUpdateProcess(void *argument)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 80016b8:	f04f 32ff 	mov.w	r2, #4294967295
 80016bc:	2100      	movs	r1, #0
 80016be:	2001      	movs	r0, #1
 80016c0:	f00d fbf4 	bl	800eeac <osThreadFlagsWait>
    Adv_Update( );
 80016c4:	f000 f801 	bl	80016ca <Adv_Update>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 80016c8:	e7f6      	b.n	80016b8 <AdvUpdateProcess+0x8>

080016ca <Adv_Update>:
  }
}

static void Adv_Update( void )
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	af00      	add	r7, sp, #0
  Adv_Request(APP_BLE_LP_ADV);
 80016ce:	2002      	movs	r0, #2
 80016d0:	f7ff fef8 	bl	80014c4 <Adv_Request>

  return;
 80016d4:	bf00      	nop
}
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HciUserEvtProcess>:
  }
  return;
}

static void HciUserEvtProcess(void *argument)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
 80016e4:	2100      	movs	r1, #0
 80016e6:	2001      	movs	r0, #1
 80016e8:	f00d fbe0 	bl	800eeac <osThreadFlagsWait>
    hci_user_evt_proc( );
 80016ec:	f00b feb4 	bl	800d458 <hci_user_evt_proc>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 80016f0:	e7f6      	b.n	80016e0 <HciUserEvtProcess+0x8>
	...

080016f4 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet( HciUserEvtProcessId, 1 );
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <hci_notify_asynch_evt+0x1c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2101      	movs	r1, #1
 8001702:	4618      	mov	r0, r3
 8001704:	f00d fb70 	bl	800ede8 <osThreadFlagsSet>
  return;
 8001708:	bf00      	nop
}
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20005c30 	.word	0x20005c30

08001714 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemHciId );
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <hci_cmd_resp_release+0x1c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f00d fed1 	bl	800f4c8 <osSemaphoreRelease>
  return;
 8001726:	bf00      	nop
}
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20005c2c 	.word	0x20005c2c

08001734 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemHciId, osWaitForever );
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <hci_cmd_resp_wait+0x20>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f04f 31ff 	mov.w	r1, #4294967295
 8001744:	4618      	mov	r0, r3
 8001746:	f00d fe59 	bl	800f3fc <osSemaphoreAcquire>
  return;
 800174a:	bf00      	nop
}
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20005c2c 	.word	0x20005c2c

08001758 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	3308      	adds	r3, #8
 800176a:	4618      	mov	r0, r3
 800176c:	f00a fe20 	bl	800c3b0 <SVCCTL_UserEvtRx>
 8001770:	4603      	mov	r3, r0
 8001772:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8001774:	7afb      	ldrb	r3, [r7, #11]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2201      	movs	r2, #1
 800177e:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8001780:	e002      	b.n	8001788 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
}
 8001788:	bf00      	nop
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
  switch (status)
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d002      	beq.n	80017a6 <BLE_StatusNot+0x16>
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d008      	beq.n	80017b6 <BLE_StatusNot+0x26>
    case HCI_TL_CmdAvailable:
      osMutexRelease( MtxHciId );
      break;

    default:
      break;
 80017a4:	e00d      	b.n	80017c2 <BLE_StatusNot+0x32>
      osMutexAcquire( MtxHciId, osWaitForever );
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <BLE_StatusNot+0x3c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f04f 31ff 	mov.w	r1, #4294967295
 80017ae:	4618      	mov	r0, r3
 80017b0:	f00d fcd8 	bl	800f164 <osMutexAcquire>
      break;
 80017b4:	e005      	b.n	80017c2 <BLE_StatusNot+0x32>
      osMutexRelease( MtxHciId );
 80017b6:	4b05      	ldr	r3, [pc, #20]	; (80017cc <BLE_StatusNot+0x3c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f00d fd30 	bl	800f220 <osMutexRelease>
      break;
 80017c0:	bf00      	nop
  }
  return;
 80017c2:	bf00      	nop
}
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20005c40 	.word	0x20005c40

080017d0 <P2PS_STM_App_Notification>:
/* Private function prototypes -----------------------------------------------*/
void P2PS_APP_Context_Init(void);

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  switch(pNotification->P2P_Evt_Opcode)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d00e      	beq.n	80017fe <P2PS_STM_App_Notification+0x2e>
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d016      	beq.n	8001812 <P2PS_STM_App_Notification+0x42>
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d000      	beq.n	80017ea <P2PS_STM_App_Notification+0x1a>
    case P2PS_STM_WRITE_EVT:
		osMessageQueuePut(bleRXqueueHandle, &(pNotification->DataTransfered), 0, 0);
      break;

    default:
      break;
 80017e8:	e01c      	b.n	8001824 <P2PS_STM_App_Notification+0x54>
      P2P_Server_App_Context.Notification_Status = 1;
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <P2PS_STM_App_Notification+0x5c>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n");
 80017f0:	480f      	ldr	r0, [pc, #60]	; (8001830 <P2PS_STM_App_Notification+0x60>)
 80017f2:	f012 f997 	bl	8013b24 <puts>
      APP_DBG_MSG(" \n\r");
 80017f6:	480f      	ldr	r0, [pc, #60]	; (8001834 <P2PS_STM_App_Notification+0x64>)
 80017f8:	f012 f920 	bl	8013a3c <iprintf>
      break;
 80017fc:	e012      	b.n	8001824 <P2PS_STM_App_Notification+0x54>
      P2P_Server_App_Context.Notification_Status = 0;
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <P2PS_STM_App_Notification+0x5c>)
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 8001804:	480c      	ldr	r0, [pc, #48]	; (8001838 <P2PS_STM_App_Notification+0x68>)
 8001806:	f012 f98d 	bl	8013b24 <puts>
      APP_DBG_MSG(" \n\r");
 800180a:	480a      	ldr	r0, [pc, #40]	; (8001834 <P2PS_STM_App_Notification+0x64>)
 800180c:	f012 f916 	bl	8013a3c <iprintf>
      break;
 8001810:	e008      	b.n	8001824 <P2PS_STM_App_Notification+0x54>
		osMessageQueuePut(bleRXqueueHandle, &(pNotification->DataTransfered), 0, 0);
 8001812:	4b0a      	ldr	r3, [pc, #40]	; (800183c <P2PS_STM_App_Notification+0x6c>)
 8001814:	6818      	ldr	r0, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	1d19      	adds	r1, r3, #4
 800181a:	2300      	movs	r3, #0
 800181c:	2200      	movs	r2, #0
 800181e:	f00d ff31 	bl	800f684 <osMessageQueuePut>
      break;
 8001822:	bf00      	nop
  }
  return;
 8001824:	bf00      	nop
}
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000298 	.word	0x20000298
 8001830:	08016150 	.word	0x08016150
 8001834:	08016184 	.word	0x08016184
 8001838:	08016188 	.word	0x08016188
 800183c:	20005c38 	.word	0x20005c38

08001840 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  switch(pNotification->P2P_Evt_Opcode)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <P2PS_APP_Notification+0x1c>
 8001850:	2b01      	cmp	r3, #1
 8001852:	d000      	beq.n	8001856 <P2PS_APP_Notification+0x16>

    case PEER_DISCON_HANDLE_EVT :
       P2PS_APP_Context_Init();
       break;
    default:
      break;
 8001854:	e003      	b.n	800185e <P2PS_APP_Notification+0x1e>
       P2PS_APP_Context_Init();
 8001856:	f000 f813 	bl	8001880 <P2PS_APP_Context_Init>
       break;
 800185a:	e000      	b.n	800185e <P2PS_APP_Notification+0x1e>
    break;
 800185c:	bf00      	nop
  }
  return;
 800185e:	bf00      	nop
}
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  P2P_Server_App_Context.Notification_Status=0;
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <P2PS_APP_Init+0x14>)
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
  P2PS_APP_Context_Init();
 8001872:	f000 f805 	bl	8001880 <P2PS_APP_Context_Init>
  return;
 8001876:	bf00      	nop
}
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000298 	.word	0x20000298

08001880 <P2PS_APP_Context_Init>:

void  P2PS_APP_Context_Init(void)
{
 8001880:	b490      	push	{r4, r7}
 8001882:	af00      	add	r7, sp, #0
	  //init context on app init and on reconnect events
	  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 8001884:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <P2PS_APP_Context_Init+0x40>)
 8001886:	2201      	movs	r2, #1
 8001888:	705a      	strb	r2, [r3, #1]
	  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 800188a:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <P2PS_APP_Context_Init+0x40>)
 800188c:	2200      	movs	r2, #0
 800188e:	709a      	strb	r2, [r3, #2]
	  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <P2PS_APP_Context_Init+0x40>)
 8001892:	2201      	movs	r2, #1
 8001894:	70da      	strb	r2, [r3, #3]
	  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <P2PS_APP_Context_Init+0x40>)
 8001898:	2200      	movs	r2, #0
 800189a:	711a      	strb	r2, [r3, #4]
	  P2P_Server_App_Context.OTATimestamp=0x0000000000000000;
 800189c:	4a08      	ldr	r2, [pc, #32]	; (80018c0 <P2PS_APP_Context_Init+0x40>)
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	f04f 0400 	mov.w	r4, #0
 80018a6:	e9c2 3402 	strd	r3, r4, [r2, #8]
	  P2P_Server_App_Context.OTA12HrFormat=0x00;
 80018aa:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <P2PS_APP_Context_Init+0x40>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	741a      	strb	r2, [r3, #16]
	  P2P_Server_App_Context.OTADaylightSavings=0x00;
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <P2PS_APP_Context_Init+0x40>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	745a      	strb	r2, [r3, #17]
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc90      	pop	{r4, r7}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000298 	.word	0x20000298

080018c4 <P2PS_Send_Data>:

  return;
}

void P2PS_Send_Data(uint16_t data)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08c      	sub	sp, #48	; 0x30
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	80fb      	strh	r3, [r7, #6]

   if(P2P_Server_App_Context.Notification_Status){
 80018ce:	4b30      	ldr	r3, [pc, #192]	; (8001990 <P2PS_Send_Data+0xcc>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d054      	beq.n	8001980 <P2PS_Send_Data+0xbc>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : SEND TIMESTAMPED DATA \n ");
 80018d6:	482f      	ldr	r0, [pc, #188]	; (8001994 <P2PS_Send_Data+0xd0>)
 80018d8:	f012 f8b0 	bl	8013a3c <iprintf>
    APP_DBG_MSG(" \n\r");
 80018dc:	482e      	ldr	r0, [pc, #184]	; (8001998 <P2PS_Send_Data+0xd4>)
 80018de:	f012 f8ad 	bl	8013a3c <iprintf>

    RTC_TimeTypeDef cTime;
	RTC_DateTypeDef cDate;

	osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 80018e2:	4b2e      	ldr	r3, [pc, #184]	; (800199c <P2PS_Send_Data+0xd8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f04f 31ff 	mov.w	r1, #4294967295
 80018ea:	4618      	mov	r0, r3
 80018ec:	f00d fc3a 	bl	800f164 <osMutexAcquire>
	HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BCD);
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	2201      	movs	r2, #1
 80018f6:	4619      	mov	r1, r3
 80018f8:	4829      	ldr	r0, [pc, #164]	; (80019a0 <P2PS_Send_Data+0xdc>)
 80018fa:	f007 feac 	bl	8009656 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BCD);
 80018fe:	f107 0318 	add.w	r3, r7, #24
 8001902:	2201      	movs	r2, #1
 8001904:	4619      	mov	r1, r3
 8001906:	4826      	ldr	r0, [pc, #152]	; (80019a0 <P2PS_Send_Data+0xdc>)
 8001908:	f007 ffaf 	bl	800986a <HAL_RTC_GetDate>
	osMutexRelease(rtcMutexHandle);
 800190c:	4b23      	ldr	r3, [pc, #140]	; (800199c <P2PS_Send_Data+0xd8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f00d fc85 	bl	800f220 <osMutexRelease>

	uint16_t sendval[5] = {0};
 8001916:	f107 030c 	add.w	r3, r7, #12
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	811a      	strh	r2, [r3, #8]

	sendval[4] = (cDate.WeekDay << (8*1)) | cDate.Month;
 8001922:	7e3b      	ldrb	r3, [r7, #24]
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	b21a      	sxth	r2, r3
 8001928:	7e7b      	ldrb	r3, [r7, #25]
 800192a:	b21b      	sxth	r3, r3
 800192c:	4313      	orrs	r3, r2
 800192e:	b21b      	sxth	r3, r3
 8001930:	b29b      	uxth	r3, r3
 8001932:	82bb      	strh	r3, [r7, #20]
	sendval[3] = (cDate.Date << (8*1)) | cDate.Year;
 8001934:	7ebb      	ldrb	r3, [r7, #26]
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	b21a      	sxth	r2, r3
 800193a:	7efb      	ldrb	r3, [r7, #27]
 800193c:	b21b      	sxth	r3, r3
 800193e:	4313      	orrs	r3, r2
 8001940:	b21b      	sxth	r3, r3
 8001942:	b29b      	uxth	r3, r3
 8001944:	827b      	strh	r3, [r7, #18]

	sendval[2] = (cTime.Hours << (8*1)) | cTime.Minutes;
 8001946:	7f3b      	ldrb	r3, [r7, #28]
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	b21a      	sxth	r2, r3
 800194c:	7f7b      	ldrb	r3, [r7, #29]
 800194e:	b21b      	sxth	r3, r3
 8001950:	4313      	orrs	r3, r2
 8001952:	b21b      	sxth	r3, r3
 8001954:	b29b      	uxth	r3, r3
 8001956:	823b      	strh	r3, [r7, #16]
	sendval[1] = (cTime.Seconds << (8*1)) | cTime.TimeFormat;
 8001958:	7fbb      	ldrb	r3, [r7, #30]
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	b21a      	sxth	r2, r3
 800195e:	7ffb      	ldrb	r3, [r7, #31]
 8001960:	b21b      	sxth	r3, r3
 8001962:	4313      	orrs	r3, r2
 8001964:	b21b      	sxth	r3, r3
 8001966:	b29b      	uxth	r3, r3
 8001968:	81fb      	strh	r3, [r7, #14]

	sendval[0] = data;
 800196a:	88fb      	ldrh	r3, [r7, #6]
 800196c:	81bb      	strh	r3, [r7, #12]

	P2PS_STM_App_Update_Int8(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&sendval, 10);
 800196e:	f107 030c 	add.w	r3, r7, #12
 8001972:	220a      	movs	r2, #10
 8001974:	4619      	mov	r1, r3
 8001976:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800197a:	f00c fb69 	bl	800e050 <P2PS_STM_App_Update_Int8>

   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
   }

  return;
 800197e:	e003      	b.n	8001988 <P2PS_Send_Data+0xc4>
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
 8001980:	4808      	ldr	r0, [pc, #32]	; (80019a4 <P2PS_Send_Data+0xe0>)
 8001982:	f012 f85b 	bl	8013a3c <iprintf>
  return;
 8001986:	bf00      	nop
}
 8001988:	3730      	adds	r7, #48	; 0x30
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000298 	.word	0x20000298
 8001994:	08016240 	.word	0x08016240
 8001998:	08016184 	.word	0x08016184
 800199c:	20005c44 	.word	0x20005c44
 80019a0:	20005e50 	.word	0x20005e50
 80019a4:	080161f4 	.word	0x080161f4

080019a8 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <LL_PWR_EnableBootC2+0x1c>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <LL_PWR_EnableBootC2+0x1c>)
 80019b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019b6:	60d3      	str	r3, [r2, #12]
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	58000400 	.word	0x58000400

080019c8 <LL_C2_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80019d2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80019d6:	4905      	ldr	r1, [pc, #20]	; (80019ec <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4313      	orrs	r3, r2
 80019dc:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	58000800 	.word	0x58000800

080019f0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80019fa:	6a1a      	ldr	r2, [r3, #32]
 80019fc:	4904      	ldr	r1, [pc, #16]	; (8001a10 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	620b      	str	r3, [r1, #32]
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	58000800 	.word	0x58000800

08001a14 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4013      	ands	r3, r2
 8001a36:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a38:	68fb      	ldr	r3, [r7, #12]
}
 8001a3a:	bf00      	nop
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b085      	sub	sp, #20
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8001a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a52:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001a56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8001a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a66:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a70:	68fb      	ldr	r3, [r7, #12]
}
 8001a72:	bf00      	nop
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	601a      	str	r2, [r3, #0]
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f043 0201 	orr.w	r2, r3, #1
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	601a      	str	r2, [r3, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	041b      	lsls	r3, r3, #16
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	605a      	str	r2, [r3, #4]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	041b      	lsls	r3, r3, #16
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	605a      	str	r2, [r3, #4]
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	605a      	str	r2, [r3, #4]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	609a      	str	r2, [r3, #8]
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	041a      	lsls	r2, r3, #16
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	609a      	str	r2, [r3, #8]
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68da      	ldr	r2, [r3, #12]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	4013      	ands	r3, r2
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d101      	bne.n	8001b82 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e000      	b.n	8001b84 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69da      	ldr	r2, [r3, #28]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d101      	bne.n	8001bac <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e000      	b.n	8001bae <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8001bc0:	2102      	movs	r1, #2
 8001bc2:	4819      	ldr	r0, [pc, #100]	; (8001c28 <HW_IPCC_Rx_Handler+0x6c>)
 8001bc4:	f7ff ffe4 	bl	8001b90 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d009      	beq.n	8001be2 <HW_IPCC_Rx_Handler+0x26>
 8001bce:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <HW_IPCC_Rx_Handler+0x6c>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8001bdc:	f000 f8ea 	bl	8001db4 <HW_IPCC_SYS_EvtHandler>
 8001be0:	e01f      	b.n	8001c22 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8001be2:	2101      	movs	r1, #1
 8001be4:	4810      	ldr	r0, [pc, #64]	; (8001c28 <HW_IPCC_Rx_Handler+0x6c>)
 8001be6:	f7ff ffd3 	bl	8001b90 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d008      	beq.n	8001c02 <HW_IPCC_Rx_Handler+0x46>
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <HW_IPCC_Rx_Handler+0x6c>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d102      	bne.n	8001c02 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8001bfc:	f000 f89e 	bl	8001d3c <HW_IPCC_BLE_EvtHandler>
 8001c00:	e00f      	b.n	8001c22 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8001c02:	2108      	movs	r1, #8
 8001c04:	4808      	ldr	r0, [pc, #32]	; (8001c28 <HW_IPCC_Rx_Handler+0x6c>)
 8001c06:	f7ff ffc3 	bl	8001b90 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d009      	beq.n	8001c24 <HW_IPCC_Rx_Handler+0x68>
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HW_IPCC_Rx_Handler+0x6c>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d002      	beq.n	8001c24 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8001c1e:	f000 f915 	bl	8001e4c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8001c22:	bf00      	nop
 8001c24:	bf00      	nop
}
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	58000c00 	.word	0x58000c00

08001c2c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8001c30:	2102      	movs	r1, #2
 8001c32:	4822      	ldr	r0, [pc, #136]	; (8001cbc <HW_IPCC_Tx_Handler+0x90>)
 8001c34:	f7ff ff97 	bl	8001b66 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d109      	bne.n	8001c52 <HW_IPCC_Tx_Handler+0x26>
 8001c3e:	4b1f      	ldr	r3, [pc, #124]	; (8001cbc <HW_IPCC_Tx_Handler+0x90>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d002      	beq.n	8001c52 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8001c4c:	f000 f8a6 	bl	8001d9c <HW_IPCC_SYS_CmdEvtHandler>
 8001c50:	e031      	b.n	8001cb6 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8001c52:	2102      	movs	r1, #2
 8001c54:	4819      	ldr	r0, [pc, #100]	; (8001cbc <HW_IPCC_Tx_Handler+0x90>)
 8001c56:	f7ff ff86 	bl	8001b66 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d109      	bne.n	8001c74 <HW_IPCC_Tx_Handler+0x48>
 8001c60:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <HW_IPCC_Tx_Handler+0x90>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8001c6e:	f000 f895 	bl	8001d9c <HW_IPCC_SYS_CmdEvtHandler>
 8001c72:	e020      	b.n	8001cb6 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8001c74:	2108      	movs	r1, #8
 8001c76:	4811      	ldr	r0, [pc, #68]	; (8001cbc <HW_IPCC_Tx_Handler+0x90>)
 8001c78:	f7ff ff75 	bl	8001b66 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d109      	bne.n	8001c96 <HW_IPCC_Tx_Handler+0x6a>
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <HW_IPCC_Tx_Handler+0x90>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d002      	beq.n	8001c96 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8001c90:	f000 f8be 	bl	8001e10 <HW_IPCC_MM_FreeBufHandler>
 8001c94:	e00f      	b.n	8001cb6 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8001c96:	2120      	movs	r1, #32
 8001c98:	4808      	ldr	r0, [pc, #32]	; (8001cbc <HW_IPCC_Tx_Handler+0x90>)
 8001c9a:	f7ff ff64 	bl	8001b66 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d109      	bne.n	8001cb8 <HW_IPCC_Tx_Handler+0x8c>
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HW_IPCC_Tx_Handler+0x90>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d002      	beq.n	8001cb8 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8001cb2:	f000 f84f 	bl	8001d54 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8001cb6:	bf00      	nop
 8001cb8:	bf00      	nop
}
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	58000c00 	.word	0x58000c00

08001cc0 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8001cc4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001cc8:	f7ff febd 	bl	8001a46 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8001ccc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001cd0:	f7ff fe7a 	bl	80019c8 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8001cd4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001cd8:	f7ff fe8a 	bl	80019f0 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8001cdc:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8001cde:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8001ce0:	f7ff fe62 	bl	80019a8 <LL_PWR_EnableBootC2>

  return;
 8001ce4:	bf00      	nop
}
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8001cec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001cf0:	f7ff fe90 	bl	8001a14 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8001cf4:	4806      	ldr	r0, [pc, #24]	; (8001d10 <HW_IPCC_Init+0x28>)
 8001cf6:	f7ff fed2 	bl	8001a9e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8001cfa:	4805      	ldr	r0, [pc, #20]	; (8001d10 <HW_IPCC_Init+0x28>)
 8001cfc:	f7ff febf 	bl	8001a7e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001d00:	202c      	movs	r0, #44	; 0x2c
 8001d02:	f004 faa3 	bl	800624c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001d06:	202d      	movs	r0, #45	; 0x2d
 8001d08:	f004 faa0 	bl	800624c <HAL_NVIC_EnableIRQ>

  return;
 8001d0c:	bf00      	nop
}
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	58000c00 	.word	0x58000c00

08001d14 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8001d18:	2101      	movs	r1, #1
 8001d1a:	4802      	ldr	r0, [pc, #8]	; (8001d24 <HW_IPCC_BLE_Init+0x10>)
 8001d1c:	f7ff fef4 	bl	8001b08 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001d20:	bf00      	nop
}
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	58000c00 	.word	0x58000c00

08001d28 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	4802      	ldr	r0, [pc, #8]	; (8001d38 <HW_IPCC_BLE_SendCmd+0x10>)
 8001d30:	f7ff ff0a 	bl	8001b48 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8001d34:	bf00      	nop
}
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	58000c00 	.word	0x58000c00

08001d3c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8001d40:	f00b fec8 	bl	800dad4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8001d44:	2101      	movs	r1, #1
 8001d46:	4802      	ldr	r0, [pc, #8]	; (8001d50 <HW_IPCC_BLE_EvtHandler+0x14>)
 8001d48:	f7ff fef0 	bl	8001b2c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001d4c:	bf00      	nop
}
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	58000c00 	.word	0x58000c00

08001d54 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8001d58:	2120      	movs	r1, #32
 8001d5a:	4803      	ldr	r0, [pc, #12]	; (8001d68 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8001d5c:	f7ff fec2 	bl	8001ae4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8001d60:	f00b fee8 	bl	800db34 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8001d64:	bf00      	nop
}
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	58000c00 	.word	0x58000c00

08001d6c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001d70:	2102      	movs	r1, #2
 8001d72:	4802      	ldr	r0, [pc, #8]	; (8001d7c <HW_IPCC_SYS_Init+0x10>)
 8001d74:	f7ff fec8 	bl	8001b08 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001d78:	bf00      	nop
}
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	58000c00 	.word	0x58000c00

08001d80 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001d84:	2102      	movs	r1, #2
 8001d86:	4804      	ldr	r0, [pc, #16]	; (8001d98 <HW_IPCC_SYS_SendCmd+0x18>)
 8001d88:	f7ff fede 	bl	8001b48 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001d8c:	2102      	movs	r1, #2
 8001d8e:	4802      	ldr	r0, [pc, #8]	; (8001d98 <HW_IPCC_SYS_SendCmd+0x18>)
 8001d90:	f7ff fe95 	bl	8001abe <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001d94:	bf00      	nop
}
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	58000c00 	.word	0x58000c00

08001d9c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001da0:	2102      	movs	r1, #2
 8001da2:	4803      	ldr	r0, [pc, #12]	; (8001db0 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8001da4:	f7ff fe9e 	bl	8001ae4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8001da8:	f00b ff14 	bl	800dbd4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8001dac:	bf00      	nop
}
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	58000c00 	.word	0x58000c00

08001db4 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8001db8:	f00b ff22 	bl	800dc00 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001dbc:	2102      	movs	r1, #2
 8001dbe:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <HW_IPCC_SYS_EvtHandler+0x14>)
 8001dc0:	f7ff feb4 	bl	8001b2c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001dc4:	bf00      	nop
}
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	58000c00 	.word	0x58000c00

08001dcc <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8001dd4:	2108      	movs	r1, #8
 8001dd6:	480c      	ldr	r0, [pc, #48]	; (8001e08 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001dd8:	f7ff fec5 	bl	8001b66 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d007      	beq.n	8001df2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8001de2:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <HW_IPCC_MM_SendFreeBuf+0x40>)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001de8:	2108      	movs	r1, #8
 8001dea:	4807      	ldr	r0, [pc, #28]	; (8001e08 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001dec:	f7ff fe67 	bl	8001abe <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8001df0:	e006      	b.n	8001e00 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001df6:	2108      	movs	r1, #8
 8001df8:	4803      	ldr	r0, [pc, #12]	; (8001e08 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001dfa:	f7ff fea5 	bl	8001b48 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8001dfe:	bf00      	nop
}
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	58000c00 	.word	0x58000c00
 8001e0c:	200003dc 	.word	0x200003dc

08001e10 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001e14:	2108      	movs	r1, #8
 8001e16:	4806      	ldr	r0, [pc, #24]	; (8001e30 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001e18:	f7ff fe64 	bl	8001ae4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001e22:	2108      	movs	r1, #8
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001e26:	f7ff fe8f 	bl	8001b48 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8001e2a:	bf00      	nop
}
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	58000c00 	.word	0x58000c00
 8001e34:	200003dc 	.word	0x200003dc

08001e38 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001e3c:	2108      	movs	r1, #8
 8001e3e:	4802      	ldr	r0, [pc, #8]	; (8001e48 <HW_IPCC_TRACES_Init+0x10>)
 8001e40:	f7ff fe62 	bl	8001b08 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001e44:	bf00      	nop
}
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	58000c00 	.word	0x58000c00

08001e4c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8001e50:	f00b ff7e 	bl	800dd50 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001e54:	2108      	movs	r1, #8
 8001e56:	4802      	ldr	r0, [pc, #8]	; (8001e60 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8001e58:	f7ff fe68 	bl	8001b2c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001e5c:	bf00      	nop
}
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	58000c00 	.word	0x58000c00

08001e64 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001e64:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e66:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e68:	3304      	adds	r3, #4

08001e6a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e6a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e6c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001e6e:	d3f9      	bcc.n	8001e64 <CopyDataInit>
  bx lr
 8001e70:	4770      	bx	lr

08001e72 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001e72:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001e74:	3004      	adds	r0, #4

08001e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001e76:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001e78:	d3fb      	bcc.n	8001e72 <FillZerobss>
  bx lr
 8001e7a:	4770      	bx	lr

08001e7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e7c:	480c      	ldr	r0, [pc, #48]	; (8001eb0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001e7e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001e80:	f003 ffda 	bl	8005e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001e84:	480b      	ldr	r0, [pc, #44]	; (8001eb4 <LoopForever+0x8>)
 8001e86:	490c      	ldr	r1, [pc, #48]	; (8001eb8 <LoopForever+0xc>)
 8001e88:	4a0c      	ldr	r2, [pc, #48]	; (8001ebc <LoopForever+0x10>)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f7ff ffed 	bl	8001e6a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001e90:	480b      	ldr	r0, [pc, #44]	; (8001ec0 <LoopForever+0x14>)
 8001e92:	490c      	ldr	r1, [pc, #48]	; (8001ec4 <LoopForever+0x18>)
 8001e94:	2300      	movs	r3, #0
 8001e96:	f7ff ffee 	bl	8001e76 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001e9a:	480b      	ldr	r0, [pc, #44]	; (8001ec8 <LoopForever+0x1c>)
 8001e9c:	490b      	ldr	r1, [pc, #44]	; (8001ecc <LoopForever+0x20>)
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f7ff ffe9 	bl	8001e76 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ea4:	f011 f886 	bl	8012fb4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001ea8:	f002 f9f4 	bl	8004294 <main>

08001eac <LoopForever>:

LoopForever:
  b LoopForever
 8001eac:	e7fe      	b.n	8001eac <LoopForever>
 8001eae:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001eb0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001eb4:	20000004 	.word	0x20000004
 8001eb8:	200001f4 	.word	0x200001f4
 8001ebc:	08017b30 	.word	0x08017b30
  INIT_BSS _sbss, _ebss
 8001ec0:	200003b8 	.word	0x200003b8
 8001ec4:	200060b8 	.word	0x200060b8
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001ec8:	200301e0 	.word	0x200301e0
 8001ecc:	20030a57 	.word	0x20030a57

08001ed0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ed0:	e7fe      	b.n	8001ed0 <ADC1_IRQHandler>
	...

08001ed4 <LL_EXTI_EnableIT_32_63>:
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <LL_EXTI_EnableIT_32_63+0x24>)
 8001ede:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001ee2:	4905      	ldr	r1, [pc, #20]	; (8001ef8 <LL_EXTI_EnableIT_32_63+0x24>)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	58000800 	.word	0x58000800

08001efc <LL_AHB2_GRP1_EnableClock>:
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f20:	68fb      	ldr	r3, [r7, #12]
}
 8001f22:	bf00      	nop
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <LL_C2_AHB2_GRP1_EnableClock>:
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b085      	sub	sp, #20
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8001f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001f3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8001f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4013      	ands	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f58:	68fb      	ldr	r3, [r7, #12]
}
 8001f5a:	bf00      	nop
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001f6a:	f004 f833 	bl	8005fd4 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001f6e:	f004 f837 	bl	8005fe0 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8001f72:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001f76:	f7ff ffad 	bl	8001ed4 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8001f7a:	f00c f8c5 	bl	800e108 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8001f7e:	f000 f821 	bl	8001fc4 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8001f82:	f000 f8bf 	bl	8002104 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8001f86:	bf00      	nop
}
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8001f8c:	b5b0      	push	{r4, r5, r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001f92:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <APPD_EnableCPU2+0x34>)
 8001f94:	1d3c      	adds	r4, r7, #4
 8001f96:	461d      	mov	r5, r3
 8001f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fa0:	c403      	stmia	r4!, {r0, r1}
 8001fa2:	8022      	strh	r2, [r4, #0]
 8001fa4:	3402      	adds	r4, #2
 8001fa6:	0c13      	lsrs	r3, r2, #16
 8001fa8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8001faa:	f00b febf 	bl	800dd2c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f00b fa1e 	bl	800d3f2 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8001fb6:	bf00      	nop
}
 8001fb8:	3720      	adds	r7, #32
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	08016278 	.word	0x08016278

08001fc4 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8001fca:	1d3b      	adds	r3, r7, #4
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	77fb      	strb	r3, [r7, #31]
 8001fe8:	e033      	b.n	8002052 <APPD_SetCPU2GpioConfig+0x8e>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8001fea:	7ffb      	ldrb	r3, [r7, #31]
 8001fec:	4a42      	ldr	r2, [pc, #264]	; (80020f8 <APPD_SetCPU2GpioConfig+0x134>)
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	799b      	ldrb	r3, [r3, #6]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d028      	beq.n	800204a <APPD_SetCPU2GpioConfig+0x86>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8001ff8:	7ffb      	ldrb	r3, [r7, #31]
 8001ffa:	4a3f      	ldr	r2, [pc, #252]	; (80020f8 <APPD_SetCPU2GpioConfig+0x134>)
 8001ffc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002000:	4a3e      	ldr	r2, [pc, #248]	; (80020fc <APPD_SetCPU2GpioConfig+0x138>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d00f      	beq.n	8002026 <APPD_SetCPU2GpioConfig+0x62>
 8002006:	4a3e      	ldr	r2, [pc, #248]	; (8002100 <APPD_SetCPU2GpioConfig+0x13c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d015      	beq.n	8002038 <APPD_SetCPU2GpioConfig+0x74>
 800200c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002010:	d000      	beq.n	8002014 <APPD_SetCPU2GpioConfig+0x50>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8002012:	e01b      	b.n	800204c <APPD_SetCPU2GpioConfig+0x88>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8002014:	7ffb      	ldrb	r3, [r7, #31]
 8002016:	4a38      	ldr	r2, [pc, #224]	; (80020f8 <APPD_SetCPU2GpioConfig+0x134>)
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4413      	add	r3, r2
 800201c:	889a      	ldrh	r2, [r3, #4]
 800201e:	8bbb      	ldrh	r3, [r7, #28]
 8002020:	4313      	orrs	r3, r2
 8002022:	83bb      	strh	r3, [r7, #28]
          break;
 8002024:	e012      	b.n	800204c <APPD_SetCPU2GpioConfig+0x88>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8002026:	7ffb      	ldrb	r3, [r7, #31]
 8002028:	4a33      	ldr	r2, [pc, #204]	; (80020f8 <APPD_SetCPU2GpioConfig+0x134>)
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4413      	add	r3, r2
 800202e:	889a      	ldrh	r2, [r3, #4]
 8002030:	8b7b      	ldrh	r3, [r7, #26]
 8002032:	4313      	orrs	r3, r2
 8002034:	837b      	strh	r3, [r7, #26]
          break;
 8002036:	e009      	b.n	800204c <APPD_SetCPU2GpioConfig+0x88>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8002038:	7ffb      	ldrb	r3, [r7, #31]
 800203a:	4a2f      	ldr	r2, [pc, #188]	; (80020f8 <APPD_SetCPU2GpioConfig+0x134>)
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	4413      	add	r3, r2
 8002040:	889a      	ldrh	r2, [r3, #4]
 8002042:	8b3b      	ldrh	r3, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	833b      	strh	r3, [r7, #24]
          break;
 8002048:	e000      	b.n	800204c <APPD_SetCPU2GpioConfig+0x88>
      }
    }
 800204a:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800204c:	7ffb      	ldrb	r3, [r7, #31]
 800204e:	3301      	adds	r3, #1
 8002050:	77fb      	strb	r3, [r7, #31]
 8002052:	7ffb      	ldrb	r3, [r7, #31]
 8002054:	2b21      	cmp	r3, #33	; 0x21
 8002056:	d9c8      	bls.n	8001fea <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 800205c:	2301      	movs	r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002060:	2303      	movs	r3, #3
 8002062:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8002064:	8bbb      	ldrh	r3, [r7, #28]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d014      	beq.n	8002094 <APPD_SetCPU2GpioConfig+0xd0>
  {
    gpio_config.Pin = gpioa_pin_list;
 800206a:	8bbb      	ldrh	r3, [r7, #28]
 800206c:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206e:	2001      	movs	r0, #1
 8002070:	f7ff ff44 	bl	8001efc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8002074:	2001      	movs	r0, #1
 8002076:	f7ff ff5a 	bl	8001f2e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	4619      	mov	r1, r3
 800207e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002082:	f004 fb21 	bl	80066c8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8002086:	8bbb      	ldrh	r3, [r7, #28]
 8002088:	2200      	movs	r2, #0
 800208a:	4619      	mov	r1, r3
 800208c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002090:	f004 fca2 	bl	80069d8 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8002094:	8b7b      	ldrh	r3, [r7, #26]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d012      	beq.n	80020c0 <APPD_SetCPU2GpioConfig+0xfc>
  {
    gpio_config.Pin = gpiob_pin_list;
 800209a:	8b7b      	ldrh	r3, [r7, #26]
 800209c:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800209e:	2002      	movs	r0, #2
 80020a0:	f7ff ff2c 	bl	8001efc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 80020a4:	2002      	movs	r0, #2
 80020a6:	f7ff ff42 	bl	8001f2e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	4619      	mov	r1, r3
 80020ae:	4813      	ldr	r0, [pc, #76]	; (80020fc <APPD_SetCPU2GpioConfig+0x138>)
 80020b0:	f004 fb0a 	bl	80066c8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 80020b4:	8b7b      	ldrh	r3, [r7, #26]
 80020b6:	2200      	movs	r2, #0
 80020b8:	4619      	mov	r1, r3
 80020ba:	4810      	ldr	r0, [pc, #64]	; (80020fc <APPD_SetCPU2GpioConfig+0x138>)
 80020bc:	f004 fc8c 	bl	80069d8 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 80020c0:	8b3b      	ldrh	r3, [r7, #24]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d013      	beq.n	80020ee <APPD_SetCPU2GpioConfig+0x12a>
  {
    gpio_config.Pin = gpioc_pin_list;
 80020c6:	8b3b      	ldrh	r3, [r7, #24]
 80020c8:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ca:	2004      	movs	r0, #4
 80020cc:	f7ff ff16 	bl	8001efc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 80020d0:	2004      	movs	r0, #4
 80020d2:	f7ff ff2c 	bl	8001f2e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 80020d6:	1d3b      	adds	r3, r7, #4
 80020d8:	4619      	mov	r1, r3
 80020da:	4809      	ldr	r0, [pc, #36]	; (8002100 <APPD_SetCPU2GpioConfig+0x13c>)
 80020dc:	f004 faf4 	bl	80066c8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 80020e0:	8b3b      	ldrh	r3, [r7, #24]
 80020e2:	2200      	movs	r2, #0
 80020e4:	4619      	mov	r1, r3
 80020e6:	4806      	ldr	r0, [pc, #24]	; (8002100 <APPD_SetCPU2GpioConfig+0x13c>)
 80020e8:	f004 fc76 	bl	80069d8 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
}
 80020f0:	3720      	adds	r7, #32
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	08016490 	.word	0x08016490
 80020fc:	48000400 	.word	0x48000400
 8002100:	48000800 	.word	0x48000800

08002104 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8002108:	bf00      	nop
}
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8002112:	b580      	push	{r7, lr}
 8002114:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8002116:	f002 fa19 	bl	800454c <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 800211a:	bf00      	nop
}
 800211c:	bd80      	pop	{r7, pc}

0800211e <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b084      	sub	sp, #16
 8002122:	af00      	add	r7, sp, #0
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	460b      	mov	r3, r1
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 800212c:	897a      	ldrh	r2, [r7, #10]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68f9      	ldr	r1, [r7, #12]
 8002132:	2000      	movs	r0, #0
 8002134:	f001 fcdc 	bl	8003af0 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8002138:	bf00      	nop
}
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8002148:	4b07      	ldr	r3, [pc, #28]	; (8002168 <LL_C2_PWR_SetPowerMode+0x28>)
 800214a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800214e:	f023 0207 	bic.w	r2, r3, #7
 8002152:	4905      	ldr	r1, [pc, #20]	; (8002168 <LL_C2_PWR_SetPowerMode+0x28>)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4313      	orrs	r3, r2
 8002158:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	58000400 	.word	0x58000400

0800216c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8002174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800217e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4313      	orrs	r3, r2
 8002186:	608b      	str	r3, [r1, #8]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <APPE_Init>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8002198:	f000 f814 	bl	80021c4 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800219c:	4908      	ldr	r1, [pc, #32]	; (80021c0 <APPE_Init+0x2c>)
 800219e:	2000      	movs	r0, #0
 80021a0:	f001 fa2c 	bl	80035fc <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 80021a4:	f7ff fedf 	bl	8001f66 <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80021a8:	2101      	movs	r1, #1
 80021aa:	2001      	movs	r0, #1
 80021ac:	f010 fece 	bl	8012f4c <UTIL_LPM_SetOffMode>

  Led_Init();
 80021b0:	f000 f8a1 	bl	80022f6 <Led_Init>

  Button_Init();
 80021b4:	f000 f8a6 	bl	8002304 <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80021b8:	f000 f812 	bl	80021e0 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80021bc:	bf00      	nop
}
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20005e50 	.word	0x20005e50

080021c4 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80021c8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80021cc:	f7ff ffce 	bl	800216c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80021d0:	f010 feaa 	bl	8012f28 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80021d4:	2004      	movs	r0, #4
 80021d6:	f7ff ffb3 	bl	8002140 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 80021da:	bf00      	nop
}
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80021e6:	f00b fbeb 	bl	800d9c0 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 80021ea:	2000      	movs	r0, #0
 80021ec:	f00c ff20 	bl	800f030 <osMutexNew>
 80021f0:	4602      	mov	r2, r0
 80021f2:	4b17      	ldr	r3, [pc, #92]	; (8002250 <appe_Tl_Init+0x70>)
 80021f4:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 80021f6:	2200      	movs	r2, #0
 80021f8:	2100      	movs	r1, #0
 80021fa:	2001      	movs	r0, #1
 80021fc:	f00d f860 	bl	800f2c0 <osSemaphoreNew>
 8002200:	4602      	mov	r2, r0
 8002202:	4b14      	ldr	r3, [pc, #80]	; (8002254 <appe_Tl_Init+0x74>)
 8002204:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 8002206:	4a14      	ldr	r2, [pc, #80]	; (8002258 <appe_Tl_Init+0x78>)
 8002208:	2100      	movs	r1, #0
 800220a:	4814      	ldr	r0, [pc, #80]	; (800225c <appe_Tl_Init+0x7c>)
 800220c:	f00c fd46 	bl	800ec9c <osThreadNew>
 8002210:	4602      	mov	r2, r0
 8002212:	4b13      	ldr	r3, [pc, #76]	; (8002260 <appe_Tl_Init+0x80>)
 8002214:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8002216:	4b13      	ldr	r3, [pc, #76]	; (8002264 <appe_Tl_Init+0x84>)
 8002218:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800221a:	4b13      	ldr	r3, [pc, #76]	; (8002268 <appe_Tl_Init+0x88>)
 800221c:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800221e:	463b      	mov	r3, r7
 8002220:	4619      	mov	r1, r3
 8002222:	4812      	ldr	r0, [pc, #72]	; (800226c <appe_Tl_Init+0x8c>)
 8002224:	f00b fa92 	bl	800d74c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <appe_Tl_Init+0x90>)
 800222a:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <appe_Tl_Init+0x94>)
 800222e:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8002230:	4b11      	ldr	r3, [pc, #68]	; (8002278 <appe_Tl_Init+0x98>)
 8002232:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8002234:	f240 533c 	movw	r3, #1340	; 0x53c
 8002238:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 800223a:	f107 0308 	add.w	r3, r7, #8
 800223e:	4618      	mov	r0, r3
 8002240:	f00b fd00 	bl	800dc44 <TL_MM_Init>

  TL_Enable();
 8002244:	f00b fbb6 	bl	800d9b4 <TL_Enable>

  return;
 8002248:	bf00      	nop
}
 800224a:	3720      	adds	r7, #32
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20005c4c 	.word	0x20005c4c
 8002254:	20005c54 	.word	0x20005c54
 8002258:	080165a0 	.word	0x080165a0
 800225c:	080022dd 	.word	0x080022dd
 8002260:	20005c50 	.word	0x20005c50
 8002264:	20030724 	.word	0x20030724
 8002268:	0800227d 	.word	0x0800227d
 800226c:	080022bd 	.word	0x080022bd
 8002270:	2003093c 	.word	0x2003093c
 8002274:	20030830 	.word	0x20030830
 8002278:	200301e8 	.word	0x200301e8

0800227c <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	71fb      	strb	r3, [r7, #7]
  switch (status)
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d002      	beq.n	8002292 <APPE_SysStatusNot+0x16>
 800228c:	2b01      	cmp	r3, #1
 800228e:	d008      	beq.n	80022a2 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 8002290:	e00d      	b.n	80022ae <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 8002292:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <APPE_SysStatusNot+0x3c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f04f 31ff 	mov.w	r1, #4294967295
 800229a:	4618      	mov	r0, r3
 800229c:	f00c ff62 	bl	800f164 <osMutexAcquire>
      break;
 80022a0:	e005      	b.n	80022ae <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 80022a2:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <APPE_SysStatusNot+0x3c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f00c ffba 	bl	800f220 <osMutexRelease>
      break;
 80022ac:	bf00      	nop
  }
  return;
 80022ae:	bf00      	nop
}
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20005c4c 	.word	0x20005c4c

080022bc <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 80022c4:	f7ff fe62 	bl	8001f8c <APPD_EnableCPU2>

  APP_BLE_Init( );
 80022c8:	f7fe fdea 	bl	8000ea0 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80022cc:	2100      	movs	r1, #0
 80022ce:	2001      	movs	r0, #1
 80022d0:	f010 fe3c 	bl	8012f4c <UTIL_LPM_SetOffMode>
  return;
 80022d4:	bf00      	nop
}
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80022e4:	f04f 32ff 	mov.w	r2, #4294967295
 80022e8:	2100      	movs	r1, #0
 80022ea:	2001      	movs	r0, #1
 80022ec:	f00c fdde 	bl	800eeac <osThreadFlagsWait>
     shci_user_evt_proc();
 80022f0:	f00b fa48 	bl	800d784 <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80022f4:	e7f6      	b.n	80022e4 <ShciUserEvtProcess+0x8>

080022f6 <Led_Init>:
    }
}

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0
  BSP_LED_Init(LED_RED);

  BSP_LED_On(LED_GREEN);
#endif

  return;
 80022fa:	bf00      	nop
}
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <Button_Init>:

static void Button_Init( void )
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
#endif

  return;
 8002308:	bf00      	nop
}
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet( ShciUserEvtProcessId, 1 );
 800231c:	4b04      	ldr	r3, [pc, #16]	; (8002330 <shci_notify_asynch_evt+0x1c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2101      	movs	r1, #1
 8002322:	4618      	mov	r0, r3
 8002324:	f00c fd60 	bl	800ede8 <osThreadFlagsSet>
  return;
 8002328:	bf00      	nop
}
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20005c50 	.word	0x20005c50

08002334 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 800233c:	4b04      	ldr	r3, [pc, #16]	; (8002350 <shci_cmd_resp_release+0x1c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f00d f8c1 	bl	800f4c8 <osSemaphoreRelease>
  return;
 8002346:	bf00      	nop
}
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20005c54 	.word	0x20005c54

08002354 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 800235c:	4b05      	ldr	r3, [pc, #20]	; (8002374 <shci_cmd_resp_wait+0x20>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f04f 31ff 	mov.w	r1, #4294967295
 8002364:	4618      	mov	r0, r3
 8002366:	f00d f849 	bl	800f3fc <osSemaphoreAcquire>
  return;
 800236a:	bf00      	nop
}
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20005c54 	.word	0x20005c54

08002378 <Dotstar_Init>:
} DotStar_State;


DotStar_State dotstar_state;

void Dotstar_Init(DotStar_InitHandle* dotstar_init){
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

   dotstar_state.spiHandle = dotstar_init->spiHandle;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a23      	ldr	r2, [pc, #140]	; (8002414 <Dotstar_Init+0x9c>)
 8002386:	6013      	str	r3, [r2, #0]
   dotstar_state.numLEDs = dotstar_init->numLEDs;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	889a      	ldrh	r2, [r3, #4]
 800238c:	4b21      	ldr	r3, [pc, #132]	; (8002414 <Dotstar_Init+0x9c>)
 800238e:	809a      	strh	r2, [r3, #4]
   dotstar_state.brightness = 0;
 8002390:	4b20      	ldr	r3, [pc, #128]	; (8002414 <Dotstar_Init+0x9c>)
 8002392:	2200      	movs	r2, #0
 8002394:	719a      	strb	r2, [r3, #6]
   dotstar_state.rOffset = dotstar_init->colorOrder & 3;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	799b      	ldrb	r3, [r3, #6]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	4b1c      	ldr	r3, [pc, #112]	; (8002414 <Dotstar_Init+0x9c>)
 80023a2:	731a      	strb	r2, [r3, #12]
   dotstar_state.gOffset = (dotstar_init->colorOrder >> 2) & 3;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	799b      	ldrb	r3, [r3, #6]
 80023a8:	089b      	lsrs	r3, r3, #2
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	4b18      	ldr	r3, [pc, #96]	; (8002414 <Dotstar_Init+0x9c>)
 80023b4:	735a      	strb	r2, [r3, #13]
   dotstar_state.bOffset = (dotstar_init->colorOrder >> 4) & 3;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	799b      	ldrb	r3, [r3, #6]
 80023ba:	091b      	lsrs	r3, r3, #4
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	4b13      	ldr	r3, [pc, #76]	; (8002414 <Dotstar_Init+0x9c>)
 80023c6:	739a      	strb	r2, [r3, #14]

   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 80023c8:	4b12      	ldr	r3, [pc, #72]	; (8002414 <Dotstar_Init+0x9c>)
 80023ca:	7b1a      	ldrb	r2, [r3, #12]
 80023cc:	4b11      	ldr	r3, [pc, #68]	; (8002414 <Dotstar_Init+0x9c>)
 80023ce:	7b5b      	ldrb	r3, [r3, #13]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d10c      	bne.n	80023ee <Dotstar_Init+0x76>
     dotstar_state.numLEDs + ((dotstar_state.numLEDs + 3) / 4) : // MONO: 10 bits/pixel, round up to next byte
 80023d4:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <Dotstar_Init+0x9c>)
 80023d6:	889a      	ldrh	r2, [r3, #4]
 80023d8:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <Dotstar_Init+0x9c>)
 80023da:	889b      	ldrh	r3, [r3, #4]
 80023dc:	3303      	adds	r3, #3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	da00      	bge.n	80023e4 <Dotstar_Init+0x6c>
 80023e2:	3303      	adds	r3, #3
 80023e4:	109b      	asrs	r3, r3, #2
 80023e6:	b29b      	uxth	r3, r3
   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 80023e8:	4413      	add	r3, r2
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	e005      	b.n	80023fa <Dotstar_Init+0x82>
     dotstar_state.numLEDs * 3;              // COLOR: 3 bytes/pixel
 80023ee:	4b09      	ldr	r3, [pc, #36]	; (8002414 <Dotstar_Init+0x9c>)
 80023f0:	889b      	ldrh	r3, [r3, #4]
   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 80023f2:	461a      	mov	r2, r3
 80023f4:	0052      	lsls	r2, r2, #1
 80023f6:	4413      	add	r3, r2
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	81fb      	strh	r3, [r7, #14]

   dotstar_state.pixels = (uint8_t *)malloc(bytes);
 80023fc:	89fb      	ldrh	r3, [r7, #14]
 80023fe:	4618      	mov	r0, r3
 8002400:	f010 fdfc 	bl	8012ffc <malloc>
 8002404:	4603      	mov	r3, r0
 8002406:	461a      	mov	r2, r3
 8002408:	4b02      	ldr	r3, [pc, #8]	; (8002414 <Dotstar_Init+0x9c>)
 800240a:	609a      	str	r2, [r3, #8]
}
 800240c:	bf00      	nop
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20005c58 	.word	0x20005c58

08002418 <ds_show>:
*/

/*!
  @brief   Transmit pixel data in RAM to DotStars.
*/
void ds_show(void) {
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0

  if(!dotstar_state.pixels) return;
 800241e:	4b4b      	ldr	r3, [pc, #300]	; (800254c <ds_show+0x134>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 808e 	beq.w	8002544 <ds_show+0x12c>

  uint8_t *ptr = dotstar_state.pixels, i;            // -> LED data
 8002428:	4b48      	ldr	r3, [pc, #288]	; (800254c <ds_show+0x134>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	60fb      	str	r3, [r7, #12]
  uint16_t n   = dotstar_state.numLEDs;              // Counter
 800242e:	4b47      	ldr	r3, [pc, #284]	; (800254c <ds_show+0x134>)
 8002430:	889b      	ldrh	r3, [r3, #4]
 8002432:	813b      	strh	r3, [r7, #8]
  uint16_t b16 = (uint16_t)dotstar_state.brightness; // Type-convert for fixed-point math
 8002434:	4b45      	ldr	r3, [pc, #276]	; (800254c <ds_show+0x134>)
 8002436:	799b      	ldrb	r3, [r3, #6]
 8002438:	80fb      	strh	r3, [r7, #6]
  uint8_t sendval;

    sendval = 0x00;
 800243a:	2300      	movs	r3, #0
 800243c:	717b      	strb	r3, [r7, #5]
    for(i=0; i<4; i++) spi_out(&sendval);    // 4 byte start-frame marker
 800243e:	2300      	movs	r3, #0
 8002440:	72fb      	strb	r3, [r7, #11]
 8002442:	e00a      	b.n	800245a <ds_show+0x42>
 8002444:	4b41      	ldr	r3, [pc, #260]	; (800254c <ds_show+0x134>)
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	1d79      	adds	r1, r7, #5
 800244a:	f04f 33ff 	mov.w	r3, #4294967295
 800244e:	2201      	movs	r2, #1
 8002450:	f007 fbbd 	bl	8009bce <HAL_SPI_Transmit>
 8002454:	7afb      	ldrb	r3, [r7, #11]
 8002456:	3301      	adds	r3, #1
 8002458:	72fb      	strb	r3, [r7, #11]
 800245a:	7afb      	ldrb	r3, [r7, #11]
 800245c:	2b03      	cmp	r3, #3
 800245e:	d9f1      	bls.n	8002444 <ds_show+0x2c>

    if(dotstar_state.brightness) {                     // Scale pixel brightness on output
 8002460:	4b3a      	ldr	r3, [pc, #232]	; (800254c <ds_show+0x134>)
 8002462:	799b      	ldrb	r3, [r3, #6]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d02c      	beq.n	80024c2 <ds_show+0xaa>
      do {                               // For each pixel...
    	sendval = 0xFF;
 8002468:	23ff      	movs	r3, #255	; 0xff
 800246a:	717b      	strb	r3, [r7, #5]
        spi_out(&sendval);                   //  Pixel start
 800246c:	4b37      	ldr	r3, [pc, #220]	; (800254c <ds_show+0x134>)
 800246e:	6818      	ldr	r0, [r3, #0]
 8002470:	1d79      	adds	r1, r7, #5
 8002472:	f04f 33ff 	mov.w	r3, #4294967295
 8002476:	2201      	movs	r2, #1
 8002478:	f007 fba9 	bl	8009bce <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 800247c:	2300      	movs	r3, #0
 800247e:	72fb      	strb	r3, [r7, #11]
 8002480:	e015      	b.n	80024ae <ds_show+0x96>
        	sendval = (*ptr++ * b16) >> 8;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	60fa      	str	r2, [r7, #12]
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	fb03 f302 	mul.w	r3, r3, r2
 8002492:	121b      	asrs	r3, r3, #8
 8002494:	b2db      	uxtb	r3, r3
 8002496:	717b      	strb	r3, [r7, #5]
        	spi_out(&sendval); // Scale, write RGB
 8002498:	4b2c      	ldr	r3, [pc, #176]	; (800254c <ds_show+0x134>)
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	1d79      	adds	r1, r7, #5
 800249e:	f04f 33ff 	mov.w	r3, #4294967295
 80024a2:	2201      	movs	r2, #1
 80024a4:	f007 fb93 	bl	8009bce <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 80024a8:	7afb      	ldrb	r3, [r7, #11]
 80024aa:	3301      	adds	r3, #1
 80024ac:	72fb      	strb	r3, [r7, #11]
 80024ae:	7afb      	ldrb	r3, [r7, #11]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d9e6      	bls.n	8002482 <ds_show+0x6a>
        }
      } while(--n);
 80024b4:	893b      	ldrh	r3, [r7, #8]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	813b      	strh	r3, [r7, #8]
 80024ba:	893b      	ldrh	r3, [r7, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1d3      	bne.n	8002468 <ds_show+0x50>
 80024c0:	e025      	b.n	800250e <ds_show+0xf6>
    } else {                             // Full brightness (no scaling)
      do {                               // For each pixel...
    	sendval = 0xFF;
 80024c2:	23ff      	movs	r3, #255	; 0xff
 80024c4:	717b      	strb	r3, [r7, #5]
        spi_out(&sendval);                   //  Pixel start
 80024c6:	4b21      	ldr	r3, [pc, #132]	; (800254c <ds_show+0x134>)
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	1d79      	adds	r1, r7, #5
 80024cc:	f04f 33ff 	mov.w	r3, #4294967295
 80024d0:	2201      	movs	r2, #1
 80024d2:	f007 fb7c 	bl	8009bce <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 80024d6:	2300      	movs	r3, #0
 80024d8:	72fb      	strb	r3, [r7, #11]
 80024da:	e00f      	b.n	80024fc <ds_show+0xe4>
        	sendval = *ptr++;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	60fa      	str	r2, [r7, #12]
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	717b      	strb	r3, [r7, #5]
        	spi_out(&sendval); // Write R,G,B
 80024e6:	4b19      	ldr	r3, [pc, #100]	; (800254c <ds_show+0x134>)
 80024e8:	6818      	ldr	r0, [r3, #0]
 80024ea:	1d79      	adds	r1, r7, #5
 80024ec:	f04f 33ff 	mov.w	r3, #4294967295
 80024f0:	2201      	movs	r2, #1
 80024f2:	f007 fb6c 	bl	8009bce <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 80024f6:	7afb      	ldrb	r3, [r7, #11]
 80024f8:	3301      	adds	r3, #1
 80024fa:	72fb      	strb	r3, [r7, #11]
 80024fc:	7afb      	ldrb	r3, [r7, #11]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d9ec      	bls.n	80024dc <ds_show+0xc4>
        }
      } while(--n);
 8002502:	893b      	ldrh	r3, [r7, #8]
 8002504:	3b01      	subs	r3, #1
 8002506:	813b      	strh	r3, [r7, #8]
 8002508:	893b      	ldrh	r3, [r7, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1d9      	bne.n	80024c2 <ds_show+0xaa>
    // revisions are more strict (e.g. might mandate use of end-frame
    // before start-frame marker). i.e. let's not remove this. But after
    // testing a bit more the suggestion is to use at least (numLeds+1)/2
    // high values (1) or (numLeds+15)/16 full bytes as EndFrame. For details see also:
    // https://cpldcpu.wordpress.com/2014/11/30/understanding-the-apa102-superled/
    sendval = 0xFF;
 800250e:	23ff      	movs	r3, #255	; 0xff
 8002510:	717b      	strb	r3, [r7, #5]
    for(i=0; i<((dotstar_state.numLEDs + 15) / 16); i++) spi_out(&sendval);
 8002512:	2300      	movs	r3, #0
 8002514:	72fb      	strb	r3, [r7, #11]
 8002516:	e00a      	b.n	800252e <ds_show+0x116>
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <ds_show+0x134>)
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	1d79      	adds	r1, r7, #5
 800251e:	f04f 33ff 	mov.w	r3, #4294967295
 8002522:	2201      	movs	r2, #1
 8002524:	f007 fb53 	bl	8009bce <HAL_SPI_Transmit>
 8002528:	7afb      	ldrb	r3, [r7, #11]
 800252a:	3301      	adds	r3, #1
 800252c:	72fb      	strb	r3, [r7, #11]
 800252e:	7afa      	ldrb	r2, [r7, #11]
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <ds_show+0x134>)
 8002532:	889b      	ldrh	r3, [r3, #4]
 8002534:	330f      	adds	r3, #15
 8002536:	2b00      	cmp	r3, #0
 8002538:	da00      	bge.n	800253c <ds_show+0x124>
 800253a:	330f      	adds	r3, #15
 800253c:	111b      	asrs	r3, r3, #4
 800253e:	429a      	cmp	r2, r3
 8002540:	dbea      	blt.n	8002518 <ds_show+0x100>
 8002542:	e000      	b.n	8002546 <ds_show+0x12e>
  if(!dotstar_state.pixels) return;
 8002544:	bf00      	nop

}
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20005c58 	.word	0x20005c58

08002550 <ds_clear>:

/*!
  @brief   Fill the whole DotStar strip with 0 / black / off.
*/
void ds_clear() {
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  memset(dotstar_state.pixels, 0, (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8002554:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <ds_clear+0x44>)
 8002556:	6898      	ldr	r0, [r3, #8]
 8002558:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <ds_clear+0x44>)
 800255a:	7b1a      	ldrb	r2, [r3, #12]
 800255c:	4b0d      	ldr	r3, [pc, #52]	; (8002594 <ds_clear+0x44>)
 800255e:	7b5b      	ldrb	r3, [r3, #13]
 8002560:	429a      	cmp	r2, r3
 8002562:	d10b      	bne.n	800257c <ds_clear+0x2c>
    dotstar_state.numLEDs + ((dotstar_state.numLEDs + 3) / 4) : // MONO: 10 bits/pixel
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <ds_clear+0x44>)
 8002566:	889b      	ldrh	r3, [r3, #4]
 8002568:	461a      	mov	r2, r3
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <ds_clear+0x44>)
 800256c:	889b      	ldrh	r3, [r3, #4]
 800256e:	3303      	adds	r3, #3
 8002570:	2b00      	cmp	r3, #0
 8002572:	da00      	bge.n	8002576 <ds_clear+0x26>
 8002574:	3303      	adds	r3, #3
 8002576:	109b      	asrs	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	e005      	b.n	8002588 <ds_clear+0x38>
    dotstar_state.numLEDs * 3);                   // COLOR: 3 bytes/pixel
 800257c:	4b05      	ldr	r3, [pc, #20]	; (8002594 <ds_clear+0x44>)
 800257e:	889b      	ldrh	r3, [r3, #4]
 8002580:	461a      	mov	r2, r3
 8002582:	4613      	mov	r3, r2
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	4413      	add	r3, r2
  memset(dotstar_state.pixels, 0, (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8002588:	461a      	mov	r2, r3
 800258a:	2100      	movs	r1, #0
 800258c:	f010 fd49 	bl	8013022 <memset>
}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20005c58 	.word	0x20005c58

08002598 <ds_setPixelColor32B>:
  @param   n  Pixel index, starting from 0.
  @param   c  32-bit color value. Most significant byte is 0, second is
              red, then green, and least significant byte is blue.
              e.g. 0x00RRGGBB
*/
void ds_setPixelColor32B(uint16_t n, uint32_t c) {
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	6039      	str	r1, [r7, #0]
 80025a2:	80fb      	strh	r3, [r7, #6]
  if(n < dotstar_state.numLEDs) {
 80025a4:	4b16      	ldr	r3, [pc, #88]	; (8002600 <ds_setPixelColor32B+0x68>)
 80025a6:	889b      	ldrh	r3, [r3, #4]
 80025a8:	88fa      	ldrh	r2, [r7, #6]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d221      	bcs.n	80025f2 <ds_setPixelColor32B+0x5a>
    uint8_t *p = &dotstar_state.pixels[n * 3];
 80025ae:	4b14      	ldr	r3, [pc, #80]	; (8002600 <ds_setPixelColor32B+0x68>)
 80025b0:	6899      	ldr	r1, [r3, #8]
 80025b2:	88fa      	ldrh	r2, [r7, #6]
 80025b4:	4613      	mov	r3, r2
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	4413      	add	r3, r2
 80025ba:	440b      	add	r3, r1
 80025bc:	60fb      	str	r3, [r7, #12]
    p[dotstar_state.rOffset] = (uint8_t)(c >> 16);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	0c1a      	lsrs	r2, r3, #16
 80025c2:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <ds_setPixelColor32B+0x68>)
 80025c4:	7b1b      	ldrb	r3, [r3, #12]
 80025c6:	4619      	mov	r1, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	440b      	add	r3, r1
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	701a      	strb	r2, [r3, #0]
    p[dotstar_state.gOffset] = (uint8_t)(c >>  8);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	0a1a      	lsrs	r2, r3, #8
 80025d4:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <ds_setPixelColor32B+0x68>)
 80025d6:	7b5b      	ldrb	r3, [r3, #13]
 80025d8:	4619      	mov	r1, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	440b      	add	r3, r1
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	701a      	strb	r2, [r3, #0]
    p[dotstar_state.bOffset] = (uint8_t)c;
 80025e2:	4b07      	ldr	r3, [pc, #28]	; (8002600 <ds_setPixelColor32B+0x68>)
 80025e4:	7b9b      	ldrb	r3, [r3, #14]
 80025e6:	461a      	mov	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4413      	add	r3, r2
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	701a      	strb	r2, [r3, #0]
  }
}
 80025f2:	bf00      	nop
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	20005c58 	.word	0x20005c58

08002604 <ds_fill>:
  @param   first  Index of first pixel to fill, starting from 0. Must be
                  in-bounds, no clipping is performed. 0 if unspecified.
  @param   count  Number of pixels to fill, as a positive value. Passing
                  0 or leaving unspecified will fill to end of strip.
*/
void ds_fill(uint32_t c, uint16_t first, uint16_t count) {
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	807b      	strh	r3, [r7, #2]
 8002610:	4613      	mov	r3, r2
 8002612:	803b      	strh	r3, [r7, #0]
  uint16_t i, end;

  if(first >= dotstar_state.numLEDs) {
 8002614:	4b15      	ldr	r3, [pc, #84]	; (800266c <ds_fill+0x68>)
 8002616:	889b      	ldrh	r3, [r3, #4]
 8002618:	887a      	ldrh	r2, [r7, #2]
 800261a:	429a      	cmp	r2, r3
 800261c:	d222      	bcs.n	8002664 <ds_fill+0x60>
    return; // If first LED is past end of strip, nothing to do
  }

  // Calculate the index ONE AFTER the last pixel to fill
  if(count == 0) {
 800261e:	883b      	ldrh	r3, [r7, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d103      	bne.n	800262c <ds_fill+0x28>
    // Fill to end of strip
    end = dotstar_state.numLEDs;
 8002624:	4b11      	ldr	r3, [pc, #68]	; (800266c <ds_fill+0x68>)
 8002626:	889b      	ldrh	r3, [r3, #4]
 8002628:	81bb      	strh	r3, [r7, #12]
 800262a:	e00b      	b.n	8002644 <ds_fill+0x40>
  } else {
    // Ensure that the loop won't go past the last pixel
    end = first + count;
 800262c:	887a      	ldrh	r2, [r7, #2]
 800262e:	883b      	ldrh	r3, [r7, #0]
 8002630:	4413      	add	r3, r2
 8002632:	81bb      	strh	r3, [r7, #12]
    if(end > dotstar_state.numLEDs) end = dotstar_state.numLEDs;
 8002634:	4b0d      	ldr	r3, [pc, #52]	; (800266c <ds_fill+0x68>)
 8002636:	889b      	ldrh	r3, [r3, #4]
 8002638:	89ba      	ldrh	r2, [r7, #12]
 800263a:	429a      	cmp	r2, r3
 800263c:	d902      	bls.n	8002644 <ds_fill+0x40>
 800263e:	4b0b      	ldr	r3, [pc, #44]	; (800266c <ds_fill+0x68>)
 8002640:	889b      	ldrh	r3, [r3, #4]
 8002642:	81bb      	strh	r3, [r7, #12]
  }

  for(i = first; i < end; i++) {
 8002644:	887b      	ldrh	r3, [r7, #2]
 8002646:	81fb      	strh	r3, [r7, #14]
 8002648:	e007      	b.n	800265a <ds_fill+0x56>
    ds_setPixelColor32B(i, c);
 800264a:	89fb      	ldrh	r3, [r7, #14]
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff ffa2 	bl	8002598 <ds_setPixelColor32B>
  for(i = first; i < end; i++) {
 8002654:	89fb      	ldrh	r3, [r7, #14]
 8002656:	3301      	adds	r3, #1
 8002658:	81fb      	strh	r3, [r7, #14]
 800265a:	89fa      	ldrh	r2, [r7, #14]
 800265c:	89bb      	ldrh	r3, [r7, #12]
 800265e:	429a      	cmp	r2, r3
 8002660:	d3f3      	bcc.n	800264a <ds_fill+0x46>
 8002662:	e000      	b.n	8002666 <ds_fill+0x62>
    return; // If first LED is past end of strip, nothing to do
 8002664:	bf00      	nop
  }
}
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20005c58 	.word	0x20005c58

08002670 <ds_setBrightness>:
           is 'non destructive' -- it's applied as color data is being
           issued to the strip, not during setPixelColor(), and also
           means that getPixelColor() returns the exact value originally
           stored.
*/
void ds_setBrightness(uint8_t b) {
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	71fb      	strb	r3, [r7, #7]
  // optimizes the actual scaling math later, allowing a fast 8x8-bit
  // multiply and taking the MSB. 'brightness' is a uint8_t, adding 1
  // here may (intentionally) roll over...so 0 = max brightness (color
  // values are interpreted literally; no scaling), 1 = min brightness
  // (off), 255 = just below max brightness.
  dotstar_state.brightness = b + 1;
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	3301      	adds	r3, #1
 800267e:	b2da      	uxtb	r2, r3
 8002680:	4b03      	ldr	r3, [pc, #12]	; (8002690 <ds_setBrightness+0x20>)
 8002682:	719a      	strb	r2, [r3, #6]
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	20005c58 	.word	0x20005c58

08002694 <I2C_Write_Byte>:
//#include "stm32wbxx_hal_i2c.h"
//#include "stm32wbxx_hal.h"


void I2C_Write_Byte(uint8_t value, uint8_t Cmd)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af02      	add	r7, sp, #8
 800269a:	4603      	mov	r3, r0
 800269c:	460a      	mov	r2, r1
 800269e:	71fb      	strb	r3, [r7, #7]
 80026a0:	4613      	mov	r3, r2
 80026a2:	71bb      	strb	r3, [r7, #6]
  uint16_t Addr = 0x3C << 1;
 80026a4:	2378      	movs	r3, #120	; 0x78
 80026a6:	81fb      	strh	r3, [r7, #14]
  uint8_t Data[2];
  Data[0] = Cmd;
 80026a8:	79bb      	ldrb	r3, [r7, #6]
 80026aa:	733b      	strb	r3, [r7, #12]
  Data[1] = value;
 80026ac:	79fb      	ldrb	r3, [r7, #7]
 80026ae:	737b      	strb	r3, [r7, #13]

  HAL_I2C_Master_Transmit(&ER_OLED_I2C_PORT, Addr, Data, 2, HAL_MAX_DELAY);
 80026b0:	f107 020c 	add.w	r2, r7, #12
 80026b4:	89f9      	ldrh	r1, [r7, #14]
 80026b6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	2302      	movs	r3, #2
 80026be:	4803      	ldr	r0, [pc, #12]	; (80026cc <I2C_Write_Byte+0x38>)
 80026c0:	f004 fa6e 	bl	8006ba0 <HAL_I2C_Master_Transmit>
}
 80026c4:	bf00      	nop
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20005c7c 	.word	0x20005c7c

080026d0 <er_oled_begin>:

void er_oled_begin()
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
    command(0xae);//--turn off oled panel
 80026d4:	2100      	movs	r1, #0
 80026d6:	20ae      	movs	r0, #174	; 0xae
 80026d8:	f7ff ffdc 	bl	8002694 <I2C_Write_Byte>

    command(0xd5);//--set display clock divide ratio/oscillator frequency
 80026dc:	2100      	movs	r1, #0
 80026de:	20d5      	movs	r0, #213	; 0xd5
 80026e0:	f7ff ffd8 	bl	8002694 <I2C_Write_Byte>
    command(0x80);//--set divide ratio
 80026e4:	2100      	movs	r1, #0
 80026e6:	2080      	movs	r0, #128	; 0x80
 80026e8:	f7ff ffd4 	bl	8002694 <I2C_Write_Byte>

    command(0xa8);//--set multiplex ratio
 80026ec:	2100      	movs	r1, #0
 80026ee:	20a8      	movs	r0, #168	; 0xa8
 80026f0:	f7ff ffd0 	bl	8002694 <I2C_Write_Byte>
    command(0x27);//--1/40 duty
 80026f4:	2100      	movs	r1, #0
 80026f6:	2027      	movs	r0, #39	; 0x27
 80026f8:	f7ff ffcc 	bl	8002694 <I2C_Write_Byte>

    command(0xd3);//-set display offset
 80026fc:	2100      	movs	r1, #0
 80026fe:	20d3      	movs	r0, #211	; 0xd3
 8002700:	f7ff ffc8 	bl	8002694 <I2C_Write_Byte>
    command(0x00);//-not offset
 8002704:	2100      	movs	r1, #0
 8002706:	2000      	movs	r0, #0
 8002708:	f7ff ffc4 	bl	8002694 <I2C_Write_Byte>

    command(0xad);//--Internal IREF Setting
 800270c:	2100      	movs	r1, #0
 800270e:	20ad      	movs	r0, #173	; 0xad
 8002710:	f7ff ffc0 	bl	8002694 <I2C_Write_Byte>
    command(0x30);//--
 8002714:	2100      	movs	r1, #0
 8002716:	2030      	movs	r0, #48	; 0x30
 8002718:	f7ff ffbc 	bl	8002694 <I2C_Write_Byte>

    command(0x8d);//--set Charge Pump enable/disable
 800271c:	2100      	movs	r1, #0
 800271e:	208d      	movs	r0, #141	; 0x8d
 8002720:	f7ff ffb8 	bl	8002694 <I2C_Write_Byte>
    command(0x14);//--set(0x10) disable
 8002724:	2100      	movs	r1, #0
 8002726:	2014      	movs	r0, #20
 8002728:	f7ff ffb4 	bl	8002694 <I2C_Write_Byte>

    command(0x40);//--set start line address
 800272c:	2100      	movs	r1, #0
 800272e:	2040      	movs	r0, #64	; 0x40
 8002730:	f7ff ffb0 	bl	8002694 <I2C_Write_Byte>

    command(0xa6);//--set normal display
 8002734:	2100      	movs	r1, #0
 8002736:	20a6      	movs	r0, #166	; 0xa6
 8002738:	f7ff ffac 	bl	8002694 <I2C_Write_Byte>

    command(0xa4);//Disable Entire Display On
 800273c:	2100      	movs	r1, #0
 800273e:	20a4      	movs	r0, #164	; 0xa4
 8002740:	f7ff ffa8 	bl	8002694 <I2C_Write_Byte>

    command(0xa1);//--set segment re-map 128 to 0
 8002744:	2100      	movs	r1, #0
 8002746:	20a1      	movs	r0, #161	; 0xa1
 8002748:	f7ff ffa4 	bl	8002694 <I2C_Write_Byte>

    command(0xC8);//--Set COM Output Scan Direction 64 to 0
 800274c:	2100      	movs	r1, #0
 800274e:	20c8      	movs	r0, #200	; 0xc8
 8002750:	f7ff ffa0 	bl	8002694 <I2C_Write_Byte>

    command(0xda);//--set com pins hardware configuration
 8002754:	2100      	movs	r1, #0
 8002756:	20da      	movs	r0, #218	; 0xda
 8002758:	f7ff ff9c 	bl	8002694 <I2C_Write_Byte>
    command(0x12);
 800275c:	2100      	movs	r1, #0
 800275e:	2012      	movs	r0, #18
 8002760:	f7ff ff98 	bl	8002694 <I2C_Write_Byte>

    command(0x81);//--set contrast control register
 8002764:	2100      	movs	r1, #0
 8002766:	2081      	movs	r0, #129	; 0x81
 8002768:	f7ff ff94 	bl	8002694 <I2C_Write_Byte>
    command(0xaf);
 800276c:	2100      	movs	r1, #0
 800276e:	20af      	movs	r0, #175	; 0xaf
 8002770:	f7ff ff90 	bl	8002694 <I2C_Write_Byte>

    command(0xd9);//--set pre-charge period
 8002774:	2100      	movs	r1, #0
 8002776:	20d9      	movs	r0, #217	; 0xd9
 8002778:	f7ff ff8c 	bl	8002694 <I2C_Write_Byte>
    command(0x22);
 800277c:	2100      	movs	r1, #0
 800277e:	2022      	movs	r0, #34	; 0x22
 8002780:	f7ff ff88 	bl	8002694 <I2C_Write_Byte>

    command(0xdb);//--set vcomh
 8002784:	2100      	movs	r1, #0
 8002786:	20db      	movs	r0, #219	; 0xdb
 8002788:	f7ff ff84 	bl	8002694 <I2C_Write_Byte>
    command(0x20);
 800278c:	2100      	movs	r1, #0
 800278e:	2020      	movs	r0, #32
 8002790:	f7ff ff80 	bl	8002694 <I2C_Write_Byte>

    command(0xaf);//--turn on oled panel
 8002794:	2100      	movs	r1, #0
 8002796:	20af      	movs	r0, #175	; 0xaf
 8002798:	f7ff ff7c 	bl	8002694 <I2C_Write_Byte>

}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}

080027a0 <er_oled_clear>:

void er_oled_clear(uint8_t* buffer)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
	int i;
	for(i = 0;i < WIDTH * HEIGHT / 8;i++)
 80027a8:	2300      	movs	r3, #0
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	e007      	b.n	80027be <er_oled_clear+0x1e>
	{
		buffer[i] = 0;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	4413      	add	r3, r2
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
	for(i = 0;i < WIDTH * HEIGHT / 8;i++)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	3301      	adds	r3, #1
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80027c4:	dbf3      	blt.n	80027ae <er_oled_clear+0xe>
	}
}
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <er_oled_pixel>:

void er_oled_pixel(int x, int y, char color, uint8_t* buffer)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b085      	sub	sp, #20
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	603b      	str	r3, [r7, #0]
 80027de:	4613      	mov	r3, r2
 80027e0:	71fb      	strb	r3, [r7, #7]
    if(x > WIDTH || y > HEIGHT)return ;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2b48      	cmp	r3, #72	; 0x48
 80027e6:	dc61      	bgt.n	80028ac <er_oled_pixel+0xda>
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b28      	cmp	r3, #40	; 0x28
 80027ec:	dc5e      	bgt.n	80028ac <er_oled_pixel+0xda>
    if(color)
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d02c      	beq.n	800284e <er_oled_pixel+0x7c>
        buffer[x+(y/8)*WIDTH] |= 1<<(y%8);
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	da00      	bge.n	80027fc <er_oled_pixel+0x2a>
 80027fa:	3307      	adds	r3, #7
 80027fc:	10db      	asrs	r3, r3, #3
 80027fe:	461a      	mov	r2, r3
 8002800:	4613      	mov	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	4413      	add	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4619      	mov	r1, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	440b      	add	r3, r1
 800280e:	4619      	mov	r1, r3
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	440b      	add	r3, r1
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	b259      	sxtb	r1, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	4258      	negs	r0, r3
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	f000 0007 	and.w	r0, r0, #7
 8002824:	bf58      	it	pl
 8002826:	4243      	negpl	r3, r0
 8002828:	2001      	movs	r0, #1
 800282a:	fa00 f303 	lsl.w	r3, r0, r3
 800282e:	b25b      	sxtb	r3, r3
 8002830:	430b      	orrs	r3, r1
 8002832:	b259      	sxtb	r1, r3
 8002834:	4613      	mov	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4413      	add	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	461a      	mov	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4413      	add	r3, r2
 8002842:	461a      	mov	r2, r3
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	4413      	add	r3, r2
 8002848:	b2ca      	uxtb	r2, r1
 800284a:	701a      	strb	r2, [r3, #0]
 800284c:	e02f      	b.n	80028ae <er_oled_pixel+0xdc>
    else
        buffer[x+(y/8)*WIDTH] &= ~(1<<(y%8));
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	da00      	bge.n	8002856 <er_oled_pixel+0x84>
 8002854:	3307      	adds	r3, #7
 8002856:	10db      	asrs	r3, r3, #3
 8002858:	461a      	mov	r2, r3
 800285a:	4613      	mov	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4413      	add	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	4619      	mov	r1, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	440b      	add	r3, r1
 8002868:	4619      	mov	r1, r3
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	440b      	add	r3, r1
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	b259      	sxtb	r1, r3
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	4258      	negs	r0, r3
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	f000 0007 	and.w	r0, r0, #7
 800287e:	bf58      	it	pl
 8002880:	4243      	negpl	r3, r0
 8002882:	2001      	movs	r0, #1
 8002884:	fa00 f303 	lsl.w	r3, r0, r3
 8002888:	b25b      	sxtb	r3, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	b25b      	sxtb	r3, r3
 800288e:	400b      	ands	r3, r1
 8002890:	b259      	sxtb	r1, r3
 8002892:	4613      	mov	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	4413      	add	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	461a      	mov	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4413      	add	r3, r2
 80028a0:	461a      	mov	r2, r3
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	4413      	add	r3, r2
 80028a6:	b2ca      	uxtb	r2, r1
 80028a8:	701a      	strb	r2, [r3, #0]
 80028aa:	e000      	b.n	80028ae <er_oled_pixel+0xdc>
    if(x > WIDTH || y > HEIGHT)return ;
 80028ac:	bf00      	nop
}
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <er_oled_char>:
		}
	}
}

void er_oled_char(unsigned char x, unsigned char y, char acsii, char size, char mode, uint8_t* buffer)
{
 80028b8:	b590      	push	{r4, r7, lr}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4604      	mov	r4, r0
 80028c0:	4608      	mov	r0, r1
 80028c2:	4611      	mov	r1, r2
 80028c4:	461a      	mov	r2, r3
 80028c6:	4623      	mov	r3, r4
 80028c8:	71fb      	strb	r3, [r7, #7]
 80028ca:	4603      	mov	r3, r0
 80028cc:	71bb      	strb	r3, [r7, #6]
 80028ce:	460b      	mov	r3, r1
 80028d0:	717b      	strb	r3, [r7, #5]
 80028d2:	4613      	mov	r3, r2
 80028d4:	713b      	strb	r3, [r7, #4]
    unsigned char i, j, y0=y;
 80028d6:	79bb      	ldrb	r3, [r7, #6]
 80028d8:	743b      	strb	r3, [r7, #16]
    uint16_t temp;
    uint16_t position = 0x80;
 80028da:	2380      	movs	r3, #128	; 0x80
 80028dc:	827b      	strh	r3, [r7, #18]
    uint8_t maxindex = 8;
 80028de:	2308      	movs	r3, #8
 80028e0:	747b      	strb	r3, [r7, #17]
    unsigned char ch = acsii - ' ';
 80028e2:	797b      	ldrb	r3, [r7, #5]
 80028e4:	3b20      	subs	r3, #32
 80028e6:	73fb      	strb	r3, [r7, #15]

    if (size == 32){
 80028e8:	793b      	ldrb	r3, [r7, #4]
 80028ea:	2b20      	cmp	r3, #32
 80028ec:	d104      	bne.n	80028f8 <er_oled_char+0x40>
    	position = 0x8000;
 80028ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028f2:	827b      	strh	r3, [r7, #18]
    	maxindex =16;
 80028f4:	2310      	movs	r3, #16
 80028f6:	747b      	strb	r3, [r7, #17]
    }

    for(i = 0;i<size;i++) {
 80028f8:	2300      	movs	r3, #0
 80028fa:	75fb      	strb	r3, [r7, #23]
 80028fc:	e0b1      	b.n	8002a62 <er_oled_char+0x1aa>
        if(size == 12)
 80028fe:	793b      	ldrb	r3, [r7, #4]
 8002900:	2b0c      	cmp	r3, #12
 8002902:	d11d      	bne.n	8002940 <er_oled_char+0x88>
        {
            if(mode)temp = Font1206[ch][i];
 8002904:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00b      	beq.n	8002924 <er_oled_char+0x6c>
 800290c:	7bfa      	ldrb	r2, [r7, #15]
 800290e:	7df9      	ldrb	r1, [r7, #23]
 8002910:	4858      	ldr	r0, [pc, #352]	; (8002a74 <er_oled_char+0x1bc>)
 8002912:	4613      	mov	r3, r2
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	4413      	add	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4403      	add	r3, r0
 800291c:	440b      	add	r3, r1
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	82bb      	strh	r3, [r7, #20]
 8002922:	e06c      	b.n	80029fe <er_oled_char+0x146>
            else temp = ~Font1206[ch][i];
 8002924:	7bfa      	ldrb	r2, [r7, #15]
 8002926:	7df9      	ldrb	r1, [r7, #23]
 8002928:	4852      	ldr	r0, [pc, #328]	; (8002a74 <er_oled_char+0x1bc>)
 800292a:	4613      	mov	r3, r2
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	4413      	add	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4403      	add	r3, r0
 8002934:	440b      	add	r3, r1
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	b29b      	uxth	r3, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	82bb      	strh	r3, [r7, #20]
 800293e:	e05e      	b.n	80029fe <er_oled_char+0x146>
        }
        else if(size == 16)
 8002940:	793b      	ldrb	r3, [r7, #4]
 8002942:	2b10      	cmp	r3, #16
 8002944:	d117      	bne.n	8002976 <er_oled_char+0xbe>
        {
            if(mode)temp = Font1608[ch][i];
 8002946:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800294a:	2b00      	cmp	r3, #0
 800294c:	d008      	beq.n	8002960 <er_oled_char+0xa8>
 800294e:	7bfa      	ldrb	r2, [r7, #15]
 8002950:	7dfb      	ldrb	r3, [r7, #23]
 8002952:	4949      	ldr	r1, [pc, #292]	; (8002a78 <er_oled_char+0x1c0>)
 8002954:	0112      	lsls	r2, r2, #4
 8002956:	440a      	add	r2, r1
 8002958:	4413      	add	r3, r2
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	82bb      	strh	r3, [r7, #20]
 800295e:	e04e      	b.n	80029fe <er_oled_char+0x146>
            else temp = ~Font1608[ch][i];
 8002960:	7bfa      	ldrb	r2, [r7, #15]
 8002962:	7dfb      	ldrb	r3, [r7, #23]
 8002964:	4944      	ldr	r1, [pc, #272]	; (8002a78 <er_oled_char+0x1c0>)
 8002966:	0112      	lsls	r2, r2, #4
 8002968:	440a      	add	r2, r1
 800296a:	4413      	add	r3, r2
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	b29b      	uxth	r3, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	82bb      	strh	r3, [r7, #20]
 8002974:	e043      	b.n	80029fe <er_oled_char+0x146>
        }
        else {
            if(mode) {
 8002976:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800297a:	2b00      	cmp	r3, #0
 800297c:	d01c      	beq.n	80029b8 <er_oled_char+0x100>
            	temp = Font3216[ch - 16][2*i] << 8;
 800297e:	7bfb      	ldrb	r3, [r7, #15]
 8002980:	f1a3 0210 	sub.w	r2, r3, #16
 8002984:	7dfb      	ldrb	r3, [r7, #23]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	493c      	ldr	r1, [pc, #240]	; (8002a7c <er_oled_char+0x1c4>)
 800298a:	0192      	lsls	r2, r2, #6
 800298c:	440a      	add	r2, r1
 800298e:	4413      	add	r3, r2
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	b29b      	uxth	r3, r3
 8002994:	021b      	lsls	r3, r3, #8
 8002996:	82bb      	strh	r3, [r7, #20]
                temp |= Font3216[ch-16][2*i + 1];
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	f1a3 0210 	sub.w	r2, r3, #16
 800299e:	7dfb      	ldrb	r3, [r7, #23]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	3301      	adds	r3, #1
 80029a4:	4935      	ldr	r1, [pc, #212]	; (8002a7c <er_oled_char+0x1c4>)
 80029a6:	0192      	lsls	r2, r2, #6
 80029a8:	440a      	add	r2, r1
 80029aa:	4413      	add	r3, r2
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	8abb      	ldrh	r3, [r7, #20]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	82bb      	strh	r3, [r7, #20]
 80029b6:	e022      	b.n	80029fe <er_oled_char+0x146>
            }
            else {
            	temp = ~Font3216[ch - 16][2*i] << 8;
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	f1a3 0210 	sub.w	r2, r3, #16
 80029be:	7dfb      	ldrb	r3, [r7, #23]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	492e      	ldr	r1, [pc, #184]	; (8002a7c <er_oled_char+0x1c4>)
 80029c4:	0192      	lsls	r2, r2, #6
 80029c6:	440a      	add	r2, r1
 80029c8:	4413      	add	r3, r2
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	021b      	lsls	r3, r3, #8
 80029d4:	82bb      	strh	r3, [r7, #20]
            	temp |= ~Font3216[ch - 16][2*i + 1];
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
 80029d8:	f1a3 0210 	sub.w	r2, r3, #16
 80029dc:	7dfb      	ldrb	r3, [r7, #23]
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	3301      	adds	r3, #1
 80029e2:	4926      	ldr	r1, [pc, #152]	; (8002a7c <er_oled_char+0x1c4>)
 80029e4:	0192      	lsls	r2, r2, #6
 80029e6:	440a      	add	r2, r1
 80029e8:	4413      	add	r3, r2
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	43db      	mvns	r3, r3
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	b21a      	sxth	r2, r3
 80029f4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	b21b      	sxth	r3, r3
 80029fc:	82bb      	strh	r3, [r7, #20]
            }
        }
        for(j =0;j<maxindex;j++)
 80029fe:	2300      	movs	r3, #0
 8002a00:	75bb      	strb	r3, [r7, #22]
 8002a02:	e027      	b.n	8002a54 <er_oled_char+0x19c>
        {
            if(temp & position) er_oled_pixel(x, y, 1, buffer);
 8002a04:	8aba      	ldrh	r2, [r7, #20]
 8002a06:	8a7b      	ldrh	r3, [r7, #18]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d006      	beq.n	8002a1e <er_oled_char+0x166>
 8002a10:	79f8      	ldrb	r0, [r7, #7]
 8002a12:	79b9      	ldrb	r1, [r7, #6]
 8002a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a16:	2201      	movs	r2, #1
 8002a18:	f7ff fedb 	bl	80027d2 <er_oled_pixel>
 8002a1c:	e005      	b.n	8002a2a <er_oled_char+0x172>
            else er_oled_pixel(x, y, 0, buffer);
 8002a1e:	79f8      	ldrb	r0, [r7, #7]
 8002a20:	79b9      	ldrb	r1, [r7, #6]
 8002a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a24:	2200      	movs	r2, #0
 8002a26:	f7ff fed4 	bl	80027d2 <er_oled_pixel>
            temp <<= 1;
 8002a2a:	8abb      	ldrh	r3, [r7, #20]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	82bb      	strh	r3, [r7, #20]
            y++;
 8002a30:	79bb      	ldrb	r3, [r7, #6]
 8002a32:	3301      	adds	r3, #1
 8002a34:	71bb      	strb	r3, [r7, #6]
            if((y-y0) == size)
 8002a36:	79ba      	ldrb	r2, [r7, #6]
 8002a38:	7c3b      	ldrb	r3, [r7, #16]
 8002a3a:	1ad2      	subs	r2, r2, r3
 8002a3c:	793b      	ldrb	r3, [r7, #4]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d105      	bne.n	8002a4e <er_oled_char+0x196>
            {
                y = y0;
 8002a42:	7c3b      	ldrb	r3, [r7, #16]
 8002a44:	71bb      	strb	r3, [r7, #6]
                x++;
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	71fb      	strb	r3, [r7, #7]
                break;
 8002a4c:	e006      	b.n	8002a5c <er_oled_char+0x1a4>
        for(j =0;j<maxindex;j++)
 8002a4e:	7dbb      	ldrb	r3, [r7, #22]
 8002a50:	3301      	adds	r3, #1
 8002a52:	75bb      	strb	r3, [r7, #22]
 8002a54:	7dba      	ldrb	r2, [r7, #22]
 8002a56:	7c7b      	ldrb	r3, [r7, #17]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d3d3      	bcc.n	8002a04 <er_oled_char+0x14c>
    for(i = 0;i<size;i++) {
 8002a5c:	7dfb      	ldrb	r3, [r7, #23]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	75fb      	strb	r3, [r7, #23]
 8002a62:	7dfa      	ldrb	r2, [r7, #23]
 8002a64:	793b      	ldrb	r3, [r7, #4]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	f4ff af49 	bcc.w	80028fe <er_oled_char+0x46>
            }
        }
    }
}
 8002a6c:	bf00      	nop
 8002a6e:	371c      	adds	r7, #28
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd90      	pop	{r4, r7, pc}
 8002a74:	080165c4 	.word	0x080165c4
 8002a78:	08016a38 	.word	0x08016a38
 8002a7c:	08017028 	.word	0x08017028

08002a80 <er_oled_string>:

void er_oled_string(uint8_t x, uint8_t y, const char *pString, uint8_t Size, uint8_t Mode, uint8_t* buffer)
{
 8002a80:	b590      	push	{r4, r7, lr}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	603a      	str	r2, [r7, #0]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	71fb      	strb	r3, [r7, #7]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	71bb      	strb	r3, [r7, #6]
 8002a92:	4613      	mov	r3, r2
 8002a94:	717b      	strb	r3, [r7, #5]
    while (*pString != '\0') {
 8002a96:	e02c      	b.n	8002af2 <er_oled_string+0x72>
        if (x > (WIDTH - Size / 2)) {
 8002a98:	79fa      	ldrb	r2, [r7, #7]
 8002a9a:	797b      	ldrb	r3, [r7, #5]
 8002a9c:	085b      	lsrs	r3, r3, #1
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	f1c3 0348 	rsb	r3, r3, #72	; 0x48
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	dd0f      	ble.n	8002ac8 <er_oled_string+0x48>
            x = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	71fb      	strb	r3, [r7, #7]
            y += Size;
 8002aac:	79ba      	ldrb	r2, [r7, #6]
 8002aae:	797b      	ldrb	r3, [r7, #5]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	71bb      	strb	r3, [r7, #6]
            if (y > (HEIGHT - Size)) {
 8002ab4:	79ba      	ldrb	r2, [r7, #6]
 8002ab6:	797b      	ldrb	r3, [r7, #5]
 8002ab8:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8002abc:	429a      	cmp	r2, r3
 8002abe:	dd03      	ble.n	8002ac8 <er_oled_string+0x48>
                y = x = 0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	71fb      	strb	r3, [r7, #7]
 8002ac4:	79fb      	ldrb	r3, [r7, #7]
 8002ac6:	71bb      	strb	r3, [r7, #6]
            }
        }

        er_oled_char(x, y, *pString, Size, Mode, buffer);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	781a      	ldrb	r2, [r3, #0]
 8002acc:	797c      	ldrb	r4, [r7, #5]
 8002ace:	79b9      	ldrb	r1, [r7, #6]
 8002ad0:	79f8      	ldrb	r0, [r7, #7]
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	9301      	str	r3, [sp, #4]
 8002ad6:	7e3b      	ldrb	r3, [r7, #24]
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	4623      	mov	r3, r4
 8002adc:	f7ff feec 	bl	80028b8 <er_oled_char>
        x += Size / 2;
 8002ae0:	797b      	ldrb	r3, [r7, #5]
 8002ae2:	085b      	lsrs	r3, r3, #1
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	4413      	add	r3, r2
 8002aea:	71fb      	strb	r3, [r7, #7]
        pString++;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	3301      	adds	r3, #1
 8002af0:	603b      	str	r3, [r7, #0]
    while (*pString != '\0') {
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1ce      	bne.n	8002a98 <er_oled_string+0x18>
    }
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd90      	pop	{r4, r7, pc}

08002b02 <er_oled_bitmap>:
        }
    }
}

void er_oled_bitmap(uint8_t x,uint8_t y,const uint8_t *pBmp, uint8_t chWidth, uint8_t chHeight, uint8_t* buffer)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b084      	sub	sp, #16
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	603a      	str	r2, [r7, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	71fb      	strb	r3, [r7, #7]
 8002b10:	460b      	mov	r3, r1
 8002b12:	71bb      	strb	r3, [r7, #6]
 8002b14:	4613      	mov	r3, r2
 8002b16:	717b      	strb	r3, [r7, #5]
	uint8_t i, j, byteWidth = (chWidth + 7)/8;
 8002b18:	797b      	ldrb	r3, [r7, #5]
 8002b1a:	3307      	adds	r3, #7
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	da00      	bge.n	8002b22 <er_oled_bitmap+0x20>
 8002b20:	3307      	adds	r3, #7
 8002b22:	10db      	asrs	r3, r3, #3
 8002b24:	737b      	strb	r3, [r7, #13]
	for(j = 0;j < chHeight;j++){
 8002b26:	2300      	movs	r3, #0
 8002b28:	73bb      	strb	r3, [r7, #14]
 8002b2a:	e02c      	b.n	8002b86 <er_oled_bitmap+0x84>
		for(i = 0;i <chWidth;i++){
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	73fb      	strb	r3, [r7, #15]
 8002b30:	e022      	b.n	8002b78 <er_oled_bitmap+0x76>
			if((pBmp[j * byteWidth + i / 8]) & (128 >> (i & 7))){
 8002b32:	7bbb      	ldrb	r3, [r7, #14]
 8002b34:	7b7a      	ldrb	r2, [r7, #13]
 8002b36:	fb02 f303 	mul.w	r3, r2, r3
 8002b3a:	7bfa      	ldrb	r2, [r7, #15]
 8002b3c:	08d2      	lsrs	r2, r2, #3
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	4413      	add	r3, r2
 8002b42:	461a      	mov	r2, r3
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	4413      	add	r3, r2
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	2280      	movs	r2, #128	; 0x80
 8002b54:	fa42 f303 	asr.w	r3, r2, r3
 8002b58:	400b      	ands	r3, r1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d009      	beq.n	8002b72 <er_oled_bitmap+0x70>
				er_oled_pixel(x + i,y + j, 1, buffer);
 8002b5e:	79fa      	ldrb	r2, [r7, #7]
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	18d0      	adds	r0, r2, r3
 8002b64:	79ba      	ldrb	r2, [r7, #6]
 8002b66:	7bbb      	ldrb	r3, [r7, #14]
 8002b68:	18d1      	adds	r1, r2, r3
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f7ff fe30 	bl	80027d2 <er_oled_pixel>
		for(i = 0;i <chWidth;i++){
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	3301      	adds	r3, #1
 8002b76:	73fb      	strb	r3, [r7, #15]
 8002b78:	7bfa      	ldrb	r2, [r7, #15]
 8002b7a:	797b      	ldrb	r3, [r7, #5]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d3d8      	bcc.n	8002b32 <er_oled_bitmap+0x30>
	for(j = 0;j < chHeight;j++){
 8002b80:	7bbb      	ldrb	r3, [r7, #14]
 8002b82:	3301      	adds	r3, #1
 8002b84:	73bb      	strb	r3, [r7, #14]
 8002b86:	7bba      	ldrb	r2, [r7, #14]
 8002b88:	7e3b      	ldrb	r3, [r7, #24]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d3ce      	bcc.n	8002b2c <er_oled_bitmap+0x2a>
			}
		}
	}
}
 8002b8e:	bf00      	nop
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <er_oled_display>:

void er_oled_display(uint8_t* pBuf)
{    uint8_t page,i;
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b084      	sub	sp, #16
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
    for (page = 0; page < PAGES; page++) {
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	73fb      	strb	r3, [r7, #15]
 8002ba2:	e029      	b.n	8002bf8 <er_oled_display+0x62>
        command(0xB0 + page);/* set page address */
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	3b50      	subs	r3, #80	; 0x50
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2100      	movs	r1, #0
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fd71 	bl	8002694 <I2C_Write_Byte>
        command(0x0c);   /* set low column address */
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	200c      	movs	r0, #12
 8002bb6:	f7ff fd6d 	bl	8002694 <I2C_Write_Byte>
        command(0x11);  /* set high column address */
 8002bba:	2100      	movs	r1, #0
 8002bbc:	2011      	movs	r0, #17
 8002bbe:	f7ff fd69 	bl	8002694 <I2C_Write_Byte>
        for(i = 0; i< WIDTH; i++ ) {
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	73bb      	strb	r3, [r7, #14]
 8002bc6:	e011      	b.n	8002bec <er_oled_display+0x56>
          data(pBuf[i+page*WIDTH]);// write data one
 8002bc8:	7bb9      	ldrb	r1, [r7, #14]
 8002bca:	7bfa      	ldrb	r2, [r7, #15]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	440b      	add	r3, r1
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4413      	add	r3, r2
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2140      	movs	r1, #64	; 0x40
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fd57 	bl	8002694 <I2C_Write_Byte>
        for(i = 0; i< WIDTH; i++ ) {
 8002be6:	7bbb      	ldrb	r3, [r7, #14]
 8002be8:	3301      	adds	r3, #1
 8002bea:	73bb      	strb	r3, [r7, #14]
 8002bec:	7bbb      	ldrb	r3, [r7, #14]
 8002bee:	2b47      	cmp	r3, #71	; 0x47
 8002bf0:	d9ea      	bls.n	8002bc8 <er_oled_display+0x32>
    for (page = 0; page < PAGES; page++) {
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	73fb      	strb	r3, [r7, #15]
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d9d2      	bls.n	8002ba4 <er_oled_display+0xe>
        }
    }
}
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <er_oled_time>:

void er_oled_time(const char *pString)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b0de      	sub	sp, #376	; 0x178
 8002c0a:	af02      	add	r7, sp, #8
 8002c0c:	1d3b      	adds	r3, r7, #4
 8002c0e:	6018      	str	r0, [r3, #0]
	uint8_t oled_buf[WIDTH * HEIGHT / 8];

	er_oled_clear(oled_buf);
 8002c10:	f107 0308 	add.w	r3, r7, #8
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff fdc3 	bl	80027a0 <er_oled_clear>
    er_oled_char( 0, 4, *pString++,  32, 1, oled_buf);
 8002c1a:	1d3b      	adds	r3, r7, #4
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	1d3a      	adds	r2, r7, #4
 8002c20:	1c59      	adds	r1, r3, #1
 8002c22:	6011      	str	r1, [r2, #0]
 8002c24:	781a      	ldrb	r2, [r3, #0]
 8002c26:	f107 0308 	add.w	r3, r7, #8
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	2320      	movs	r3, #32
 8002c32:	2104      	movs	r1, #4
 8002c34:	2000      	movs	r0, #0
 8002c36:	f7ff fe3f 	bl	80028b8 <er_oled_char>
    er_oled_char(16, 4, *pString++ , 32, 1, oled_buf);
 8002c3a:	1d3b      	adds	r3, r7, #4
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	1d3a      	adds	r2, r7, #4
 8002c40:	1c59      	adds	r1, r3, #1
 8002c42:	6011      	str	r1, [r2, #0]
 8002c44:	781a      	ldrb	r2, [r3, #0]
 8002c46:	f107 0308 	add.w	r3, r7, #8
 8002c4a:	9301      	str	r3, [sp, #4]
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	2320      	movs	r3, #32
 8002c52:	2104      	movs	r1, #4
 8002c54:	2010      	movs	r0, #16
 8002c56:	f7ff fe2f 	bl	80028b8 <er_oled_char>
    er_oled_char(40, 4, *pString++ , 32, 1, oled_buf);
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	1d3a      	adds	r2, r7, #4
 8002c60:	1c59      	adds	r1, r3, #1
 8002c62:	6011      	str	r1, [r2, #0]
 8002c64:	781a      	ldrb	r2, [r3, #0]
 8002c66:	f107 0308 	add.w	r3, r7, #8
 8002c6a:	9301      	str	r3, [sp, #4]
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	2320      	movs	r3, #32
 8002c72:	2104      	movs	r1, #4
 8002c74:	2028      	movs	r0, #40	; 0x28
 8002c76:	f7ff fe1f 	bl	80028b8 <er_oled_char>
    er_oled_char(56, 4, *pString   , 32, 1, oled_buf);
 8002c7a:	1d3b      	adds	r3, r7, #4
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	781a      	ldrb	r2, [r3, #0]
 8002c80:	f107 0308 	add.w	r3, r7, #8
 8002c84:	9301      	str	r3, [sp, #4]
 8002c86:	2301      	movs	r3, #1
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	2320      	movs	r3, #32
 8002c8c:	2104      	movs	r1, #4
 8002c8e:	2038      	movs	r0, #56	; 0x38
 8002c90:	f7ff fe12 	bl	80028b8 <er_oled_char>

    er_oled_pixel(36, 12, 1, oled_buf);
 8002c94:	f107 0308 	add.w	r3, r7, #8
 8002c98:	2201      	movs	r2, #1
 8002c9a:	210c      	movs	r1, #12
 8002c9c:	2024      	movs	r0, #36	; 0x24
 8002c9e:	f7ff fd98 	bl	80027d2 <er_oled_pixel>
	er_oled_pixel(36, 13, 1, oled_buf);
 8002ca2:	f107 0308 	add.w	r3, r7, #8
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	210d      	movs	r1, #13
 8002caa:	2024      	movs	r0, #36	; 0x24
 8002cac:	f7ff fd91 	bl	80027d2 <er_oled_pixel>
	er_oled_pixel(36, 14, 1, oled_buf);
 8002cb0:	f107 0308 	add.w	r3, r7, #8
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	210e      	movs	r1, #14
 8002cb8:	2024      	movs	r0, #36	; 0x24
 8002cba:	f7ff fd8a 	bl	80027d2 <er_oled_pixel>
	er_oled_pixel(36, 28, 1, oled_buf);
 8002cbe:	f107 0308 	add.w	r3, r7, #8
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	211c      	movs	r1, #28
 8002cc6:	2024      	movs	r0, #36	; 0x24
 8002cc8:	f7ff fd83 	bl	80027d2 <er_oled_pixel>
	er_oled_pixel(36, 27, 1, oled_buf);
 8002ccc:	f107 0308 	add.w	r3, r7, #8
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	211b      	movs	r1, #27
 8002cd4:	2024      	movs	r0, #36	; 0x24
 8002cd6:	f7ff fd7c 	bl	80027d2 <er_oled_pixel>
	er_oled_pixel(36, 26, 1, oled_buf);
 8002cda:	f107 0308 	add.w	r3, r7, #8
 8002cde:	2201      	movs	r2, #1
 8002ce0:	211a      	movs	r1, #26
 8002ce2:	2024      	movs	r0, #36	; 0x24
 8002ce4:	f7ff fd75 	bl	80027d2 <er_oled_pixel>

	er_oled_display(oled_buf);
 8002ce8:	f107 0308 	add.w	r3, r7, #8
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff ff52 	bl	8002b96 <er_oled_display>
}
 8002cf2:	bf00      	nop
 8002cf4:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <er_oled_print_2digit>:

void er_oled_print_2digit(int value){
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b0e0      	sub	sp, #384	; 0x180
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	1d3b      	adds	r3, r7, #4
 8002d04:	6018      	str	r0, [r3, #0]
  uint8_t oled_buf[WIDTH * HEIGHT / 8] = {0};
 8002d06:	f107 030c 	add.w	r3, r7, #12
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002d10:	461a      	mov	r2, r3
 8002d12:	2100      	movs	r1, #0
 8002d14:	f010 f985 	bl	8013022 <memset>
  char c = (char) ( ((int) '0') + (value % 10));
 8002d18:	1d3b      	adds	r3, r7, #4
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	4b1e      	ldr	r3, [pc, #120]	; (8002d98 <er_oled_print_2digit+0x9c>)
 8002d1e:	fb83 1302 	smull	r1, r3, r3, r2
 8002d22:	1099      	asrs	r1, r3, #2
 8002d24:	17d3      	asrs	r3, r2, #31
 8002d26:	1ac9      	subs	r1, r1, r3
 8002d28:	460b      	mov	r3, r1
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	1ad1      	subs	r1, r2, r3
 8002d32:	b2cb      	uxtb	r3, r1
 8002d34:	3330      	adds	r3, #48	; 0x30
 8002d36:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
  char d = (char) ( ((int) '0') + (value / 10));
 8002d3a:	1d3b      	adds	r3, r7, #4
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a16      	ldr	r2, [pc, #88]	; (8002d98 <er_oled_print_2digit+0x9c>)
 8002d40:	fb82 1203 	smull	r1, r2, r2, r3
 8002d44:	1092      	asrs	r2, r2, #2
 8002d46:	17db      	asrs	r3, r3, #31
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	3330      	adds	r3, #48	; 0x30
 8002d4e:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
  er_oled_char(27, 14, d, 12, 1, oled_buf);
 8002d52:	f897 2176 	ldrb.w	r2, [r7, #374]	; 0x176
 8002d56:	f107 030c 	add.w	r3, r7, #12
 8002d5a:	9301      	str	r3, [sp, #4]
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	230c      	movs	r3, #12
 8002d62:	210e      	movs	r1, #14
 8002d64:	201b      	movs	r0, #27
 8002d66:	f7ff fda7 	bl	80028b8 <er_oled_char>
  er_oled_char(36, 14, c, 12, 1, oled_buf);
 8002d6a:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8002d6e:	f107 030c 	add.w	r3, r7, #12
 8002d72:	9301      	str	r3, [sp, #4]
 8002d74:	2301      	movs	r3, #1
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	230c      	movs	r3, #12
 8002d7a:	210e      	movs	r1, #14
 8002d7c:	2024      	movs	r0, #36	; 0x24
 8002d7e:	f7ff fd9b 	bl	80028b8 <er_oled_char>
  er_oled_display(oled_buf);
 8002d82:	f107 030c 	add.w	r3, r7, #12
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff ff05 	bl	8002b96 <er_oled_display>

}
 8002d8c:	bf00      	nop
 8002d8e:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	66666667 	.word	0x66666667

08002d9c <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <LL_EXTI_EnableIT_0_31>:
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002db8:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <LL_EXTI_EnableIT_0_31+0x24>)
 8002dba:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002dbe:	4905      	ldr	r1, [pc, #20]	; (8002dd4 <LL_EXTI_EnableIT_0_31+0x24>)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	58000800 	.word	0x58000800

08002dd8 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4904      	ldr	r1, [pc, #16]	; (8002df8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	600b      	str	r3, [r1, #0]
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	58000800 	.word	0x58000800

08002dfc <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002e02:	4b0d      	ldr	r3, [pc, #52]	; (8002e38 <ReadRtcSsrValue+0x3c>)
 8002e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <ReadRtcSsrValue+0x3c>)
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002e12:	e005      	b.n	8002e20 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002e18:	4b07      	ldr	r3, [pc, #28]	; (8002e38 <ReadRtcSsrValue+0x3c>)
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d1f5      	bne.n	8002e14 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002e28:	683b      	ldr	r3, [r7, #0]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40002800 	.word	0x40002800

08002e3c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	460a      	mov	r2, r1
 8002e46:	71fb      	strb	r3, [r7, #7]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002e4c:	79ba      	ldrb	r2, [r7, #6]
 8002e4e:	491d      	ldr	r1, [pc, #116]	; (8002ec4 <LinkTimerAfter+0x88>)
 8002e50:	4613      	mov	r3, r2
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	4413      	add	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	440b      	add	r3, r1
 8002e5a:	3315      	adds	r3, #21
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
 8002e62:	2b06      	cmp	r3, #6
 8002e64:	d009      	beq.n	8002e7a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002e66:	7bfa      	ldrb	r2, [r7, #15]
 8002e68:	4916      	ldr	r1, [pc, #88]	; (8002ec4 <LinkTimerAfter+0x88>)
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	4413      	add	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	440b      	add	r3, r1
 8002e74:	3314      	adds	r3, #20
 8002e76:	79fa      	ldrb	r2, [r7, #7]
 8002e78:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002e7a:	79fa      	ldrb	r2, [r7, #7]
 8002e7c:	4911      	ldr	r1, [pc, #68]	; (8002ec4 <LinkTimerAfter+0x88>)
 8002e7e:	4613      	mov	r3, r2
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	4413      	add	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	440b      	add	r3, r1
 8002e88:	3315      	adds	r3, #21
 8002e8a:	7bfa      	ldrb	r2, [r7, #15]
 8002e8c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002e8e:	79fa      	ldrb	r2, [r7, #7]
 8002e90:	490c      	ldr	r1, [pc, #48]	; (8002ec4 <LinkTimerAfter+0x88>)
 8002e92:	4613      	mov	r3, r2
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	4413      	add	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	440b      	add	r3, r1
 8002e9c:	3314      	adds	r3, #20
 8002e9e:	79ba      	ldrb	r2, [r7, #6]
 8002ea0:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002ea2:	79ba      	ldrb	r2, [r7, #6]
 8002ea4:	4907      	ldr	r1, [pc, #28]	; (8002ec4 <LinkTimerAfter+0x88>)
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	4413      	add	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	440b      	add	r3, r1
 8002eb0:	3315      	adds	r3, #21
 8002eb2:	79fa      	ldrb	r2, [r7, #7]
 8002eb4:	701a      	strb	r2, [r3, #0]

  return;
 8002eb6:	bf00      	nop
}
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	200002c8 	.word	0x200002c8

08002ec8 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	460a      	mov	r2, r1
 8002ed2:	71fb      	strb	r3, [r7, #7]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002ed8:	4b29      	ldr	r3, [pc, #164]	; (8002f80 <LinkTimerBefore+0xb8>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	79ba      	ldrb	r2, [r7, #6]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d032      	beq.n	8002f4a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002ee4:	79ba      	ldrb	r2, [r7, #6]
 8002ee6:	4927      	ldr	r1, [pc, #156]	; (8002f84 <LinkTimerBefore+0xbc>)
 8002ee8:	4613      	mov	r3, r2
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	4413      	add	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	440b      	add	r3, r1
 8002ef2:	3314      	adds	r3, #20
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002ef8:	7bfa      	ldrb	r2, [r7, #15]
 8002efa:	4922      	ldr	r1, [pc, #136]	; (8002f84 <LinkTimerBefore+0xbc>)
 8002efc:	4613      	mov	r3, r2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	4413      	add	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	440b      	add	r3, r1
 8002f06:	3315      	adds	r3, #21
 8002f08:	79fa      	ldrb	r2, [r7, #7]
 8002f0a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002f0c:	79fa      	ldrb	r2, [r7, #7]
 8002f0e:	491d      	ldr	r1, [pc, #116]	; (8002f84 <LinkTimerBefore+0xbc>)
 8002f10:	4613      	mov	r3, r2
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	4413      	add	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	440b      	add	r3, r1
 8002f1a:	3315      	adds	r3, #21
 8002f1c:	79ba      	ldrb	r2, [r7, #6]
 8002f1e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002f20:	79fa      	ldrb	r2, [r7, #7]
 8002f22:	4918      	ldr	r1, [pc, #96]	; (8002f84 <LinkTimerBefore+0xbc>)
 8002f24:	4613      	mov	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	4413      	add	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	440b      	add	r3, r1
 8002f2e:	3314      	adds	r3, #20
 8002f30:	7bfa      	ldrb	r2, [r7, #15]
 8002f32:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002f34:	79ba      	ldrb	r2, [r7, #6]
 8002f36:	4913      	ldr	r1, [pc, #76]	; (8002f84 <LinkTimerBefore+0xbc>)
 8002f38:	4613      	mov	r3, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	4413      	add	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	440b      	add	r3, r1
 8002f42:	3314      	adds	r3, #20
 8002f44:	79fa      	ldrb	r2, [r7, #7]
 8002f46:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002f48:	e014      	b.n	8002f74 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002f4a:	79fa      	ldrb	r2, [r7, #7]
 8002f4c:	490d      	ldr	r1, [pc, #52]	; (8002f84 <LinkTimerBefore+0xbc>)
 8002f4e:	4613      	mov	r3, r2
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	4413      	add	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	440b      	add	r3, r1
 8002f58:	3315      	adds	r3, #21
 8002f5a:	79ba      	ldrb	r2, [r7, #6]
 8002f5c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002f5e:	79ba      	ldrb	r2, [r7, #6]
 8002f60:	4908      	ldr	r1, [pc, #32]	; (8002f84 <LinkTimerBefore+0xbc>)
 8002f62:	4613      	mov	r3, r2
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	4413      	add	r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	440b      	add	r3, r1
 8002f6c:	3314      	adds	r3, #20
 8002f6e:	79fa      	ldrb	r2, [r7, #7]
 8002f70:	701a      	strb	r2, [r3, #0]
  return;
 8002f72:	bf00      	nop
}
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	20000358 	.word	0x20000358
 8002f84:	200002c8 	.word	0x200002c8

08002f88 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002f92:	4b4e      	ldr	r3, [pc, #312]	; (80030cc <linkTimer+0x144>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b06      	cmp	r3, #6
 8002f9a:	d118      	bne.n	8002fce <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002f9c:	4b4b      	ldr	r3, [pc, #300]	; (80030cc <linkTimer+0x144>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	4b4b      	ldr	r3, [pc, #300]	; (80030d0 <linkTimer+0x148>)
 8002fa4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002fa6:	4a49      	ldr	r2, [pc, #292]	; (80030cc <linkTimer+0x144>)
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002fac:	79fa      	ldrb	r2, [r7, #7]
 8002fae:	4949      	ldr	r1, [pc, #292]	; (80030d4 <linkTimer+0x14c>)
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	4413      	add	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	440b      	add	r3, r1
 8002fba:	3315      	adds	r3, #21
 8002fbc:	2206      	movs	r2, #6
 8002fbe:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002fc0:	4b45      	ldr	r3, [pc, #276]	; (80030d8 <linkTimer+0x150>)
 8002fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc6:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	81fb      	strh	r3, [r7, #14]
 8002fcc:	e078      	b.n	80030c0 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002fce:	f000 f909 	bl	80031e4 <ReturnTimeElapsed>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002fd6:	79fa      	ldrb	r2, [r7, #7]
 8002fd8:	493e      	ldr	r1, [pc, #248]	; (80030d4 <linkTimer+0x14c>)
 8002fda:	4613      	mov	r3, r2
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	4413      	add	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	440b      	add	r3, r1
 8002fe4:	3308      	adds	r3, #8
 8002fe6:	6819      	ldr	r1, [r3, #0]
 8002fe8:	89fb      	ldrh	r3, [r7, #14]
 8002fea:	79fa      	ldrb	r2, [r7, #7]
 8002fec:	4419      	add	r1, r3
 8002fee:	4839      	ldr	r0, [pc, #228]	; (80030d4 <linkTimer+0x14c>)
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4413      	add	r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	4403      	add	r3, r0
 8002ffa:	3308      	adds	r3, #8
 8002ffc:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002ffe:	79fa      	ldrb	r2, [r7, #7]
 8003000:	4934      	ldr	r1, [pc, #208]	; (80030d4 <linkTimer+0x14c>)
 8003002:	4613      	mov	r3, r2
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4413      	add	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	440b      	add	r3, r1
 800300c:	3308      	adds	r3, #8
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8003012:	4b2e      	ldr	r3, [pc, #184]	; (80030cc <linkTimer+0x144>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	b2db      	uxtb	r3, r3
 8003018:	4619      	mov	r1, r3
 800301a:	4a2e      	ldr	r2, [pc, #184]	; (80030d4 <linkTimer+0x14c>)
 800301c:	460b      	mov	r3, r1
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	440b      	add	r3, r1
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	4413      	add	r3, r2
 8003026:	3308      	adds	r3, #8
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	429a      	cmp	r2, r3
 800302e:	d337      	bcc.n	80030a0 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8003030:	4b26      	ldr	r3, [pc, #152]	; (80030cc <linkTimer+0x144>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8003036:	7b7a      	ldrb	r2, [r7, #13]
 8003038:	4926      	ldr	r1, [pc, #152]	; (80030d4 <linkTimer+0x14c>)
 800303a:	4613      	mov	r3, r2
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	4413      	add	r3, r2
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	440b      	add	r3, r1
 8003044:	3315      	adds	r3, #21
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800304a:	e013      	b.n	8003074 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 800304c:	7b7a      	ldrb	r2, [r7, #13]
 800304e:	4921      	ldr	r1, [pc, #132]	; (80030d4 <linkTimer+0x14c>)
 8003050:	4613      	mov	r3, r2
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	4413      	add	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	440b      	add	r3, r1
 800305a:	3315      	adds	r3, #21
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8003060:	7b7a      	ldrb	r2, [r7, #13]
 8003062:	491c      	ldr	r1, [pc, #112]	; (80030d4 <linkTimer+0x14c>)
 8003064:	4613      	mov	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	4413      	add	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	440b      	add	r3, r1
 800306e:	3315      	adds	r3, #21
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8003074:	7b3b      	ldrb	r3, [r7, #12]
 8003076:	2b06      	cmp	r3, #6
 8003078:	d00b      	beq.n	8003092 <linkTimer+0x10a>
 800307a:	7b3a      	ldrb	r2, [r7, #12]
 800307c:	4915      	ldr	r1, [pc, #84]	; (80030d4 <linkTimer+0x14c>)
 800307e:	4613      	mov	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	4413      	add	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	440b      	add	r3, r1
 8003088:	3308      	adds	r3, #8
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	429a      	cmp	r2, r3
 8003090:	d2dc      	bcs.n	800304c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8003092:	7b7a      	ldrb	r2, [r7, #13]
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	4611      	mov	r1, r2
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff fecf 	bl	8002e3c <LinkTimerAfter>
 800309e:	e00f      	b.n	80030c0 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80030a0:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <linkTimer+0x144>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	4611      	mov	r1, r2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff ff0c 	bl	8002ec8 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80030b0:	4b06      	ldr	r3, [pc, #24]	; (80030cc <linkTimer+0x144>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <linkTimer+0x148>)
 80030b8:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80030ba:	4a04      	ldr	r2, [pc, #16]	; (80030cc <linkTimer+0x144>)
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80030c0:	89fb      	ldrh	r3, [r7, #14]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000358 	.word	0x20000358
 80030d0:	20000359 	.word	0x20000359
 80030d4:	200002c8 	.word	0x200002c8
 80030d8:	2000035c 	.word	0x2000035c

080030dc <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	460a      	mov	r2, r1
 80030e6:	71fb      	strb	r3, [r7, #7]
 80030e8:	4613      	mov	r3, r2
 80030ea:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80030ec:	4b39      	ldr	r3, [pc, #228]	; (80031d4 <UnlinkTimer+0xf8>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	79fa      	ldrb	r2, [r7, #7]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d111      	bne.n	800311c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80030f8:	4b36      	ldr	r3, [pc, #216]	; (80031d4 <UnlinkTimer+0xf8>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	4b36      	ldr	r3, [pc, #216]	; (80031d8 <UnlinkTimer+0xfc>)
 8003100:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8003102:	79fa      	ldrb	r2, [r7, #7]
 8003104:	4935      	ldr	r1, [pc, #212]	; (80031dc <UnlinkTimer+0x100>)
 8003106:	4613      	mov	r3, r2
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	4413      	add	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	440b      	add	r3, r1
 8003110:	3315      	adds	r3, #21
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	b2da      	uxtb	r2, r3
 8003116:	4b2f      	ldr	r3, [pc, #188]	; (80031d4 <UnlinkTimer+0xf8>)
 8003118:	701a      	strb	r2, [r3, #0]
 800311a:	e03e      	b.n	800319a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 800311c:	79fa      	ldrb	r2, [r7, #7]
 800311e:	492f      	ldr	r1, [pc, #188]	; (80031dc <UnlinkTimer+0x100>)
 8003120:	4613      	mov	r3, r2
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4413      	add	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	440b      	add	r3, r1
 800312a:	3314      	adds	r3, #20
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8003130:	79fa      	ldrb	r2, [r7, #7]
 8003132:	492a      	ldr	r1, [pc, #168]	; (80031dc <UnlinkTimer+0x100>)
 8003134:	4613      	mov	r3, r2
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	4413      	add	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	440b      	add	r3, r1
 800313e:	3315      	adds	r3, #21
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8003144:	79f9      	ldrb	r1, [r7, #7]
 8003146:	7bfa      	ldrb	r2, [r7, #15]
 8003148:	4824      	ldr	r0, [pc, #144]	; (80031dc <UnlinkTimer+0x100>)
 800314a:	460b      	mov	r3, r1
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	440b      	add	r3, r1
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	4403      	add	r3, r0
 8003154:	3315      	adds	r3, #21
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	b2d8      	uxtb	r0, r3
 800315a:	4920      	ldr	r1, [pc, #128]	; (80031dc <UnlinkTimer+0x100>)
 800315c:	4613      	mov	r3, r2
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	4413      	add	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	440b      	add	r3, r1
 8003166:	3315      	adds	r3, #21
 8003168:	4602      	mov	r2, r0
 800316a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800316c:	7bbb      	ldrb	r3, [r7, #14]
 800316e:	2b06      	cmp	r3, #6
 8003170:	d013      	beq.n	800319a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8003172:	79f9      	ldrb	r1, [r7, #7]
 8003174:	7bba      	ldrb	r2, [r7, #14]
 8003176:	4819      	ldr	r0, [pc, #100]	; (80031dc <UnlinkTimer+0x100>)
 8003178:	460b      	mov	r3, r1
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	440b      	add	r3, r1
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4403      	add	r3, r0
 8003182:	3314      	adds	r3, #20
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	b2d8      	uxtb	r0, r3
 8003188:	4914      	ldr	r1, [pc, #80]	; (80031dc <UnlinkTimer+0x100>)
 800318a:	4613      	mov	r3, r2
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	4413      	add	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	440b      	add	r3, r1
 8003194:	3314      	adds	r3, #20
 8003196:	4602      	mov	r2, r0
 8003198:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800319a:	79fa      	ldrb	r2, [r7, #7]
 800319c:	490f      	ldr	r1, [pc, #60]	; (80031dc <UnlinkTimer+0x100>)
 800319e:	4613      	mov	r3, r2
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	4413      	add	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	440b      	add	r3, r1
 80031a8:	330c      	adds	r3, #12
 80031aa:	2201      	movs	r2, #1
 80031ac:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80031ae:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <UnlinkTimer+0xf8>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b06      	cmp	r3, #6
 80031b6:	d107      	bne.n	80031c8 <UnlinkTimer+0xec>
 80031b8:	79bb      	ldrb	r3, [r7, #6]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d104      	bne.n	80031c8 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80031be:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <UnlinkTimer+0x104>)
 80031c0:	f04f 32ff 	mov.w	r2, #4294967295
 80031c4:	601a      	str	r2, [r3, #0]
  }

  return;
 80031c6:	bf00      	nop
 80031c8:	bf00      	nop
}
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	20000358 	.word	0x20000358
 80031d8:	20000359 	.word	0x20000359
 80031dc:	200002c8 	.word	0x200002c8
 80031e0:	2000035c 	.word	0x2000035c

080031e4 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80031ea:	4b1a      	ldr	r3, [pc, #104]	; (8003254 <ReturnTimeElapsed+0x70>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f2:	d026      	beq.n	8003242 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80031f4:	f7ff fe02 	bl	8002dfc <ReadRtcSsrValue>
 80031f8:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80031fa:	4b16      	ldr	r3, [pc, #88]	; (8003254 <ReturnTimeElapsed+0x70>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	429a      	cmp	r2, r3
 8003202:	d805      	bhi.n	8003210 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8003204:	4b13      	ldr	r3, [pc, #76]	; (8003254 <ReturnTimeElapsed+0x70>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	607b      	str	r3, [r7, #4]
 800320e:	e00a      	b.n	8003226 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8003210:	4b11      	ldr	r3, [pc, #68]	; (8003258 <ReturnTimeElapsed+0x74>)
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	461a      	mov	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 800321c:	4b0d      	ldr	r3, [pc, #52]	; (8003254 <ReturnTimeElapsed+0x70>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	4413      	add	r3, r2
 8003224:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8003226:	4b0d      	ldr	r3, [pc, #52]	; (800325c <ReturnTimeElapsed+0x78>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	461a      	mov	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	fb02 f303 	mul.w	r3, r2, r3
 8003232:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8003234:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <ReturnTimeElapsed+0x7c>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	461a      	mov	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	40d3      	lsrs	r3, r2
 800323e:	607b      	str	r3, [r7, #4]
 8003240:	e001      	b.n	8003246 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8003242:	2300      	movs	r3, #0
 8003244:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	b29b      	uxth	r3, r3
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	2000035c 	.word	0x2000035c
 8003258:	200003e6 	.word	0x200003e6
 800325c:	200003e5 	.word	0x200003e5
 8003260:	200003e4 	.word	0x200003e4

08003264 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 800326e:	88fb      	ldrh	r3, [r7, #6]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d108      	bne.n	8003286 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8003274:	f7ff fdc2 	bl	8002dfc <ReadRtcSsrValue>
 8003278:	4602      	mov	r2, r0
 800327a:	4b24      	ldr	r3, [pc, #144]	; (800330c <RestartWakeupCounter+0xa8>)
 800327c:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800327e:	2003      	movs	r0, #3
 8003280:	f003 f800 	bl	8006284 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8003284:	e03e      	b.n	8003304 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8003286:	88fb      	ldrh	r3, [r7, #6]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d803      	bhi.n	8003294 <RestartWakeupCounter+0x30>
 800328c:	4b20      	ldr	r3, [pc, #128]	; (8003310 <RestartWakeupCounter+0xac>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d002      	beq.n	800329a <RestartWakeupCounter+0x36>
      Value -= 1;
 8003294:	88fb      	ldrh	r3, [r7, #6]
 8003296:	3b01      	subs	r3, #1
 8003298:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800329a:	bf00      	nop
 800329c:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <RestartWakeupCounter+0xb0>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0f7      	beq.n	800329c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80032ac:	4b19      	ldr	r3, [pc, #100]	; (8003314 <RestartWakeupCounter+0xb0>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	4b17      	ldr	r3, [pc, #92]	; (8003314 <RestartWakeupCounter+0xb0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80032c0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80032c2:	4b15      	ldr	r3, [pc, #84]	; (8003318 <RestartWakeupCounter+0xb4>)
 80032c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80032c8:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80032ca:	2003      	movs	r0, #3
 80032cc:	f002 ffe8 	bl	80062a0 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80032d0:	4b12      	ldr	r3, [pc, #72]	; (800331c <RestartWakeupCounter+0xb8>)
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	0c1b      	lsrs	r3, r3, #16
 80032d6:	041b      	lsls	r3, r3, #16
 80032d8:	88fa      	ldrh	r2, [r7, #6]
 80032da:	4910      	ldr	r1, [pc, #64]	; (800331c <RestartWakeupCounter+0xb8>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80032e0:	f7ff fd8c 	bl	8002dfc <ReadRtcSsrValue>
 80032e4:	4602      	mov	r2, r0
 80032e6:	4b09      	ldr	r3, [pc, #36]	; (800330c <RestartWakeupCounter+0xa8>)
 80032e8:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 80032ea:	4b0a      	ldr	r3, [pc, #40]	; (8003314 <RestartWakeupCounter+0xb0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	4b08      	ldr	r3, [pc, #32]	; (8003314 <RestartWakeupCounter+0xb0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032fc:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80032fe:	f3af 8000 	nop.w
  return ;
 8003302:	bf00      	nop
}
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	2000035c 	.word	0x2000035c
 8003310:	200003e4 	.word	0x200003e4
 8003314:	200003e0 	.word	0x200003e0
 8003318:	58000800 	.word	0x58000800
 800331c:	40002800 	.word	0x40002800

08003320 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003326:	4b47      	ldr	r3, [pc, #284]	; (8003444 <RescheduleTimerList+0x124>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003332:	d108      	bne.n	8003346 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8003334:	bf00      	nop
 8003336:	4b44      	ldr	r3, [pc, #272]	; (8003448 <RescheduleTimerList+0x128>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f7      	bne.n	8003336 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8003346:	4b40      	ldr	r3, [pc, #256]	; (8003448 <RescheduleTimerList+0x128>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	4b3e      	ldr	r3, [pc, #248]	; (8003448 <RescheduleTimerList+0x128>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003358:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800335a:	4b3c      	ldr	r3, [pc, #240]	; (800344c <RescheduleTimerList+0x12c>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8003360:	7bfa      	ldrb	r2, [r7, #15]
 8003362:	493b      	ldr	r1, [pc, #236]	; (8003450 <RescheduleTimerList+0x130>)
 8003364:	4613      	mov	r3, r2
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	4413      	add	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	440b      	add	r3, r1
 800336e:	3308      	adds	r3, #8
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8003374:	f7ff ff36 	bl	80031e4 <ReturnTimeElapsed>
 8003378:	4603      	mov	r3, r0
 800337a:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800337c:	88fb      	ldrh	r3, [r7, #6]
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	429a      	cmp	r2, r3
 8003382:	d205      	bcs.n	8003390 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8003384:	2300      	movs	r3, #0
 8003386:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003388:	4b32      	ldr	r3, [pc, #200]	; (8003454 <RescheduleTimerList+0x134>)
 800338a:	2201      	movs	r2, #1
 800338c:	701a      	strb	r2, [r3, #0]
 800338e:	e04d      	b.n	800342c <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8003390:	88fb      	ldrh	r3, [r7, #6]
 8003392:	4a31      	ldr	r2, [pc, #196]	; (8003458 <RescheduleTimerList+0x138>)
 8003394:	8812      	ldrh	r2, [r2, #0]
 8003396:	b292      	uxth	r2, r2
 8003398:	4413      	add	r3, r2
 800339a:	461a      	mov	r2, r3
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	4293      	cmp	r3, r2
 80033a0:	d906      	bls.n	80033b0 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80033a2:	4b2d      	ldr	r3, [pc, #180]	; (8003458 <RescheduleTimerList+0x138>)
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80033a8:	4b2a      	ldr	r3, [pc, #168]	; (8003454 <RescheduleTimerList+0x134>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	701a      	strb	r2, [r3, #0]
 80033ae:	e03d      	b.n	800342c <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	88fb      	ldrh	r3, [r7, #6]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80033ba:	4b26      	ldr	r3, [pc, #152]	; (8003454 <RescheduleTimerList+0x134>)
 80033bc:	2201      	movs	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80033c0:	e034      	b.n	800342c <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80033c2:	7bfa      	ldrb	r2, [r7, #15]
 80033c4:	4922      	ldr	r1, [pc, #136]	; (8003450 <RescheduleTimerList+0x130>)
 80033c6:	4613      	mov	r3, r2
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	4413      	add	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	440b      	add	r3, r1
 80033d0:	3308      	adds	r3, #8
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	88fb      	ldrh	r3, [r7, #6]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d20a      	bcs.n	80033f0 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80033da:	7bfa      	ldrb	r2, [r7, #15]
 80033dc:	491c      	ldr	r1, [pc, #112]	; (8003450 <RescheduleTimerList+0x130>)
 80033de:	4613      	mov	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4413      	add	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	440b      	add	r3, r1
 80033e8:	3308      	adds	r3, #8
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	e013      	b.n	8003418 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80033f0:	7bfa      	ldrb	r2, [r7, #15]
 80033f2:	4917      	ldr	r1, [pc, #92]	; (8003450 <RescheduleTimerList+0x130>)
 80033f4:	4613      	mov	r3, r2
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	4413      	add	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	440b      	add	r3, r1
 80033fe:	3308      	adds	r3, #8
 8003400:	6819      	ldr	r1, [r3, #0]
 8003402:	88fb      	ldrh	r3, [r7, #6]
 8003404:	7bfa      	ldrb	r2, [r7, #15]
 8003406:	1ac9      	subs	r1, r1, r3
 8003408:	4811      	ldr	r0, [pc, #68]	; (8003450 <RescheduleTimerList+0x130>)
 800340a:	4613      	mov	r3, r2
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	4413      	add	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	4403      	add	r3, r0
 8003414:	3308      	adds	r3, #8
 8003416:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8003418:	7bfa      	ldrb	r2, [r7, #15]
 800341a:	490d      	ldr	r1, [pc, #52]	; (8003450 <RescheduleTimerList+0x130>)
 800341c:	4613      	mov	r3, r2
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	4413      	add	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	440b      	add	r3, r1
 8003426:	3315      	adds	r3, #21
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	2b06      	cmp	r3, #6
 8003430:	d1c7      	bne.n	80033c2 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8003432:	89bb      	ldrh	r3, [r7, #12]
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff ff15 	bl	8003264 <RestartWakeupCounter>

  return ;
 800343a:	bf00      	nop
}
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40002800 	.word	0x40002800
 8003448:	200003e0 	.word	0x200003e0
 800344c:	20000358 	.word	0x20000358
 8003450:	200002c8 	.word	0x200002c8
 8003454:	20000360 	.word	0x20000360
 8003458:	200003e8 	.word	0x200003e8

0800345c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08a      	sub	sp, #40	; 0x28
 8003460:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003462:	f3ef 8310 	mrs	r3, PRIMASK
 8003466:	617b      	str	r3, [r7, #20]
  return(result);
 8003468:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800346c:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800346e:	4b5e      	ldr	r3, [pc, #376]	; (80035e8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	22ca      	movs	r2, #202	; 0xca
 8003476:	625a      	str	r2, [r3, #36]	; 0x24
 8003478:	4b5b      	ldr	r3, [pc, #364]	; (80035e8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2253      	movs	r2, #83	; 0x53
 8003480:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8003482:	4b59      	ldr	r3, [pc, #356]	; (80035e8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	4b57      	ldr	r3, [pc, #348]	; (80035e8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003494:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8003496:	4b55      	ldr	r3, [pc, #340]	; (80035ec <HW_TS_RTC_Wakeup_Handler+0x190>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800349e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80034a2:	4953      	ldr	r1, [pc, #332]	; (80035f0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80034a4:	4613      	mov	r3, r2
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	4413      	add	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	440b      	add	r3, r1
 80034ae:	330c      	adds	r3, #12
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d170      	bne.n	800359a <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80034b8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80034bc:	494c      	ldr	r1, [pc, #304]	; (80035f0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80034be:	4613      	mov	r3, r2
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	4413      	add	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	440b      	add	r3, r1
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80034cc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80034d0:	4947      	ldr	r1, [pc, #284]	; (80035f0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80034d2:	4613      	mov	r3, r2
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	4413      	add	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	440b      	add	r3, r1
 80034dc:	3310      	adds	r3, #16
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80034e2:	4b44      	ldr	r3, [pc, #272]	; (80035f4 <HW_TS_RTC_Wakeup_Handler+0x198>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d04e      	beq.n	800358a <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80034ec:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80034f0:	493f      	ldr	r1, [pc, #252]	; (80035f0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80034f2:	4613      	mov	r3, r2
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	4413      	add	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	440b      	add	r3, r1
 80034fc:	330d      	adds	r3, #13
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b01      	cmp	r3, #1
 8003504:	d125      	bne.n	8003552 <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8003506:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800350a:	2101      	movs	r1, #1
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff fde5 	bl	80030dc <UnlinkTimer>
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800351c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003520:	4933      	ldr	r1, [pc, #204]	; (80035f0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8003522:	4613      	mov	r3, r2
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	4413      	add	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	440b      	add	r3, r1
 800352c:	3304      	adds	r3, #4
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003534:	4611      	mov	r1, r2
 8003536:	4618      	mov	r0, r3
 8003538:	f000 fa46 	bl	80039c8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800353c:	4b2a      	ldr	r3, [pc, #168]	; (80035e8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	22ca      	movs	r2, #202	; 0xca
 8003544:	625a      	str	r2, [r3, #36]	; 0x24
 8003546:	4b28      	ldr	r3, [pc, #160]	; (80035e8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2253      	movs	r2, #83	; 0x53
 800354e:	625a      	str	r2, [r3, #36]	; 0x24
 8003550:	e013      	b.n	800357a <HW_TS_RTC_Wakeup_Handler+0x11e>
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800355c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003560:	4618      	mov	r0, r3
 8003562:	f000 f9a7 	bl	80038b4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003566:	4b20      	ldr	r3, [pc, #128]	; (80035e8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	22ca      	movs	r2, #202	; 0xca
 800356e:	625a      	str	r2, [r3, #36]	; 0x24
 8003570:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2253      	movs	r2, #83	; 0x53
 8003578:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 800357a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800357e:	69fa      	ldr	r2, [r7, #28]
 8003580:	4619      	mov	r1, r3
 8003582:	69b8      	ldr	r0, [r7, #24]
 8003584:	f000 faa6 	bl	8003ad4 <HW_TS_RTC_Int_AppNot>
 8003588:	e024      	b.n	80035d4 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 800358a:	f7ff fec9 	bl	8003320 <RescheduleTimerList>
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f383 8810 	msr	PRIMASK, r3
 8003598:	e01c      	b.n	80035d4 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800359a:	bf00      	nop
 800359c:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0f7      	beq.n	800359c <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80035ac:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80035c0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80035c2:	4b0d      	ldr	r3, [pc, #52]	; (80035f8 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80035c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80035c8:	60da      	str	r2, [r3, #12]
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	607b      	str	r3, [r7, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80035d4:	4b04      	ldr	r3, [pc, #16]	; (80035e8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	22ff      	movs	r2, #255	; 0xff
 80035dc:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80035de:	bf00      	nop
}
 80035e0:	3728      	adds	r7, #40	; 0x28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	200003e0 	.word	0x200003e0
 80035ec:	20000358 	.word	0x20000358
 80035f0:	200002c8 	.word	0x200002c8
 80035f4:	20000360 	.word	0x20000360
 80035f8:	58000800 	.word	0x58000800

080035fc <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	6039      	str	r1, [r7, #0]
 8003606:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8003608:	4a64      	ldr	r2, [pc, #400]	; (800379c <HW_TS_Init+0x1a0>)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800360e:	4b63      	ldr	r3, [pc, #396]	; (800379c <HW_TS_Init+0x1a0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	22ca      	movs	r2, #202	; 0xca
 8003616:	625a      	str	r2, [r3, #36]	; 0x24
 8003618:	4b60      	ldr	r3, [pc, #384]	; (800379c <HW_TS_Init+0x1a0>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2253      	movs	r2, #83	; 0x53
 8003620:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003622:	4b5f      	ldr	r3, [pc, #380]	; (80037a0 <HW_TS_Init+0x1a4>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	4a5e      	ldr	r2, [pc, #376]	; (80037a0 <HW_TS_Init+0x1a4>)
 8003628:	f043 0320 	orr.w	r3, r3, #32
 800362c:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800362e:	4b5c      	ldr	r3, [pc, #368]	; (80037a0 <HW_TS_Init+0x1a4>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	b2db      	uxtb	r3, r3
 800363a:	f1c3 0304 	rsb	r3, r3, #4
 800363e:	b2da      	uxtb	r2, r3
 8003640:	4b58      	ldr	r3, [pc, #352]	; (80037a4 <HW_TS_Init+0x1a8>)
 8003642:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8003644:	4b56      	ldr	r3, [pc, #344]	; (80037a0 <HW_TS_Init+0x1a4>)
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800364c:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8003650:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	fa92 f2a2 	rbit	r2, r2
 8003658:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	2a00      	cmp	r2, #0
 8003662:	d101      	bne.n	8003668 <HW_TS_Init+0x6c>
  {
    return 32U;
 8003664:	2220      	movs	r2, #32
 8003666:	e003      	b.n	8003670 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	fab2 f282 	clz	r2, r2
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	40d3      	lsrs	r3, r2
 8003672:	b2db      	uxtb	r3, r3
 8003674:	3301      	adds	r3, #1
 8003676:	b2da      	uxtb	r2, r3
 8003678:	4b4b      	ldr	r3, [pc, #300]	; (80037a8 <HW_TS_Init+0x1ac>)
 800367a:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800367c:	4b48      	ldr	r3, [pc, #288]	; (80037a0 <HW_TS_Init+0x1a4>)
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	b29b      	uxth	r3, r3
 8003682:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003686:	b29b      	uxth	r3, r3
 8003688:	3301      	adds	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	4b47      	ldr	r3, [pc, #284]	; (80037ac <HW_TS_Init+0x1b0>)
 800368e:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8003690:	4b46      	ldr	r3, [pc, #280]	; (80037ac <HW_TS_Init+0x1b0>)
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	3b01      	subs	r3, #1
 8003696:	4a44      	ldr	r2, [pc, #272]	; (80037a8 <HW_TS_Init+0x1ac>)
 8003698:	7812      	ldrb	r2, [r2, #0]
 800369a:	fb02 f303 	mul.w	r3, r2, r3
 800369e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80036a2:	4a40      	ldr	r2, [pc, #256]	; (80037a4 <HW_TS_Init+0x1a8>)
 80036a4:	7812      	ldrb	r2, [r2, #0]
 80036a6:	40d3      	lsrs	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d904      	bls.n	80036be <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80036b4:	4b3e      	ldr	r3, [pc, #248]	; (80037b0 <HW_TS_Init+0x1b4>)
 80036b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036ba:	801a      	strh	r2, [r3, #0]
 80036bc:	e003      	b.n	80036c6 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	4b3b      	ldr	r3, [pc, #236]	; (80037b0 <HW_TS_Init+0x1b4>)
 80036c4:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80036c6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80036ca:	f7ff fb85 	bl	8002dd8 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80036ce:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80036d2:	f7ff fb6d 	bl	8002db0 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d143      	bne.n	8003764 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80036dc:	4b35      	ldr	r3, [pc, #212]	; (80037b4 <HW_TS_Init+0x1b8>)
 80036de:	2201      	movs	r2, #1
 80036e0:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80036e2:	4b35      	ldr	r3, [pc, #212]	; (80037b8 <HW_TS_Init+0x1bc>)
 80036e4:	f04f 32ff 	mov.w	r2, #4294967295
 80036e8:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80036ea:	2300      	movs	r3, #0
 80036ec:	77fb      	strb	r3, [r7, #31]
 80036ee:	e00c      	b.n	800370a <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80036f0:	7ffa      	ldrb	r2, [r7, #31]
 80036f2:	4932      	ldr	r1, [pc, #200]	; (80037bc <HW_TS_Init+0x1c0>)
 80036f4:	4613      	mov	r3, r2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	4413      	add	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	440b      	add	r3, r1
 80036fe:	330c      	adds	r3, #12
 8003700:	2200      	movs	r2, #0
 8003702:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003704:	7ffb      	ldrb	r3, [r7, #31]
 8003706:	3301      	adds	r3, #1
 8003708:	77fb      	strb	r3, [r7, #31]
 800370a:	7ffb      	ldrb	r3, [r7, #31]
 800370c:	2b05      	cmp	r3, #5
 800370e:	d9ef      	bls.n	80036f0 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8003710:	4b2b      	ldr	r3, [pc, #172]	; (80037c0 <HW_TS_Init+0x1c4>)
 8003712:	2206      	movs	r2, #6
 8003714:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8003716:	4b21      	ldr	r3, [pc, #132]	; (800379c <HW_TS_Init+0x1a0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	4b1f      	ldr	r3, [pc, #124]	; (800379c <HW_TS_Init+0x1a0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003728:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800372a:	4b1c      	ldr	r3, [pc, #112]	; (800379c <HW_TS_Init+0x1a0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	b2da      	uxtb	r2, r3
 8003734:	4b19      	ldr	r3, [pc, #100]	; (800379c <HW_TS_Init+0x1a0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800373e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8003740:	4b20      	ldr	r3, [pc, #128]	; (80037c4 <HW_TS_Init+0x1c8>)
 8003742:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003746:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8003748:	2003      	movs	r0, #3
 800374a:	f002 fda9 	bl	80062a0 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800374e:	4b13      	ldr	r3, [pc, #76]	; (800379c <HW_TS_Init+0x1a0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	4b11      	ldr	r3, [pc, #68]	; (800379c <HW_TS_Init+0x1a0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003760:	609a      	str	r2, [r3, #8]
 8003762:	e00a      	b.n	800377a <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8003764:	4b0d      	ldr	r3, [pc, #52]	; (800379c <HW_TS_Init+0x1a0>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8003774:	2003      	movs	r0, #3
 8003776:	f002 fd85 	bl	8006284 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800377a:	4b08      	ldr	r3, [pc, #32]	; (800379c <HW_TS_Init+0x1a0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	22ff      	movs	r2, #255	; 0xff
 8003782:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8003784:	2200      	movs	r2, #0
 8003786:	2106      	movs	r1, #6
 8003788:	2003      	movs	r0, #3
 800378a:	f002 fd45 	bl	8006218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800378e:	2003      	movs	r0, #3
 8003790:	f002 fd5c 	bl	800624c <HAL_NVIC_EnableIRQ>

  return;
 8003794:	bf00      	nop
}
 8003796:	3720      	adds	r7, #32
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	200003e0 	.word	0x200003e0
 80037a0:	40002800 	.word	0x40002800
 80037a4:	200003e4 	.word	0x200003e4
 80037a8:	200003e5 	.word	0x200003e5
 80037ac:	200003e6 	.word	0x200003e6
 80037b0:	200003e8 	.word	0x200003e8
 80037b4:	20000360 	.word	0x20000360
 80037b8:	2000035c 	.word	0x2000035c
 80037bc:	200002c8 	.word	0x200002c8
 80037c0:	20000358 	.word	0x20000358
 80037c4:	58000800 	.word	0x58000800

080037c8 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b08b      	sub	sp, #44	; 0x2c
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	4613      	mov	r3, r2
 80037d6:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037de:	f3ef 8310 	mrs	r3, PRIMASK
 80037e2:	61fb      	str	r3, [r7, #28]
  return(result);
 80037e4:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80037e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80037e8:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80037ea:	e004      	b.n	80037f6 <HW_TS_Create+0x2e>
  {
    loop++;
 80037ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80037f0:	3301      	adds	r3, #1
 80037f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80037f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80037fa:	2b05      	cmp	r3, #5
 80037fc:	d80c      	bhi.n	8003818 <HW_TS_Create+0x50>
 80037fe:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003802:	492b      	ldr	r1, [pc, #172]	; (80038b0 <HW_TS_Create+0xe8>)
 8003804:	4613      	mov	r3, r2
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	4413      	add	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	440b      	add	r3, r1
 800380e:	330c      	adds	r3, #12
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1e9      	bne.n	80037ec <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003818:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800381c:	2b06      	cmp	r3, #6
 800381e:	d037      	beq.n	8003890 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8003820:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003824:	4922      	ldr	r1, [pc, #136]	; (80038b0 <HW_TS_Create+0xe8>)
 8003826:	4613      	mov	r3, r2
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	4413      	add	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	440b      	add	r3, r1
 8003830:	330c      	adds	r3, #12
 8003832:	2201      	movs	r2, #1
 8003834:	701a      	strb	r2, [r3, #0]
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8003840:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003844:	491a      	ldr	r1, [pc, #104]	; (80038b0 <HW_TS_Create+0xe8>)
 8003846:	4613      	mov	r3, r2
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	4413      	add	r3, r2
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	440b      	add	r3, r1
 8003850:	3310      	adds	r3, #16
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8003856:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800385a:	4915      	ldr	r1, [pc, #84]	; (80038b0 <HW_TS_Create+0xe8>)
 800385c:	4613      	mov	r3, r2
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	4413      	add	r3, r2
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	440b      	add	r3, r1
 8003866:	330d      	adds	r3, #13
 8003868:	79fa      	ldrb	r2, [r7, #7]
 800386a:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800386c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003870:	490f      	ldr	r1, [pc, #60]	; (80038b0 <HW_TS_Create+0xe8>)
 8003872:	4613      	mov	r3, r2
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	4413      	add	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	440b      	add	r3, r1
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003886:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8003888:	2300      	movs	r3, #0
 800388a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800388e:	e007      	b.n	80038a0 <HW_TS_Create+0xd8>
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800389a:	2301      	movs	r3, #1
 800389c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80038a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	372c      	adds	r7, #44	; 0x2c
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	200002c8 	.word	0x200002c8

080038b4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038be:	f3ef 8310 	mrs	r3, PRIMASK
 80038c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80038c4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80038c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80038c8:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80038ca:	2003      	movs	r0, #3
 80038cc:	f002 fccc 	bl	8006268 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80038d0:	4b37      	ldr	r3, [pc, #220]	; (80039b0 <HW_TS_Stop+0xfc>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	22ca      	movs	r2, #202	; 0xca
 80038d8:	625a      	str	r2, [r3, #36]	; 0x24
 80038da:	4b35      	ldr	r3, [pc, #212]	; (80039b0 <HW_TS_Stop+0xfc>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2253      	movs	r2, #83	; 0x53
 80038e2:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80038e4:	79fa      	ldrb	r2, [r7, #7]
 80038e6:	4933      	ldr	r1, [pc, #204]	; (80039b4 <HW_TS_Stop+0x100>)
 80038e8:	4613      	mov	r3, r2
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	4413      	add	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	440b      	add	r3, r1
 80038f2:	330c      	adds	r3, #12
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d148      	bne.n	800398e <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80038fc:	79fb      	ldrb	r3, [r7, #7]
 80038fe:	2100      	movs	r1, #0
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff fbeb 	bl	80030dc <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8003906:	4b2c      	ldr	r3, [pc, #176]	; (80039b8 <HW_TS_Stop+0x104>)
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800390c:	7cfb      	ldrb	r3, [r7, #19]
 800390e:	2b06      	cmp	r3, #6
 8003910:	d135      	bne.n	800397e <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003912:	4b2a      	ldr	r3, [pc, #168]	; (80039bc <HW_TS_Stop+0x108>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800391e:	d108      	bne.n	8003932 <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8003920:	bf00      	nop
 8003922:	4b23      	ldr	r3, [pc, #140]	; (80039b0 <HW_TS_Stop+0xfc>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f003 0304 	and.w	r3, r3, #4
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f7      	bne.n	8003922 <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8003932:	4b1f      	ldr	r3, [pc, #124]	; (80039b0 <HW_TS_Stop+0xfc>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	4b1d      	ldr	r3, [pc, #116]	; (80039b0 <HW_TS_Stop+0xfc>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003944:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8003946:	bf00      	nop
 8003948:	4b19      	ldr	r3, [pc, #100]	; (80039b0 <HW_TS_Stop+0xfc>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f7      	beq.n	8003948 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003958:	4b15      	ldr	r3, [pc, #84]	; (80039b0 <HW_TS_Stop+0xfc>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	b2da      	uxtb	r2, r3
 8003962:	4b13      	ldr	r3, [pc, #76]	; (80039b0 <HW_TS_Stop+0xfc>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800396c:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800396e:	4b14      	ldr	r3, [pc, #80]	; (80039c0 <HW_TS_Stop+0x10c>)
 8003970:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003974:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003976:	2003      	movs	r0, #3
 8003978:	f002 fc92 	bl	80062a0 <HAL_NVIC_ClearPendingIRQ>
 800397c:	e007      	b.n	800398e <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800397e:	4b11      	ldr	r3, [pc, #68]	; (80039c4 <HW_TS_Stop+0x110>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	b2db      	uxtb	r3, r3
 8003984:	7cfa      	ldrb	r2, [r7, #19]
 8003986:	429a      	cmp	r2, r3
 8003988:	d001      	beq.n	800398e <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 800398a:	f7ff fcc9 	bl	8003320 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800398e:	4b08      	ldr	r3, [pc, #32]	; (80039b0 <HW_TS_Stop+0xfc>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	22ff      	movs	r2, #255	; 0xff
 8003996:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003998:	2003      	movs	r0, #3
 800399a:	f002 fc57 	bl	800624c <HAL_NVIC_EnableIRQ>
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80039a8:	bf00      	nop
}
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	200003e0 	.word	0x200003e0
 80039b4:	200002c8 	.word	0x200002c8
 80039b8:	20000358 	.word	0x20000358
 80039bc:	40002800 	.word	0x40002800
 80039c0:	58000800 	.word	0x58000800
 80039c4:	20000359 	.word	0x20000359

080039c8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	6039      	str	r1, [r7, #0]
 80039d2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80039d4:	79fa      	ldrb	r2, [r7, #7]
 80039d6:	493b      	ldr	r1, [pc, #236]	; (8003ac4 <HW_TS_Start+0xfc>)
 80039d8:	4613      	mov	r3, r2
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	4413      	add	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	440b      	add	r3, r1
 80039e2:	330c      	adds	r3, #12
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d103      	bne.n	80039f4 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80039ec:	79fb      	ldrb	r3, [r7, #7]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff ff60 	bl	80038b4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039f4:	f3ef 8310 	mrs	r3, PRIMASK
 80039f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80039fa:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80039fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80039fe:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003a00:	2003      	movs	r0, #3
 8003a02:	f002 fc31 	bl	8006268 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003a06:	4b30      	ldr	r3, [pc, #192]	; (8003ac8 <HW_TS_Start+0x100>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	22ca      	movs	r2, #202	; 0xca
 8003a0e:	625a      	str	r2, [r3, #36]	; 0x24
 8003a10:	4b2d      	ldr	r3, [pc, #180]	; (8003ac8 <HW_TS_Start+0x100>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2253      	movs	r2, #83	; 0x53
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8003a1a:	79fa      	ldrb	r2, [r7, #7]
 8003a1c:	4929      	ldr	r1, [pc, #164]	; (8003ac4 <HW_TS_Start+0xfc>)
 8003a1e:	4613      	mov	r3, r2
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	4413      	add	r3, r2
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	440b      	add	r3, r1
 8003a28:	330c      	adds	r3, #12
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8003a2e:	79fa      	ldrb	r2, [r7, #7]
 8003a30:	4924      	ldr	r1, [pc, #144]	; (8003ac4 <HW_TS_Start+0xfc>)
 8003a32:	4613      	mov	r3, r2
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	4413      	add	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	440b      	add	r3, r1
 8003a3c:	3308      	adds	r3, #8
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8003a42:	79fa      	ldrb	r2, [r7, #7]
 8003a44:	491f      	ldr	r1, [pc, #124]	; (8003ac4 <HW_TS_Start+0xfc>)
 8003a46:	4613      	mov	r3, r2
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	4413      	add	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	440b      	add	r3, r1
 8003a50:	3304      	adds	r3, #4
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8003a56:	79fb      	ldrb	r3, [r7, #7]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff fa95 	bl	8002f88 <linkTimer>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8003a62:	4b1a      	ldr	r3, [pc, #104]	; (8003acc <HW_TS_Start+0x104>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003a68:	4b19      	ldr	r3, [pc, #100]	; (8003ad0 <HW_TS_Start+0x108>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	7c7a      	ldrb	r2, [r7, #17]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d002      	beq.n	8003a7a <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8003a74:	f7ff fc54 	bl	8003320 <RescheduleTimerList>
 8003a78:	e013      	b.n	8003aa2 <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8003a7a:	79fa      	ldrb	r2, [r7, #7]
 8003a7c:	4911      	ldr	r1, [pc, #68]	; (8003ac4 <HW_TS_Start+0xfc>)
 8003a7e:	4613      	mov	r3, r2
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	4413      	add	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	440b      	add	r3, r1
 8003a88:	3308      	adds	r3, #8
 8003a8a:	6819      	ldr	r1, [r3, #0]
 8003a8c:	8a7b      	ldrh	r3, [r7, #18]
 8003a8e:	79fa      	ldrb	r2, [r7, #7]
 8003a90:	1ac9      	subs	r1, r1, r3
 8003a92:	480c      	ldr	r0, [pc, #48]	; (8003ac4 <HW_TS_Start+0xfc>)
 8003a94:	4613      	mov	r3, r2
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	4413      	add	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	4403      	add	r3, r0
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003aa2:	4b09      	ldr	r3, [pc, #36]	; (8003ac8 <HW_TS_Start+0x100>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	22ff      	movs	r2, #255	; 0xff
 8003aaa:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003aac:	2003      	movs	r0, #3
 8003aae:	f002 fbcd 	bl	800624c <HAL_NVIC_EnableIRQ>
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003abc:	bf00      	nop
}
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	200002c8 	.word	0x200002c8
 8003ac8:	200003e0 	.word	0x200003e0
 8003acc:	20000358 	.word	0x20000358
 8003ad0:	20000359 	.word	0x20000359

08003ad4 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	460b      	mov	r3, r1
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4798      	blx	r3

  return;
 8003ae6:	bf00      	nop
}
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607b      	str	r3, [r7, #4]
 8003afa:	4603      	mov	r3, r0
 8003afc:	73fb      	strb	r3, [r7, #15]
 8003afe:	4613      	mov	r3, r2
 8003b00:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8003b06:	2300      	movs	r3, #0
 8003b08:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d000      	beq.n	8003b12 <HW_UART_Transmit_DMA+0x22>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8003b10:	e00e      	b.n	8003b30 <HW_UART_Transmit_DMA+0x40>
            HW_huart1TxCb = cb;
 8003b12:	4a17      	ldr	r2, [pc, #92]	; (8003b70 <HW_UART_Transmit_DMA+0x80>)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8003b18:	4b16      	ldr	r3, [pc, #88]	; (8003b74 <HW_UART_Transmit_DMA+0x84>)
 8003b1a:	4a17      	ldr	r2, [pc, #92]	; (8003b78 <HW_UART_Transmit_DMA+0x88>)
 8003b1c:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003b1e:	89bb      	ldrh	r3, [r7, #12]
 8003b20:	461a      	mov	r2, r3
 8003b22:	68b9      	ldr	r1, [r7, #8]
 8003b24:	4813      	ldr	r0, [pc, #76]	; (8003b74 <HW_UART_Transmit_DMA+0x84>)
 8003b26:	f007 fdbb 	bl	800b6a0 <HAL_UART_Transmit_DMA>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	75fb      	strb	r3, [r7, #23]
            break;
 8003b2e:	bf00      	nop
    }

    switch (hal_status)
 8003b30:	7dfb      	ldrb	r3, [r7, #23]
 8003b32:	2b03      	cmp	r3, #3
 8003b34:	d816      	bhi.n	8003b64 <HW_UART_Transmit_DMA+0x74>
 8003b36:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <HW_UART_Transmit_DMA+0x4c>)
 8003b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3c:	08003b4d 	.word	0x08003b4d
 8003b40:	08003b53 	.word	0x08003b53
 8003b44:	08003b59 	.word	0x08003b59
 8003b48:	08003b5f 	.word	0x08003b5f
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	75bb      	strb	r3, [r7, #22]
            break;
 8003b50:	e009      	b.n	8003b66 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8003b52:	2301      	movs	r3, #1
 8003b54:	75bb      	strb	r3, [r7, #22]
            break;
 8003b56:	e006      	b.n	8003b66 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8003b58:	2302      	movs	r3, #2
 8003b5a:	75bb      	strb	r3, [r7, #22]
            break;
 8003b5c:	e003      	b.n	8003b66 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	75bb      	strb	r3, [r7, #22]
            break;
 8003b62:	e000      	b.n	8003b66 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8003b64:	bf00      	nop
    }

    return hw_status;
 8003b66:	7dbb      	ldrb	r3, [r7, #22]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	20005c6c 	.word	0x20005c6c
 8003b74:	20005dbc 	.word	0x20005dbc
 8003b78:	40013800 	.word	0x40013800

08003b7c <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	4b08      	ldr	r3, [pc, #32]	; (8003bac <HAL_UART_TxCpltCallback+0x30>)
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d000      	beq.n	8003b92 <HAL_UART_TxCpltCallback+0x16>
            }
            break;
#endif

        default:
            break;
 8003b90:	e007      	b.n	8003ba2 <HAL_UART_TxCpltCallback+0x26>
            if(HW_huart1TxCb)
 8003b92:	4b07      	ldr	r3, [pc, #28]	; (8003bb0 <HAL_UART_TxCpltCallback+0x34>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <HAL_UART_TxCpltCallback+0x24>
                HW_huart1TxCb();
 8003b9a:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <HAL_UART_TxCpltCallback+0x34>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4798      	blx	r3
            break;
 8003ba0:	bf00      	nop
    }

    return;
 8003ba2:	bf00      	nop
}
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40013800 	.word	0x40013800
 8003bb0:	20005c6c 	.word	0x20005c6c

08003bb4 <_angle_correction>:





int _angle_correction(int measured_angle){
 8003bb4:	b480      	push	{r7}
 8003bb6:	b089      	sub	sp, #36	; 0x24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  //given a measured angle, get back a warped angle interpolated from measured corrections
  int i=0;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	61fb      	str	r3, [r7, #28]
  while(measured_angle > MAP_ANGLE_MEASURED[i+1]) i++;
 8003bc0:	e002      	b.n	8003bc8 <_angle_correction+0x14>
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	61fb      	str	r3, [r7, #28]
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	4a1f      	ldr	r2, [pc, #124]	; (8003c4c <_angle_correction+0x98>)
 8003bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	dcf4      	bgt.n	8003bc2 <_angle_correction+0xe>

  int low_m = MAP_ANGLE_MEASURED[i];
 8003bd8:	4a1c      	ldr	r2, [pc, #112]	; (8003c4c <_angle_correction+0x98>)
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003be0:	61bb      	str	r3, [r7, #24]
  int high_m = MAP_ANGLE_MEASURED[i+1];
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	3301      	adds	r3, #1
 8003be6:	4a19      	ldr	r2, [pc, #100]	; (8003c4c <_angle_correction+0x98>)
 8003be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bec:	617b      	str	r3, [r7, #20]
  int low_r = MAP_ANGLE_REAL[i];
 8003bee:	4a18      	ldr	r2, [pc, #96]	; (8003c50 <_angle_correction+0x9c>)
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf6:	613b      	str	r3, [r7, #16]
  int high_r = MAP_ANGLE_REAL[i+1];
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	4a14      	ldr	r2, [pc, #80]	; (8003c50 <_angle_correction+0x9c>)
 8003bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c02:	60fb      	str	r3, [r7, #12]

  int scaled = (int)((high_r-low_r)*(measured_angle-low_m)/(float)(high_m-low_m));
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	1a8a      	subs	r2, r1, r2
 8003c10:	fb02 f303 	mul.w	r3, r2, r3
 8003c14:	ee07 3a90 	vmov	s15, r3
 8003c18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	ee07 3a90 	vmov	s15, r3
 8003c26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c32:	ee17 3a90 	vmov	r3, s15
 8003c36:	60bb      	str	r3, [r7, #8]
  return (low_r + scaled);
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	4413      	add	r3, r2
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3724      	adds	r7, #36	; 0x24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	0801730c 	.word	0x0801730c
 8003c50:	080172e8 	.word	0x080172e8

08003c54 <_get_pad_angle>:


int _get_pad_angle(int p1, int p2){
 8003c54:	b590      	push	{r4, r7, lr}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
    //return angle from 0 to 120 degrees between two pads given their two values
    if (p1 == 0) return 120;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <_get_pad_angle+0x14>
 8003c64:	2378      	movs	r3, #120	; 0x78
 8003c66:	e02c      	b.n	8003cc2 <_get_pad_angle+0x6e>
    if (p2 == 0) return 0;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <_get_pad_angle+0x1e>
 8003c6e:	2300      	movs	r3, #0
 8003c70:	e027      	b.n	8003cc2 <_get_pad_angle+0x6e>
    return round(((float)(p2)/(float)(p1+p2))*120.0);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	ee07 3a90 	vmov	s15, r3
 8003c78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	4413      	add	r3, r2
 8003c82:	ee07 3a90 	vmov	s15, r3
 8003c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c8a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003c8e:	ee16 0a90 	vmov	r0, s13
 8003c92:	f7fc fc31 	bl	80004f8 <__aeabi_f2d>
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <_get_pad_angle+0x78>)
 8003c9c:	f7fc fc84 	bl	80005a8 <__aeabi_dmul>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	460c      	mov	r4, r1
 8003ca4:	ec44 3b17 	vmov	d7, r3, r4
 8003ca8:	eeb0 0a47 	vmov.f32	s0, s14
 8003cac:	eef0 0a67 	vmov.f32	s1, s15
 8003cb0:	f011 ff08 	bl	8015ac4 <round>
 8003cb4:	ec54 3b10 	vmov	r3, r4, d0
 8003cb8:	4618      	mov	r0, r3
 8003cba:	4621      	mov	r1, r4
 8003cbc:	f7fc ff24 	bl	8000b08 <__aeabi_d2iz>
 8003cc0:	4603      	mov	r3, r0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd90      	pop	{r4, r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	405e0000 	.word	0x405e0000

08003cd0 <_get_angle>:


int _get_angle(int* c) {
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08a      	sub	sp, #40	; 0x28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  //c[0] is proximity
  //60 min on clock, so 6 deg resolution
  //3 pads.  take top 2 values, map linearly to 120 degree slice.
  int angle = ANGLE_OFFSET;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
  int warped_angle;

  if (c[1] > c[3] && c[2] > c[3]) { //first third, between 1 and 2
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	330c      	adds	r3, #12
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	dd20      	ble.n	8003d2e <_get_angle+0x5e>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3308      	adds	r3, #8
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	330c      	adds	r3, #12
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	dd18      	ble.n	8003d2e <_get_angle+0x5e>
    int pos1 = c[1]-c[3];
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3304      	adds	r3, #4
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	330c      	adds	r3, #12
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	623b      	str	r3, [r7, #32]
    int pos2 = c[2]-c[3];
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3308      	adds	r3, #8
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	330c      	adds	r3, #12
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	61fb      	str	r3, [r7, #28]
    angle += _get_pad_angle(pos1, pos2);
 8003d1c:	69f9      	ldr	r1, [r7, #28]
 8003d1e:	6a38      	ldr	r0, [r7, #32]
 8003d20:	f7ff ff98 	bl	8003c54 <_get_pad_angle>
 8003d24:	4602      	mov	r2, r0
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	4413      	add	r3, r2
 8003d2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (c[1] > c[3] && c[2] > c[3]) { //first third, between 1 and 2
 8003d2c:	e042      	b.n	8003db4 <_get_angle+0xe4>
  }

  else if (c[2] > c[1] && c[3] > c[1]) { //second third, between 2 and 3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3308      	adds	r3, #8
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3304      	adds	r3, #4
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	dd21      	ble.n	8003d82 <_get_angle+0xb2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	330c      	adds	r3, #12
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3304      	adds	r3, #4
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	dd19      	ble.n	8003d82 <_get_angle+0xb2>
    int pos1 = c[2]-c[1];
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3308      	adds	r3, #8
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3304      	adds	r3, #4
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	61bb      	str	r3, [r7, #24]
    int pos2 = c[3]-c[1];
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	330c      	adds	r3, #12
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3304      	adds	r3, #4
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	617b      	str	r3, [r7, #20]
    angle += _get_pad_angle(pos1, pos2) + 120;
 8003d6e:	6979      	ldr	r1, [r7, #20]
 8003d70:	69b8      	ldr	r0, [r7, #24]
 8003d72:	f7ff ff6f 	bl	8003c54 <_get_pad_angle>
 8003d76:	4603      	mov	r3, r0
 8003d78:	3378      	adds	r3, #120	; 0x78
 8003d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7c:	4413      	add	r3, r2
 8003d7e:	627b      	str	r3, [r7, #36]	; 0x24
  else if (c[2] > c[1] && c[3] > c[1]) { //second third, between 2 and 3
 8003d80:	e018      	b.n	8003db4 <_get_angle+0xe4>
  }

  else { //third third, between 3 and 1
    int pos1 = c[3]-c[2];
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	330c      	adds	r3, #12
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3308      	adds	r3, #8
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	613b      	str	r3, [r7, #16]
    int pos2 = c[1]-c[2];
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3304      	adds	r3, #4
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3308      	adds	r3, #8
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	60fb      	str	r3, [r7, #12]
    angle += _get_pad_angle(pos1, pos2) + 240;
 8003da2:	68f9      	ldr	r1, [r7, #12]
 8003da4:	6938      	ldr	r0, [r7, #16]
 8003da6:	f7ff ff55 	bl	8003c54 <_get_pad_angle>
 8003daa:	4603      	mov	r3, r0
 8003dac:	33f0      	adds	r3, #240	; 0xf0
 8003dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db0:	4413      	add	r3, r2
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  angle %= 360;
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	4a0b      	ldr	r2, [pc, #44]	; (8003de4 <_get_angle+0x114>)
 8003db8:	fb82 1203 	smull	r1, r2, r2, r3
 8003dbc:	441a      	add	r2, r3
 8003dbe:	1211      	asrs	r1, r2, #8
 8003dc0:	17da      	asrs	r2, r3, #31
 8003dc2:	1a8a      	subs	r2, r1, r2
 8003dc4:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003dc8:	fb01 f202 	mul.w	r2, r1, r2
 8003dcc:	1a9b      	subs	r3, r3, r2
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
  warped_angle = _angle_correction(angle);
 8003dd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dd2:	f7ff feef 	bl	8003bb4 <_angle_correction>
 8003dd6:	60b8      	str	r0, [r7, #8]

  return warped_angle;
 8003dd8:	68bb      	ldr	r3, [r7, #8]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3728      	adds	r7, #40	; 0x28
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	b60b60b7 	.word	0xb60b60b7

08003de8 <_get_min>:


int _get_min(int* c) {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
	int angle = _get_angle(c);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7ff ff6d 	bl	8003cd0 <_get_angle>
 8003df6:	60f8      	str	r0, [r7, #12]
	return angle/6;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4a04      	ldr	r2, [pc, #16]	; (8003e0c <_get_min+0x24>)
 8003dfc:	fb82 1203 	smull	r1, r2, r2, r3
 8003e00:	17db      	asrs	r3, r3, #31
 8003e02:	1ad3      	subs	r3, r2, r3
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	2aaaaaab 	.word	0x2aaaaaab

08003e10 <_get_min_if_pressed>:


int _get_min_if_pressed(int* c){
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
	//return -1 if not pressed, otherwise return a logical minute value
	if (c[0] <= IQS_TOUCH_THRESH) return -1;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b0a      	cmp	r3, #10
 8003e1e:	dc02      	bgt.n	8003e26 <_get_min_if_pressed+0x16>
 8003e20:	f04f 33ff 	mov.w	r3, #4294967295
 8003e24:	e003      	b.n	8003e2e <_get_min_if_pressed+0x1e>
	else return _get_min(c);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7ff ffde 	bl	8003de8 <_get_min>
 8003e2c:	4603      	mov	r3, r0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <iqs263_poll_raw>:


void iqs263_poll_raw(int* coords){
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b086      	sub	sp, #24
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]

  //uint16_t coords[4];

  uint8_t coords_raw[8];

  iqs263_read(0x06, coords_raw, 8);
 8003e3e:	f107 030c 	add.w	r3, r7, #12
 8003e42:	2208      	movs	r2, #8
 8003e44:	4619      	mov	r1, r3
 8003e46:	2006      	movs	r0, #6
 8003e48:	f000 f888 	bl	8003f5c <iqs263_read>

  for (int i=0; i<4; i++){
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	e019      	b.n	8003e86 <iqs263_poll_raw+0x50>
	  coords[i] = (coords_raw[2*i+1] << 8) | (coords_raw[2*i] & 0xFF);
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	3301      	adds	r3, #1
 8003e58:	f107 0218 	add.w	r2, r7, #24
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003e62:	021a      	lsls	r2, r3, #8
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	f107 0118 	add.w	r1, r7, #24
 8003e6c:	440b      	add	r3, r1
 8003e6e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003e72:	4618      	mov	r0, r3
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	440b      	add	r3, r1
 8003e7c:	4302      	orrs	r2, r0
 8003e7e:	601a      	str	r2, [r3, #0]
  for (int i=0; i<4; i++){
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	3301      	adds	r3, #1
 8003e84:	617b      	str	r3, [r7, #20]
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2b03      	cmp	r3, #3
 8003e8a:	dde2      	ble.n	8003e52 <iqs263_poll_raw+0x1c>
  }
  //c[0] is proximity

}
 8003e8c:	bf00      	nop
 8003e8e:	3718      	adds	r7, #24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <setup_iqs263>:


HAL_StatusTypeDef setup_iqs263() {
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af04      	add	r7, sp, #16

	uint8_t c;
	HAL_StatusTypeDef resp = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	71fb      	strb	r3, [r7, #7]
	uint8_t out_data[5] = {0x00, 0x00, 0x00, 0x00, 0x00};
 8003e9e:	463b      	mov	r3, r7
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	711a      	strb	r2, [r3, #4]

	//check product num
	while (resp == HAL_ERROR){
 8003ea6:	e00e      	b.n	8003ec6 <setup_iqs263+0x32>
		resp = HAL_I2C_Mem_Read(&IQS_I2C_PORT, IQS_ADDR, 0x00, sizeof(uint8_t), &c, sizeof(uint8_t), HAL_MAX_DELAY);
 8003ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8003eac:	9302      	str	r3, [sp, #8]
 8003eae:	2301      	movs	r3, #1
 8003eb0:	9301      	str	r3, [sp, #4]
 8003eb2:	1dbb      	adds	r3, r7, #6
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2188      	movs	r1, #136	; 0x88
 8003ebc:	4826      	ldr	r0, [pc, #152]	; (8003f58 <setup_iqs263+0xc4>)
 8003ebe:	f003 f877 	bl	8006fb0 <HAL_I2C_Mem_Read>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003ec6:	79fb      	ldrb	r3, [r7, #7]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d0ed      	beq.n	8003ea8 <setup_iqs263+0x14>
	}

	if (c != 0x3C) {
 8003ecc:	79bb      	ldrb	r3, [r7, #6]
 8003ece:	2b3c      	cmp	r3, #60	; 0x3c
 8003ed0:	d001      	beq.n	8003ed6 <setup_iqs263+0x42>
	  //ERROR - should read product code 0x3C
	  return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e03c      	b.n	8003f50 <setup_iqs263+0xbc>
	}

	HAL_Delay(100);
 8003ed6:	2064      	movs	r0, #100	; 0x64
 8003ed8:	f001 fbab 	bl	8005632 <HAL_Delay>


	//now write and read 0x0E to address 0x0D
	out_data[0] = 0x0E;
 8003edc:	230e      	movs	r3, #14
 8003ede:	703b      	strb	r3, [r7, #0]

	resp = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003ee4:	e00e      	b.n	8003f04 <setup_iqs263+0x70>
		  resp = HAL_I2C_Mem_Write(&IQS_I2C_PORT, IQS_ADDR, 0x0D, 1, out_data, 1, HAL_MAX_DELAY);
 8003ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eea:	9302      	str	r3, [sp, #8]
 8003eec:	2301      	movs	r3, #1
 8003eee:	9301      	str	r3, [sp, #4]
 8003ef0:	463b      	mov	r3, r7
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	220d      	movs	r2, #13
 8003ef8:	2188      	movs	r1, #136	; 0x88
 8003efa:	4817      	ldr	r0, [pc, #92]	; (8003f58 <setup_iqs263+0xc4>)
 8003efc:	f002 ff44 	bl	8006d88 <HAL_I2C_Mem_Write>
 8003f00:	4603      	mov	r3, r0
 8003f02:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003f04:	79fb      	ldrb	r3, [r7, #7]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d0ed      	beq.n	8003ee6 <setup_iqs263+0x52>
	}
	HAL_Delay(100);
 8003f0a:	2064      	movs	r0, #100	; 0x64
 8003f0c:	f001 fb91 	bl	8005632 <HAL_Delay>
	}

	HAL_Delay(50);
	*/

	out_data[0]=0x00;
 8003f10:	2300      	movs	r3, #0
 8003f12:	703b      	strb	r3, [r7, #0]
	//time average filter coef in bits 5:4 (00 is slowest, 11 is fastest), counts filtering for noise in bits 1:0 (00 is no filter, 11 is slowest).
	out_data[1]=0b00001001;
 8003f14:	2309      	movs	r3, #9
 8003f16:	707b      	strb	r3, [r7, #1]
	//lets go into Low Power mode if we have a prolonged state.	Wake on  movement on CH3
	out_data[2]=0x00;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	70bb      	strb	r3, [r7, #2]
	//out_data[2]=0b10001000;
	//lets disable turbo and only sample at fixed period 40Hz (given 2MHz clock)
	//out_data[3]=0x00;
	out_data[3]=0b00000110;
 8003f1c:	2306      	movs	r3, #6
 8003f1e:	70fb      	strb	r3, [r7, #3]
	out_data[4]=0x00;
 8003f20:	2300      	movs	r3, #0
 8003f22:	713b      	strb	r3, [r7, #4]

	resp = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003f28:	e00e      	b.n	8003f48 <setup_iqs263+0xb4>
		  resp = HAL_I2C_Mem_Write(&IQS_I2C_PORT, IQS_ADDR, 0x09, 1, out_data, 5, HAL_MAX_DELAY);
 8003f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2e:	9302      	str	r3, [sp, #8]
 8003f30:	2305      	movs	r3, #5
 8003f32:	9301      	str	r3, [sp, #4]
 8003f34:	463b      	mov	r3, r7
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	2301      	movs	r3, #1
 8003f3a:	2209      	movs	r2, #9
 8003f3c:	2188      	movs	r1, #136	; 0x88
 8003f3e:	4806      	ldr	r0, [pc, #24]	; (8003f58 <setup_iqs263+0xc4>)
 8003f40:	f002 ff22 	bl	8006d88 <HAL_I2C_Mem_Write>
 8003f44:	4603      	mov	r3, r0
 8003f46:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003f48:	79fb      	ldrb	r3, [r7, #7]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d0ed      	beq.n	8003f2a <setup_iqs263+0x96>
	while (resp == HAL_ERROR){
	    resp = HAL_I2C_Mem_Read(&IQS_I2C_PORT, IQS_ADDR, 0x09, 1, readback, 5, HAL_MAX_DELAY);
	}
	*/

    return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	20005c7c 	.word	0x20005c7c

08003f5c <iqs263_read>:

  return HAL_OK;

}

HAL_StatusTypeDef iqs263_read(uint8_t addr, uint8_t* buf, uint8_t size) {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af04      	add	r7, sp, #16
 8003f62:	4603      	mov	r3, r0
 8003f64:	6039      	str	r1, [r7, #0]
 8003f66:	71fb      	strb	r3, [r7, #7]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	71bb      	strb	r3, [r7, #6]


  const uint16_t max_tries = 300;
 8003f6c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003f70:	817b      	strh	r3, [r7, #10]
  uint16_t current_tries = 0;
 8003f72:	2300      	movs	r3, #0
 8003f74:	81fb      	strh	r3, [r7, #14]

  HAL_StatusTypeDef resp = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	737b      	strb	r3, [r7, #13]

  while (resp == HAL_ERROR && current_tries < max_tries){
 8003f7a:	e014      	b.n	8003fa6 <iqs263_read+0x4a>
    resp = HAL_I2C_Mem_Read(&IQS_I2C_PORT, IQS_ADDR, addr, 1, buf, size, HAL_MAX_DELAY);
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	b299      	uxth	r1, r3
 8003f80:	79bb      	ldrb	r3, [r7, #6]
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	f04f 32ff 	mov.w	r2, #4294967295
 8003f88:	9202      	str	r2, [sp, #8]
 8003f8a:	9301      	str	r3, [sp, #4]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	2301      	movs	r3, #1
 8003f92:	460a      	mov	r2, r1
 8003f94:	2188      	movs	r1, #136	; 0x88
 8003f96:	480d      	ldr	r0, [pc, #52]	; (8003fcc <iqs263_read+0x70>)
 8003f98:	f003 f80a 	bl	8006fb0 <HAL_I2C_Mem_Read>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	737b      	strb	r3, [r7, #13]
    current_tries++;
 8003fa0:	89fb      	ldrh	r3, [r7, #14]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	81fb      	strh	r3, [r7, #14]
  while (resp == HAL_ERROR && current_tries < max_tries){
 8003fa6:	7b7b      	ldrb	r3, [r7, #13]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d103      	bne.n	8003fb4 <iqs263_read+0x58>
 8003fac:	89fa      	ldrh	r2, [r7, #14]
 8003fae:	897b      	ldrh	r3, [r7, #10]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d3e3      	bcc.n	8003f7c <iqs263_read+0x20>
  }

  if (current_tries >= max_tries) {
 8003fb4:	89fa      	ldrh	r2, [r7, #14]
 8003fb6:	897b      	ldrh	r3, [r7, #10]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d301      	bcc.n	8003fc0 <iqs263_read+0x64>
	  return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e000      	b.n	8003fc2 <iqs263_read+0x66>
  }

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0

}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	20005c7c 	.word	0x20005c7c

08003fd0 <iqs263_get_min_if_pressed>:
	iqs263_poll_raw(coords);
	return _get_min(coords);
}


int iqs263_get_min_if_pressed(){
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
	int* coords[4] = {0x0000, 0x0000, 0x0000, 0x0000};
 8003fd6:	463b      	mov	r3, r7
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	605a      	str	r2, [r3, #4]
 8003fde:	609a      	str	r2, [r3, #8]
 8003fe0:	60da      	str	r2, [r3, #12]
	iqs263_poll_raw(coords);
 8003fe2:	463b      	mov	r3, r7
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff ff26 	bl	8003e36 <iqs263_poll_raw>
	return _get_min_if_pressed(coords);
 8003fea:	463b      	mov	r3, r7
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff ff0f 	bl	8003e10 <_get_min_if_pressed>
 8003ff2:	4603      	mov	r3, r0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <LL_EXTI_DisableIT_0_31>:
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004004:	4b07      	ldr	r3, [pc, #28]	; (8004024 <LL_EXTI_DisableIT_0_31+0x28>)
 8004006:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	43db      	mvns	r3, r3
 800400e:	4905      	ldr	r1, [pc, #20]	; (8004024 <LL_EXTI_DisableIT_0_31+0x28>)
 8004010:	4013      	ands	r3, r2
 8004012:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	58000800 	.word	0x58000800

08004028 <LL_EXTI_DisableIT_32_63>:
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8004030:	4b07      	ldr	r3, [pc, #28]	; (8004050 <LL_EXTI_DisableIT_32_63+0x28>)
 8004032:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	43db      	mvns	r3, r3
 800403a:	4905      	ldr	r1, [pc, #20]	; (8004050 <LL_EXTI_DisableIT_32_63+0x28>)
 800403c:	4013      	ands	r3, r2
 800403e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	58000800 	.word	0x58000800

08004054 <LL_RCC_HSE_SetCapacitorTuning>:
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800405c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004060:	4a0a      	ldr	r2, [pc, #40]	; (800408c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8004062:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8004066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800406e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	021b      	lsls	r3, r3, #8
 8004076:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	cafecafe 	.word	0xcafecafe

08004090 <LL_RCC_LSE_SetDriveCapability>:
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8004098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800409c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a0:	f023 0218 	bic.w	r2, r3, #24
 80040a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80040c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040d4:	bf00      	nop
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80040de:	b480      	push	{r7}
 80040e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80040e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040f6:	bf00      	nop
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8004104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004108:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800410c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004110:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004114:	d101      	bne.n	800411a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8004126:	b480      	push	{r7}
 8004128:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800412a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800412e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800413a:	d101      	bne.n	8004140 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 800413c:	2301      	movs	r3, #1
 800413e:	e000      	b.n	8004142 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <LL_AHB2_GRP1_EnableClock>:
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004158:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800415a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4313      	orrs	r3, r2
 8004162:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004168:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4013      	ands	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004170:	68fb      	ldr	r3, [r7, #12]
}
 8004172:	bf00      	nop
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <LL_AHB3_GRP1_EnableClock>:
{
 800417e:	b480      	push	{r7}
 8004180:	b085      	sub	sp, #20
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8004186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800418a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800418c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4313      	orrs	r3, r2
 8004194:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8004196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800419a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4013      	ands	r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80041a2:	68fb      	ldr	r3, [r7, #12]
}
 80041a4:	bf00      	nop
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	041b      	lsls	r3, r3, #16
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	605a      	str	r2, [r3, #4]
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <LL_C1_IPCC_DisableReceiveChannel>:
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	431a      	orrs	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	605a      	str	r2, [r3, #4]
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <LL_C2_IPCC_DisableTransmitChannel>:
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
 80041fe:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	695a      	ldr	r2, [r3, #20]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	041b      	lsls	r3, r3, #16
 8004208:	431a      	orrs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	615a      	str	r2, [r3, #20]
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <LL_C2_IPCC_DisableReceiveChannel>:
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	695a      	ldr	r2, [r3, #20]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	615a      	str	r2, [r3, #20]
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <LL_C1_IPCC_ClearFlag_CHx>:
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	609a      	str	r2, [r3, #8]
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <LL_C2_IPCC_ClearFlag_CHx>:
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	619a      	str	r2, [r3, #24]
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004278:	4b05      	ldr	r3, [pc, #20]	; (8004290 <LL_LPM_EnableSleep+0x1c>)
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	4a04      	ldr	r2, [pc, #16]	; (8004290 <LL_LPM_EnableSleep+0x1c>)
 800427e:	f023 0304 	bic.w	r3, r3, #4
 8004282:	6113      	str	r3, [r2, #16]
}
 8004284:	bf00      	nop
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	e000ed00 	.word	0xe000ed00

08004294 <main>:
static void Reset_BackupDomain( void );
static void Init_Exti( void );
static void Config_HSE(void);

int main(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004298:	4b46      	ldr	r3, [pc, #280]	; (80043b4 <main+0x120>)
 800429a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800429e:	611a      	str	r2, [r3, #16]

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80042a0:	f001 fe40 	bl	8005f24 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 80042a4:	f001 f977 	bl	8005596 <Reset_Device>
  Config_HSE();
 80042a8:	f001 f961 	bl	800556e <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80042ac:	f000 f8ce 	bl	800444c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 80042b0:	f001 f956 	bl	8005560 <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 80042b4:	f001 f9b1 	bl	800561a <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80042b8:	f000 fb2a 	bl	8004910 <MX_GPIO_Init>
  MX_I2C1_Init();
 80042bc:	f000 f994 	bl	80045e8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80042c0:	f000 fa38 	bl	8004734 <MX_SPI1_Init>
  MX_RF_Init();
 80042c4:	f000 f9d0 	bl	8004668 <MX_RF_Init>
  MX_RTC_Init();
 80042c8:	f000 f9d6 	bl	8004678 <MX_RTC_Init>
  MX_TIM1_Init();
 80042cc:	f000 fa70 	bl	80047b0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80042d0:	f00a fc7a 	bl	800ebc8 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
    /* creation of rtcMutex */
    rtcMutexHandle = osMutexNew(&rtcMutex_attributes);
 80042d4:	4838      	ldr	r0, [pc, #224]	; (80043b8 <main+0x124>)
 80042d6:	f00a feab 	bl	800f030 <osMutexNew>
 80042da:	4602      	mov	r2, r0
 80042dc:	4b37      	ldr	r3, [pc, #220]	; (80043bc <main+0x128>)
 80042de:	601a      	str	r2, [r3, #0]

    /* creation of screenTextMutex */
    screenTextMutexHandle = osMutexNew(&screenTextMutex_attributes);
 80042e0:	4837      	ldr	r0, [pc, #220]	; (80043c0 <main+0x12c>)
 80042e2:	f00a fea5 	bl	800f030 <osMutexNew>
 80042e6:	4602      	mov	r2, r0
 80042e8:	4b36      	ldr	r3, [pc, #216]	; (80043c4 <main+0x130>)
 80042ea:	601a      	str	r2, [r3, #0]

    /* creation of ledStateMutex */
    ledStateMutexHandle = osMutexNew(&ledStateMutex_attributes);
 80042ec:	4836      	ldr	r0, [pc, #216]	; (80043c8 <main+0x134>)
 80042ee:	f00a fe9f 	bl	800f030 <osMutexNew>
 80042f2:	4602      	mov	r2, r0
 80042f4:	4b35      	ldr	r3, [pc, #212]	; (80043cc <main+0x138>)
 80042f6:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_QUEUES */
      /* creation of bleTXqueue */
      bleTXqueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &bleTXqueue_attributes);
 80042f8:	4a35      	ldr	r2, [pc, #212]	; (80043d0 <main+0x13c>)
 80042fa:	2102      	movs	r1, #2
 80042fc:	2010      	movs	r0, #16
 80042fe:	f00b f93b 	bl	800f578 <osMessageQueueNew>
 8004302:	4602      	mov	r2, r0
 8004304:	4b33      	ldr	r3, [pc, #204]	; (80043d4 <main+0x140>)
 8004306:	601a      	str	r2, [r3, #0]

      /* creation of bleRXqueue */
      bleRXqueueHandle = osMessageQueueNew (16, sizeof(P2PS_STM_Data_t), &bleRXqueue_attributes);
 8004308:	4a33      	ldr	r2, [pc, #204]	; (80043d8 <main+0x144>)
 800430a:	2108      	movs	r1, #8
 800430c:	2010      	movs	r0, #16
 800430e:	f00b f933 	bl	800f578 <osMessageQueueNew>
 8004312:	4602      	mov	r2, r0
 8004314:	4b31      	ldr	r3, [pc, #196]	; (80043dc <main+0x148>)
 8004316:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
        /* creation of screenUpdate */
        screenUpdateHandle = osThreadNew(startScreenUpdate, NULL, &screenUpdate_attributes);
 8004318:	4a31      	ldr	r2, [pc, #196]	; (80043e0 <main+0x14c>)
 800431a:	2100      	movs	r1, #0
 800431c:	4831      	ldr	r0, [pc, #196]	; (80043e4 <main+0x150>)
 800431e:	f00a fcbd 	bl	800ec9c <osThreadNew>
 8004322:	4602      	mov	r2, r0
 8004324:	4b30      	ldr	r3, [pc, #192]	; (80043e8 <main+0x154>)
 8004326:	601a      	str	r2, [r3, #0]

        /* creation of LEDControl */
        LEDControlHandle = osThreadNew(startLEDControl, NULL, &LEDControl_attributes);
 8004328:	4a30      	ldr	r2, [pc, #192]	; (80043ec <main+0x158>)
 800432a:	2100      	movs	r1, #0
 800432c:	4830      	ldr	r0, [pc, #192]	; (80043f0 <main+0x15c>)
 800432e:	f00a fcb5 	bl	800ec9c <osThreadNew>
 8004332:	4602      	mov	r2, r0
 8004334:	4b2f      	ldr	r3, [pc, #188]	; (80043f4 <main+0x160>)
 8004336:	601a      	str	r2, [r3, #0]

        /* creation of buttonPress */
        buttonPressHandle = osThreadNew(startButtonPress, NULL, &buttonPress_attributes);
 8004338:	4a2f      	ldr	r2, [pc, #188]	; (80043f8 <main+0x164>)
 800433a:	2100      	movs	r1, #0
 800433c:	482f      	ldr	r0, [pc, #188]	; (80043fc <main+0x168>)
 800433e:	f00a fcad 	bl	800ec9c <osThreadNew>
 8004342:	4602      	mov	r2, r0
 8004344:	4b2e      	ldr	r3, [pc, #184]	; (8004400 <main+0x16c>)
 8004346:	601a      	str	r2, [r3, #0]

        /* creation of vibrateControl */
        vibrateControlHandle = osThreadNew(startVibrateControl, NULL, &vibrateControl_attributes);
 8004348:	4a2e      	ldr	r2, [pc, #184]	; (8004404 <main+0x170>)
 800434a:	2100      	movs	r1, #0
 800434c:	482e      	ldr	r0, [pc, #184]	; (8004408 <main+0x174>)
 800434e:	f00a fca5 	bl	800ec9c <osThreadNew>
 8004352:	4602      	mov	r2, r0
 8004354:	4b2d      	ldr	r3, [pc, #180]	; (800440c <main+0x178>)
 8004356:	601a      	str	r2, [r3, #0]

        /* creation of rtcSecondTick */
        rtcSecondTickHandle = osThreadNew(startRTCTick, NULL, &rtcSecondTick_attributes);
 8004358:	4a2d      	ldr	r2, [pc, #180]	; (8004410 <main+0x17c>)
 800435a:	2100      	movs	r1, #0
 800435c:	482d      	ldr	r0, [pc, #180]	; (8004414 <main+0x180>)
 800435e:	f00a fc9d 	bl	800ec9c <osThreadNew>
 8004362:	4602      	mov	r2, r0
 8004364:	4b2c      	ldr	r3, [pc, #176]	; (8004418 <main+0x184>)
 8004366:	601a      	str	r2, [r3, #0]

        /* creation of bleTX */
        bleTXHandle = osThreadNew(startBLETX, NULL, &bleTX_attributes);
 8004368:	4a2c      	ldr	r2, [pc, #176]	; (800441c <main+0x188>)
 800436a:	2100      	movs	r1, #0
 800436c:	482c      	ldr	r0, [pc, #176]	; (8004420 <main+0x18c>)
 800436e:	f00a fc95 	bl	800ec9c <osThreadNew>
 8004372:	4602      	mov	r2, r0
 8004374:	4b2b      	ldr	r3, [pc, #172]	; (8004424 <main+0x190>)
 8004376:	601a      	str	r2, [r3, #0]

        /* creation of bleRX */
        bleRXHandle = osThreadNew(startBLERX, NULL, &bleRX_attributes);
 8004378:	4a2b      	ldr	r2, [pc, #172]	; (8004428 <main+0x194>)
 800437a:	2100      	movs	r1, #0
 800437c:	482b      	ldr	r0, [pc, #172]	; (800442c <main+0x198>)
 800437e:	f00a fc8d 	bl	800ec9c <osThreadNew>
 8004382:	4602      	mov	r2, r0
 8004384:	4b2a      	ldr	r3, [pc, #168]	; (8004430 <main+0x19c>)
 8004386:	601a      	str	r2, [r3, #0]

        /* creation of LEDTimer */
        LEDTimerHandle = osThreadNew(startLEDTimer, NULL, &LEDTimer_attributes);
 8004388:	4a2a      	ldr	r2, [pc, #168]	; (8004434 <main+0x1a0>)
 800438a:	2100      	movs	r1, #0
 800438c:	482a      	ldr	r0, [pc, #168]	; (8004438 <main+0x1a4>)
 800438e:	f00a fc85 	bl	800ec9c <osThreadNew>
 8004392:	4602      	mov	r2, r0
 8004394:	4b29      	ldr	r3, [pc, #164]	; (800443c <main+0x1a8>)
 8004396:	601a      	str	r2, [r3, #0]

        /* creation of touchRead */
        touchReadHandle = osThreadNew(startTouchRead, NULL, &touchRead_attributes);
 8004398:	4a29      	ldr	r2, [pc, #164]	; (8004440 <main+0x1ac>)
 800439a:	2100      	movs	r1, #0
 800439c:	4829      	ldr	r0, [pc, #164]	; (8004444 <main+0x1b0>)
 800439e:	f00a fc7d 	bl	800ec9c <osThreadNew>
 80043a2:	4602      	mov	r2, r0
 80043a4:	4b28      	ldr	r3, [pc, #160]	; (8004448 <main+0x1b4>)
 80043a6:	601a      	str	r2, [r3, #0]

  /* Init code for STM32_WPAN */
  APPE_Init();
 80043a8:	f7fd fef4 	bl	8002194 <APPE_Init>
  /* Start scheduler */
  osKernelStart();
 80043ac:	f00a fc40 	bl	800ec30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  while (1){}
 80043b0:	e7fe      	b.n	80043b0 <main+0x11c>
 80043b2:	bf00      	nop
 80043b4:	58004000 	.word	0x58004000
 80043b8:	08017774 	.word	0x08017774
 80043bc:	20005c44 	.word	0x20005c44
 80043c0:	08017784 	.word	0x08017784
 80043c4:	20005ccc 	.word	0x20005ccc
 80043c8:	08017794 	.word	0x08017794
 80043cc:	20005e84 	.word	0x20005e84
 80043d0:	08017744 	.word	0x08017744
 80043d4:	20005f34 	.word	0x20005f34
 80043d8:	0801775c 	.word	0x0801775c
 80043dc:	20005c38 	.word	0x20005c38
 80043e0:	08017600 	.word	0x08017600
 80043e4:	08004a9d 	.word	0x08004a9d
 80043e8:	20005e74 	.word	0x20005e74
 80043ec:	08017624 	.word	0x08017624
 80043f0:	08004c8d 	.word	0x08004c8d
 80043f4:	20005c74 	.word	0x20005c74
 80043f8:	08017648 	.word	0x08017648
 80043fc:	08004f21 	.word	0x08004f21
 8004400:	20005c70 	.word	0x20005c70
 8004404:	0801766c 	.word	0x0801766c
 8004408:	08005049 	.word	0x08005049
 800440c:	20005f38 	.word	0x20005f38
 8004410:	08017690 	.word	0x08017690
 8004414:	08005085 	.word	0x08005085
 8004418:	20005e80 	.word	0x20005e80
 800441c:	080176b4 	.word	0x080176b4
 8004420:	0800528d 	.word	0x0800528d
 8004424:	20005cc8 	.word	0x20005cc8
 8004428:	080176d8 	.word	0x080176d8
 800442c:	080052bd 	.word	0x080052bd
 8004430:	20005e7c 	.word	0x20005e7c
 8004434:	080176fc 	.word	0x080176fc
 8004438:	080053b9 	.word	0x080053b9
 800443c:	20005c78 	.word	0x20005c78
 8004440:	08017720 	.word	0x08017720
 8004444:	08005445 	.word	0x08005445
 8004448:	20005e78 	.word	0x20005e78

0800444c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b0ae      	sub	sp, #184	; 0xb8
 8004450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004452:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004456:	2248      	movs	r2, #72	; 0x48
 8004458:	2100      	movs	r1, #0
 800445a:	4618      	mov	r0, r3
 800445c:	f00e fde1 	bl	8013022 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004460:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	605a      	str	r2, [r3, #4]
 800446a:	609a      	str	r2, [r3, #8]
 800446c:	60da      	str	r2, [r3, #12]
 800446e:	611a      	str	r2, [r3, #16]
 8004470:	615a      	str	r2, [r3, #20]
 8004472:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004474:	1d3b      	adds	r3, r7, #4
 8004476:	2250      	movs	r2, #80	; 0x50
 8004478:	2100      	movs	r1, #0
 800447a:	4618      	mov	r0, r3
 800447c:	f00e fdd1 	bl	8013022 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004480:	f003 f964 	bl	800774c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004484:	2000      	movs	r0, #0
 8004486:	f7ff fe03 	bl	8004090 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800448a:	4b2f      	ldr	r3, [pc, #188]	; (8004548 <SystemClock_Config+0xfc>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004492:	4a2d      	ldr	r2, [pc, #180]	; (8004548 <SystemClock_Config+0xfc>)
 8004494:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	4b2b      	ldr	r3, [pc, #172]	; (8004548 <SystemClock_Config+0xfc>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044a2:	603b      	str	r3, [r7, #0]
 80044a4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80044a6:	2307      	movs	r3, #7
 80044a8:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80044aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044ae:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80044b0:	2301      	movs	r3, #1
 80044b2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80044b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80044ba:	2340      	movs	r3, #64	; 0x40
 80044bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80044c0:	2300      	movs	r3, #0
 80044c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80044ca:	4618      	mov	r0, r3
 80044cc:	f003 fcde 	bl	8007e8c <HAL_RCC_OscConfig>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80044d6:	f001 f8e3 	bl	80056a0 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80044da:	236f      	movs	r3, #111	; 0x6f
 80044dc:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80044de:	2302      	movs	r3, #2
 80044e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80044e2:	2300      	movs	r3, #0
 80044e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80044e6:	2300      	movs	r3, #0
 80044e8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80044ea:	2300      	movs	r3, #0
 80044ec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80044ee:	2300      	movs	r3, #0
 80044f0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80044f2:	2300      	movs	r3, #0
 80044f4:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80044f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80044fa:	2101      	movs	r1, #1
 80044fc:	4618      	mov	r0, r3
 80044fe:	f004 f851 	bl	80085a4 <HAL_RCC_ClockConfig>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004508:	f001 f8ca 	bl	80056a0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 800450c:	f643 0303 	movw	r3, #14339	; 0x3803
 8004510:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004512:	2300      	movs	r3, #0
 8004514:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004516:	2300      	movs	r3, #0
 8004518:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800451a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800451e:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8004520:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004524:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8004526:	2302      	movs	r3, #2
 8004528:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800452a:	2310      	movs	r3, #16
 800452c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800452e:	1d3b      	adds	r3, r7, #4
 8004530:	4618      	mov	r0, r3
 8004532:	f004 fca8 	bl	8008e86 <HAL_RCCEx_PeriphCLKConfig>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800453c:	f001 f8b0 	bl	80056a0 <Error_Handler>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  /* USER CODE END Smps */
}
 8004540:	bf00      	nop
 8004542:	37b8      	adds	r7, #184	; 0xb8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	58000400 	.word	0x58000400

0800454c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004550:	4b23      	ldr	r3, [pc, #140]	; (80045e0 <MX_USART1_UART_Init+0x94>)
 8004552:	4a24      	ldr	r2, [pc, #144]	; (80045e4 <MX_USART1_UART_Init+0x98>)
 8004554:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004556:	4b22      	ldr	r3, [pc, #136]	; (80045e0 <MX_USART1_UART_Init+0x94>)
 8004558:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800455c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800455e:	4b20      	ldr	r3, [pc, #128]	; (80045e0 <MX_USART1_UART_Init+0x94>)
 8004560:	2200      	movs	r2, #0
 8004562:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004564:	4b1e      	ldr	r3, [pc, #120]	; (80045e0 <MX_USART1_UART_Init+0x94>)
 8004566:	2200      	movs	r2, #0
 8004568:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800456a:	4b1d      	ldr	r3, [pc, #116]	; (80045e0 <MX_USART1_UART_Init+0x94>)
 800456c:	2200      	movs	r2, #0
 800456e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004570:	4b1b      	ldr	r3, [pc, #108]	; (80045e0 <MX_USART1_UART_Init+0x94>)
 8004572:	220c      	movs	r2, #12
 8004574:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004576:	4b1a      	ldr	r3, [pc, #104]	; (80045e0 <MX_USART1_UART_Init+0x94>)
 8004578:	2200      	movs	r2, #0
 800457a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 800457c:	4b18      	ldr	r3, [pc, #96]	; (80045e0 <MX_USART1_UART_Init+0x94>)
 800457e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004582:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004584:	4b16      	ldr	r3, [pc, #88]	; (80045e0 <MX_USART1_UART_Init+0x94>)
 8004586:	2200      	movs	r2, #0
 8004588:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800458a:	4b15      	ldr	r3, [pc, #84]	; (80045e0 <MX_USART1_UART_Init+0x94>)
 800458c:	2200      	movs	r2, #0
 800458e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004590:	4b13      	ldr	r3, [pc, #76]	; (80045e0 <MX_USART1_UART_Init+0x94>)
 8004592:	2200      	movs	r2, #0
 8004594:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004596:	4812      	ldr	r0, [pc, #72]	; (80045e0 <MX_USART1_UART_Init+0x94>)
 8004598:	f007 f832 	bl	800b600 <HAL_UART_Init>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80045a2:	f001 f87d 	bl	80056a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80045a6:	2100      	movs	r1, #0
 80045a8:	480d      	ldr	r0, [pc, #52]	; (80045e0 <MX_USART1_UART_Init+0x94>)
 80045aa:	f007 fd77 	bl	800c09c <HAL_UARTEx_SetTxFifoThreshold>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80045b4:	f001 f874 	bl	80056a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80045b8:	2100      	movs	r1, #0
 80045ba:	4809      	ldr	r0, [pc, #36]	; (80045e0 <MX_USART1_UART_Init+0x94>)
 80045bc:	f007 fdac 	bl	800c118 <HAL_UARTEx_SetRxFifoThreshold>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80045c6:	f001 f86b 	bl	80056a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80045ca:	4805      	ldr	r0, [pc, #20]	; (80045e0 <MX_USART1_UART_Init+0x94>)
 80045cc:	f007 fd2d 	bl	800c02a <HAL_UARTEx_DisableFifoMode>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80045d6:	f001 f863 	bl	80056a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80045da:	bf00      	nop
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	20005dbc 	.word	0x20005dbc
 80045e4:	40013800 	.word	0x40013800

080045e8 <MX_I2C1_Init>:


static void MX_I2C1_Init(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80045ec:	4b1b      	ldr	r3, [pc, #108]	; (800465c <MX_I2C1_Init+0x74>)
 80045ee:	4a1c      	ldr	r2, [pc, #112]	; (8004660 <MX_I2C1_Init+0x78>)
 80045f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 80045f2:	4b1a      	ldr	r3, [pc, #104]	; (800465c <MX_I2C1_Init+0x74>)
 80045f4:	4a1b      	ldr	r2, [pc, #108]	; (8004664 <MX_I2C1_Init+0x7c>)
 80045f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80045f8:	4b18      	ldr	r3, [pc, #96]	; (800465c <MX_I2C1_Init+0x74>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80045fe:	4b17      	ldr	r3, [pc, #92]	; (800465c <MX_I2C1_Init+0x74>)
 8004600:	2201      	movs	r2, #1
 8004602:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004604:	4b15      	ldr	r3, [pc, #84]	; (800465c <MX_I2C1_Init+0x74>)
 8004606:	2200      	movs	r2, #0
 8004608:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800460a:	4b14      	ldr	r3, [pc, #80]	; (800465c <MX_I2C1_Init+0x74>)
 800460c:	2200      	movs	r2, #0
 800460e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004610:	4b12      	ldr	r3, [pc, #72]	; (800465c <MX_I2C1_Init+0x74>)
 8004612:	2200      	movs	r2, #0
 8004614:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004616:	4b11      	ldr	r3, [pc, #68]	; (800465c <MX_I2C1_Init+0x74>)
 8004618:	2200      	movs	r2, #0
 800461a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800461c:	4b0f      	ldr	r3, [pc, #60]	; (800465c <MX_I2C1_Init+0x74>)
 800461e:	2200      	movs	r2, #0
 8004620:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004622:	480e      	ldr	r0, [pc, #56]	; (800465c <MX_I2C1_Init+0x74>)
 8004624:	f002 fa2c 	bl	8006a80 <HAL_I2C_Init>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800462e:	f001 f837 	bl	80056a0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004632:	2100      	movs	r1, #0
 8004634:	4809      	ldr	r0, [pc, #36]	; (800465c <MX_I2C1_Init+0x74>)
 8004636:	f002 fff1 	bl	800761c <HAL_I2CEx_ConfigAnalogFilter>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004640:	f001 f82e 	bl	80056a0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004644:	2100      	movs	r1, #0
 8004646:	4805      	ldr	r0, [pc, #20]	; (800465c <MX_I2C1_Init+0x74>)
 8004648:	f003 f833 	bl	80076b2 <HAL_I2CEx_ConfigDigitalFilter>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004652:	f001 f825 	bl	80056a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004656:	bf00      	nop
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20005c7c 	.word	0x20005c7c
 8004660:	40005400 	.word	0x40005400
 8004664:	00300f38 	.word	0x00300f38

08004668 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800466c:	bf00      	nop
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
	...

08004678 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800467e:	4b2b      	ldr	r3, [pc, #172]	; (800472c <MX_RTC_Init+0xb4>)
 8004680:	4a2b      	ldr	r2, [pc, #172]	; (8004730 <MX_RTC_Init+0xb8>)
 8004682:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004684:	4b29      	ldr	r3, [pc, #164]	; (800472c <MX_RTC_Init+0xb4>)
 8004686:	2200      	movs	r2, #0
 8004688:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800468a:	4b28      	ldr	r3, [pc, #160]	; (800472c <MX_RTC_Init+0xb4>)
 800468c:	227f      	movs	r2, #127	; 0x7f
 800468e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004690:	4b26      	ldr	r3, [pc, #152]	; (800472c <MX_RTC_Init+0xb4>)
 8004692:	22ff      	movs	r2, #255	; 0xff
 8004694:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004696:	4b25      	ldr	r3, [pc, #148]	; (800472c <MX_RTC_Init+0xb4>)
 8004698:	2200      	movs	r2, #0
 800469a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800469c:	4b23      	ldr	r3, [pc, #140]	; (800472c <MX_RTC_Init+0xb4>)
 800469e:	2200      	movs	r2, #0
 80046a0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80046a2:	4b22      	ldr	r3, [pc, #136]	; (800472c <MX_RTC_Init+0xb4>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80046a8:	4b20      	ldr	r3, [pc, #128]	; (800472c <MX_RTC_Init+0xb4>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80046ae:	481f      	ldr	r0, [pc, #124]	; (800472c <MX_RTC_Init+0xb4>)
 80046b0:	f004 fe6f 	bl	8009392 <HAL_RTC_Init>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80046ba:	f000 fff1 	bl	80056a0 <Error_Handler>
  /* Enable RTC registers write protection */
  //LL_RTC_EnableWriteProtection(RTC);

  /** Initialize RTC and set the Time and Date
    */
    RTC_TimeTypeDef sTime = {0};
 80046be:	1d3b      	adds	r3, r7, #4
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	605a      	str	r2, [r3, #4]
 80046c6:	609a      	str	r2, [r3, #8]
 80046c8:	60da      	str	r2, [r3, #12]
 80046ca:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 80046cc:	2300      	movs	r3, #0
 80046ce:	603b      	str	r3, [r7, #0]

    sTime.Hours = 0x0;
 80046d0:	2300      	movs	r3, #0
 80046d2:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 0x0;
 80046d4:	2300      	movs	r3, #0
 80046d6:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 0x0;
 80046d8:	2300      	movs	r3, #0
 80046da:	71bb      	strb	r3, [r7, #6]
    sTime.SubSeconds = 0x0;
 80046dc:	2300      	movs	r3, #0
 80046de:	60bb      	str	r3, [r7, #8]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80046e0:	2300      	movs	r3, #0
 80046e2:	613b      	str	r3, [r7, #16]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80046e4:	2300      	movs	r3, #0
 80046e6:	617b      	str	r3, [r7, #20]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80046e8:	1d3b      	adds	r3, r7, #4
 80046ea:	2201      	movs	r2, #1
 80046ec:	4619      	mov	r1, r3
 80046ee:	480f      	ldr	r0, [pc, #60]	; (800472c <MX_RTC_Init+0xb4>)
 80046f0:	f004 feed 	bl	80094ce <HAL_RTC_SetTime>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <MX_RTC_Init+0x86>
    {
      Error_Handler();
 80046fa:	f000 ffd1 	bl	80056a0 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80046fe:	2301      	movs	r3, #1
 8004700:	703b      	strb	r3, [r7, #0]
    sDate.Month = RTC_MONTH_JANUARY;
 8004702:	2301      	movs	r3, #1
 8004704:	707b      	strb	r3, [r7, #1]
    sDate.Date = 0x1;
 8004706:	2301      	movs	r3, #1
 8004708:	70bb      	strb	r3, [r7, #2]
    sDate.Year = 0x0;
 800470a:	2300      	movs	r3, #0
 800470c:	70fb      	strb	r3, [r7, #3]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800470e:	463b      	mov	r3, r7
 8004710:	2201      	movs	r2, #1
 8004712:	4619      	mov	r1, r3
 8004714:	4805      	ldr	r0, [pc, #20]	; (800472c <MX_RTC_Init+0xb4>)
 8004716:	f004 fffa 	bl	800970e <HAL_RTC_SetDate>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <MX_RTC_Init+0xac>
    {
      Error_Handler();
 8004720:	f000 ffbe 	bl	80056a0 <Error_Handler>
    }


  /* USER CODE END RTC_Init 2 */

}
 8004724:	bf00      	nop
 8004726:	3718      	adds	r7, #24
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	20005e50 	.word	0x20005e50
 8004730:	40002800 	.word	0x40002800

08004734 <MX_SPI1_Init>:



/* USER CODE BEGIN 4 */
static void MX_SPI1_Init(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004738:	4b1b      	ldr	r3, [pc, #108]	; (80047a8 <MX_SPI1_Init+0x74>)
 800473a:	4a1c      	ldr	r2, [pc, #112]	; (80047ac <MX_SPI1_Init+0x78>)
 800473c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800473e:	4b1a      	ldr	r3, [pc, #104]	; (80047a8 <MX_SPI1_Init+0x74>)
 8004740:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004744:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8004746:	4b18      	ldr	r3, [pc, #96]	; (80047a8 <MX_SPI1_Init+0x74>)
 8004748:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800474c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800474e:	4b16      	ldr	r3, [pc, #88]	; (80047a8 <MX_SPI1_Init+0x74>)
 8004750:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004754:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004756:	4b14      	ldr	r3, [pc, #80]	; (80047a8 <MX_SPI1_Init+0x74>)
 8004758:	2200      	movs	r2, #0
 800475a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800475c:	4b12      	ldr	r3, [pc, #72]	; (80047a8 <MX_SPI1_Init+0x74>)
 800475e:	2200      	movs	r2, #0
 8004760:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004762:	4b11      	ldr	r3, [pc, #68]	; (80047a8 <MX_SPI1_Init+0x74>)
 8004764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004768:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800476a:	4b0f      	ldr	r3, [pc, #60]	; (80047a8 <MX_SPI1_Init+0x74>)
 800476c:	2200      	movs	r2, #0
 800476e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004770:	4b0d      	ldr	r3, [pc, #52]	; (80047a8 <MX_SPI1_Init+0x74>)
 8004772:	2200      	movs	r2, #0
 8004774:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004776:	4b0c      	ldr	r3, [pc, #48]	; (80047a8 <MX_SPI1_Init+0x74>)
 8004778:	2200      	movs	r2, #0
 800477a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800477c:	4b0a      	ldr	r3, [pc, #40]	; (80047a8 <MX_SPI1_Init+0x74>)
 800477e:	2200      	movs	r2, #0
 8004780:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004782:	4b09      	ldr	r3, [pc, #36]	; (80047a8 <MX_SPI1_Init+0x74>)
 8004784:	2207      	movs	r2, #7
 8004786:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004788:	4b07      	ldr	r3, [pc, #28]	; (80047a8 <MX_SPI1_Init+0x74>)
 800478a:	2200      	movs	r2, #0
 800478c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800478e:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <MX_SPI1_Init+0x74>)
 8004790:	2208      	movs	r2, #8
 8004792:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004794:	4804      	ldr	r0, [pc, #16]	; (80047a8 <MX_SPI1_Init+0x74>)
 8004796:	f005 f977 	bl	8009a88 <HAL_SPI_Init>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80047a0:	f000 ff7e 	bl	80056a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80047a4:	bf00      	nop
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	20005f3c 	.word	0x20005f3c
 80047ac:	40013000 	.word	0x40013000

080047b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b09c      	sub	sp, #112	; 0x70
 80047b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80047b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	605a      	str	r2, [r3, #4]
 80047c0:	609a      	str	r2, [r3, #8]
 80047c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	605a      	str	r2, [r3, #4]
 80047ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80047d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	605a      	str	r2, [r3, #4]
 80047da:	609a      	str	r2, [r3, #8]
 80047dc:	60da      	str	r2, [r3, #12]
 80047de:	611a      	str	r2, [r3, #16]
 80047e0:	615a      	str	r2, [r3, #20]
 80047e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80047e4:	1d3b      	adds	r3, r7, #4
 80047e6:	2234      	movs	r2, #52	; 0x34
 80047e8:	2100      	movs	r1, #0
 80047ea:	4618      	mov	r0, r3
 80047ec:	f00e fc19 	bl	8013022 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80047f0:	4b45      	ldr	r3, [pc, #276]	; (8004908 <MX_TIM1_Init+0x158>)
 80047f2:	4a46      	ldr	r2, [pc, #280]	; (800490c <MX_TIM1_Init+0x15c>)
 80047f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80047f6:	4b44      	ldr	r3, [pc, #272]	; (8004908 <MX_TIM1_Init+0x158>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047fc:	4b42      	ldr	r3, [pc, #264]	; (8004908 <MX_TIM1_Init+0x158>)
 80047fe:	2200      	movs	r2, #0
 8004800:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8004802:	4b41      	ldr	r3, [pc, #260]	; (8004908 <MX_TIM1_Init+0x158>)
 8004804:	2264      	movs	r2, #100	; 0x64
 8004806:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004808:	4b3f      	ldr	r3, [pc, #252]	; (8004908 <MX_TIM1_Init+0x158>)
 800480a:	2200      	movs	r2, #0
 800480c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800480e:	4b3e      	ldr	r3, [pc, #248]	; (8004908 <MX_TIM1_Init+0x158>)
 8004810:	2200      	movs	r2, #0
 8004812:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004814:	4b3c      	ldr	r3, [pc, #240]	; (8004908 <MX_TIM1_Init+0x158>)
 8004816:	2200      	movs	r2, #0
 8004818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800481a:	483b      	ldr	r0, [pc, #236]	; (8004908 <MX_TIM1_Init+0x158>)
 800481c:	f005 fca2 	bl	800a164 <HAL_TIM_Base_Init>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004826:	f000 ff3b 	bl	80056a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800482a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800482e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004830:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004834:	4619      	mov	r1, r3
 8004836:	4834      	ldr	r0, [pc, #208]	; (8004908 <MX_TIM1_Init+0x158>)
 8004838:	f006 f92e 	bl	800aa98 <HAL_TIM_ConfigClockSource>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004842:	f000 ff2d 	bl	80056a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004846:	4830      	ldr	r0, [pc, #192]	; (8004908 <MX_TIM1_Init+0x158>)
 8004848:	f005 fd32 	bl	800a2b0 <HAL_TIM_PWM_Init>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004852:	f000 ff25 	bl	80056a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004856:	2300      	movs	r3, #0
 8004858:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800485a:	2300      	movs	r3, #0
 800485c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800485e:	2300      	movs	r3, #0
 8004860:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004862:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004866:	4619      	mov	r1, r3
 8004868:	4827      	ldr	r0, [pc, #156]	; (8004908 <MX_TIM1_Init+0x158>)
 800486a:	f006 fd9b 	bl	800b3a4 <HAL_TIMEx_MasterConfigSynchronization>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8004874:	f000 ff14 	bl	80056a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004878:	2360      	movs	r3, #96	; 0x60
 800487a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 100;
 800487c:	2364      	movs	r3, #100	; 0x64
 800487e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004880:	2300      	movs	r3, #0
 8004882:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004884:	2300      	movs	r3, #0
 8004886:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004888:	2304      	movs	r3, #4
 800488a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800488c:	2300      	movs	r3, #0
 800488e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004890:	2300      	movs	r3, #0
 8004892:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004894:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004898:	2200      	movs	r2, #0
 800489a:	4619      	mov	r1, r3
 800489c:	481a      	ldr	r0, [pc, #104]	; (8004908 <MX_TIM1_Init+0x158>)
 800489e:	f005 ffeb 	bl	800a878 <HAL_TIM_PWM_ConfigChannel>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80048a8:	f000 fefa 	bl	80056a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80048ac:	2300      	movs	r3, #0
 80048ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80048b0:	2300      	movs	r3, #0
 80048b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80048b8:	2300      	movs	r3, #0
 80048ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80048bc:	2300      	movs	r3, #0
 80048be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80048c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80048ca:	2300      	movs	r3, #0
 80048cc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80048ce:	2300      	movs	r3, #0
 80048d0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80048d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80048d8:	2300      	movs	r3, #0
 80048da:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80048dc:	2300      	movs	r3, #0
 80048de:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80048e0:	2300      	movs	r3, #0
 80048e2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80048e4:	1d3b      	adds	r3, r7, #4
 80048e6:	4619      	mov	r1, r3
 80048e8:	4807      	ldr	r0, [pc, #28]	; (8004908 <MX_TIM1_Init+0x158>)
 80048ea:	f006 fdbb 	bl	800b464 <HAL_TIMEx_ConfigBreakDeadTime>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80048f4:	f000 fed4 	bl	80056a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80048f8:	4803      	ldr	r0, [pc, #12]	; (8004908 <MX_TIM1_Init+0x158>)
 80048fa:	f001 f931 	bl	8005b60 <HAL_TIM_MspPostInit>

}
 80048fe:	bf00      	nop
 8004900:	3770      	adds	r7, #112	; 0x70
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	20005e88 	.word	0x20005e88
 800490c:	40012c00 	.word	0x40012c00

08004910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004916:	1d3b      	adds	r3, r7, #4
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	605a      	str	r2, [r3, #4]
 800491e:	609a      	str	r2, [r3, #8]
 8004920:	60da      	str	r2, [r3, #12]
 8004922:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004924:	2004      	movs	r0, #4
 8004926:	f7ff fc11 	bl	800414c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800492a:	2002      	movs	r0, #2
 800492c:	f7ff fc0e 	bl	800414c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004930:	2001      	movs	r0, #1
 8004932:	f7ff fc0b 	bl	800414c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_RESET);
 8004936:	2200      	movs	r2, #0
 8004938:	2101      	movs	r1, #1
 800493a:	4821      	ldr	r0, [pc, #132]	; (80049c0 <MX_GPIO_Init+0xb0>)
 800493c:	f002 f84c 	bl	80069d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OLED_RESET_Pin */
  GPIO_InitStruct.Pin = OLED_RESET_Pin;
 8004940:	2301      	movs	r3, #1
 8004942:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004944:	2301      	movs	r3, #1
 8004946:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004948:	2300      	movs	r3, #0
 800494a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800494c:	2300      	movs	r3, #0
 800494e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(OLED_RESET_GPIO_Port, &GPIO_InitStruct);
 8004950:	1d3b      	adds	r3, r7, #4
 8004952:	4619      	mov	r1, r3
 8004954:	481a      	ldr	r0, [pc, #104]	; (80049c0 <MX_GPIO_Init+0xb0>)
 8004956:	f001 feb7 	bl	80066c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 800495a:	2338      	movs	r3, #56	; 0x38
 800495c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800495e:	4b19      	ldr	r3, [pc, #100]	; (80049c4 <MX_GPIO_Init+0xb4>)
 8004960:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004962:	2301      	movs	r3, #1
 8004964:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004966:	1d3b      	adds	r3, r7, #4
 8004968:	4619      	mov	r1, r3
 800496a:	4815      	ldr	r0, [pc, #84]	; (80049c0 <MX_GPIO_Init+0xb0>)
 800496c:	f001 feac 	bl	80066c8 <HAL_GPIO_Init>

  /*Configure SPI_NSS pin to be GPIO, pulled up*/
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004970:	2310      	movs	r3, #16
 8004972:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004974:	2301      	movs	r3, #1
 8004976:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004978:	2301      	movs	r3, #1
 800497a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800497c:	1d3b      	adds	r3, r7, #4
 800497e:	4619      	mov	r1, r3
 8004980:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004984:	f001 fea0 	bl	80066c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 15, 0);
 8004988:	2200      	movs	r2, #0
 800498a:	210f      	movs	r1, #15
 800498c:	2009      	movs	r0, #9
 800498e:	f001 fc43 	bl	8006218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004992:	2009      	movs	r0, #9
 8004994:	f001 fc5a 	bl	800624c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 8004998:	2200      	movs	r2, #0
 800499a:	210f      	movs	r1, #15
 800499c:	200a      	movs	r0, #10
 800499e:	f001 fc3b 	bl	8006218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80049a2:	200a      	movs	r0, #10
 80049a4:	f001 fc52 	bl	800624c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 15, 0);
 80049a8:	2200      	movs	r2, #0
 80049aa:	210f      	movs	r1, #15
 80049ac:	2017      	movs	r0, #23
 80049ae:	f001 fc33 	bl	8006218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80049b2:	2017      	movs	r0, #23
 80049b4:	f001 fc4a 	bl	800624c <HAL_NVIC_EnableIRQ>

}
 80049b8:	bf00      	nop
 80049ba:	3718      	adds	r7, #24
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	48000400 	.word	0x48000400
 80049c4:	10310000 	.word	0x10310000

080049c8 <HAL_GPIO_EXTI_Callback>:
static inline void clear_bit(long *x, int bitNum) {
    *x &= (~(1L << bitNum));
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af02      	add	r7, sp, #8
 80049ce:	4603      	mov	r3, r0
 80049d0:	80fb      	strh	r3, [r7, #6]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80049d2:	2300      	movs	r3, #0
 80049d4:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(buttonPressHandle, GPIO_Pin, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 80049d6:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <HAL_GPIO_EXTI_Callback+0x40>)
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	88f9      	ldrh	r1, [r7, #6]
 80049dc:	f107 030c 	add.w	r3, r7, #12
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	2300      	movs	r3, #0
 80049e4:	2203      	movs	r2, #3
 80049e6:	f00d fe2d 	bl	8012644 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d007      	beq.n	8004a00 <HAL_GPIO_EXTI_Callback+0x38>
 80049f0:	4b06      	ldr	r3, [pc, #24]	; (8004a0c <HAL_GPIO_EXTI_Callback+0x44>)
 80049f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	f3bf 8f6f 	isb	sy

}
 8004a00:	bf00      	nop
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	20005c70 	.word	0x20005c70
 8004a0c:	e000ed04 	.word	0xe000ed04

08004a10 <get_RTC_hrmin>:
    return full_rtc_val;

}


void get_RTC_hrmin(char *dest) {
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08c      	sub	sp, #48	; 0x30
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]

    RTC_TimeTypeDef cTime;
    RTC_DateTypeDef cDate;

    osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 8004a18:	4b1d      	ldr	r3, [pc, #116]	; (8004a90 <get_RTC_hrmin+0x80>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8004a20:	4618      	mov	r0, r3
 8004a22:	f00a fb9f 	bl	800f164 <osMutexAcquire>
    HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BCD);
 8004a26:	f107 0318 	add.w	r3, r7, #24
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4819      	ldr	r0, [pc, #100]	; (8004a94 <get_RTC_hrmin+0x84>)
 8004a30:	f004 fe11 	bl	8009656 <HAL_RTC_GetTime>
    //must get date as well; RTC shadow registers will error if both aren't accessed
    HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BCD);
 8004a34:	f107 0314 	add.w	r3, r7, #20
 8004a38:	2201      	movs	r2, #1
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4815      	ldr	r0, [pc, #84]	; (8004a94 <get_RTC_hrmin+0x84>)
 8004a3e:	f004 ff14 	bl	800986a <HAL_RTC_GetDate>
    osMutexRelease(rtcMutexHandle);
 8004a42:	4b13      	ldr	r3, [pc, #76]	; (8004a90 <get_RTC_hrmin+0x80>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f00a fbea 	bl	800f220 <osMutexRelease>

    uint8_t  hrs = RTC_Bcd2ToByte(cTime.Hours);
 8004a4c:	7e3b      	ldrb	r3, [r7, #24]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f004 ffc8 	bl	80099e4 <RTC_Bcd2ToByte>
 8004a54:	4603      	mov	r3, r0
 8004a56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t mins = RTC_Bcd2ToByte(cTime.Minutes);
 8004a5a:	7e7b      	ldrb	r3, [r7, #25]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f004 ffc1 	bl	80099e4 <RTC_Bcd2ToByte>
 8004a62:	4603      	mov	r3, r0
 8004a64:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    char time[5];
    sprintf (time, "%02d%02d", hrs, mins);
 8004a68:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004a6c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a70:	f107 000c 	add.w	r0, r7, #12
 8004a74:	4908      	ldr	r1, [pc, #32]	; (8004a98 <get_RTC_hrmin+0x88>)
 8004a76:	f00f f86d 	bl	8013b54 <siprintf>

    strncpy(dest, time, sizeof(time));
 8004a7a:	f107 030c 	add.w	r3, r7, #12
 8004a7e:	2205      	movs	r2, #5
 8004a80:	4619      	mov	r1, r3
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f00f f886 	bl	8013b94 <strncpy>

}
 8004a88:	bf00      	nop
 8004a8a:	3730      	adds	r7, #48	; 0x30
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	20005c44 	.word	0x20005c44
 8004a94:	20005e50 	.word	0x20005e50
 8004a98:	08016360 	.word	0x08016360

08004a9c <startScreenUpdate>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startScreenUpdate */
void startScreenUpdate(void *argument)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8004aa2:	af02      	add	r7, sp, #8
 8004aa4:	1d3b      	adds	r3, r7, #4
 8004aa6:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
  HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_SET);
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	2101      	movs	r1, #1
 8004aac:	4870      	ldr	r0, [pc, #448]	; (8004c70 <startScreenUpdate+0x1d4>)
 8004aae:	f001 ff93 	bl	80069d8 <HAL_GPIO_WritePin>

  uint8_t oled_buf[WIDTH * HEIGHT / 8];

  er_oled_begin();
 8004ab2:	f7fd fe0d 	bl	80026d0 <er_oled_begin>
  er_oled_clear(oled_buf);
 8004ab6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fd fe70 	bl	80027a0 <er_oled_clear>
  er_oled_string(6, 14, "DRAMSAY", 12, 1, oled_buf);
 8004ac0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004ac4:	9301      	str	r3, [sp, #4]
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	230c      	movs	r3, #12
 8004acc:	4a69      	ldr	r2, [pc, #420]	; (8004c74 <startScreenUpdate+0x1d8>)
 8004ace:	210e      	movs	r1, #14
 8004ad0:	2006      	movs	r0, #6
 8004ad2:	f7fd ffd5 	bl	8002a80 <er_oled_string>
  er_oled_display(oled_buf);
 8004ad6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fe f85b 	bl	8002b96 <er_oled_display>

  osDelay(3000);
 8004ae0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004ae4:	f00a fa76 	bl	800efd4 <osDelay>
  er_oled_clear(oled_buf);
 8004ae8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7fd fe57 	bl	80027a0 <er_oled_clear>
  er_oled_display(oled_buf);
 8004af2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fe f84d 	bl	8002b96 <er_oled_display>


  ScreenStatus_t screenStatus= SCREEN_TIME;
 8004afc:	f107 039b 	add.w	r3, r7, #155	; 0x9b
 8004b00:	2201      	movs	r2, #1
 8004b02:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {

	  	//wait for someone to update screen state elsewhere and notify
	  	xTaskNotifyWait(0x00, 0x00, &screenStatus, portMAX_DELAY);
 8004b04:	f107 029b 	add.w	r2, r7, #155	; 0x9b
 8004b08:	f04f 33ff 	mov.w	r3, #4294967295
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	2000      	movs	r0, #0
 8004b10:	f00d fc88 	bl	8012424 <xTaskNotifyWait>
	  	switch(screenStatus){
 8004b14:	f107 039b 	add.w	r3, r7, #155	; 0x9b
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	2b03      	cmp	r3, #3
 8004b1e:	f200 809a 	bhi.w	8004c56 <startScreenUpdate+0x1ba>
 8004b22:	a201      	add	r2, pc, #4	; (adr r2, 8004b28 <startScreenUpdate+0x8c>)
 8004b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b28:	08004b39 	.word	0x08004b39
 8004b2c:	08004c6d 	.word	0x08004c6d
 8004b30:	08004bfd 	.word	0x08004bfd
 8004b34:	08004b4f 	.word	0x08004b4f
	  			case SCREEN_TIME:
	  				//test time
	  				//er_oled_time("1743");

	  				//only hrmin
	  				get_RTC_hrmin(time);
 8004b38:	f107 030c 	add.w	r3, r7, #12
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff ff67 	bl	8004a10 <get_RTC_hrmin>
	  				er_oled_time(time);
 8004b42:	f107 030c 	add.w	r3, r7, #12
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fe f85d 	bl	8002c06 <er_oled_time>
	  				//get_RTC_hrminsec(time);
	  				//er_oled_clear(oled_buf);
	  				//er_oled_string(0, 14, time, 12, 1, oled_buf);
	  				//er_oled_display(oled_buf);

	  				break;
 8004b4c:	e08f      	b.n	8004c6e <startScreenUpdate+0x1d2>

	  				break;

	  			case SCREEN_IMAGE:

	  				er_oled_clear(oled_buf);
 8004b4e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fd fe24 	bl	80027a0 <er_oled_clear>

	  				osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 8004b58:	4b47      	ldr	r3, [pc, #284]	; (8004c78 <startScreenUpdate+0x1dc>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8004b60:	4618      	mov	r0, r3
 8004b62:	f00a faff 	bl	800f164 <osMutexAcquire>
	  				imageNum = ScreenState.screenImage;
 8004b66:	4b45      	ldr	r3, [pc, #276]	; (8004c7c <startScreenUpdate+0x1e0>)
 8004b68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b6c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	  				osMutexRelease(screenTextMutexHandle);
 8004b70:	4b41      	ldr	r3, [pc, #260]	; (8004c78 <startScreenUpdate+0x1dc>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f00a fb53 	bl	800f220 <osMutexRelease>

	  				if (imageNum == 1){er_oled_bitmap(0, 0, PIC1, 72, 40, oled_buf);}
 8004b7a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d10b      	bne.n	8004b9a <startScreenUpdate+0xfe>
 8004b82:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004b86:	9301      	str	r3, [sp, #4]
 8004b88:	2328      	movs	r3, #40	; 0x28
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	2348      	movs	r3, #72	; 0x48
 8004b8e:	4a3c      	ldr	r2, [pc, #240]	; (8004c80 <startScreenUpdate+0x1e4>)
 8004b90:	2100      	movs	r1, #0
 8004b92:	2000      	movs	r0, #0
 8004b94:	f7fd ffb5 	bl	8002b02 <er_oled_bitmap>
 8004b98:	e01a      	b.n	8004bd0 <startScreenUpdate+0x134>
	  				else if (imageNum == 2) {er_oled_bitmap(0, 0, PIC2, 72, 40, oled_buf);}
 8004b9a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d10b      	bne.n	8004bba <startScreenUpdate+0x11e>
 8004ba2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004ba6:	9301      	str	r3, [sp, #4]
 8004ba8:	2328      	movs	r3, #40	; 0x28
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	2348      	movs	r3, #72	; 0x48
 8004bae:	4a35      	ldr	r2, [pc, #212]	; (8004c84 <startScreenUpdate+0x1e8>)
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	f7fd ffa5 	bl	8002b02 <er_oled_bitmap>
 8004bb8:	e00a      	b.n	8004bd0 <startScreenUpdate+0x134>
	  				else {er_oled_string(0, 14, "invalid image number", 24, 1, oled_buf);}
 8004bba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004bbe:	9301      	str	r3, [sp, #4]
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	2318      	movs	r3, #24
 8004bc6:	4a30      	ldr	r2, [pc, #192]	; (8004c88 <startScreenUpdate+0x1ec>)
 8004bc8:	210e      	movs	r1, #14
 8004bca:	2000      	movs	r0, #0
 8004bcc:	f7fd ff58 	bl	8002a80 <er_oled_string>

	  				er_oled_display(oled_buf);
 8004bd0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7fd ffde 	bl	8002b96 <er_oled_display>
	  				osDelay(1000);
 8004bda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004bde:	f00a f9f9 	bl	800efd4 <osDelay>
	  				command(0xa7);//--set Negative display
 8004be2:	2100      	movs	r1, #0
 8004be4:	20a7      	movs	r0, #167	; 0xa7
 8004be6:	f7fd fd55 	bl	8002694 <I2C_Write_Byte>
	  				osDelay(1000);
 8004bea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004bee:	f00a f9f1 	bl	800efd4 <osDelay>
	  				command(0xa6);//--set normal display
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	20a6      	movs	r0, #166	; 0xa6
 8004bf6:	f7fd fd4d 	bl	8002694 <I2C_Write_Byte>
	  				break;
 8004bfa:	e038      	b.n	8004c6e <startScreenUpdate+0x1d2>

	  			case SCREEN_TEXT:

	  				osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 8004bfc:	4b1e      	ldr	r3, [pc, #120]	; (8004c78 <startScreenUpdate+0x1dc>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f04f 31ff 	mov.w	r1, #4294967295
 8004c04:	4618      	mov	r0, r3
 8004c06:	f00a faad 	bl	800f164 <osMutexAcquire>
	  				strncpy(screenText, ScreenState.screenText, sizeof(ScreenState.screenText));
 8004c0a:	f107 0318 	add.w	r3, r7, #24
 8004c0e:	2280      	movs	r2, #128	; 0x80
 8004c10:	491a      	ldr	r1, [pc, #104]	; (8004c7c <startScreenUpdate+0x1e0>)
 8004c12:	4618      	mov	r0, r3
 8004c14:	f00e ffbe 	bl	8013b94 <strncpy>
	  				osMutexRelease(screenTextMutexHandle);
 8004c18:	4b17      	ldr	r3, [pc, #92]	; (8004c78 <startScreenUpdate+0x1dc>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f00a faff 	bl	800f220 <osMutexRelease>
	  				er_oled_clear(oled_buf);
 8004c22:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fd fdba 	bl	80027a0 <er_oled_clear>
	  				er_oled_string(0, 14, screenText, 12, 1, oled_buf);
 8004c2c:	f107 0218 	add.w	r2, r7, #24
 8004c30:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004c34:	9301      	str	r3, [sp, #4]
 8004c36:	2301      	movs	r3, #1
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	230c      	movs	r3, #12
 8004c3c:	210e      	movs	r1, #14
 8004c3e:	2000      	movs	r0, #0
 8004c40:	f7fd ff1e 	bl	8002a80 <er_oled_string>
	  				er_oled_display(oled_buf);
 8004c44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7fd ffa4 	bl	8002b96 <er_oled_display>
	  				osDelay(5);
 8004c4e:	2005      	movs	r0, #5
 8004c50:	f00a f9c0 	bl	800efd4 <osDelay>
	  				break;
 8004c54:	e00b      	b.n	8004c6e <startScreenUpdate+0x1d2>

	  			default: //includes SCREEN_OFF
	  				er_oled_clear(oled_buf);
 8004c56:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fd fda0 	bl	80027a0 <er_oled_clear>
	  				er_oled_display(oled_buf);
 8004c60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7fd ff96 	bl	8002b96 <er_oled_display>
	  				break;
 8004c6a:	e000      	b.n	8004c6e <startScreenUpdate+0x1d2>
	  				break;
 8004c6c:	bf00      	nop
	  	xTaskNotifyWait(0x00, 0x00, &screenStatus, portMAX_DELAY);
 8004c6e:	e749      	b.n	8004b04 <startScreenUpdate+0x68>
 8004c70:	48000400 	.word	0x48000400
 8004c74:	0801637c 	.word	0x0801637c
 8004c78:	20005ccc 	.word	0x20005ccc
 8004c7c:	20005fa0 	.word	0x20005fa0
 8004c80:	08017330 	.word	0x08017330
 8004c84:	08017498 	.word	0x08017498
 8004c88:	08016384 	.word	0x08016384

08004c8c <startLEDControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startLEDControl */
void startLEDControl(void *argument)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08a      	sub	sp, #40	; 0x28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
    //osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
   	//LedState.currentMode = LED_CONFIRM_FLASH;
   	//osMutexRelease(ledStateMutexHandle);

  //For LED to work on new board (multiplexed with SPI_NSS), we need to pull PA4 high
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8004c94:	2201      	movs	r2, #1
 8004c96:	2110      	movs	r1, #16
 8004c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c9c:	f001 fe9c 	bl	80069d8 <HAL_GPIO_WritePin>


  //LedState Init
  osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 8004ca0:	4b98      	ldr	r3, [pc, #608]	; (8004f04 <startLEDControl+0x278>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f00a fa5b 	bl	800f164 <osMutexAcquire>
  LedState.currentMode = LED_SPIRAL;
 8004cae:	4b96      	ldr	r3, [pc, #600]	; (8004f08 <startLEDControl+0x27c>)
 8004cb0:	2205      	movs	r2, #5
 8004cb2:	701a      	strb	r2, [r3, #0]
  LedState.nextMode = LED_OFF;
 8004cb4:	4b94      	ldr	r3, [pc, #592]	; (8004f08 <startLEDControl+0x27c>)
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	705a      	strb	r2, [r3, #1]
  LedState.modeTimeout = pdMS_TO_TICKS(5000);
 8004cba:	4b93      	ldr	r3, [pc, #588]	; (8004f08 <startLEDControl+0x27c>)
 8004cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc0:	605a      	str	r2, [r3, #4]
  osMutexRelease(ledStateMutexHandle);
 8004cc2:	4b90      	ldr	r3, [pc, #576]	; (8004f04 <startLEDControl+0x278>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f00a faaa 	bl	800f220 <osMutexRelease>

  //Dotstar Init
  DotStar_InitHandle dotstar;
  dotstar.spiHandle = &hspi1;
 8004ccc:	4b8f      	ldr	r3, [pc, #572]	; (8004f0c <startLEDControl+0x280>)
 8004cce:	60fb      	str	r3, [r7, #12]
  dotstar.numLEDs = NUM_PIXELS;
 8004cd0:	230c      	movs	r3, #12
 8004cd2:	823b      	strh	r3, [r7, #16]
  dotstar.colorOrder = DOTSTAR_BGR;
 8004cd4:	2306      	movs	r3, #6
 8004cd6:	74bb      	strb	r3, [r7, #18]
  Dotstar_Init(&dotstar);
 8004cd8:	f107 030c 	add.w	r3, r7, #12
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7fd fb4b 	bl	8002378 <Dotstar_Init>

  ds_clear();  //turn off
 8004ce2:	f7fd fc35 	bl	8002550 <ds_clear>
  ds_show();
 8004ce6:	f7fd fb97 	bl	8002418 <ds_show>

  const uint8_t STANDARD_BRIGHTNESS = 20; //20, 0-255
 8004cea:	2314      	movs	r3, #20
 8004cec:	75fb      	strb	r3, [r7, #23]
  const uint8_t MAX_BRIGHTNESS = 0x33; //max brightness, 0x01-0xFF
 8004cee:	2333      	movs	r3, #51	; 0x33
 8004cf0:	75bb      	strb	r3, [r7, #22]

  ds_setBrightness(STANDARD_BRIGHTNESS);
 8004cf2:	7dfb      	ldrb	r3, [r7, #23]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7fd fcbb 	bl	8002670 <ds_setBrightness>
  osDelay(1000);
 8004cfa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004cfe:	f00a f969 	bl	800efd4 <osDelay>

  LedStatus_t currentMode;
  LedStatus_t lastLoopMode = LED_OFF;
 8004d02:	2301      	movs	r3, #1
 8004d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  uint16_t counter = 0;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint8_t stateVar1 = 0;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t stateVar2 = 0;
 8004d12:	2300      	movs	r3, #0
 8004d14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  uint32_t color = 0x000000;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	61fb      	str	r3, [r7, #28]
  /* Infinite loop */
  for(;;)
  {
    //check state, get mode, call timer if necessary

    osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 8004d1c:	4b79      	ldr	r3, [pc, #484]	; (8004f04 <startLEDControl+0x278>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f04f 31ff 	mov.w	r1, #4294967295
 8004d24:	4618      	mov	r0, r3
 8004d26:	f00a fa1d 	bl	800f164 <osMutexAcquire>
	currentMode = LedState.currentMode;
 8004d2a:	4b77      	ldr	r3, [pc, #476]	; (8004f08 <startLEDControl+0x27c>)
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	757b      	strb	r3, [r7, #21]
	if (LedState.modeTimeout){
 8004d30:	4b75      	ldr	r3, [pc, #468]	; (8004f08 <startLEDControl+0x27c>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d006      	beq.n	8004d46 <startLEDControl+0xba>
		xTaskNotifyGive(LEDTimerHandle);
 8004d38:	4b75      	ldr	r3, [pc, #468]	; (8004f10 <startLEDControl+0x284>)
 8004d3a:	6818      	ldr	r0, [r3, #0]
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	2202      	movs	r2, #2
 8004d40:	2100      	movs	r1, #0
 8004d42:	f00d fbc9 	bl	80124d8 <xTaskGenericNotify>
	}
	osMutexRelease(ledStateMutexHandle);
 8004d46:	4b6f      	ldr	r3, [pc, #444]	; (8004f04 <startLEDControl+0x278>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f00a fa68 	bl	800f220 <osMutexRelease>

	//reset count if we've switched modes
	if (lastLoopMode != currentMode) { counter = 0; stateVar1 = 0; stateVar2 = 0;}
 8004d50:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004d54:	7d7b      	ldrb	r3, [r7, #21]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d007      	beq.n	8004d6a <startLEDControl+0xde>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004d5e:	2300      	movs	r3, #0
 8004d60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d64:	2300      	movs	r3, #0
 8004d66:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	switch(currentMode){
 8004d6a:	7d7b      	ldrb	r3, [r7, #21]
 8004d6c:	3b02      	subs	r3, #2
 8004d6e:	2b03      	cmp	r3, #3
 8004d70:	f200 80b3 	bhi.w	8004eda <startLEDControl+0x24e>
 8004d74:	a201      	add	r2, pc, #4	; (adr r2, 8004d7c <startLEDControl+0xf0>)
 8004d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7a:	bf00      	nop
 8004d7c:	08004ef5 	.word	0x08004ef5
 8004d80:	08004ef5 	.word	0x08004ef5
 8004d84:	08004d8d 	.word	0x08004d8d
 8004d88:	08004e33 	.word	0x08004e33

			break;
		case LED_CONFIRM_FLASH:

			//each color go from 00 to MAX_BRIGHTNESS to 00 over a second, 1000Hz=sec, ~512 steps, 2ms
			if (lastLoopMode != currentMode) { ds_fill(0xFFFFFF, 0, 12);}
 8004d8c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004d90:	7d7b      	ldrb	r3, [r7, #21]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d005      	beq.n	8004da2 <startLEDControl+0x116>
 8004d96:	220c      	movs	r2, #12
 8004d98:	2100      	movs	r1, #0
 8004d9a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8004d9e:	f7fd fc31 	bl	8002604 <ds_fill>
		    ds_setBrightness(stateVar1);
 8004da2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fd fc62 	bl	8002670 <ds_setBrightness>
			ds_show();
 8004dac:	f7fd fb34 	bl	8002418 <ds_show>

		    //increment color intensity
		    if (stateVar2) {stateVar1--;}
 8004db0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d005      	beq.n	8004dc4 <startLEDControl+0x138>
 8004db8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dc2:	e004      	b.n	8004dce <startLEDControl+0x142>
		    else {stateVar1++;}
 8004dc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dc8:	3301      	adds	r3, #1
 8004dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		    //if we hit a limit switch color scaling up or down
		    if (stateVar1 == MAX_BRIGHTNESS) {stateVar2 = 1;}
 8004dce:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004dd2:	7dbb      	ldrb	r3, [r7, #22]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d102      	bne.n	8004dde <startLEDControl+0x152>
 8004dd8:	2301      	movs	r3, #1
 8004dda:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    if (stateVar1 == 0x00) {stateVar2 = 0;}
 8004dde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d102      	bne.n	8004dec <startLEDControl+0x160>
 8004de6:	2300      	movs	r3, #0
 8004de8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

			osDelay(pdMS_TO_TICKS(2)); //2ms delay
 8004dec:	2002      	movs	r0, #2
 8004dee:	f00a f8f1 	bl	800efd4 <osDelay>

			if (++counter == (MAX_BRIGHTNESS*4)) { //if we hit 1 cycle here (= MAX_BRIGHTNESS*2,could *4 to set to two full cycles), set state to off
 8004df2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004df4:	3301      	adds	r3, #1
 8004df6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004df8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004dfa:	7dbb      	ldrb	r3, [r7, #22]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d17a      	bne.n	8004ef8 <startLEDControl+0x26c>
				ds_clear();
 8004e02:	f7fd fba5 	bl	8002550 <ds_clear>
				ds_show();
 8004e06:	f7fd fb07 	bl	8002418 <ds_show>
				ds_setBrightness(STANDARD_BRIGHTNESS);
 8004e0a:	7dfb      	ldrb	r3, [r7, #23]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7fd fc2f 	bl	8002670 <ds_setBrightness>

				osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 8004e12:	4b3c      	ldr	r3, [pc, #240]	; (8004f04 <startLEDControl+0x278>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f04f 31ff 	mov.w	r1, #4294967295
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f00a f9a2 	bl	800f164 <osMutexAcquire>
				LedState.currentMode = LED_OFF;
 8004e20:	4b39      	ldr	r3, [pc, #228]	; (8004f08 <startLEDControl+0x27c>)
 8004e22:	2201      	movs	r2, #1
 8004e24:	701a      	strb	r2, [r3, #0]
				osMutexRelease(ledStateMutexHandle);
 8004e26:	4b37      	ldr	r3, [pc, #220]	; (8004f04 <startLEDControl+0x278>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f00a f9f8 	bl	800f220 <osMutexRelease>
			}

			break;
 8004e30:	e062      	b.n	8004ef8 <startLEDControl+0x26c>

		case LED_SPIRAL:

			//rotate fixed pattern around 12
			//modulo 12
			for (int i=0; i< NUM_PIXELS; i++){
 8004e32:	2300      	movs	r3, #0
 8004e34:	61bb      	str	r3, [r7, #24]
 8004e36:	e038      	b.n	8004eaa <startLEDControl+0x21e>

				if (i==(counter+2)%12){ color = 0xFFFFFF; }
 8004e38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e3a:	1c99      	adds	r1, r3, #2
 8004e3c:	4b35      	ldr	r3, [pc, #212]	; (8004f14 <startLEDControl+0x288>)
 8004e3e:	fb83 2301 	smull	r2, r3, r3, r1
 8004e42:	105a      	asrs	r2, r3, #1
 8004e44:	17cb      	asrs	r3, r1, #31
 8004e46:	1ad2      	subs	r2, r2, r3
 8004e48:	4613      	mov	r3, r2
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	4413      	add	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	1aca      	subs	r2, r1, r3
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d103      	bne.n	8004e60 <startLEDControl+0x1d4>
 8004e58:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8004e5c:	61fb      	str	r3, [r7, #28]
 8004e5e:	e01b      	b.n	8004e98 <startLEDControl+0x20c>
				else if (i==(counter+1)%12){ color = 0xD0D0D0; }
 8004e60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e62:	1c59      	adds	r1, r3, #1
 8004e64:	4b2b      	ldr	r3, [pc, #172]	; (8004f14 <startLEDControl+0x288>)
 8004e66:	fb83 2301 	smull	r2, r3, r3, r1
 8004e6a:	105a      	asrs	r2, r3, #1
 8004e6c:	17cb      	asrs	r3, r1, #31
 8004e6e:	1ad2      	subs	r2, r2, r3
 8004e70:	4613      	mov	r3, r2
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	4413      	add	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	1aca      	subs	r2, r1, r3
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d102      	bne.n	8004e86 <startLEDControl+0x1fa>
 8004e80:	4b25      	ldr	r3, [pc, #148]	; (8004f18 <startLEDControl+0x28c>)
 8004e82:	61fb      	str	r3, [r7, #28]
 8004e84:	e008      	b.n	8004e98 <startLEDControl+0x20c>
				else if (i==counter)       { color = 0xA0A0A0; }
 8004e86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d102      	bne.n	8004e94 <startLEDControl+0x208>
 8004e8e:	4b23      	ldr	r3, [pc, #140]	; (8004f1c <startLEDControl+0x290>)
 8004e90:	61fb      	str	r3, [r7, #28]
 8004e92:	e001      	b.n	8004e98 <startLEDControl+0x20c>
				else { color = 0x000000; }
 8004e94:	2300      	movs	r3, #0
 8004e96:	61fb      	str	r3, [r7, #28]

				ds_setPixelColor32B(i, color); // 'off' pixel at head
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	69f9      	ldr	r1, [r7, #28]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fd fb7a 	bl	8002598 <ds_setPixelColor32B>
			for (int i=0; i< NUM_PIXELS; i++){
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	61bb      	str	r3, [r7, #24]
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	2b0b      	cmp	r3, #11
 8004eae:	ddc3      	ble.n	8004e38 <startLEDControl+0x1ac>
			}

			ds_show();
 8004eb0:	f7fd fab2 	bl	8002418 <ds_show>
			counter = (counter+1)%12;
 8004eb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	4b16      	ldr	r3, [pc, #88]	; (8004f14 <startLEDControl+0x288>)
 8004eba:	fb83 1302 	smull	r1, r3, r3, r2
 8004ebe:	1059      	asrs	r1, r3, #1
 8004ec0:	17d3      	asrs	r3, r2, #31
 8004ec2:	1ac9      	subs	r1, r1, r3
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	440b      	add	r3, r1
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	1ad1      	subs	r1, r2, r3
 8004ece:	460b      	mov	r3, r1
 8004ed0:	84bb      	strh	r3, [r7, #36]	; 0x24
			osDelay(pdMS_TO_TICKS(50));
 8004ed2:	2032      	movs	r0, #50	; 0x32
 8004ed4:	f00a f87e 	bl	800efd4 <osDelay>

			break;
 8004ed8:	e00f      	b.n	8004efa <startLEDControl+0x26e>

		default: //case LED_OTHER, LED_OFF, LED_NONE
			if (lastLoopMode != currentMode) {
 8004eda:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004ede:	7d7b      	ldrb	r3, [r7, #21]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d003      	beq.n	8004eec <startLEDControl+0x260>
				ds_clear();
 8004ee4:	f7fd fb34 	bl	8002550 <ds_clear>
				ds_show();
 8004ee8:	f7fd fa96 	bl	8002418 <ds_show>
			}
			osDelay(250);
 8004eec:	20fa      	movs	r0, #250	; 0xfa
 8004eee:	f00a f871 	bl	800efd4 <osDelay>
			break;
 8004ef2:	e002      	b.n	8004efa <startLEDControl+0x26e>
			break;
 8004ef4:	bf00      	nop
 8004ef6:	e000      	b.n	8004efa <startLEDControl+0x26e>
			break;
 8004ef8:	bf00      	nop
	}

	lastLoopMode = currentMode;
 8004efa:	7d7b      	ldrb	r3, [r7, #21]
 8004efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 8004f00:	e70c      	b.n	8004d1c <startLEDControl+0x90>
 8004f02:	bf00      	nop
 8004f04:	20005e84 	.word	0x20005e84
 8004f08:	20005e48 	.word	0x20005e48
 8004f0c:	20005f3c 	.word	0x20005f3c
 8004f10:	20005c78 	.word	0x20005c78
 8004f14:	2aaaaaab 	.word	0x2aaaaaab
 8004f18:	00d0d0d0 	.word	0x00d0d0d0
 8004f1c:	00a0a0a0 	.word	0x00a0a0a0

08004f20 <startButtonPress>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startButtonPress */
void startButtonPress(void *argument)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startButtonPress */
  /* Infinite loop */

  //Buttons are PULLED UP and drop to 0 when pressed
  uint8_t buttonState[] = {1, 1, 1};
 8004f28:	4a44      	ldr	r2, [pc, #272]	; (800503c <startButtonPress+0x11c>)
 8004f2a:	f107 0314 	add.w	r3, r7, #20
 8004f2e:	6812      	ldr	r2, [r2, #0]
 8004f30:	4611      	mov	r1, r2
 8004f32:	8019      	strh	r1, [r3, #0]
 8004f34:	3302      	adds	r3, #2
 8004f36:	0c12      	lsrs	r2, r2, #16
 8004f38:	701a      	strb	r2, [r3, #0]
  uint32_t callingPin = 0x00;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	613b      	str	r3, [r7, #16]

  for(;;)
  {
	//wait for rising or falling edge trigger, put calling pin in callingPin
	xTaskNotifyWait(0x00, 0x00, &callingPin, portMAX_DELAY);
 8004f3e:	f107 0210 	add.w	r2, r7, #16
 8004f42:	f04f 33ff 	mov.w	r3, #4294967295
 8004f46:	2100      	movs	r1, #0
 8004f48:	2000      	movs	r0, #0
 8004f4a:	f00d fa6b 	bl	8012424 <xTaskNotifyWait>

	//check state of pin
	GPIO_PinState first_read = HAL_GPIO_ReadPin(GPIOB, callingPin);
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	4619      	mov	r1, r3
 8004f54:	483a      	ldr	r0, [pc, #232]	; (8005040 <startButtonPress+0x120>)
 8004f56:	f001 fd27 	bl	80069a8 <HAL_GPIO_ReadPin>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	75fb      	strb	r3, [r7, #23]

	//wait 50ms
    osDelay(50);
 8004f5e:	2032      	movs	r0, #50	; 0x32
 8004f60:	f00a f838 	bl	800efd4 <osDelay>

    //check again (debounce) to get a good reading
	if (first_read == HAL_GPIO_ReadPin(GPIOB, callingPin)){
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	4619      	mov	r1, r3
 8004f6a:	4835      	ldr	r0, [pc, #212]	; (8005040 <startButtonPress+0x120>)
 8004f6c:	f001 fd1c 	bl	80069a8 <HAL_GPIO_ReadPin>
 8004f70:	4603      	mov	r3, r0
 8004f72:	461a      	mov	r2, r3
 8004f74:	7dfb      	ldrb	r3, [r7, #23]
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d1e1      	bne.n	8004f3e <startButtonPress+0x1e>
		//when this happens (except during debouncing) so we expect this to be true
		//almost always

		//callingPin can be used as bitmask Pin 5/4/3 give 1000000/10000/1000

		if (callingPin == 0b1000 && first_read != buttonState[0]) { //button 1 trigger
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d11b      	bne.n	8004fb8 <startButtonPress+0x98>
 8004f80:	7d3b      	ldrb	r3, [r7, #20]
 8004f82:	7dfa      	ldrb	r2, [r7, #23]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d017      	beq.n	8004fb8 <startButtonPress+0x98>
		  //set buttonState
		  buttonState[0] = first_read;
 8004f88:	7dfb      	ldrb	r3, [r7, #23]
 8004f8a:	753b      	strb	r3, [r7, #20]

		  //do stuff if button pressed
		  if (!first_read){
 8004f8c:	7dfb      	ldrb	r3, [r7, #23]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d102      	bne.n	8004f98 <startButtonPress+0x78>
		       	osDelay(100);
 8004f92:	2064      	movs	r0, #100	; 0x64
 8004f94:	f00a f81e 	bl	800efd4 <osDelay>
		  } else { //do stuff if button is released

		  }

		  //send BLE queue indicator; button 1 = 0x0
		  uint16_t bleval = 0x0000 | ((!first_read) << 8);
 8004f98:	7dfb      	ldrb	r3, [r7, #23]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d102      	bne.n	8004fa4 <startButtonPress+0x84>
 8004f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fa2:	e000      	b.n	8004fa6 <startButtonPress+0x86>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	81fb      	strh	r3, [r7, #14]
		  osMessageQueuePut(bleTXqueueHandle, &bleval, 0, 0);
 8004fa8:	4b26      	ldr	r3, [pc, #152]	; (8005044 <startButtonPress+0x124>)
 8004faa:	6818      	ldr	r0, [r3, #0]
 8004fac:	f107 010e 	add.w	r1, r7, #14
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f00a fb66 	bl	800f684 <osMessageQueuePut>
		}
		if (callingPin == 0b10000 && first_read != buttonState[1]) { //button 2 trigger
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	2b10      	cmp	r3, #16
 8004fbc:	d11c      	bne.n	8004ff8 <startButtonPress+0xd8>
 8004fbe:	7d7b      	ldrb	r3, [r7, #21]
 8004fc0:	7dfa      	ldrb	r2, [r7, #23]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d018      	beq.n	8004ff8 <startButtonPress+0xd8>
		    //set buttonState
		    buttonState[1] = first_read;
 8004fc6:	7dfb      	ldrb	r3, [r7, #23]
 8004fc8:	757b      	strb	r3, [r7, #21]

		    //do stuff if button pressed
		    if (!first_read){
 8004fca:	7dfb      	ldrb	r3, [r7, #23]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d102      	bne.n	8004fd6 <startButtonPress+0xb6>
		       	osDelay(100);
 8004fd0:	2064      	movs	r0, #100	; 0x64
 8004fd2:	f009 ffff 	bl	800efd4 <osDelay>
		    } else { //do stuff if button is released

			}

		    //send BLE queue indicator; button 2 = 0x1
		    uint16_t bleval = 0x1000 | ((!first_read) << 8);
 8004fd6:	7dfb      	ldrb	r3, [r7, #23]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d102      	bne.n	8004fe2 <startButtonPress+0xc2>
 8004fdc:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8004fe0:	e001      	b.n	8004fe6 <startButtonPress+0xc6>
 8004fe2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fe6:	81bb      	strh	r3, [r7, #12]
		    osMessageQueuePut(bleTXqueueHandle, &bleval, 0, 0);
 8004fe8:	4b16      	ldr	r3, [pc, #88]	; (8005044 <startButtonPress+0x124>)
 8004fea:	6818      	ldr	r0, [r3, #0]
 8004fec:	f107 010c 	add.w	r1, r7, #12
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f00a fb46 	bl	800f684 <osMessageQueuePut>
		}
		if (callingPin == 0b100000 && first_read != buttonState[2]) { //button 3 trigger
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	2b20      	cmp	r3, #32
 8004ffc:	d19f      	bne.n	8004f3e <startButtonPress+0x1e>
 8004ffe:	7dbb      	ldrb	r3, [r7, #22]
 8005000:	7dfa      	ldrb	r2, [r7, #23]
 8005002:	429a      	cmp	r2, r3
 8005004:	d09b      	beq.n	8004f3e <startButtonPress+0x1e>
		    //set buttonState
		    buttonState[2] = first_read;
 8005006:	7dfb      	ldrb	r3, [r7, #23]
 8005008:	75bb      	strb	r3, [r7, #22]

		    //do stuff if button pressed
		    if (!first_read){
 800500a:	7dfb      	ldrb	r3, [r7, #23]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d102      	bne.n	8005016 <startButtonPress+0xf6>
		    	osDelay(100);
 8005010:	2064      	movs	r0, #100	; 0x64
 8005012:	f009 ffdf 	bl	800efd4 <osDelay>
		    }  else { //do stuff if button is released

			}

		    //send BLE queue indicator; button 3 = 0x2
		    uint16_t bleval = 0x2000 | ((!first_read) << 8);
 8005016:	7dfb      	ldrb	r3, [r7, #23]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d102      	bne.n	8005022 <startButtonPress+0x102>
 800501c:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8005020:	e001      	b.n	8005026 <startButtonPress+0x106>
 8005022:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005026:	817b      	strh	r3, [r7, #10]
		    osMessageQueuePut(bleTXqueueHandle, &bleval, 0, 0);
 8005028:	4b06      	ldr	r3, [pc, #24]	; (8005044 <startButtonPress+0x124>)
 800502a:	6818      	ldr	r0, [r3, #0]
 800502c:	f107 010a 	add.w	r1, r7, #10
 8005030:	2300      	movs	r3, #0
 8005032:	2200      	movs	r2, #0
 8005034:	f00a fb26 	bl	800f684 <osMessageQueuePut>
  {
 8005038:	e781      	b.n	8004f3e <startButtonPress+0x1e>
 800503a:	bf00      	nop
 800503c:	0801639c 	.word	0x0801639c
 8005040:	48000400 	.word	0x48000400
 8005044:	20005f34 	.word	0x20005f34

08005048 <startVibrateControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startVibrateControl */
void startVibrateControl(void *argument)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startVibrateControl */

  //HAL_GPIO_WritePin(VIBRATION_GPIO_Port, VIBRATION_Pin, GPIO_PIN_RESET);

  //Init Vibration Motor PWM Parameters
  int duty_cycle = 79; //0 is off, up to ~80
 8005050:	234f      	movs	r3, #79	; 0x4f
 8005052:	60fb      	str	r3, [r7, #12]
  htim1.Instance->CCR2 = duty_cycle;
 8005054:	4b0a      	ldr	r3, [pc, #40]	; (8005080 <startVibrateControl+0x38>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Infinite loop */
  for(;;)
  {
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800505c:	2100      	movs	r1, #0
 800505e:	4808      	ldr	r0, [pc, #32]	; (8005080 <startVibrateControl+0x38>)
 8005060:	f005 f988 	bl	800a374 <HAL_TIM_PWM_Start>

    osDelay(2000);
 8005064:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005068:	f009 ffb4 	bl	800efd4 <osDelay>

    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800506c:	2100      	movs	r1, #0
 800506e:	4804      	ldr	r0, [pc, #16]	; (8005080 <startVibrateControl+0x38>)
 8005070:	f005 fa5a 	bl	800a528 <HAL_TIM_PWM_Stop>

    osDelay(2000);
 8005074:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005078:	f009 ffac 	bl	800efd4 <osDelay>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800507c:	e7ee      	b.n	800505c <startVibrateControl+0x14>
 800507e:	bf00      	nop
 8005080:	20005e88 	.word	0x20005e88

08005084 <startRTCTick>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startRTCTick */
void startRTCTick(void *argument)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b088      	sub	sp, #32
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startRTCTick */

	RTC_TimeTypeDef sTime = {0};
 800508c:	f107 0308 	add.w	r3, r7, #8
 8005090:	2200      	movs	r2, #0
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	605a      	str	r2, [r3, #4]
 8005096:	609a      	str	r2, [r3, #8]
 8005098:	60da      	str	r2, [r3, #12]
 800509a:	611a      	str	r2, [r3, #16]
    sTime.Hours      = 0x15;
 800509c:	2315      	movs	r3, #21
 800509e:	723b      	strb	r3, [r7, #8]
    sTime.Minutes    = 0x41;
 80050a0:	2341      	movs	r3, #65	; 0x41
 80050a2:	727b      	strb	r3, [r7, #9]
    sTime.Seconds    = 0x57;
 80050a4:	2357      	movs	r3, #87	; 0x57
 80050a6:	72bb      	strb	r3, [r7, #10]
    sTime.SubSeconds = 0x0;
 80050a8:	2300      	movs	r3, #0
 80050aa:	60fb      	str	r3, [r7, #12]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80050ac:	2300      	movs	r3, #0
 80050ae:	617b      	str	r3, [r7, #20]
   	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80050b0:	2300      	movs	r3, #0
 80050b2:	61bb      	str	r3, [r7, #24]

   	osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 80050b4:	4b6d      	ldr	r3, [pc, #436]	; (800526c <startRTCTick+0x1e8>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f04f 31ff 	mov.w	r1, #4294967295
 80050bc:	4618      	mov	r0, r3
 80050be:	f00a f851 	bl	800f164 <osMutexAcquire>
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 80050c2:	f107 0308 	add.w	r3, r7, #8
 80050c6:	2201      	movs	r2, #1
 80050c8:	4619      	mov	r1, r3
 80050ca:	4869      	ldr	r0, [pc, #420]	; (8005270 <startRTCTick+0x1ec>)
 80050cc:	f004 f9ff 	bl	80094ce <HAL_RTC_SetTime>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <startRTCTick+0x56>
	    Error_Handler();
 80050d6:	f000 fae3 	bl	80056a0 <Error_Handler>
	}
	osMutexRelease(rtcMutexHandle);
 80050da:	4b64      	ldr	r3, [pc, #400]	; (800526c <startRTCTick+0x1e8>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4618      	mov	r0, r3
 80050e0:	f00a f89e 	bl	800f220 <osMutexRelease>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80050e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80050e8:	f009 ff74 	bl	800efd4 <osDelay>

    osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 80050ec:	4b61      	ldr	r3, [pc, #388]	; (8005274 <startRTCTick+0x1f0>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f04f 31ff 	mov.w	r1, #4294967295
 80050f4:	4618      	mov	r0, r3
 80050f6:	f00a f835 	bl	800f164 <osMutexAcquire>
    LedState.currentMode = LED_SPIRAL;
 80050fa:	4b5f      	ldr	r3, [pc, #380]	; (8005278 <startRTCTick+0x1f4>)
 80050fc:	2205      	movs	r2, #5
 80050fe:	701a      	strb	r2, [r3, #0]
    osMutexRelease(ledStateMutexHandle);
 8005100:	4b5c      	ldr	r3, [pc, #368]	; (8005274 <startRTCTick+0x1f0>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4618      	mov	r0, r3
 8005106:	f00a f88b 	bl	800f220 <osMutexRelease>

    osDelay(1000);
 800510a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800510e:	f009 ff61 	bl	800efd4 <osDelay>

    ScreenStatus_t newScreen = SCREEN_TIME;
 8005112:	2301      	movs	r3, #1
 8005114:	77fb      	strb	r3, [r7, #31]
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 8005116:	4b59      	ldr	r3, [pc, #356]	; (800527c <startRTCTick+0x1f8>)
 8005118:	6818      	ldr	r0, [r3, #0]
 800511a:	7ff9      	ldrb	r1, [r7, #31]
 800511c:	2300      	movs	r3, #0
 800511e:	2203      	movs	r2, #3
 8005120:	f00d f9da 	bl	80124d8 <xTaskGenericNotify>

    osDelay(1000);
 8005124:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005128:	f009 ff54 	bl	800efd4 <osDelay>

    osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 800512c:	4b51      	ldr	r3, [pc, #324]	; (8005274 <startRTCTick+0x1f0>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f04f 31ff 	mov.w	r1, #4294967295
 8005134:	4618      	mov	r0, r3
 8005136:	f00a f815 	bl	800f164 <osMutexAcquire>
    LedState.currentMode = LED_CONFIRM_FLASH;
 800513a:	4b4f      	ldr	r3, [pc, #316]	; (8005278 <startRTCTick+0x1f4>)
 800513c:	2204      	movs	r2, #4
 800513e:	701a      	strb	r2, [r3, #0]
    osMutexRelease(ledStateMutexHandle);
 8005140:	4b4c      	ldr	r3, [pc, #304]	; (8005274 <startRTCTick+0x1f0>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4618      	mov	r0, r3
 8005146:	f00a f86b 	bl	800f220 <osMutexRelease>

    osDelay(1000);
 800514a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800514e:	f009 ff41 	bl	800efd4 <osDelay>

    osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 8005152:	4b48      	ldr	r3, [pc, #288]	; (8005274 <startRTCTick+0x1f0>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f04f 31ff 	mov.w	r1, #4294967295
 800515a:	4618      	mov	r0, r3
 800515c:	f00a f802 	bl	800f164 <osMutexAcquire>
    LedState.currentMode = LED_SPIRAL;
 8005160:	4b45      	ldr	r3, [pc, #276]	; (8005278 <startRTCTick+0x1f4>)
 8005162:	2205      	movs	r2, #5
 8005164:	701a      	strb	r2, [r3, #0]
    osMutexRelease(ledStateMutexHandle);
 8005166:	4b43      	ldr	r3, [pc, #268]	; (8005274 <startRTCTick+0x1f0>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4618      	mov	r0, r3
 800516c:	f00a f858 	bl	800f220 <osMutexRelease>

    osDelay(1000);
 8005170:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005174:	f009 ff2e 	bl	800efd4 <osDelay>

    newScreen = SCREEN_TEXT;
 8005178:	2303      	movs	r3, #3
 800517a:	77fb      	strb	r3, [r7, #31]
	osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 800517c:	4b40      	ldr	r3, [pc, #256]	; (8005280 <startRTCTick+0x1fc>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f04f 31ff 	mov.w	r1, #4294967295
 8005184:	4618      	mov	r0, r3
 8005186:	f009 ffed 	bl	800f164 <osMutexAcquire>
	strncpy(ScreenState.screenText, "arbitrary", sizeof("arbitrary"));
 800518a:	4a3e      	ldr	r2, [pc, #248]	; (8005284 <startRTCTick+0x200>)
 800518c:	4b3e      	ldr	r3, [pc, #248]	; (8005288 <startRTCTick+0x204>)
 800518e:	cb03      	ldmia	r3!, {r0, r1}
 8005190:	6010      	str	r0, [r2, #0]
 8005192:	6051      	str	r1, [r2, #4]
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	8113      	strh	r3, [r2, #8]
	osMutexRelease(screenTextMutexHandle);
 8005198:	4b39      	ldr	r3, [pc, #228]	; (8005280 <startRTCTick+0x1fc>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
 800519e:	f00a f83f 	bl	800f220 <osMutexRelease>
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 80051a2:	4b36      	ldr	r3, [pc, #216]	; (800527c <startRTCTick+0x1f8>)
 80051a4:	6818      	ldr	r0, [r3, #0]
 80051a6:	7ff9      	ldrb	r1, [r7, #31]
 80051a8:	2300      	movs	r3, #0
 80051aa:	2203      	movs	r2, #3
 80051ac:	f00d f994 	bl	80124d8 <xTaskGenericNotify>

    osDelay(1000);
 80051b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80051b4:	f009 ff0e 	bl	800efd4 <osDelay>
        Error_Handler();
    }
    osMutexRelease(rtcMutexHandle);
	*/

    newScreen = SCREEN_TIME;
 80051b8:	2301      	movs	r3, #1
 80051ba:	77fb      	strb	r3, [r7, #31]
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 80051bc:	4b2f      	ldr	r3, [pc, #188]	; (800527c <startRTCTick+0x1f8>)
 80051be:	6818      	ldr	r0, [r3, #0]
 80051c0:	7ff9      	ldrb	r1, [r7, #31]
 80051c2:	2300      	movs	r3, #0
 80051c4:	2203      	movs	r2, #3
 80051c6:	f00d f987 	bl	80124d8 <xTaskGenericNotify>
    osDelay(1000);
 80051ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80051ce:	f009 ff01 	bl	800efd4 <osDelay>
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 80051d2:	4b2a      	ldr	r3, [pc, #168]	; (800527c <startRTCTick+0x1f8>)
 80051d4:	6818      	ldr	r0, [r3, #0]
 80051d6:	7ff9      	ldrb	r1, [r7, #31]
 80051d8:	2300      	movs	r3, #0
 80051da:	2203      	movs	r2, #3
 80051dc:	f00d f97c 	bl	80124d8 <xTaskGenericNotify>
    osDelay(1000);
 80051e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80051e4:	f009 fef6 	bl	800efd4 <osDelay>
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 80051e8:	4b24      	ldr	r3, [pc, #144]	; (800527c <startRTCTick+0x1f8>)
 80051ea:	6818      	ldr	r0, [r3, #0]
 80051ec:	7ff9      	ldrb	r1, [r7, #31]
 80051ee:	2300      	movs	r3, #0
 80051f0:	2203      	movs	r2, #3
 80051f2:	f00d f971 	bl	80124d8 <xTaskGenericNotify>
    osDelay(1000);
 80051f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80051fa:	f009 feeb 	bl	800efd4 <osDelay>
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 80051fe:	4b1f      	ldr	r3, [pc, #124]	; (800527c <startRTCTick+0x1f8>)
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	7ff9      	ldrb	r1, [r7, #31]
 8005204:	2300      	movs	r3, #0
 8005206:	2203      	movs	r2, #3
 8005208:	f00d f966 	bl	80124d8 <xTaskGenericNotify>
    osDelay(1000);
 800520c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005210:	f009 fee0 	bl	800efd4 <osDelay>


    osDelay(1000);
 8005214:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005218:	f009 fedc 	bl	800efd4 <osDelay>

    newScreen = SCREEN_IMAGE;
 800521c:	2304      	movs	r3, #4
 800521e:	77fb      	strb	r3, [r7, #31]
   	osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 8005220:	4b17      	ldr	r3, [pc, #92]	; (8005280 <startRTCTick+0x1fc>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f04f 31ff 	mov.w	r1, #4294967295
 8005228:	4618      	mov	r0, r3
 800522a:	f009 ff9b 	bl	800f164 <osMutexAcquire>
   	ScreenState.screenImage = 1;
 800522e:	4b15      	ldr	r3, [pc, #84]	; (8005284 <startRTCTick+0x200>)
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
   	osMutexRelease(screenTextMutexHandle);
 8005236:	4b12      	ldr	r3, [pc, #72]	; (8005280 <startRTCTick+0x1fc>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4618      	mov	r0, r3
 800523c:	f009 fff0 	bl	800f220 <osMutexRelease>
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 8005240:	4b0e      	ldr	r3, [pc, #56]	; (800527c <startRTCTick+0x1f8>)
 8005242:	6818      	ldr	r0, [r3, #0]
 8005244:	7ff9      	ldrb	r1, [r7, #31]
 8005246:	2300      	movs	r3, #0
 8005248:	2203      	movs	r2, #3
 800524a:	f00d f945 	bl	80124d8 <xTaskGenericNotify>

    osDelay(3000);
 800524e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005252:	f009 febf 	bl	800efd4 <osDelay>

    newScreen = SCREEN_OFF;
 8005256:	2300      	movs	r3, #0
 8005258:	77fb      	strb	r3, [r7, #31]
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 800525a:	4b08      	ldr	r3, [pc, #32]	; (800527c <startRTCTick+0x1f8>)
 800525c:	6818      	ldr	r0, [r3, #0]
 800525e:	7ff9      	ldrb	r1, [r7, #31]
 8005260:	2300      	movs	r3, #0
 8005262:	2203      	movs	r2, #3
 8005264:	f00d f938 	bl	80124d8 <xTaskGenericNotify>
  {
 8005268:	e73c      	b.n	80050e4 <startRTCTick+0x60>
 800526a:	bf00      	nop
 800526c:	20005c44 	.word	0x20005c44
 8005270:	20005e50 	.word	0x20005e50
 8005274:	20005e84 	.word	0x20005e84
 8005278:	20005e48 	.word	0x20005e48
 800527c:	20005e74 	.word	0x20005e74
 8005280:	20005ccc 	.word	0x20005ccc
 8005284:	20005fa0 	.word	0x20005fa0
 8005288:	080163a0 	.word	0x080163a0

0800528c <startBLETX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBLETX */
void startBLETX(void *argument)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint16_t sendData;

  /* Infinite loop */
  for(;;)
  {
    if (osMessageQueueGet(bleTXqueueHandle, &sendData, NULL, osWaitForever) == osOK){
 8005294:	4b08      	ldr	r3, [pc, #32]	; (80052b8 <startBLETX+0x2c>)
 8005296:	6818      	ldr	r0, [r3, #0]
 8005298:	f107 010e 	add.w	r1, r7, #14
 800529c:	f04f 33ff 	mov.w	r3, #4294967295
 80052a0:	2200      	movs	r2, #0
 80052a2:	f00a fa63 	bl	800f76c <osMessageQueueGet>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1f3      	bne.n	8005294 <startBLETX+0x8>
    	P2PS_Send_Data(sendData);
 80052ac:	89fb      	ldrh	r3, [r7, #14]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7fc fb08 	bl	80018c4 <P2PS_Send_Data>
    if (osMessageQueueGet(bleTXqueueHandle, &sendData, NULL, osWaitForever) == osOK){
 80052b4:	e7ee      	b.n	8005294 <startBLETX+0x8>
 80052b6:	bf00      	nop
 80052b8:	20005f34 	.word	0x20005f34

080052bc <startBLERX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBLERX */
void startBLERX(void *argument)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b08e      	sub	sp, #56	; 0x38
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  P2PS_STM_Data_t rxData;

  for(;;)
  {

	if (osMessageQueueGet(bleRXqueueHandle, &rxData, NULL, osWaitForever) == osOK){
 80052c4:	4b37      	ldr	r3, [pc, #220]	; (80053a4 <startBLERX+0xe8>)
 80052c6:	6818      	ldr	r0, [r3, #0]
 80052c8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80052cc:	f04f 33ff 	mov.w	r3, #4294967295
 80052d0:	2200      	movs	r2, #0
 80052d2:	f00a fa4b 	bl	800f76c <osMessageQueueGet>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1f3      	bne.n	80052c4 <startBLERX+0x8>

			memcpy(&P2P_Server_App_Context.OTATimestamp, &(rxData.pPayload[2]), 8);
 80052dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052de:	3302      	adds	r3, #2
 80052e0:	2208      	movs	r2, #8
 80052e2:	4619      	mov	r1, r3
 80052e4:	4830      	ldr	r0, [pc, #192]	; (80053a8 <startBLERX+0xec>)
 80052e6:	f00d fe91 	bl	801300c <memcpy>
    	    P2P_Server_App_Context.OTA12HrFormat = rxData.pPayload[10];
 80052ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ec:	7a9a      	ldrb	r2, [r3, #10]
 80052ee:	4b2f      	ldr	r3, [pc, #188]	; (80053ac <startBLERX+0xf0>)
 80052f0:	741a      	strb	r2, [r3, #16]
    		P2P_Server_App_Context.OTADaylightSavings = rxData.pPayload[11];
 80052f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f4:	7ada      	ldrb	r2, [r3, #11]
 80052f6:	4b2d      	ldr	r3, [pc, #180]	; (80053ac <startBLERX+0xf0>)
 80052f8:	745a      	strb	r2, [r3, #17]

    	    RTC_TimeTypeDef sTime = {0};
 80052fa:	f107 0318 	add.w	r3, r7, #24
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	605a      	str	r2, [r3, #4]
 8005304:	609a      	str	r2, [r3, #8]
 8005306:	60da      	str	r2, [r3, #12]
 8005308:	611a      	str	r2, [r3, #16]
    		RTC_DateTypeDef sDate = {0};
 800530a:	2300      	movs	r3, #0
 800530c:	617b      	str	r3, [r7, #20]

    		uint8_t timestampvals[8];
    		memcpy(timestampvals, &(P2P_Server_App_Context.OTATimestamp), 8);
 800530e:	4a27      	ldr	r2, [pc, #156]	; (80053ac <startBLERX+0xf0>)
 8005310:	f107 030c 	add.w	r3, r7, #12
 8005314:	3208      	adds	r2, #8
 8005316:	e892 0003 	ldmia.w	r2, {r0, r1}
 800531a:	e883 0003 	stmia.w	r3, {r0, r1}

    		uint8_t AMPM = timestampvals[0];
 800531e:	7b3b      	ldrb	r3, [r7, #12]
 8005320:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    		sTime.Hours      = timestampvals[3];
 8005324:	7bfb      	ldrb	r3, [r7, #15]
 8005326:	763b      	strb	r3, [r7, #24]
    		sTime.Minutes    = timestampvals[2];
 8005328:	7bbb      	ldrb	r3, [r7, #14]
 800532a:	767b      	strb	r3, [r7, #25]
    		sTime.Seconds    = timestampvals[1];
 800532c:	7b7b      	ldrb	r3, [r7, #13]
 800532e:	76bb      	strb	r3, [r7, #26]
    		sTime.SubSeconds = 0x0;
 8005330:	2300      	movs	r3, #0
 8005332:	61fb      	str	r3, [r7, #28]
    		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005334:	2300      	movs	r3, #0
 8005336:	627b      	str	r3, [r7, #36]	; 0x24

    		if (P2P_Server_App_Context.OTADaylightSavings){ sTime.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H; }
 8005338:	4b1c      	ldr	r3, [pc, #112]	; (80053ac <startBLERX+0xf0>)
 800533a:	7c5b      	ldrb	r3, [r3, #17]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d002      	beq.n	8005346 <startBLERX+0x8a>
 8005340:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005344:	627b      	str	r3, [r7, #36]	; 0x24

    		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005346:	2300      	movs	r3, #0
 8005348:	62bb      	str	r3, [r7, #40]	; 0x28

    		sDate.WeekDay = timestampvals[7];
 800534a:	7cfb      	ldrb	r3, [r7, #19]
 800534c:	753b      	strb	r3, [r7, #20]
    		sDate.Month   = timestampvals[6];
 800534e:	7cbb      	ldrb	r3, [r7, #18]
 8005350:	757b      	strb	r3, [r7, #21]
    		sDate.Date    = timestampvals[5];
 8005352:	7c7b      	ldrb	r3, [r7, #17]
 8005354:	75bb      	strb	r3, [r7, #22]
    		sDate.Year    = timestampvals[4];
 8005356:	7c3b      	ldrb	r3, [r7, #16]
 8005358:	75fb      	strb	r3, [r7, #23]

    		osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 800535a:	4b15      	ldr	r3, [pc, #84]	; (80053b0 <startBLERX+0xf4>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f04f 31ff 	mov.w	r1, #4294967295
 8005362:	4618      	mov	r0, r3
 8005364:	f009 fefe 	bl	800f164 <osMutexAcquire>
    		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {Error_Handler();}
 8005368:	f107 0318 	add.w	r3, r7, #24
 800536c:	2201      	movs	r2, #1
 800536e:	4619      	mov	r1, r3
 8005370:	4810      	ldr	r0, [pc, #64]	; (80053b4 <startBLERX+0xf8>)
 8005372:	f004 f8ac 	bl	80094ce <HAL_RTC_SetTime>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <startBLERX+0xc4>
 800537c:	f000 f990 	bl	80056a0 <Error_Handler>
    		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {Error_Handler();}
 8005380:	f107 0314 	add.w	r3, r7, #20
 8005384:	2201      	movs	r2, #1
 8005386:	4619      	mov	r1, r3
 8005388:	480a      	ldr	r0, [pc, #40]	; (80053b4 <startBLERX+0xf8>)
 800538a:	f004 f9c0 	bl	800970e <HAL_RTC_SetDate>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <startBLERX+0xdc>
 8005394:	f000 f984 	bl	80056a0 <Error_Handler>
    	    osMutexRelease(rtcMutexHandle);
 8005398:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <startBLERX+0xf4>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4618      	mov	r0, r3
 800539e:	f009 ff3f 	bl	800f220 <osMutexRelease>
	if (osMessageQueueGet(bleRXqueueHandle, &rxData, NULL, osWaitForever) == osOK){
 80053a2:	e78f      	b.n	80052c4 <startBLERX+0x8>
 80053a4:	20005c38 	.word	0x20005c38
 80053a8:	200002b8 	.word	0x200002b8
 80053ac:	200002b0 	.word	0x200002b0
 80053b0:	20005c44 	.word	0x20005c44
 80053b4:	20005e50 	.word	0x20005e50

080053b8 <startLEDTimer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startLEDTimer */
void startLEDTimer(void *argument)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  //wait until notified
	  ulTaskNotifyTake( pdTRUE, portMAX_DELAY);
 80053c0:	f04f 31ff 	mov.w	r1, #4294967295
 80053c4:	2001      	movs	r0, #1
 80053c6:	f00c ffe5 	bl	8012394 <ulTaskNotifyTake>

	  //pull time of delay before updating LED state
	  osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 80053ca:	4b1c      	ldr	r3, [pc, #112]	; (800543c <startLEDTimer+0x84>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f04f 31ff 	mov.w	r1, #4294967295
 80053d2:	4618      	mov	r0, r3
 80053d4:	f009 fec6 	bl	800f164 <osMutexAcquire>
	  waitState = LedState;
 80053d8:	4a19      	ldr	r2, [pc, #100]	; (8005440 <startLEDTimer+0x88>)
 80053da:	f107 0308 	add.w	r3, r7, #8
 80053de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053e2:	e883 0003 	stmia.w	r3, {r0, r1}
	  LedState.modeTimeout = 0;
 80053e6:	4b16      	ldr	r3, [pc, #88]	; (8005440 <startLEDTimer+0x88>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	605a      	str	r2, [r3, #4]
	  osMutexRelease(ledStateMutexHandle);
 80053ec:	4b13      	ldr	r3, [pc, #76]	; (800543c <startLEDTimer+0x84>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f009 ff15 	bl	800f220 <osMutexRelease>

	  //delay
	  osDelay(waitState.modeTimeout);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f009 fdeb 	bl	800efd4 <osDelay>

	  //update LED state in LedState
	  osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 80053fe:	4b0f      	ldr	r3, [pc, #60]	; (800543c <startLEDTimer+0x84>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f04f 31ff 	mov.w	r1, #4294967295
 8005406:	4618      	mov	r0, r3
 8005408:	f009 feac 	bl	800f164 <osMutexAcquire>
	  //check that state values haven't changed since
	  //started waiting before updating state
	  if (waitState.currentMode == LedState.currentMode && waitState.nextMode == LedState.nextMode) {
 800540c:	7a3a      	ldrb	r2, [r7, #8]
 800540e:	4b0c      	ldr	r3, [pc, #48]	; (8005440 <startLEDTimer+0x88>)
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	429a      	cmp	r2, r3
 8005414:	d10b      	bne.n	800542e <startLEDTimer+0x76>
 8005416:	7a7a      	ldrb	r2, [r7, #9]
 8005418:	4b09      	ldr	r3, [pc, #36]	; (8005440 <startLEDTimer+0x88>)
 800541a:	785b      	ldrb	r3, [r3, #1]
 800541c:	429a      	cmp	r2, r3
 800541e:	d106      	bne.n	800542e <startLEDTimer+0x76>
		  LedState.currentMode = LedState.nextMode;
 8005420:	4b07      	ldr	r3, [pc, #28]	; (8005440 <startLEDTimer+0x88>)
 8005422:	785a      	ldrb	r2, [r3, #1]
 8005424:	4b06      	ldr	r3, [pc, #24]	; (8005440 <startLEDTimer+0x88>)
 8005426:	701a      	strb	r2, [r3, #0]
		  LedState.nextMode = LED_NONE;
 8005428:	4b05      	ldr	r3, [pc, #20]	; (8005440 <startLEDTimer+0x88>)
 800542a:	2200      	movs	r2, #0
 800542c:	705a      	strb	r2, [r3, #1]
	  }
	  osMutexRelease(ledStateMutexHandle);
 800542e:	4b03      	ldr	r3, [pc, #12]	; (800543c <startLEDTimer+0x84>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4618      	mov	r0, r3
 8005434:	f009 fef4 	bl	800f220 <osMutexRelease>
	  ulTaskNotifyTake( pdTRUE, portMAX_DELAY);
 8005438:	e7c2      	b.n	80053c0 <startLEDTimer+0x8>
 800543a:	bf00      	nop
 800543c:	20005e84 	.word	0x20005e84
 8005440:	20005e48 	.word	0x20005e48

08005444 <startTouchRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTouchRead */
void startTouchRead(void *argument)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTouchRead */

  int16_t current_minute = -1;
 800544c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005450:	827b      	strh	r3, [r7, #18]
  uint8_t touch_end_count = 0;
 8005452:	2300      	movs	r3, #0
 8005454:	75fb      	strb	r3, [r7, #23]
  uint16_t last_minute = -1;
 8005456:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800545a:	82bb      	strh	r3, [r7, #20]
  #define TOUCH_END_TIMEOUT 6

  osDelay(3000); // give screen time to turn on.
 800545c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005460:	f009 fdb8 	bl	800efd4 <osDelay>

  //init peripheral (not turbo mode, poll every 250ms, if touch sample at 40Hz until no touch)
  if (setup_iqs263() == HAL_ERROR) {
 8005464:	f7fe fd16 	bl	8003e94 <setup_iqs263>
 8005468:	4603      	mov	r3, r0
 800546a:	2b01      	cmp	r3, #1
 800546c:	d11b      	bne.n	80054a6 <startTouchRead+0x62>

	  osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 800546e:	4b37      	ldr	r3, [pc, #220]	; (800554c <startTouchRead+0x108>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f04f 31ff 	mov.w	r1, #4294967295
 8005476:	4618      	mov	r0, r3
 8005478:	f009 fe74 	bl	800f164 <osMutexAcquire>
	  strncpy(ScreenState.screenText, "touch fail", sizeof("touch fail"));
 800547c:	4a34      	ldr	r2, [pc, #208]	; (8005550 <startTouchRead+0x10c>)
 800547e:	4b35      	ldr	r3, [pc, #212]	; (8005554 <startTouchRead+0x110>)
 8005480:	cb03      	ldmia	r3!, {r0, r1}
 8005482:	6010      	str	r0, [r2, #0]
 8005484:	6051      	str	r1, [r2, #4]
 8005486:	8819      	ldrh	r1, [r3, #0]
 8005488:	789b      	ldrb	r3, [r3, #2]
 800548a:	8111      	strh	r1, [r2, #8]
 800548c:	7293      	strb	r3, [r2, #10]
	  osMutexRelease(screenTextMutexHandle);
 800548e:	4b2f      	ldr	r3, [pc, #188]	; (800554c <startTouchRead+0x108>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4618      	mov	r0, r3
 8005494:	f009 fec4 	bl	800f220 <osMutexRelease>
	  xTaskNotify(screenUpdateHandle, (uint32_t)SCREEN_TEXT, eSetValueWithOverwrite);
 8005498:	4b2f      	ldr	r3, [pc, #188]	; (8005558 <startTouchRead+0x114>)
 800549a:	6818      	ldr	r0, [r3, #0]
 800549c:	2300      	movs	r3, #0
 800549e:	2203      	movs	r2, #3
 80054a0:	2103      	movs	r1, #3
 80054a2:	f00d f819 	bl	80124d8 <xTaskGenericNotify>
  }

  /* Infinite loop */
  for(;;)
  {
   current_minute = iqs263_get_min_if_pressed(); //returns -1 if no press
 80054a6:	f7fe fd93 	bl	8003fd0 <iqs263_get_min_if_pressed>
 80054aa:	4603      	mov	r3, r0
 80054ac:	827b      	strh	r3, [r7, #18]
   if (current_minute != -1) { //touch!
 80054ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80054b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b6:	d011      	beq.n	80054dc <startTouchRead+0x98>

	   touch_end_count = 1;
 80054b8:	2301      	movs	r3, #1
 80054ba:	75fb      	strb	r3, [r7, #23]

	   if (last_minute != current_minute) {
 80054bc:	8aba      	ldrh	r2, [r7, #20]
 80054be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d006      	beq.n	80054d4 <startTouchRead+0x90>
		   //update touch stuff!
		   last_minute = current_minute;
 80054c6:	8a7b      	ldrh	r3, [r7, #18]
 80054c8:	82bb      	strh	r3, [r7, #20]
	   	   er_oled_print_2digit(current_minute);
 80054ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7fd fc14 	bl	8002cfc <er_oled_print_2digit>
	   }

	   //optional
	   osDelay(25);
 80054d4:	2019      	movs	r0, #25
 80054d6:	f009 fd7d 	bl	800efd4 <osDelay>
 80054da:	e7e4      	b.n	80054a6 <startTouchRead+0x62>
	   strncpy(ScreenState.screenText, str, sizeof(str));
	   osMutexRelease(screenTextMutexHandle);
	   xTaskNotify(screenUpdateHandle, (uint32_t)SCREEN_TEXT, eSetValueWithOverwrite);
	   */

   } else if (touch_end_count > 0){
 80054dc:	7dfb      	ldrb	r3, [r7, #23]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d02f      	beq.n	8005542 <startTouchRead+0xfe>

	   touch_end_count += 1;//increment touching_end_count
 80054e2:	7dfb      	ldrb	r3, [r7, #23]
 80054e4:	3301      	adds	r3, #1
 80054e6:	75fb      	strb	r3, [r7, #23]

	   if (touch_end_count >= TOUCH_END_TIMEOUT){  //if it hits this value, we're done
 80054e8:	7dfb      	ldrb	r3, [r7, #23]
 80054ea:	2b05      	cmp	r3, #5
 80054ec:	d925      	bls.n	800553a <startTouchRead+0xf6>

		   touch_end_count = 0;
 80054ee:	2300      	movs	r3, #0
 80054f0:	75fb      	strb	r3, [r7, #23]

		   //DO THINGS WITH CONFIRMED TOUCH == LAST_MINUTE
		   osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 80054f2:	4b16      	ldr	r3, [pc, #88]	; (800554c <startTouchRead+0x108>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f04f 31ff 	mov.w	r1, #4294967295
 80054fa:	4618      	mov	r0, r3
 80054fc:	f009 fe32 	bl	800f164 <osMutexAcquire>
		   char out_text[10];
		   sprintf(out_text, "FINAL: %d", last_minute);
 8005500:	8aba      	ldrh	r2, [r7, #20]
 8005502:	f107 0308 	add.w	r3, r7, #8
 8005506:	4915      	ldr	r1, [pc, #84]	; (800555c <startTouchRead+0x118>)
 8005508:	4618      	mov	r0, r3
 800550a:	f00e fb23 	bl	8013b54 <siprintf>
		   strncpy(ScreenState.screenText, out_text, sizeof(out_text));
 800550e:	f107 0308 	add.w	r3, r7, #8
 8005512:	220a      	movs	r2, #10
 8005514:	4619      	mov	r1, r3
 8005516:	480e      	ldr	r0, [pc, #56]	; (8005550 <startTouchRead+0x10c>)
 8005518:	f00e fb3c 	bl	8013b94 <strncpy>
		   osMutexRelease(screenTextMutexHandle);
 800551c:	4b0b      	ldr	r3, [pc, #44]	; (800554c <startTouchRead+0x108>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4618      	mov	r0, r3
 8005522:	f009 fe7d 	bl	800f220 <osMutexRelease>
		   xTaskNotify(screenUpdateHandle, (uint32_t)SCREEN_TEXT, eSetValueWithOverwrite);
 8005526:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <startTouchRead+0x114>)
 8005528:	6818      	ldr	r0, [r3, #0]
 800552a:	2300      	movs	r3, #0
 800552c:	2203      	movs	r2, #3
 800552e:	2103      	movs	r1, #3
 8005530:	f00c ffd2 	bl	80124d8 <xTaskGenericNotify>

		   last_minute = -1;
 8005534:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005538:	82bb      	strh	r3, [r7, #20]

	   }

	   osDelay(25);
 800553a:	2019      	movs	r0, #25
 800553c:	f009 fd4a 	bl	800efd4 <osDelay>
 8005540:	e7b1      	b.n	80054a6 <startTouchRead+0x62>


   }else { //no touch, wait for a touch
    osDelay(250);
 8005542:	20fa      	movs	r0, #250	; 0xfa
 8005544:	f009 fd46 	bl	800efd4 <osDelay>
   current_minute = iqs263_get_min_if_pressed(); //returns -1 if no press
 8005548:	e7ad      	b.n	80054a6 <startTouchRead+0x62>
 800554a:	bf00      	nop
 800554c:	20005ccc 	.word	0x20005ccc
 8005550:	20005fa0 	.word	0x20005fa0
 8005554:	080163ac 	.word	0x080163ac
 8005558:	20005e74 	.word	0x20005e74
 800555c:	080163b8 	.word	0x080163b8

08005560 <PeriphClock_Config>:
  /* USER CODE END startTouchRead */
}


void PeriphClock_Config(void)
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 8005564:	bf00      	nop
}
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b082      	sub	sp, #8
 8005572:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8005574:	2000      	movs	r0, #0
 8005576:	f008 fe41 	bl	800e1fc <OTP_Read>
 800557a:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d005      	beq.n	800558e <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	799b      	ldrb	r3, [r3, #6]
 8005586:	4618      	mov	r0, r3
 8005588:	f7fe fd64 	bl	8004054 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800558c:	bf00      	nop
 800558e:	bf00      	nop
}  
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <Reset_Device>:


static void Reset_Device( void )
{
 8005596:	b580      	push	{r7, lr}
 8005598:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
	Reset_BackupDomain();
 800559a:	f000 f827 	bl	80055ec <Reset_BackupDomain>

	Reset_IPCC();
 800559e:	f000 f803 	bl	80055a8 <Reset_IPCC>
#endif

	return;
 80055a2:	bf00      	nop
}
 80055a4:	bd80      	pop	{r7, pc}
	...

080055a8 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80055ac:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80055b0:	f7fe fde5 	bl	800417e <LL_AHB3_GRP1_EnableClock>

	LL_C1_IPCC_ClearFlag_CHx(
 80055b4:	213f      	movs	r1, #63	; 0x3f
 80055b6:	480c      	ldr	r0, [pc, #48]	; (80055e8 <Reset_IPCC+0x40>)
 80055b8:	f7fe fe40 	bl	800423c <LL_C1_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_ClearFlag_CHx(
 80055bc:	213f      	movs	r1, #63	; 0x3f
 80055be:	480a      	ldr	r0, [pc, #40]	; (80055e8 <Reset_IPCC+0x40>)
 80055c0:	f7fe fe4a 	bl	8004258 <LL_C2_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableTransmitChannel(
 80055c4:	213f      	movs	r1, #63	; 0x3f
 80055c6:	4808      	ldr	r0, [pc, #32]	; (80055e8 <Reset_IPCC+0x40>)
 80055c8:	f7fe fdf2 	bl	80041b0 <LL_C1_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableTransmitChannel(
 80055cc:	213f      	movs	r1, #63	; 0x3f
 80055ce:	4806      	ldr	r0, [pc, #24]	; (80055e8 <Reset_IPCC+0x40>)
 80055d0:	f7fe fe11 	bl	80041f6 <LL_C2_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableReceiveChannel(
 80055d4:	213f      	movs	r1, #63	; 0x3f
 80055d6:	4804      	ldr	r0, [pc, #16]	; (80055e8 <Reset_IPCC+0x40>)
 80055d8:	f7fe fdfc 	bl	80041d4 <LL_C1_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableReceiveChannel(
 80055dc:	213f      	movs	r1, #63	; 0x3f
 80055de:	4802      	ldr	r0, [pc, #8]	; (80055e8 <Reset_IPCC+0x40>)
 80055e0:	f7fe fe1b 	bl	800421a <LL_C2_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	return;
 80055e4:	bf00      	nop
}
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	58000c00 	.word	0x58000c00

080055ec <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80055f0:	f7fe fd86 	bl	8004100 <LL_RCC_IsActiveFlag_PINRST>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00d      	beq.n	8005616 <Reset_BackupDomain+0x2a>
 80055fa:	f7fe fd94 	bl	8004126 <LL_RCC_IsActiveFlag_SFTRST>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d108      	bne.n	8005616 <Reset_BackupDomain+0x2a>
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8005604:	f002 f8a2 	bl	800774c <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 8005608:	f002 f8a0 	bl	800774c <HAL_PWR_EnableBkUpAccess>

		__HAL_RCC_BACKUPRESET_FORCE();
 800560c:	f7fe fd56 	bl	80040bc <LL_RCC_ForceBackupDomainReset>
		__HAL_RCC_BACKUPRESET_RELEASE();
 8005610:	f7fe fd65 	bl	80040de <LL_RCC_ReleaseBackupDomainReset>
	}

	return;
 8005614:	bf00      	nop
 8005616:	bf00      	nop
}
 8005618:	bd80      	pop	{r7, pc}

0800561a <Init_Exti>:

static void Init_Exti( void )
{
 800561a:	b580      	push	{r7, lr}
 800561c:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 800561e:	f04f 30ff 	mov.w	r0, #4294967295
 8005622:	f7fe fceb 	bl	8003ffc <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 8005626:	f06f 0050 	mvn.w	r0, #80	; 0x50
 800562a:	f7fe fcfd 	bl	8004028 <LL_EXTI_DisableIT_32_63>

  return;
 800562e:	bf00      	nop
}
 8005630:	bd80      	pop	{r7, pc}

08005632 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b084      	sub	sp, #16
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800563a:	f000 fca7 	bl	8005f8c <HAL_GetTick>
 800563e:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564a:	d00a      	beq.n	8005662 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800564c:	f000 fcb6 	bl	8005fbc <HAL_GetTickFreq>
 8005650:	4603      	mov	r3, r0
 8005652:	461a      	mov	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4413      	add	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800565a:	e002      	b.n	8005662 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800565c:	f7fe fe0a 	bl	8004274 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8005660:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8005662:	f000 fc93 	bl	8005f8c <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	429a      	cmp	r2, r3
 8005670:	d8f4      	bhi.n	800565c <HAL_Delay+0x2a>
  }
}
 8005672:	bf00      	nop
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
	...

0800567c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a04      	ldr	r2, [pc, #16]	; (800569c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d101      	bne.n	8005692 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800568e:	f000 fc69 	bl	8005f64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005692:	bf00      	nop
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	40014800 	.word	0x40014800

080056a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80056a0:	b480      	push	{r7}
 80056a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 
  /* USER CODE END Error_Handler_Debug */
}
 80056a4:	bf00      	nop
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <LL_RCC_SetRTCClockSource>:
{
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80056b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80056ce:	bf00      	nop
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <LL_RCC_EnableRTC>:
{
 80056da:	b480      	push	{r7}
 80056dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80056de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80056f2:	bf00      	nop
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <LL_AHB2_GRP1_EnableClock>:
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005708:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800570a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4313      	orrs	r3, r2
 8005712:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005718:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4013      	ands	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005720:	68fb      	ldr	r3, [r7, #12]
}
 8005722:	bf00      	nop
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <LL_AHB3_GRP1_EnableClock>:
{
 800572e:	b480      	push	{r7}
 8005730:	b085      	sub	sp, #20
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8005736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800573a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800573c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4313      	orrs	r3, r2
 8005744:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8005746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800574a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4013      	ands	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005752:	68fb      	ldr	r3, [r7, #12]
}
 8005754:	bf00      	nop
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <LL_APB1_GRP1_EnableClock>:
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800576c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800576e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4313      	orrs	r3, r2
 8005776:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800577c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4013      	ands	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005784:	68fb      	ldr	r3, [r7, #12]
}
 8005786:	bf00      	nop
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <LL_APB1_GRP2_EnableClock>:
{
 8005792:	b480      	push	{r7}
 8005794:	b085      	sub	sp, #20
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 800579a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800579e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80057a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80057aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4013      	ands	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80057b6:	68fb      	ldr	r3, [r7, #12]
}
 80057b8:	bf00      	nop
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <LL_APB2_GRP1_EnableClock>:
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80057cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80057d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4313      	orrs	r3, r2
 80057da:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80057dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4013      	ands	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80057e8:	68fb      	ldr	r3, [r7, #12]
}
 80057ea:	bf00      	nop
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80057fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80057fe:	f7ff ff96 	bl	800572e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005802:	2200      	movs	r2, #0
 8005804:	210f      	movs	r1, #15
 8005806:	f06f 0001 	mvn.w	r0, #1
 800580a:	f000 fd05 	bl	8006218 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 800580e:	2200      	movs	r2, #0
 8005810:	2105      	movs	r1, #5
 8005812:	202e      	movs	r0, #46	; 0x2e
 8005814:	f000 fd00 	bl	8006218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8005818:	202e      	movs	r0, #46	; 0x2e
 800581a:	f000 fd17 	bl	800624c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 6, 0);
 800581e:	2200      	movs	r2, #0
 8005820:	2106      	movs	r1, #6
 8005822:	202c      	movs	r0, #44	; 0x2c
 8005824:	f000 fcf8 	bl	8006218 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 6, 0);
 8005828:	2200      	movs	r2, #0
 800582a:	2106      	movs	r1, #6
 800582c:	202d      	movs	r0, #45	; 0x2d
 800582e:	f000 fcf3 	bl	8006218 <HAL_NVIC_SetPriority>

  /* USER CODE END MspInit 1 */
}
 8005832:	bf00      	nop
 8005834:	bd80      	pop	{r7, pc}
	...

08005838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08c      	sub	sp, #48	; 0x30
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005840:	f107 031c 	add.w	r3, r7, #28
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	605a      	str	r2, [r3, #4]
 800584a:	609a      	str	r2, [r3, #8]
 800584c:	60da      	str	r2, [r3, #12]
 800584e:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  if(huart->Instance==LPUART1)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a6c      	ldr	r2, [pc, #432]	; (8005a08 <HAL_UART_MspInit+0x1d0>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d16f      	bne.n	800593a <HAL_UART_MspInit+0x102>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800585a:	2001      	movs	r0, #1
 800585c:	f7ff ff99 	bl	8005792 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005860:	2001      	movs	r0, #1
 8005862:	f7ff ff4b 	bl	80056fc <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    PA6     ------> LPUART1_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005866:	230c      	movs	r3, #12
 8005868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800586a:	2302      	movs	r3, #2
 800586c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800586e:	2300      	movs	r3, #0
 8005870:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005872:	2303      	movs	r3, #3
 8005874:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8005876:	2308      	movs	r3, #8
 8005878:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800587a:	f107 031c 	add.w	r3, r7, #28
 800587e:	4619      	mov	r1, r3
 8005880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005884:	f000 ff20 	bl	80066c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005888:	2340      	movs	r3, #64	; 0x40
 800588a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800588c:	2302      	movs	r3, #2
 800588e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005890:	2300      	movs	r3, #0
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005894:	2300      	movs	r3, #0
 8005896:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8005898:	2308      	movs	r3, #8
 800589a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800589c:	f107 031c 	add.w	r3, r7, #28
 80058a0:	4619      	mov	r1, r3
 80058a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058a6:	f000 ff0f 	bl	80066c8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 80058aa:	4b58      	ldr	r3, [pc, #352]	; (8005a0c <HAL_UART_MspInit+0x1d4>)
 80058ac:	4a58      	ldr	r2, [pc, #352]	; (8005a10 <HAL_UART_MspInit+0x1d8>)
 80058ae:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80058b0:	4b56      	ldr	r3, [pc, #344]	; (8005a0c <HAL_UART_MspInit+0x1d4>)
 80058b2:	2211      	movs	r2, #17
 80058b4:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80058b6:	4b55      	ldr	r3, [pc, #340]	; (8005a0c <HAL_UART_MspInit+0x1d4>)
 80058b8:	2210      	movs	r2, #16
 80058ba:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80058bc:	4b53      	ldr	r3, [pc, #332]	; (8005a0c <HAL_UART_MspInit+0x1d4>)
 80058be:	2200      	movs	r2, #0
 80058c0:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80058c2:	4b52      	ldr	r3, [pc, #328]	; (8005a0c <HAL_UART_MspInit+0x1d4>)
 80058c4:	2280      	movs	r2, #128	; 0x80
 80058c6:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80058c8:	4b50      	ldr	r3, [pc, #320]	; (8005a0c <HAL_UART_MspInit+0x1d4>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80058ce:	4b4f      	ldr	r3, [pc, #316]	; (8005a0c <HAL_UART_MspInit+0x1d4>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80058d4:	4b4d      	ldr	r3, [pc, #308]	; (8005a0c <HAL_UART_MspInit+0x1d4>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80058da:	4b4c      	ldr	r3, [pc, #304]	; (8005a0c <HAL_UART_MspInit+0x1d4>)
 80058dc:	2200      	movs	r2, #0
 80058de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80058e0:	484a      	ldr	r0, [pc, #296]	; (8005a0c <HAL_UART_MspInit+0x1d4>)
 80058e2:	f000 fceb 	bl	80062bc <HAL_DMA_Init>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 80058ec:	f7ff fed8 	bl	80056a0 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 80058f0:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 80058f4:	60fb      	str	r3, [r7, #12]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80058f6:	2300      	movs	r3, #0
 80058f8:	613b      	str	r3, [r7, #16]
    pSyncConfig.SyncEnable = DISABLE;
 80058fa:	2300      	movs	r3, #0
 80058fc:	753b      	strb	r3, [r7, #20]
    pSyncConfig.EventEnable = DISABLE;
 80058fe:	2300      	movs	r3, #0
 8005900:	757b      	strb	r3, [r7, #21]
    pSyncConfig.RequestNumber = 1;
 8005902:	2301      	movs	r3, #1
 8005904:	61bb      	str	r3, [r7, #24]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 8005906:	f107 030c 	add.w	r3, r7, #12
 800590a:	4619      	mov	r1, r3
 800590c:	483f      	ldr	r0, [pc, #252]	; (8005a0c <HAL_UART_MspInit+0x1d4>)
 800590e:	f000 fe9b 	bl	8006648 <HAL_DMAEx_ConfigMuxSync>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d001      	beq.n	800591c <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8005918:	f7ff fec2 	bl	80056a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a3b      	ldr	r2, [pc, #236]	; (8005a0c <HAL_UART_MspInit+0x1d4>)
 8005920:	675a      	str	r2, [r3, #116]	; 0x74
 8005922:	4a3a      	ldr	r2, [pc, #232]	; (8005a0c <HAL_UART_MspInit+0x1d4>)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8005928:	2200      	movs	r2, #0
 800592a:	2105      	movs	r1, #5
 800592c:	2025      	movs	r0, #37	; 0x25
 800592e:	f000 fc73 	bl	8006218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8005932:	2025      	movs	r0, #37	; 0x25
 8005934:	f000 fc8a 	bl	800624c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005938:	e061      	b.n	80059fe <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==USART1)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a35      	ldr	r2, [pc, #212]	; (8005a14 <HAL_UART_MspInit+0x1dc>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d15c      	bne.n	80059fe <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005944:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005948:	f7ff ff3c 	bl	80057c4 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800594c:	2001      	movs	r0, #1
 800594e:	f7ff fed5 	bl	80056fc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005952:	2002      	movs	r0, #2
 8005954:	f7ff fed2 	bl	80056fc <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005958:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800595c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800595e:	2302      	movs	r3, #2
 8005960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005962:	2300      	movs	r3, #0
 8005964:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005966:	2300      	movs	r3, #0
 8005968:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800596a:	2307      	movs	r3, #7
 800596c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800596e:	f107 031c 	add.w	r3, r7, #28
 8005972:	4619      	mov	r1, r3
 8005974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005978:	f000 fea6 	bl	80066c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800597c:	23c0      	movs	r3, #192	; 0xc0
 800597e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005980:	2302      	movs	r3, #2
 8005982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005984:	2301      	movs	r3, #1
 8005986:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005988:	2303      	movs	r3, #3
 800598a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800598c:	2307      	movs	r3, #7
 800598e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005990:	f107 031c 	add.w	r3, r7, #28
 8005994:	4619      	mov	r1, r3
 8005996:	4820      	ldr	r0, [pc, #128]	; (8005a18 <HAL_UART_MspInit+0x1e0>)
 8005998:	f000 fe96 	bl	80066c8 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 800599c:	4b1f      	ldr	r3, [pc, #124]	; (8005a1c <HAL_UART_MspInit+0x1e4>)
 800599e:	4a20      	ldr	r2, [pc, #128]	; (8005a20 <HAL_UART_MspInit+0x1e8>)
 80059a0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80059a2:	4b1e      	ldr	r3, [pc, #120]	; (8005a1c <HAL_UART_MspInit+0x1e4>)
 80059a4:	220f      	movs	r2, #15
 80059a6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80059a8:	4b1c      	ldr	r3, [pc, #112]	; (8005a1c <HAL_UART_MspInit+0x1e4>)
 80059aa:	2210      	movs	r2, #16
 80059ac:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80059ae:	4b1b      	ldr	r3, [pc, #108]	; (8005a1c <HAL_UART_MspInit+0x1e4>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80059b4:	4b19      	ldr	r3, [pc, #100]	; (8005a1c <HAL_UART_MspInit+0x1e4>)
 80059b6:	2280      	movs	r2, #128	; 0x80
 80059b8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80059ba:	4b18      	ldr	r3, [pc, #96]	; (8005a1c <HAL_UART_MspInit+0x1e4>)
 80059bc:	2200      	movs	r2, #0
 80059be:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80059c0:	4b16      	ldr	r3, [pc, #88]	; (8005a1c <HAL_UART_MspInit+0x1e4>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80059c6:	4b15      	ldr	r3, [pc, #84]	; (8005a1c <HAL_UART_MspInit+0x1e4>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80059cc:	4b13      	ldr	r3, [pc, #76]	; (8005a1c <HAL_UART_MspInit+0x1e4>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80059d2:	4812      	ldr	r0, [pc, #72]	; (8005a1c <HAL_UART_MspInit+0x1e4>)
 80059d4:	f000 fc72 	bl	80062bc <HAL_DMA_Init>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 80059de:	f7ff fe5f 	bl	80056a0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a0d      	ldr	r2, [pc, #52]	; (8005a1c <HAL_UART_MspInit+0x1e4>)
 80059e6:	675a      	str	r2, [r3, #116]	; 0x74
 80059e8:	4a0c      	ldr	r2, [pc, #48]	; (8005a1c <HAL_UART_MspInit+0x1e4>)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80059ee:	2200      	movs	r2, #0
 80059f0:	2105      	movs	r1, #5
 80059f2:	2024      	movs	r0, #36	; 0x24
 80059f4:	f000 fc10 	bl	8006218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80059f8:	2024      	movs	r0, #36	; 0x24
 80059fa:	f000 fc27 	bl	800624c <HAL_NVIC_EnableIRQ>
}
 80059fe:	bf00      	nop
 8005a00:	3730      	adds	r7, #48	; 0x30
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	40008000 	.word	0x40008000
 8005a0c:	20005ed4 	.word	0x20005ed4
 8005a10:	40020044 	.word	0x40020044
 8005a14:	40013800 	.word	0x40013800
 8005a18:	48000400 	.word	0x48000400
 8005a1c:	20005d5c 	.word	0x20005d5c
 8005a20:	40020444 	.word	0x40020444

08005a24 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a0b      	ldr	r2, [pc, #44]	; (8005a60 <HAL_RTC_MspInit+0x3c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d110      	bne.n	8005a58 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8005a36:	f001 fe89 	bl	800774c <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 8005a3a:	f001 fe87 	bl	800774c <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 8005a3e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005a42:	f7ff fe34 	bl	80056ae <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005a46:	f7ff fe48 	bl	80056da <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8005a4a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005a4e:	f7ff fe87 	bl	8005760 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f003 ffe2 	bl	8009a1c <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005a58:	bf00      	nop
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	40002800 	.word	0x40002800

08005a64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b088      	sub	sp, #32
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a6c:	f107 030c 	add.w	r3, r7, #12
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	605a      	str	r2, [r3, #4]
 8005a76:	609a      	str	r2, [r3, #8]
 8005a78:	60da      	str	r2, [r3, #12]
 8005a7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a0f      	ldr	r2, [pc, #60]	; (8005ac0 <HAL_I2C_MspInit+0x5c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d117      	bne.n	8005ab6 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a86:	2002      	movs	r0, #2
 8005a88:	f7ff fe38 	bl	80056fc <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005a8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005a90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005a92:	2312      	movs	r3, #18
 8005a94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a96:	2301      	movs	r3, #1
 8005a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005a9e:	2304      	movs	r3, #4
 8005aa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005aa2:	f107 030c 	add.w	r3, r7, #12
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	4806      	ldr	r0, [pc, #24]	; (8005ac4 <HAL_I2C_MspInit+0x60>)
 8005aaa:	f000 fe0d 	bl	80066c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005aae:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8005ab2:	f7ff fe55 	bl	8005760 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005ab6:	bf00      	nop
 8005ab8:	3720      	adds	r7, #32
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	40005400 	.word	0x40005400
 8005ac4:	48000400 	.word	0x48000400

08005ac8 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b088      	sub	sp, #32
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ad0:	f107 030c 	add.w	r3, r7, #12
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	605a      	str	r2, [r3, #4]
 8005ada:	609a      	str	r2, [r3, #8]
 8005adc:	60da      	str	r2, [r3, #12]
 8005ade:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a0f      	ldr	r2, [pc, #60]	; (8005b24 <HAL_SPI_MspInit+0x5c>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d117      	bne.n	8005b1a <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005aea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005aee:	f7ff fe69 	bl	80057c4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005af2:	2001      	movs	r0, #1
 8005af4:	f7ff fe02 	bl	80056fc <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8005af8:	2382      	movs	r3, #130	; 0x82
 8005afa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005afc:	2302      	movs	r3, #2
 8005afe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b00:	2300      	movs	r3, #0
 8005b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b04:	2300      	movs	r3, #0
 8005b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005b08:	2305      	movs	r3, #5
 8005b0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b0c:	f107 030c 	add.w	r3, r7, #12
 8005b10:	4619      	mov	r1, r3
 8005b12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b16:	f000 fdd7 	bl	80066c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005b1a:	bf00      	nop
 8005b1c:	3720      	adds	r7, #32
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	40013000 	.word	0x40013000

08005b28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a09      	ldr	r2, [pc, #36]	; (8005b5c <HAL_TIM_Base_MspInit+0x34>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d10b      	bne.n	8005b52 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005b3a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005b3e:	f7ff fe41 	bl	80057c4 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8005b42:	2200      	movs	r2, #0
 8005b44:	210f      	movs	r1, #15
 8005b46:	2019      	movs	r0, #25
 8005b48:	f000 fb66 	bl	8006218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005b4c:	2019      	movs	r0, #25
 8005b4e:	f000 fb7d 	bl	800624c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8005b52:	bf00      	nop
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	40012c00 	.word	0x40012c00

08005b60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b68:	f107 030c 	add.w	r3, r7, #12
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	605a      	str	r2, [r3, #4]
 8005b72:	609a      	str	r2, [r3, #8]
 8005b74:	60da      	str	r2, [r3, #12]
 8005b76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a0d      	ldr	r2, [pc, #52]	; (8005bb4 <HAL_TIM_MspPostInit+0x54>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d114      	bne.n	8005bac <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b82:	2001      	movs	r0, #1
 8005b84:	f7ff fdba 	bl	80056fc <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005b88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b8e:	2302      	movs	r3, #2
 8005b90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b92:	2300      	movs	r3, #0
 8005b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b96:	2300      	movs	r3, #0
 8005b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b9e:	f107 030c 	add.w	r3, r7, #12
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ba8:	f000 fd8e 	bl	80066c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005bac:	bf00      	nop
 8005bae:	3720      	adds	r7, #32
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	40012c00 	.word	0x40012c00

08005bb8 <LL_APB2_GRP1_EnableClock>:
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005bc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4013      	ands	r3, r2
 8005bda:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
}
 8005bde:	bf00      	nop
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
	...

08005bec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b08c      	sub	sp, #48	; 0x30
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	201a      	movs	r0, #26
 8005c02:	f000 fb09 	bl	8006218 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8005c06:	201a      	movs	r0, #26
 8005c08:	f000 fb20 	bl	800624c <HAL_NVIC_EnableIRQ>
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8005c0c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8005c10:	f7ff ffd2 	bl	8005bb8 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005c14:	f107 0208 	add.w	r2, r7, #8
 8005c18:	f107 030c 	add.w	r3, r7, #12
 8005c1c:	4611      	mov	r1, r2
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f002 feaa 	bl	8008978 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005c24:	f002 fe92 	bl	800894c <HAL_RCC_GetPCLK2Freq>
 8005c28:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2c:	4a12      	ldr	r2, [pc, #72]	; (8005c78 <HAL_InitTick+0x8c>)
 8005c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c32:	0c9b      	lsrs	r3, r3, #18
 8005c34:	3b01      	subs	r3, #1
 8005c36:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8005c38:	4b10      	ldr	r3, [pc, #64]	; (8005c7c <HAL_InitTick+0x90>)
 8005c3a:	4a11      	ldr	r2, [pc, #68]	; (8005c80 <HAL_InitTick+0x94>)
 8005c3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8005c3e:	4b0f      	ldr	r3, [pc, #60]	; (8005c7c <HAL_InitTick+0x90>)
 8005c40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005c44:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8005c46:	4a0d      	ldr	r2, [pc, #52]	; (8005c7c <HAL_InitTick+0x90>)
 8005c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4a:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8005c4c:	4b0b      	ldr	r3, [pc, #44]	; (8005c7c <HAL_InitTick+0x90>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c52:	4b0a      	ldr	r3, [pc, #40]	; (8005c7c <HAL_InitTick+0x90>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8005c58:	4808      	ldr	r0, [pc, #32]	; (8005c7c <HAL_InitTick+0x90>)
 8005c5a:	f004 fa83 	bl	800a164 <HAL_TIM_Base_Init>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d104      	bne.n	8005c6e <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8005c64:	4805      	ldr	r0, [pc, #20]	; (8005c7c <HAL_InitTick+0x90>)
 8005c66:	f004 fad5 	bl	800a214 <HAL_TIM_Base_Start_IT>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	e000      	b.n	8005c70 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3730      	adds	r7, #48	; 0x30
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	431bde83 	.word	0x431bde83
 8005c7c:	20006024 	.word	0x20006024
 8005c80:	40014800 	.word	0x40014800

08005c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005c84:	b480      	push	{r7}
 8005c86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005c88:	bf00      	nop
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c92:	b480      	push	{r7}
 8005c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c96:	e7fe      	b.n	8005c96 <HardFault_Handler+0x4>

08005c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c9c:	e7fe      	b.n	8005c9c <MemManage_Handler+0x4>

08005c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ca2:	e7fe      	b.n	8005ca2 <BusFault_Handler+0x4>

08005ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ca8:	e7fe      	b.n	8005ca8 <UsageFault_Handler+0x4>

08005caa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005caa:	b480      	push	{r7}
 8005cac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005cae:	bf00      	nop
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8005cbc:	4802      	ldr	r0, [pc, #8]	; (8005cc8 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8005cbe:	f004 fcbb 	bl	800a638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8005cc2:	bf00      	nop
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	20006024 	.word	0x20006024

08005ccc <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8005cd0:	f000 feb2 	bl	8006a38 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8005cd4:	bf00      	nop
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <EXTI3_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void EXTI3_IRQHandler(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005cdc:	2008      	movs	r0, #8
 8005cde:	f000 fe93 	bl	8006a08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005ce2:	bf00      	nop
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005cea:	2010      	movs	r0, #16
 8005cec:	f000 fe8c 	bl	8006a08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005cf0:	bf00      	nop
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005cf8:	2020      	movs	r0, #32
 8005cfa:	f000 fe85 	bl	8006a08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005cfe:	bf00      	nop
 8005d00:	bd80      	pop	{r7, pc}
	...

08005d04 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005d08:	4802      	ldr	r0, [pc, #8]	; (8005d14 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8005d0a:	f004 fc95 	bl	800a638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005d0e:	bf00      	nop
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	20005e88 	.word	0x20005e88

08005d18 <RTC_WKUP_IRQHandler>:

void RTC_WKUP_IRQHandler(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8005d1c:	f7fd fb9e 	bl	800345c <HW_TS_RTC_Wakeup_Handler>
}
 8005d20:	bf00      	nop
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <IPCC_C1_TX_IRQHandler>:

void IPCC_C1_TX_IRQHandler(void)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8005d28:	f7fb ff80 	bl	8001c2c <HW_IPCC_Tx_Handler>

  return;
 8005d2c:	bf00      	nop
}
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8005d34:	f7fb ff42 	bl	8001bbc <HW_IPCC_Rx_Handler>
  return;
 8005d38:	bf00      	nop
}
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d48:	2300      	movs	r3, #0
 8005d4a:	617b      	str	r3, [r7, #20]
 8005d4c:	e00a      	b.n	8005d64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005d4e:	f3af 8000 	nop.w
 8005d52:	4601      	mov	r1, r0
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	1c5a      	adds	r2, r3, #1
 8005d58:	60ba      	str	r2, [r7, #8]
 8005d5a:	b2ca      	uxtb	r2, r1
 8005d5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	3301      	adds	r3, #1
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	dbf0      	blt.n	8005d4e <_read+0x12>
	}

return len;
 8005d6c:	687b      	ldr	r3, [r7, #4]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <_close>:
	}
	return len;
}

int _close(int file)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
	return -1;
 8005d7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005d9e:	605a      	str	r2, [r3, #4]
	return 0;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <_isatty>:

int _isatty(int file)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b083      	sub	sp, #12
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
	return 1;
 8005db6:	2301      	movs	r3, #1
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
	return 0;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
	...

08005de0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005de8:	4b11      	ldr	r3, [pc, #68]	; (8005e30 <_sbrk+0x50>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d102      	bne.n	8005df6 <_sbrk+0x16>
		heap_end = &end;
 8005df0:	4b0f      	ldr	r3, [pc, #60]	; (8005e30 <_sbrk+0x50>)
 8005df2:	4a10      	ldr	r2, [pc, #64]	; (8005e34 <_sbrk+0x54>)
 8005df4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005df6:	4b0e      	ldr	r3, [pc, #56]	; (8005e30 <_sbrk+0x50>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005dfc:	4b0c      	ldr	r3, [pc, #48]	; (8005e30 <_sbrk+0x50>)
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4413      	add	r3, r2
 8005e04:	466a      	mov	r2, sp
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d907      	bls.n	8005e1a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005e0a:	f00d f8cd 	bl	8012fa8 <__errno>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	230c      	movs	r3, #12
 8005e12:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005e14:	f04f 33ff 	mov.w	r3, #4294967295
 8005e18:	e006      	b.n	8005e28 <_sbrk+0x48>
	}

	heap_end += incr;
 8005e1a:	4b05      	ldr	r3, [pc, #20]	; (8005e30 <_sbrk+0x50>)
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4413      	add	r3, r2
 8005e22:	4a03      	ldr	r2, [pc, #12]	; (8005e30 <_sbrk+0x50>)
 8005e24:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005e26:	68fb      	ldr	r3, [r7, #12]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	200003ec 	.word	0x200003ec
 8005e34:	200060b8 	.word	0x200060b8

08005e38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8005e3c:	4b26      	ldr	r3, [pc, #152]	; (8005ed8 <SystemInit+0xa0>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8005e42:	4b25      	ldr	r3, [pc, #148]	; (8005ed8 <SystemInit+0xa0>)
 8005e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e48:	4a23      	ldr	r2, [pc, #140]	; (8005ed8 <SystemInit+0xa0>)
 8005e4a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e4e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e5c:	f043 0301 	orr.w	r3, r3, #1
 8005e60:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8005e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e66:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8005e6a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8005e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e76:	4b19      	ldr	r3, [pc, #100]	; (8005edc <SystemInit+0xa4>)
 8005e78:	4013      	ands	r3, r2
 8005e7a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8005e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e88:	f023 0305 	bic.w	r3, r3, #5
 8005e8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8005e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e9c:	f023 0301 	bic.w	r3, r3, #1
 8005ea0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8005ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ea8:	4a0d      	ldr	r2, [pc, #52]	; (8005ee0 <SystemInit+0xa8>)
 8005eaa:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8005eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eb0:	4a0b      	ldr	r2, [pc, #44]	; (8005ee0 <SystemInit+0xa8>)
 8005eb2:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ec2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ec8:	2200      	movs	r2, #0
 8005eca:	619a      	str	r2, [r3, #24]
}
 8005ecc:	bf00      	nop
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	e000ed00 	.word	0xe000ed00
 8005edc:	faf6fefb 	.word	0xfaf6fefb
 8005ee0:	22041000 	.word	0x22041000

08005ee4 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8005ee8:	4b05      	ldr	r3, [pc, #20]	; (8005f00 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	4a04      	ldr	r2, [pc, #16]	; (8005f00 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8005eee:	f043 0301 	orr.w	r3, r3, #1
 8005ef2:	6053      	str	r3, [r2, #4]
}
 8005ef4:	bf00      	nop
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	e0042000 	.word	0xe0042000

08005f04 <LL_DBGMCU_EnableDBGStopMode>:
{
 8005f04:	b480      	push	{r7}
 8005f06:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8005f08:	4b05      	ldr	r3, [pc, #20]	; (8005f20 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	4a04      	ldr	r2, [pc, #16]	; (8005f20 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8005f0e:	f043 0302 	orr.w	r3, r3, #2
 8005f12:	6053      	str	r3, [r2, #4]
}
 8005f14:	bf00      	nop
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	e0042000 	.word	0xe0042000

08005f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005f2e:	4b0c      	ldr	r3, [pc, #48]	; (8005f60 <HAL_Init+0x3c>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a0b      	ldr	r2, [pc, #44]	; (8005f60 <HAL_Init+0x3c>)
 8005f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f38:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f3a:	2003      	movs	r0, #3
 8005f3c:	f000 f961 	bl	8006202 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005f40:	2000      	movs	r0, #0
 8005f42:	f7ff fe53 	bl	8005bec <HAL_InitTick>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	71fb      	strb	r3, [r7, #7]
 8005f50:	e001      	b.n	8005f56 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005f52:	f7ff fc50 	bl	80057f6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005f56:	79fb      	ldrb	r3, [r7, #7]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	58004000 	.word	0x58004000

08005f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f64:	b480      	push	{r7}
 8005f66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005f68:	4b06      	ldr	r3, [pc, #24]	; (8005f84 <HAL_IncTick+0x20>)
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	4b06      	ldr	r3, [pc, #24]	; (8005f88 <HAL_IncTick+0x24>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4413      	add	r3, r2
 8005f74:	4a04      	ldr	r2, [pc, #16]	; (8005f88 <HAL_IncTick+0x24>)
 8005f76:	6013      	str	r3, [r2, #0]
}
 8005f78:	bf00      	nop
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	2000001c 	.word	0x2000001c
 8005f88:	20006070 	.word	0x20006070

08005f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8005f90:	4b03      	ldr	r3, [pc, #12]	; (8005fa0 <HAL_GetTick+0x14>)
 8005f92:	681b      	ldr	r3, [r3, #0]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	20006070 	.word	0x20006070

08005fa4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8005fa8:	4b03      	ldr	r3, [pc, #12]	; (8005fb8 <HAL_GetTickPrio+0x14>)
 8005faa:	681b      	ldr	r3, [r3, #0]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	20000018 	.word	0x20000018

08005fbc <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8005fc0:	4b03      	ldr	r3, [pc, #12]	; (8005fd0 <HAL_GetTickFreq+0x14>)
 8005fc2:	781b      	ldrb	r3, [r3, #0]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	2000001c 	.word	0x2000001c

08005fd4 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8005fd8:	f7ff ff84 	bl	8005ee4 <LL_DBGMCU_EnableDBGSleepMode>
}
 8005fdc:	bf00      	nop
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8005fe4:	f7ff ff8e 	bl	8005f04 <LL_DBGMCU_EnableDBGStopMode>
}
 8005fe8:	bf00      	nop
 8005fea:	bd80      	pop	{r7, pc}

08005fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f003 0307 	and.w	r3, r3, #7
 8005ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ffc:	4b0c      	ldr	r3, [pc, #48]	; (8006030 <__NVIC_SetPriorityGrouping+0x44>)
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006008:	4013      	ands	r3, r2
 800600a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006014:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800601c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800601e:	4a04      	ldr	r2, [pc, #16]	; (8006030 <__NVIC_SetPriorityGrouping+0x44>)
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	60d3      	str	r3, [r2, #12]
}
 8006024:	bf00      	nop
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	e000ed00 	.word	0xe000ed00

08006034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006034:	b480      	push	{r7}
 8006036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006038:	4b04      	ldr	r3, [pc, #16]	; (800604c <__NVIC_GetPriorityGrouping+0x18>)
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	0a1b      	lsrs	r3, r3, #8
 800603e:	f003 0307 	and.w	r3, r3, #7
}
 8006042:	4618      	mov	r0, r3
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	e000ed00 	.word	0xe000ed00

08006050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	4603      	mov	r3, r0
 8006058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800605a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800605e:	2b00      	cmp	r3, #0
 8006060:	db0b      	blt.n	800607a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006062:	79fb      	ldrb	r3, [r7, #7]
 8006064:	f003 021f 	and.w	r2, r3, #31
 8006068:	4907      	ldr	r1, [pc, #28]	; (8006088 <__NVIC_EnableIRQ+0x38>)
 800606a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800606e:	095b      	lsrs	r3, r3, #5
 8006070:	2001      	movs	r0, #1
 8006072:	fa00 f202 	lsl.w	r2, r0, r2
 8006076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800607a:	bf00      	nop
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	e000e100 	.word	0xe000e100

0800608c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	4603      	mov	r3, r0
 8006094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800609a:	2b00      	cmp	r3, #0
 800609c:	db10      	blt.n	80060c0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800609e:	79fb      	ldrb	r3, [r7, #7]
 80060a0:	f003 021f 	and.w	r2, r3, #31
 80060a4:	4909      	ldr	r1, [pc, #36]	; (80060cc <__NVIC_DisableIRQ+0x40>)
 80060a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060aa:	095b      	lsrs	r3, r3, #5
 80060ac:	2001      	movs	r0, #1
 80060ae:	fa00 f202 	lsl.w	r2, r0, r2
 80060b2:	3320      	adds	r3, #32
 80060b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80060b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80060bc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr
 80060cc:	e000e100 	.word	0xe000e100

080060d0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	4603      	mov	r3, r0
 80060d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	db0c      	blt.n	80060fc <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060e2:	79fb      	ldrb	r3, [r7, #7]
 80060e4:	f003 021f 	and.w	r2, r3, #31
 80060e8:	4907      	ldr	r1, [pc, #28]	; (8006108 <__NVIC_SetPendingIRQ+0x38>)
 80060ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ee:	095b      	lsrs	r3, r3, #5
 80060f0:	2001      	movs	r0, #1
 80060f2:	fa00 f202 	lsl.w	r2, r0, r2
 80060f6:	3340      	adds	r3, #64	; 0x40
 80060f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	e000e100 	.word	0xe000e100

0800610c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	4603      	mov	r3, r0
 8006114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800611a:	2b00      	cmp	r3, #0
 800611c:	db0c      	blt.n	8006138 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800611e:	79fb      	ldrb	r3, [r7, #7]
 8006120:	f003 021f 	and.w	r2, r3, #31
 8006124:	4907      	ldr	r1, [pc, #28]	; (8006144 <__NVIC_ClearPendingIRQ+0x38>)
 8006126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800612a:	095b      	lsrs	r3, r3, #5
 800612c:	2001      	movs	r0, #1
 800612e:	fa00 f202 	lsl.w	r2, r0, r2
 8006132:	3360      	adds	r3, #96	; 0x60
 8006134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr
 8006144:	e000e100 	.word	0xe000e100

08006148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	4603      	mov	r3, r0
 8006150:	6039      	str	r1, [r7, #0]
 8006152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006158:	2b00      	cmp	r3, #0
 800615a:	db0a      	blt.n	8006172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	b2da      	uxtb	r2, r3
 8006160:	490c      	ldr	r1, [pc, #48]	; (8006194 <__NVIC_SetPriority+0x4c>)
 8006162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006166:	0112      	lsls	r2, r2, #4
 8006168:	b2d2      	uxtb	r2, r2
 800616a:	440b      	add	r3, r1
 800616c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006170:	e00a      	b.n	8006188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	b2da      	uxtb	r2, r3
 8006176:	4908      	ldr	r1, [pc, #32]	; (8006198 <__NVIC_SetPriority+0x50>)
 8006178:	79fb      	ldrb	r3, [r7, #7]
 800617a:	f003 030f 	and.w	r3, r3, #15
 800617e:	3b04      	subs	r3, #4
 8006180:	0112      	lsls	r2, r2, #4
 8006182:	b2d2      	uxtb	r2, r2
 8006184:	440b      	add	r3, r1
 8006186:	761a      	strb	r2, [r3, #24]
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	e000e100 	.word	0xe000e100
 8006198:	e000ed00 	.word	0xe000ed00

0800619c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800619c:	b480      	push	{r7}
 800619e:	b089      	sub	sp, #36	; 0x24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f003 0307 	and.w	r3, r3, #7
 80061ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	f1c3 0307 	rsb	r3, r3, #7
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	bf28      	it	cs
 80061ba:	2304      	movcs	r3, #4
 80061bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	3304      	adds	r3, #4
 80061c2:	2b06      	cmp	r3, #6
 80061c4:	d902      	bls.n	80061cc <NVIC_EncodePriority+0x30>
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	3b03      	subs	r3, #3
 80061ca:	e000      	b.n	80061ce <NVIC_EncodePriority+0x32>
 80061cc:	2300      	movs	r3, #0
 80061ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061d0:	f04f 32ff 	mov.w	r2, #4294967295
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	fa02 f303 	lsl.w	r3, r2, r3
 80061da:	43da      	mvns	r2, r3
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	401a      	ands	r2, r3
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80061e4:	f04f 31ff 	mov.w	r1, #4294967295
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	fa01 f303 	lsl.w	r3, r1, r3
 80061ee:	43d9      	mvns	r1, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061f4:	4313      	orrs	r3, r2
         );
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3724      	adds	r7, #36	; 0x24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b082      	sub	sp, #8
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7ff feee 	bl	8005fec <__NVIC_SetPriorityGrouping>
}
 8006210:	bf00      	nop
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	4603      	mov	r3, r0
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006226:	f7ff ff05 	bl	8006034 <__NVIC_GetPriorityGrouping>
 800622a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	68b9      	ldr	r1, [r7, #8]
 8006230:	6978      	ldr	r0, [r7, #20]
 8006232:	f7ff ffb3 	bl	800619c <NVIC_EncodePriority>
 8006236:	4602      	mov	r2, r0
 8006238:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800623c:	4611      	mov	r1, r2
 800623e:	4618      	mov	r0, r3
 8006240:	f7ff ff82 	bl	8006148 <__NVIC_SetPriority>
}
 8006244:	bf00      	nop
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	4603      	mov	r3, r0
 8006254:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800625a:	4618      	mov	r0, r3
 800625c:	f7ff fef8 	bl	8006050 <__NVIC_EnableIRQ>
}
 8006260:	bf00      	nop
 8006262:	3708      	adds	r7, #8
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	4603      	mov	r3, r0
 8006270:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006276:	4618      	mov	r0, r3
 8006278:	f7ff ff08 	bl	800608c <__NVIC_DisableIRQ>
}
 800627c:	bf00      	nop
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	4603      	mov	r3, r0
 800628c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800628e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006292:	4618      	mov	r0, r3
 8006294:	f7ff ff1c 	bl	80060d0 <__NVIC_SetPendingIRQ>
}
 8006298:	bf00      	nop
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	4603      	mov	r3, r0
 80062a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80062aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7ff ff2c 	bl	800610c <__NVIC_ClearPendingIRQ>
}
 80062b4:	bf00      	nop
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e08e      	b.n	80063ec <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	4b47      	ldr	r3, [pc, #284]	; (80063f4 <HAL_DMA_Init+0x138>)
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d80f      	bhi.n	80062fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	461a      	mov	r2, r3
 80062e0:	4b45      	ldr	r3, [pc, #276]	; (80063f8 <HAL_DMA_Init+0x13c>)
 80062e2:	4413      	add	r3, r2
 80062e4:	4a45      	ldr	r2, [pc, #276]	; (80063fc <HAL_DMA_Init+0x140>)
 80062e6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ea:	091b      	lsrs	r3, r3, #4
 80062ec:	009a      	lsls	r2, r3, #2
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a42      	ldr	r2, [pc, #264]	; (8006400 <HAL_DMA_Init+0x144>)
 80062f6:	641a      	str	r2, [r3, #64]	; 0x40
 80062f8:	e00e      	b.n	8006318 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	4b40      	ldr	r3, [pc, #256]	; (8006404 <HAL_DMA_Init+0x148>)
 8006302:	4413      	add	r3, r2
 8006304:	4a3d      	ldr	r2, [pc, #244]	; (80063fc <HAL_DMA_Init+0x140>)
 8006306:	fba2 2303 	umull	r2, r3, r2, r3
 800630a:	091b      	lsrs	r3, r3, #4
 800630c:	009a      	lsls	r2, r3, #2
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a3c      	ldr	r2, [pc, #240]	; (8006408 <HAL_DMA_Init+0x14c>)
 8006316:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2202      	movs	r2, #2
 800631c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800632e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006332:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800633c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006348:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006354:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4313      	orrs	r3, r2
 8006360:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f908 	bl	8006580 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006378:	d102      	bne.n	8006380 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006388:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800638c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006396:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d010      	beq.n	80063c2 <HAL_DMA_Init+0x106>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	d80c      	bhi.n	80063c2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f927 	bl	80065fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b2:	2200      	movs	r2, #0
 80063b4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80063be:	605a      	str	r2, [r3, #4]
 80063c0:	e008      	b.n	80063d4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	40020407 	.word	0x40020407
 80063f8:	bffdfff8 	.word	0xbffdfff8
 80063fc:	cccccccd 	.word	0xcccccccd
 8006400:	40020000 	.word	0x40020000
 8006404:	bffdfbf8 	.word	0xbffdfbf8
 8006408:	40020400 	.word	0x40020400

0800640c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006424:	2b01      	cmp	r3, #1
 8006426:	d101      	bne.n	800642c <HAL_DMA_Start_IT+0x20>
 8006428:	2302      	movs	r3, #2
 800642a:	e066      	b.n	80064fa <HAL_DMA_Start_IT+0xee>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b01      	cmp	r3, #1
 800643e:	d155      	bne.n	80064ec <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2202      	movs	r2, #2
 8006444:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 0201 	bic.w	r2, r2, #1
 800645c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	68b9      	ldr	r1, [r7, #8]
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 f84c 	bl	8006502 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646e:	2b00      	cmp	r3, #0
 8006470:	d008      	beq.n	8006484 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f042 020e 	orr.w	r2, r2, #14
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	e00f      	b.n	80064a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 0204 	bic.w	r2, r2, #4
 8006492:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f042 020a 	orr.w	r2, r2, #10
 80064a2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d007      	beq.n	80064c2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064c0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d007      	beq.n	80064da <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064d8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f042 0201 	orr.w	r2, r2, #1
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	e005      	b.n	80064f8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80064f4:	2302      	movs	r3, #2
 80064f6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80064f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3718      	adds	r7, #24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006502:	b480      	push	{r7}
 8006504:	b085      	sub	sp, #20
 8006506:	af00      	add	r7, sp, #0
 8006508:	60f8      	str	r0, [r7, #12]
 800650a:	60b9      	str	r1, [r7, #8]
 800650c:	607a      	str	r2, [r7, #4]
 800650e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006518:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800651e:	2b00      	cmp	r3, #0
 8006520:	d004      	beq.n	800652c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800652a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006530:	f003 021c 	and.w	r2, r3, #28
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006538:	2101      	movs	r1, #1
 800653a:	fa01 f202 	lsl.w	r2, r1, r2
 800653e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	683a      	ldr	r2, [r7, #0]
 8006546:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	2b10      	cmp	r3, #16
 800654e:	d108      	bne.n	8006562 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006560:	e007      	b.n	8006572 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	60da      	str	r2, [r3, #12]
}
 8006572:	bf00      	nop
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
	...

08006580 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	461a      	mov	r2, r3
 800658e:	4b17      	ldr	r3, [pc, #92]	; (80065ec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006590:	429a      	cmp	r2, r3
 8006592:	d80a      	bhi.n	80065aa <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006598:	089b      	lsrs	r3, r3, #2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80065a0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	6493      	str	r3, [r2, #72]	; 0x48
 80065a8:	e007      	b.n	80065ba <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ae:	089b      	lsrs	r3, r3, #2
 80065b0:	009a      	lsls	r2, r3, #2
 80065b2:	4b0f      	ldr	r3, [pc, #60]	; (80065f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80065b4:	4413      	add	r3, r2
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	3b08      	subs	r3, #8
 80065c2:	4a0c      	ldr	r2, [pc, #48]	; (80065f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80065c4:	fba2 2303 	umull	r2, r3, r2, r3
 80065c8:	091b      	lsrs	r3, r3, #4
 80065ca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a0a      	ldr	r2, [pc, #40]	; (80065f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80065d0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f003 031f 	and.w	r3, r3, #31
 80065d8:	2201      	movs	r2, #1
 80065da:	409a      	lsls	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	651a      	str	r2, [r3, #80]	; 0x50
}
 80065e0:	bf00      	nop
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr
 80065ec:	40020407 	.word	0x40020407
 80065f0:	4002081c 	.word	0x4002081c
 80065f4:	cccccccd 	.word	0xcccccccd
 80065f8:	40020880 	.word	0x40020880

080065fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800660c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	4b0b      	ldr	r3, [pc, #44]	; (8006640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006612:	4413      	add	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	461a      	mov	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a09      	ldr	r2, [pc, #36]	; (8006644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8006620:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	3b01      	subs	r3, #1
 8006626:	f003 0303 	and.w	r3, r3, #3
 800662a:	2201      	movs	r2, #1
 800662c:	409a      	lsls	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006632:	bf00      	nop
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	1000823f 	.word	0x1000823f
 8006644:	40020940 	.word	0x40020940

08006648 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b01      	cmp	r3, #1
 800665c:	d12b      	bne.n	80066b6 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006664:	2b01      	cmp	r3, #1
 8006666:	d101      	bne.n	800666c <HAL_DMAEx_ConfigMuxSync+0x24>
 8006668:	2302      	movs	r3, #2
 800666a:	e025      	b.n	80066b8 <HAL_DMAEx_ConfigMuxSync+0x70>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	4b12      	ldr	r3, [pc, #72]	; (80066c4 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 800667c:	4013      	ands	r3, r2
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	6811      	ldr	r1, [r2, #0]
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	68d2      	ldr	r2, [r2, #12]
 8006686:	3a01      	subs	r2, #1
 8006688:	04d2      	lsls	r2, r2, #19
 800668a:	4311      	orrs	r1, r2
 800668c:	683a      	ldr	r2, [r7, #0]
 800668e:	6852      	ldr	r2, [r2, #4]
 8006690:	4311      	orrs	r1, r2
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	7a12      	ldrb	r2, [r2, #8]
 8006696:	0412      	lsls	r2, r2, #16
 8006698:	4311      	orrs	r1, r2
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	7a52      	ldrb	r2, [r2, #9]
 800669e:	0252      	lsls	r2, r2, #9
 80066a0:	4311      	orrs	r1, r2
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80066a6:	430b      	orrs	r3, r1
 80066a8:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	e000      	b.n	80066b8 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
  }
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	e000fdff 	.word	0xe000fdff

080066c8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b087      	sub	sp, #28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80066d2:	2300      	movs	r3, #0
 80066d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80066d6:	e14c      	b.n	8006972 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	2101      	movs	r1, #1
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	fa01 f303 	lsl.w	r3, r1, r3
 80066e4:	4013      	ands	r3, r2
 80066e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 813e 	beq.w	800696c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d00b      	beq.n	8006710 <HAL_GPIO_Init+0x48>
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d007      	beq.n	8006710 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006704:	2b11      	cmp	r3, #17
 8006706:	d003      	beq.n	8006710 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	2b12      	cmp	r3, #18
 800670e:	d130      	bne.n	8006772 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	005b      	lsls	r3, r3, #1
 800671a:	2203      	movs	r2, #3
 800671c:	fa02 f303 	lsl.w	r3, r2, r3
 8006720:	43db      	mvns	r3, r3
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	4013      	ands	r3, r2
 8006726:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	68da      	ldr	r2, [r3, #12]
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	005b      	lsls	r3, r3, #1
 8006730:	fa02 f303 	lsl.w	r3, r2, r3
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	4313      	orrs	r3, r2
 8006738:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006746:	2201      	movs	r2, #1
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	fa02 f303 	lsl.w	r3, r2, r3
 800674e:	43db      	mvns	r3, r3
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	4013      	ands	r3, r2
 8006754:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	091b      	lsrs	r3, r3, #4
 800675c:	f003 0201 	and.w	r2, r3, #1
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	fa02 f303 	lsl.w	r3, r2, r3
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	4313      	orrs	r3, r2
 800676a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	005b      	lsls	r3, r3, #1
 800677c:	2203      	movs	r2, #3
 800677e:	fa02 f303 	lsl.w	r3, r2, r3
 8006782:	43db      	mvns	r3, r3
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	4013      	ands	r3, r2
 8006788:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	689a      	ldr	r2, [r3, #8]
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	fa02 f303 	lsl.w	r3, r2, r3
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	4313      	orrs	r3, r2
 800679a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d003      	beq.n	80067b2 <HAL_GPIO_Init+0xea>
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	2b12      	cmp	r3, #18
 80067b0:	d123      	bne.n	80067fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	08da      	lsrs	r2, r3, #3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3208      	adds	r2, #8
 80067ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f003 0307 	and.w	r3, r3, #7
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	220f      	movs	r2, #15
 80067ca:	fa02 f303 	lsl.w	r3, r2, r3
 80067ce:	43db      	mvns	r3, r3
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	4013      	ands	r3, r2
 80067d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	691a      	ldr	r2, [r3, #16]
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f003 0307 	and.w	r3, r3, #7
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	fa02 f303 	lsl.w	r3, r2, r3
 80067e6:	693a      	ldr	r2, [r7, #16]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	08da      	lsrs	r2, r3, #3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	3208      	adds	r2, #8
 80067f4:	6939      	ldr	r1, [r7, #16]
 80067f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	005b      	lsls	r3, r3, #1
 8006804:	2203      	movs	r2, #3
 8006806:	fa02 f303 	lsl.w	r3, r2, r3
 800680a:	43db      	mvns	r3, r3
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	4013      	ands	r3, r2
 8006810:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f003 0203 	and.w	r2, r3, #3
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	fa02 f303 	lsl.w	r3, r2, r3
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	4313      	orrs	r3, r2
 8006826:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 8098 	beq.w	800696c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800683c:	4a54      	ldr	r2, [pc, #336]	; (8006990 <HAL_GPIO_Init+0x2c8>)
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	089b      	lsrs	r3, r3, #2
 8006842:	3302      	adds	r3, #2
 8006844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006848:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f003 0303 	and.w	r3, r3, #3
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	220f      	movs	r2, #15
 8006854:	fa02 f303 	lsl.w	r3, r2, r3
 8006858:	43db      	mvns	r3, r3
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	4013      	ands	r3, r2
 800685e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006866:	d019      	beq.n	800689c <HAL_GPIO_Init+0x1d4>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a4a      	ldr	r2, [pc, #296]	; (8006994 <HAL_GPIO_Init+0x2cc>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d013      	beq.n	8006898 <HAL_GPIO_Init+0x1d0>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a49      	ldr	r2, [pc, #292]	; (8006998 <HAL_GPIO_Init+0x2d0>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d00d      	beq.n	8006894 <HAL_GPIO_Init+0x1cc>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a48      	ldr	r2, [pc, #288]	; (800699c <HAL_GPIO_Init+0x2d4>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d007      	beq.n	8006890 <HAL_GPIO_Init+0x1c8>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a47      	ldr	r2, [pc, #284]	; (80069a0 <HAL_GPIO_Init+0x2d8>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d101      	bne.n	800688c <HAL_GPIO_Init+0x1c4>
 8006888:	2304      	movs	r3, #4
 800688a:	e008      	b.n	800689e <HAL_GPIO_Init+0x1d6>
 800688c:	2307      	movs	r3, #7
 800688e:	e006      	b.n	800689e <HAL_GPIO_Init+0x1d6>
 8006890:	2303      	movs	r3, #3
 8006892:	e004      	b.n	800689e <HAL_GPIO_Init+0x1d6>
 8006894:	2302      	movs	r3, #2
 8006896:	e002      	b.n	800689e <HAL_GPIO_Init+0x1d6>
 8006898:	2301      	movs	r3, #1
 800689a:	e000      	b.n	800689e <HAL_GPIO_Init+0x1d6>
 800689c:	2300      	movs	r3, #0
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	f002 0203 	and.w	r2, r2, #3
 80068a4:	0092      	lsls	r2, r2, #2
 80068a6:	4093      	lsls	r3, r2
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80068ae:	4938      	ldr	r1, [pc, #224]	; (8006990 <HAL_GPIO_Init+0x2c8>)
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	089b      	lsrs	r3, r3, #2
 80068b4:	3302      	adds	r3, #2
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80068bc:	4b39      	ldr	r3, [pc, #228]	; (80069a4 <HAL_GPIO_Init+0x2dc>)
 80068be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	43db      	mvns	r3, r3
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	4013      	ands	r3, r2
 80068cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4313      	orrs	r3, r2
 80068e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80068e2:	4a30      	ldr	r2, [pc, #192]	; (80069a4 <HAL_GPIO_Init+0x2dc>)
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80068ea:	4b2e      	ldr	r3, [pc, #184]	; (80069a4 <HAL_GPIO_Init+0x2dc>)
 80068ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	43db      	mvns	r3, r3
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	4013      	ands	r3, r2
 80068fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	4313      	orrs	r3, r2
 800690e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006910:	4a24      	ldr	r2, [pc, #144]	; (80069a4 <HAL_GPIO_Init+0x2dc>)
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006918:	4b22      	ldr	r3, [pc, #136]	; (80069a4 <HAL_GPIO_Init+0x2dc>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	43db      	mvns	r3, r3
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	4013      	ands	r3, r2
 8006926:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4313      	orrs	r3, r2
 800693a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800693c:	4a19      	ldr	r2, [pc, #100]	; (80069a4 <HAL_GPIO_Init+0x2dc>)
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006942:	4b18      	ldr	r3, [pc, #96]	; (80069a4 <HAL_GPIO_Init+0x2dc>)
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	43db      	mvns	r3, r3
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	4013      	ands	r3, r2
 8006950:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4313      	orrs	r3, r2
 8006964:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006966:	4a0f      	ldr	r2, [pc, #60]	; (80069a4 <HAL_GPIO_Init+0x2dc>)
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	3301      	adds	r3, #1
 8006970:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	fa22 f303 	lsr.w	r3, r2, r3
 800697c:	2b00      	cmp	r3, #0
 800697e:	f47f aeab 	bne.w	80066d8 <HAL_GPIO_Init+0x10>
  }
}
 8006982:	bf00      	nop
 8006984:	371c      	adds	r7, #28
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	40010000 	.word	0x40010000
 8006994:	48000400 	.word	0x48000400
 8006998:	48000800 	.word	0x48000800
 800699c:	48000c00 	.word	0x48000c00
 80069a0:	48001000 	.word	0x48001000
 80069a4:	58000800 	.word	0x58000800

080069a8 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	460b      	mov	r3, r1
 80069b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	691a      	ldr	r2, [r3, #16]
 80069b8:	887b      	ldrh	r3, [r7, #2]
 80069ba:	4013      	ands	r3, r2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d002      	beq.n	80069c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80069c0:	2301      	movs	r3, #1
 80069c2:	73fb      	strb	r3, [r7, #15]
 80069c4:	e001      	b.n	80069ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80069c6:	2300      	movs	r3, #0
 80069c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80069ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3714      	adds	r7, #20
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	460b      	mov	r3, r1
 80069e2:	807b      	strh	r3, [r7, #2]
 80069e4:	4613      	mov	r3, r2
 80069e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80069e8:	787b      	ldrb	r3, [r7, #1]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80069ee:	887a      	ldrh	r2, [r7, #2]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80069f4:	e002      	b.n	80069fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80069f6:	887a      	ldrh	r2, [r7, #2]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	4603      	mov	r3, r0
 8006a10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006a12:	4b08      	ldr	r3, [pc, #32]	; (8006a34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a14:	68da      	ldr	r2, [r3, #12]
 8006a16:	88fb      	ldrh	r3, [r7, #6]
 8006a18:	4013      	ands	r3, r2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d006      	beq.n	8006a2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006a1e:	4a05      	ldr	r2, [pc, #20]	; (8006a34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a20:	88fb      	ldrh	r3, [r7, #6]
 8006a22:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006a24:	88fb      	ldrh	r3, [r7, #6]
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fd ffce 	bl	80049c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006a2c:	bf00      	nop
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	58000800 	.word	0x58000800

08006a38 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8006a3e:	4b0a      	ldr	r3, [pc, #40]	; (8006a68 <HAL_HSEM_IRQHandler+0x30>)
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8006a44:	4b08      	ldr	r3, [pc, #32]	; (8006a68 <HAL_HSEM_IRQHandler+0x30>)
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	43db      	mvns	r3, r3
 8006a4c:	4906      	ldr	r1, [pc, #24]	; (8006a68 <HAL_HSEM_IRQHandler+0x30>)
 8006a4e:	4013      	ands	r3, r2
 8006a50:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8006a52:	4a05      	ldr	r2, [pc, #20]	; (8006a68 <HAL_HSEM_IRQHandler+0x30>)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f807 	bl	8006a6c <HAL_HSEM_FreeCallback>
}
 8006a5e:	bf00      	nop
 8006a60:	3708      	adds	r7, #8
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	58001500 	.word	0x58001500

08006a6c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d101      	bne.n	8006a92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e081      	b.n	8006b96 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d106      	bne.n	8006aac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f7fe ffdc 	bl	8005a64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2224      	movs	r2, #36	; 0x24
 8006ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f022 0201 	bic.w	r2, r2, #1
 8006ac2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685a      	ldr	r2, [r3, #4]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006ad0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689a      	ldr	r2, [r3, #8]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ae0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d107      	bne.n	8006afa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	689a      	ldr	r2, [r3, #8]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006af6:	609a      	str	r2, [r3, #8]
 8006af8:	e006      	b.n	8006b08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	689a      	ldr	r2, [r3, #8]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006b06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d104      	bne.n	8006b1a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	6812      	ldr	r2, [r2, #0]
 8006b24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68da      	ldr	r2, [r3, #12]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	691a      	ldr	r2, [r3, #16]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	ea42 0103 	orr.w	r1, r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	021a      	lsls	r2, r3, #8
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	430a      	orrs	r2, r1
 8006b56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	69d9      	ldr	r1, [r3, #28]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a1a      	ldr	r2, [r3, #32]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	430a      	orrs	r2, r1
 8006b66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f042 0201 	orr.w	r2, r2, #1
 8006b76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2220      	movs	r2, #32
 8006b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
	...

08006ba0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b088      	sub	sp, #32
 8006ba4:	af02      	add	r7, sp, #8
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	607a      	str	r2, [r7, #4]
 8006baa:	461a      	mov	r2, r3
 8006bac:	460b      	mov	r3, r1
 8006bae:	817b      	strh	r3, [r7, #10]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	2b20      	cmp	r3, #32
 8006bbe:	f040 80da 	bne.w	8006d76 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d101      	bne.n	8006bd0 <HAL_I2C_Master_Transmit+0x30>
 8006bcc:	2302      	movs	r3, #2
 8006bce:	e0d3      	b.n	8006d78 <HAL_I2C_Master_Transmit+0x1d8>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006bd8:	f7ff f9d8 	bl	8005f8c <HAL_GetTick>
 8006bdc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	9300      	str	r3, [sp, #0]
 8006be2:	2319      	movs	r3, #25
 8006be4:	2201      	movs	r2, #1
 8006be6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f000 fbc6 	bl	800737c <I2C_WaitOnFlagUntilTimeout>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e0be      	b.n	8006d78 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2221      	movs	r2, #33	; 0x21
 8006bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2210      	movs	r2, #16
 8006c06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	893a      	ldrh	r2, [r7, #8]
 8006c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	2bff      	cmp	r3, #255	; 0xff
 8006c2a:	d90e      	bls.n	8006c4a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	22ff      	movs	r2, #255	; 0xff
 8006c30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	8979      	ldrh	r1, [r7, #10]
 8006c3a:	4b51      	ldr	r3, [pc, #324]	; (8006d80 <HAL_I2C_Master_Transmit+0x1e0>)
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 fcbc 	bl	80075c0 <I2C_TransferConfig>
 8006c48:	e06c      	b.n	8006d24 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	8979      	ldrh	r1, [r7, #10]
 8006c5c:	4b48      	ldr	r3, [pc, #288]	; (8006d80 <HAL_I2C_Master_Transmit+0x1e0>)
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f000 fcab 	bl	80075c0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8006c6a:	e05b      	b.n	8006d24 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	6a39      	ldr	r1, [r7, #32]
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f000 fbc3 	bl	80073fc <I2C_WaitOnTXISFlagUntilTimeout>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d001      	beq.n	8006c80 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e07b      	b.n	8006d78 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c84:	781a      	ldrb	r2, [r3, #0]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c90:	1c5a      	adds	r2, r3, #1
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d034      	beq.n	8006d24 <HAL_I2C_Master_Transmit+0x184>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d130      	bne.n	8006d24 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	9300      	str	r3, [sp, #0]
 8006cc6:	6a3b      	ldr	r3, [r7, #32]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	2180      	movs	r1, #128	; 0x80
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 fb55 	bl	800737c <I2C_WaitOnFlagUntilTimeout>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d001      	beq.n	8006cdc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e04d      	b.n	8006d78 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	2bff      	cmp	r3, #255	; 0xff
 8006ce4:	d90e      	bls.n	8006d04 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	22ff      	movs	r2, #255	; 0xff
 8006cea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	8979      	ldrh	r1, [r7, #10]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f000 fc5f 	bl	80075c0 <I2C_TransferConfig>
 8006d02:	e00f      	b.n	8006d24 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d12:	b2da      	uxtb	r2, r3
 8006d14:	8979      	ldrh	r1, [r7, #10]
 8006d16:	2300      	movs	r3, #0
 8006d18:	9300      	str	r3, [sp, #0]
 8006d1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	f000 fc4e 	bl	80075c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d19e      	bne.n	8006c6c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	6a39      	ldr	r1, [r7, #32]
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f000 fba2 	bl	800747c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e01a      	b.n	8006d78 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2220      	movs	r2, #32
 8006d48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	6859      	ldr	r1, [r3, #4]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	4b0b      	ldr	r3, [pc, #44]	; (8006d84 <HAL_I2C_Master_Transmit+0x1e4>)
 8006d56:	400b      	ands	r3, r1
 8006d58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d72:	2300      	movs	r3, #0
 8006d74:	e000      	b.n	8006d78 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006d76:	2302      	movs	r3, #2
  }
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3718      	adds	r7, #24
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	80002000 	.word	0x80002000
 8006d84:	fe00e800 	.word	0xfe00e800

08006d88 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b088      	sub	sp, #32
 8006d8c:	af02      	add	r7, sp, #8
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	4608      	mov	r0, r1
 8006d92:	4611      	mov	r1, r2
 8006d94:	461a      	mov	r2, r3
 8006d96:	4603      	mov	r3, r0
 8006d98:	817b      	strh	r3, [r7, #10]
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	813b      	strh	r3, [r7, #8]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b20      	cmp	r3, #32
 8006dac:	f040 80f9 	bne.w	8006fa2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006db0:	6a3b      	ldr	r3, [r7, #32]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d002      	beq.n	8006dbc <HAL_I2C_Mem_Write+0x34>
 8006db6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d105      	bne.n	8006dc8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dc2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e0ed      	b.n	8006fa4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d101      	bne.n	8006dd6 <HAL_I2C_Mem_Write+0x4e>
 8006dd2:	2302      	movs	r3, #2
 8006dd4:	e0e6      	b.n	8006fa4 <HAL_I2C_Mem_Write+0x21c>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006dde:	f7ff f8d5 	bl	8005f8c <HAL_GetTick>
 8006de2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	2319      	movs	r3, #25
 8006dea:	2201      	movs	r2, #1
 8006dec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f000 fac3 	bl	800737c <I2C_WaitOnFlagUntilTimeout>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e0d1      	b.n	8006fa4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2221      	movs	r2, #33	; 0x21
 8006e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2240      	movs	r2, #64	; 0x40
 8006e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6a3a      	ldr	r2, [r7, #32]
 8006e1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e28:	88f8      	ldrh	r0, [r7, #6]
 8006e2a:	893a      	ldrh	r2, [r7, #8]
 8006e2c:	8979      	ldrh	r1, [r7, #10]
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	9301      	str	r3, [sp, #4]
 8006e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	4603      	mov	r3, r0
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f000 f9d3 	bl	80071e4 <I2C_RequestMemoryWrite>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d005      	beq.n	8006e50 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e0a9      	b.n	8006fa4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	2bff      	cmp	r3, #255	; 0xff
 8006e58:	d90e      	bls.n	8006e78 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	22ff      	movs	r2, #255	; 0xff
 8006e5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e64:	b2da      	uxtb	r2, r3
 8006e66:	8979      	ldrh	r1, [r7, #10]
 8006e68:	2300      	movs	r3, #0
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f000 fba5 	bl	80075c0 <I2C_TransferConfig>
 8006e76:	e00f      	b.n	8006e98 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	8979      	ldrh	r1, [r7, #10]
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f000 fb94 	bl	80075c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 faad 	bl	80073fc <I2C_WaitOnTXISFlagUntilTimeout>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d001      	beq.n	8006eac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e07b      	b.n	8006fa4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb0:	781a      	ldrb	r2, [r3, #0]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebc:	1c5a      	adds	r2, r3, #1
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d034      	beq.n	8006f50 <HAL_I2C_Mem_Write+0x1c8>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d130      	bne.n	8006f50 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	2180      	movs	r1, #128	; 0x80
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 fa3f 	bl	800737c <I2C_WaitOnFlagUntilTimeout>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e04d      	b.n	8006fa4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	2bff      	cmp	r3, #255	; 0xff
 8006f10:	d90e      	bls.n	8006f30 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	22ff      	movs	r2, #255	; 0xff
 8006f16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f1c:	b2da      	uxtb	r2, r3
 8006f1e:	8979      	ldrh	r1, [r7, #10]
 8006f20:	2300      	movs	r3, #0
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f000 fb49 	bl	80075c0 <I2C_TransferConfig>
 8006f2e:	e00f      	b.n	8006f50 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	8979      	ldrh	r1, [r7, #10]
 8006f42:	2300      	movs	r3, #0
 8006f44:	9300      	str	r3, [sp, #0]
 8006f46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f000 fb38 	bl	80075c0 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d19e      	bne.n	8006e98 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f000 fa8c 	bl	800747c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d001      	beq.n	8006f6e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e01a      	b.n	8006fa4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2220      	movs	r2, #32
 8006f74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6859      	ldr	r1, [r3, #4]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	4b0a      	ldr	r3, [pc, #40]	; (8006fac <HAL_I2C_Mem_Write+0x224>)
 8006f82:	400b      	ands	r3, r1
 8006f84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2220      	movs	r2, #32
 8006f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	e000      	b.n	8006fa4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006fa2:	2302      	movs	r3, #2
  }
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3718      	adds	r7, #24
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	fe00e800 	.word	0xfe00e800

08006fb0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b088      	sub	sp, #32
 8006fb4:	af02      	add	r7, sp, #8
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	4608      	mov	r0, r1
 8006fba:	4611      	mov	r1, r2
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	817b      	strh	r3, [r7, #10]
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	813b      	strh	r3, [r7, #8]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	2b20      	cmp	r3, #32
 8006fd4:	f040 80fd 	bne.w	80071d2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fd8:	6a3b      	ldr	r3, [r7, #32]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d002      	beq.n	8006fe4 <HAL_I2C_Mem_Read+0x34>
 8006fde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d105      	bne.n	8006ff0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e0f1      	b.n	80071d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d101      	bne.n	8006ffe <HAL_I2C_Mem_Read+0x4e>
 8006ffa:	2302      	movs	r3, #2
 8006ffc:	e0ea      	b.n	80071d4 <HAL_I2C_Mem_Read+0x224>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007006:	f7fe ffc1 	bl	8005f8c <HAL_GetTick>
 800700a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	9300      	str	r3, [sp, #0]
 8007010:	2319      	movs	r3, #25
 8007012:	2201      	movs	r2, #1
 8007014:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 f9af 	bl	800737c <I2C_WaitOnFlagUntilTimeout>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d001      	beq.n	8007028 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e0d5      	b.n	80071d4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2222      	movs	r2, #34	; 0x22
 800702c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2240      	movs	r2, #64	; 0x40
 8007034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6a3a      	ldr	r2, [r7, #32]
 8007042:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007048:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007050:	88f8      	ldrh	r0, [r7, #6]
 8007052:	893a      	ldrh	r2, [r7, #8]
 8007054:	8979      	ldrh	r1, [r7, #10]
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	9301      	str	r3, [sp, #4]
 800705a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	4603      	mov	r3, r0
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f000 f913 	bl	800728c <I2C_RequestMemoryRead>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d005      	beq.n	8007078 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e0ad      	b.n	80071d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800707c:	b29b      	uxth	r3, r3
 800707e:	2bff      	cmp	r3, #255	; 0xff
 8007080:	d90e      	bls.n	80070a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	22ff      	movs	r2, #255	; 0xff
 8007086:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800708c:	b2da      	uxtb	r2, r3
 800708e:	8979      	ldrh	r1, [r7, #10]
 8007090:	4b52      	ldr	r3, [pc, #328]	; (80071dc <HAL_I2C_Mem_Read+0x22c>)
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f000 fa91 	bl	80075c0 <I2C_TransferConfig>
 800709e:	e00f      	b.n	80070c0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070a4:	b29a      	uxth	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	8979      	ldrh	r1, [r7, #10]
 80070b2:	4b4a      	ldr	r3, [pc, #296]	; (80071dc <HAL_I2C_Mem_Read+0x22c>)
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f000 fa80 	bl	80075c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c6:	2200      	movs	r2, #0
 80070c8:	2104      	movs	r1, #4
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f000 f956 	bl	800737c <I2C_WaitOnFlagUntilTimeout>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e07c      	b.n	80071d4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	b2d2      	uxtb	r2, r2
 80070e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ec:	1c5a      	adds	r2, r3, #1
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070f6:	3b01      	subs	r3, #1
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007102:	b29b      	uxth	r3, r3
 8007104:	3b01      	subs	r3, #1
 8007106:	b29a      	uxth	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007110:	b29b      	uxth	r3, r3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d034      	beq.n	8007180 <HAL_I2C_Mem_Read+0x1d0>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800711a:	2b00      	cmp	r3, #0
 800711c:	d130      	bne.n	8007180 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007124:	2200      	movs	r2, #0
 8007126:	2180      	movs	r1, #128	; 0x80
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 f927 	bl	800737c <I2C_WaitOnFlagUntilTimeout>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d001      	beq.n	8007138 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e04d      	b.n	80071d4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800713c:	b29b      	uxth	r3, r3
 800713e:	2bff      	cmp	r3, #255	; 0xff
 8007140:	d90e      	bls.n	8007160 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	22ff      	movs	r2, #255	; 0xff
 8007146:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800714c:	b2da      	uxtb	r2, r3
 800714e:	8979      	ldrh	r1, [r7, #10]
 8007150:	2300      	movs	r3, #0
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 fa31 	bl	80075c0 <I2C_TransferConfig>
 800715e:	e00f      	b.n	8007180 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007164:	b29a      	uxth	r2, r3
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800716e:	b2da      	uxtb	r2, r3
 8007170:	8979      	ldrh	r1, [r7, #10]
 8007172:	2300      	movs	r3, #0
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f000 fa20 	bl	80075c0 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007184:	b29b      	uxth	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d19a      	bne.n	80070c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f000 f974 	bl	800747c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d001      	beq.n	800719e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e01a      	b.n	80071d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2220      	movs	r2, #32
 80071a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6859      	ldr	r1, [r3, #4]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	4b0b      	ldr	r3, [pc, #44]	; (80071e0 <HAL_I2C_Mem_Read+0x230>)
 80071b2:	400b      	ands	r3, r1
 80071b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2220      	movs	r2, #32
 80071ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	e000      	b.n	80071d4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80071d2:	2302      	movs	r3, #2
  }
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3718      	adds	r7, #24
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	80002400 	.word	0x80002400
 80071e0:	fe00e800 	.word	0xfe00e800

080071e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af02      	add	r7, sp, #8
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	4608      	mov	r0, r1
 80071ee:	4611      	mov	r1, r2
 80071f0:	461a      	mov	r2, r3
 80071f2:	4603      	mov	r3, r0
 80071f4:	817b      	strh	r3, [r7, #10]
 80071f6:	460b      	mov	r3, r1
 80071f8:	813b      	strh	r3, [r7, #8]
 80071fa:	4613      	mov	r3, r2
 80071fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80071fe:	88fb      	ldrh	r3, [r7, #6]
 8007200:	b2da      	uxtb	r2, r3
 8007202:	8979      	ldrh	r1, [r7, #10]
 8007204:	4b20      	ldr	r3, [pc, #128]	; (8007288 <I2C_RequestMemoryWrite+0xa4>)
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f000 f9d7 	bl	80075c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007212:	69fa      	ldr	r2, [r7, #28]
 8007214:	69b9      	ldr	r1, [r7, #24]
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f000 f8f0 	bl	80073fc <I2C_WaitOnTXISFlagUntilTimeout>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d001      	beq.n	8007226 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e02c      	b.n	8007280 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007226:	88fb      	ldrh	r3, [r7, #6]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d105      	bne.n	8007238 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800722c:	893b      	ldrh	r3, [r7, #8]
 800722e:	b2da      	uxtb	r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	629a      	str	r2, [r3, #40]	; 0x28
 8007236:	e015      	b.n	8007264 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007238:	893b      	ldrh	r3, [r7, #8]
 800723a:	0a1b      	lsrs	r3, r3, #8
 800723c:	b29b      	uxth	r3, r3
 800723e:	b2da      	uxtb	r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007246:	69fa      	ldr	r2, [r7, #28]
 8007248:	69b9      	ldr	r1, [r7, #24]
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f000 f8d6 	bl	80073fc <I2C_WaitOnTXISFlagUntilTimeout>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e012      	b.n	8007280 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800725a:	893b      	ldrh	r3, [r7, #8]
 800725c:	b2da      	uxtb	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	9300      	str	r3, [sp, #0]
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	2200      	movs	r2, #0
 800726c:	2180      	movs	r1, #128	; 0x80
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f000 f884 	bl	800737c <I2C_WaitOnFlagUntilTimeout>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e000      	b.n	8007280 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	80002000 	.word	0x80002000

0800728c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af02      	add	r7, sp, #8
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	4608      	mov	r0, r1
 8007296:	4611      	mov	r1, r2
 8007298:	461a      	mov	r2, r3
 800729a:	4603      	mov	r3, r0
 800729c:	817b      	strh	r3, [r7, #10]
 800729e:	460b      	mov	r3, r1
 80072a0:	813b      	strh	r3, [r7, #8]
 80072a2:	4613      	mov	r3, r2
 80072a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80072a6:	88fb      	ldrh	r3, [r7, #6]
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	8979      	ldrh	r1, [r7, #10]
 80072ac:	4b20      	ldr	r3, [pc, #128]	; (8007330 <I2C_RequestMemoryRead+0xa4>)
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	2300      	movs	r3, #0
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f000 f984 	bl	80075c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072b8:	69fa      	ldr	r2, [r7, #28]
 80072ba:	69b9      	ldr	r1, [r7, #24]
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f000 f89d 	bl	80073fc <I2C_WaitOnTXISFlagUntilTimeout>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d001      	beq.n	80072cc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e02c      	b.n	8007326 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80072cc:	88fb      	ldrh	r3, [r7, #6]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d105      	bne.n	80072de <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80072d2:	893b      	ldrh	r3, [r7, #8]
 80072d4:	b2da      	uxtb	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	629a      	str	r2, [r3, #40]	; 0x28
 80072dc:	e015      	b.n	800730a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80072de:	893b      	ldrh	r3, [r7, #8]
 80072e0:	0a1b      	lsrs	r3, r3, #8
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	b2da      	uxtb	r2, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072ec:	69fa      	ldr	r2, [r7, #28]
 80072ee:	69b9      	ldr	r1, [r7, #24]
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f000 f883 	bl	80073fc <I2C_WaitOnTXISFlagUntilTimeout>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d001      	beq.n	8007300 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e012      	b.n	8007326 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007300:	893b      	ldrh	r3, [r7, #8]
 8007302:	b2da      	uxtb	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	2200      	movs	r2, #0
 8007312:	2140      	movs	r1, #64	; 0x40
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f000 f831 	bl	800737c <I2C_WaitOnFlagUntilTimeout>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e000      	b.n	8007326 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	80002000 	.word	0x80002000

08007334 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	f003 0302 	and.w	r3, r3, #2
 8007346:	2b02      	cmp	r3, #2
 8007348:	d103      	bne.n	8007352 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2200      	movs	r2, #0
 8007350:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	699b      	ldr	r3, [r3, #24]
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	2b01      	cmp	r3, #1
 800735e:	d007      	beq.n	8007370 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	699a      	ldr	r2, [r3, #24]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f042 0201 	orr.w	r2, r2, #1
 800736e:	619a      	str	r2, [r3, #24]
  }
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	603b      	str	r3, [r7, #0]
 8007388:	4613      	mov	r3, r2
 800738a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800738c:	e022      	b.n	80073d4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007394:	d01e      	beq.n	80073d4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007396:	f7fe fdf9 	bl	8005f8c <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d302      	bcc.n	80073ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d113      	bne.n	80073d4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b0:	f043 0220 	orr.w	r2, r3, #32
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2220      	movs	r2, #32
 80073bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e00f      	b.n	80073f4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	699a      	ldr	r2, [r3, #24]
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	4013      	ands	r3, r2
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	bf0c      	ite	eq
 80073e4:	2301      	moveq	r3, #1
 80073e6:	2300      	movne	r3, #0
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	461a      	mov	r2, r3
 80073ec:	79fb      	ldrb	r3, [r7, #7]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d0cd      	beq.n	800738e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007408:	e02c      	b.n	8007464 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	68b9      	ldr	r1, [r7, #8]
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f000 f870 	bl	80074f4 <I2C_IsAcknowledgeFailed>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d001      	beq.n	800741e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e02a      	b.n	8007474 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007424:	d01e      	beq.n	8007464 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007426:	f7fe fdb1 	bl	8005f8c <HAL_GetTick>
 800742a:	4602      	mov	r2, r0
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	429a      	cmp	r2, r3
 8007434:	d302      	bcc.n	800743c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d113      	bne.n	8007464 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007440:	f043 0220 	orr.w	r2, r3, #32
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2220      	movs	r2, #32
 800744c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e007      	b.n	8007474 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	f003 0302 	and.w	r3, r3, #2
 800746e:	2b02      	cmp	r3, #2
 8007470:	d1cb      	bne.n	800740a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007488:	e028      	b.n	80074dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	68b9      	ldr	r1, [r7, #8]
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f000 f830 	bl	80074f4 <I2C_IsAcknowledgeFailed>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d001      	beq.n	800749e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e026      	b.n	80074ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800749e:	f7fe fd75 	bl	8005f8c <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	68ba      	ldr	r2, [r7, #8]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d302      	bcc.n	80074b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d113      	bne.n	80074dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b8:	f043 0220 	orr.w	r2, r3, #32
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2220      	movs	r2, #32
 80074c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e007      	b.n	80074ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	699b      	ldr	r3, [r3, #24]
 80074e2:	f003 0320 	and.w	r3, r3, #32
 80074e6:	2b20      	cmp	r3, #32
 80074e8:	d1cf      	bne.n	800748a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	f003 0310 	and.w	r3, r3, #16
 800750a:	2b10      	cmp	r3, #16
 800750c:	d151      	bne.n	80075b2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800750e:	e022      	b.n	8007556 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007516:	d01e      	beq.n	8007556 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007518:	f7fe fd38 	bl	8005f8c <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	429a      	cmp	r2, r3
 8007526:	d302      	bcc.n	800752e <I2C_IsAcknowledgeFailed+0x3a>
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d113      	bne.n	8007556 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007532:	f043 0220 	orr.w	r2, r3, #32
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2220      	movs	r2, #32
 800753e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e02e      	b.n	80075b4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	699b      	ldr	r3, [r3, #24]
 800755c:	f003 0320 	and.w	r3, r3, #32
 8007560:	2b20      	cmp	r3, #32
 8007562:	d1d5      	bne.n	8007510 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2210      	movs	r2, #16
 800756a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2220      	movs	r2, #32
 8007572:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f7ff fedd 	bl	8007334 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	6859      	ldr	r1, [r3, #4]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	4b0d      	ldr	r3, [pc, #52]	; (80075bc <I2C_IsAcknowledgeFailed+0xc8>)
 8007586:	400b      	ands	r3, r1
 8007588:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800758e:	f043 0204 	orr.w	r2, r3, #4
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2220      	movs	r2, #32
 800759a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e000      	b.n	80075b4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	fe00e800 	.word	0xfe00e800

080075c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	607b      	str	r3, [r7, #4]
 80075ca:	460b      	mov	r3, r1
 80075cc:	817b      	strh	r3, [r7, #10]
 80075ce:	4613      	mov	r3, r2
 80075d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	685a      	ldr	r2, [r3, #4]
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	0d5b      	lsrs	r3, r3, #21
 80075dc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80075e0:	4b0d      	ldr	r3, [pc, #52]	; (8007618 <I2C_TransferConfig+0x58>)
 80075e2:	430b      	orrs	r3, r1
 80075e4:	43db      	mvns	r3, r3
 80075e6:	ea02 0103 	and.w	r1, r2, r3
 80075ea:	897b      	ldrh	r3, [r7, #10]
 80075ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80075f0:	7a7b      	ldrb	r3, [r7, #9]
 80075f2:	041b      	lsls	r3, r3, #16
 80075f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80075f8:	431a      	orrs	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	431a      	orrs	r2, r3
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	431a      	orrs	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	430a      	orrs	r2, r1
 8007608:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800760a:	bf00      	nop
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	03ff63ff 	.word	0x03ff63ff

0800761c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b20      	cmp	r3, #32
 8007630:	d138      	bne.n	80076a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007638:	2b01      	cmp	r3, #1
 800763a:	d101      	bne.n	8007640 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800763c:	2302      	movs	r3, #2
 800763e:	e032      	b.n	80076a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2224      	movs	r2, #36	; 0x24
 800764c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f022 0201 	bic.w	r2, r2, #1
 800765e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800766e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	6819      	ldr	r1, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	683a      	ldr	r2, [r7, #0]
 800767c:	430a      	orrs	r2, r1
 800767e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f042 0201 	orr.w	r2, r2, #1
 800768e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2220      	movs	r2, #32
 8007694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80076a0:	2300      	movs	r3, #0
 80076a2:	e000      	b.n	80076a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80076a4:	2302      	movs	r3, #2
  }
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b085      	sub	sp, #20
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
 80076ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	2b20      	cmp	r3, #32
 80076c6:	d139      	bne.n	800773c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d101      	bne.n	80076d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80076d2:	2302      	movs	r3, #2
 80076d4:	e033      	b.n	800773e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2224      	movs	r2, #36	; 0x24
 80076e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f022 0201 	bic.w	r2, r2, #1
 80076f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007704:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	021b      	lsls	r3, r3, #8
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	4313      	orrs	r3, r2
 800770e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f042 0201 	orr.w	r2, r2, #1
 8007726:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2220      	movs	r2, #32
 800772c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007738:	2300      	movs	r3, #0
 800773a:	e000      	b.n	800773e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800773c:	2302      	movs	r3, #2
  }
}
 800773e:	4618      	mov	r0, r3
 8007740:	3714      	adds	r7, #20
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
	...

0800774c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800774c:	b480      	push	{r7}
 800774e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007750:	4b05      	ldr	r3, [pc, #20]	; (8007768 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a04      	ldr	r2, [pc, #16]	; (8007768 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800775a:	6013      	str	r3, [r2, #0]
}
 800775c:	bf00      	nop
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	58000400 	.word	0x58000400

0800776c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800776c:	b480      	push	{r7}
 800776e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007770:	4b04      	ldr	r3, [pc, #16]	; (8007784 <HAL_PWREx_GetVoltageRange+0x18>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8007778:	4618      	mov	r0, r3
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	58000400 	.word	0x58000400

08007788 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007788:	b480      	push	{r7}
 800778a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800778c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800779a:	d101      	bne.n	80077a0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800779c:	2301      	movs	r3, #1
 800779e:	e000      	b.n	80077a2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <LL_RCC_HSE_Enable>:
{
 80077ac:	b480      	push	{r7}
 80077ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80077b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077be:	6013      	str	r3, [r2, #0]
}
 80077c0:	bf00      	nop
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <LL_RCC_HSE_Disable>:
{
 80077ca:	b480      	push	{r7}
 80077cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80077ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077dc:	6013      	str	r3, [r2, #0]
}
 80077de:	bf00      	nop
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <LL_RCC_HSE_IsReady>:
{
 80077e8:	b480      	push	{r7}
 80077ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80077ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077fa:	d101      	bne.n	8007800 <LL_RCC_HSE_IsReady+0x18>
 80077fc:	2301      	movs	r3, #1
 80077fe:	e000      	b.n	8007802 <LL_RCC_HSE_IsReady+0x1a>
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <LL_RCC_HSI_Enable>:
{
 800780c:	b480      	push	{r7}
 800780e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800781a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800781e:	6013      	str	r3, [r2, #0]
}
 8007820:	bf00      	nop
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <LL_RCC_HSI_Disable>:
{
 800782a:	b480      	push	{r7}
 800782c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800782e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800783c:	6013      	str	r3, [r2, #0]
}
 800783e:	bf00      	nop
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <LL_RCC_HSI_IsReady>:
{
 8007848:	b480      	push	{r7}
 800784a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800784c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800785a:	d101      	bne.n	8007860 <LL_RCC_HSI_IsReady+0x18>
 800785c:	2301      	movs	r3, #1
 800785e:	e000      	b.n	8007862 <LL_RCC_HSI_IsReady+0x1a>
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <LL_RCC_HSI_SetCalibTrimming>:
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	061b      	lsls	r3, r3, #24
 8007882:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007886:	4313      	orrs	r3, r2
 8007888:	604b      	str	r3, [r1, #4]
}
 800788a:	bf00      	nop
 800788c:	370c      	adds	r7, #12
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr

08007896 <LL_RCC_HSI48_Enable>:
{
 8007896:	b480      	push	{r7}
 8007898:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800789a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800789e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078a6:	f043 0301 	orr.w	r3, r3, #1
 80078aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80078ae:	bf00      	nop
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <LL_RCC_HSI48_Disable>:
{
 80078b8:	b480      	push	{r7}
 80078ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80078bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078c8:	f023 0301 	bic.w	r3, r3, #1
 80078cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80078d0:	bf00      	nop
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <LL_RCC_HSI48_IsReady>:
{
 80078da:	b480      	push	{r7}
 80078dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80078de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078e6:	f003 0302 	and.w	r3, r3, #2
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d101      	bne.n	80078f2 <LL_RCC_HSI48_IsReady+0x18>
 80078ee:	2301      	movs	r3, #1
 80078f0:	e000      	b.n	80078f4 <LL_RCC_HSI48_IsReady+0x1a>
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <LL_RCC_LSE_Enable>:
{
 80078fe:	b480      	push	{r7}
 8007900:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800790a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800790e:	f043 0301 	orr.w	r3, r3, #1
 8007912:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007916:	bf00      	nop
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <LL_RCC_LSE_Disable>:
{
 8007920:	b480      	push	{r7}
 8007922:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800792c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007930:	f023 0301 	bic.w	r3, r3, #1
 8007934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007938:	bf00      	nop
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <LL_RCC_LSE_EnableBypass>:
{
 8007942:	b480      	push	{r7}
 8007944:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800794a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800794e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007952:	f043 0304 	orr.w	r3, r3, #4
 8007956:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800795a:	bf00      	nop
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <LL_RCC_LSE_DisableBypass>:
{
 8007964:	b480      	push	{r7}
 8007966:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800796c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007970:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007974:	f023 0304 	bic.w	r3, r3, #4
 8007978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800797c:	bf00      	nop
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <LL_RCC_LSE_IsReady>:
{
 8007986:	b480      	push	{r7}
 8007988:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800798a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800798e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007992:	f003 0302 	and.w	r3, r3, #2
 8007996:	2b02      	cmp	r3, #2
 8007998:	d101      	bne.n	800799e <LL_RCC_LSE_IsReady+0x18>
 800799a:	2301      	movs	r3, #1
 800799c:	e000      	b.n	80079a0 <LL_RCC_LSE_IsReady+0x1a>
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <LL_RCC_LSI1_Enable>:
{
 80079aa:	b480      	push	{r7}
 80079ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80079ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079ba:	f043 0301 	orr.w	r3, r3, #1
 80079be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80079c2:	bf00      	nop
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <LL_RCC_LSI1_Disable>:
{
 80079cc:	b480      	push	{r7}
 80079ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80079d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079dc:	f023 0301 	bic.w	r3, r3, #1
 80079e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80079e4:	bf00      	nop
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <LL_RCC_LSI1_IsReady>:
{
 80079ee:	b480      	push	{r7}
 80079f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80079f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079fa:	f003 0302 	and.w	r3, r3, #2
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d101      	bne.n	8007a06 <LL_RCC_LSI1_IsReady+0x18>
 8007a02:	2301      	movs	r3, #1
 8007a04:	e000      	b.n	8007a08 <LL_RCC_LSI1_IsReady+0x1a>
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <LL_RCC_LSI2_Enable>:
{
 8007a12:	b480      	push	{r7}
 8007a14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a22:	f043 0304 	orr.w	r3, r3, #4
 8007a26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007a2a:	bf00      	nop
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <LL_RCC_LSI2_Disable>:
{
 8007a34:	b480      	push	{r7}
 8007a36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a44:	f023 0304 	bic.w	r3, r3, #4
 8007a48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007a4c:	bf00      	nop
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <LL_RCC_LSI2_IsReady>:
{
 8007a56:	b480      	push	{r7}
 8007a58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8007a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a62:	f003 0308 	and.w	r3, r3, #8
 8007a66:	2b08      	cmp	r3, #8
 8007a68:	d101      	bne.n	8007a6e <LL_RCC_LSI2_IsReady+0x18>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e000      	b.n	8007a70 <LL_RCC_LSI2_IsReady+0x1a>
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <LL_RCC_LSI2_SetTrimming>:
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b083      	sub	sp, #12
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8007a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a8a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	021b      	lsls	r3, r3, #8
 8007a92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a96:	4313      	orrs	r3, r2
 8007a98:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <LL_RCC_MSI_Enable>:
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8007aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ab6:	f043 0301 	orr.w	r3, r3, #1
 8007aba:	6013      	str	r3, [r2, #0]
}
 8007abc:	bf00      	nop
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <LL_RCC_MSI_Disable>:
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8007aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ad4:	f023 0301 	bic.w	r3, r3, #1
 8007ad8:	6013      	str	r3, [r2, #0]
}
 8007ada:	bf00      	nop
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <LL_RCC_MSI_IsReady>:
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0302 	and.w	r3, r3, #2
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d101      	bne.n	8007afa <LL_RCC_MSI_IsReady+0x16>
 8007af6:	2301      	movs	r3, #1
 8007af8:	e000      	b.n	8007afc <LL_RCC_MSI_IsReady+0x18>
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <LL_RCC_MSI_SetRange>:
{
 8007b06:	b480      	push	{r7}
 8007b08:	b083      	sub	sp, #12
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8007b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	600b      	str	r3, [r1, #0]
}
 8007b22:	bf00      	nop
 8007b24:	370c      	adds	r7, #12
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <LL_RCC_MSI_GetRange>:
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b083      	sub	sp, #12
 8007b32:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8007b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b3e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2bb0      	cmp	r3, #176	; 0xb0
 8007b44:	d901      	bls.n	8007b4a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8007b46:	23b0      	movs	r3, #176	; 0xb0
 8007b48:	607b      	str	r3, [r7, #4]
  return msiRange;
 8007b4a:	687b      	ldr	r3, [r7, #4]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <LL_RCC_MSI_SetCalibTrimming>:
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8007b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	021b      	lsls	r3, r3, #8
 8007b6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b72:	4313      	orrs	r3, r2
 8007b74:	604b      	str	r3, [r1, #4]
}
 8007b76:	bf00      	nop
 8007b78:	370c      	adds	r7, #12
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr

08007b82 <LL_RCC_SetSysClkSource>:
{
 8007b82:	b480      	push	{r7}
 8007b84:	b083      	sub	sp, #12
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f023 0203 	bic.w	r2, r3, #3
 8007b94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	608b      	str	r3, [r1, #8]
}
 8007b9e:	bf00      	nop
 8007ba0:	370c      	adds	r7, #12
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <LL_RCC_GetSysClkSource>:
{
 8007baa:	b480      	push	{r7}
 8007bac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	f003 030c 	and.w	r3, r3, #12
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr

08007bc2 <LL_RCC_SetAHBPrescaler>:
{
 8007bc2:	b480      	push	{r7}
 8007bc4:	b083      	sub	sp, #12
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	608b      	str	r3, [r1, #8]
}
 8007bde:	bf00      	nop
 8007be0:	370c      	adds	r7, #12
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <LL_C2_RCC_SetAHBPrescaler>:
{
 8007bea:	b480      	push	{r7}
 8007bec:	b083      	sub	sp, #12
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8007bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bf6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007bfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8007c0a:	bf00      	nop
 8007c0c:	370c      	adds	r7, #12
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <LL_RCC_SetAHB4Prescaler>:
{
 8007c16:	b480      	push	{r7}
 8007c18:	b083      	sub	sp, #12
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8007c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c22:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007c26:	f023 020f 	bic.w	r2, r3, #15
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	091b      	lsrs	r3, r3, #4
 8007c2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c32:	4313      	orrs	r3, r2
 8007c34:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <LL_RCC_SetAPB1Prescaler>:
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007c56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	608b      	str	r3, [r1, #8]
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <LL_RCC_SetAPB2Prescaler>:
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007c7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	608b      	str	r3, [r1, #8]
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <LL_RCC_GetAHBPrescaler>:
{
 8007c94:	b480      	push	{r7}
 8007c96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <LL_C2_RCC_GetAHBPrescaler>:
{
 8007cac:	b480      	push	{r7}
 8007cae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8007cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cb4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007cb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <LL_RCC_GetAHB4Prescaler>:
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8007cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007cd2:	011b      	lsls	r3, r3, #4
 8007cd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr

08007ce2 <LL_RCC_GetAPB1Prescaler>:
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <LL_RCC_GetAPB2Prescaler>:
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <LL_RCC_PLL_Enable>:
{
 8007d12:	b480      	push	{r7}
 8007d14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d24:	6013      	str	r3, [r2, #0]
}
 8007d26:	bf00      	nop
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <LL_RCC_PLL_Disable>:
{
 8007d30:	b480      	push	{r7}
 8007d32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8007d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d42:	6013      	str	r3, [r2, #0]
}
 8007d44:	bf00      	nop
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <LL_RCC_PLL_IsReady>:
{
 8007d4e:	b480      	push	{r7}
 8007d50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8007d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d60:	d101      	bne.n	8007d66 <LL_RCC_PLL_IsReady+0x18>
 8007d62:	2301      	movs	r3, #1
 8007d64:	e000      	b.n	8007d68 <LL_RCC_PLL_IsReady+0x1a>
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <LL_RCC_PLL_GetN>:
{
 8007d72:	b480      	push	{r7}
 8007d74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	0a1b      	lsrs	r3, r3, #8
 8007d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <LL_RCC_PLL_GetR>:
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <LL_RCC_PLL_GetDivider>:
{
 8007da4:	b480      	push	{r7}
 8007da6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <LL_RCC_PLL_GetMainSource>:
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	f003 0303 	and.w	r3, r3, #3
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <LL_RCC_IsActiveFlag_HPRE>:
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8007dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007de6:	d101      	bne.n	8007dec <LL_RCC_IsActiveFlag_HPRE+0x18>
 8007de8:	2301      	movs	r3, #1
 8007dea:	e000      	b.n	8007dee <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8007df8:	b480      	push	{r7}
 8007dfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8007dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e00:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e0c:	d101      	bne.n	8007e12 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e000      	b.n	8007e14 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8007e1e:	b480      	push	{r7}
 8007e20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8007e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e26:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e32:	d101      	bne.n	8007e38 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8007e34:	2301      	movs	r3, #1
 8007e36:	e000      	b.n	8007e3a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8007e44:	b480      	push	{r7}
 8007e46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8007e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e56:	d101      	bne.n	8007e5c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e000      	b.n	8007e5e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8007e68:	b480      	push	{r7}
 8007e6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8007e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e7a:	d101      	bne.n	8007e80 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e000      	b.n	8007e82 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e8c:	b590      	push	{r4, r7, lr}
 8007e8e:	b08d      	sub	sp, #52	; 0x34
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d101      	bne.n	8007e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e37e      	b.n	800859c <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 0320 	and.w	r3, r3, #32
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f000 8092 	beq.w	8007fd0 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007eac:	f7ff fe7d 	bl	8007baa <LL_RCC_GetSysClkSource>
 8007eb0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007eb2:	f7ff ff83 	bl	8007dbc <LL_RCC_PLL_GetMainSource>
 8007eb6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d005      	beq.n	8007eca <HAL_RCC_OscConfig+0x3e>
 8007ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec0:	2b0c      	cmp	r3, #12
 8007ec2:	d14c      	bne.n	8007f5e <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8007ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d149      	bne.n	8007f5e <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007eca:	f7ff fe0b 	bl	8007ae4 <LL_RCC_MSI_IsReady>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d005      	beq.n	8007ee0 <HAL_RCC_OscConfig+0x54>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	69db      	ldr	r3, [r3, #28]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d101      	bne.n	8007ee0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e35d      	b.n	800859c <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007ee4:	f7ff fe23 	bl	8007b2e <LL_RCC_MSI_GetRange>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	429c      	cmp	r4, r3
 8007eec:	d914      	bls.n	8007f18 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f000 fd72 	bl	80089dc <RCC_SetFlashLatencyFromMSIRange>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d001      	beq.n	8007f02 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e34c      	b.n	800859c <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7ff fdfd 	bl	8007b06 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6a1b      	ldr	r3, [r3, #32]
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7ff fe21 	bl	8007b58 <LL_RCC_MSI_SetCalibTrimming>
 8007f16:	e013      	b.n	8007f40 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7ff fdf2 	bl	8007b06 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a1b      	ldr	r3, [r3, #32]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7ff fe16 	bl	8007b58 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f30:	4618      	mov	r0, r3
 8007f32:	f000 fd53 	bl	80089dc <RCC_SetFlashLatencyFromMSIRange>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d001      	beq.n	8007f40 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e32d      	b.n	800859c <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007f40:	f000 fcda 	bl	80088f8 <HAL_RCC_GetHCLKFreq>
 8007f44:	4602      	mov	r2, r0
 8007f46:	4bb3      	ldr	r3, [pc, #716]	; (8008214 <HAL_RCC_OscConfig+0x388>)
 8007f48:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007f4a:	4bb3      	ldr	r3, [pc, #716]	; (8008218 <HAL_RCC_OscConfig+0x38c>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fd fe4c 	bl	8005bec <HAL_InitTick>
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d039      	beq.n	8007fce <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e31e      	b.n	800859c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d01e      	beq.n	8007fa4 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007f66:	f7ff fd9f 	bl	8007aa8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007f6a:	f7fe f80f 	bl	8005f8c <HAL_GetTick>
 8007f6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8007f70:	e008      	b.n	8007f84 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007f72:	f7fe f80b 	bl	8005f8c <HAL_GetTick>
 8007f76:	4602      	mov	r2, r0
 8007f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d901      	bls.n	8007f84 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8007f80:	2303      	movs	r3, #3
 8007f82:	e30b      	b.n	800859c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007f84:	f7ff fdae 	bl	8007ae4 <LL_RCC_MSI_IsReady>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d0f1      	beq.n	8007f72 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7ff fdb7 	bl	8007b06 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a1b      	ldr	r3, [r3, #32]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7ff fddb 	bl	8007b58 <LL_RCC_MSI_SetCalibTrimming>
 8007fa2:	e015      	b.n	8007fd0 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007fa4:	f7ff fd8f 	bl	8007ac6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007fa8:	f7fd fff0 	bl	8005f8c <HAL_GetTick>
 8007fac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8007fae:	e008      	b.n	8007fc2 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007fb0:	f7fd ffec 	bl	8005f8c <HAL_GetTick>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb8:	1ad3      	subs	r3, r2, r3
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d901      	bls.n	8007fc2 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	e2ec      	b.n	800859c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007fc2:	f7ff fd8f 	bl	8007ae4 <LL_RCC_MSI_IsReady>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1f1      	bne.n	8007fb0 <HAL_RCC_OscConfig+0x124>
 8007fcc:	e000      	b.n	8007fd0 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007fce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0301 	and.w	r3, r3, #1
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d04e      	beq.n	800807a <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fdc:	f7ff fde5 	bl	8007baa <LL_RCC_GetSysClkSource>
 8007fe0:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007fe2:	f7ff feeb 	bl	8007dbc <LL_RCC_PLL_GetMainSource>
 8007fe6:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007fe8:	6a3b      	ldr	r3, [r7, #32]
 8007fea:	2b08      	cmp	r3, #8
 8007fec:	d005      	beq.n	8007ffa <HAL_RCC_OscConfig+0x16e>
 8007fee:	6a3b      	ldr	r3, [r7, #32]
 8007ff0:	2b0c      	cmp	r3, #12
 8007ff2:	d10d      	bne.n	8008010 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	d10a      	bne.n	8008010 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ffa:	f7ff fbf5 	bl	80077e8 <LL_RCC_HSE_IsReady>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d039      	beq.n	8008078 <HAL_RCC_OscConfig+0x1ec>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d135      	bne.n	8008078 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e2c5      	b.n	800859c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008018:	d102      	bne.n	8008020 <HAL_RCC_OscConfig+0x194>
 800801a:	f7ff fbc7 	bl	80077ac <LL_RCC_HSE_Enable>
 800801e:	e001      	b.n	8008024 <HAL_RCC_OscConfig+0x198>
 8008020:	f7ff fbd3 	bl	80077ca <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d012      	beq.n	8008052 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800802c:	f7fd ffae 	bl	8005f8c <HAL_GetTick>
 8008030:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8008032:	e008      	b.n	8008046 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008034:	f7fd ffaa 	bl	8005f8c <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	2b64      	cmp	r3, #100	; 0x64
 8008040:	d901      	bls.n	8008046 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	e2aa      	b.n	800859c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8008046:	f7ff fbcf 	bl	80077e8 <LL_RCC_HSE_IsReady>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d0f1      	beq.n	8008034 <HAL_RCC_OscConfig+0x1a8>
 8008050:	e013      	b.n	800807a <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008052:	f7fd ff9b 	bl	8005f8c <HAL_GetTick>
 8008056:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8008058:	e008      	b.n	800806c <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800805a:	f7fd ff97 	bl	8005f8c <HAL_GetTick>
 800805e:	4602      	mov	r2, r0
 8008060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008062:	1ad3      	subs	r3, r2, r3
 8008064:	2b64      	cmp	r3, #100	; 0x64
 8008066:	d901      	bls.n	800806c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8008068:	2303      	movs	r3, #3
 800806a:	e297      	b.n	800859c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 800806c:	f7ff fbbc 	bl	80077e8 <LL_RCC_HSE_IsReady>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1f1      	bne.n	800805a <HAL_RCC_OscConfig+0x1ce>
 8008076:	e000      	b.n	800807a <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f003 0302 	and.w	r3, r3, #2
 8008082:	2b00      	cmp	r3, #0
 8008084:	d051      	beq.n	800812a <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008086:	f7ff fd90 	bl	8007baa <LL_RCC_GetSysClkSource>
 800808a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800808c:	f7ff fe96 	bl	8007dbc <LL_RCC_PLL_GetMainSource>
 8008090:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	2b04      	cmp	r3, #4
 8008096:	d005      	beq.n	80080a4 <HAL_RCC_OscConfig+0x218>
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	2b0c      	cmp	r3, #12
 800809c:	d113      	bne.n	80080c6 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d110      	bne.n	80080c6 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080a4:	f7ff fbd0 	bl	8007848 <LL_RCC_HSI_IsReady>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d005      	beq.n	80080ba <HAL_RCC_OscConfig+0x22e>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d101      	bne.n	80080ba <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	e270      	b.n	800859c <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	4618      	mov	r0, r3
 80080c0:	f7ff fbd4 	bl	800786c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080c4:	e031      	b.n	800812a <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d019      	beq.n	8008102 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080ce:	f7ff fb9d 	bl	800780c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080d2:	f7fd ff5b 	bl	8005f8c <HAL_GetTick>
 80080d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80080d8:	e008      	b.n	80080ec <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080da:	f7fd ff57 	bl	8005f8c <HAL_GetTick>
 80080de:	4602      	mov	r2, r0
 80080e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d901      	bls.n	80080ec <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80080e8:	2303      	movs	r3, #3
 80080ea:	e257      	b.n	800859c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80080ec:	f7ff fbac 	bl	8007848 <LL_RCC_HSI_IsReady>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d0f1      	beq.n	80080da <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7ff fbb6 	bl	800786c <LL_RCC_HSI_SetCalibTrimming>
 8008100:	e013      	b.n	800812a <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008102:	f7ff fb92 	bl	800782a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008106:	f7fd ff41 	bl	8005f8c <HAL_GetTick>
 800810a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800810c:	e008      	b.n	8008120 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800810e:	f7fd ff3d 	bl	8005f8c <HAL_GetTick>
 8008112:	4602      	mov	r2, r0
 8008114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	2b02      	cmp	r3, #2
 800811a:	d901      	bls.n	8008120 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e23d      	b.n	800859c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8008120:	f7ff fb92 	bl	8007848 <LL_RCC_HSI_IsReady>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1f1      	bne.n	800810e <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 0308 	and.w	r3, r3, #8
 8008132:	2b00      	cmp	r3, #0
 8008134:	d106      	bne.n	8008144 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800813e:	2b00      	cmp	r3, #0
 8008140:	f000 80a3 	beq.w	800828a <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	695b      	ldr	r3, [r3, #20]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d076      	beq.n	800823a <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0310 	and.w	r3, r3, #16
 8008154:	2b00      	cmp	r3, #0
 8008156:	d046      	beq.n	80081e6 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8008158:	f7ff fc49 	bl	80079ee <LL_RCC_LSI1_IsReady>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d113      	bne.n	800818a <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8008162:	f7ff fc22 	bl	80079aa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008166:	f7fd ff11 	bl	8005f8c <HAL_GetTick>
 800816a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800816c:	e008      	b.n	8008180 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800816e:	f7fd ff0d 	bl	8005f8c <HAL_GetTick>
 8008172:	4602      	mov	r2, r0
 8008174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	2b02      	cmp	r3, #2
 800817a:	d901      	bls.n	8008180 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 800817c:	2303      	movs	r3, #3
 800817e:	e20d      	b.n	800859c <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008180:	f7ff fc35 	bl	80079ee <LL_RCC_LSI1_IsReady>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d0f1      	beq.n	800816e <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800818a:	f7ff fc42 	bl	8007a12 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800818e:	f7fd fefd 	bl	8005f8c <HAL_GetTick>
 8008192:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008194:	e008      	b.n	80081a8 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008196:	f7fd fef9 	bl	8005f8c <HAL_GetTick>
 800819a:	4602      	mov	r2, r0
 800819c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	2b03      	cmp	r3, #3
 80081a2:	d901      	bls.n	80081a8 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e1f9      	b.n	800859c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80081a8:	f7ff fc55 	bl	8007a56 <LL_RCC_LSI2_IsReady>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d0f1      	beq.n	8008196 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7ff fc5f 	bl	8007a7a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80081bc:	f7ff fc06 	bl	80079cc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081c0:	f7fd fee4 	bl	8005f8c <HAL_GetTick>
 80081c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80081c6:	e008      	b.n	80081da <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80081c8:	f7fd fee0 	bl	8005f8c <HAL_GetTick>
 80081cc:	4602      	mov	r2, r0
 80081ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d901      	bls.n	80081da <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80081d6:	2303      	movs	r3, #3
 80081d8:	e1e0      	b.n	800859c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80081da:	f7ff fc08 	bl	80079ee <LL_RCC_LSI1_IsReady>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d1f1      	bne.n	80081c8 <HAL_RCC_OscConfig+0x33c>
 80081e4:	e051      	b.n	800828a <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80081e6:	f7ff fbe0 	bl	80079aa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081ea:	f7fd fecf 	bl	8005f8c <HAL_GetTick>
 80081ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80081f0:	e008      	b.n	8008204 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80081f2:	f7fd fecb 	bl	8005f8c <HAL_GetTick>
 80081f6:	4602      	mov	r2, r0
 80081f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fa:	1ad3      	subs	r3, r2, r3
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d901      	bls.n	8008204 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8008200:	2303      	movs	r3, #3
 8008202:	e1cb      	b.n	800859c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8008204:	f7ff fbf3 	bl	80079ee <LL_RCC_LSI1_IsReady>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d0f1      	beq.n	80081f2 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800820e:	f7ff fc11 	bl	8007a34 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8008212:	e00c      	b.n	800822e <HAL_RCC_OscConfig+0x3a2>
 8008214:	20000014 	.word	0x20000014
 8008218:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800821c:	f7fd feb6 	bl	8005f8c <HAL_GetTick>
 8008220:	4602      	mov	r2, r0
 8008222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	2b03      	cmp	r3, #3
 8008228:	d901      	bls.n	800822e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e1b6      	b.n	800859c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800822e:	f7ff fc12 	bl	8007a56 <LL_RCC_LSI2_IsReady>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d1f1      	bne.n	800821c <HAL_RCC_OscConfig+0x390>
 8008238:	e027      	b.n	800828a <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800823a:	f7ff fbfb 	bl	8007a34 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800823e:	f7fd fea5 	bl	8005f8c <HAL_GetTick>
 8008242:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008244:	e008      	b.n	8008258 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008246:	f7fd fea1 	bl	8005f8c <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	2b03      	cmp	r3, #3
 8008252:	d901      	bls.n	8008258 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008254:	2303      	movs	r3, #3
 8008256:	e1a1      	b.n	800859c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008258:	f7ff fbfd 	bl	8007a56 <LL_RCC_LSI2_IsReady>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1f1      	bne.n	8008246 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8008262:	f7ff fbb3 	bl	80079cc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008266:	f7fd fe91 	bl	8005f8c <HAL_GetTick>
 800826a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800826c:	e008      	b.n	8008280 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800826e:	f7fd fe8d 	bl	8005f8c <HAL_GetTick>
 8008272:	4602      	mov	r2, r0
 8008274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	2b02      	cmp	r3, #2
 800827a:	d901      	bls.n	8008280 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800827c:	2303      	movs	r3, #3
 800827e:	e18d      	b.n	800859c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008280:	f7ff fbb5 	bl	80079ee <LL_RCC_LSI1_IsReady>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1f1      	bne.n	800826e <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 0304 	and.w	r3, r3, #4
 8008292:	2b00      	cmp	r3, #0
 8008294:	d05b      	beq.n	800834e <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008296:	4bb5      	ldr	r3, [pc, #724]	; (800856c <HAL_RCC_OscConfig+0x6e0>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d114      	bne.n	80082cc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80082a2:	f7ff fa53 	bl	800774c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80082a6:	f7fd fe71 	bl	8005f8c <HAL_GetTick>
 80082aa:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80082ac:	e008      	b.n	80082c0 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082ae:	f7fd fe6d 	bl	8005f8c <HAL_GetTick>
 80082b2:	4602      	mov	r2, r0
 80082b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d901      	bls.n	80082c0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80082bc:	2303      	movs	r3, #3
 80082be:	e16d      	b.n	800859c <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80082c0:	4baa      	ldr	r3, [pc, #680]	; (800856c <HAL_RCC_OscConfig+0x6e0>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d0f0      	beq.n	80082ae <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d102      	bne.n	80082da <HAL_RCC_OscConfig+0x44e>
 80082d4:	f7ff fb13 	bl	80078fe <LL_RCC_LSE_Enable>
 80082d8:	e00c      	b.n	80082f4 <HAL_RCC_OscConfig+0x468>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	2b05      	cmp	r3, #5
 80082e0:	d104      	bne.n	80082ec <HAL_RCC_OscConfig+0x460>
 80082e2:	f7ff fb2e 	bl	8007942 <LL_RCC_LSE_EnableBypass>
 80082e6:	f7ff fb0a 	bl	80078fe <LL_RCC_LSE_Enable>
 80082ea:	e003      	b.n	80082f4 <HAL_RCC_OscConfig+0x468>
 80082ec:	f7ff fb18 	bl	8007920 <LL_RCC_LSE_Disable>
 80082f0:	f7ff fb38 	bl	8007964 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d014      	beq.n	8008326 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082fc:	f7fd fe46 	bl	8005f8c <HAL_GetTick>
 8008300:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8008302:	e00a      	b.n	800831a <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008304:	f7fd fe42 	bl	8005f8c <HAL_GetTick>
 8008308:	4602      	mov	r2, r0
 800830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008312:	4293      	cmp	r3, r2
 8008314:	d901      	bls.n	800831a <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8008316:	2303      	movs	r3, #3
 8008318:	e140      	b.n	800859c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 800831a:	f7ff fb34 	bl	8007986 <LL_RCC_LSE_IsReady>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d0ef      	beq.n	8008304 <HAL_RCC_OscConfig+0x478>
 8008324:	e013      	b.n	800834e <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008326:	f7fd fe31 	bl	8005f8c <HAL_GetTick>
 800832a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800832c:	e00a      	b.n	8008344 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800832e:	f7fd fe2d 	bl	8005f8c <HAL_GetTick>
 8008332:	4602      	mov	r2, r0
 8008334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	f241 3288 	movw	r2, #5000	; 0x1388
 800833c:	4293      	cmp	r3, r2
 800833e:	d901      	bls.n	8008344 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8008340:	2303      	movs	r3, #3
 8008342:	e12b      	b.n	800859c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8008344:	f7ff fb1f 	bl	8007986 <LL_RCC_LSE_IsReady>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1ef      	bne.n	800832e <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008356:	2b00      	cmp	r3, #0
 8008358:	d02c      	beq.n	80083b4 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835e:	2b00      	cmp	r3, #0
 8008360:	d014      	beq.n	800838c <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008362:	f7ff fa98 	bl	8007896 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008366:	f7fd fe11 	bl	8005f8c <HAL_GetTick>
 800836a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800836c:	e008      	b.n	8008380 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800836e:	f7fd fe0d 	bl	8005f8c <HAL_GetTick>
 8008372:	4602      	mov	r2, r0
 8008374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008376:	1ad3      	subs	r3, r2, r3
 8008378:	2b02      	cmp	r3, #2
 800837a:	d901      	bls.n	8008380 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 800837c:	2303      	movs	r3, #3
 800837e:	e10d      	b.n	800859c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008380:	f7ff faab 	bl	80078da <LL_RCC_HSI48_IsReady>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d0f1      	beq.n	800836e <HAL_RCC_OscConfig+0x4e2>
 800838a:	e013      	b.n	80083b4 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800838c:	f7ff fa94 	bl	80078b8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008390:	f7fd fdfc 	bl	8005f8c <HAL_GetTick>
 8008394:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008396:	e008      	b.n	80083aa <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008398:	f7fd fdf8 	bl	8005f8c <HAL_GetTick>
 800839c:	4602      	mov	r2, r0
 800839e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d901      	bls.n	80083aa <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 80083a6:	2303      	movs	r3, #3
 80083a8:	e0f8      	b.n	800859c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80083aa:	f7ff fa96 	bl	80078da <LL_RCC_HSI48_IsReady>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d1f1      	bne.n	8008398 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f000 80ee 	beq.w	800859a <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083be:	f7ff fbf4 	bl	8007baa <LL_RCC_GetSysClkSource>
 80083c2:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80083c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	f040 80af 	bne.w	8008534 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f003 0203 	and.w	r2, r3, #3
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d123      	bne.n	800842c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d11c      	bne.n	800842c <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	0a1b      	lsrs	r3, r3, #8
 80083f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80083fe:	429a      	cmp	r2, r3
 8008400:	d114      	bne.n	800842c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800840c:	429a      	cmp	r2, r3
 800840e:	d10d      	bne.n	800842c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800841a:	429a      	cmp	r2, r3
 800841c:	d106      	bne.n	800842c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008428:	429a      	cmp	r2, r3
 800842a:	d05d      	beq.n	80084e8 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	2b0c      	cmp	r3, #12
 8008430:	d058      	beq.n	80084e4 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800843c:	2b00      	cmp	r3, #0
 800843e:	d001      	beq.n	8008444 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	e0ab      	b.n	800859c <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008444:	f7ff fc74 	bl	8007d30 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008448:	f7fd fda0 	bl	8005f8c <HAL_GetTick>
 800844c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800844e:	e008      	b.n	8008462 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008450:	f7fd fd9c 	bl	8005f8c <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	2b02      	cmp	r3, #2
 800845c:	d901      	bls.n	8008462 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e09c      	b.n	800859c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1ef      	bne.n	8008450 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008474:	68da      	ldr	r2, [r3, #12]
 8008476:	4b3e      	ldr	r3, [pc, #248]	; (8008570 <HAL_RCC_OscConfig+0x6e4>)
 8008478:	4013      	ands	r3, r2
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008482:	4311      	orrs	r1, r2
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008488:	0212      	lsls	r2, r2, #8
 800848a:	4311      	orrs	r1, r2
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008490:	4311      	orrs	r1, r2
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008496:	4311      	orrs	r1, r2
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800849c:	430a      	orrs	r2, r1
 800849e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80084a2:	4313      	orrs	r3, r2
 80084a4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80084a6:	f7ff fc34 	bl	8007d12 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80084aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80084b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084b8:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80084ba:	f7fd fd67 	bl	8005f8c <HAL_GetTick>
 80084be:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084c0:	e008      	b.n	80084d4 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084c2:	f7fd fd63 	bl	8005f8c <HAL_GetTick>
 80084c6:	4602      	mov	r2, r0
 80084c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ca:	1ad3      	subs	r3, r2, r3
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d901      	bls.n	80084d4 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 80084d0:	2303      	movs	r3, #3
 80084d2:	e063      	b.n	800859c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d0ef      	beq.n	80084c2 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80084e2:	e05a      	b.n	800859a <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e059      	b.n	800859c <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d151      	bne.n	800859a <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80084f6:	f7ff fc0c 	bl	8007d12 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80084fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008508:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800850a:	f7fd fd3f 	bl	8005f8c <HAL_GetTick>
 800850e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008510:	e008      	b.n	8008524 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008512:	f7fd fd3b 	bl	8005f8c <HAL_GetTick>
 8008516:	4602      	mov	r2, r0
 8008518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851a:	1ad3      	subs	r3, r2, r3
 800851c:	2b02      	cmp	r3, #2
 800851e:	d901      	bls.n	8008524 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8008520:	2303      	movs	r3, #3
 8008522:	e03b      	b.n	800859c <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800852e:	2b00      	cmp	r3, #0
 8008530:	d0ef      	beq.n	8008512 <HAL_RCC_OscConfig+0x686>
 8008532:	e032      	b.n	800859a <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	2b0c      	cmp	r3, #12
 8008538:	d02d      	beq.n	8008596 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800853a:	f7ff fbf9 	bl	8007d30 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800853e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008548:	f023 0303 	bic.w	r3, r3, #3
 800854c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800854e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008558:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800855c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008560:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008562:	f7fd fd13 	bl	8005f8c <HAL_GetTick>
 8008566:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008568:	e00d      	b.n	8008586 <HAL_RCC_OscConfig+0x6fa>
 800856a:	bf00      	nop
 800856c:	58000400 	.word	0x58000400
 8008570:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008574:	f7fd fd0a 	bl	8005f8c <HAL_GetTick>
 8008578:	4602      	mov	r2, r0
 800857a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	2b02      	cmp	r3, #2
 8008580:	d901      	bls.n	8008586 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8008582:	2303      	movs	r3, #3
 8008584:	e00a      	b.n	800859c <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008590:	2b00      	cmp	r3, #0
 8008592:	d1ef      	bne.n	8008574 <HAL_RCC_OscConfig+0x6e8>
 8008594:	e001      	b.n	800859a <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e000      	b.n	800859c <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3734      	adds	r7, #52	; 0x34
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd90      	pop	{r4, r7, pc}

080085a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d101      	bne.n	80085b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	e12d      	b.n	8008814 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80085b8:	4b98      	ldr	r3, [pc, #608]	; (800881c <HAL_RCC_ClockConfig+0x278>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 0307 	and.w	r3, r3, #7
 80085c0:	683a      	ldr	r2, [r7, #0]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d91b      	bls.n	80085fe <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085c6:	4b95      	ldr	r3, [pc, #596]	; (800881c <HAL_RCC_ClockConfig+0x278>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f023 0207 	bic.w	r2, r3, #7
 80085ce:	4993      	ldr	r1, [pc, #588]	; (800881c <HAL_RCC_ClockConfig+0x278>)
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085d6:	f7fd fcd9 	bl	8005f8c <HAL_GetTick>
 80085da:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085dc:	e008      	b.n	80085f0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80085de:	f7fd fcd5 	bl	8005f8c <HAL_GetTick>
 80085e2:	4602      	mov	r2, r0
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	d901      	bls.n	80085f0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80085ec:	2303      	movs	r3, #3
 80085ee:	e111      	b.n	8008814 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085f0:	4b8a      	ldr	r3, [pc, #552]	; (800881c <HAL_RCC_ClockConfig+0x278>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 0307 	and.w	r3, r3, #7
 80085f8:	683a      	ldr	r2, [r7, #0]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d1ef      	bne.n	80085de <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f003 0302 	and.w	r3, r3, #2
 8008606:	2b00      	cmp	r3, #0
 8008608:	d016      	beq.n	8008638 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	4618      	mov	r0, r3
 8008610:	f7ff fad7 	bl	8007bc2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008614:	f7fd fcba 	bl	8005f8c <HAL_GetTick>
 8008618:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800861a:	e008      	b.n	800862e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800861c:	f7fd fcb6 	bl	8005f8c <HAL_GetTick>
 8008620:	4602      	mov	r2, r0
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	1ad3      	subs	r3, r2, r3
 8008626:	2b02      	cmp	r3, #2
 8008628:	d901      	bls.n	800862e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800862a:	2303      	movs	r3, #3
 800862c:	e0f2      	b.n	8008814 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800862e:	f7ff fbd1 	bl	8007dd4 <LL_RCC_IsActiveFlag_HPRE>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d0f1      	beq.n	800861c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 0320 	and.w	r3, r3, #32
 8008640:	2b00      	cmp	r3, #0
 8008642:	d016      	beq.n	8008672 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	695b      	ldr	r3, [r3, #20]
 8008648:	4618      	mov	r0, r3
 800864a:	f7ff face 	bl	8007bea <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800864e:	f7fd fc9d 	bl	8005f8c <HAL_GetTick>
 8008652:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008654:	e008      	b.n	8008668 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008656:	f7fd fc99 	bl	8005f8c <HAL_GetTick>
 800865a:	4602      	mov	r2, r0
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	1ad3      	subs	r3, r2, r3
 8008660:	2b02      	cmp	r3, #2
 8008662:	d901      	bls.n	8008668 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	e0d5      	b.n	8008814 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008668:	f7ff fbc6 	bl	8007df8 <LL_RCC_IsActiveFlag_C2HPRE>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d0f1      	beq.n	8008656 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800867a:	2b00      	cmp	r3, #0
 800867c:	d016      	beq.n	80086ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	4618      	mov	r0, r3
 8008684:	f7ff fac7 	bl	8007c16 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008688:	f7fd fc80 	bl	8005f8c <HAL_GetTick>
 800868c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800868e:	e008      	b.n	80086a2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008690:	f7fd fc7c 	bl	8005f8c <HAL_GetTick>
 8008694:	4602      	mov	r2, r0
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	2b02      	cmp	r3, #2
 800869c:	d901      	bls.n	80086a2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800869e:	2303      	movs	r3, #3
 80086a0:	e0b8      	b.n	8008814 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80086a2:	f7ff fbbc 	bl	8007e1e <LL_RCC_IsActiveFlag_SHDHPRE>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d0f1      	beq.n	8008690 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0304 	and.w	r3, r3, #4
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d016      	beq.n	80086e6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	4618      	mov	r0, r3
 80086be:	f7ff fac1 	bl	8007c44 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80086c2:	f7fd fc63 	bl	8005f8c <HAL_GetTick>
 80086c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80086c8:	e008      	b.n	80086dc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80086ca:	f7fd fc5f 	bl	8005f8c <HAL_GetTick>
 80086ce:	4602      	mov	r2, r0
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d901      	bls.n	80086dc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80086d8:	2303      	movs	r3, #3
 80086da:	e09b      	b.n	8008814 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80086dc:	f7ff fbb2 	bl	8007e44 <LL_RCC_IsActiveFlag_PPRE1>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d0f1      	beq.n	80086ca <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 0308 	and.w	r3, r3, #8
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d017      	beq.n	8008722 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	00db      	lsls	r3, r3, #3
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7ff fab7 	bl	8007c6c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80086fe:	f7fd fc45 	bl	8005f8c <HAL_GetTick>
 8008702:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008704:	e008      	b.n	8008718 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008706:	f7fd fc41 	bl	8005f8c <HAL_GetTick>
 800870a:	4602      	mov	r2, r0
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	2b02      	cmp	r3, #2
 8008712:	d901      	bls.n	8008718 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8008714:	2303      	movs	r3, #3
 8008716:	e07d      	b.n	8008814 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008718:	f7ff fba6 	bl	8007e68 <LL_RCC_IsActiveFlag_PPRE2>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d0f1      	beq.n	8008706 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	2b00      	cmp	r3, #0
 800872c:	d043      	beq.n	80087b6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	2b02      	cmp	r3, #2
 8008734:	d106      	bne.n	8008744 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8008736:	f7ff f857 	bl	80077e8 <LL_RCC_HSE_IsReady>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d11e      	bne.n	800877e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	e067      	b.n	8008814 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	2b03      	cmp	r3, #3
 800874a:	d106      	bne.n	800875a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800874c:	f7ff faff 	bl	8007d4e <LL_RCC_PLL_IsReady>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d113      	bne.n	800877e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	e05c      	b.n	8008814 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d106      	bne.n	8008770 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8008762:	f7ff f9bf 	bl	8007ae4 <LL_RCC_MSI_IsReady>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d108      	bne.n	800877e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	e051      	b.n	8008814 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8008770:	f7ff f86a 	bl	8007848 <LL_RCC_HSI_IsReady>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d101      	bne.n	800877e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	e04a      	b.n	8008814 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	4618      	mov	r0, r3
 8008784:	f7ff f9fd 	bl	8007b82 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008788:	f7fd fc00 	bl	8005f8c <HAL_GetTick>
 800878c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800878e:	e00a      	b.n	80087a6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008790:	f7fd fbfc 	bl	8005f8c <HAL_GetTick>
 8008794:	4602      	mov	r2, r0
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	f241 3288 	movw	r2, #5000	; 0x1388
 800879e:	4293      	cmp	r3, r2
 80087a0:	d901      	bls.n	80087a6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80087a2:	2303      	movs	r3, #3
 80087a4:	e036      	b.n	8008814 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087a6:	f7ff fa00 	bl	8007baa <LL_RCC_GetSysClkSource>
 80087aa:	4602      	mov	r2, r0
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d1ec      	bne.n	8008790 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80087b6:	4b19      	ldr	r3, [pc, #100]	; (800881c <HAL_RCC_ClockConfig+0x278>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 0307 	and.w	r3, r3, #7
 80087be:	683a      	ldr	r2, [r7, #0]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d21b      	bcs.n	80087fc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087c4:	4b15      	ldr	r3, [pc, #84]	; (800881c <HAL_RCC_ClockConfig+0x278>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f023 0207 	bic.w	r2, r3, #7
 80087cc:	4913      	ldr	r1, [pc, #76]	; (800881c <HAL_RCC_ClockConfig+0x278>)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087d4:	f7fd fbda 	bl	8005f8c <HAL_GetTick>
 80087d8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087da:	e008      	b.n	80087ee <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80087dc:	f7fd fbd6 	bl	8005f8c <HAL_GetTick>
 80087e0:	4602      	mov	r2, r0
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d901      	bls.n	80087ee <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e012      	b.n	8008814 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087ee:	4b0b      	ldr	r3, [pc, #44]	; (800881c <HAL_RCC_ClockConfig+0x278>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 0307 	and.w	r3, r3, #7
 80087f6:	683a      	ldr	r2, [r7, #0]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d1ef      	bne.n	80087dc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80087fc:	f000 f87c 	bl	80088f8 <HAL_RCC_GetHCLKFreq>
 8008800:	4602      	mov	r2, r0
 8008802:	4b07      	ldr	r3, [pc, #28]	; (8008820 <HAL_RCC_ClockConfig+0x27c>)
 8008804:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8008806:	f7fd fbcd 	bl	8005fa4 <HAL_GetTickPrio>
 800880a:	4603      	mov	r3, r0
 800880c:	4618      	mov	r0, r3
 800880e:	f7fd f9ed 	bl	8005bec <HAL_InitTick>
 8008812:	4603      	mov	r3, r0
}
 8008814:	4618      	mov	r0, r3
 8008816:	3710      	adds	r7, #16
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	58004000 	.word	0x58004000
 8008820:	20000014 	.word	0x20000014

08008824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008824:	b590      	push	{r4, r7, lr}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800882a:	f7ff f9be 	bl	8007baa <LL_RCC_GetSysClkSource>
 800882e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d10a      	bne.n	800884c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008836:	f7ff f97a 	bl	8007b2e <LL_RCC_MSI_GetRange>
 800883a:	4603      	mov	r3, r0
 800883c:	091b      	lsrs	r3, r3, #4
 800883e:	f003 030f 	and.w	r3, r3, #15
 8008842:	4a2a      	ldr	r2, [pc, #168]	; (80088ec <HAL_RCC_GetSysClockFreq+0xc8>)
 8008844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008848:	60fb      	str	r3, [r7, #12]
 800884a:	e04a      	b.n	80088e2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2b04      	cmp	r3, #4
 8008850:	d102      	bne.n	8008858 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008852:	4b27      	ldr	r3, [pc, #156]	; (80088f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008854:	60fb      	str	r3, [r7, #12]
 8008856:	e044      	b.n	80088e2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b08      	cmp	r3, #8
 800885c:	d10a      	bne.n	8008874 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800885e:	f7fe ff93 	bl	8007788 <LL_RCC_HSE_IsEnabledDiv2>
 8008862:	4603      	mov	r3, r0
 8008864:	2b01      	cmp	r3, #1
 8008866:	d102      	bne.n	800886e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8008868:	4b21      	ldr	r3, [pc, #132]	; (80088f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800886a:	60fb      	str	r3, [r7, #12]
 800886c:	e039      	b.n	80088e2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800886e:	4b21      	ldr	r3, [pc, #132]	; (80088f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008870:	60fb      	str	r3, [r7, #12]
 8008872:	e036      	b.n	80088e2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008874:	f7ff faa2 	bl	8007dbc <LL_RCC_PLL_GetMainSource>
 8008878:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	2b02      	cmp	r3, #2
 800887e:	d002      	beq.n	8008886 <HAL_RCC_GetSysClockFreq+0x62>
 8008880:	2b03      	cmp	r3, #3
 8008882:	d003      	beq.n	800888c <HAL_RCC_GetSysClockFreq+0x68>
 8008884:	e00d      	b.n	80088a2 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8008886:	4b1a      	ldr	r3, [pc, #104]	; (80088f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008888:	60bb      	str	r3, [r7, #8]
        break;
 800888a:	e015      	b.n	80088b8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800888c:	f7fe ff7c 	bl	8007788 <LL_RCC_HSE_IsEnabledDiv2>
 8008890:	4603      	mov	r3, r0
 8008892:	2b01      	cmp	r3, #1
 8008894:	d102      	bne.n	800889c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8008896:	4b16      	ldr	r3, [pc, #88]	; (80088f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008898:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800889a:	e00d      	b.n	80088b8 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800889c:	4b15      	ldr	r3, [pc, #84]	; (80088f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800889e:	60bb      	str	r3, [r7, #8]
        break;
 80088a0:	e00a      	b.n	80088b8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80088a2:	f7ff f944 	bl	8007b2e <LL_RCC_MSI_GetRange>
 80088a6:	4603      	mov	r3, r0
 80088a8:	091b      	lsrs	r3, r3, #4
 80088aa:	f003 030f 	and.w	r3, r3, #15
 80088ae:	4a0f      	ldr	r2, [pc, #60]	; (80088ec <HAL_RCC_GetSysClockFreq+0xc8>)
 80088b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088b4:	60bb      	str	r3, [r7, #8]
        break;
 80088b6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80088b8:	f7ff fa5b 	bl	8007d72 <LL_RCC_PLL_GetN>
 80088bc:	4602      	mov	r2, r0
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	fb03 f402 	mul.w	r4, r3, r2
 80088c4:	f7ff fa6e 	bl	8007da4 <LL_RCC_PLL_GetDivider>
 80088c8:	4603      	mov	r3, r0
 80088ca:	091b      	lsrs	r3, r3, #4
 80088cc:	3301      	adds	r3, #1
 80088ce:	fbb4 f4f3 	udiv	r4, r4, r3
 80088d2:	f7ff fa5b 	bl	8007d8c <LL_RCC_PLL_GetR>
 80088d6:	4603      	mov	r3, r0
 80088d8:	0f5b      	lsrs	r3, r3, #29
 80088da:	3301      	adds	r3, #1
 80088dc:	fbb4 f3f3 	udiv	r3, r4, r3
 80088e0:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80088e2:	68fb      	ldr	r3, [r7, #12]
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd90      	pop	{r4, r7, pc}
 80088ec:	08017804 	.word	0x08017804
 80088f0:	00f42400 	.word	0x00f42400
 80088f4:	01e84800 	.word	0x01e84800

080088f8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088f8:	b598      	push	{r3, r4, r7, lr}
 80088fa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80088fc:	f7ff ff92 	bl	8008824 <HAL_RCC_GetSysClockFreq>
 8008900:	4604      	mov	r4, r0
 8008902:	f7ff f9c7 	bl	8007c94 <LL_RCC_GetAHBPrescaler>
 8008906:	4603      	mov	r3, r0
 8008908:	091b      	lsrs	r3, r3, #4
 800890a:	f003 030f 	and.w	r3, r3, #15
 800890e:	4a03      	ldr	r2, [pc, #12]	; (800891c <HAL_RCC_GetHCLKFreq+0x24>)
 8008910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008914:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8008918:	4618      	mov	r0, r3
 800891a:	bd98      	pop	{r3, r4, r7, pc}
 800891c:	080177a4 	.word	0x080177a4

08008920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008920:	b598      	push	{r3, r4, r7, lr}
 8008922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008924:	f7ff ffe8 	bl	80088f8 <HAL_RCC_GetHCLKFreq>
 8008928:	4604      	mov	r4, r0
 800892a:	f7ff f9da 	bl	8007ce2 <LL_RCC_GetAPB1Prescaler>
 800892e:	4603      	mov	r3, r0
 8008930:	0a1b      	lsrs	r3, r3, #8
 8008932:	f003 0307 	and.w	r3, r3, #7
 8008936:	4a04      	ldr	r2, [pc, #16]	; (8008948 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800893c:	f003 031f 	and.w	r3, r3, #31
 8008940:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008944:	4618      	mov	r0, r3
 8008946:	bd98      	pop	{r3, r4, r7, pc}
 8008948:	080177e4 	.word	0x080177e4

0800894c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800894c:	b598      	push	{r3, r4, r7, lr}
 800894e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8008950:	f7ff ffd2 	bl	80088f8 <HAL_RCC_GetHCLKFreq>
 8008954:	4604      	mov	r4, r0
 8008956:	f7ff f9d0 	bl	8007cfa <LL_RCC_GetAPB2Prescaler>
 800895a:	4603      	mov	r3, r0
 800895c:	0adb      	lsrs	r3, r3, #11
 800895e:	f003 0307 	and.w	r3, r3, #7
 8008962:	4a04      	ldr	r2, [pc, #16]	; (8008974 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008968:	f003 031f 	and.w	r3, r3, #31
 800896c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008970:	4618      	mov	r0, r3
 8008972:	bd98      	pop	{r3, r4, r7, pc}
 8008974:	080177e4 	.word	0x080177e4

08008978 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	226f      	movs	r2, #111	; 0x6f
 8008986:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8008988:	f7ff f90f 	bl	8007baa <LL_RCC_GetSysClkSource>
 800898c:	4602      	mov	r2, r0
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8008992:	f7ff f97f 	bl	8007c94 <LL_RCC_GetAHBPrescaler>
 8008996:	4602      	mov	r2, r0
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800899c:	f7ff f9a1 	bl	8007ce2 <LL_RCC_GetAPB1Prescaler>
 80089a0:	4602      	mov	r2, r0
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80089a6:	f7ff f9a8 	bl	8007cfa <LL_RCC_GetAPB2Prescaler>
 80089aa:	4602      	mov	r2, r0
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80089b0:	f7ff f97c 	bl	8007cac <LL_C2_RCC_GetAHBPrescaler>
 80089b4:	4602      	mov	r2, r0
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80089ba:	f7ff f984 	bl	8007cc6 <LL_RCC_GetAHB4Prescaler>
 80089be:	4602      	mov	r2, r0
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80089c4:	4b04      	ldr	r3, [pc, #16]	; (80089d8 <HAL_RCC_GetClockConfig+0x60>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 0207 	and.w	r2, r3, #7
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	601a      	str	r2, [r3, #0]
}
 80089d0:	bf00      	nop
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	58004000 	.word	0x58004000

080089dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80089dc:	b590      	push	{r4, r7, lr}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2bb0      	cmp	r3, #176	; 0xb0
 80089e8:	d903      	bls.n	80089f2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80089ea:	4b15      	ldr	r3, [pc, #84]	; (8008a40 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80089ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ee:	60fb      	str	r3, [r7, #12]
 80089f0:	e007      	b.n	8008a02 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	091b      	lsrs	r3, r3, #4
 80089f6:	f003 030f 	and.w	r3, r3, #15
 80089fa:	4a11      	ldr	r2, [pc, #68]	; (8008a40 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80089fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a00:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8008a02:	f7ff f960 	bl	8007cc6 <LL_RCC_GetAHB4Prescaler>
 8008a06:	4603      	mov	r3, r0
 8008a08:	091b      	lsrs	r3, r3, #4
 8008a0a:	f003 030f 	and.w	r3, r3, #15
 8008a0e:	4a0d      	ldr	r2, [pc, #52]	; (8008a44 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8008a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a1a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	4a0a      	ldr	r2, [pc, #40]	; (8008a48 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8008a20:	fba2 2303 	umull	r2, r3, r2, r3
 8008a24:	0c9c      	lsrs	r4, r3, #18
 8008a26:	f7fe fea1 	bl	800776c <HAL_PWREx_GetVoltageRange>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f000 f80c 	bl	8008a4c <RCC_SetFlashLatency>
 8008a34:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3714      	adds	r7, #20
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd90      	pop	{r4, r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	08017804 	.word	0x08017804
 8008a44:	080177a4 	.word	0x080177a4
 8008a48:	431bde83 	.word	0x431bde83

08008a4c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8008a4c:	b590      	push	{r4, r7, lr}
 8008a4e:	b093      	sub	sp, #76	; 0x4c
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8008a56:	4b39      	ldr	r3, [pc, #228]	; (8008b3c <RCC_SetFlashLatency+0xf0>)
 8008a58:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8008a5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008a5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8008a62:	4a37      	ldr	r2, [pc, #220]	; (8008b40 <RCC_SetFlashLatency+0xf4>)
 8008a64:	f107 031c 	add.w	r3, r7, #28
 8008a68:	ca07      	ldmia	r2, {r0, r1, r2}
 8008a6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8008a6e:	4b35      	ldr	r3, [pc, #212]	; (8008b44 <RCC_SetFlashLatency+0xf8>)
 8008a70:	f107 040c 	add.w	r4, r7, #12
 8008a74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008a76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a84:	d11c      	bne.n	8008ac0 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008a86:	2300      	movs	r3, #0
 8008a88:	643b      	str	r3, [r7, #64]	; 0x40
 8008a8a:	e015      	b.n	8008ab8 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8008a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008a94:	4413      	add	r3, r2
 8008a96:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d808      	bhi.n	8008ab2 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008aa8:	4413      	add	r3, r2
 8008aaa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008aae:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8008ab0:	e022      	b.n	8008af8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	643b      	str	r3, [r7, #64]	; 0x40
 8008ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aba:	2b03      	cmp	r3, #3
 8008abc:	d9e6      	bls.n	8008a8c <RCC_SetFlashLatency+0x40>
 8008abe:	e01b      	b.n	8008af8 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ac4:	e015      	b.n	8008af2 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8008ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008ace:	4413      	add	r3, r2
 8008ad0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d808      	bhi.n	8008aec <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008ae2:	4413      	add	r3, r2
 8008ae4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008ae8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8008aea:	e005      	b.n	8008af8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aee:	3301      	adds	r3, #1
 8008af0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d9e6      	bls.n	8008ac6 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8008af8:	4b13      	ldr	r3, [pc, #76]	; (8008b48 <RCC_SetFlashLatency+0xfc>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f023 0207 	bic.w	r2, r3, #7
 8008b00:	4911      	ldr	r1, [pc, #68]	; (8008b48 <RCC_SetFlashLatency+0xfc>)
 8008b02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b04:	4313      	orrs	r3, r2
 8008b06:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008b08:	f7fd fa40 	bl	8005f8c <HAL_GetTick>
 8008b0c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008b0e:	e008      	b.n	8008b22 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008b10:	f7fd fa3c 	bl	8005f8c <HAL_GetTick>
 8008b14:	4602      	mov	r2, r0
 8008b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	d901      	bls.n	8008b22 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8008b1e:	2303      	movs	r3, #3
 8008b20:	e007      	b.n	8008b32 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008b22:	4b09      	ldr	r3, [pc, #36]	; (8008b48 <RCC_SetFlashLatency+0xfc>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f003 0307 	and.w	r3, r3, #7
 8008b2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d1ef      	bne.n	8008b10 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	374c      	adds	r7, #76	; 0x4c
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd90      	pop	{r4, r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	080163c4 	.word	0x080163c4
 8008b40:	080163d4 	.word	0x080163d4
 8008b44:	080163e0 	.word	0x080163e0
 8008b48:	58004000 	.word	0x58004000

08008b4c <LL_RCC_LSE_IsEnabled>:
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8008b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b58:	f003 0301 	and.w	r3, r3, #1
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d101      	bne.n	8008b64 <LL_RCC_LSE_IsEnabled+0x18>
 8008b60:	2301      	movs	r3, #1
 8008b62:	e000      	b.n	8008b66 <LL_RCC_LSE_IsEnabled+0x1a>
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <LL_RCC_LSE_IsReady>:
{
 8008b70:	b480      	push	{r7}
 8008b72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b7c:	f003 0302 	and.w	r3, r3, #2
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d101      	bne.n	8008b88 <LL_RCC_LSE_IsReady+0x18>
 8008b84:	2301      	movs	r3, #1
 8008b86:	e000      	b.n	8008b8a <LL_RCC_LSE_IsReady+0x1a>
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <LL_RCC_SetRFWKPClockSource>:
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8008b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ba4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008ba8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8008bb4:	bf00      	nop
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <LL_RCC_SetSMPSClockSource>:
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8008bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bce:	f023 0203 	bic.w	r2, r3, #3
 8008bd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008bdc:	bf00      	nop
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <LL_RCC_SetSMPSPrescaler>:
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8008bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008bfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <LL_RCC_SetUSARTClockSource>:
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8008c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c20:	f023 0203 	bic.w	r2, r3, #3
 8008c24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <LL_RCC_SetLPUARTClockSource>:
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008c50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008c5c:	bf00      	nop
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <LL_RCC_SetI2CClockSource>:
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	091b      	lsrs	r3, r3, #4
 8008c7c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008c80:	43db      	mvns	r3, r3
 8008c82:	401a      	ands	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	011b      	lsls	r3, r3, #4
 8008c88:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008c8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008c90:	4313      	orrs	r3, r2
 8008c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008c96:	bf00      	nop
 8008c98:	370c      	adds	r7, #12
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <LL_RCC_SetLPTIMClockSource>:
{
 8008ca2:	b480      	push	{r7}
 8008ca4:	b083      	sub	sp, #12
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8008caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	0c1b      	lsrs	r3, r3, #16
 8008cb6:	041b      	lsls	r3, r3, #16
 8008cb8:	43db      	mvns	r3, r3
 8008cba:	401a      	ands	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	041b      	lsls	r3, r3, #16
 8008cc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008cca:	bf00      	nop
 8008ccc:	370c      	adds	r7, #12
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr

08008cd6 <LL_RCC_SetSAIClockSource>:
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	b083      	sub	sp, #12
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8008cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ce6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008cea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008cf6:	bf00      	nop
 8008cf8:	370c      	adds	r7, #12
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <LL_RCC_SetRNGClockSource>:
{
 8008d02:	b480      	push	{r7}
 8008d04:	b083      	sub	sp, #12
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d12:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008d16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008d22:	bf00      	nop
 8008d24:	370c      	adds	r7, #12
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr

08008d2e <LL_RCC_SetCLK48ClockSource>:
{
 8008d2e:	b480      	push	{r7}
 8008d30:	b083      	sub	sp, #12
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8008d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008d42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008d4e:	bf00      	nop
 8008d50:	370c      	adds	r7, #12
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <LL_RCC_SetUSBClockSource>:
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b082      	sub	sp, #8
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7ff ffe3 	bl	8008d2e <LL_RCC_SetCLK48ClockSource>
}
 8008d68:	bf00      	nop
 8008d6a:	3708      	adds	r7, #8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <LL_RCC_SetADCClockSource>:
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8008d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d80:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008d84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008d90:	bf00      	nop
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <LL_RCC_SetRTCClockSource>:
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008db0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008dbc:	bf00      	nop
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <LL_RCC_GetRTCClockSource>:
{
 8008dc8:	b480      	push	{r7}
 8008dca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8008dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr

08008de2 <LL_RCC_ForceBackupDomainReset>:
{
 8008de2:	b480      	push	{r7}
 8008de4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008df6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008dfa:	bf00      	nop
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <LL_RCC_ReleaseBackupDomainReset>:
{
 8008e04:	b480      	push	{r7}
 8008e06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008e1c:	bf00      	nop
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr

08008e26 <LL_RCC_PLLSAI1_Enable>:
{
 8008e26:	b480      	push	{r7}
 8008e28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008e38:	6013      	str	r3, [r2, #0]
}
 8008e3a:	bf00      	nop
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <LL_RCC_PLLSAI1_Disable>:
{
 8008e44:	b480      	push	{r7}
 8008e46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e56:	6013      	str	r3, [r2, #0]
}
 8008e58:	bf00      	nop
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr

08008e62 <LL_RCC_PLLSAI1_IsReady>:
{
 8008e62:	b480      	push	{r7}
 8008e64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8008e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e74:	d101      	bne.n	8008e7a <LL_RCC_PLLSAI1_IsReady+0x18>
 8008e76:	2301      	movs	r3, #1
 8008e78:	e000      	b.n	8008e7c <LL_RCC_PLLSAI1_IsReady+0x1a>
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr

08008e86 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b088      	sub	sp, #32
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8008e8e:	2300      	movs	r3, #0
 8008e90:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8008e92:	2300      	movs	r3, #0
 8008e94:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d033      	beq.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008eaa:	d00c      	beq.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8008eac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008eb0:	d802      	bhi.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d010      	beq.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008eb6:	e017      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8008eb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ebc:	d017      	beq.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x68>
 8008ebe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008ec2:	d016      	beq.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8008ec4:	e010      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8008ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ed4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8008ed6:	e00d      	b.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	3304      	adds	r3, #4
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 f947 	bl	8009170 <RCCEx_PLLSAI1_ConfigNP>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008ee6:	e005      	b.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	77fb      	strb	r3, [r7, #31]
        break;
 8008eec:	e002      	b.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8008eee:	bf00      	nop
 8008ef0:	e000      	b.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8008ef2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ef4:	7ffb      	ldrb	r3, [r7, #31]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d105      	bne.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7ff fee9 	bl	8008cd6 <LL_RCC_SetSAIClockSource>
 8008f04:	e001      	b.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f06:	7ffb      	ldrb	r3, [r7, #31]
 8008f08:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d046      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8008f16:	f7ff ff57 	bl	8008dc8 <LL_RCC_GetRTCClockSource>
 8008f1a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f20:	69ba      	ldr	r2, [r7, #24]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d03c      	beq.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008f26:	f7fe fc11 	bl	800774c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d105      	bne.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7ff ff31 	bl	8008d9c <LL_RCC_SetRTCClockSource>
 8008f3a:	e02e      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8008f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f44:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8008f46:	f7ff ff4c 	bl	8008de2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8008f4a:	f7ff ff5b 	bl	8008e04 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8008f5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8008f66:	f7ff fdf1 	bl	8008b4c <LL_RCC_LSE_IsEnabled>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d114      	bne.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008f70:	f7fd f80c 	bl	8005f8c <HAL_GetTick>
 8008f74:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8008f76:	e00b      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f78:	f7fd f808 	bl	8005f8c <HAL_GetTick>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d902      	bls.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	77fb      	strb	r3, [r7, #31]
              break;
 8008f8e:	e004      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8008f90:	f7ff fdee 	bl	8008b70 <LL_RCC_LSE_IsReady>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d1ee      	bne.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8008f9a:	7ffb      	ldrb	r3, [r7, #31]
 8008f9c:	77bb      	strb	r3, [r7, #30]
 8008f9e:	e001      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fa0:	7ffb      	ldrb	r3, [r7, #31]
 8008fa2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f003 0301 	and.w	r3, r3, #1
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d004      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	699b      	ldr	r3, [r3, #24]
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7ff fe2b 	bl	8008c10 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f003 0302 	and.w	r3, r3, #2
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d004      	beq.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	69db      	ldr	r3, [r3, #28]
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7ff fe36 	bl	8008c3c <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 0310 	and.w	r3, r3, #16
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d004      	beq.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7ff fe5e 	bl	8008ca2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f003 0320 	and.w	r3, r3, #32
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d004      	beq.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7ff fe53 	bl	8008ca2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 0304 	and.w	r3, r3, #4
 8009004:	2b00      	cmp	r3, #0
 8009006:	d004      	beq.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6a1b      	ldr	r3, [r3, #32]
 800900c:	4618      	mov	r0, r3
 800900e:	f7ff fe2b 	bl	8008c68 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f003 0308 	and.w	r3, r3, #8
 800901a:	2b00      	cmp	r3, #0
 800901c:	d004      	beq.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009022:	4618      	mov	r0, r3
 8009024:	f7ff fe20 	bl	8008c68 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009030:	2b00      	cmp	r3, #0
 8009032:	d022      	beq.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009038:	4618      	mov	r0, r3
 800903a:	f7ff fe8e 	bl	8008d5a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009042:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009046:	d107      	bne.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8009048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009056:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800905c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009060:	d10b      	bne.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	3304      	adds	r3, #4
 8009066:	4618      	mov	r0, r3
 8009068:	f000 f8dd 	bl	8009226 <RCCEx_PLLSAI1_ConfigNQ>
 800906c:	4603      	mov	r3, r0
 800906e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8009070:	7ffb      	ldrb	r3, [r7, #31]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d001      	beq.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8009076:	7ffb      	ldrb	r3, [r7, #31]
 8009078:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009082:	2b00      	cmp	r3, #0
 8009084:	d02b      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800908e:	d008      	beq.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009094:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009098:	d003      	beq.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d105      	bne.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x228>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7ff fe2b 	bl	8008d02 <LL_RCC_SetRNGClockSource>
 80090ac:	e00a      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090b6:	60fb      	str	r3, [r7, #12]
 80090b8:	2000      	movs	r0, #0
 80090ba:	f7ff fe22 	bl	8008d02 <LL_RCC_SetRNGClockSource>
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	f7ff fe35 	bl	8008d2e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80090cc:	d107      	bne.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80090ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80090d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80090dc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d022      	beq.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7ff fe3e 	bl	8008d70 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090fc:	d107      	bne.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80090fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800910c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009112:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009116:	d10b      	bne.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	3304      	adds	r3, #4
 800911c:	4618      	mov	r0, r3
 800911e:	f000 f8dd 	bl	80092dc <RCCEx_PLLSAI1_ConfigNR>
 8009122:	4603      	mov	r3, r0
 8009124:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8009126:	7ffb      	ldrb	r3, [r7, #31]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d001      	beq.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 800912c:	7ffb      	ldrb	r3, [r7, #31]
 800912e:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009138:	2b00      	cmp	r3, #0
 800913a:	d004      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009140:	4618      	mov	r0, r3
 8009142:	f7ff fd27 	bl	8008b94 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800914e:	2b00      	cmp	r3, #0
 8009150:	d009      	beq.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009156:	4618      	mov	r0, r3
 8009158:	f7ff fd46 	bl	8008be8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009160:	4618      	mov	r0, r3
 8009162:	f7ff fd2d 	bl	8008bc0 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8009166:	7fbb      	ldrb	r3, [r7, #30]
}
 8009168:	4618      	mov	r0, r3
 800916a:	3720      	adds	r7, #32
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009178:	2300      	movs	r3, #0
 800917a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800917c:	f7ff fe62 	bl	8008e44 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009180:	f7fc ff04 	bl	8005f8c <HAL_GetTick>
 8009184:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009186:	e009      	b.n	800919c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009188:	f7fc ff00 	bl	8005f8c <HAL_GetTick>
 800918c:	4602      	mov	r2, r0
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	1ad3      	subs	r3, r2, r3
 8009192:	2b02      	cmp	r3, #2
 8009194:	d902      	bls.n	800919c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8009196:	2303      	movs	r3, #3
 8009198:	73fb      	strb	r3, [r7, #15]
      break;
 800919a:	e004      	b.n	80091a6 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800919c:	f7ff fe61 	bl	8008e62 <LL_RCC_PLLSAI1_IsReady>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d1f0      	bne.n	8009188 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80091a6:	7bfb      	ldrb	r3, [r7, #15]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d137      	bne.n	800921c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80091ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	021b      	lsls	r3, r3, #8
 80091bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80091c0:	4313      	orrs	r3, r2
 80091c2:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80091c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80091d6:	4313      	orrs	r3, r2
 80091d8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80091da:	f7ff fe24 	bl	8008e26 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091de:	f7fc fed5 	bl	8005f8c <HAL_GetTick>
 80091e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80091e4:	e009      	b.n	80091fa <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80091e6:	f7fc fed1 	bl	8005f8c <HAL_GetTick>
 80091ea:	4602      	mov	r2, r0
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	1ad3      	subs	r3, r2, r3
 80091f0:	2b02      	cmp	r3, #2
 80091f2:	d902      	bls.n	80091fa <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80091f4:	2303      	movs	r3, #3
 80091f6:	73fb      	strb	r3, [r7, #15]
        break;
 80091f8:	e004      	b.n	8009204 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80091fa:	f7ff fe32 	bl	8008e62 <LL_RCC_PLLSAI1_IsReady>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b01      	cmp	r3, #1
 8009202:	d1f0      	bne.n	80091e6 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8009204:	7bfb      	ldrb	r3, [r7, #15]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d108      	bne.n	800921c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800920a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800920e:	691a      	ldr	r2, [r3, #16]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009218:	4313      	orrs	r3, r2
 800921a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800921c:	7bfb      	ldrb	r3, [r7, #15]
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b084      	sub	sp, #16
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800922e:	2300      	movs	r3, #0
 8009230:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009232:	f7ff fe07 	bl	8008e44 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009236:	f7fc fea9 	bl	8005f8c <HAL_GetTick>
 800923a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800923c:	e009      	b.n	8009252 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800923e:	f7fc fea5 	bl	8005f8c <HAL_GetTick>
 8009242:	4602      	mov	r2, r0
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	1ad3      	subs	r3, r2, r3
 8009248:	2b02      	cmp	r3, #2
 800924a:	d902      	bls.n	8009252 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800924c:	2303      	movs	r3, #3
 800924e:	73fb      	strb	r3, [r7, #15]
      break;
 8009250:	e004      	b.n	800925c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009252:	f7ff fe06 	bl	8008e62 <LL_RCC_PLLSAI1_IsReady>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	d1f0      	bne.n	800923e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800925c:	7bfb      	ldrb	r3, [r7, #15]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d137      	bne.n	80092d2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	021b      	lsls	r3, r3, #8
 8009272:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009276:	4313      	orrs	r3, r2
 8009278:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800927a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800928c:	4313      	orrs	r3, r2
 800928e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009290:	f7ff fdc9 	bl	8008e26 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009294:	f7fc fe7a 	bl	8005f8c <HAL_GetTick>
 8009298:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800929a:	e009      	b.n	80092b0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800929c:	f7fc fe76 	bl	8005f8c <HAL_GetTick>
 80092a0:	4602      	mov	r2, r0
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	d902      	bls.n	80092b0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80092aa:	2303      	movs	r3, #3
 80092ac:	73fb      	strb	r3, [r7, #15]
        break;
 80092ae:	e004      	b.n	80092ba <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80092b0:	f7ff fdd7 	bl	8008e62 <LL_RCC_PLLSAI1_IsReady>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d1f0      	bne.n	800929c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80092ba:	7bfb      	ldrb	r3, [r7, #15]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d108      	bne.n	80092d2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80092c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092c4:	691a      	ldr	r2, [r3, #16]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	691b      	ldr	r3, [r3, #16]
 80092ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80092ce:	4313      	orrs	r3, r2
 80092d0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80092d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80092e4:	2300      	movs	r3, #0
 80092e6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80092e8:	f7ff fdac 	bl	8008e44 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80092ec:	f7fc fe4e 	bl	8005f8c <HAL_GetTick>
 80092f0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80092f2:	e009      	b.n	8009308 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80092f4:	f7fc fe4a 	bl	8005f8c <HAL_GetTick>
 80092f8:	4602      	mov	r2, r0
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	2b02      	cmp	r3, #2
 8009300:	d902      	bls.n	8009308 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8009302:	2303      	movs	r3, #3
 8009304:	73fb      	strb	r3, [r7, #15]
      break;
 8009306:	e004      	b.n	8009312 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009308:	f7ff fdab 	bl	8008e62 <LL_RCC_PLLSAI1_IsReady>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1f0      	bne.n	80092f4 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8009312:	7bfb      	ldrb	r3, [r7, #15]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d137      	bne.n	8009388 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	021b      	lsls	r3, r3, #8
 8009328:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800932c:	4313      	orrs	r3, r2
 800932e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8009330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009342:	4313      	orrs	r3, r2
 8009344:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009346:	f7ff fd6e 	bl	8008e26 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800934a:	f7fc fe1f 	bl	8005f8c <HAL_GetTick>
 800934e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009350:	e009      	b.n	8009366 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009352:	f7fc fe1b 	bl	8005f8c <HAL_GetTick>
 8009356:	4602      	mov	r2, r0
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	1ad3      	subs	r3, r2, r3
 800935c:	2b02      	cmp	r3, #2
 800935e:	d902      	bls.n	8009366 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8009360:	2303      	movs	r3, #3
 8009362:	73fb      	strb	r3, [r7, #15]
        break;
 8009364:	e004      	b.n	8009370 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009366:	f7ff fd7c 	bl	8008e62 <LL_RCC_PLLSAI1_IsReady>
 800936a:	4603      	mov	r3, r0
 800936c:	2b01      	cmp	r3, #1
 800936e:	d1f0      	bne.n	8009352 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8009370:	7bfb      	ldrb	r3, [r7, #15]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d108      	bne.n	8009388 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800937a:	691a      	ldr	r2, [r3, #16]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	691b      	ldr	r3, [r3, #16]
 8009380:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009384:	4313      	orrs	r3, r2
 8009386:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009388:	7bfb      	ldrb	r3, [r7, #15]
}
 800938a:	4618      	mov	r0, r3
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009392:	b580      	push	{r7, lr}
 8009394:	b082      	sub	sp, #8
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d101      	bne.n	80093a4 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80093a0:	2301      	movs	r3, #1
 80093a2:	e090      	b.n	80094c6 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d106      	bne.n	80093be <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f7fc fb33 	bl	8005a24 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2202      	movs	r2, #2
 80093c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	22ca      	movs	r2, #202	; 0xca
 80093cc:	625a      	str	r2, [r3, #36]	; 0x24
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2253      	movs	r2, #83	; 0x53
 80093d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 faba 	bl	8009950 <RTC_EnterInitMode>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d009      	beq.n	80093f6 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	22ff      	movs	r2, #255	; 0xff
 80093e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2204      	movs	r2, #4
 80093ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	e067      	b.n	80094c6 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	6812      	ldr	r2, [r2, #0]
 8009400:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009408:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	6899      	ldr	r1, [r3, #8]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	685a      	ldr	r2, [r3, #4]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	431a      	orrs	r2, r3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	699b      	ldr	r3, [r3, #24]
 800941e:	431a      	orrs	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	430a      	orrs	r2, r1
 8009426:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	68d2      	ldr	r2, [r2, #12]
 8009430:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	6919      	ldr	r1, [r3, #16]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	041a      	lsls	r2, r3, #16
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	430a      	orrs	r2, r1
 8009444:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68da      	ldr	r2, [r3, #12]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009454:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f022 0203 	bic.w	r2, r2, #3
 8009464:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	69da      	ldr	r2, [r3, #28]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	695b      	ldr	r3, [r3, #20]
 8009474:	431a      	orrs	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	430a      	orrs	r2, r1
 800947c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	f003 0320 	and.w	r3, r3, #32
 8009488:	2b00      	cmp	r3, #0
 800948a:	d113      	bne.n	80094b4 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 fa39 	bl	8009904 <HAL_RTC_WaitForSynchro>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d00d      	beq.n	80094b4 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	22ff      	movs	r2, #255	; 0xff
 800949e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2204      	movs	r2, #4
 80094a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	e008      	b.n	80094c6 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	22ff      	movs	r2, #255	; 0xff
 80094ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 80094c4:	2300      	movs	r3, #0
  }
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80094ce:	b590      	push	{r4, r7, lr}
 80094d0:	b087      	sub	sp, #28
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	60f8      	str	r0, [r7, #12]
 80094d6:	60b9      	str	r1, [r7, #8]
 80094d8:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d101      	bne.n	80094e8 <HAL_RTC_SetTime+0x1a>
 80094e4:	2302      	movs	r3, #2
 80094e6:	e0b2      	b.n	800964e <HAL_RTC_SetTime+0x180>
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2202      	movs	r2, #2
 80094f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d126      	bne.n	800954c <HAL_RTC_SetTime+0x7e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009508:	2b00      	cmp	r3, #0
 800950a:	d102      	bne.n	8009512 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	2200      	movs	r2, #0
 8009510:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	4618      	mov	r0, r3
 8009518:	f000 fa44 	bl	80099a4 <RTC_ByteToBcd2>
 800951c:	4603      	mov	r3, r0
 800951e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	785b      	ldrb	r3, [r3, #1]
 8009524:	4618      	mov	r0, r3
 8009526:	f000 fa3d 	bl	80099a4 <RTC_ByteToBcd2>
 800952a:	4603      	mov	r3, r0
 800952c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800952e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	789b      	ldrb	r3, [r3, #2]
 8009534:	4618      	mov	r0, r3
 8009536:	f000 fa35 	bl	80099a4 <RTC_ByteToBcd2>
 800953a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800953c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	78db      	ldrb	r3, [r3, #3]
 8009544:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009546:	4313      	orrs	r3, r2
 8009548:	617b      	str	r3, [r7, #20]
 800954a:	e018      	b.n	800957e <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009556:	2b00      	cmp	r3, #0
 8009558:	d102      	bne.n	8009560 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	2200      	movs	r2, #0
 800955e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	785b      	ldrb	r3, [r3, #1]
 800956a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800956c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800956e:	68ba      	ldr	r2, [r7, #8]
 8009570:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009572:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	78db      	ldrb	r3, [r3, #3]
 8009578:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800957a:	4313      	orrs	r3, r2
 800957c:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	22ca      	movs	r2, #202	; 0xca
 8009584:	625a      	str	r2, [r3, #36]	; 0x24
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2253      	movs	r2, #83	; 0x53
 800958c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	f000 f9de 	bl	8009950 <RTC_EnterInitMode>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00d      	beq.n	80095b6 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	22ff      	movs	r2, #255	; 0xff
 80095a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2204      	movs	r2, #4
 80095a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	e04b      	b.n	800964e <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80095c0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80095c4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	689a      	ldr	r2, [r3, #8]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80095d4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	6899      	ldr	r1, [r3, #8]
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	68da      	ldr	r2, [r3, #12]
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	431a      	orrs	r2, r3
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	430a      	orrs	r2, r1
 80095ec:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68da      	ldr	r2, [r3, #12]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80095fc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	f003 0320 	and.w	r3, r3, #32
 8009608:	2b00      	cmp	r3, #0
 800960a:	d113      	bne.n	8009634 <HAL_RTC_SetTime+0x166>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f000 f979 	bl	8009904 <HAL_RTC_WaitForSynchro>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00d      	beq.n	8009634 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	22ff      	movs	r2, #255	; 0xff
 800961e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2204      	movs	r2, #4
 8009624:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	e00c      	b.n	800964e <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	22ff      	movs	r2, #255	; 0xff
 800963a:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 800964c:	2300      	movs	r3, #0
  }
}
 800964e:	4618      	mov	r0, r3
 8009650:	371c      	adds	r7, #28
 8009652:	46bd      	mov	sp, r7
 8009654:	bd90      	pop	{r4, r7, pc}

08009656 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b086      	sub	sp, #24
 800965a:	af00      	add	r7, sp, #0
 800965c:	60f8      	str	r0, [r7, #12]
 800965e:	60b9      	str	r1, [r7, #8]
 8009660:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	691b      	ldr	r3, [r3, #16]
 8009672:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009684:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009688:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	0c1b      	lsrs	r3, r3, #16
 800968e:	b2db      	uxtb	r3, r3
 8009690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009694:	b2da      	uxtb	r2, r3
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	0a1b      	lsrs	r3, r3, #8
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096a4:	b2da      	uxtb	r2, r3
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096b2:	b2da      	uxtb	r2, r3
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	0c1b      	lsrs	r3, r3, #16
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096c2:	b2da      	uxtb	r2, r3
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d11a      	bne.n	8009704 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f000 f986 	bl	80099e4 <RTC_Bcd2ToByte>
 80096d8:	4603      	mov	r3, r0
 80096da:	461a      	mov	r2, r3
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	785b      	ldrb	r3, [r3, #1]
 80096e4:	4618      	mov	r0, r3
 80096e6:	f000 f97d 	bl	80099e4 <RTC_Bcd2ToByte>
 80096ea:	4603      	mov	r3, r0
 80096ec:	461a      	mov	r2, r3
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	789b      	ldrb	r3, [r3, #2]
 80096f6:	4618      	mov	r0, r3
 80096f8:	f000 f974 	bl	80099e4 <RTC_Bcd2ToByte>
 80096fc:	4603      	mov	r3, r0
 80096fe:	461a      	mov	r2, r3
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3718      	adds	r7, #24
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800970e:	b590      	push	{r4, r7, lr}
 8009710:	b087      	sub	sp, #28
 8009712:	af00      	add	r7, sp, #0
 8009714:	60f8      	str	r0, [r7, #12]
 8009716:	60b9      	str	r1, [r7, #8]
 8009718:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009720:	2b01      	cmp	r3, #1
 8009722:	d101      	bne.n	8009728 <HAL_RTC_SetDate+0x1a>
 8009724:	2302      	movs	r3, #2
 8009726:	e09c      	b.n	8009862 <HAL_RTC_SetDate+0x154>
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2202      	movs	r2, #2
 8009734:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d10e      	bne.n	800975c <HAL_RTC_SetDate+0x4e>
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	785b      	ldrb	r3, [r3, #1]
 8009742:	f003 0310 	and.w	r3, r3, #16
 8009746:	2b00      	cmp	r3, #0
 8009748:	d008      	beq.n	800975c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	785b      	ldrb	r3, [r3, #1]
 800974e:	f023 0310 	bic.w	r3, r3, #16
 8009752:	b2db      	uxtb	r3, r3
 8009754:	330a      	adds	r3, #10
 8009756:	b2da      	uxtb	r2, r3
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d11c      	bne.n	800979c <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	78db      	ldrb	r3, [r3, #3]
 8009766:	4618      	mov	r0, r3
 8009768:	f000 f91c 	bl	80099a4 <RTC_ByteToBcd2>
 800976c:	4603      	mov	r3, r0
 800976e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	785b      	ldrb	r3, [r3, #1]
 8009774:	4618      	mov	r0, r3
 8009776:	f000 f915 	bl	80099a4 <RTC_ByteToBcd2>
 800977a:	4603      	mov	r3, r0
 800977c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800977e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	789b      	ldrb	r3, [r3, #2]
 8009784:	4618      	mov	r0, r3
 8009786:	f000 f90d 	bl	80099a4 <RTC_ByteToBcd2>
 800978a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800978c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009796:	4313      	orrs	r3, r2
 8009798:	617b      	str	r3, [r7, #20]
 800979a:	e00e      	b.n	80097ba <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	78db      	ldrb	r3, [r3, #3]
 80097a0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	785b      	ldrb	r3, [r3, #1]
 80097a6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80097a8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80097aa:	68ba      	ldr	r2, [r7, #8]
 80097ac:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80097ae:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80097b6:	4313      	orrs	r3, r2
 80097b8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	22ca      	movs	r2, #202	; 0xca
 80097c0:	625a      	str	r2, [r3, #36]	; 0x24
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2253      	movs	r2, #83	; 0x53
 80097c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80097ca:	68f8      	ldr	r0, [r7, #12]
 80097cc:	f000 f8c0 	bl	8009950 <RTC_EnterInitMode>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d00d      	beq.n	80097f2 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	22ff      	movs	r2, #255	; 0xff
 80097dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2204      	movs	r2, #4
 80097e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	e037      	b.n	8009862 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80097fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009800:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	68da      	ldr	r2, [r3, #12]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009810:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	f003 0320 	and.w	r3, r3, #32
 800981c:	2b00      	cmp	r3, #0
 800981e:	d113      	bne.n	8009848 <HAL_RTC_SetDate+0x13a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009820:	68f8      	ldr	r0, [r7, #12]
 8009822:	f000 f86f 	bl	8009904 <HAL_RTC_WaitForSynchro>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00d      	beq.n	8009848 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	22ff      	movs	r2, #255	; 0xff
 8009832:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2204      	movs	r2, #4
 8009838:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2200      	movs	r2, #0
 8009840:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	e00c      	b.n	8009862 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	22ff      	movs	r2, #255	; 0xff
 800984e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2201      	movs	r2, #1
 8009854:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2200      	movs	r2, #0
 800985c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8009860:	2300      	movs	r3, #0
  }
}
 8009862:	4618      	mov	r0, r3
 8009864:	371c      	adds	r7, #28
 8009866:	46bd      	mov	sp, r7
 8009868:	bd90      	pop	{r4, r7, pc}

0800986a <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b086      	sub	sp, #24
 800986e:	af00      	add	r7, sp, #0
 8009870:	60f8      	str	r0, [r7, #12]
 8009872:	60b9      	str	r1, [r7, #8]
 8009874:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009880:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009884:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	0c1b      	lsrs	r3, r3, #16
 800988a:	b2da      	uxtb	r2, r3
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	0a1b      	lsrs	r3, r3, #8
 8009894:	b2db      	uxtb	r3, r3
 8009896:	f003 031f 	and.w	r3, r3, #31
 800989a:	b2da      	uxtb	r2, r3
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098a8:	b2da      	uxtb	r2, r3
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	0b5b      	lsrs	r3, r3, #13
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	f003 0307 	and.w	r3, r3, #7
 80098b8:	b2da      	uxtb	r2, r3
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d11a      	bne.n	80098fa <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	78db      	ldrb	r3, [r3, #3]
 80098c8:	4618      	mov	r0, r3
 80098ca:	f000 f88b 	bl	80099e4 <RTC_Bcd2ToByte>
 80098ce:	4603      	mov	r3, r0
 80098d0:	461a      	mov	r2, r3
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	785b      	ldrb	r3, [r3, #1]
 80098da:	4618      	mov	r0, r3
 80098dc:	f000 f882 	bl	80099e4 <RTC_Bcd2ToByte>
 80098e0:	4603      	mov	r3, r0
 80098e2:	461a      	mov	r2, r3
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	789b      	ldrb	r3, [r3, #2]
 80098ec:	4618      	mov	r0, r3
 80098ee:	f000 f879 	bl	80099e4 <RTC_Bcd2ToByte>
 80098f2:	4603      	mov	r3, r0
 80098f4:	461a      	mov	r2, r3
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80098fa:	2300      	movs	r3, #0
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3718      	adds	r7, #24
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	68da      	ldr	r2, [r3, #12]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800991a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800991c:	f7fc fb36 	bl	8005f8c <HAL_GetTick>
 8009920:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009922:	e009      	b.n	8009938 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009924:	f7fc fb32 	bl	8005f8c <HAL_GetTick>
 8009928:	4602      	mov	r2, r0
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	1ad3      	subs	r3, r2, r3
 800992e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009932:	d901      	bls.n	8009938 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009934:	2303      	movs	r3, #3
 8009936:	e007      	b.n	8009948 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	f003 0320 	and.w	r3, r3, #32
 8009942:	2b00      	cmp	r3, #0
 8009944:	d0ee      	beq.n	8009924 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	3710      	adds	r7, #16
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009962:	2b00      	cmp	r3, #0
 8009964:	d119      	bne.n	800999a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f04f 32ff 	mov.w	r2, #4294967295
 800996e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009970:	f7fc fb0c 	bl	8005f8c <HAL_GetTick>
 8009974:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009976:	e009      	b.n	800998c <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8009978:	f7fc fb08 	bl	8005f8c <HAL_GetTick>
 800997c:	4602      	mov	r2, r0
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	1ad3      	subs	r3, r2, r3
 8009982:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009986:	d901      	bls.n	800998c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8009988:	2303      	movs	r3, #3
 800998a:	e007      	b.n	800999c <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009996:	2b00      	cmp	r3, #0
 8009998:	d0ee      	beq.n	8009978 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3710      	adds	r7, #16
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	4603      	mov	r3, r0
 80099ac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80099ae:	2300      	movs	r3, #0
 80099b0:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80099b2:	79fb      	ldrb	r3, [r7, #7]
 80099b4:	72fb      	strb	r3, [r7, #11]

  while(Param >= 10U)
 80099b6:	e005      	b.n	80099c4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	3301      	adds	r3, #1
 80099bc:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80099be:	7afb      	ldrb	r3, [r7, #11]
 80099c0:	3b0a      	subs	r3, #10
 80099c2:	72fb      	strb	r3, [r7, #11]
  while(Param >= 10U)
 80099c4:	7afb      	ldrb	r3, [r7, #11]
 80099c6:	2b09      	cmp	r3, #9
 80099c8:	d8f6      	bhi.n	80099b8 <RTC_ByteToBcd2+0x14>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	011b      	lsls	r3, r3, #4
 80099d0:	b2da      	uxtb	r2, r3
 80099d2:	7afb      	ldrb	r3, [r7, #11]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	b2db      	uxtb	r3, r3
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3714      	adds	r7, #20
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b085      	sub	sp, #20
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	4603      	mov	r3, r0
 80099ec:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80099ee:	79fb      	ldrb	r3, [r7, #7]
 80099f0:	091b      	lsrs	r3, r3, #4
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	461a      	mov	r2, r3
 80099f6:	4613      	mov	r3, r2
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	4413      	add	r3, r2
 80099fc:	005b      	lsls	r3, r3, #1
 80099fe:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	b2da      	uxtb	r2, r3
 8009a04:	79fb      	ldrb	r3, [r7, #7]
 8009a06:	f003 030f 	and.w	r3, r3, #15
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	4413      	add	r3, r2
 8009a0e:	b2db      	uxtb	r3, r3
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3714      	adds	r7, #20
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d101      	bne.n	8009a32 <HAL_RTCEx_EnableBypassShadow+0x16>
 8009a2e:	2302      	movs	r3, #2
 8009a30:	e024      	b.n	8009a7c <HAL_RTCEx_EnableBypassShadow+0x60>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2201      	movs	r2, #1
 8009a36:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2202      	movs	r2, #2
 8009a3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	22ca      	movs	r2, #202	; 0xca
 8009a48:	625a      	str	r2, [r3, #36]	; 0x24
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2253      	movs	r2, #83	; 0x53
 8009a50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	689a      	ldr	r2, [r3, #8]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f042 0220 	orr.w	r2, r2, #32
 8009a60:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	22ff      	movs	r2, #255	; 0xff
 8009a68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009a7a:	2300      	movs	r3, #0
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d101      	bne.n	8009a9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e095      	b.n	8009bc6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d108      	bne.n	8009ab4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009aaa:	d009      	beq.n	8009ac0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	61da      	str	r2, [r3, #28]
 8009ab2:	e005      	b.n	8009ac0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d106      	bne.n	8009ae0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f7fb fff4 	bl	8005ac8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009af6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009b00:	d902      	bls.n	8009b08 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009b02:	2300      	movs	r3, #0
 8009b04:	60fb      	str	r3, [r7, #12]
 8009b06:	e002      	b.n	8009b0e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b0c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	68db      	ldr	r3, [r3, #12]
 8009b12:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009b16:	d007      	beq.n	8009b28 <HAL_SPI_Init+0xa0>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009b20:	d002      	beq.n	8009b28 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009b38:	431a      	orrs	r2, r3
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	f003 0302 	and.w	r3, r3, #2
 8009b42:	431a      	orrs	r2, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	695b      	ldr	r3, [r3, #20]
 8009b48:	f003 0301 	and.w	r3, r3, #1
 8009b4c:	431a      	orrs	r2, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	699b      	ldr	r3, [r3, #24]
 8009b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b56:	431a      	orrs	r2, r3
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	69db      	ldr	r3, [r3, #28]
 8009b5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b60:	431a      	orrs	r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a1b      	ldr	r3, [r3, #32]
 8009b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b6a:	ea42 0103 	orr.w	r1, r2, r3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b72:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	430a      	orrs	r2, r1
 8009b7c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	699b      	ldr	r3, [r3, #24]
 8009b82:	0c1b      	lsrs	r3, r3, #16
 8009b84:	f003 0204 	and.w	r2, r3, #4
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8c:	f003 0310 	and.w	r3, r3, #16
 8009b90:	431a      	orrs	r2, r3
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b96:	f003 0308 	and.w	r3, r3, #8
 8009b9a:	431a      	orrs	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009ba4:	ea42 0103 	orr.w	r1, r2, r3
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	430a      	orrs	r2, r1
 8009bb4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3710      	adds	r7, #16
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b088      	sub	sp, #32
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	60f8      	str	r0, [r7, #12]
 8009bd6:	60b9      	str	r1, [r7, #8]
 8009bd8:	603b      	str	r3, [r7, #0]
 8009bda:	4613      	mov	r3, r2
 8009bdc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009bde:	2300      	movs	r3, #0
 8009be0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d101      	bne.n	8009bf0 <HAL_SPI_Transmit+0x22>
 8009bec:	2302      	movs	r3, #2
 8009bee:	e158      	b.n	8009ea2 <HAL_SPI_Transmit+0x2d4>
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009bf8:	f7fc f9c8 	bl	8005f8c <HAL_GetTick>
 8009bfc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009bfe:	88fb      	ldrh	r3, [r7, #6]
 8009c00:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d002      	beq.n	8009c14 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009c0e:	2302      	movs	r3, #2
 8009c10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009c12:	e13d      	b.n	8009e90 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d002      	beq.n	8009c20 <HAL_SPI_Transmit+0x52>
 8009c1a:	88fb      	ldrh	r3, [r7, #6]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d102      	bne.n	8009c26 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009c24:	e134      	b.n	8009e90 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2203      	movs	r2, #3
 8009c2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2200      	movs	r2, #0
 8009c32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	68ba      	ldr	r2, [r7, #8]
 8009c38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	88fa      	ldrh	r2, [r7, #6]
 8009c3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	88fa      	ldrh	r2, [r7, #6]
 8009c44:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2200      	movs	r2, #0
 8009c66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c70:	d10f      	bne.n	8009c92 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	681a      	ldr	r2, [r3, #0]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c90:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c9c:	2b40      	cmp	r3, #64	; 0x40
 8009c9e:	d007      	beq.n	8009cb0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009cb8:	d94b      	bls.n	8009d52 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d002      	beq.n	8009cc8 <HAL_SPI_Transmit+0xfa>
 8009cc2:	8afb      	ldrh	r3, [r7, #22]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d13e      	bne.n	8009d46 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ccc:	881a      	ldrh	r2, [r3, #0]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd8:	1c9a      	adds	r2, r3, #2
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	b29a      	uxth	r2, r3
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009cec:	e02b      	b.n	8009d46 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	f003 0302 	and.w	r3, r3, #2
 8009cf8:	2b02      	cmp	r3, #2
 8009cfa:	d112      	bne.n	8009d22 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d00:	881a      	ldrh	r2, [r3, #0]
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d0c:	1c9a      	adds	r2, r3, #2
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009d20:	e011      	b.n	8009d46 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d22:	f7fc f933 	bl	8005f8c <HAL_GetTick>
 8009d26:	4602      	mov	r2, r0
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	1ad3      	subs	r3, r2, r3
 8009d2c:	683a      	ldr	r2, [r7, #0]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d803      	bhi.n	8009d3a <HAL_SPI_Transmit+0x16c>
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d38:	d102      	bne.n	8009d40 <HAL_SPI_Transmit+0x172>
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d102      	bne.n	8009d46 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8009d40:	2303      	movs	r3, #3
 8009d42:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009d44:	e0a4      	b.n	8009e90 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d1ce      	bne.n	8009cee <HAL_SPI_Transmit+0x120>
 8009d50:	e07c      	b.n	8009e4c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d002      	beq.n	8009d60 <HAL_SPI_Transmit+0x192>
 8009d5a:	8afb      	ldrh	r3, [r7, #22]
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d170      	bne.n	8009e42 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	2b01      	cmp	r3, #1
 8009d68:	d912      	bls.n	8009d90 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d6e:	881a      	ldrh	r2, [r3, #0]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d7a:	1c9a      	adds	r2, r3, #2
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	3b02      	subs	r3, #2
 8009d88:	b29a      	uxth	r2, r3
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009d8e:	e058      	b.n	8009e42 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	330c      	adds	r3, #12
 8009d9a:	7812      	ldrb	r2, [r2, #0]
 8009d9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da2:	1c5a      	adds	r2, r3, #1
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	3b01      	subs	r3, #1
 8009db0:	b29a      	uxth	r2, r3
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009db6:	e044      	b.n	8009e42 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	689b      	ldr	r3, [r3, #8]
 8009dbe:	f003 0302 	and.w	r3, r3, #2
 8009dc2:	2b02      	cmp	r3, #2
 8009dc4:	d12b      	bne.n	8009e1e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d912      	bls.n	8009df6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd4:	881a      	ldrh	r2, [r3, #0]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009de0:	1c9a      	adds	r2, r3, #2
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	3b02      	subs	r3, #2
 8009dee:	b29a      	uxth	r2, r3
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009df4:	e025      	b.n	8009e42 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	330c      	adds	r3, #12
 8009e00:	7812      	ldrb	r2, [r2, #0]
 8009e02:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e08:	1c5a      	adds	r2, r3, #1
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	3b01      	subs	r3, #1
 8009e16:	b29a      	uxth	r2, r3
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009e1c:	e011      	b.n	8009e42 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e1e:	f7fc f8b5 	bl	8005f8c <HAL_GetTick>
 8009e22:	4602      	mov	r2, r0
 8009e24:	69bb      	ldr	r3, [r7, #24]
 8009e26:	1ad3      	subs	r3, r2, r3
 8009e28:	683a      	ldr	r2, [r7, #0]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d803      	bhi.n	8009e36 <HAL_SPI_Transmit+0x268>
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e34:	d102      	bne.n	8009e3c <HAL_SPI_Transmit+0x26e>
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d102      	bne.n	8009e42 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8009e3c:	2303      	movs	r3, #3
 8009e3e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009e40:	e026      	b.n	8009e90 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d1b5      	bne.n	8009db8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009e4c:	69ba      	ldr	r2, [r7, #24]
 8009e4e:	6839      	ldr	r1, [r7, #0]
 8009e50:	68f8      	ldr	r0, [r7, #12]
 8009e52:	f000 f941 	bl	800a0d8 <SPI_EndRxTxTransaction>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d002      	beq.n	8009e62 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2220      	movs	r2, #32
 8009e60:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d10a      	bne.n	8009e80 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	613b      	str	r3, [r7, #16]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	613b      	str	r3, [r7, #16]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	613b      	str	r3, [r7, #16]
 8009e7e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d002      	beq.n	8009e8e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	77fb      	strb	r3, [r7, #31]
 8009e8c:	e000      	b.n	8009e90 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8009e8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2201      	movs	r2, #1
 8009e94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009ea0:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3720      	adds	r7, #32
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
	...

08009eac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b088      	sub	sp, #32
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	603b      	str	r3, [r7, #0]
 8009eb8:	4613      	mov	r3, r2
 8009eba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009ebc:	f7fc f866 	bl	8005f8c <HAL_GetTick>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec4:	1a9b      	subs	r3, r3, r2
 8009ec6:	683a      	ldr	r2, [r7, #0]
 8009ec8:	4413      	add	r3, r2
 8009eca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009ecc:	f7fc f85e 	bl	8005f8c <HAL_GetTick>
 8009ed0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009ed2:	4b39      	ldr	r3, [pc, #228]	; (8009fb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	015b      	lsls	r3, r3, #5
 8009ed8:	0d1b      	lsrs	r3, r3, #20
 8009eda:	69fa      	ldr	r2, [r7, #28]
 8009edc:	fb02 f303 	mul.w	r3, r2, r3
 8009ee0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ee2:	e054      	b.n	8009f8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eea:	d050      	beq.n	8009f8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009eec:	f7fc f84e 	bl	8005f8c <HAL_GetTick>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	1ad3      	subs	r3, r2, r3
 8009ef6:	69fa      	ldr	r2, [r7, #28]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d902      	bls.n	8009f02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d13d      	bne.n	8009f7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	685a      	ldr	r2, [r3, #4]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009f10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f1a:	d111      	bne.n	8009f40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f24:	d004      	beq.n	8009f30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f2e:	d107      	bne.n	8009f40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f48:	d10f      	bne.n	8009f6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009f58:	601a      	str	r2, [r3, #0]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2200      	movs	r2, #0
 8009f76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009f7a:	2303      	movs	r3, #3
 8009f7c:	e017      	b.n	8009fae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d101      	bne.n	8009f88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009f84:	2300      	movs	r3, #0
 8009f86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	3b01      	subs	r3, #1
 8009f8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	689a      	ldr	r2, [r3, #8]
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	4013      	ands	r3, r2
 8009f98:	68ba      	ldr	r2, [r7, #8]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	bf0c      	ite	eq
 8009f9e:	2301      	moveq	r3, #1
 8009fa0:	2300      	movne	r3, #0
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	79fb      	ldrb	r3, [r7, #7]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d19b      	bne.n	8009ee4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009fac:	2300      	movs	r3, #0
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3720      	adds	r7, #32
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	20000014 	.word	0x20000014

08009fbc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b088      	sub	sp, #32
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	607a      	str	r2, [r7, #4]
 8009fc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009fca:	f7fb ffdf 	bl	8005f8c <HAL_GetTick>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd2:	1a9b      	subs	r3, r3, r2
 8009fd4:	683a      	ldr	r2, [r7, #0]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009fda:	f7fb ffd7 	bl	8005f8c <HAL_GetTick>
 8009fde:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009fe0:	4b3c      	ldr	r3, [pc, #240]	; (800a0d4 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	4413      	add	r3, r2
 8009fea:	00da      	lsls	r2, r3, #3
 8009fec:	1ad3      	subs	r3, r2, r3
 8009fee:	0d1b      	lsrs	r3, r3, #20
 8009ff0:	69fa      	ldr	r2, [r7, #28]
 8009ff2:	fb02 f303 	mul.w	r3, r2, r3
 8009ff6:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8009ff8:	e05f      	b.n	800a0ba <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a000:	d106      	bne.n	800a010 <SPI_WaitFifoStateUntilTimeout+0x54>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d103      	bne.n	800a010 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	330c      	adds	r3, #12
 800a00e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a016:	d050      	beq.n	800a0ba <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a018:	f7fb ffb8 	bl	8005f8c <HAL_GetTick>
 800a01c:	4602      	mov	r2, r0
 800a01e:	69bb      	ldr	r3, [r7, #24]
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	69fa      	ldr	r2, [r7, #28]
 800a024:	429a      	cmp	r2, r3
 800a026:	d902      	bls.n	800a02e <SPI_WaitFifoStateUntilTimeout+0x72>
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d13d      	bne.n	800a0aa <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	685a      	ldr	r2, [r3, #4]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a03c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a046:	d111      	bne.n	800a06c <SPI_WaitFifoStateUntilTimeout+0xb0>
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a050:	d004      	beq.n	800a05c <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a05a:	d107      	bne.n	800a06c <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a06a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a074:	d10f      	bne.n	800a096 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a084:	601a      	str	r2, [r3, #0]
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a094:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2201      	movs	r2, #1
 800a09a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a0a6:	2303      	movs	r3, #3
 800a0a8:	e010      	b.n	800a0cc <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d101      	bne.n	800a0b4 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	3b01      	subs	r3, #1
 800a0b8:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	689a      	ldr	r2, [r3, #8]
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	4013      	ands	r3, r2
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d197      	bne.n	8009ffa <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3720      	adds	r7, #32
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	20000014 	.word	0x20000014

0800a0d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b086      	sub	sp, #24
 800a0dc:	af02      	add	r7, sp, #8
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	9300      	str	r3, [sp, #0]
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f7ff ff63 	bl	8009fbc <SPI_WaitFifoStateUntilTimeout>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d007      	beq.n	800a10c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a100:	f043 0220 	orr.w	r2, r3, #32
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a108:	2303      	movs	r3, #3
 800a10a:	e027      	b.n	800a15c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	2200      	movs	r2, #0
 800a114:	2180      	movs	r1, #128	; 0x80
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f7ff fec8 	bl	8009eac <SPI_WaitFlagStateUntilTimeout>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d007      	beq.n	800a132 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a126:	f043 0220 	orr.w	r2, r3, #32
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a12e:	2303      	movs	r3, #3
 800a130:	e014      	b.n	800a15c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	9300      	str	r3, [sp, #0]
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	2200      	movs	r2, #0
 800a13a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f7ff ff3c 	bl	8009fbc <SPI_WaitFifoStateUntilTimeout>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d007      	beq.n	800a15a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a14e:	f043 0220 	orr.w	r2, r3, #32
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a156:	2303      	movs	r3, #3
 800a158:	e000      	b.n	800a15c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a15a:	2300      	movs	r3, #0
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3710      	adds	r7, #16
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b082      	sub	sp, #8
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d101      	bne.n	800a176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a172:	2301      	movs	r3, #1
 800a174:	e049      	b.n	800a20a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d106      	bne.n	800a190 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f7fb fccc 	bl	8005b28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2202      	movs	r2, #2
 800a194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	3304      	adds	r3, #4
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	4610      	mov	r0, r2
 800a1a4:	f000 fd5a 	bl	800ac5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2201      	movs	r2, #1
 800a204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3708      	adds	r7, #8
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
	...

0800a214 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a214:	b480      	push	{r7}
 800a216:	b085      	sub	sp, #20
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a222:	b2db      	uxtb	r3, r3
 800a224:	2b01      	cmp	r3, #1
 800a226:	d001      	beq.n	800a22c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a228:	2301      	movs	r3, #1
 800a22a:	e036      	b.n	800a29a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2202      	movs	r2, #2
 800a230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	68da      	ldr	r2, [r3, #12]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f042 0201 	orr.w	r2, r2, #1
 800a242:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a17      	ldr	r2, [pc, #92]	; (800a2a8 <HAL_TIM_Base_Start_IT+0x94>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d004      	beq.n	800a258 <HAL_TIM_Base_Start_IT+0x44>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a256:	d115      	bne.n	800a284 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	689a      	ldr	r2, [r3, #8]
 800a25e:	4b13      	ldr	r3, [pc, #76]	; (800a2ac <HAL_TIM_Base_Start_IT+0x98>)
 800a260:	4013      	ands	r3, r2
 800a262:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2b06      	cmp	r3, #6
 800a268:	d015      	beq.n	800a296 <HAL_TIM_Base_Start_IT+0x82>
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a270:	d011      	beq.n	800a296 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f042 0201 	orr.w	r2, r2, #1
 800a280:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a282:	e008      	b.n	800a296 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f042 0201 	orr.w	r2, r2, #1
 800a292:	601a      	str	r2, [r3, #0]
 800a294:	e000      	b.n	800a298 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a296:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3714      	adds	r7, #20
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr
 800a2a6:	bf00      	nop
 800a2a8:	40012c00 	.word	0x40012c00
 800a2ac:	00010007 	.word	0x00010007

0800a2b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d101      	bne.n	800a2c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e049      	b.n	800a356 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d106      	bne.n	800a2dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 f841 	bl	800a35e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2202      	movs	r2, #2
 800a2e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	3304      	adds	r3, #4
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	4610      	mov	r0, r2
 800a2f0:	f000 fcb4 	bl	800ac5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2201      	movs	r2, #1
 800a328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2201      	movs	r2, #1
 800a330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2201      	movs	r2, #1
 800a338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2201      	movs	r2, #1
 800a340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2201      	movs	r2, #1
 800a348:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2201      	movs	r2, #1
 800a350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a354:	2300      	movs	r3, #0
}
 800a356:	4618      	mov	r0, r3
 800a358:	3708      	adds	r7, #8
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a35e:	b480      	push	{r7}
 800a360:	b083      	sub	sp, #12
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a366:	bf00      	nop
 800a368:	370c      	adds	r7, #12
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr
	...

0800a374 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d109      	bne.n	800a398 <HAL_TIM_PWM_Start+0x24>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	bf14      	ite	ne
 800a390:	2301      	movne	r3, #1
 800a392:	2300      	moveq	r3, #0
 800a394:	b2db      	uxtb	r3, r3
 800a396:	e03c      	b.n	800a412 <HAL_TIM_PWM_Start+0x9e>
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	2b04      	cmp	r3, #4
 800a39c:	d109      	bne.n	800a3b2 <HAL_TIM_PWM_Start+0x3e>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	bf14      	ite	ne
 800a3aa:	2301      	movne	r3, #1
 800a3ac:	2300      	moveq	r3, #0
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	e02f      	b.n	800a412 <HAL_TIM_PWM_Start+0x9e>
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	2b08      	cmp	r3, #8
 800a3b6:	d109      	bne.n	800a3cc <HAL_TIM_PWM_Start+0x58>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	bf14      	ite	ne
 800a3c4:	2301      	movne	r3, #1
 800a3c6:	2300      	moveq	r3, #0
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	e022      	b.n	800a412 <HAL_TIM_PWM_Start+0x9e>
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	2b0c      	cmp	r3, #12
 800a3d0:	d109      	bne.n	800a3e6 <HAL_TIM_PWM_Start+0x72>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	bf14      	ite	ne
 800a3de:	2301      	movne	r3, #1
 800a3e0:	2300      	moveq	r3, #0
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	e015      	b.n	800a412 <HAL_TIM_PWM_Start+0x9e>
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	2b10      	cmp	r3, #16
 800a3ea:	d109      	bne.n	800a400 <HAL_TIM_PWM_Start+0x8c>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	bf14      	ite	ne
 800a3f8:	2301      	movne	r3, #1
 800a3fa:	2300      	moveq	r3, #0
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	e008      	b.n	800a412 <HAL_TIM_PWM_Start+0x9e>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a406:	b2db      	uxtb	r3, r3
 800a408:	2b01      	cmp	r3, #1
 800a40a:	bf14      	ite	ne
 800a40c:	2301      	movne	r3, #1
 800a40e:	2300      	moveq	r3, #0
 800a410:	b2db      	uxtb	r3, r3
 800a412:	2b00      	cmp	r3, #0
 800a414:	d001      	beq.n	800a41a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	e079      	b.n	800a50e <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d104      	bne.n	800a42a <HAL_TIM_PWM_Start+0xb6>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2202      	movs	r2, #2
 800a424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a428:	e023      	b.n	800a472 <HAL_TIM_PWM_Start+0xfe>
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	2b04      	cmp	r3, #4
 800a42e:	d104      	bne.n	800a43a <HAL_TIM_PWM_Start+0xc6>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2202      	movs	r2, #2
 800a434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a438:	e01b      	b.n	800a472 <HAL_TIM_PWM_Start+0xfe>
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	2b08      	cmp	r3, #8
 800a43e:	d104      	bne.n	800a44a <HAL_TIM_PWM_Start+0xd6>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2202      	movs	r2, #2
 800a444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a448:	e013      	b.n	800a472 <HAL_TIM_PWM_Start+0xfe>
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	2b0c      	cmp	r3, #12
 800a44e:	d104      	bne.n	800a45a <HAL_TIM_PWM_Start+0xe6>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2202      	movs	r2, #2
 800a454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a458:	e00b      	b.n	800a472 <HAL_TIM_PWM_Start+0xfe>
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	2b10      	cmp	r3, #16
 800a45e:	d104      	bne.n	800a46a <HAL_TIM_PWM_Start+0xf6>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2202      	movs	r2, #2
 800a464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a468:	e003      	b.n	800a472 <HAL_TIM_PWM_Start+0xfe>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2202      	movs	r2, #2
 800a46e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	2201      	movs	r2, #1
 800a478:	6839      	ldr	r1, [r7, #0]
 800a47a:	4618      	mov	r0, r3
 800a47c:	f000 ff6c 	bl	800b358 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a24      	ldr	r2, [pc, #144]	; (800a518 <HAL_TIM_PWM_Start+0x1a4>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d009      	beq.n	800a49e <HAL_TIM_PWM_Start+0x12a>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a23      	ldr	r2, [pc, #140]	; (800a51c <HAL_TIM_PWM_Start+0x1a8>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d004      	beq.n	800a49e <HAL_TIM_PWM_Start+0x12a>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a21      	ldr	r2, [pc, #132]	; (800a520 <HAL_TIM_PWM_Start+0x1ac>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d101      	bne.n	800a4a2 <HAL_TIM_PWM_Start+0x12e>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e000      	b.n	800a4a4 <HAL_TIM_PWM_Start+0x130>
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d007      	beq.n	800a4b8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a4b6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4a16      	ldr	r2, [pc, #88]	; (800a518 <HAL_TIM_PWM_Start+0x1a4>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d004      	beq.n	800a4cc <HAL_TIM_PWM_Start+0x158>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4ca:	d115      	bne.n	800a4f8 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	689a      	ldr	r2, [r3, #8]
 800a4d2:	4b14      	ldr	r3, [pc, #80]	; (800a524 <HAL_TIM_PWM_Start+0x1b0>)
 800a4d4:	4013      	ands	r3, r2
 800a4d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2b06      	cmp	r3, #6
 800a4dc:	d015      	beq.n	800a50a <HAL_TIM_PWM_Start+0x196>
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4e4:	d011      	beq.n	800a50a <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f042 0201 	orr.w	r2, r2, #1
 800a4f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4f6:	e008      	b.n	800a50a <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	681a      	ldr	r2, [r3, #0]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f042 0201 	orr.w	r2, r2, #1
 800a506:	601a      	str	r2, [r3, #0]
 800a508:	e000      	b.n	800a50c <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a50a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3710      	adds	r7, #16
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	40012c00 	.word	0x40012c00
 800a51c:	40014400 	.word	0x40014400
 800a520:	40014800 	.word	0x40014800
 800a524:	00010007 	.word	0x00010007

0800a528 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2200      	movs	r2, #0
 800a538:	6839      	ldr	r1, [r7, #0]
 800a53a:	4618      	mov	r0, r3
 800a53c:	f000 ff0c 	bl	800b358 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a39      	ldr	r2, [pc, #228]	; (800a62c <HAL_TIM_PWM_Stop+0x104>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d009      	beq.n	800a55e <HAL_TIM_PWM_Stop+0x36>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4a38      	ldr	r2, [pc, #224]	; (800a630 <HAL_TIM_PWM_Stop+0x108>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d004      	beq.n	800a55e <HAL_TIM_PWM_Stop+0x36>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a36      	ldr	r2, [pc, #216]	; (800a634 <HAL_TIM_PWM_Stop+0x10c>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d101      	bne.n	800a562 <HAL_TIM_PWM_Stop+0x3a>
 800a55e:	2301      	movs	r3, #1
 800a560:	e000      	b.n	800a564 <HAL_TIM_PWM_Stop+0x3c>
 800a562:	2300      	movs	r3, #0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d017      	beq.n	800a598 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	6a1a      	ldr	r2, [r3, #32]
 800a56e:	f241 1311 	movw	r3, #4369	; 0x1111
 800a572:	4013      	ands	r3, r2
 800a574:	2b00      	cmp	r3, #0
 800a576:	d10f      	bne.n	800a598 <HAL_TIM_PWM_Stop+0x70>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	6a1a      	ldr	r2, [r3, #32]
 800a57e:	f240 4344 	movw	r3, #1092	; 0x444
 800a582:	4013      	ands	r3, r2
 800a584:	2b00      	cmp	r3, #0
 800a586:	d107      	bne.n	800a598 <HAL_TIM_PWM_Stop+0x70>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a596:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	6a1a      	ldr	r2, [r3, #32]
 800a59e:	f241 1311 	movw	r3, #4369	; 0x1111
 800a5a2:	4013      	ands	r3, r2
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d10f      	bne.n	800a5c8 <HAL_TIM_PWM_Stop+0xa0>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	6a1a      	ldr	r2, [r3, #32]
 800a5ae:	f240 4344 	movw	r3, #1092	; 0x444
 800a5b2:	4013      	ands	r3, r2
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d107      	bne.n	800a5c8 <HAL_TIM_PWM_Stop+0xa0>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f022 0201 	bic.w	r2, r2, #1
 800a5c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d104      	bne.n	800a5d8 <HAL_TIM_PWM_Stop+0xb0>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5d6:	e023      	b.n	800a620 <HAL_TIM_PWM_Stop+0xf8>
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	2b04      	cmp	r3, #4
 800a5dc:	d104      	bne.n	800a5e8 <HAL_TIM_PWM_Stop+0xc0>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5e6:	e01b      	b.n	800a620 <HAL_TIM_PWM_Stop+0xf8>
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	2b08      	cmp	r3, #8
 800a5ec:	d104      	bne.n	800a5f8 <HAL_TIM_PWM_Stop+0xd0>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5f6:	e013      	b.n	800a620 <HAL_TIM_PWM_Stop+0xf8>
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	2b0c      	cmp	r3, #12
 800a5fc:	d104      	bne.n	800a608 <HAL_TIM_PWM_Stop+0xe0>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2201      	movs	r2, #1
 800a602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a606:	e00b      	b.n	800a620 <HAL_TIM_PWM_Stop+0xf8>
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	2b10      	cmp	r3, #16
 800a60c:	d104      	bne.n	800a618 <HAL_TIM_PWM_Stop+0xf0>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2201      	movs	r2, #1
 800a612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a616:	e003      	b.n	800a620 <HAL_TIM_PWM_Stop+0xf8>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800a620:	2300      	movs	r3, #0
}
 800a622:	4618      	mov	r0, r3
 800a624:	3708      	adds	r7, #8
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	40012c00 	.word	0x40012c00
 800a630:	40014400 	.word	0x40014400
 800a634:	40014800 	.word	0x40014800

0800a638 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	f003 0302 	and.w	r3, r3, #2
 800a64a:	2b02      	cmp	r3, #2
 800a64c:	d122      	bne.n	800a694 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	f003 0302 	and.w	r3, r3, #2
 800a658:	2b02      	cmp	r3, #2
 800a65a:	d11b      	bne.n	800a694 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f06f 0202 	mvn.w	r2, #2
 800a664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2201      	movs	r2, #1
 800a66a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	699b      	ldr	r3, [r3, #24]
 800a672:	f003 0303 	and.w	r3, r3, #3
 800a676:	2b00      	cmp	r3, #0
 800a678:	d003      	beq.n	800a682 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 facf 	bl	800ac1e <HAL_TIM_IC_CaptureCallback>
 800a680:	e005      	b.n	800a68e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 fac1 	bl	800ac0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 fad2 	bl	800ac32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	691b      	ldr	r3, [r3, #16]
 800a69a:	f003 0304 	and.w	r3, r3, #4
 800a69e:	2b04      	cmp	r3, #4
 800a6a0:	d122      	bne.n	800a6e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	f003 0304 	and.w	r3, r3, #4
 800a6ac:	2b04      	cmp	r3, #4
 800a6ae:	d11b      	bne.n	800a6e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f06f 0204 	mvn.w	r2, #4
 800a6b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2202      	movs	r2, #2
 800a6be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	699b      	ldr	r3, [r3, #24]
 800a6c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d003      	beq.n	800a6d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 faa5 	bl	800ac1e <HAL_TIM_IC_CaptureCallback>
 800a6d4:	e005      	b.n	800a6e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 fa97 	bl	800ac0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 faa8 	bl	800ac32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	f003 0308 	and.w	r3, r3, #8
 800a6f2:	2b08      	cmp	r3, #8
 800a6f4:	d122      	bne.n	800a73c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	68db      	ldr	r3, [r3, #12]
 800a6fc:	f003 0308 	and.w	r3, r3, #8
 800a700:	2b08      	cmp	r3, #8
 800a702:	d11b      	bne.n	800a73c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f06f 0208 	mvn.w	r2, #8
 800a70c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2204      	movs	r2, #4
 800a712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	69db      	ldr	r3, [r3, #28]
 800a71a:	f003 0303 	and.w	r3, r3, #3
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d003      	beq.n	800a72a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 fa7b 	bl	800ac1e <HAL_TIM_IC_CaptureCallback>
 800a728:	e005      	b.n	800a736 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 fa6d 	bl	800ac0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 fa7e 	bl	800ac32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	691b      	ldr	r3, [r3, #16]
 800a742:	f003 0310 	and.w	r3, r3, #16
 800a746:	2b10      	cmp	r3, #16
 800a748:	d122      	bne.n	800a790 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	f003 0310 	and.w	r3, r3, #16
 800a754:	2b10      	cmp	r3, #16
 800a756:	d11b      	bne.n	800a790 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f06f 0210 	mvn.w	r2, #16
 800a760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2208      	movs	r2, #8
 800a766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	69db      	ldr	r3, [r3, #28]
 800a76e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a772:	2b00      	cmp	r3, #0
 800a774:	d003      	beq.n	800a77e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 fa51 	bl	800ac1e <HAL_TIM_IC_CaptureCallback>
 800a77c:	e005      	b.n	800a78a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 fa43 	bl	800ac0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 fa54 	bl	800ac32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	691b      	ldr	r3, [r3, #16]
 800a796:	f003 0301 	and.w	r3, r3, #1
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d10e      	bne.n	800a7bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	f003 0301 	and.w	r3, r3, #1
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d107      	bne.n	800a7bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f06f 0201 	mvn.w	r2, #1
 800a7b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f7fa ff60 	bl	800567c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	691b      	ldr	r3, [r3, #16]
 800a7c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7c6:	2b80      	cmp	r3, #128	; 0x80
 800a7c8:	d10e      	bne.n	800a7e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7d4:	2b80      	cmp	r3, #128	; 0x80
 800a7d6:	d107      	bne.n	800a7e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a7e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 fed8 	bl	800b598 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	691b      	ldr	r3, [r3, #16]
 800a7ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7f6:	d10e      	bne.n	800a816 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	68db      	ldr	r3, [r3, #12]
 800a7fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a802:	2b80      	cmp	r3, #128	; 0x80
 800a804:	d107      	bne.n	800a816 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a80e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f000 fecb 	bl	800b5ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	691b      	ldr	r3, [r3, #16]
 800a81c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a820:	2b40      	cmp	r3, #64	; 0x40
 800a822:	d10e      	bne.n	800a842 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a82e:	2b40      	cmp	r3, #64	; 0x40
 800a830:	d107      	bne.n	800a842 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a83a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 fa02 	bl	800ac46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	691b      	ldr	r3, [r3, #16]
 800a848:	f003 0320 	and.w	r3, r3, #32
 800a84c:	2b20      	cmp	r3, #32
 800a84e:	d10e      	bne.n	800a86e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	68db      	ldr	r3, [r3, #12]
 800a856:	f003 0320 	and.w	r3, r3, #32
 800a85a:	2b20      	cmp	r3, #32
 800a85c:	d107      	bne.n	800a86e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f06f 0220 	mvn.w	r2, #32
 800a866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 fe8b 	bl	800b584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a86e:	bf00      	nop
 800a870:	3708      	adds	r7, #8
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
	...

0800a878 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	60b9      	str	r1, [r7, #8]
 800a882:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d101      	bne.n	800a892 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a88e:	2302      	movs	r3, #2
 800a890:	e0fd      	b.n	800aa8e <HAL_TIM_PWM_ConfigChannel+0x216>
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2201      	movs	r2, #1
 800a896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2b14      	cmp	r3, #20
 800a89e:	f200 80f0 	bhi.w	800aa82 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a8a2:	a201      	add	r2, pc, #4	; (adr r2, 800a8a8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a8a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a8:	0800a8fd 	.word	0x0800a8fd
 800a8ac:	0800aa83 	.word	0x0800aa83
 800a8b0:	0800aa83 	.word	0x0800aa83
 800a8b4:	0800aa83 	.word	0x0800aa83
 800a8b8:	0800a93d 	.word	0x0800a93d
 800a8bc:	0800aa83 	.word	0x0800aa83
 800a8c0:	0800aa83 	.word	0x0800aa83
 800a8c4:	0800aa83 	.word	0x0800aa83
 800a8c8:	0800a97f 	.word	0x0800a97f
 800a8cc:	0800aa83 	.word	0x0800aa83
 800a8d0:	0800aa83 	.word	0x0800aa83
 800a8d4:	0800aa83 	.word	0x0800aa83
 800a8d8:	0800a9bf 	.word	0x0800a9bf
 800a8dc:	0800aa83 	.word	0x0800aa83
 800a8e0:	0800aa83 	.word	0x0800aa83
 800a8e4:	0800aa83 	.word	0x0800aa83
 800a8e8:	0800aa01 	.word	0x0800aa01
 800a8ec:	0800aa83 	.word	0x0800aa83
 800a8f0:	0800aa83 	.word	0x0800aa83
 800a8f4:	0800aa83 	.word	0x0800aa83
 800a8f8:	0800aa41 	.word	0x0800aa41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	68b9      	ldr	r1, [r7, #8]
 800a902:	4618      	mov	r0, r3
 800a904:	f000 fa0e 	bl	800ad24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	699a      	ldr	r2, [r3, #24]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f042 0208 	orr.w	r2, r2, #8
 800a916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	699a      	ldr	r2, [r3, #24]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f022 0204 	bic.w	r2, r2, #4
 800a926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	6999      	ldr	r1, [r3, #24]
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	691a      	ldr	r2, [r3, #16]
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	430a      	orrs	r2, r1
 800a938:	619a      	str	r2, [r3, #24]
      break;
 800a93a:	e0a3      	b.n	800aa84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	68b9      	ldr	r1, [r7, #8]
 800a942:	4618      	mov	r0, r3
 800a944:	f000 fa6a 	bl	800ae1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	699a      	ldr	r2, [r3, #24]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a956:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	699a      	ldr	r2, [r3, #24]
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	6999      	ldr	r1, [r3, #24]
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	021a      	lsls	r2, r3, #8
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	430a      	orrs	r2, r1
 800a97a:	619a      	str	r2, [r3, #24]
      break;
 800a97c:	e082      	b.n	800aa84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	68b9      	ldr	r1, [r7, #8]
 800a984:	4618      	mov	r0, r3
 800a986:	f000 fac3 	bl	800af10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	69da      	ldr	r2, [r3, #28]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f042 0208 	orr.w	r2, r2, #8
 800a998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	69da      	ldr	r2, [r3, #28]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f022 0204 	bic.w	r2, r2, #4
 800a9a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	69d9      	ldr	r1, [r3, #28]
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	691a      	ldr	r2, [r3, #16]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	430a      	orrs	r2, r1
 800a9ba:	61da      	str	r2, [r3, #28]
      break;
 800a9bc:	e062      	b.n	800aa84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	68b9      	ldr	r1, [r7, #8]
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f000 fb1b 	bl	800b000 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	69da      	ldr	r2, [r3, #28]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a9d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	69da      	ldr	r2, [r3, #28]
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a9e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	69d9      	ldr	r1, [r3, #28]
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	691b      	ldr	r3, [r3, #16]
 800a9f4:	021a      	lsls	r2, r3, #8
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	430a      	orrs	r2, r1
 800a9fc:	61da      	str	r2, [r3, #28]
      break;
 800a9fe:	e041      	b.n	800aa84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	68b9      	ldr	r1, [r7, #8]
 800aa06:	4618      	mov	r0, r3
 800aa08:	f000 fb58 	bl	800b0bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f042 0208 	orr.w	r2, r2, #8
 800aa1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f022 0204 	bic.w	r2, r2, #4
 800aa2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	691a      	ldr	r2, [r3, #16]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	430a      	orrs	r2, r1
 800aa3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aa3e:	e021      	b.n	800aa84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	68b9      	ldr	r1, [r7, #8]
 800aa46:	4618      	mov	r0, r3
 800aa48:	f000 fb90 	bl	800b16c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	691b      	ldr	r3, [r3, #16]
 800aa76:	021a      	lsls	r2, r3, #8
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	430a      	orrs	r2, r1
 800aa7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aa80:	e000      	b.n	800aa84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800aa82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa8c:	2300      	movs	r3, #0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop

0800aa98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d101      	bne.n	800aab0 <HAL_TIM_ConfigClockSource+0x18>
 800aaac:	2302      	movs	r3, #2
 800aaae:	e0a8      	b.n	800ac02 <HAL_TIM_ConfigClockSource+0x16a>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2201      	movs	r2, #1
 800aab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2202      	movs	r2, #2
 800aabc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800aace:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800aad2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aada:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	68fa      	ldr	r2, [r7, #12]
 800aae2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2b40      	cmp	r3, #64	; 0x40
 800aaea:	d067      	beq.n	800abbc <HAL_TIM_ConfigClockSource+0x124>
 800aaec:	2b40      	cmp	r3, #64	; 0x40
 800aaee:	d80b      	bhi.n	800ab08 <HAL_TIM_ConfigClockSource+0x70>
 800aaf0:	2b10      	cmp	r3, #16
 800aaf2:	d073      	beq.n	800abdc <HAL_TIM_ConfigClockSource+0x144>
 800aaf4:	2b10      	cmp	r3, #16
 800aaf6:	d802      	bhi.n	800aafe <HAL_TIM_ConfigClockSource+0x66>
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d06f      	beq.n	800abdc <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800aafc:	e078      	b.n	800abf0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800aafe:	2b20      	cmp	r3, #32
 800ab00:	d06c      	beq.n	800abdc <HAL_TIM_ConfigClockSource+0x144>
 800ab02:	2b30      	cmp	r3, #48	; 0x30
 800ab04:	d06a      	beq.n	800abdc <HAL_TIM_ConfigClockSource+0x144>
      break;
 800ab06:	e073      	b.n	800abf0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800ab08:	2b70      	cmp	r3, #112	; 0x70
 800ab0a:	d00d      	beq.n	800ab28 <HAL_TIM_ConfigClockSource+0x90>
 800ab0c:	2b70      	cmp	r3, #112	; 0x70
 800ab0e:	d804      	bhi.n	800ab1a <HAL_TIM_ConfigClockSource+0x82>
 800ab10:	2b50      	cmp	r3, #80	; 0x50
 800ab12:	d033      	beq.n	800ab7c <HAL_TIM_ConfigClockSource+0xe4>
 800ab14:	2b60      	cmp	r3, #96	; 0x60
 800ab16:	d041      	beq.n	800ab9c <HAL_TIM_ConfigClockSource+0x104>
      break;
 800ab18:	e06a      	b.n	800abf0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800ab1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab1e:	d066      	beq.n	800abee <HAL_TIM_ConfigClockSource+0x156>
 800ab20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab24:	d017      	beq.n	800ab56 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800ab26:	e063      	b.n	800abf0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6818      	ldr	r0, [r3, #0]
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	6899      	ldr	r1, [r3, #8]
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	685a      	ldr	r2, [r3, #4]
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	68db      	ldr	r3, [r3, #12]
 800ab38:	f000 fbee 	bl	800b318 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	689b      	ldr	r3, [r3, #8]
 800ab42:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ab4a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	609a      	str	r2, [r3, #8]
      break;
 800ab54:	e04c      	b.n	800abf0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6818      	ldr	r0, [r3, #0]
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	6899      	ldr	r1, [r3, #8]
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	685a      	ldr	r2, [r3, #4]
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	68db      	ldr	r3, [r3, #12]
 800ab66:	f000 fbd7 	bl	800b318 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	689a      	ldr	r2, [r3, #8]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab78:	609a      	str	r2, [r3, #8]
      break;
 800ab7a:	e039      	b.n	800abf0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6818      	ldr	r0, [r3, #0]
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	6859      	ldr	r1, [r3, #4]
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	461a      	mov	r2, r3
 800ab8a:	f000 fb49 	bl	800b220 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	2150      	movs	r1, #80	; 0x50
 800ab94:	4618      	mov	r0, r3
 800ab96:	f000 fba2 	bl	800b2de <TIM_ITRx_SetConfig>
      break;
 800ab9a:	e029      	b.n	800abf0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6818      	ldr	r0, [r3, #0]
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	6859      	ldr	r1, [r3, #4]
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	461a      	mov	r2, r3
 800abaa:	f000 fb68 	bl	800b27e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	2160      	movs	r1, #96	; 0x60
 800abb4:	4618      	mov	r0, r3
 800abb6:	f000 fb92 	bl	800b2de <TIM_ITRx_SetConfig>
      break;
 800abba:	e019      	b.n	800abf0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6818      	ldr	r0, [r3, #0]
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	6859      	ldr	r1, [r3, #4]
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	68db      	ldr	r3, [r3, #12]
 800abc8:	461a      	mov	r2, r3
 800abca:	f000 fb29 	bl	800b220 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2140      	movs	r1, #64	; 0x40
 800abd4:	4618      	mov	r0, r3
 800abd6:	f000 fb82 	bl	800b2de <TIM_ITRx_SetConfig>
      break;
 800abda:	e009      	b.n	800abf0 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681a      	ldr	r2, [r3, #0]
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4619      	mov	r1, r3
 800abe6:	4610      	mov	r0, r2
 800abe8:	f000 fb79 	bl	800b2de <TIM_ITRx_SetConfig>
        break;
 800abec:	e000      	b.n	800abf0 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800abee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2201      	movs	r2, #1
 800abf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac00:	2300      	movs	r3, #0
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3710      	adds	r7, #16
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac0a:	b480      	push	{r7}
 800ac0c:	b083      	sub	sp, #12
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac12:	bf00      	nop
 800ac14:	370c      	adds	r7, #12
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr

0800ac1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac1e:	b480      	push	{r7}
 800ac20:	b083      	sub	sp, #12
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac26:	bf00      	nop
 800ac28:	370c      	adds	r7, #12
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr

0800ac32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac32:	b480      	push	{r7}
 800ac34:	b083      	sub	sp, #12
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac3a:	bf00      	nop
 800ac3c:	370c      	adds	r7, #12
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr

0800ac46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac46:	b480      	push	{r7}
 800ac48:	b083      	sub	sp, #12
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac4e:	bf00      	nop
 800ac50:	370c      	adds	r7, #12
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr
	...

0800ac5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b085      	sub	sp, #20
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4a2a      	ldr	r2, [pc, #168]	; (800ad18 <TIM_Base_SetConfig+0xbc>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d003      	beq.n	800ac7c <TIM_Base_SetConfig+0x20>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac7a:	d108      	bne.n	800ac8e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	68fa      	ldr	r2, [r7, #12]
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	4a21      	ldr	r2, [pc, #132]	; (800ad18 <TIM_Base_SetConfig+0xbc>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d00b      	beq.n	800acae <TIM_Base_SetConfig+0x52>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac9c:	d007      	beq.n	800acae <TIM_Base_SetConfig+0x52>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	4a1e      	ldr	r2, [pc, #120]	; (800ad1c <TIM_Base_SetConfig+0xc0>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d003      	beq.n	800acae <TIM_Base_SetConfig+0x52>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	4a1d      	ldr	r2, [pc, #116]	; (800ad20 <TIM_Base_SetConfig+0xc4>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d108      	bne.n	800acc0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	68db      	ldr	r3, [r3, #12]
 800acba:	68fa      	ldr	r2, [r7, #12]
 800acbc:	4313      	orrs	r3, r2
 800acbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	695b      	ldr	r3, [r3, #20]
 800acca:	4313      	orrs	r3, r2
 800accc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	689a      	ldr	r2, [r3, #8]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	681a      	ldr	r2, [r3, #0]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	4a0c      	ldr	r2, [pc, #48]	; (800ad18 <TIM_Base_SetConfig+0xbc>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d007      	beq.n	800acfc <TIM_Base_SetConfig+0xa0>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	4a0b      	ldr	r2, [pc, #44]	; (800ad1c <TIM_Base_SetConfig+0xc0>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d003      	beq.n	800acfc <TIM_Base_SetConfig+0xa0>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4a0a      	ldr	r2, [pc, #40]	; (800ad20 <TIM_Base_SetConfig+0xc4>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d103      	bne.n	800ad04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	691a      	ldr	r2, [r3, #16]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2201      	movs	r2, #1
 800ad08:	615a      	str	r2, [r3, #20]
}
 800ad0a:	bf00      	nop
 800ad0c:	3714      	adds	r7, #20
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad14:	4770      	bx	lr
 800ad16:	bf00      	nop
 800ad18:	40012c00 	.word	0x40012c00
 800ad1c:	40014400 	.word	0x40014400
 800ad20:	40014800 	.word	0x40014800

0800ad24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b087      	sub	sp, #28
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6a1b      	ldr	r3, [r3, #32]
 800ad32:	f023 0201 	bic.w	r2, r3, #1
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6a1b      	ldr	r3, [r3, #32]
 800ad3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	699b      	ldr	r3, [r3, #24]
 800ad4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f023 0303 	bic.w	r3, r3, #3
 800ad5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	f023 0302 	bic.w	r3, r3, #2
 800ad70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	697a      	ldr	r2, [r7, #20]
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	4a24      	ldr	r2, [pc, #144]	; (800ae10 <TIM_OC1_SetConfig+0xec>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d007      	beq.n	800ad94 <TIM_OC1_SetConfig+0x70>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	4a23      	ldr	r2, [pc, #140]	; (800ae14 <TIM_OC1_SetConfig+0xf0>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d003      	beq.n	800ad94 <TIM_OC1_SetConfig+0x70>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	4a22      	ldr	r2, [pc, #136]	; (800ae18 <TIM_OC1_SetConfig+0xf4>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d10c      	bne.n	800adae <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	f023 0308 	bic.w	r3, r3, #8
 800ad9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	68db      	ldr	r3, [r3, #12]
 800ada0:	697a      	ldr	r2, [r7, #20]
 800ada2:	4313      	orrs	r3, r2
 800ada4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	f023 0304 	bic.w	r3, r3, #4
 800adac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	4a17      	ldr	r2, [pc, #92]	; (800ae10 <TIM_OC1_SetConfig+0xec>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d007      	beq.n	800adc6 <TIM_OC1_SetConfig+0xa2>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	4a17      	ldr	r2, [pc, #92]	; (800ae18 <TIM_OC1_SetConfig+0xf4>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d003      	beq.n	800adc6 <TIM_OC1_SetConfig+0xa2>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	4a14      	ldr	r2, [pc, #80]	; (800ae14 <TIM_OC1_SetConfig+0xf0>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d111      	bne.n	800adea <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800adcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800add4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	695b      	ldr	r3, [r3, #20]
 800adda:	693a      	ldr	r2, [r7, #16]
 800addc:	4313      	orrs	r3, r2
 800adde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	699b      	ldr	r3, [r3, #24]
 800ade4:	693a      	ldr	r2, [r7, #16]
 800ade6:	4313      	orrs	r3, r2
 800ade8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	693a      	ldr	r2, [r7, #16]
 800adee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	68fa      	ldr	r2, [r7, #12]
 800adf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	685a      	ldr	r2, [r3, #4]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	697a      	ldr	r2, [r7, #20]
 800ae02:	621a      	str	r2, [r3, #32]
}
 800ae04:	bf00      	nop
 800ae06:	371c      	adds	r7, #28
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr
 800ae10:	40012c00 	.word	0x40012c00
 800ae14:	40014800 	.word	0x40014800
 800ae18:	40014400 	.word	0x40014400

0800ae1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b087      	sub	sp, #28
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6a1b      	ldr	r3, [r3, #32]
 800ae2a:	f023 0210 	bic.w	r2, r3, #16
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6a1b      	ldr	r3, [r3, #32]
 800ae36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	699b      	ldr	r3, [r3, #24]
 800ae42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	021b      	lsls	r3, r3, #8
 800ae5e:	68fa      	ldr	r2, [r7, #12]
 800ae60:	4313      	orrs	r3, r2
 800ae62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	f023 0320 	bic.w	r3, r3, #32
 800ae6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	011b      	lsls	r3, r3, #4
 800ae72:	697a      	ldr	r2, [r7, #20]
 800ae74:	4313      	orrs	r3, r2
 800ae76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	4a22      	ldr	r2, [pc, #136]	; (800af04 <TIM_OC2_SetConfig+0xe8>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d10d      	bne.n	800ae9c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	68db      	ldr	r3, [r3, #12]
 800ae8c:	011b      	lsls	r3, r3, #4
 800ae8e:	697a      	ldr	r2, [r7, #20]
 800ae90:	4313      	orrs	r3, r2
 800ae92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	4a19      	ldr	r2, [pc, #100]	; (800af04 <TIM_OC2_SetConfig+0xe8>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d007      	beq.n	800aeb4 <TIM_OC2_SetConfig+0x98>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	4a18      	ldr	r2, [pc, #96]	; (800af08 <TIM_OC2_SetConfig+0xec>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d003      	beq.n	800aeb4 <TIM_OC2_SetConfig+0x98>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	4a17      	ldr	r2, [pc, #92]	; (800af0c <TIM_OC2_SetConfig+0xf0>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d113      	bne.n	800aedc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aeba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aec2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	695b      	ldr	r3, [r3, #20]
 800aec8:	009b      	lsls	r3, r3, #2
 800aeca:	693a      	ldr	r2, [r7, #16]
 800aecc:	4313      	orrs	r3, r2
 800aece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	699b      	ldr	r3, [r3, #24]
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	693a      	ldr	r2, [r7, #16]
 800aed8:	4313      	orrs	r3, r2
 800aeda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	693a      	ldr	r2, [r7, #16]
 800aee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	685a      	ldr	r2, [r3, #4]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	697a      	ldr	r2, [r7, #20]
 800aef4:	621a      	str	r2, [r3, #32]
}
 800aef6:	bf00      	nop
 800aef8:	371c      	adds	r7, #28
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr
 800af02:	bf00      	nop
 800af04:	40012c00 	.word	0x40012c00
 800af08:	40014400 	.word	0x40014400
 800af0c:	40014800 	.word	0x40014800

0800af10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af10:	b480      	push	{r7}
 800af12:	b087      	sub	sp, #28
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6a1b      	ldr	r3, [r3, #32]
 800af1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6a1b      	ldr	r3, [r3, #32]
 800af2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	69db      	ldr	r3, [r3, #28]
 800af36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f023 0303 	bic.w	r3, r3, #3
 800af4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	68fa      	ldr	r2, [r7, #12]
 800af52:	4313      	orrs	r3, r2
 800af54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800af5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	021b      	lsls	r3, r3, #8
 800af64:	697a      	ldr	r2, [r7, #20]
 800af66:	4313      	orrs	r3, r2
 800af68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	4a21      	ldr	r2, [pc, #132]	; (800aff4 <TIM_OC3_SetConfig+0xe4>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d10d      	bne.n	800af8e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800af78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	68db      	ldr	r3, [r3, #12]
 800af7e:	021b      	lsls	r3, r3, #8
 800af80:	697a      	ldr	r2, [r7, #20]
 800af82:	4313      	orrs	r3, r2
 800af84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800af8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	4a18      	ldr	r2, [pc, #96]	; (800aff4 <TIM_OC3_SetConfig+0xe4>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d007      	beq.n	800afa6 <TIM_OC3_SetConfig+0x96>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	4a17      	ldr	r2, [pc, #92]	; (800aff8 <TIM_OC3_SetConfig+0xe8>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d003      	beq.n	800afa6 <TIM_OC3_SetConfig+0x96>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	4a16      	ldr	r2, [pc, #88]	; (800affc <TIM_OC3_SetConfig+0xec>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d113      	bne.n	800afce <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800afac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800afb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	695b      	ldr	r3, [r3, #20]
 800afba:	011b      	lsls	r3, r3, #4
 800afbc:	693a      	ldr	r2, [r7, #16]
 800afbe:	4313      	orrs	r3, r2
 800afc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	699b      	ldr	r3, [r3, #24]
 800afc6:	011b      	lsls	r3, r3, #4
 800afc8:	693a      	ldr	r2, [r7, #16]
 800afca:	4313      	orrs	r3, r2
 800afcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	693a      	ldr	r2, [r7, #16]
 800afd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	68fa      	ldr	r2, [r7, #12]
 800afd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	685a      	ldr	r2, [r3, #4]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	697a      	ldr	r2, [r7, #20]
 800afe6:	621a      	str	r2, [r3, #32]
}
 800afe8:	bf00      	nop
 800afea:	371c      	adds	r7, #28
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr
 800aff4:	40012c00 	.word	0x40012c00
 800aff8:	40014400 	.word	0x40014400
 800affc:	40014800 	.word	0x40014800

0800b000 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b000:	b480      	push	{r7}
 800b002:	b087      	sub	sp, #28
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6a1b      	ldr	r3, [r3, #32]
 800b00e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a1b      	ldr	r3, [r3, #32]
 800b01a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	69db      	ldr	r3, [r3, #28]
 800b026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b02e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b03a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	021b      	lsls	r3, r3, #8
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	4313      	orrs	r3, r2
 800b046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b04e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	689b      	ldr	r3, [r3, #8]
 800b054:	031b      	lsls	r3, r3, #12
 800b056:	693a      	ldr	r2, [r7, #16]
 800b058:	4313      	orrs	r3, r2
 800b05a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	4a14      	ldr	r2, [pc, #80]	; (800b0b0 <TIM_OC4_SetConfig+0xb0>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d007      	beq.n	800b074 <TIM_OC4_SetConfig+0x74>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	4a13      	ldr	r2, [pc, #76]	; (800b0b4 <TIM_OC4_SetConfig+0xb4>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d003      	beq.n	800b074 <TIM_OC4_SetConfig+0x74>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	4a12      	ldr	r2, [pc, #72]	; (800b0b8 <TIM_OC4_SetConfig+0xb8>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d109      	bne.n	800b088 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b07a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	695b      	ldr	r3, [r3, #20]
 800b080:	019b      	lsls	r3, r3, #6
 800b082:	697a      	ldr	r2, [r7, #20]
 800b084:	4313      	orrs	r3, r2
 800b086:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	697a      	ldr	r2, [r7, #20]
 800b08c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	68fa      	ldr	r2, [r7, #12]
 800b092:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	685a      	ldr	r2, [r3, #4]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	693a      	ldr	r2, [r7, #16]
 800b0a0:	621a      	str	r2, [r3, #32]
}
 800b0a2:	bf00      	nop
 800b0a4:	371c      	adds	r7, #28
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop
 800b0b0:	40012c00 	.word	0x40012c00
 800b0b4:	40014400 	.word	0x40014400
 800b0b8:	40014800 	.word	0x40014800

0800b0bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b087      	sub	sp, #28
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6a1b      	ldr	r3, [r3, #32]
 800b0ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6a1b      	ldr	r3, [r3, #32]
 800b0d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b0ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	68fa      	ldr	r2, [r7, #12]
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b100:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	689b      	ldr	r3, [r3, #8]
 800b106:	041b      	lsls	r3, r3, #16
 800b108:	693a      	ldr	r2, [r7, #16]
 800b10a:	4313      	orrs	r3, r2
 800b10c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	4a13      	ldr	r2, [pc, #76]	; (800b160 <TIM_OC5_SetConfig+0xa4>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d007      	beq.n	800b126 <TIM_OC5_SetConfig+0x6a>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	4a12      	ldr	r2, [pc, #72]	; (800b164 <TIM_OC5_SetConfig+0xa8>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d003      	beq.n	800b126 <TIM_OC5_SetConfig+0x6a>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	4a11      	ldr	r2, [pc, #68]	; (800b168 <TIM_OC5_SetConfig+0xac>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d109      	bne.n	800b13a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b12c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	695b      	ldr	r3, [r3, #20]
 800b132:	021b      	lsls	r3, r3, #8
 800b134:	697a      	ldr	r2, [r7, #20]
 800b136:	4313      	orrs	r3, r2
 800b138:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	697a      	ldr	r2, [r7, #20]
 800b13e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	685a      	ldr	r2, [r3, #4]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	693a      	ldr	r2, [r7, #16]
 800b152:	621a      	str	r2, [r3, #32]
}
 800b154:	bf00      	nop
 800b156:	371c      	adds	r7, #28
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr
 800b160:	40012c00 	.word	0x40012c00
 800b164:	40014400 	.word	0x40014400
 800b168:	40014800 	.word	0x40014800

0800b16c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b087      	sub	sp, #28
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6a1b      	ldr	r3, [r3, #32]
 800b17a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6a1b      	ldr	r3, [r3, #32]
 800b186:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b19a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b19e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	021b      	lsls	r3, r3, #8
 800b1a6:	68fa      	ldr	r2, [r7, #12]
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b1b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	689b      	ldr	r3, [r3, #8]
 800b1b8:	051b      	lsls	r3, r3, #20
 800b1ba:	693a      	ldr	r2, [r7, #16]
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	4a14      	ldr	r2, [pc, #80]	; (800b214 <TIM_OC6_SetConfig+0xa8>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d007      	beq.n	800b1d8 <TIM_OC6_SetConfig+0x6c>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	4a13      	ldr	r2, [pc, #76]	; (800b218 <TIM_OC6_SetConfig+0xac>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d003      	beq.n	800b1d8 <TIM_OC6_SetConfig+0x6c>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4a12      	ldr	r2, [pc, #72]	; (800b21c <TIM_OC6_SetConfig+0xb0>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d109      	bne.n	800b1ec <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b1de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	695b      	ldr	r3, [r3, #20]
 800b1e4:	029b      	lsls	r3, r3, #10
 800b1e6:	697a      	ldr	r2, [r7, #20]
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	697a      	ldr	r2, [r7, #20]
 800b1f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	68fa      	ldr	r2, [r7, #12]
 800b1f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	685a      	ldr	r2, [r3, #4]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	693a      	ldr	r2, [r7, #16]
 800b204:	621a      	str	r2, [r3, #32]
}
 800b206:	bf00      	nop
 800b208:	371c      	adds	r7, #28
 800b20a:	46bd      	mov	sp, r7
 800b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b210:	4770      	bx	lr
 800b212:	bf00      	nop
 800b214:	40012c00 	.word	0x40012c00
 800b218:	40014400 	.word	0x40014400
 800b21c:	40014800 	.word	0x40014800

0800b220 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b220:	b480      	push	{r7}
 800b222:	b087      	sub	sp, #28
 800b224:	af00      	add	r7, sp, #0
 800b226:	60f8      	str	r0, [r7, #12]
 800b228:	60b9      	str	r1, [r7, #8]
 800b22a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	6a1b      	ldr	r3, [r3, #32]
 800b230:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	6a1b      	ldr	r3, [r3, #32]
 800b236:	f023 0201 	bic.w	r2, r3, #1
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	699b      	ldr	r3, [r3, #24]
 800b242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b24a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	011b      	lsls	r3, r3, #4
 800b250:	693a      	ldr	r2, [r7, #16]
 800b252:	4313      	orrs	r3, r2
 800b254:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	f023 030a 	bic.w	r3, r3, #10
 800b25c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b25e:	697a      	ldr	r2, [r7, #20]
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	4313      	orrs	r3, r2
 800b264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	693a      	ldr	r2, [r7, #16]
 800b26a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	697a      	ldr	r2, [r7, #20]
 800b270:	621a      	str	r2, [r3, #32]
}
 800b272:	bf00      	nop
 800b274:	371c      	adds	r7, #28
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr

0800b27e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b27e:	b480      	push	{r7}
 800b280:	b087      	sub	sp, #28
 800b282:	af00      	add	r7, sp, #0
 800b284:	60f8      	str	r0, [r7, #12]
 800b286:	60b9      	str	r1, [r7, #8]
 800b288:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	6a1b      	ldr	r3, [r3, #32]
 800b28e:	f023 0210 	bic.w	r2, r3, #16
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	699b      	ldr	r3, [r3, #24]
 800b29a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	6a1b      	ldr	r3, [r3, #32]
 800b2a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b2a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	031b      	lsls	r3, r3, #12
 800b2ae:	697a      	ldr	r2, [r7, #20]
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b2ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	011b      	lsls	r3, r3, #4
 800b2c0:	693a      	ldr	r2, [r7, #16]
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	697a      	ldr	r2, [r7, #20]
 800b2ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	693a      	ldr	r2, [r7, #16]
 800b2d0:	621a      	str	r2, [r3, #32]
}
 800b2d2:	bf00      	nop
 800b2d4:	371c      	adds	r7, #28
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr

0800b2de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b2de:	b480      	push	{r7}
 800b2e0:	b085      	sub	sp, #20
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6078      	str	r0, [r7, #4]
 800b2e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b2f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b2fa:	683a      	ldr	r2, [r7, #0]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	4313      	orrs	r3, r2
 800b300:	f043 0307 	orr.w	r3, r3, #7
 800b304:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	68fa      	ldr	r2, [r7, #12]
 800b30a:	609a      	str	r2, [r3, #8]
}
 800b30c:	bf00      	nop
 800b30e:	3714      	adds	r7, #20
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b318:	b480      	push	{r7}
 800b31a:	b087      	sub	sp, #28
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	60b9      	str	r1, [r7, #8]
 800b322:	607a      	str	r2, [r7, #4]
 800b324:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	689b      	ldr	r3, [r3, #8]
 800b32a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b332:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	021a      	lsls	r2, r3, #8
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	431a      	orrs	r2, r3
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	4313      	orrs	r3, r2
 800b340:	697a      	ldr	r2, [r7, #20]
 800b342:	4313      	orrs	r3, r2
 800b344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	697a      	ldr	r2, [r7, #20]
 800b34a:	609a      	str	r2, [r3, #8]
}
 800b34c:	bf00      	nop
 800b34e:	371c      	adds	r7, #28
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b358:	b480      	push	{r7}
 800b35a:	b087      	sub	sp, #28
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	60f8      	str	r0, [r7, #12]
 800b360:	60b9      	str	r1, [r7, #8]
 800b362:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	f003 031f 	and.w	r3, r3, #31
 800b36a:	2201      	movs	r2, #1
 800b36c:	fa02 f303 	lsl.w	r3, r2, r3
 800b370:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	6a1a      	ldr	r2, [r3, #32]
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	43db      	mvns	r3, r3
 800b37a:	401a      	ands	r2, r3
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	6a1a      	ldr	r2, [r3, #32]
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	f003 031f 	and.w	r3, r3, #31
 800b38a:	6879      	ldr	r1, [r7, #4]
 800b38c:	fa01 f303 	lsl.w	r3, r1, r3
 800b390:	431a      	orrs	r2, r3
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	621a      	str	r2, [r3, #32]
}
 800b396:	bf00      	nop
 800b398:	371c      	adds	r7, #28
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr
	...

0800b3a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b085      	sub	sp, #20
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d101      	bne.n	800b3bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b3b8:	2302      	movs	r3, #2
 800b3ba:	e04a      	b.n	800b452 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2201      	movs	r2, #1
 800b3c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2202      	movs	r2, #2
 800b3c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	689b      	ldr	r3, [r3, #8]
 800b3da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a1f      	ldr	r2, [pc, #124]	; (800b460 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d108      	bne.n	800b3f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b3ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	68fa      	ldr	r2, [r7, #12]
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	68fa      	ldr	r2, [r7, #12]
 800b406:	4313      	orrs	r3, r2
 800b408:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	68fa      	ldr	r2, [r7, #12]
 800b410:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a12      	ldr	r2, [pc, #72]	; (800b460 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d004      	beq.n	800b426 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b424:	d10c      	bne.n	800b440 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b42c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	689b      	ldr	r3, [r3, #8]
 800b432:	68ba      	ldr	r2, [r7, #8]
 800b434:	4313      	orrs	r3, r2
 800b436:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	68ba      	ldr	r2, [r7, #8]
 800b43e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2201      	movs	r2, #1
 800b444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2200      	movs	r2, #0
 800b44c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b450:	2300      	movs	r3, #0
}
 800b452:	4618      	mov	r0, r3
 800b454:	3714      	adds	r7, #20
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr
 800b45e:	bf00      	nop
 800b460:	40012c00 	.word	0x40012c00

0800b464 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b464:	b480      	push	{r7}
 800b466:	b085      	sub	sp, #20
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b46e:	2300      	movs	r3, #0
 800b470:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b478:	2b01      	cmp	r3, #1
 800b47a:	d101      	bne.n	800b480 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b47c:	2302      	movs	r3, #2
 800b47e:	e078      	b.n	800b572 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2201      	movs	r2, #1
 800b484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	4313      	orrs	r3, r2
 800b494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	689b      	ldr	r3, [r3, #8]
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	691b      	ldr	r3, [r3, #16]
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	695b      	ldr	r3, [r3, #20]
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	699b      	ldr	r3, [r3, #24]
 800b4f4:	041b      	lsls	r3, r3, #16
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a20      	ldr	r2, [pc, #128]	; (800b580 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d106      	bne.n	800b512 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	69db      	ldr	r3, [r3, #28]
 800b50e:	4313      	orrs	r3, r2
 800b510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4a1a      	ldr	r2, [pc, #104]	; (800b580 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d121      	bne.n	800b560 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b526:	051b      	lsls	r3, r3, #20
 800b528:	4313      	orrs	r3, r2
 800b52a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	6a1b      	ldr	r3, [r3, #32]
 800b536:	4313      	orrs	r3, r2
 800b538:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b544:	4313      	orrs	r3, r2
 800b546:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4a0c      	ldr	r2, [pc, #48]	; (800b580 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d106      	bne.n	800b560 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b55c:	4313      	orrs	r3, r2
 800b55e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	68fa      	ldr	r2, [r7, #12]
 800b566:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2200      	movs	r2, #0
 800b56c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b570:	2300      	movs	r3, #0
}
 800b572:	4618      	mov	r0, r3
 800b574:	3714      	adds	r7, #20
 800b576:	46bd      	mov	sp, r7
 800b578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57c:	4770      	bx	lr
 800b57e:	bf00      	nop
 800b580:	40012c00 	.word	0x40012c00

0800b584 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b584:	b480      	push	{r7}
 800b586:	b083      	sub	sp, #12
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b58c:	bf00      	nop
 800b58e:	370c      	adds	r7, #12
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr

0800b598 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b5a0:	bf00      	nop
 800b5a2:	370c      	adds	r7, #12
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b083      	sub	sp, #12
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b5b4:	bf00      	nop
 800b5b6:	370c      	adds	r7, #12
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr

0800b5c0 <LL_RCC_GetUSARTClockSource>:
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b083      	sub	sp, #12
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800b5c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b5cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	4013      	ands	r3, r2
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	370c      	adds	r7, #12
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <LL_RCC_GetLPUARTClockSource>:
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800b5e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b5ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4013      	ands	r3, r2
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	370c      	adds	r7, #12
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b082      	sub	sp, #8
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d101      	bne.n	800b612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b60e:	2301      	movs	r3, #1
 800b610:	e042      	b.n	800b698 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d106      	bne.n	800b62a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f7fa f907 	bl	8005838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2224      	movs	r2, #36	; 0x24
 800b62e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	681a      	ldr	r2, [r3, #0]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f022 0201 	bic.w	r2, r2, #1
 800b640:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 f8c0 	bl	800b7c8 <UART_SetConfig>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b01      	cmp	r3, #1
 800b64c:	d101      	bne.n	800b652 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b64e:	2301      	movs	r3, #1
 800b650:	e022      	b.n	800b698 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b656:	2b00      	cmp	r3, #0
 800b658:	d002      	beq.n	800b660 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 fac2 	bl	800bbe4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	685a      	ldr	r2, [r3, #4]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b66e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	689a      	ldr	r2, [r3, #8]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b67e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f042 0201 	orr.w	r2, r2, #1
 800b68e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 fb49 	bl	800bd28 <UART_CheckIdleState>
 800b696:	4603      	mov	r3, r0
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3708      	adds	r7, #8
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b084      	sub	sp, #16
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	4613      	mov	r3, r2
 800b6ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6b4:	2b20      	cmp	r3, #32
 800b6b6:	d168      	bne.n	800b78a <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d002      	beq.n	800b6c4 <HAL_UART_Transmit_DMA+0x24>
 800b6be:	88fb      	ldrh	r3, [r7, #6]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d101      	bne.n	800b6c8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	e061      	b.n	800b78c <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	d101      	bne.n	800b6d6 <HAL_UART_Transmit_DMA+0x36>
 800b6d2:	2302      	movs	r3, #2
 800b6d4:	e05a      	b.n	800b78c <HAL_UART_Transmit_DMA+0xec>
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	68ba      	ldr	r2, [r7, #8]
 800b6e2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	88fa      	ldrh	r2, [r7, #6]
 800b6e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	88fa      	ldrh	r2, [r7, #6]
 800b6f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2221      	movs	r2, #33	; 0x21
 800b700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d02c      	beq.n	800b766 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b710:	4a20      	ldr	r2, [pc, #128]	; (800b794 <HAL_UART_Transmit_DMA+0xf4>)
 800b712:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b718:	4a1f      	ldr	r2, [pc, #124]	; (800b798 <HAL_UART_Transmit_DMA+0xf8>)
 800b71a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b720:	4a1e      	ldr	r2, [pc, #120]	; (800b79c <HAL_UART_Transmit_DMA+0xfc>)
 800b722:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b728:	2200      	movs	r2, #0
 800b72a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b734:	4619      	mov	r1, r3
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	3328      	adds	r3, #40	; 0x28
 800b73c:	461a      	mov	r2, r3
 800b73e:	88fb      	ldrh	r3, [r7, #6]
 800b740:	f7fa fe64 	bl	800640c <HAL_DMA_Start_IT>
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d00d      	beq.n	800b766 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2210      	movs	r2, #16
 800b74e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2200      	movs	r2, #0
 800b756:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2220      	movs	r2, #32
 800b75e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800b762:	2301      	movs	r3, #1
 800b764:	e012      	b.n	800b78c <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	2240      	movs	r2, #64	; 0x40
 800b76c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2200      	movs	r2, #0
 800b772:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	689a      	ldr	r2, [r3, #8]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b784:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800b786:	2300      	movs	r3, #0
 800b788:	e000      	b.n	800b78c <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800b78a:	2302      	movs	r3, #2
  }
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3710      	adds	r7, #16
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}
 800b794:	0800bf3b 	.word	0x0800bf3b
 800b798:	0800bf8f 	.word	0x0800bf8f
 800b79c:	0800bfab 	.word	0x0800bfab

0800b7a0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b083      	sub	sp, #12
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b7a8:	bf00      	nop
 800b7aa:	370c      	adds	r7, #12
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr

0800b7b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b083      	sub	sp, #12
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b7bc:	bf00      	nop
 800b7be:	370c      	adds	r7, #12
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr

0800b7c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b7c8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800b7cc:	b088      	sub	sp, #32
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	689a      	ldr	r2, [r3, #8]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	691b      	ldr	r3, [r3, #16]
 800b7de:	431a      	orrs	r2, r3
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	695b      	ldr	r3, [r3, #20]
 800b7e4:	431a      	orrs	r2, r3
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	69db      	ldr	r3, [r3, #28]
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7f2:	69fa      	ldr	r2, [r7, #28]
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	681a      	ldr	r2, [r3, #0]
 800b7fe:	4ba4      	ldr	r3, [pc, #656]	; (800ba90 <UART_SetConfig+0x2c8>)
 800b800:	4013      	ands	r3, r2
 800b802:	687a      	ldr	r2, [r7, #4]
 800b804:	6812      	ldr	r2, [r2, #0]
 800b806:	69f9      	ldr	r1, [r7, #28]
 800b808:	430b      	orrs	r3, r1
 800b80a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	68da      	ldr	r2, [r3, #12]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	430a      	orrs	r2, r1
 800b820:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	699b      	ldr	r3, [r3, #24]
 800b826:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4a99      	ldr	r2, [pc, #612]	; (800ba94 <UART_SetConfig+0x2cc>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d004      	beq.n	800b83c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6a1b      	ldr	r3, [r3, #32]
 800b836:	69fa      	ldr	r2, [r7, #28]
 800b838:	4313      	orrs	r3, r2
 800b83a:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	689b      	ldr	r3, [r3, #8]
 800b842:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b846:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b84a:	687a      	ldr	r2, [r7, #4]
 800b84c:	6812      	ldr	r2, [r2, #0]
 800b84e:	69f9      	ldr	r1, [r7, #28]
 800b850:	430b      	orrs	r3, r1
 800b852:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b85a:	f023 010f 	bic.w	r1, r3, #15
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	430a      	orrs	r2, r1
 800b868:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a8a      	ldr	r2, [pc, #552]	; (800ba98 <UART_SetConfig+0x2d0>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d121      	bne.n	800b8b8 <UART_SetConfig+0xf0>
 800b874:	2003      	movs	r0, #3
 800b876:	f7ff fea3 	bl	800b5c0 <LL_RCC_GetUSARTClockSource>
 800b87a:	4603      	mov	r3, r0
 800b87c:	2b03      	cmp	r3, #3
 800b87e:	d817      	bhi.n	800b8b0 <UART_SetConfig+0xe8>
 800b880:	a201      	add	r2, pc, #4	; (adr r2, 800b888 <UART_SetConfig+0xc0>)
 800b882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b886:	bf00      	nop
 800b888:	0800b899 	.word	0x0800b899
 800b88c:	0800b8a5 	.word	0x0800b8a5
 800b890:	0800b89f 	.word	0x0800b89f
 800b894:	0800b8ab 	.word	0x0800b8ab
 800b898:	2301      	movs	r3, #1
 800b89a:	76fb      	strb	r3, [r7, #27]
 800b89c:	e038      	b.n	800b910 <UART_SetConfig+0x148>
 800b89e:	2302      	movs	r3, #2
 800b8a0:	76fb      	strb	r3, [r7, #27]
 800b8a2:	e035      	b.n	800b910 <UART_SetConfig+0x148>
 800b8a4:	2304      	movs	r3, #4
 800b8a6:	76fb      	strb	r3, [r7, #27]
 800b8a8:	e032      	b.n	800b910 <UART_SetConfig+0x148>
 800b8aa:	2308      	movs	r3, #8
 800b8ac:	76fb      	strb	r3, [r7, #27]
 800b8ae:	e02f      	b.n	800b910 <UART_SetConfig+0x148>
 800b8b0:	2310      	movs	r3, #16
 800b8b2:	76fb      	strb	r3, [r7, #27]
 800b8b4:	bf00      	nop
 800b8b6:	e02b      	b.n	800b910 <UART_SetConfig+0x148>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4a75      	ldr	r2, [pc, #468]	; (800ba94 <UART_SetConfig+0x2cc>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d124      	bne.n	800b90c <UART_SetConfig+0x144>
 800b8c2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b8c6:	f7ff fe8b 	bl	800b5e0 <LL_RCC_GetLPUARTClockSource>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8d0:	d012      	beq.n	800b8f8 <UART_SetConfig+0x130>
 800b8d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8d6:	d802      	bhi.n	800b8de <UART_SetConfig+0x116>
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d007      	beq.n	800b8ec <UART_SetConfig+0x124>
 800b8dc:	e012      	b.n	800b904 <UART_SetConfig+0x13c>
 800b8de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8e2:	d006      	beq.n	800b8f2 <UART_SetConfig+0x12a>
 800b8e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b8e8:	d009      	beq.n	800b8fe <UART_SetConfig+0x136>
 800b8ea:	e00b      	b.n	800b904 <UART_SetConfig+0x13c>
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	76fb      	strb	r3, [r7, #27]
 800b8f0:	e00e      	b.n	800b910 <UART_SetConfig+0x148>
 800b8f2:	2302      	movs	r3, #2
 800b8f4:	76fb      	strb	r3, [r7, #27]
 800b8f6:	e00b      	b.n	800b910 <UART_SetConfig+0x148>
 800b8f8:	2304      	movs	r3, #4
 800b8fa:	76fb      	strb	r3, [r7, #27]
 800b8fc:	e008      	b.n	800b910 <UART_SetConfig+0x148>
 800b8fe:	2308      	movs	r3, #8
 800b900:	76fb      	strb	r3, [r7, #27]
 800b902:	e005      	b.n	800b910 <UART_SetConfig+0x148>
 800b904:	2310      	movs	r3, #16
 800b906:	76fb      	strb	r3, [r7, #27]
 800b908:	bf00      	nop
 800b90a:	e001      	b.n	800b910 <UART_SetConfig+0x148>
 800b90c:	2310      	movs	r3, #16
 800b90e:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	4a5f      	ldr	r2, [pc, #380]	; (800ba94 <UART_SetConfig+0x2cc>)
 800b916:	4293      	cmp	r3, r2
 800b918:	f040 808e 	bne.w	800ba38 <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b91c:	7efb      	ldrb	r3, [r7, #27]
 800b91e:	2b08      	cmp	r3, #8
 800b920:	d823      	bhi.n	800b96a <UART_SetConfig+0x1a2>
 800b922:	a201      	add	r2, pc, #4	; (adr r2, 800b928 <UART_SetConfig+0x160>)
 800b924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b928:	0800b94d 	.word	0x0800b94d
 800b92c:	0800b96b 	.word	0x0800b96b
 800b930:	0800b955 	.word	0x0800b955
 800b934:	0800b96b 	.word	0x0800b96b
 800b938:	0800b95b 	.word	0x0800b95b
 800b93c:	0800b96b 	.word	0x0800b96b
 800b940:	0800b96b 	.word	0x0800b96b
 800b944:	0800b96b 	.word	0x0800b96b
 800b948:	0800b963 	.word	0x0800b963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b94c:	f7fc ffe8 	bl	8008920 <HAL_RCC_GetPCLK1Freq>
 800b950:	6178      	str	r0, [r7, #20]
        break;
 800b952:	e00f      	b.n	800b974 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b954:	4b51      	ldr	r3, [pc, #324]	; (800ba9c <UART_SetConfig+0x2d4>)
 800b956:	617b      	str	r3, [r7, #20]
        break;
 800b958:	e00c      	b.n	800b974 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b95a:	f7fc ff63 	bl	8008824 <HAL_RCC_GetSysClockFreq>
 800b95e:	6178      	str	r0, [r7, #20]
        break;
 800b960:	e008      	b.n	800b974 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b966:	617b      	str	r3, [r7, #20]
        break;
 800b968:	e004      	b.n	800b974 <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 800b96a:	2300      	movs	r3, #0
 800b96c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800b96e:	2301      	movs	r3, #1
 800b970:	76bb      	strb	r3, [r7, #26]
        break;
 800b972:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	2b00      	cmp	r3, #0
 800b978:	f000 811c 	beq.w	800bbb4 <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b980:	4a47      	ldr	r2, [pc, #284]	; (800baa0 <UART_SetConfig+0x2d8>)
 800b982:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b986:	461a      	mov	r2, r3
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b98e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	685a      	ldr	r2, [r3, #4]
 800b994:	4613      	mov	r3, r2
 800b996:	005b      	lsls	r3, r3, #1
 800b998:	4413      	add	r3, r2
 800b99a:	68ba      	ldr	r2, [r7, #8]
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d305      	bcc.n	800b9ac <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b9a6:	68ba      	ldr	r2, [r7, #8]
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d902      	bls.n	800b9b2 <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	76bb      	strb	r3, [r7, #26]
 800b9b0:	e100      	b.n	800bbb4 <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f04f 0100 	mov.w	r1, #0
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9be:	4a38      	ldr	r2, [pc, #224]	; (800baa0 <UART_SetConfig+0x2d8>)
 800b9c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	f04f 0400 	mov.w	r4, #0
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	4623      	mov	r3, r4
 800b9ce:	f7f5 f8c3 	bl	8000b58 <__aeabi_uldivmod>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	460c      	mov	r4, r1
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	4622      	mov	r2, r4
 800b9da:	f04f 0300 	mov.w	r3, #0
 800b9de:	f04f 0400 	mov.w	r4, #0
 800b9e2:	0214      	lsls	r4, r2, #8
 800b9e4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800b9e8:	020b      	lsls	r3, r1, #8
 800b9ea:	687a      	ldr	r2, [r7, #4]
 800b9ec:	6852      	ldr	r2, [r2, #4]
 800b9ee:	0852      	lsrs	r2, r2, #1
 800b9f0:	4611      	mov	r1, r2
 800b9f2:	f04f 0200 	mov.w	r2, #0
 800b9f6:	eb13 0b01 	adds.w	fp, r3, r1
 800b9fa:	eb44 0c02 	adc.w	ip, r4, r2
 800b9fe:	4658      	mov	r0, fp
 800ba00:	4661      	mov	r1, ip
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	f04f 0400 	mov.w	r4, #0
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	4623      	mov	r3, r4
 800ba0e:	f7f5 f8a3 	bl	8000b58 <__aeabi_uldivmod>
 800ba12:	4603      	mov	r3, r0
 800ba14:	460c      	mov	r4, r1
 800ba16:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba1e:	d308      	bcc.n	800ba32 <UART_SetConfig+0x26a>
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba26:	d204      	bcs.n	800ba32 <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	693a      	ldr	r2, [r7, #16]
 800ba2e:	60da      	str	r2, [r3, #12]
 800ba30:	e0c0      	b.n	800bbb4 <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 800ba32:	2301      	movs	r3, #1
 800ba34:	76bb      	strb	r3, [r7, #26]
 800ba36:	e0bd      	b.n	800bbb4 <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	69db      	ldr	r3, [r3, #28]
 800ba3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba40:	d169      	bne.n	800bb16 <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800ba42:	7efb      	ldrb	r3, [r7, #27]
 800ba44:	3b01      	subs	r3, #1
 800ba46:	2b07      	cmp	r3, #7
 800ba48:	d82c      	bhi.n	800baa4 <UART_SetConfig+0x2dc>
 800ba4a:	a201      	add	r2, pc, #4	; (adr r2, 800ba50 <UART_SetConfig+0x288>)
 800ba4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba50:	0800ba71 	.word	0x0800ba71
 800ba54:	0800ba79 	.word	0x0800ba79
 800ba58:	0800baa5 	.word	0x0800baa5
 800ba5c:	0800ba7f 	.word	0x0800ba7f
 800ba60:	0800baa5 	.word	0x0800baa5
 800ba64:	0800baa5 	.word	0x0800baa5
 800ba68:	0800baa5 	.word	0x0800baa5
 800ba6c:	0800ba87 	.word	0x0800ba87
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba70:	f7fc ff6c 	bl	800894c <HAL_RCC_GetPCLK2Freq>
 800ba74:	6178      	str	r0, [r7, #20]
        break;
 800ba76:	e01a      	b.n	800baae <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ba78:	4b08      	ldr	r3, [pc, #32]	; (800ba9c <UART_SetConfig+0x2d4>)
 800ba7a:	617b      	str	r3, [r7, #20]
        break;
 800ba7c:	e017      	b.n	800baae <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ba7e:	f7fc fed1 	bl	8008824 <HAL_RCC_GetSysClockFreq>
 800ba82:	6178      	str	r0, [r7, #20]
        break;
 800ba84:	e013      	b.n	800baae <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba8a:	617b      	str	r3, [r7, #20]
        break;
 800ba8c:	e00f      	b.n	800baae <UART_SetConfig+0x2e6>
 800ba8e:	bf00      	nop
 800ba90:	cfff69f3 	.word	0xcfff69f3
 800ba94:	40008000 	.word	0x40008000
 800ba98:	40013800 	.word	0x40013800
 800ba9c:	00f42400 	.word	0x00f42400
 800baa0:	08017844 	.word	0x08017844
      default:
        pclk = 0U;
 800baa4:	2300      	movs	r3, #0
 800baa6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800baa8:	2301      	movs	r3, #1
 800baaa:	76bb      	strb	r3, [r7, #26]
        break;
 800baac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d07f      	beq.n	800bbb4 <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab8:	4a48      	ldr	r2, [pc, #288]	; (800bbdc <UART_SetConfig+0x414>)
 800baba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800babe:	461a      	mov	r2, r3
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	fbb3 f3f2 	udiv	r3, r3, r2
 800bac6:	005a      	lsls	r2, r3, #1
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	085b      	lsrs	r3, r3, #1
 800bace:	441a      	add	r2, r3
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bad8:	b29b      	uxth	r3, r3
 800bada:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	2b0f      	cmp	r3, #15
 800bae0:	d916      	bls.n	800bb10 <UART_SetConfig+0x348>
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bae8:	d212      	bcs.n	800bb10 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	b29b      	uxth	r3, r3
 800baee:	f023 030f 	bic.w	r3, r3, #15
 800baf2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	085b      	lsrs	r3, r3, #1
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	f003 0307 	and.w	r3, r3, #7
 800bafe:	b29a      	uxth	r2, r3
 800bb00:	89fb      	ldrh	r3, [r7, #14]
 800bb02:	4313      	orrs	r3, r2
 800bb04:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	89fa      	ldrh	r2, [r7, #14]
 800bb0c:	60da      	str	r2, [r3, #12]
 800bb0e:	e051      	b.n	800bbb4 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 800bb10:	2301      	movs	r3, #1
 800bb12:	76bb      	strb	r3, [r7, #26]
 800bb14:	e04e      	b.n	800bbb4 <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bb16:	7efb      	ldrb	r3, [r7, #27]
 800bb18:	3b01      	subs	r3, #1
 800bb1a:	2b07      	cmp	r3, #7
 800bb1c:	d821      	bhi.n	800bb62 <UART_SetConfig+0x39a>
 800bb1e:	a201      	add	r2, pc, #4	; (adr r2, 800bb24 <UART_SetConfig+0x35c>)
 800bb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb24:	0800bb45 	.word	0x0800bb45
 800bb28:	0800bb4d 	.word	0x0800bb4d
 800bb2c:	0800bb63 	.word	0x0800bb63
 800bb30:	0800bb53 	.word	0x0800bb53
 800bb34:	0800bb63 	.word	0x0800bb63
 800bb38:	0800bb63 	.word	0x0800bb63
 800bb3c:	0800bb63 	.word	0x0800bb63
 800bb40:	0800bb5b 	.word	0x0800bb5b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb44:	f7fc ff02 	bl	800894c <HAL_RCC_GetPCLK2Freq>
 800bb48:	6178      	str	r0, [r7, #20]
        break;
 800bb4a:	e00f      	b.n	800bb6c <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb4c:	4b24      	ldr	r3, [pc, #144]	; (800bbe0 <UART_SetConfig+0x418>)
 800bb4e:	617b      	str	r3, [r7, #20]
        break;
 800bb50:	e00c      	b.n	800bb6c <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb52:	f7fc fe67 	bl	8008824 <HAL_RCC_GetSysClockFreq>
 800bb56:	6178      	str	r0, [r7, #20]
        break;
 800bb58:	e008      	b.n	800bb6c <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb5e:	617b      	str	r3, [r7, #20]
        break;
 800bb60:	e004      	b.n	800bb6c <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 800bb62:	2300      	movs	r3, #0
 800bb64:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800bb66:	2301      	movs	r3, #1
 800bb68:	76bb      	strb	r3, [r7, #26]
        break;
 800bb6a:	bf00      	nop
    }

    if (pclk != 0U)
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d020      	beq.n	800bbb4 <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb76:	4a19      	ldr	r2, [pc, #100]	; (800bbdc <UART_SetConfig+0x414>)
 800bb78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	fbb3 f2f2 	udiv	r2, r3, r2
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	085b      	lsrs	r3, r3, #1
 800bb8a:	441a      	add	r2, r3
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb94:	b29b      	uxth	r3, r3
 800bb96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	2b0f      	cmp	r3, #15
 800bb9c:	d908      	bls.n	800bbb0 <UART_SetConfig+0x3e8>
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bba4:	d204      	bcs.n	800bbb0 <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	693a      	ldr	r2, [r7, #16]
 800bbac:	60da      	str	r2, [r3, #12]
 800bbae:	e001      	b.n	800bbb4 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800bbd0:	7ebb      	ldrb	r3, [r7, #26]
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3720      	adds	r7, #32
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800bbdc:	08017844 	.word	0x08017844
 800bbe0:	00f42400 	.word	0x00f42400

0800bbe4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b083      	sub	sp, #12
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbf0:	f003 0301 	and.w	r3, r3, #1
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d00a      	beq.n	800bc0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	430a      	orrs	r2, r1
 800bc0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc12:	f003 0302 	and.w	r3, r3, #2
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d00a      	beq.n	800bc30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	430a      	orrs	r2, r1
 800bc2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc34:	f003 0304 	and.w	r3, r3, #4
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d00a      	beq.n	800bc52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	685b      	ldr	r3, [r3, #4]
 800bc42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	430a      	orrs	r2, r1
 800bc50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc56:	f003 0308 	and.w	r3, r3, #8
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d00a      	beq.n	800bc74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	430a      	orrs	r2, r1
 800bc72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc78:	f003 0310 	and.w	r3, r3, #16
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d00a      	beq.n	800bc96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	689b      	ldr	r3, [r3, #8]
 800bc86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	430a      	orrs	r2, r1
 800bc94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc9a:	f003 0320 	and.w	r3, r3, #32
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d00a      	beq.n	800bcb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	689b      	ldr	r3, [r3, #8]
 800bca8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	430a      	orrs	r2, r1
 800bcb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d01a      	beq.n	800bcfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	685b      	ldr	r3, [r3, #4]
 800bcca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	430a      	orrs	r2, r1
 800bcd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bce2:	d10a      	bne.n	800bcfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	685b      	ldr	r3, [r3, #4]
 800bcea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	430a      	orrs	r2, r1
 800bcf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d00a      	beq.n	800bd1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	430a      	orrs	r2, r1
 800bd1a:	605a      	str	r2, [r3, #4]
  }
}
 800bd1c:	bf00      	nop
 800bd1e:	370c      	adds	r7, #12
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr

0800bd28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b086      	sub	sp, #24
 800bd2c:	af02      	add	r7, sp, #8
 800bd2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2200      	movs	r2, #0
 800bd34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800bd38:	f7fa f928 	bl	8005f8c <HAL_GetTick>
 800bd3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f003 0308 	and.w	r3, r3, #8
 800bd48:	2b08      	cmp	r3, #8
 800bd4a:	d10e      	bne.n	800bd6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bd50:	9300      	str	r3, [sp, #0]
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2200      	movs	r2, #0
 800bd56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 f82c 	bl	800bdb8 <UART_WaitOnFlagUntilTimeout>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d001      	beq.n	800bd6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd66:	2303      	movs	r3, #3
 800bd68:	e022      	b.n	800bdb0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f003 0304 	and.w	r3, r3, #4
 800bd74:	2b04      	cmp	r3, #4
 800bd76:	d10e      	bne.n	800bd96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bd7c:	9300      	str	r3, [sp, #0]
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2200      	movs	r2, #0
 800bd82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 f816 	bl	800bdb8 <UART_WaitOnFlagUntilTimeout>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d001      	beq.n	800bd96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd92:	2303      	movs	r3, #3
 800bd94:	e00c      	b.n	800bdb0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2220      	movs	r2, #32
 800bd9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2220      	movs	r2, #32
 800bda2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bdae:	2300      	movs	r3, #0
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3710      	adds	r7, #16
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}

0800bdb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	60f8      	str	r0, [r7, #12]
 800bdc0:	60b9      	str	r1, [r7, #8]
 800bdc2:	603b      	str	r3, [r7, #0]
 800bdc4:	4613      	mov	r3, r2
 800bdc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bdc8:	e062      	b.n	800be90 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bdca:	69bb      	ldr	r3, [r7, #24]
 800bdcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdd0:	d05e      	beq.n	800be90 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bdd2:	f7fa f8db 	bl	8005f8c <HAL_GetTick>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	1ad3      	subs	r3, r2, r3
 800bddc:	69ba      	ldr	r2, [r7, #24]
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d302      	bcc.n	800bde8 <UART_WaitOnFlagUntilTimeout+0x30>
 800bde2:	69bb      	ldr	r3, [r7, #24]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d11d      	bne.n	800be24 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	681a      	ldr	r2, [r3, #0]
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bdf6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	689a      	ldr	r2, [r3, #8]
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f022 0201 	bic.w	r2, r2, #1
 800be06:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2220      	movs	r2, #32
 800be0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	2220      	movs	r2, #32
 800be14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2200      	movs	r2, #0
 800be1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800be20:	2303      	movs	r3, #3
 800be22:	e045      	b.n	800beb0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f003 0304 	and.w	r3, r3, #4
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d02e      	beq.n	800be90 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	69db      	ldr	r3, [r3, #28]
 800be38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be40:	d126      	bne.n	800be90 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800be4a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	681a      	ldr	r2, [r3, #0]
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800be5a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	689a      	ldr	r2, [r3, #8]
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f022 0201 	bic.w	r2, r2, #1
 800be6a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2220      	movs	r2, #32
 800be70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	2220      	movs	r2, #32
 800be78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2220      	movs	r2, #32
 800be80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2200      	movs	r2, #0
 800be88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800be8c:	2303      	movs	r3, #3
 800be8e:	e00f      	b.n	800beb0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	69da      	ldr	r2, [r3, #28]
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	4013      	ands	r3, r2
 800be9a:	68ba      	ldr	r2, [r7, #8]
 800be9c:	429a      	cmp	r2, r3
 800be9e:	bf0c      	ite	eq
 800bea0:	2301      	moveq	r3, #1
 800bea2:	2300      	movne	r3, #0
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	461a      	mov	r2, r3
 800bea8:	79fb      	ldrb	r3, [r7, #7]
 800beaa:	429a      	cmp	r2, r3
 800beac:	d08d      	beq.n	800bdca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800beae:	2300      	movs	r3, #0
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3710      	adds	r7, #16
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800beb8:	b480      	push	{r7}
 800beba:	b083      	sub	sp, #12
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	681a      	ldr	r2, [r3, #0]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800bece:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	689a      	ldr	r2, [r3, #8]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800bede:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2220      	movs	r2, #32
 800bee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800bee8:	bf00      	nop
 800beea:	370c      	adds	r7, #12
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr

0800bef4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b083      	sub	sp, #12
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	681a      	ldr	r2, [r3, #0]
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bf0a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	689b      	ldr	r3, [r3, #8]
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	6812      	ldr	r2, [r2, #0]
 800bf16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf1a:	f023 0301 	bic.w	r3, r3, #1
 800bf1e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2220      	movs	r2, #32
 800bf24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800bf2e:	bf00      	nop
 800bf30:	370c      	adds	r7, #12
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr

0800bf3a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bf3a:	b580      	push	{r7, lr}
 800bf3c:	b084      	sub	sp, #16
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf46:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f003 0320 	and.w	r3, r3, #32
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d114      	bne.n	800bf80 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	689a      	ldr	r2, [r3, #8]
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf6c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf7c:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bf7e:	e002      	b.n	800bf86 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800bf80:	68f8      	ldr	r0, [r7, #12]
 800bf82:	f7f7 fdfb 	bl	8003b7c <HAL_UART_TxCpltCallback>
}
 800bf86:	bf00      	nop
 800bf88:	3710      	adds	r7, #16
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}

0800bf8e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bf8e:	b580      	push	{r7, lr}
 800bf90:	b084      	sub	sp, #16
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf9a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bf9c:	68f8      	ldr	r0, [r7, #12]
 800bf9e:	f7ff fbff 	bl	800b7a0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bfa2:	bf00      	nop
 800bfa4:	3710      	adds	r7, #16
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}

0800bfaa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bfaa:	b580      	push	{r7, lr}
 800bfac:	b086      	sub	sp, #24
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfb6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfbe:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfc6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfd2:	2b80      	cmp	r3, #128	; 0x80
 800bfd4:	d109      	bne.n	800bfea <UART_DMAError+0x40>
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	2b21      	cmp	r3, #33	; 0x21
 800bfda:	d106      	bne.n	800bfea <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800bfe4:	6978      	ldr	r0, [r7, #20]
 800bfe6:	f7ff ff67 	bl	800beb8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	689b      	ldr	r3, [r3, #8]
 800bff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bff4:	2b40      	cmp	r3, #64	; 0x40
 800bff6:	d109      	bne.n	800c00c <UART_DMAError+0x62>
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2b22      	cmp	r3, #34	; 0x22
 800bffc:	d106      	bne.n	800c00c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	2200      	movs	r2, #0
 800c002:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c006:	6978      	ldr	r0, [r7, #20]
 800c008:	f7ff ff74 	bl	800bef4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c012:	f043 0210 	orr.w	r2, r3, #16
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c01c:	6978      	ldr	r0, [r7, #20]
 800c01e:	f7ff fbc9 	bl	800b7b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c022:	bf00      	nop
 800c024:	3718      	adds	r7, #24
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}

0800c02a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c02a:	b480      	push	{r7}
 800c02c:	b085      	sub	sp, #20
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d101      	bne.n	800c040 <HAL_UARTEx_DisableFifoMode+0x16>
 800c03c:	2302      	movs	r3, #2
 800c03e:	e027      	b.n	800c090 <HAL_UARTEx_DisableFifoMode+0x66>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2201      	movs	r2, #1
 800c044:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2224      	movs	r2, #36	; 0x24
 800c04c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	681a      	ldr	r2, [r3, #0]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f022 0201 	bic.w	r2, r2, #1
 800c066:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c06e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2200      	movs	r2, #0
 800c074:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	68fa      	ldr	r2, [r7, #12]
 800c07c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2220      	movs	r2, #32
 800c082:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2200      	movs	r2, #0
 800c08a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c08e:	2300      	movs	r3, #0
}
 800c090:	4618      	mov	r0, r3
 800c092:	3714      	adds	r7, #20
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr

0800c09c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b084      	sub	sp, #16
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c0ac:	2b01      	cmp	r3, #1
 800c0ae:	d101      	bne.n	800c0b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c0b0:	2302      	movs	r3, #2
 800c0b2:	e02d      	b.n	800c110 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2224      	movs	r2, #36	; 0x24
 800c0c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f022 0201 	bic.w	r2, r2, #1
 800c0da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	689b      	ldr	r3, [r3, #8]
 800c0e2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	683a      	ldr	r2, [r7, #0]
 800c0ec:	430a      	orrs	r2, r1
 800c0ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 f84f 	bl	800c194 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	68fa      	ldr	r2, [r7, #12]
 800c0fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2220      	movs	r2, #32
 800c102:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2200      	movs	r2, #0
 800c10a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c10e:	2300      	movs	r3, #0
}
 800c110:	4618      	mov	r0, r3
 800c112:	3710      	adds	r7, #16
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}

0800c118 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d101      	bne.n	800c130 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c12c:	2302      	movs	r3, #2
 800c12e:	e02d      	b.n	800c18c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2201      	movs	r2, #1
 800c134:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2224      	movs	r2, #36	; 0x24
 800c13c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	681a      	ldr	r2, [r3, #0]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f022 0201 	bic.w	r2, r2, #1
 800c156:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	689b      	ldr	r3, [r3, #8]
 800c15e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	683a      	ldr	r2, [r7, #0]
 800c168:	430a      	orrs	r2, r1
 800c16a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 f811 	bl	800c194 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	68fa      	ldr	r2, [r7, #12]
 800c178:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2220      	movs	r2, #32
 800c17e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2200      	movs	r2, #0
 800c186:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c18a:	2300      	movs	r3, #0
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3710      	adds	r7, #16
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c194:	b480      	push	{r7}
 800c196:	b089      	sub	sp, #36	; 0x24
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800c19c:	4a2f      	ldr	r2, [pc, #188]	; (800c25c <UARTEx_SetNbDataToProcess+0xc8>)
 800c19e:	f107 0314 	add.w	r3, r7, #20
 800c1a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c1a6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800c1aa:	4a2d      	ldr	r2, [pc, #180]	; (800c260 <UARTEx_SetNbDataToProcess+0xcc>)
 800c1ac:	f107 030c 	add.w	r3, r7, #12
 800c1b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c1b4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d108      	bne.n	800c1d2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c1d0:	e03d      	b.n	800c24e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c1d2:	2308      	movs	r3, #8
 800c1d4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c1d6:	2308      	movs	r3, #8
 800c1d8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	689b      	ldr	r3, [r3, #8]
 800c1e0:	0e5b      	lsrs	r3, r3, #25
 800c1e2:	b2db      	uxtb	r3, r3
 800c1e4:	f003 0307 	and.w	r3, r3, #7
 800c1e8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	689b      	ldr	r3, [r3, #8]
 800c1f0:	0f5b      	lsrs	r3, r3, #29
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	f003 0307 	and.w	r3, r3, #7
 800c1f8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800c1fa:	7fbb      	ldrb	r3, [r7, #30]
 800c1fc:	7f3a      	ldrb	r2, [r7, #28]
 800c1fe:	f107 0120 	add.w	r1, r7, #32
 800c202:	440a      	add	r2, r1
 800c204:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c208:	fb02 f303 	mul.w	r3, r2, r3
 800c20c:	7f3a      	ldrb	r2, [r7, #28]
 800c20e:	f107 0120 	add.w	r1, r7, #32
 800c212:	440a      	add	r2, r1
 800c214:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c218:	fb93 f3f2 	sdiv	r3, r3, r2
 800c21c:	b29a      	uxth	r2, r3
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c224:	7ffb      	ldrb	r3, [r7, #31]
 800c226:	7f7a      	ldrb	r2, [r7, #29]
 800c228:	f107 0120 	add.w	r1, r7, #32
 800c22c:	440a      	add	r2, r1
 800c22e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c232:	fb02 f303 	mul.w	r3, r2, r3
 800c236:	7f7a      	ldrb	r2, [r7, #29]
 800c238:	f107 0120 	add.w	r1, r7, #32
 800c23c:	440a      	add	r2, r1
 800c23e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c242:	fb93 f3f2 	sdiv	r3, r3, r2
 800c246:	b29a      	uxth	r2, r3
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c24e:	bf00      	nop
 800c250:	3724      	adds	r7, #36	; 0x24
 800c252:	46bd      	mov	sp, r7
 800c254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c258:	4770      	bx	lr
 800c25a:	bf00      	nop
 800c25c:	080163f0 	.word	0x080163f0
 800c260:	080163f8 	.word	0x080163f8

0800c264 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800c264:	b480      	push	{r7}
 800c266:	af00      	add	r7, sp, #0
  return;
 800c268:	bf00      	nop
}
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr

0800c272 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800c272:	b480      	push	{r7}
 800c274:	af00      	add	r7, sp, #0
  return;
 800c276:	bf00      	nop
}
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr

0800c280 <EDS_STM_Init>:
__weak void DIS_Init( void )
{
  return;
}
__weak void EDS_STM_Init( void )
{
 800c280:	b480      	push	{r7}
 800c282:	af00      	add	r7, sp, #0
  return;
 800c284:	bf00      	nop
}
 800c286:	46bd      	mov	sp, r7
 800c288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28c:	4770      	bx	lr

0800c28e <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800c28e:	b480      	push	{r7}
 800c290:	af00      	add	r7, sp, #0
  return;
 800c292:	bf00      	nop
}
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr

0800c29c <HTS_Init>:
__weak void HRS_Init( void )
{
  return;
}
__weak void HTS_Init( void )
{
 800c29c:	b480      	push	{r7}
 800c29e:	af00      	add	r7, sp, #0
  return;
 800c2a0:	bf00      	nop
}
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr

0800c2aa <IAS_Init>:
__weak void IAS_Init( void )
{
 800c2aa:	b480      	push	{r7}
 800c2ac:	af00      	add	r7, sp, #0
  return;
 800c2ae:	bf00      	nop
}
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b6:	4770      	bx	lr

0800c2b8 <LLS_Init>:
__weak void LLS_Init( void )
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	af00      	add	r7, sp, #0
  return;
 800c2bc:	bf00      	nop
}
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c4:	4770      	bx	lr

0800c2c6 <TPS_Init>:
__weak void TPS_Init( void )
{
 800c2c6:	b480      	push	{r7}
 800c2c8:	af00      	add	r7, sp, #0
  return;
 800c2ca:	bf00      	nop
}
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr

0800c2d4 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	af00      	add	r7, sp, #0
  return;
 800c2d8:	bf00      	nop
}
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr

0800c2e2 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800c2e2:	b480      	push	{r7}
 800c2e4:	af00      	add	r7, sp, #0
  return;
 800c2e6:	bf00      	nop
}
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr

0800c2f0 <MESH_Init>:
__weak void MESH_Init( void )
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	af00      	add	r7, sp, #0
  return;
 800c2f4:	bf00      	nop
}
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr

0800c2fe <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800c2fe:	b480      	push	{r7}
 800c300:	af00      	add	r7, sp, #0
  return;
 800c302:	bf00      	nop
}
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr

0800c30c <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 800c30c:	b480      	push	{r7}
 800c30e:	af00      	add	r7, sp, #0
  return;
 800c310:	bf00      	nop
}
 800c312:	46bd      	mov	sp, r7
 800c314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c318:	4770      	bx	lr
	...

0800c31c <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800c320:	4b04      	ldr	r3, [pc, #16]	; (800c334 <SVCCTL_Init+0x18>)
 800c322:	2200      	movs	r2, #0
 800c324:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800c326:	4b04      	ldr	r3, [pc, #16]	; (800c338 <SVCCTL_Init+0x1c>)
 800c328:	2200      	movs	r2, #0
 800c32a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800c32c:	f000 f806 	bl	800c33c <SVCCTL_SvcInit>

  return;
 800c330:	bf00      	nop
}
 800c332:	bd80      	pop	{r7, pc}
 800c334:	20000364 	.word	0x20000364
 800c338:	20000384 	.word	0x20000384

0800c33c <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	af00      	add	r7, sp, #0
  BLS_Init();
 800c340:	f7ff ff90 	bl	800c264 <BLS_Init>

  CRS_STM_Init();
 800c344:	f7ff ff95 	bl	800c272 <CRS_STM_Init>

  //DIS_Init();

  EDS_STM_Init();
 800c348:	f7ff ff9a 	bl	800c280 <EDS_STM_Init>

  HIDS_Init();
 800c34c:	f7ff ff9f 	bl	800c28e <HIDS_Init>

  //HRS_Init();

  HTS_Init();
 800c350:	f7ff ffa4 	bl	800c29c <HTS_Init>

  IAS_Init();
 800c354:	f7ff ffa9 	bl	800c2aa <IAS_Init>

  LLS_Init();
 800c358:	f7ff ffae 	bl	800c2b8 <LLS_Init>

  TPS_Init();
 800c35c:	f7ff ffb3 	bl	800c2c6 <TPS_Init>

  MOTENV_STM_Init();
 800c360:	f7ff ffb8 	bl	800c2d4 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800c364:	f001 fdd4 	bl	800df10 <P2PS_STM_Init>

  OTAS_STM_Init();
 800c368:	f7ff ffbb 	bl	800c2e2 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800c36c:	f7ff ffc7 	bl	800c2fe <BVOPUS_STM_Init>

  MESH_Init();
 800c370:	f7ff ffbe 	bl	800c2f0 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800c374:	f7ff ffca 	bl	800c30c <SVCCTL_InitCustomSvc>
  
  return;
 800c378:	bf00      	nop
}
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800c37c:	b480      	push	{r7}
 800c37e:	b083      	sub	sp, #12
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800c384:	4b09      	ldr	r3, [pc, #36]	; (800c3ac <SVCCTL_RegisterSvcHandler+0x30>)
 800c386:	7f1b      	ldrb	r3, [r3, #28]
 800c388:	4619      	mov	r1, r3
 800c38a:	4a08      	ldr	r2, [pc, #32]	; (800c3ac <SVCCTL_RegisterSvcHandler+0x30>)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800c392:	4b06      	ldr	r3, [pc, #24]	; (800c3ac <SVCCTL_RegisterSvcHandler+0x30>)
 800c394:	7f1b      	ldrb	r3, [r3, #28]
 800c396:	3301      	adds	r3, #1
 800c398:	b2da      	uxtb	r2, r3
 800c39a:	4b04      	ldr	r3, [pc, #16]	; (800c3ac <SVCCTL_RegisterSvcHandler+0x30>)
 800c39c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800c39e:	bf00      	nop
}
 800c3a0:	370c      	adds	r7, #12
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a8:	4770      	bx	lr
 800c3aa:	bf00      	nop
 800c3ac:	20000364 	.word	0x20000364

0800c3b0 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b086      	sub	sp, #24
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	2bff      	cmp	r3, #255	; 0xff
 800c3c8:	d000      	beq.n	800c3cc <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800c3ca:	e025      	b.n	800c418 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	3302      	adds	r3, #2
 800c3d0:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	881b      	ldrh	r3, [r3, #0]
 800c3d6:	b29b      	uxth	r3, r3
 800c3d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c3dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c3e0:	d000      	beq.n	800c3e4 <SVCCTL_UserEvtRx+0x34>
          break;
 800c3e2:	e018      	b.n	800c416 <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	757b      	strb	r3, [r7, #21]
 800c3e8:	e00d      	b.n	800c406 <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800c3ea:	7d7b      	ldrb	r3, [r7, #21]
 800c3ec:	4a18      	ldr	r2, [pc, #96]	; (800c450 <SVCCTL_UserEvtRx+0xa0>)
 800c3ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	4798      	blx	r3
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800c3fa:	7dfb      	ldrb	r3, [r7, #23]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d108      	bne.n	800c412 <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800c400:	7d7b      	ldrb	r3, [r7, #21]
 800c402:	3301      	adds	r3, #1
 800c404:	757b      	strb	r3, [r7, #21]
 800c406:	4b12      	ldr	r3, [pc, #72]	; (800c450 <SVCCTL_UserEvtRx+0xa0>)
 800c408:	7f1b      	ldrb	r3, [r3, #28]
 800c40a:	7d7a      	ldrb	r2, [r7, #21]
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d3ec      	bcc.n	800c3ea <SVCCTL_UserEvtRx+0x3a>
          break;
 800c410:	e000      	b.n	800c414 <SVCCTL_UserEvtRx+0x64>
              break;
 800c412:	bf00      	nop
          break;
 800c414:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800c416:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800c418:	7dfb      	ldrb	r3, [r7, #23]
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	d009      	beq.n	800c432 <SVCCTL_UserEvtRx+0x82>
 800c41e:	2b02      	cmp	r3, #2
 800c420:	d00a      	beq.n	800c438 <SVCCTL_UserEvtRx+0x88>
 800c422:	2b00      	cmp	r3, #0
 800c424:	d10b      	bne.n	800c43e <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f7f4 fdb0 	bl	8000f8c <SVCCTL_App_Notification>
 800c42c:	4603      	mov	r3, r0
 800c42e:	75bb      	strb	r3, [r7, #22]
      break;
 800c430:	e008      	b.n	800c444 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800c432:	2301      	movs	r3, #1
 800c434:	75bb      	strb	r3, [r7, #22]
      break;
 800c436:	e005      	b.n	800c444 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800c438:	2300      	movs	r3, #0
 800c43a:	75bb      	strb	r3, [r7, #22]
      break;
 800c43c:	e002      	b.n	800c444 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800c43e:	2301      	movs	r3, #1
 800c440:	75bb      	strb	r3, [r7, #22]
      break;
 800c442:	bf00      	nop
  }

  return (return_status);
 800c444:	7dbb      	ldrb	r3, [r7, #22]
}
 800c446:	4618      	mov	r0, r3
 800c448:	3718      	adds	r7, #24
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	bf00      	nop
 800c450:	20000364 	.word	0x20000364

0800c454 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b088      	sub	sp, #32
 800c458:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800c45a:	2300      	movs	r3, #0
 800c45c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c45e:	f107 0308 	add.w	r3, r7, #8
 800c462:	2218      	movs	r2, #24
 800c464:	2100      	movs	r1, #0
 800c466:	4618      	mov	r0, r3
 800c468:	f000 ff9c 	bl	800d3a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c46c:	233f      	movs	r3, #63	; 0x3f
 800c46e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800c470:	2381      	movs	r3, #129	; 0x81
 800c472:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c474:	1dfb      	adds	r3, r7, #7
 800c476:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c478:	2301      	movs	r3, #1
 800c47a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c47c:	f107 0308 	add.w	r3, r7, #8
 800c480:	2100      	movs	r1, #0
 800c482:	4618      	mov	r0, r3
 800c484:	f001 f836 	bl	800d4f4 <hci_send_req>
 800c488:	4603      	mov	r3, r0
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	da01      	bge.n	800c492 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800c48e:	23ff      	movs	r3, #255	; 0xff
 800c490:	e000      	b.n	800c494 <aci_gap_set_non_discoverable+0x40>
  return status;
 800c492:	79fb      	ldrb	r3, [r7, #7]
}
 800c494:	4618      	mov	r0, r3
 800c496:	3720      	adds	r7, #32
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800c49c:	b5b0      	push	{r4, r5, r7, lr}
 800c49e:	b0ce      	sub	sp, #312	; 0x138
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	4605      	mov	r5, r0
 800c4a4:	460c      	mov	r4, r1
 800c4a6:	4610      	mov	r0, r2
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	1dfb      	adds	r3, r7, #7
 800c4ac:	462a      	mov	r2, r5
 800c4ae:	701a      	strb	r2, [r3, #0]
 800c4b0:	1d3b      	adds	r3, r7, #4
 800c4b2:	4622      	mov	r2, r4
 800c4b4:	801a      	strh	r2, [r3, #0]
 800c4b6:	1cbb      	adds	r3, r7, #2
 800c4b8:	4602      	mov	r2, r0
 800c4ba:	801a      	strh	r2, [r3, #0]
 800c4bc:	1dbb      	adds	r3, r7, #6
 800c4be:	460a      	mov	r2, r1
 800c4c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800c4c2:	f107 0310 	add.w	r3, r7, #16
 800c4c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800c4ca:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800c4ce:	3308      	adds	r3, #8
 800c4d0:	f107 0210 	add.w	r2, r7, #16
 800c4d4:	4413      	add	r3, r2
 800c4d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800c4da:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800c4de:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800c4e2:	4413      	add	r3, r2
 800c4e4:	3309      	adds	r3, #9
 800c4e6:	f107 0210 	add.w	r2, r7, #16
 800c4ea:	4413      	add	r3, r2
 800c4ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c4f0:	f107 030f 	add.w	r3, r7, #15
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800c4fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c502:	1dfa      	adds	r2, r7, #7
 800c504:	7812      	ldrb	r2, [r2, #0]
 800c506:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c508:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c50c:	3301      	adds	r3, #1
 800c50e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800c512:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c516:	1d3a      	adds	r2, r7, #4
 800c518:	8812      	ldrh	r2, [r2, #0]
 800c51a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800c51e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c522:	3302      	adds	r3, #2
 800c524:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800c528:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c52c:	1cba      	adds	r2, r7, #2
 800c52e:	8812      	ldrh	r2, [r2, #0]
 800c530:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800c534:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c538:	3302      	adds	r3, #2
 800c53a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800c53e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c542:	1dba      	adds	r2, r7, #6
 800c544:	7812      	ldrb	r2, [r2, #0]
 800c546:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800c548:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c54c:	3301      	adds	r3, #1
 800c54e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800c552:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c556:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800c55a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800c55c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c560:	3301      	adds	r3, #1
 800c562:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800c566:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c56a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800c56e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800c570:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c574:	3301      	adds	r3, #1
 800c576:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800c57a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c57e:	3308      	adds	r3, #8
 800c580:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800c584:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800c588:	4618      	mov	r0, r3
 800c58a:	f000 fefb 	bl	800d384 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800c58e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800c592:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c596:	4413      	add	r3, r2
 800c598:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800c59c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c5a0:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800c5a4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800c5a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c5aa:	3301      	adds	r3, #1
 800c5ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800c5b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800c5ba:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f000 fee0 	bl	800d384 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800c5c4:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800c5c8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c5cc:	4413      	add	r3, r2
 800c5ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800c5d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c5d6:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800c5da:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800c5dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c5e0:	3302      	adds	r3, #2
 800c5e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800c5e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c5ea:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800c5ee:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800c5f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c5f4:	3302      	adds	r3, #2
 800c5f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c5fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c5fe:	2218      	movs	r2, #24
 800c600:	2100      	movs	r1, #0
 800c602:	4618      	mov	r0, r3
 800c604:	f000 fece 	bl	800d3a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c608:	233f      	movs	r3, #63	; 0x3f
 800c60a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800c60e:	2383      	movs	r3, #131	; 0x83
 800c610:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c614:	f107 0310 	add.w	r3, r7, #16
 800c618:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c61c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c620:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c624:	f107 030f 	add.w	r3, r7, #15
 800c628:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c62c:	2301      	movs	r3, #1
 800c62e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c632:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c636:	2100      	movs	r1, #0
 800c638:	4618      	mov	r0, r3
 800c63a:	f000 ff5b 	bl	800d4f4 <hci_send_req>
 800c63e:	4603      	mov	r3, r0
 800c640:	2b00      	cmp	r3, #0
 800c642:	da01      	bge.n	800c648 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 800c644:	23ff      	movs	r3, #255	; 0xff
 800c646:	e002      	b.n	800c64e <aci_gap_set_discoverable+0x1b2>
  return status;
 800c648:	f107 030f 	add.w	r3, r7, #15
 800c64c:	781b      	ldrb	r3, [r3, #0]
}
 800c64e:	4618      	mov	r0, r3
 800c650:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800c654:	46bd      	mov	sp, r7
 800c656:	bdb0      	pop	{r4, r5, r7, pc}

0800c658 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b0cc      	sub	sp, #304	; 0x130
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	4602      	mov	r2, r0
 800c660:	1dfb      	adds	r3, r7, #7
 800c662:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800c664:	f107 0310 	add.w	r3, r7, #16
 800c668:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c66c:	f107 030f 	add.w	r3, r7, #15
 800c670:	2200      	movs	r2, #0
 800c672:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c674:	2300      	movs	r3, #0
 800c676:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800c67a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c67e:	1dfa      	adds	r2, r7, #7
 800c680:	7812      	ldrb	r2, [r2, #0]
 800c682:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c684:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c688:	3301      	adds	r3, #1
 800c68a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c68e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c692:	2218      	movs	r2, #24
 800c694:	2100      	movs	r1, #0
 800c696:	4618      	mov	r0, r3
 800c698:	f000 fe84 	bl	800d3a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c69c:	233f      	movs	r3, #63	; 0x3f
 800c69e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800c6a2:	2385      	movs	r3, #133	; 0x85
 800c6a4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c6a8:	f107 0310 	add.w	r3, r7, #16
 800c6ac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c6b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c6b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c6b8:	f107 030f 	add.w	r3, r7, #15
 800c6bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c6c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c6ca:	2100      	movs	r1, #0
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f000 ff11 	bl	800d4f4 <hci_send_req>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	da01      	bge.n	800c6dc <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800c6d8:	23ff      	movs	r3, #255	; 0xff
 800c6da:	e002      	b.n	800c6e2 <aci_gap_set_io_capability+0x8a>
  return status;
 800c6dc:	f107 030f 	add.w	r3, r7, #15
 800c6e0:	781b      	ldrb	r3, [r3, #0]
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800c6ec:	b5b0      	push	{r4, r5, r7, lr}
 800c6ee:	b0cc      	sub	sp, #304	; 0x130
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	4605      	mov	r5, r0
 800c6f4:	460c      	mov	r4, r1
 800c6f6:	4610      	mov	r0, r2
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	1dfb      	adds	r3, r7, #7
 800c6fc:	462a      	mov	r2, r5
 800c6fe:	701a      	strb	r2, [r3, #0]
 800c700:	1dbb      	adds	r3, r7, #6
 800c702:	4622      	mov	r2, r4
 800c704:	701a      	strb	r2, [r3, #0]
 800c706:	1d7b      	adds	r3, r7, #5
 800c708:	4602      	mov	r2, r0
 800c70a:	701a      	strb	r2, [r3, #0]
 800c70c:	1d3b      	adds	r3, r7, #4
 800c70e:	460a      	mov	r2, r1
 800c710:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800c712:	f107 0310 	add.w	r3, r7, #16
 800c716:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c71a:	f107 030f 	add.w	r3, r7, #15
 800c71e:	2200      	movs	r2, #0
 800c720:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c722:	2300      	movs	r3, #0
 800c724:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800c728:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c72c:	1dfa      	adds	r2, r7, #7
 800c72e:	7812      	ldrb	r2, [r2, #0]
 800c730:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c732:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c736:	3301      	adds	r3, #1
 800c738:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800c73c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c740:	1dba      	adds	r2, r7, #6
 800c742:	7812      	ldrb	r2, [r2, #0]
 800c744:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c746:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c74a:	3301      	adds	r3, #1
 800c74c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800c750:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c754:	1d7a      	adds	r2, r7, #5
 800c756:	7812      	ldrb	r2, [r2, #0]
 800c758:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800c75a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c75e:	3301      	adds	r3, #1
 800c760:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800c764:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c768:	1d3a      	adds	r2, r7, #4
 800c76a:	7812      	ldrb	r2, [r2, #0]
 800c76c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800c76e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c772:	3301      	adds	r3, #1
 800c774:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800c778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c77c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800c780:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800c782:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c786:	3301      	adds	r3, #1
 800c788:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800c78c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c790:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800c794:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800c796:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c79a:	3301      	adds	r3, #1
 800c79c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800c7a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c7a4:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800c7a8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800c7aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c7ae:	3301      	adds	r3, #1
 800c7b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800c7b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c7b8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c7bc:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800c7c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c7c4:	3304      	adds	r3, #4
 800c7c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800c7ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c7ce:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800c7d2:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800c7d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c7d8:	3301      	adds	r3, #1
 800c7da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c7de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c7e2:	2218      	movs	r2, #24
 800c7e4:	2100      	movs	r1, #0
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f000 fddc 	bl	800d3a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c7ec:	233f      	movs	r3, #63	; 0x3f
 800c7ee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800c7f2:	2386      	movs	r3, #134	; 0x86
 800c7f4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c7f8:	f107 0310 	add.w	r3, r7, #16
 800c7fc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c800:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c804:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c808:	f107 030f 	add.w	r3, r7, #15
 800c80c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c810:	2301      	movs	r3, #1
 800c812:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c816:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c81a:	2100      	movs	r1, #0
 800c81c:	4618      	mov	r0, r3
 800c81e:	f000 fe69 	bl	800d4f4 <hci_send_req>
 800c822:	4603      	mov	r3, r0
 800c824:	2b00      	cmp	r3, #0
 800c826:	da01      	bge.n	800c82c <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800c828:	23ff      	movs	r3, #255	; 0xff
 800c82a:	e002      	b.n	800c832 <aci_gap_set_authentication_requirement+0x146>
  return status;
 800c82c:	f107 030f 	add.w	r3, r7, #15
 800c830:	781b      	ldrb	r3, [r3, #0]
}
 800c832:	4618      	mov	r0, r3
 800c834:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c838:	46bd      	mov	sp, r7
 800c83a:	bdb0      	pop	{r4, r5, r7, pc}

0800c83c <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800c83c:	b590      	push	{r4, r7, lr}
 800c83e:	b0cd      	sub	sp, #308	; 0x134
 800c840:	af00      	add	r7, sp, #0
 800c842:	4604      	mov	r4, r0
 800c844:	4608      	mov	r0, r1
 800c846:	4611      	mov	r1, r2
 800c848:	463a      	mov	r2, r7
 800c84a:	6013      	str	r3, [r2, #0]
 800c84c:	1dfb      	adds	r3, r7, #7
 800c84e:	4622      	mov	r2, r4
 800c850:	701a      	strb	r2, [r3, #0]
 800c852:	1dbb      	adds	r3, r7, #6
 800c854:	4602      	mov	r2, r0
 800c856:	701a      	strb	r2, [r3, #0]
 800c858:	1d7b      	adds	r3, r7, #5
 800c85a:	460a      	mov	r2, r1
 800c85c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800c85e:	f107 0310 	add.w	r3, r7, #16
 800c862:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800c866:	f107 0308 	add.w	r3, r7, #8
 800c86a:	2207      	movs	r2, #7
 800c86c:	2100      	movs	r1, #0
 800c86e:	4618      	mov	r0, r3
 800c870:	f000 fd98 	bl	800d3a4 <Osal_MemSet>
  int index_input = 0;
 800c874:	2300      	movs	r3, #0
 800c876:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800c87a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c87e:	1dfa      	adds	r2, r7, #7
 800c880:	7812      	ldrb	r2, [r2, #0]
 800c882:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c884:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c888:	3301      	adds	r3, #1
 800c88a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800c88e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c892:	1dba      	adds	r2, r7, #6
 800c894:	7812      	ldrb	r2, [r2, #0]
 800c896:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c898:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c89c:	3301      	adds	r3, #1
 800c89e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800c8a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c8a6:	1d7a      	adds	r2, r7, #5
 800c8a8:	7812      	ldrb	r2, [r2, #0]
 800c8aa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800c8ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c8b0:	3301      	adds	r3, #1
 800c8b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c8b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c8ba:	2218      	movs	r2, #24
 800c8bc:	2100      	movs	r1, #0
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f000 fd70 	bl	800d3a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c8c4:	233f      	movs	r3, #63	; 0x3f
 800c8c6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800c8ca:	238a      	movs	r3, #138	; 0x8a
 800c8cc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c8d0:	f107 0310 	add.w	r3, r7, #16
 800c8d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c8d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c8dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800c8e0:	f107 0308 	add.w	r3, r7, #8
 800c8e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800c8e8:	2307      	movs	r3, #7
 800c8ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c8ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c8f2:	2100      	movs	r1, #0
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f000 fdfd 	bl	800d4f4 <hci_send_req>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	da01      	bge.n	800c904 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 800c900:	23ff      	movs	r3, #255	; 0xff
 800c902:	e021      	b.n	800c948 <aci_gap_init+0x10c>
  if ( resp.Status )
 800c904:	f107 0308 	add.w	r3, r7, #8
 800c908:	781b      	ldrb	r3, [r3, #0]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d003      	beq.n	800c916 <aci_gap_init+0xda>
    return resp.Status;
 800c90e:	f107 0308 	add.w	r3, r7, #8
 800c912:	781b      	ldrb	r3, [r3, #0]
 800c914:	e018      	b.n	800c948 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 800c916:	f107 0308 	add.w	r3, r7, #8
 800c91a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c91e:	b29a      	uxth	r2, r3
 800c920:	463b      	mov	r3, r7
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800c926:	f107 0308 	add.w	r3, r7, #8
 800c92a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800c92e:	b29a      	uxth	r2, r3
 800c930:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800c934:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800c936:	f107 0308 	add.w	r3, r7, #8
 800c93a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800c93e:	b29a      	uxth	r2, r3
 800c940:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800c944:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800c946:	2300      	movs	r3, #0
}
 800c948:	4618      	mov	r0, r3
 800c94a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd90      	pop	{r4, r7, pc}

0800c952 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800c952:	b580      	push	{r7, lr}
 800c954:	b0cc      	sub	sp, #304	; 0x130
 800c956:	af00      	add	r7, sp, #0
 800c958:	4602      	mov	r2, r0
 800c95a:	463b      	mov	r3, r7
 800c95c:	6019      	str	r1, [r3, #0]
 800c95e:	1dfb      	adds	r3, r7, #7
 800c960:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800c962:	f107 0310 	add.w	r3, r7, #16
 800c966:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c96a:	f107 030f 	add.w	r3, r7, #15
 800c96e:	2200      	movs	r2, #0
 800c970:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c972:	2300      	movs	r3, #0
 800c974:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800c978:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c97c:	1dfa      	adds	r2, r7, #7
 800c97e:	7812      	ldrb	r2, [r2, #0]
 800c980:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c982:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c986:	3301      	adds	r3, #1
 800c988:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800c98c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c990:	1c58      	adds	r0, r3, #1
 800c992:	1dfb      	adds	r3, r7, #7
 800c994:	781a      	ldrb	r2, [r3, #0]
 800c996:	463b      	mov	r3, r7
 800c998:	6819      	ldr	r1, [r3, #0]
 800c99a:	f000 fcf3 	bl	800d384 <Osal_MemCpy>
  index_input += AdvDataLen;
 800c99e:	1dfb      	adds	r3, r7, #7
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c9a6:	4413      	add	r3, r2
 800c9a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c9ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c9b0:	2218      	movs	r2, #24
 800c9b2:	2100      	movs	r1, #0
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f000 fcf5 	bl	800d3a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c9ba:	233f      	movs	r3, #63	; 0x3f
 800c9bc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800c9c0:	238e      	movs	r3, #142	; 0x8e
 800c9c2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c9c6:	f107 0310 	add.w	r3, r7, #16
 800c9ca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c9ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c9d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c9d6:	f107 030f 	add.w	r3, r7, #15
 800c9da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c9de:	2301      	movs	r3, #1
 800c9e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c9e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c9e8:	2100      	movs	r1, #0
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f000 fd82 	bl	800d4f4 <hci_send_req>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	da01      	bge.n	800c9fa <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 800c9f6:	23ff      	movs	r3, #255	; 0xff
 800c9f8:	e002      	b.n	800ca00 <aci_gap_update_adv_data+0xae>
  return status;
 800c9fa:	f107 030f 	add.w	r3, r7, #15
 800c9fe:	781b      	ldrb	r3, [r3, #0]
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}

0800ca0a <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800ca0a:	b580      	push	{r7, lr}
 800ca0c:	b088      	sub	sp, #32
 800ca0e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ca10:	2300      	movs	r3, #0
 800ca12:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ca14:	f107 0308 	add.w	r3, r7, #8
 800ca18:	2218      	movs	r2, #24
 800ca1a:	2100      	movs	r1, #0
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f000 fcc1 	bl	800d3a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ca22:	233f      	movs	r3, #63	; 0x3f
 800ca24:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800ca26:	2392      	movs	r3, #146	; 0x92
 800ca28:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ca2a:	1dfb      	adds	r3, r7, #7
 800ca2c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ca2e:	2301      	movs	r3, #1
 800ca30:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ca32:	f107 0308 	add.w	r3, r7, #8
 800ca36:	2100      	movs	r1, #0
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f000 fd5b 	bl	800d4f4 <hci_send_req>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	da01      	bge.n	800ca48 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ca44:	23ff      	movs	r3, #255	; 0xff
 800ca46:	e000      	b.n	800ca4a <aci_gap_configure_whitelist+0x40>
  return status;
 800ca48:	79fb      	ldrb	r3, [r7, #7]
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3720      	adds	r7, #32
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}

0800ca52 <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 800ca52:	b580      	push	{r7, lr}
 800ca54:	b0cc      	sub	sp, #304	; 0x130
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	4602      	mov	r2, r0
 800ca5a:	1dbb      	adds	r3, r7, #6
 800ca5c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 800ca5e:	f107 0310 	add.w	r3, r7, #16
 800ca62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ca66:	f107 030f 	add.w	r3, r7, #15
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800ca74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ca78:	1dba      	adds	r2, r7, #6
 800ca7a:	8812      	ldrh	r2, [r2, #0]
 800ca7c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ca7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca82:	3302      	adds	r3, #2
 800ca84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ca88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ca8c:	2218      	movs	r2, #24
 800ca8e:	2100      	movs	r1, #0
 800ca90:	4618      	mov	r0, r3
 800ca92:	f000 fc87 	bl	800d3a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ca96:	233f      	movs	r3, #63	; 0x3f
 800ca98:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 800ca9c:	2395      	movs	r3, #149	; 0x95
 800ca9e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800caa2:	f107 0310 	add.w	r3, r7, #16
 800caa6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800caaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800caae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800cab2:	f107 030f 	add.w	r3, r7, #15
 800cab6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800caba:	2301      	movs	r3, #1
 800cabc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cac0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cac4:	2100      	movs	r1, #0
 800cac6:	4618      	mov	r0, r3
 800cac8:	f000 fd14 	bl	800d4f4 <hci_send_req>
 800cacc:	4603      	mov	r3, r0
 800cace:	2b00      	cmp	r3, #0
 800cad0:	da01      	bge.n	800cad6 <aci_gap_allow_rebond+0x84>
    return BLE_STATUS_TIMEOUT;
 800cad2:	23ff      	movs	r3, #255	; 0xff
 800cad4:	e002      	b.n	800cadc <aci_gap_allow_rebond+0x8a>
  return status;
 800cad6:	f107 030f 	add.w	r3, r7, #15
 800cada:	781b      	ldrb	r3, [r3, #0]
}
 800cadc:	4618      	mov	r0, r3
 800cade:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}

0800cae6 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800cae6:	b580      	push	{r7, lr}
 800cae8:	b0cc      	sub	sp, #304	; 0x130
 800caea:	af00      	add	r7, sp, #0
 800caec:	4602      	mov	r2, r0
 800caee:	1dbb      	adds	r3, r7, #6
 800caf0:	801a      	strh	r2, [r3, #0]
 800caf2:	1d7b      	adds	r3, r7, #5
 800caf4:	460a      	mov	r2, r1
 800caf6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800caf8:	f107 0310 	add.w	r3, r7, #16
 800cafc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800cb00:	f107 030f 	add.w	r3, r7, #15
 800cb04:	2200      	movs	r2, #0
 800cb06:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800cb0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb12:	1dba      	adds	r2, r7, #6
 800cb14:	8812      	ldrh	r2, [r2, #0]
 800cb16:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800cb18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb1c:	3302      	adds	r3, #2
 800cb1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800cb22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb26:	1d7a      	adds	r2, r7, #5
 800cb28:	7812      	ldrb	r2, [r2, #0]
 800cb2a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800cb2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb30:	3301      	adds	r3, #1
 800cb32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cb36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cb3a:	2218      	movs	r2, #24
 800cb3c:	2100      	movs	r1, #0
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f000 fc30 	bl	800d3a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cb44:	233f      	movs	r3, #63	; 0x3f
 800cb46:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800cb4a:	23a5      	movs	r3, #165	; 0xa5
 800cb4c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800cb50:	f107 0310 	add.w	r3, r7, #16
 800cb54:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cb58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb5c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800cb60:	f107 030f 	add.w	r3, r7, #15
 800cb64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800cb68:	2301      	movs	r3, #1
 800cb6a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cb6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cb72:	2100      	movs	r1, #0
 800cb74:	4618      	mov	r0, r3
 800cb76:	f000 fcbd 	bl	800d4f4 <hci_send_req>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	da01      	bge.n	800cb84 <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 800cb80:	23ff      	movs	r3, #255	; 0xff
 800cb82:	e002      	b.n	800cb8a <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 800cb84:	f107 030f 	add.w	r3, r7, #15
 800cb88:	781b      	ldrb	r3, [r3, #0]
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}

0800cb94 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b088      	sub	sp, #32
 800cb98:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cb9e:	f107 0308 	add.w	r3, r7, #8
 800cba2:	2218      	movs	r2, #24
 800cba4:	2100      	movs	r1, #0
 800cba6:	4618      	mov	r0, r3
 800cba8:	f000 fbfc 	bl	800d3a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cbac:	233f      	movs	r3, #63	; 0x3f
 800cbae:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800cbb0:	f240 1301 	movw	r3, #257	; 0x101
 800cbb4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800cbb6:	1dfb      	adds	r3, r7, #7
 800cbb8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800cbba:	2301      	movs	r3, #1
 800cbbc:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cbbe:	f107 0308 	add.w	r3, r7, #8
 800cbc2:	2100      	movs	r1, #0
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f000 fc95 	bl	800d4f4 <hci_send_req>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	da01      	bge.n	800cbd4 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800cbd0:	23ff      	movs	r3, #255	; 0xff
 800cbd2:	e000      	b.n	800cbd6 <aci_gatt_init+0x42>
  return status;
 800cbd4:	79fb      	ldrb	r3, [r7, #7]
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3720      	adds	r7, #32
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}

0800cbde <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800cbde:	b590      	push	{r4, r7, lr}
 800cbe0:	b0cf      	sub	sp, #316	; 0x13c
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	4604      	mov	r4, r0
 800cbe6:	4638      	mov	r0, r7
 800cbe8:	6001      	str	r1, [r0, #0]
 800cbea:	4610      	mov	r0, r2
 800cbec:	4619      	mov	r1, r3
 800cbee:	1dfb      	adds	r3, r7, #7
 800cbf0:	4622      	mov	r2, r4
 800cbf2:	701a      	strb	r2, [r3, #0]
 800cbf4:	1dbb      	adds	r3, r7, #6
 800cbf6:	4602      	mov	r2, r0
 800cbf8:	701a      	strb	r2, [r3, #0]
 800cbfa:	1d7b      	adds	r3, r7, #5
 800cbfc:	460a      	mov	r2, r1
 800cbfe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800cc00:	f107 0310 	add.w	r3, r7, #16
 800cc04:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800cc08:	1dfb      	adds	r3, r7, #7
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	2b01      	cmp	r3, #1
 800cc0e:	d007      	beq.n	800cc20 <aci_gatt_add_service+0x42>
 800cc10:	1dfb      	adds	r3, r7, #7
 800cc12:	781b      	ldrb	r3, [r3, #0]
 800cc14:	2b02      	cmp	r3, #2
 800cc16:	d101      	bne.n	800cc1c <aci_gatt_add_service+0x3e>
 800cc18:	2311      	movs	r3, #17
 800cc1a:	e002      	b.n	800cc22 <aci_gatt_add_service+0x44>
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	e000      	b.n	800cc22 <aci_gatt_add_service+0x44>
 800cc20:	2303      	movs	r3, #3
 800cc22:	f107 0210 	add.w	r2, r7, #16
 800cc26:	4413      	add	r3, r2
 800cc28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800cc2c:	f107 030c 	add.w	r3, r7, #12
 800cc30:	2203      	movs	r2, #3
 800cc32:	2100      	movs	r1, #0
 800cc34:	4618      	mov	r0, r3
 800cc36:	f000 fbb5 	bl	800d3a4 <Osal_MemSet>
  int index_input = 0;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800cc40:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cc44:	1dfa      	adds	r2, r7, #7
 800cc46:	7812      	ldrb	r2, [r2, #0]
 800cc48:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cc4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cc4e:	3301      	adds	r3, #1
 800cc50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800cc54:	1dfb      	adds	r3, r7, #7
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	2b01      	cmp	r3, #1
 800cc5a:	d002      	beq.n	800cc62 <aci_gatt_add_service+0x84>
 800cc5c:	2b02      	cmp	r3, #2
 800cc5e:	d004      	beq.n	800cc6a <aci_gatt_add_service+0x8c>
 800cc60:	e007      	b.n	800cc72 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 800cc62:	2302      	movs	r3, #2
 800cc64:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800cc68:	e005      	b.n	800cc76 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800cc6a:	2310      	movs	r3, #16
 800cc6c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800cc70:	e001      	b.n	800cc76 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800cc72:	2347      	movs	r3, #71	; 0x47
 800cc74:	e05d      	b.n	800cd32 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800cc76:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cc7a:	1c58      	adds	r0, r3, #1
 800cc7c:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800cc80:	463b      	mov	r3, r7
 800cc82:	6819      	ldr	r1, [r3, #0]
 800cc84:	f000 fb7e 	bl	800d384 <Osal_MemCpy>
    index_input += size;
 800cc88:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800cc8c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800cc90:	4413      	add	r3, r2
 800cc92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800cc96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cc9a:	1dba      	adds	r2, r7, #6
 800cc9c:	7812      	ldrb	r2, [r2, #0]
 800cc9e:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800cca0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cca4:	3301      	adds	r3, #1
 800cca6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800ccaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ccae:	1d7a      	adds	r2, r7, #5
 800ccb0:	7812      	ldrb	r2, [r2, #0]
 800ccb2:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800ccb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ccb8:	3301      	adds	r3, #1
 800ccba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ccbe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ccc2:	2218      	movs	r2, #24
 800ccc4:	2100      	movs	r1, #0
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f000 fb6c 	bl	800d3a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cccc:	233f      	movs	r3, #63	; 0x3f
 800ccce:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800ccd2:	f44f 7381 	mov.w	r3, #258	; 0x102
 800ccd6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ccda:	f107 0310 	add.w	r3, r7, #16
 800ccde:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cce2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cce6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800ccea:	f107 030c 	add.w	r3, r7, #12
 800ccee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800ccf2:	2303      	movs	r3, #3
 800ccf4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ccf8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ccfc:	2100      	movs	r1, #0
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f000 fbf8 	bl	800d4f4 <hci_send_req>
 800cd04:	4603      	mov	r3, r0
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	da01      	bge.n	800cd0e <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800cd0a:	23ff      	movs	r3, #255	; 0xff
 800cd0c:	e011      	b.n	800cd32 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 800cd0e:	f107 030c 	add.w	r3, r7, #12
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d003      	beq.n	800cd20 <aci_gatt_add_service+0x142>
    return resp.Status;
 800cd18:	f107 030c 	add.w	r3, r7, #12
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	e008      	b.n	800cd32 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 800cd20:	f107 030c 	add.w	r3, r7, #12
 800cd24:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cd28:	b29a      	uxth	r2, r3
 800cd2a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cd2e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800cd30:	2300      	movs	r3, #0
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd90      	pop	{r4, r7, pc}

0800cd3c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800cd3c:	b590      	push	{r4, r7, lr}
 800cd3e:	b0d1      	sub	sp, #324	; 0x144
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	4604      	mov	r4, r0
 800cd44:	4608      	mov	r0, r1
 800cd46:	f107 0108 	add.w	r1, r7, #8
 800cd4a:	600a      	str	r2, [r1, #0]
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	f107 030e 	add.w	r3, r7, #14
 800cd52:	4622      	mov	r2, r4
 800cd54:	801a      	strh	r2, [r3, #0]
 800cd56:	f107 030d 	add.w	r3, r7, #13
 800cd5a:	4602      	mov	r2, r0
 800cd5c:	701a      	strb	r2, [r3, #0]
 800cd5e:	1dbb      	adds	r3, r7, #6
 800cd60:	460a      	mov	r2, r1
 800cd62:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800cd64:	f107 0318 	add.w	r3, r7, #24
 800cd68:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800cd6c:	f107 030d 	add.w	r3, r7, #13
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	2b01      	cmp	r3, #1
 800cd74:	d008      	beq.n	800cd88 <aci_gatt_add_char+0x4c>
 800cd76:	f107 030d 	add.w	r3, r7, #13
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	2b02      	cmp	r3, #2
 800cd7e:	d101      	bne.n	800cd84 <aci_gatt_add_char+0x48>
 800cd80:	2313      	movs	r3, #19
 800cd82:	e002      	b.n	800cd8a <aci_gatt_add_char+0x4e>
 800cd84:	2303      	movs	r3, #3
 800cd86:	e000      	b.n	800cd8a <aci_gatt_add_char+0x4e>
 800cd88:	2305      	movs	r3, #5
 800cd8a:	f107 0218 	add.w	r2, r7, #24
 800cd8e:	4413      	add	r3, r2
 800cd90:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800cd94:	f107 0314 	add.w	r3, r7, #20
 800cd98:	2203      	movs	r2, #3
 800cd9a:	2100      	movs	r1, #0
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f000 fb01 	bl	800d3a4 <Osal_MemSet>
  int index_input = 0;
 800cda2:	2300      	movs	r3, #0
 800cda4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800cda8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800cdac:	f107 020e 	add.w	r2, r7, #14
 800cdb0:	8812      	ldrh	r2, [r2, #0]
 800cdb2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800cdb4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cdb8:	3302      	adds	r3, #2
 800cdba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800cdbe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800cdc2:	f107 020d 	add.w	r2, r7, #13
 800cdc6:	7812      	ldrb	r2, [r2, #0]
 800cdc8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800cdca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cdce:	3301      	adds	r3, #1
 800cdd0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800cdd4:	f107 030d 	add.w	r3, r7, #13
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	2b01      	cmp	r3, #1
 800cddc:	d002      	beq.n	800cde4 <aci_gatt_add_char+0xa8>
 800cdde:	2b02      	cmp	r3, #2
 800cde0:	d004      	beq.n	800cdec <aci_gatt_add_char+0xb0>
 800cde2:	e007      	b.n	800cdf4 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 800cde4:	2302      	movs	r3, #2
 800cde6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800cdea:	e005      	b.n	800cdf8 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 800cdec:	2310      	movs	r3, #16
 800cdee:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800cdf2:	e001      	b.n	800cdf8 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800cdf4:	2347      	movs	r3, #71	; 0x47
 800cdf6:	e086      	b.n	800cf06 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800cdf8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800cdfc:	1cd8      	adds	r0, r3, #3
 800cdfe:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800ce02:	f107 0308 	add.w	r3, r7, #8
 800ce06:	6819      	ldr	r1, [r3, #0]
 800ce08:	f000 fabc 	bl	800d384 <Osal_MemCpy>
    index_input += size;
 800ce0c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800ce10:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800ce14:	4413      	add	r3, r2
 800ce16:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800ce1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ce1e:	1dba      	adds	r2, r7, #6
 800ce20:	8812      	ldrh	r2, [r2, #0]
 800ce22:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800ce24:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ce28:	3302      	adds	r3, #2
 800ce2a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800ce2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ce32:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800ce36:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800ce38:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ce3c:	3301      	adds	r3, #1
 800ce3e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800ce42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ce46:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800ce4a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800ce4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ce50:	3301      	adds	r3, #1
 800ce52:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800ce56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ce5a:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800ce5e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800ce60:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ce64:	3301      	adds	r3, #1
 800ce66:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800ce6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ce6e:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800ce72:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800ce74:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ce78:	3301      	adds	r3, #1
 800ce7a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800ce7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ce82:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800ce86:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800ce88:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ce8c:	3301      	adds	r3, #1
 800ce8e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ce92:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ce96:	2218      	movs	r2, #24
 800ce98:	2100      	movs	r1, #0
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f000 fa82 	bl	800d3a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cea0:	233f      	movs	r3, #63	; 0x3f
 800cea2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800cea6:	f44f 7382 	mov.w	r3, #260	; 0x104
 800ceaa:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800ceae:	f107 0318 	add.w	r3, r7, #24
 800ceb2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800ceb6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ceba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800cebe:	f107 0314 	add.w	r3, r7, #20
 800cec2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800cec6:	2303      	movs	r3, #3
 800cec8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cecc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ced0:	2100      	movs	r1, #0
 800ced2:	4618      	mov	r0, r3
 800ced4:	f000 fb0e 	bl	800d4f4 <hci_send_req>
 800ced8:	4603      	mov	r3, r0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	da01      	bge.n	800cee2 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 800cede:	23ff      	movs	r3, #255	; 0xff
 800cee0:	e011      	b.n	800cf06 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 800cee2:	f107 0314 	add.w	r3, r7, #20
 800cee6:	781b      	ldrb	r3, [r3, #0]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d003      	beq.n	800cef4 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 800ceec:	f107 0314 	add.w	r3, r7, #20
 800cef0:	781b      	ldrb	r3, [r3, #0]
 800cef2:	e008      	b.n	800cf06 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 800cef4:	f107 0314 	add.w	r3, r7, #20
 800cef8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cefc:	b29a      	uxth	r2, r3
 800cefe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800cf02:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800cf04:	2300      	movs	r3, #0
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd90      	pop	{r4, r7, pc}

0800cf10 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800cf10:	b5b0      	push	{r4, r5, r7, lr}
 800cf12:	b0cc      	sub	sp, #304	; 0x130
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	4605      	mov	r5, r0
 800cf18:	460c      	mov	r4, r1
 800cf1a:	4610      	mov	r0, r2
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	1dbb      	adds	r3, r7, #6
 800cf20:	462a      	mov	r2, r5
 800cf22:	801a      	strh	r2, [r3, #0]
 800cf24:	1d3b      	adds	r3, r7, #4
 800cf26:	4622      	mov	r2, r4
 800cf28:	801a      	strh	r2, [r3, #0]
 800cf2a:	1cfb      	adds	r3, r7, #3
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	701a      	strb	r2, [r3, #0]
 800cf30:	1cbb      	adds	r3, r7, #2
 800cf32:	460a      	mov	r2, r1
 800cf34:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800cf36:	f107 0310 	add.w	r3, r7, #16
 800cf3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800cf3e:	f107 030f 	add.w	r3, r7, #15
 800cf42:	2200      	movs	r2, #0
 800cf44:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cf46:	2300      	movs	r3, #0
 800cf48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800cf4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cf50:	1dba      	adds	r2, r7, #6
 800cf52:	8812      	ldrh	r2, [r2, #0]
 800cf54:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800cf56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cf5a:	3302      	adds	r3, #2
 800cf5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800cf60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cf64:	1d3a      	adds	r2, r7, #4
 800cf66:	8812      	ldrh	r2, [r2, #0]
 800cf68:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800cf6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cf6e:	3302      	adds	r3, #2
 800cf70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800cf74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cf78:	1cfa      	adds	r2, r7, #3
 800cf7a:	7812      	ldrb	r2, [r2, #0]
 800cf7c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800cf7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cf82:	3301      	adds	r3, #1
 800cf84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800cf88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cf8c:	1cba      	adds	r2, r7, #2
 800cf8e:	7812      	ldrb	r2, [r2, #0]
 800cf90:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800cf92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cf96:	3301      	adds	r3, #1
 800cf98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800cf9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cfa0:	1d98      	adds	r0, r3, #6
 800cfa2:	1cbb      	adds	r3, r7, #2
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800cfac:	f000 f9ea 	bl	800d384 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800cfb0:	1cbb      	adds	r3, r7, #2
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800cfb8:	4413      	add	r3, r2
 800cfba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cfbe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cfc2:	2218      	movs	r2, #24
 800cfc4:	2100      	movs	r1, #0
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f000 f9ec 	bl	800d3a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cfcc:	233f      	movs	r3, #63	; 0x3f
 800cfce:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800cfd2:	f44f 7383 	mov.w	r3, #262	; 0x106
 800cfd6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800cfda:	f107 0310 	add.w	r3, r7, #16
 800cfde:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cfe2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cfe6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800cfea:	f107 030f 	add.w	r3, r7, #15
 800cfee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800cff2:	2301      	movs	r3, #1
 800cff4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cff8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cffc:	2100      	movs	r1, #0
 800cffe:	4618      	mov	r0, r3
 800d000:	f000 fa78 	bl	800d4f4 <hci_send_req>
 800d004:	4603      	mov	r3, r0
 800d006:	2b00      	cmp	r3, #0
 800d008:	da01      	bge.n	800d00e <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800d00a:	23ff      	movs	r3, #255	; 0xff
 800d00c:	e002      	b.n	800d014 <aci_gatt_update_char_value+0x104>
  return status;
 800d00e:	f107 030f 	add.w	r3, r7, #15
 800d012:	781b      	ldrb	r3, [r3, #0]
}
 800d014:	4618      	mov	r0, r3
 800d016:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bdb0      	pop	{r4, r5, r7, pc}

0800d01e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800d01e:	b580      	push	{r7, lr}
 800d020:	b0cc      	sub	sp, #304	; 0x130
 800d022:	af00      	add	r7, sp, #0
 800d024:	463b      	mov	r3, r7
 800d026:	601a      	str	r2, [r3, #0]
 800d028:	1dfb      	adds	r3, r7, #7
 800d02a:	4602      	mov	r2, r0
 800d02c:	701a      	strb	r2, [r3, #0]
 800d02e:	1dbb      	adds	r3, r7, #6
 800d030:	460a      	mov	r2, r1
 800d032:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800d034:	f107 0310 	add.w	r3, r7, #16
 800d038:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d03c:	f107 030f 	add.w	r3, r7, #15
 800d040:	2200      	movs	r2, #0
 800d042:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d044:	2300      	movs	r3, #0
 800d046:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800d04a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d04e:	1dfa      	adds	r2, r7, #7
 800d050:	7812      	ldrb	r2, [r2, #0]
 800d052:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d054:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d058:	3301      	adds	r3, #1
 800d05a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800d05e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d062:	1dba      	adds	r2, r7, #6
 800d064:	7812      	ldrb	r2, [r2, #0]
 800d066:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d068:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d06c:	3301      	adds	r3, #1
 800d06e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800d072:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d076:	1c98      	adds	r0, r3, #2
 800d078:	1dbb      	adds	r3, r7, #6
 800d07a:	781a      	ldrb	r2, [r3, #0]
 800d07c:	463b      	mov	r3, r7
 800d07e:	6819      	ldr	r1, [r3, #0]
 800d080:	f000 f980 	bl	800d384 <Osal_MemCpy>
  index_input += Length;
 800d084:	1dbb      	adds	r3, r7, #6
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d08c:	4413      	add	r3, r2
 800d08e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d092:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d096:	2218      	movs	r2, #24
 800d098:	2100      	movs	r1, #0
 800d09a:	4618      	mov	r0, r3
 800d09c:	f000 f982 	bl	800d3a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d0a0:	233f      	movs	r3, #63	; 0x3f
 800d0a2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800d0a6:	230c      	movs	r3, #12
 800d0a8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d0ac:	f107 0310 	add.w	r3, r7, #16
 800d0b0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d0b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d0b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d0bc:	f107 030f 	add.w	r3, r7, #15
 800d0c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d0ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d0ce:	2100      	movs	r1, #0
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f000 fa0f 	bl	800d4f4 <hci_send_req>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	da01      	bge.n	800d0e0 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800d0dc:	23ff      	movs	r3, #255	; 0xff
 800d0de:	e002      	b.n	800d0e6 <aci_hal_write_config_data+0xc8>
  return status;
 800d0e0:	f107 030f 	add.w	r3, r7, #15
 800d0e4:	781b      	ldrb	r3, [r3, #0]
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}

0800d0f0 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b0cc      	sub	sp, #304	; 0x130
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	4602      	mov	r2, r0
 800d0f8:	1dfb      	adds	r3, r7, #7
 800d0fa:	701a      	strb	r2, [r3, #0]
 800d0fc:	1dbb      	adds	r3, r7, #6
 800d0fe:	460a      	mov	r2, r1
 800d100:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800d102:	f107 0310 	add.w	r3, r7, #16
 800d106:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d10a:	f107 030f 	add.w	r3, r7, #15
 800d10e:	2200      	movs	r2, #0
 800d110:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d112:	2300      	movs	r3, #0
 800d114:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800d118:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d11c:	1dfa      	adds	r2, r7, #7
 800d11e:	7812      	ldrb	r2, [r2, #0]
 800d120:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d122:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d126:	3301      	adds	r3, #1
 800d128:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800d12c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d130:	1dba      	adds	r2, r7, #6
 800d132:	7812      	ldrb	r2, [r2, #0]
 800d134:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d136:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d13a:	3301      	adds	r3, #1
 800d13c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d140:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d144:	2218      	movs	r2, #24
 800d146:	2100      	movs	r1, #0
 800d148:	4618      	mov	r0, r3
 800d14a:	f000 f92b 	bl	800d3a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d14e:	233f      	movs	r3, #63	; 0x3f
 800d150:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800d154:	230f      	movs	r3, #15
 800d156:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d15a:	f107 0310 	add.w	r3, r7, #16
 800d15e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d162:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d166:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d16a:	f107 030f 	add.w	r3, r7, #15
 800d16e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d172:	2301      	movs	r3, #1
 800d174:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d178:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d17c:	2100      	movs	r1, #0
 800d17e:	4618      	mov	r0, r3
 800d180:	f000 f9b8 	bl	800d4f4 <hci_send_req>
 800d184:	4603      	mov	r3, r0
 800d186:	2b00      	cmp	r3, #0
 800d188:	da01      	bge.n	800d18e <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800d18a:	23ff      	movs	r3, #255	; 0xff
 800d18c:	e002      	b.n	800d194 <aci_hal_set_tx_power_level+0xa4>
  return status;
 800d18e:	f107 030f 	add.w	r3, r7, #15
 800d192:	781b      	ldrb	r3, [r3, #0]
}
 800d194:	4618      	mov	r0, r3
 800d196:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}

0800d19e <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800d19e:	b580      	push	{r7, lr}
 800d1a0:	b088      	sub	sp, #32
 800d1a2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d1a8:	f107 0308 	add.w	r3, r7, #8
 800d1ac:	2218      	movs	r2, #24
 800d1ae:	2100      	movs	r1, #0
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f000 f8f7 	bl	800d3a4 <Osal_MemSet>
  rq.ogf = 0x03;
 800d1b6:	2303      	movs	r3, #3
 800d1b8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800d1ba:	2303      	movs	r3, #3
 800d1bc:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d1be:	1dfb      	adds	r3, r7, #7
 800d1c0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d1c6:	f107 0308 	add.w	r3, r7, #8
 800d1ca:	2100      	movs	r1, #0
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f000 f991 	bl	800d4f4 <hci_send_req>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	da01      	bge.n	800d1dc <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800d1d8:	23ff      	movs	r3, #255	; 0xff
 800d1da:	e000      	b.n	800d1de <hci_reset+0x40>
  return status;
 800d1dc:	79fb      	ldrb	r3, [r7, #7]
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3720      	adds	r7, #32
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}

0800d1e6 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800d1e6:	b580      	push	{r7, lr}
 800d1e8:	b0ce      	sub	sp, #312	; 0x138
 800d1ea:	af00      	add	r7, sp, #0
 800d1ec:	f107 0308 	add.w	r3, r7, #8
 800d1f0:	6019      	str	r1, [r3, #0]
 800d1f2:	1d3b      	adds	r3, r7, #4
 800d1f4:	601a      	str	r2, [r3, #0]
 800d1f6:	f107 030e 	add.w	r3, r7, #14
 800d1fa:	4602      	mov	r2, r0
 800d1fc:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800d1fe:	f107 0318 	add.w	r3, r7, #24
 800d202:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d206:	f107 0310 	add.w	r3, r7, #16
 800d20a:	2205      	movs	r2, #5
 800d20c:	2100      	movs	r1, #0
 800d20e:	4618      	mov	r0, r3
 800d210:	f000 f8c8 	bl	800d3a4 <Osal_MemSet>
  int index_input = 0;
 800d214:	2300      	movs	r3, #0
 800d216:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800d21a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d21e:	f107 020e 	add.w	r2, r7, #14
 800d222:	8812      	ldrh	r2, [r2, #0]
 800d224:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d226:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d22a:	3302      	adds	r3, #2
 800d22c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d230:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d234:	2218      	movs	r2, #24
 800d236:	2100      	movs	r1, #0
 800d238:	4618      	mov	r0, r3
 800d23a:	f000 f8b3 	bl	800d3a4 <Osal_MemSet>
  rq.ogf = 0x08;
 800d23e:	2308      	movs	r3, #8
 800d240:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800d244:	2330      	movs	r3, #48	; 0x30
 800d246:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800d24a:	f107 0318 	add.w	r3, r7, #24
 800d24e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800d252:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d256:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800d25a:	f107 0310 	add.w	r3, r7, #16
 800d25e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800d262:	2305      	movs	r3, #5
 800d264:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d268:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d26c:	2100      	movs	r1, #0
 800d26e:	4618      	mov	r0, r3
 800d270:	f000 f940 	bl	800d4f4 <hci_send_req>
 800d274:	4603      	mov	r3, r0
 800d276:	2b00      	cmp	r3, #0
 800d278:	da01      	bge.n	800d27e <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 800d27a:	23ff      	movs	r3, #255	; 0xff
 800d27c:	e016      	b.n	800d2ac <hci_le_read_phy+0xc6>
  if ( resp.Status )
 800d27e:	f107 0310 	add.w	r3, r7, #16
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d003      	beq.n	800d290 <hci_le_read_phy+0xaa>
    return resp.Status;
 800d288:	f107 0310 	add.w	r3, r7, #16
 800d28c:	781b      	ldrb	r3, [r3, #0]
 800d28e:	e00d      	b.n	800d2ac <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 800d290:	f107 0310 	add.w	r3, r7, #16
 800d294:	78da      	ldrb	r2, [r3, #3]
 800d296:	f107 0308 	add.w	r3, r7, #8
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800d29e:	f107 0310 	add.w	r3, r7, #16
 800d2a2:	791a      	ldrb	r2, [r3, #4]
 800d2a4:	1d3b      	adds	r3, r7, #4
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d2aa:	2300      	movs	r3, #0
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}

0800d2b6 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800d2b6:	b590      	push	{r4, r7, lr}
 800d2b8:	b0cd      	sub	sp, #308	; 0x134
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	4604      	mov	r4, r0
 800d2be:	4608      	mov	r0, r1
 800d2c0:	4611      	mov	r1, r2
 800d2c2:	1dfb      	adds	r3, r7, #7
 800d2c4:	4622      	mov	r2, r4
 800d2c6:	701a      	strb	r2, [r3, #0]
 800d2c8:	1dbb      	adds	r3, r7, #6
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	701a      	strb	r2, [r3, #0]
 800d2ce:	1d7b      	adds	r3, r7, #5
 800d2d0:	460a      	mov	r2, r1
 800d2d2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800d2d4:	f107 0310 	add.w	r3, r7, #16
 800d2d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d2dc:	f107 030f 	add.w	r3, r7, #15
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800d2ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d2ee:	1dfa      	adds	r2, r7, #7
 800d2f0:	7812      	ldrb	r2, [r2, #0]
 800d2f2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d2f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d2f8:	3301      	adds	r3, #1
 800d2fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800d2fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d302:	1dba      	adds	r2, r7, #6
 800d304:	7812      	ldrb	r2, [r2, #0]
 800d306:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d308:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d30c:	3301      	adds	r3, #1
 800d30e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800d312:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d316:	1d7a      	adds	r2, r7, #5
 800d318:	7812      	ldrb	r2, [r2, #0]
 800d31a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d31c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d320:	3301      	adds	r3, #1
 800d322:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d326:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d32a:	2218      	movs	r2, #24
 800d32c:	2100      	movs	r1, #0
 800d32e:	4618      	mov	r0, r3
 800d330:	f000 f838 	bl	800d3a4 <Osal_MemSet>
  rq.ogf = 0x08;
 800d334:	2308      	movs	r3, #8
 800d336:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800d33a:	2331      	movs	r3, #49	; 0x31
 800d33c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d340:	f107 0310 	add.w	r3, r7, #16
 800d344:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d348:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d34c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d350:	f107 030f 	add.w	r3, r7, #15
 800d354:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d358:	2301      	movs	r3, #1
 800d35a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d35e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d362:	2100      	movs	r1, #0
 800d364:	4618      	mov	r0, r3
 800d366:	f000 f8c5 	bl	800d4f4 <hci_send_req>
 800d36a:	4603      	mov	r3, r0
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	da01      	bge.n	800d374 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 800d370:	23ff      	movs	r3, #255	; 0xff
 800d372:	e002      	b.n	800d37a <hci_le_set_default_phy+0xc4>
  return status;
 800d374:	f107 030f 	add.w	r3, r7, #15
 800d378:	781b      	ldrb	r3, [r3, #0]
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800d380:	46bd      	mov	sp, r7
 800d382:	bd90      	pop	{r4, r7, pc}

0800d384 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b084      	sub	sp, #16
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800d390:	687a      	ldr	r2, [r7, #4]
 800d392:	68b9      	ldr	r1, [r7, #8]
 800d394:	68f8      	ldr	r0, [r7, #12]
 800d396:	f005 fe39 	bl	801300c <memcpy>
 800d39a:	4603      	mov	r3, r0
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3710      	adds	r7, #16
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}

0800d3a4 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b084      	sub	sp, #16
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	60f8      	str	r0, [r7, #12]
 800d3ac:	60b9      	str	r1, [r7, #8]
 800d3ae:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800d3b0:	687a      	ldr	r2, [r7, #4]
 800d3b2:	68b9      	ldr	r1, [r7, #8]
 800d3b4:	68f8      	ldr	r0, [r7, #12]
 800d3b6:	f005 fe34 	bl	8013022 <memset>
 800d3ba:	4603      	mov	r3, r0
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3710      	adds	r7, #16
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}

0800d3c4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b088      	sub	sp, #32
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800d3cc:	f107 030c 	add.w	r3, r7, #12
 800d3d0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800d3d8:	69fb      	ldr	r3, [r7, #28]
 800d3da:	2121      	movs	r1, #33	; 0x21
 800d3dc:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800d3e0:	f000 fa1e 	bl	800d820 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800d3e4:	69fb      	ldr	r3, [r7, #28]
 800d3e6:	330b      	adds	r3, #11
 800d3e8:	78db      	ldrb	r3, [r3, #3]
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3720      	adds	r7, #32
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}

0800d3f2 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800d3f2:	b580      	push	{r7, lr}
 800d3f4:	b088      	sub	sp, #32
 800d3f6:	af00      	add	r7, sp, #0
 800d3f8:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800d3fa:	f107 030c 	add.w	r3, r7, #12
 800d3fe:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800d406:	69fb      	ldr	r3, [r7, #28]
 800d408:	210f      	movs	r1, #15
 800d40a:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800d40e:	f000 fa07 	bl	800d820 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800d412:	69fb      	ldr	r3, [r7, #28]
 800d414:	330b      	adds	r3, #11
 800d416:	78db      	ldrb	r3, [r3, #3]
}
 800d418:	4618      	mov	r0, r3
 800d41a:	3720      	adds	r7, #32
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}

0800d420 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b082      	sub	sp, #8
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	685b      	ldr	r3, [r3, #4]
 800d42e:	4a08      	ldr	r2, [pc, #32]	; (800d450 <hci_init+0x30>)
 800d430:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800d432:	4a08      	ldr	r2, [pc, #32]	; (800d454 <hci_init+0x34>)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800d438:	4806      	ldr	r0, [pc, #24]	; (800d454 <hci_init+0x34>)
 800d43a:	f000 f973 	bl	800d724 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	4618      	mov	r0, r3
 800d444:	f000 f8d4 	bl	800d5f0 <TlInit>

  return;
 800d448:	bf00      	nop
}
 800d44a:	3708      	adds	r7, #8
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}
 800d450:	20000418 	.word	0x20000418
 800d454:	200003f0 	.word	0x200003f0

0800d458 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b084      	sub	sp, #16
 800d45c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800d45e:	4822      	ldr	r0, [pc, #136]	; (800d4e8 <hci_user_evt_proc+0x90>)
 800d460:	f000 ff04 	bl	800e26c <LST_is_empty>
 800d464:	4603      	mov	r3, r0
 800d466:	2b00      	cmp	r3, #0
 800d468:	d12b      	bne.n	800d4c2 <hci_user_evt_proc+0x6a>
 800d46a:	4b20      	ldr	r3, [pc, #128]	; (800d4ec <hci_user_evt_proc+0x94>)
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d027      	beq.n	800d4c2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800d472:	f107 030c 	add.w	r3, r7, #12
 800d476:	4619      	mov	r1, r3
 800d478:	481b      	ldr	r0, [pc, #108]	; (800d4e8 <hci_user_evt_proc+0x90>)
 800d47a:	f000 ff7e 	bl	800e37a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800d47e:	4b1c      	ldr	r3, [pc, #112]	; (800d4f0 <hci_user_evt_proc+0x98>)
 800d480:	69db      	ldr	r3, [r3, #28]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d00c      	beq.n	800d4a0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800d48a:	2301      	movs	r3, #1
 800d48c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800d48e:	4b18      	ldr	r3, [pc, #96]	; (800d4f0 <hci_user_evt_proc+0x98>)
 800d490:	69db      	ldr	r3, [r3, #28]
 800d492:	1d3a      	adds	r2, r7, #4
 800d494:	4610      	mov	r0, r2
 800d496:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800d498:	793a      	ldrb	r2, [r7, #4]
 800d49a:	4b14      	ldr	r3, [pc, #80]	; (800d4ec <hci_user_evt_proc+0x94>)
 800d49c:	701a      	strb	r2, [r3, #0]
 800d49e:	e002      	b.n	800d4a6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800d4a0:	4b12      	ldr	r3, [pc, #72]	; (800d4ec <hci_user_evt_proc+0x94>)
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800d4a6:	4b11      	ldr	r3, [pc, #68]	; (800d4ec <hci_user_evt_proc+0x94>)
 800d4a8:	781b      	ldrb	r3, [r3, #0]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d004      	beq.n	800d4b8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f000 fc03 	bl	800dcbc <TL_MM_EvtDone>
 800d4b6:	e004      	b.n	800d4c2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	480a      	ldr	r0, [pc, #40]	; (800d4e8 <hci_user_evt_proc+0x90>)
 800d4be:	f000 fef5 	bl	800e2ac <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800d4c2:	4809      	ldr	r0, [pc, #36]	; (800d4e8 <hci_user_evt_proc+0x90>)
 800d4c4:	f000 fed2 	bl	800e26c <LST_is_empty>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d107      	bne.n	800d4de <hci_user_evt_proc+0x86>
 800d4ce:	4b07      	ldr	r3, [pc, #28]	; (800d4ec <hci_user_evt_proc+0x94>)
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d003      	beq.n	800d4de <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800d4d6:	4804      	ldr	r0, [pc, #16]	; (800d4e8 <hci_user_evt_proc+0x90>)
 800d4d8:	f7f4 f90c 	bl	80016f4 <hci_notify_asynch_evt>
  }


  return;
 800d4dc:	bf00      	nop
 800d4de:	bf00      	nop
}
 800d4e0:	3710      	adds	r7, #16
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}
 800d4e6:	bf00      	nop
 800d4e8:	2000038c 	.word	0x2000038c
 800d4ec:	20000398 	.word	0x20000398
 800d4f0:	200003f0 	.word	0x200003f0

0800d4f4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b088      	sub	sp, #32
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
 800d4fc:	460b      	mov	r3, r1
 800d4fe:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800d500:	2000      	movs	r0, #0
 800d502:	f000 f8cb 	bl	800d69c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800d506:	2300      	movs	r3, #0
 800d508:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	885b      	ldrh	r3, [r3, #2]
 800d50e:	b21b      	sxth	r3, r3
 800d510:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d514:	b21a      	sxth	r2, r3
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	881b      	ldrh	r3, [r3, #0]
 800d51a:	029b      	lsls	r3, r3, #10
 800d51c:	b21b      	sxth	r3, r3
 800d51e:	4313      	orrs	r3, r2
 800d520:	b21b      	sxth	r3, r3
 800d522:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	68db      	ldr	r3, [r3, #12]
 800d528:	b2d9      	uxtb	r1, r3
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	689a      	ldr	r2, [r3, #8]
 800d52e:	8bbb      	ldrh	r3, [r7, #28]
 800d530:	4618      	mov	r0, r3
 800d532:	f000 f88d 	bl	800d650 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800d536:	e04e      	b.n	800d5d6 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800d538:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800d53c:	f7f4 f8fa 	bl	8001734 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800d540:	e043      	b.n	800d5ca <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800d542:	f107 030c 	add.w	r3, r7, #12
 800d546:	4619      	mov	r1, r3
 800d548:	4828      	ldr	r0, [pc, #160]	; (800d5ec <hci_send_req+0xf8>)
 800d54a:	f000 ff16 	bl	800e37a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	7a5b      	ldrb	r3, [r3, #9]
 800d552:	2b0f      	cmp	r3, #15
 800d554:	d114      	bne.n	800d580 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	330b      	adds	r3, #11
 800d55a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	885b      	ldrh	r3, [r3, #2]
 800d560:	b29b      	uxth	r3, r3
 800d562:	8bba      	ldrh	r2, [r7, #28]
 800d564:	429a      	cmp	r2, r3
 800d566:	d104      	bne.n	800d572 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	691b      	ldr	r3, [r3, #16]
 800d56c:	693a      	ldr	r2, [r7, #16]
 800d56e:	7812      	ldrb	r2, [r2, #0]
 800d570:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	785b      	ldrb	r3, [r3, #1]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d027      	beq.n	800d5ca <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800d57a:	2301      	movs	r3, #1
 800d57c:	77fb      	strb	r3, [r7, #31]
 800d57e:	e024      	b.n	800d5ca <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	330b      	adds	r3, #11
 800d584:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800d586:	69bb      	ldr	r3, [r7, #24]
 800d588:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d58c:	b29b      	uxth	r3, r3
 800d58e:	8bba      	ldrh	r2, [r7, #28]
 800d590:	429a      	cmp	r2, r3
 800d592:	d114      	bne.n	800d5be <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	7a9b      	ldrb	r3, [r3, #10]
 800d598:	3b03      	subs	r3, #3
 800d59a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	695a      	ldr	r2, [r3, #20]
 800d5a0:	7dfb      	ldrb	r3, [r7, #23]
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	bfa8      	it	ge
 800d5a6:	461a      	movge	r2, r3
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6918      	ldr	r0, [r3, #16]
 800d5b0:	69bb      	ldr	r3, [r7, #24]
 800d5b2:	1cd9      	adds	r1, r3, #3
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	695b      	ldr	r3, [r3, #20]
 800d5b8:	461a      	mov	r2, r3
 800d5ba:	f005 fd27 	bl	801300c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d001      	beq.n	800d5ca <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800d5ca:	4808      	ldr	r0, [pc, #32]	; (800d5ec <hci_send_req+0xf8>)
 800d5cc:	f000 fe4e 	bl	800e26c <LST_is_empty>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d0b5      	beq.n	800d542 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800d5d6:	7ffb      	ldrb	r3, [r7, #31]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d0ad      	beq.n	800d538 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800d5dc:	2001      	movs	r0, #1
 800d5de:	f000 f85d 	bl	800d69c <NotifyCmdStatus>

  return 0;
 800d5e2:	2300      	movs	r3, #0
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3720      	adds	r7, #32
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	20000410 	.word	0x20000410

0800d5f0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b086      	sub	sp, #24
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800d5f8:	480f      	ldr	r0, [pc, #60]	; (800d638 <TlInit+0x48>)
 800d5fa:	f000 fe27 	bl	800e24c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800d5fe:	4a0f      	ldr	r2, [pc, #60]	; (800d63c <TlInit+0x4c>)
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800d604:	480e      	ldr	r0, [pc, #56]	; (800d640 <TlInit+0x50>)
 800d606:	f000 fe21 	bl	800e24c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800d60a:	4b0e      	ldr	r3, [pc, #56]	; (800d644 <TlInit+0x54>)
 800d60c:	2201      	movs	r2, #1
 800d60e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800d610:	4b0d      	ldr	r3, [pc, #52]	; (800d648 <TlInit+0x58>)
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d00a      	beq.n	800d62e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800d61c:	4b0b      	ldr	r3, [pc, #44]	; (800d64c <TlInit+0x5c>)
 800d61e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800d620:	4b09      	ldr	r3, [pc, #36]	; (800d648 <TlInit+0x58>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	f107 0208 	add.w	r2, r7, #8
 800d628:	4610      	mov	r0, r2
 800d62a:	4798      	blx	r3
  }

  return;
 800d62c:	bf00      	nop
 800d62e:	bf00      	nop
}
 800d630:	3718      	adds	r7, #24
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}
 800d636:	bf00      	nop
 800d638:	20000410 	.word	0x20000410
 800d63c:	20000394 	.word	0x20000394
 800d640:	2000038c 	.word	0x2000038c
 800d644:	20000398 	.word	0x20000398
 800d648:	200003f0 	.word	0x200003f0
 800d64c:	0800d6dd 	.word	0x0800d6dd

0800d650 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b082      	sub	sp, #8
 800d654:	af00      	add	r7, sp, #0
 800d656:	4603      	mov	r3, r0
 800d658:	603a      	str	r2, [r7, #0]
 800d65a:	80fb      	strh	r3, [r7, #6]
 800d65c:	460b      	mov	r3, r1
 800d65e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800d660:	4b0c      	ldr	r3, [pc, #48]	; (800d694 <SendCmd+0x44>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	88fa      	ldrh	r2, [r7, #6]
 800d666:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800d66a:	4b0a      	ldr	r3, [pc, #40]	; (800d694 <SendCmd+0x44>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	797a      	ldrb	r2, [r7, #5]
 800d670:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800d672:	4b08      	ldr	r3, [pc, #32]	; (800d694 <SendCmd+0x44>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	330c      	adds	r3, #12
 800d678:	797a      	ldrb	r2, [r7, #5]
 800d67a:	6839      	ldr	r1, [r7, #0]
 800d67c:	4618      	mov	r0, r3
 800d67e:	f005 fcc5 	bl	801300c <memcpy>

  hciContext.io.Send(0,0);
 800d682:	4b05      	ldr	r3, [pc, #20]	; (800d698 <SendCmd+0x48>)
 800d684:	691b      	ldr	r3, [r3, #16]
 800d686:	2100      	movs	r1, #0
 800d688:	2000      	movs	r0, #0
 800d68a:	4798      	blx	r3

  return;
 800d68c:	bf00      	nop
}
 800d68e:	3708      	adds	r7, #8
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}
 800d694:	20000394 	.word	0x20000394
 800d698:	200003f0 	.word	0x200003f0

0800d69c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b082      	sub	sp, #8
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800d6a6:	79fb      	ldrb	r3, [r7, #7]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d108      	bne.n	800d6be <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800d6ac:	4b0a      	ldr	r3, [pc, #40]	; (800d6d8 <NotifyCmdStatus+0x3c>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d00d      	beq.n	800d6d0 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800d6b4:	4b08      	ldr	r3, [pc, #32]	; (800d6d8 <NotifyCmdStatus+0x3c>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	2000      	movs	r0, #0
 800d6ba:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800d6bc:	e008      	b.n	800d6d0 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800d6be:	4b06      	ldr	r3, [pc, #24]	; (800d6d8 <NotifyCmdStatus+0x3c>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d004      	beq.n	800d6d0 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800d6c6:	4b04      	ldr	r3, [pc, #16]	; (800d6d8 <NotifyCmdStatus+0x3c>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	2001      	movs	r0, #1
 800d6cc:	4798      	blx	r3
  return;
 800d6ce:	bf00      	nop
 800d6d0:	bf00      	nop
}
 800d6d2:	3708      	adds	r7, #8
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}
 800d6d8:	20000418 	.word	0x20000418

0800d6dc <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b082      	sub	sp, #8
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	7a5b      	ldrb	r3, [r3, #9]
 800d6e8:	2b0f      	cmp	r3, #15
 800d6ea:	d003      	beq.n	800d6f4 <TlEvtReceived+0x18>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	7a5b      	ldrb	r3, [r3, #9]
 800d6f0:	2b0e      	cmp	r3, #14
 800d6f2:	d107      	bne.n	800d704 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800d6f4:	6879      	ldr	r1, [r7, #4]
 800d6f6:	4809      	ldr	r0, [pc, #36]	; (800d71c <TlEvtReceived+0x40>)
 800d6f8:	f000 fdfc 	bl	800e2f4 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800d6fc:	2000      	movs	r0, #0
 800d6fe:	f7f4 f809 	bl	8001714 <hci_cmd_resp_release>
 800d702:	e006      	b.n	800d712 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800d704:	6879      	ldr	r1, [r7, #4]
 800d706:	4806      	ldr	r0, [pc, #24]	; (800d720 <TlEvtReceived+0x44>)
 800d708:	f000 fdf4 	bl	800e2f4 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800d70c:	4804      	ldr	r0, [pc, #16]	; (800d720 <TlEvtReceived+0x44>)
 800d70e:	f7f3 fff1 	bl	80016f4 <hci_notify_asynch_evt>
  }

  return;
 800d712:	bf00      	nop
}
 800d714:	3708      	adds	r7, #8
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
 800d71a:	bf00      	nop
 800d71c:	20000410 	.word	0x20000410
 800d720:	2000038c 	.word	0x2000038c

0800d724 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800d724:	b480      	push	{r7}
 800d726:	b083      	sub	sp, #12
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	4a05      	ldr	r2, [pc, #20]	; (800d744 <hci_register_io_bus+0x20>)
 800d730:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	4a04      	ldr	r2, [pc, #16]	; (800d748 <hci_register_io_bus+0x24>)
 800d736:	611a      	str	r2, [r3, #16]

  return;
 800d738:	bf00      	nop
}
 800d73a:	370c      	adds	r7, #12
 800d73c:	46bd      	mov	sp, r7
 800d73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d742:	4770      	bx	lr
 800d744:	0800da35 	.word	0x0800da35
 800d748:	0800da9d 	.word	0x0800da9d

0800d74c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b082      	sub	sp, #8
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
 800d754:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	685b      	ldr	r3, [r3, #4]
 800d75a:	4a08      	ldr	r2, [pc, #32]	; (800d77c <shci_init+0x30>)
 800d75c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800d75e:	4a08      	ldr	r2, [pc, #32]	; (800d780 <shci_init+0x34>)
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800d764:	4806      	ldr	r0, [pc, #24]	; (800d780 <shci_init+0x34>)
 800d766:	f000 f911 	bl	800d98c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	4618      	mov	r0, r3
 800d770:	f000 f894 	bl	800d89c <TlInit>

  return;
 800d774:	bf00      	nop
}
 800d776:	3708      	adds	r7, #8
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	2000043c 	.word	0x2000043c
 800d780:	2000041c 	.word	0x2000041c

0800d784 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b084      	sub	sp, #16
 800d788:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800d78a:	4822      	ldr	r0, [pc, #136]	; (800d814 <shci_user_evt_proc+0x90>)
 800d78c:	f000 fd6e 	bl	800e26c <LST_is_empty>
 800d790:	4603      	mov	r3, r0
 800d792:	2b00      	cmp	r3, #0
 800d794:	d12b      	bne.n	800d7ee <shci_user_evt_proc+0x6a>
 800d796:	4b20      	ldr	r3, [pc, #128]	; (800d818 <shci_user_evt_proc+0x94>)
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d027      	beq.n	800d7ee <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800d79e:	f107 030c 	add.w	r3, r7, #12
 800d7a2:	4619      	mov	r1, r3
 800d7a4:	481b      	ldr	r0, [pc, #108]	; (800d814 <shci_user_evt_proc+0x90>)
 800d7a6:	f000 fde8 	bl	800e37a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800d7aa:	4b1c      	ldr	r3, [pc, #112]	; (800d81c <shci_user_evt_proc+0x98>)
 800d7ac:	69db      	ldr	r3, [r3, #28]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d00c      	beq.n	800d7cc <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800d7ba:	4b18      	ldr	r3, [pc, #96]	; (800d81c <shci_user_evt_proc+0x98>)
 800d7bc:	69db      	ldr	r3, [r3, #28]
 800d7be:	1d3a      	adds	r2, r7, #4
 800d7c0:	4610      	mov	r0, r2
 800d7c2:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800d7c4:	793a      	ldrb	r2, [r7, #4]
 800d7c6:	4b14      	ldr	r3, [pc, #80]	; (800d818 <shci_user_evt_proc+0x94>)
 800d7c8:	701a      	strb	r2, [r3, #0]
 800d7ca:	e002      	b.n	800d7d2 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800d7cc:	4b12      	ldr	r3, [pc, #72]	; (800d818 <shci_user_evt_proc+0x94>)
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800d7d2:	4b11      	ldr	r3, [pc, #68]	; (800d818 <shci_user_evt_proc+0x94>)
 800d7d4:	781b      	ldrb	r3, [r3, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d004      	beq.n	800d7e4 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f000 fa6d 	bl	800dcbc <TL_MM_EvtDone>
 800d7e2:	e004      	b.n	800d7ee <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	480a      	ldr	r0, [pc, #40]	; (800d814 <shci_user_evt_proc+0x90>)
 800d7ea:	f000 fd5f 	bl	800e2ac <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800d7ee:	4809      	ldr	r0, [pc, #36]	; (800d814 <shci_user_evt_proc+0x90>)
 800d7f0:	f000 fd3c 	bl	800e26c <LST_is_empty>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d107      	bne.n	800d80a <shci_user_evt_proc+0x86>
 800d7fa:	4b07      	ldr	r3, [pc, #28]	; (800d818 <shci_user_evt_proc+0x94>)
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d003      	beq.n	800d80a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800d802:	4804      	ldr	r0, [pc, #16]	; (800d814 <shci_user_evt_proc+0x90>)
 800d804:	f7f4 fd86 	bl	8002314 <shci_notify_asynch_evt>
  }


  return;
 800d808:	bf00      	nop
 800d80a:	bf00      	nop
}
 800d80c:	3710      	adds	r7, #16
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
 800d812:	bf00      	nop
 800d814:	200003a4 	.word	0x200003a4
 800d818:	200003b4 	.word	0x200003b4
 800d81c:	2000041c 	.word	0x2000041c

0800d820 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b084      	sub	sp, #16
 800d824:	af00      	add	r7, sp, #0
 800d826:	60ba      	str	r2, [r7, #8]
 800d828:	607b      	str	r3, [r7, #4]
 800d82a:	4603      	mov	r3, r0
 800d82c:	81fb      	strh	r3, [r7, #14]
 800d82e:	460b      	mov	r3, r1
 800d830:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800d832:	2000      	movs	r0, #0
 800d834:	f000 f864 	bl	800d900 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800d838:	4b16      	ldr	r3, [pc, #88]	; (800d894 <shci_send+0x74>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	89fa      	ldrh	r2, [r7, #14]
 800d83e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800d842:	4b14      	ldr	r3, [pc, #80]	; (800d894 <shci_send+0x74>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	7b7a      	ldrb	r2, [r7, #13]
 800d848:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800d84a:	4b12      	ldr	r3, [pc, #72]	; (800d894 <shci_send+0x74>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	330c      	adds	r3, #12
 800d850:	7b7a      	ldrb	r2, [r7, #13]
 800d852:	68b9      	ldr	r1, [r7, #8]
 800d854:	4618      	mov	r0, r3
 800d856:	f005 fbd9 	bl	801300c <memcpy>

  shciContext.io.Send(0,0);
 800d85a:	4b0f      	ldr	r3, [pc, #60]	; (800d898 <shci_send+0x78>)
 800d85c:	691b      	ldr	r3, [r3, #16]
 800d85e:	2100      	movs	r1, #0
 800d860:	2000      	movs	r0, #0
 800d862:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800d864:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800d868:	f7f4 fd74 	bl	8002354 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f103 0008 	add.w	r0, r3, #8
 800d872:	4b08      	ldr	r3, [pc, #32]	; (800d894 <shci_send+0x74>)
 800d874:	6819      	ldr	r1, [r3, #0]
 800d876:	4b07      	ldr	r3, [pc, #28]	; (800d894 <shci_send+0x74>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	789b      	ldrb	r3, [r3, #2]
 800d87c:	3303      	adds	r3, #3
 800d87e:	461a      	mov	r2, r3
 800d880:	f005 fbc4 	bl	801300c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800d884:	2001      	movs	r0, #1
 800d886:	f000 f83b 	bl	800d900 <Cmd_SetStatus>

  return;
 800d88a:	bf00      	nop
}
 800d88c:	3710      	adds	r7, #16
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	200003b0 	.word	0x200003b0
 800d898:	2000041c 	.word	0x2000041c

0800d89c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b086      	sub	sp, #24
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800d8a4:	4a10      	ldr	r2, [pc, #64]	; (800d8e8 <TlInit+0x4c>)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800d8aa:	4810      	ldr	r0, [pc, #64]	; (800d8ec <TlInit+0x50>)
 800d8ac:	f000 fcce 	bl	800e24c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800d8b0:	2001      	movs	r0, #1
 800d8b2:	f000 f825 	bl	800d900 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800d8b6:	4b0e      	ldr	r3, [pc, #56]	; (800d8f0 <TlInit+0x54>)
 800d8b8:	2201      	movs	r2, #1
 800d8ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800d8bc:	4b0d      	ldr	r3, [pc, #52]	; (800d8f4 <TlInit+0x58>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d00c      	beq.n	800d8de <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800d8c8:	4b0b      	ldr	r3, [pc, #44]	; (800d8f8 <TlInit+0x5c>)
 800d8ca:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800d8cc:	4b0b      	ldr	r3, [pc, #44]	; (800d8fc <TlInit+0x60>)
 800d8ce:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800d8d0:	4b08      	ldr	r3, [pc, #32]	; (800d8f4 <TlInit+0x58>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	f107 020c 	add.w	r2, r7, #12
 800d8d8:	4610      	mov	r0, r2
 800d8da:	4798      	blx	r3
  }

  return;
 800d8dc:	bf00      	nop
 800d8de:	bf00      	nop
}
 800d8e0:	3718      	adds	r7, #24
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}
 800d8e6:	bf00      	nop
 800d8e8:	200003b0 	.word	0x200003b0
 800d8ec:	200003a4 	.word	0x200003a4
 800d8f0:	200003b4 	.word	0x200003b4
 800d8f4:	2000041c 	.word	0x2000041c
 800d8f8:	0800d951 	.word	0x0800d951
 800d8fc:	0800d969 	.word	0x0800d969

0800d900 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b082      	sub	sp, #8
 800d904:	af00      	add	r7, sp, #0
 800d906:	4603      	mov	r3, r0
 800d908:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800d90a:	79fb      	ldrb	r3, [r7, #7]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d10b      	bne.n	800d928 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800d910:	4b0d      	ldr	r3, [pc, #52]	; (800d948 <Cmd_SetStatus+0x48>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d003      	beq.n	800d920 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800d918:	4b0b      	ldr	r3, [pc, #44]	; (800d948 <Cmd_SetStatus+0x48>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	2000      	movs	r0, #0
 800d91e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800d920:	4b0a      	ldr	r3, [pc, #40]	; (800d94c <Cmd_SetStatus+0x4c>)
 800d922:	2200      	movs	r2, #0
 800d924:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800d926:	e00b      	b.n	800d940 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800d928:	4b08      	ldr	r3, [pc, #32]	; (800d94c <Cmd_SetStatus+0x4c>)
 800d92a:	2201      	movs	r2, #1
 800d92c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800d92e:	4b06      	ldr	r3, [pc, #24]	; (800d948 <Cmd_SetStatus+0x48>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d004      	beq.n	800d940 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800d936:	4b04      	ldr	r3, [pc, #16]	; (800d948 <Cmd_SetStatus+0x48>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	2001      	movs	r0, #1
 800d93c:	4798      	blx	r3
  return;
 800d93e:	bf00      	nop
 800d940:	bf00      	nop
}
 800d942:	3708      	adds	r7, #8
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}
 800d948:	2000043c 	.word	0x2000043c
 800d94c:	200003ac 	.word	0x200003ac

0800d950 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b082      	sub	sp, #8
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800d958:	2000      	movs	r0, #0
 800d95a:	f7f4 fceb 	bl	8002334 <shci_cmd_resp_release>

  return;
 800d95e:	bf00      	nop
}
 800d960:	3708      	adds	r7, #8
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}
	...

0800d968 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800d970:	6879      	ldr	r1, [r7, #4]
 800d972:	4805      	ldr	r0, [pc, #20]	; (800d988 <TlUserEvtReceived+0x20>)
 800d974:	f000 fcbe 	bl	800e2f4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800d978:	4803      	ldr	r0, [pc, #12]	; (800d988 <TlUserEvtReceived+0x20>)
 800d97a:	f7f4 fccb 	bl	8002314 <shci_notify_asynch_evt>

  return;
 800d97e:	bf00      	nop
}
 800d980:	3708      	adds	r7, #8
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}
 800d986:	bf00      	nop
 800d988:	200003a4 	.word	0x200003a4

0800d98c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800d98c:	b480      	push	{r7}
 800d98e:	b083      	sub	sp, #12
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	4a05      	ldr	r2, [pc, #20]	; (800d9ac <shci_register_io_bus+0x20>)
 800d998:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	4a04      	ldr	r2, [pc, #16]	; (800d9b0 <shci_register_io_bus+0x24>)
 800d99e:	611a      	str	r2, [r3, #16]

  return;
 800d9a0:	bf00      	nop
}
 800d9a2:	370c      	adds	r7, #12
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9aa:	4770      	bx	lr
 800d9ac:	0800db49 	.word	0x0800db49
 800d9b0:	0800db9d 	.word	0x0800db9d

0800d9b4 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800d9b8:	f7f4 f982 	bl	8001cc0 <HW_IPCC_Enable>

  return;
 800d9bc:	bf00      	nop
}
 800d9be:	bd80      	pop	{r7, pc}

0800d9c0 <TL_Init>:


void TL_Init( void )
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800d9c4:	4b10      	ldr	r3, [pc, #64]	; (800da08 <TL_Init+0x48>)
 800d9c6:	4a11      	ldr	r2, [pc, #68]	; (800da0c <TL_Init+0x4c>)
 800d9c8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800d9ca:	4b0f      	ldr	r3, [pc, #60]	; (800da08 <TL_Init+0x48>)
 800d9cc:	4a10      	ldr	r2, [pc, #64]	; (800da10 <TL_Init+0x50>)
 800d9ce:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800d9d0:	4b0d      	ldr	r3, [pc, #52]	; (800da08 <TL_Init+0x48>)
 800d9d2:	4a10      	ldr	r2, [pc, #64]	; (800da14 <TL_Init+0x54>)
 800d9d4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800d9d6:	4b0c      	ldr	r3, [pc, #48]	; (800da08 <TL_Init+0x48>)
 800d9d8:	4a0f      	ldr	r2, [pc, #60]	; (800da18 <TL_Init+0x58>)
 800d9da:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 800d9dc:	4b0a      	ldr	r3, [pc, #40]	; (800da08 <TL_Init+0x48>)
 800d9de:	4a0f      	ldr	r2, [pc, #60]	; (800da1c <TL_Init+0x5c>)
 800d9e0:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800d9e2:	4b09      	ldr	r3, [pc, #36]	; (800da08 <TL_Init+0x48>)
 800d9e4:	4a0e      	ldr	r2, [pc, #56]	; (800da20 <TL_Init+0x60>)
 800d9e6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800d9e8:	4b07      	ldr	r3, [pc, #28]	; (800da08 <TL_Init+0x48>)
 800d9ea:	4a0e      	ldr	r2, [pc, #56]	; (800da24 <TL_Init+0x64>)
 800d9ec:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800d9ee:	4b06      	ldr	r3, [pc, #24]	; (800da08 <TL_Init+0x48>)
 800d9f0:	4a0d      	ldr	r2, [pc, #52]	; (800da28 <TL_Init+0x68>)
 800d9f2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800d9f4:	4b04      	ldr	r3, [pc, #16]	; (800da08 <TL_Init+0x48>)
 800d9f6:	4a0d      	ldr	r2, [pc, #52]	; (800da2c <TL_Init+0x6c>)
 800d9f8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800d9fa:	4b03      	ldr	r3, [pc, #12]	; (800da08 <TL_Init+0x48>)
 800d9fc:	4a0c      	ldr	r2, [pc, #48]	; (800da30 <TL_Init+0x70>)
 800d9fe:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800da00:	f7f4 f972 	bl	8001ce8 <HW_IPCC_Init>

  return;
 800da04:	bf00      	nop
}
 800da06:	bd80      	pop	{r7, pc}
 800da08:	20030000 	.word	0x20030000
 800da0c:	20030134 	.word	0x20030134
 800da10:	20030154 	.word	0x20030154
 800da14:	20030164 	.word	0x20030164
 800da18:	20030170 	.word	0x20030170
 800da1c:	20030178 	.word	0x20030178
 800da20:	20030180 	.word	0x20030180
 800da24:	20030188 	.word	0x20030188
 800da28:	200301a4 	.word	0x200301a4
 800da2c:	200301a8 	.word	0x200301a8
 800da30:	200301b4 	.word	0x200301b4

0800da34 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b084      	sub	sp, #16
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800da40:	4811      	ldr	r0, [pc, #68]	; (800da88 <TL_BLE_Init+0x54>)
 800da42:	f000 fc03 	bl	800e24c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800da46:	4b11      	ldr	r3, [pc, #68]	; (800da8c <TL_BLE_Init+0x58>)
 800da48:	685b      	ldr	r3, [r3, #4]
 800da4a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	689a      	ldr	r2, [r3, #8]
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	68da      	ldr	r2, [r3, #12]
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	4a0c      	ldr	r2, [pc, #48]	; (800da90 <TL_BLE_Init+0x5c>)
 800da60:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	4a08      	ldr	r2, [pc, #32]	; (800da88 <TL_BLE_Init+0x54>)
 800da66:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800da68:	f7f4 f954 	bl	8001d14 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	4a08      	ldr	r2, [pc, #32]	; (800da94 <TL_BLE_Init+0x60>)
 800da72:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	685b      	ldr	r3, [r3, #4]
 800da78:	4a07      	ldr	r2, [pc, #28]	; (800da98 <TL_BLE_Init+0x64>)
 800da7a:	6013      	str	r3, [r2, #0]

  return 0;
 800da7c:	2300      	movs	r3, #0
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3710      	adds	r7, #16
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	200301d0 	.word	0x200301d0
 800da8c:	20030000 	.word	0x20030000
 800da90:	20030a48 	.word	0x20030a48
 800da94:	20000448 	.word	0x20000448
 800da98:	2000044c 	.word	0x2000044c

0800da9c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b082      	sub	sp, #8
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	460b      	mov	r3, r1
 800daa6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800daa8:	4b09      	ldr	r3, [pc, #36]	; (800dad0 <TL_BLE_SendCmd+0x34>)
 800daaa:	685b      	ldr	r3, [r3, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	2201      	movs	r2, #1
 800dab0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800dab2:	4b07      	ldr	r3, [pc, #28]	; (800dad0 <TL_BLE_SendCmd+0x34>)
 800dab4:	685b      	ldr	r3, [r3, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	4619      	mov	r1, r3
 800daba:	2001      	movs	r0, #1
 800dabc:	f000 f96c 	bl	800dd98 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800dac0:	f7f4 f932 	bl	8001d28 <HW_IPCC_BLE_SendCmd>

  return 0;
 800dac4:	2300      	movs	r3, #0
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3708      	adds	r7, #8
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}
 800dace:	bf00      	nop
 800dad0:	20030000 	.word	0x20030000

0800dad4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b082      	sub	sp, #8
 800dad8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800dada:	e01c      	b.n	800db16 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800dadc:	1d3b      	adds	r3, r7, #4
 800dade:	4619      	mov	r1, r3
 800dae0:	4812      	ldr	r0, [pc, #72]	; (800db2c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800dae2:	f000 fc4a 	bl	800e37a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	7a5b      	ldrb	r3, [r3, #9]
 800daea:	2b0f      	cmp	r3, #15
 800daec:	d003      	beq.n	800daf6 <HW_IPCC_BLE_RxEvtNot+0x22>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	7a5b      	ldrb	r3, [r3, #9]
 800daf2:	2b0e      	cmp	r3, #14
 800daf4:	d105      	bne.n	800db02 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	4619      	mov	r1, r3
 800dafa:	2002      	movs	r0, #2
 800dafc:	f000 f94c 	bl	800dd98 <OutputDbgTrace>
 800db00:	e004      	b.n	800db0c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	4619      	mov	r1, r3
 800db06:	2003      	movs	r0, #3
 800db08:	f000 f946 	bl	800dd98 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800db0c:	4b08      	ldr	r3, [pc, #32]	; (800db30 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	687a      	ldr	r2, [r7, #4]
 800db12:	4610      	mov	r0, r2
 800db14:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800db16:	4805      	ldr	r0, [pc, #20]	; (800db2c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800db18:	f000 fba8 	bl	800e26c <LST_is_empty>
 800db1c:	4603      	mov	r3, r0
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d0dc      	beq.n	800dadc <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800db22:	bf00      	nop
}
 800db24:	3708      	adds	r7, #8
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}
 800db2a:	bf00      	nop
 800db2c:	200301d0 	.word	0x200301d0
 800db30:	20000448 	.word	0x20000448

0800db34 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800db38:	4b02      	ldr	r3, [pc, #8]	; (800db44 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	4798      	blx	r3

  return;
 800db3e:	bf00      	nop
}
 800db40:	bd80      	pop	{r7, pc}
 800db42:	bf00      	nop
 800db44:	2000044c 	.word	0x2000044c

0800db48 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b084      	sub	sp, #16
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800db54:	480d      	ldr	r0, [pc, #52]	; (800db8c <TL_SYS_Init+0x44>)
 800db56:	f000 fb79 	bl	800e24c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800db5a:	4b0d      	ldr	r3, [pc, #52]	; (800db90 <TL_SYS_Init+0x48>)
 800db5c:	68db      	ldr	r3, [r3, #12]
 800db5e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	689a      	ldr	r2, [r3, #8]
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	4a08      	ldr	r2, [pc, #32]	; (800db8c <TL_SYS_Init+0x44>)
 800db6c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800db6e:	f7f4 f8fd 	bl	8001d6c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	4a07      	ldr	r2, [pc, #28]	; (800db94 <TL_SYS_Init+0x4c>)
 800db78:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	685b      	ldr	r3, [r3, #4]
 800db7e:	4a06      	ldr	r2, [pc, #24]	; (800db98 <TL_SYS_Init+0x50>)
 800db80:	6013      	str	r3, [r2, #0]

  return 0;
 800db82:	2300      	movs	r3, #0
}
 800db84:	4618      	mov	r0, r3
 800db86:	3710      	adds	r7, #16
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}
 800db8c:	200301d8 	.word	0x200301d8
 800db90:	20030000 	.word	0x20030000
 800db94:	20000450 	.word	0x20000450
 800db98:	20000454 	.word	0x20000454

0800db9c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b082      	sub	sp, #8
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	460b      	mov	r3, r1
 800dba6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800dba8:	4b09      	ldr	r3, [pc, #36]	; (800dbd0 <TL_SYS_SendCmd+0x34>)
 800dbaa:	68db      	ldr	r3, [r3, #12]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	2210      	movs	r2, #16
 800dbb0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800dbb2:	4b07      	ldr	r3, [pc, #28]	; (800dbd0 <TL_SYS_SendCmd+0x34>)
 800dbb4:	68db      	ldr	r3, [r3, #12]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	4619      	mov	r1, r3
 800dbba:	2004      	movs	r0, #4
 800dbbc:	f000 f8ec 	bl	800dd98 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800dbc0:	f7f4 f8de 	bl	8001d80 <HW_IPCC_SYS_SendCmd>

  return 0;
 800dbc4:	2300      	movs	r3, #0
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3708      	adds	r7, #8
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}
 800dbce:	bf00      	nop
 800dbd0:	20030000 	.word	0x20030000

0800dbd4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800dbd8:	4b07      	ldr	r3, [pc, #28]	; (800dbf8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800dbda:	68db      	ldr	r3, [r3, #12]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	4619      	mov	r1, r3
 800dbe0:	2005      	movs	r0, #5
 800dbe2:	f000 f8d9 	bl	800dd98 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800dbe6:	4b05      	ldr	r3, [pc, #20]	; (800dbfc <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	4a03      	ldr	r2, [pc, #12]	; (800dbf8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800dbec:	68d2      	ldr	r2, [r2, #12]
 800dbee:	6812      	ldr	r2, [r2, #0]
 800dbf0:	4610      	mov	r0, r2
 800dbf2:	4798      	blx	r3

  return;
 800dbf4:	bf00      	nop
}
 800dbf6:	bd80      	pop	{r7, pc}
 800dbf8:	20030000 	.word	0x20030000
 800dbfc:	20000450 	.word	0x20000450

0800dc00 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b082      	sub	sp, #8
 800dc04:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800dc06:	e00e      	b.n	800dc26 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800dc08:	1d3b      	adds	r3, r7, #4
 800dc0a:	4619      	mov	r1, r3
 800dc0c:	480b      	ldr	r0, [pc, #44]	; (800dc3c <HW_IPCC_SYS_EvtNot+0x3c>)
 800dc0e:	f000 fbb4 	bl	800e37a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	4619      	mov	r1, r3
 800dc16:	2006      	movs	r0, #6
 800dc18:	f000 f8be 	bl	800dd98 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800dc1c:	4b08      	ldr	r3, [pc, #32]	; (800dc40 <HW_IPCC_SYS_EvtNot+0x40>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	687a      	ldr	r2, [r7, #4]
 800dc22:	4610      	mov	r0, r2
 800dc24:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800dc26:	4805      	ldr	r0, [pc, #20]	; (800dc3c <HW_IPCC_SYS_EvtNot+0x3c>)
 800dc28:	f000 fb20 	bl	800e26c <LST_is_empty>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d0ea      	beq.n	800dc08 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800dc32:	bf00      	nop
}
 800dc34:	3708      	adds	r7, #8
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}
 800dc3a:	bf00      	nop
 800dc3c:	200301d8 	.word	0x200301d8
 800dc40:	20000454 	.word	0x20000454

0800dc44 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b082      	sub	sp, #8
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800dc4c:	4817      	ldr	r0, [pc, #92]	; (800dcac <TL_MM_Init+0x68>)
 800dc4e:	f000 fafd 	bl	800e24c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800dc52:	4817      	ldr	r0, [pc, #92]	; (800dcb0 <TL_MM_Init+0x6c>)
 800dc54:	f000 fafa 	bl	800e24c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800dc58:	4b16      	ldr	r3, [pc, #88]	; (800dcb4 <TL_MM_Init+0x70>)
 800dc5a:	691b      	ldr	r3, [r3, #16]
 800dc5c:	4a16      	ldr	r2, [pc, #88]	; (800dcb8 <TL_MM_Init+0x74>)
 800dc5e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800dc60:	4b15      	ldr	r3, [pc, #84]	; (800dcb8 <TL_MM_Init+0x74>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	687a      	ldr	r2, [r7, #4]
 800dc66:	6892      	ldr	r2, [r2, #8]
 800dc68:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800dc6a:	4b13      	ldr	r3, [pc, #76]	; (800dcb8 <TL_MM_Init+0x74>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	687a      	ldr	r2, [r7, #4]
 800dc70:	68d2      	ldr	r2, [r2, #12]
 800dc72:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800dc74:	4b10      	ldr	r3, [pc, #64]	; (800dcb8 <TL_MM_Init+0x74>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	4a0c      	ldr	r2, [pc, #48]	; (800dcac <TL_MM_Init+0x68>)
 800dc7a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800dc7c:	4b0e      	ldr	r3, [pc, #56]	; (800dcb8 <TL_MM_Init+0x74>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	687a      	ldr	r2, [r7, #4]
 800dc82:	6812      	ldr	r2, [r2, #0]
 800dc84:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800dc86:	4b0c      	ldr	r3, [pc, #48]	; (800dcb8 <TL_MM_Init+0x74>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	687a      	ldr	r2, [r7, #4]
 800dc8c:	6852      	ldr	r2, [r2, #4]
 800dc8e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800dc90:	4b09      	ldr	r3, [pc, #36]	; (800dcb8 <TL_MM_Init+0x74>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	687a      	ldr	r2, [r7, #4]
 800dc96:	6912      	ldr	r2, [r2, #16]
 800dc98:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800dc9a:	4b07      	ldr	r3, [pc, #28]	; (800dcb8 <TL_MM_Init+0x74>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	687a      	ldr	r2, [r7, #4]
 800dca0:	6952      	ldr	r2, [r2, #20]
 800dca2:	619a      	str	r2, [r3, #24]

  return;
 800dca4:	bf00      	nop
}
 800dca6:	3708      	adds	r7, #8
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}
 800dcac:	200301c0 	.word	0x200301c0
 800dcb0:	20000440 	.word	0x20000440
 800dcb4:	20030000 	.word	0x20030000
 800dcb8:	20000458 	.word	0x20000458

0800dcbc <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b082      	sub	sp, #8
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800dcc4:	6879      	ldr	r1, [r7, #4]
 800dcc6:	4807      	ldr	r0, [pc, #28]	; (800dce4 <TL_MM_EvtDone+0x28>)
 800dcc8:	f000 fb14 	bl	800e2f4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800dccc:	6879      	ldr	r1, [r7, #4]
 800dcce:	2000      	movs	r0, #0
 800dcd0:	f000 f862 	bl	800dd98 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800dcd4:	4804      	ldr	r0, [pc, #16]	; (800dce8 <TL_MM_EvtDone+0x2c>)
 800dcd6:	f7f4 f879 	bl	8001dcc <HW_IPCC_MM_SendFreeBuf>

  return;
 800dcda:	bf00      	nop
}
 800dcdc:	3708      	adds	r7, #8
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	20000440 	.word	0x20000440
 800dce8:	0800dced 	.word	0x0800dced

0800dcec <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b082      	sub	sp, #8
 800dcf0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800dcf2:	e00c      	b.n	800dd0e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800dcf4:	1d3b      	adds	r3, r7, #4
 800dcf6:	4619      	mov	r1, r3
 800dcf8:	480a      	ldr	r0, [pc, #40]	; (800dd24 <SendFreeBuf+0x38>)
 800dcfa:	f000 fb3e 	bl	800e37a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800dcfe:	4b0a      	ldr	r3, [pc, #40]	; (800dd28 <SendFreeBuf+0x3c>)
 800dd00:	691b      	ldr	r3, [r3, #16]
 800dd02:	691b      	ldr	r3, [r3, #16]
 800dd04:	687a      	ldr	r2, [r7, #4]
 800dd06:	4611      	mov	r1, r2
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f000 faf3 	bl	800e2f4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800dd0e:	4805      	ldr	r0, [pc, #20]	; (800dd24 <SendFreeBuf+0x38>)
 800dd10:	f000 faac 	bl	800e26c <LST_is_empty>
 800dd14:	4603      	mov	r3, r0
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d0ec      	beq.n	800dcf4 <SendFreeBuf+0x8>
  }

  return;
 800dd1a:	bf00      	nop
}
 800dd1c:	3708      	adds	r7, #8
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}
 800dd22:	bf00      	nop
 800dd24:	20000440 	.word	0x20000440
 800dd28:	20030000 	.word	0x20030000

0800dd2c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800dd30:	4805      	ldr	r0, [pc, #20]	; (800dd48 <TL_TRACES_Init+0x1c>)
 800dd32:	f000 fa8b 	bl	800e24c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800dd36:	4b05      	ldr	r3, [pc, #20]	; (800dd4c <TL_TRACES_Init+0x20>)
 800dd38:	695b      	ldr	r3, [r3, #20]
 800dd3a:	4a03      	ldr	r2, [pc, #12]	; (800dd48 <TL_TRACES_Init+0x1c>)
 800dd3c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800dd3e:	f7f4 f87b 	bl	8001e38 <HW_IPCC_TRACES_Init>

  return;
 800dd42:	bf00      	nop
}
 800dd44:	bd80      	pop	{r7, pc}
 800dd46:	bf00      	nop
 800dd48:	200301c8 	.word	0x200301c8
 800dd4c:	20030000 	.word	0x20030000

0800dd50 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b082      	sub	sp, #8
 800dd54:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800dd56:	e008      	b.n	800dd6a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800dd58:	1d3b      	adds	r3, r7, #4
 800dd5a:	4619      	mov	r1, r3
 800dd5c:	4808      	ldr	r0, [pc, #32]	; (800dd80 <HW_IPCC_TRACES_EvtNot+0x30>)
 800dd5e:	f000 fb0c 	bl	800e37a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	4618      	mov	r0, r3
 800dd66:	f000 f80d 	bl	800dd84 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800dd6a:	4805      	ldr	r0, [pc, #20]	; (800dd80 <HW_IPCC_TRACES_EvtNot+0x30>)
 800dd6c:	f000 fa7e 	bl	800e26c <LST_is_empty>
 800dd70:	4603      	mov	r3, r0
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d0f0      	beq.n	800dd58 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800dd76:	bf00      	nop
}
 800dd78:	3708      	adds	r7, #8
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
 800dd7e:	bf00      	nop
 800dd80:	200301c8 	.word	0x200301c8

0800dd84 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800dd84:	b480      	push	{r7}
 800dd86:	b083      	sub	sp, #12
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800dd8c:	bf00      	nop
 800dd8e:	370c      	adds	r7, #12
 800dd90:	46bd      	mov	sp, r7
 800dd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd96:	4770      	bx	lr

0800dd98 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800dd98:	b480      	push	{r7}
 800dd9a:	b085      	sub	sp, #20
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	4603      	mov	r3, r0
 800dda0:	6039      	str	r1, [r7, #0]
 800dda2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800dda4:	79fb      	ldrb	r3, [r7, #7]
 800dda6:	2b06      	cmp	r3, #6
 800dda8:	d849      	bhi.n	800de3e <OutputDbgTrace+0xa6>
 800ddaa:	a201      	add	r2, pc, #4	; (adr r2, 800ddb0 <OutputDbgTrace+0x18>)
 800ddac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddb0:	0800ddcd 	.word	0x0800ddcd
 800ddb4:	0800ddef 	.word	0x0800ddef
 800ddb8:	0800ddf5 	.word	0x0800ddf5
 800ddbc:	0800de0f 	.word	0x0800de0f
 800ddc0:	0800de1b 	.word	0x0800de1b
 800ddc4:	0800de21 	.word	0x0800de21
 800ddc8:	0800de33 	.word	0x0800de33
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	7a5b      	ldrb	r3, [r3, #9]
 800ddd4:	2b0f      	cmp	r3, #15
 800ddd6:	d004      	beq.n	800dde2 <OutputDbgTrace+0x4a>
 800ddd8:	2bff      	cmp	r3, #255	; 0xff
 800ddda:	d004      	beq.n	800dde6 <OutputDbgTrace+0x4e>
 800dddc:	2b0e      	cmp	r3, #14
 800ddde:	d004      	beq.n	800ddea <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800dde0:	e004      	b.n	800ddec <OutputDbgTrace+0x54>
          break;
 800dde2:	bf00      	nop
 800dde4:	e02c      	b.n	800de40 <OutputDbgTrace+0xa8>
          break;
 800dde6:	bf00      	nop
 800dde8:	e02a      	b.n	800de40 <OutputDbgTrace+0xa8>
          break;
 800ddea:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800ddec:	e028      	b.n	800de40 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ddf2:	e025      	b.n	800de40 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	7a5b      	ldrb	r3, [r3, #9]
 800ddfc:	2b0e      	cmp	r3, #14
 800ddfe:	d002      	beq.n	800de06 <OutputDbgTrace+0x6e>
 800de00:	2b0f      	cmp	r3, #15
 800de02:	d002      	beq.n	800de0a <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800de04:	e002      	b.n	800de0c <OutputDbgTrace+0x74>
          break;
 800de06:	bf00      	nop
 800de08:	e01a      	b.n	800de40 <OutputDbgTrace+0xa8>
          break;
 800de0a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800de0c:	e018      	b.n	800de40 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	7a5b      	ldrb	r3, [r3, #9]
 800de16:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800de18:	e012      	b.n	800de40 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800de1e:	e00f      	b.n	800de40 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	7a5b      	ldrb	r3, [r3, #9]
 800de28:	2b0e      	cmp	r3, #14
 800de2a:	d000      	beq.n	800de2e <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800de2c:	e000      	b.n	800de30 <OutputDbgTrace+0x98>
          break;
 800de2e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800de30:	e006      	b.n	800de40 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	7a5b      	ldrb	r3, [r3, #9]
 800de3a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800de3c:	e000      	b.n	800de40 <OutputDbgTrace+0xa8>

    default:
      break;
 800de3e:	bf00      	nop
  }

  return;
 800de40:	bf00      	nop
}
 800de42:	3714      	adds	r7, #20
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr

0800de4c <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b08a      	sub	sp, #40	; 0x28
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800de54:	2300      	movs	r3, #0
 800de56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	3301      	adds	r3, #1
 800de5e:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800de60:	6a3b      	ldr	r3, [r7, #32]
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	2bff      	cmp	r3, #255	; 0xff
 800de66:	d000      	beq.n	800de6a <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800de68:	e04a      	b.n	800df00 <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800de6a:	6a3b      	ldr	r3, [r7, #32]
 800de6c:	3302      	adds	r3, #2
 800de6e:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 800de70:	69fb      	ldr	r3, [r7, #28]
 800de72:	881b      	ldrh	r3, [r3, #0]
 800de74:	b29b      	uxth	r3, r3
 800de76:	461a      	mov	r2, r3
 800de78:	f640 4301 	movw	r3, #3073	; 0xc01
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d000      	beq.n	800de82 <PeerToPeer_Event_Handler+0x36>
          break;
 800de80:	e03d      	b.n	800defe <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800de82:	69fb      	ldr	r3, [r7, #28]
 800de84:	3302      	adds	r3, #2
 800de86:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800de88:	69bb      	ldr	r3, [r7, #24]
 800de8a:	885b      	ldrh	r3, [r3, #2]
 800de8c:	b29b      	uxth	r3, r3
 800de8e:	461a      	mov	r2, r3
 800de90:	4b1e      	ldr	r3, [pc, #120]	; (800df0c <PeerToPeer_Event_Handler+0xc0>)
 800de92:	889b      	ldrh	r3, [r3, #4]
 800de94:	3302      	adds	r3, #2
 800de96:	429a      	cmp	r2, r3
 800de98:	d118      	bne.n	800decc <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 800de9a:	2301      	movs	r3, #1
 800de9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800dea0:	69bb      	ldr	r3, [r7, #24]
 800dea2:	7a1b      	ldrb	r3, [r3, #8]
 800dea4:	f003 0301 	and.w	r3, r3, #1
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d007      	beq.n	800debc <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800deac:	2300      	movs	r3, #0
 800deae:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800deb0:	f107 0308 	add.w	r3, r7, #8
 800deb4:	4618      	mov	r0, r3
 800deb6:	f7f3 fc8b 	bl	80017d0 <P2PS_STM_App_Notification>
        break;
 800deba:	e01f      	b.n	800defc <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800debc:	2301      	movs	r3, #1
 800debe:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800dec0:	f107 0308 	add.w	r3, r7, #8
 800dec4:	4618      	mov	r0, r3
 800dec6:	f7f3 fc83 	bl	80017d0 <P2PS_STM_App_Notification>
        break;
 800deca:	e017      	b.n	800defc <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800decc:	69bb      	ldr	r3, [r7, #24]
 800dece:	885b      	ldrh	r3, [r3, #2]
 800ded0:	b29b      	uxth	r3, r3
 800ded2:	461a      	mov	r2, r3
 800ded4:	4b0d      	ldr	r3, [pc, #52]	; (800df0c <PeerToPeer_Event_Handler+0xc0>)
 800ded6:	885b      	ldrh	r3, [r3, #2]
 800ded8:	3301      	adds	r3, #1
 800deda:	429a      	cmp	r2, r3
 800dedc:	d10e      	bne.n	800defc <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800dede:	2303      	movs	r3, #3
 800dee0:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800dee2:	69bb      	ldr	r3, [r7, #24]
 800dee4:	88db      	ldrh	r3, [r3, #6]
 800dee6:	b29b      	uxth	r3, r3
 800dee8:	b2db      	uxtb	r3, r3
 800deea:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800deec:	69bb      	ldr	r3, [r7, #24]
 800deee:	3308      	adds	r3, #8
 800def0:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);
 800def2:	f107 0308 	add.w	r3, r7, #8
 800def6:	4618      	mov	r0, r3
 800def8:	f7f3 fc6a 	bl	80017d0 <P2PS_STM_App_Notification>
        break;
 800defc:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800defe:	bf00      	nop
  }

  return(return_value);
 800df00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800df04:	4618      	mov	r0, r3
 800df06:	3728      	adds	r7, #40	; 0x28
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}
 800df0c:	2000039c 	.word	0x2000039c

0800df10 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b08a      	sub	sp, #40	; 0x28
 800df14:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800df16:	484a      	ldr	r0, [pc, #296]	; (800e040 <P2PS_STM_Init+0x130>)
 800df18:	f7fe fa30 	bl	800c37c <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800df1c:	238f      	movs	r3, #143	; 0x8f
 800df1e:	703b      	strb	r3, [r7, #0]
 800df20:	23e5      	movs	r3, #229	; 0xe5
 800df22:	707b      	strb	r3, [r7, #1]
 800df24:	23b3      	movs	r3, #179	; 0xb3
 800df26:	70bb      	strb	r3, [r7, #2]
 800df28:	23d5      	movs	r3, #213	; 0xd5
 800df2a:	70fb      	strb	r3, [r7, #3]
 800df2c:	232e      	movs	r3, #46	; 0x2e
 800df2e:	713b      	strb	r3, [r7, #4]
 800df30:	237f      	movs	r3, #127	; 0x7f
 800df32:	717b      	strb	r3, [r7, #5]
 800df34:	234a      	movs	r3, #74	; 0x4a
 800df36:	71bb      	strb	r3, [r7, #6]
 800df38:	2398      	movs	r3, #152	; 0x98
 800df3a:	71fb      	strb	r3, [r7, #7]
 800df3c:	232a      	movs	r3, #42	; 0x2a
 800df3e:	723b      	strb	r3, [r7, #8]
 800df40:	2348      	movs	r3, #72	; 0x48
 800df42:	727b      	strb	r3, [r7, #9]
 800df44:	237a      	movs	r3, #122	; 0x7a
 800df46:	72bb      	strb	r3, [r7, #10]
 800df48:	23cc      	movs	r3, #204	; 0xcc
 800df4a:	72fb      	strb	r3, [r7, #11]
 800df4c:	2340      	movs	r3, #64	; 0x40
 800df4e:	733b      	strb	r3, [r7, #12]
 800df50:	23fe      	movs	r3, #254	; 0xfe
 800df52:	737b      	strb	r3, [r7, #13]
 800df54:	2300      	movs	r3, #0
 800df56:	73bb      	strb	r3, [r7, #14]
 800df58:	2300      	movs	r3, #0
 800df5a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800df5c:	4639      	mov	r1, r7
 800df5e:	4b39      	ldr	r3, [pc, #228]	; (800e044 <P2PS_STM_Init+0x134>)
 800df60:	9300      	str	r3, [sp, #0]
 800df62:	2308      	movs	r3, #8
 800df64:	2201      	movs	r2, #1
 800df66:	2002      	movs	r0, #2
 800df68:	f7fe fe39 	bl	800cbde <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800df6c:	2319      	movs	r3, #25
 800df6e:	703b      	strb	r3, [r7, #0]
 800df70:	23ed      	movs	r3, #237	; 0xed
 800df72:	707b      	strb	r3, [r7, #1]
 800df74:	2382      	movs	r3, #130	; 0x82
 800df76:	70bb      	strb	r3, [r7, #2]
 800df78:	23ae      	movs	r3, #174	; 0xae
 800df7a:	70fb      	strb	r3, [r7, #3]
 800df7c:	23ed      	movs	r3, #237	; 0xed
 800df7e:	713b      	strb	r3, [r7, #4]
 800df80:	2321      	movs	r3, #33	; 0x21
 800df82:	717b      	strb	r3, [r7, #5]
 800df84:	234c      	movs	r3, #76	; 0x4c
 800df86:	71bb      	strb	r3, [r7, #6]
 800df88:	239d      	movs	r3, #157	; 0x9d
 800df8a:	71fb      	strb	r3, [r7, #7]
 800df8c:	2341      	movs	r3, #65	; 0x41
 800df8e:	723b      	strb	r3, [r7, #8]
 800df90:	2345      	movs	r3, #69	; 0x45
 800df92:	727b      	strb	r3, [r7, #9]
 800df94:	2322      	movs	r3, #34	; 0x22
 800df96:	72bb      	strb	r3, [r7, #10]
 800df98:	238e      	movs	r3, #142	; 0x8e
 800df9a:	72fb      	strb	r3, [r7, #11]
 800df9c:	2341      	movs	r3, #65	; 0x41
 800df9e:	733b      	strb	r3, [r7, #12]
 800dfa0:	23fe      	movs	r3, #254	; 0xfe
 800dfa2:	737b      	strb	r3, [r7, #13]
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	73bb      	strb	r3, [r7, #14]
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800dfac:	4b25      	ldr	r3, [pc, #148]	; (800e044 <P2PS_STM_Init+0x134>)
 800dfae:	8818      	ldrh	r0, [r3, #0]
 800dfb0:	463a      	mov	r2, r7
 800dfb2:	4b25      	ldr	r3, [pc, #148]	; (800e048 <P2PS_STM_Init+0x138>)
 800dfb4:	9305      	str	r3, [sp, #20]
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	9304      	str	r3, [sp, #16]
 800dfba:	230a      	movs	r3, #10
 800dfbc:	9303      	str	r3, [sp, #12]
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	9302      	str	r3, [sp, #8]
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	9301      	str	r3, [sp, #4]
 800dfc6:	2306      	movs	r3, #6
 800dfc8:	9300      	str	r3, [sp, #0]
 800dfca:	2314      	movs	r3, #20
 800dfcc:	2102      	movs	r1, #2
 800dfce:	f7fe feb5 	bl	800cd3c <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800dfd2:	2319      	movs	r3, #25
 800dfd4:	703b      	strb	r3, [r7, #0]
 800dfd6:	23ed      	movs	r3, #237	; 0xed
 800dfd8:	707b      	strb	r3, [r7, #1]
 800dfda:	2382      	movs	r3, #130	; 0x82
 800dfdc:	70bb      	strb	r3, [r7, #2]
 800dfde:	23ae      	movs	r3, #174	; 0xae
 800dfe0:	70fb      	strb	r3, [r7, #3]
 800dfe2:	23ed      	movs	r3, #237	; 0xed
 800dfe4:	713b      	strb	r3, [r7, #4]
 800dfe6:	2321      	movs	r3, #33	; 0x21
 800dfe8:	717b      	strb	r3, [r7, #5]
 800dfea:	234c      	movs	r3, #76	; 0x4c
 800dfec:	71bb      	strb	r3, [r7, #6]
 800dfee:	239d      	movs	r3, #157	; 0x9d
 800dff0:	71fb      	strb	r3, [r7, #7]
 800dff2:	2341      	movs	r3, #65	; 0x41
 800dff4:	723b      	strb	r3, [r7, #8]
 800dff6:	2345      	movs	r3, #69	; 0x45
 800dff8:	727b      	strb	r3, [r7, #9]
 800dffa:	2322      	movs	r3, #34	; 0x22
 800dffc:	72bb      	strb	r3, [r7, #10]
 800dffe:	238e      	movs	r3, #142	; 0x8e
 800e000:	72fb      	strb	r3, [r7, #11]
 800e002:	2342      	movs	r3, #66	; 0x42
 800e004:	733b      	strb	r3, [r7, #12]
 800e006:	23fe      	movs	r3, #254	; 0xfe
 800e008:	737b      	strb	r3, [r7, #13]
 800e00a:	2300      	movs	r3, #0
 800e00c:	73bb      	strb	r3, [r7, #14]
 800e00e:	2300      	movs	r3, #0
 800e010:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800e012:	4b0c      	ldr	r3, [pc, #48]	; (800e044 <P2PS_STM_Init+0x134>)
 800e014:	8818      	ldrh	r0, [r3, #0]
 800e016:	463a      	mov	r2, r7
 800e018:	4b0c      	ldr	r3, [pc, #48]	; (800e04c <P2PS_STM_Init+0x13c>)
 800e01a:	9305      	str	r3, [sp, #20]
 800e01c:	2301      	movs	r3, #1
 800e01e:	9304      	str	r3, [sp, #16]
 800e020:	230a      	movs	r3, #10
 800e022:	9303      	str	r3, [sp, #12]
 800e024:	2301      	movs	r3, #1
 800e026:	9302      	str	r3, [sp, #8]
 800e028:	2300      	movs	r3, #0
 800e02a:	9301      	str	r3, [sp, #4]
 800e02c:	2310      	movs	r3, #16
 800e02e:	9300      	str	r3, [sp, #0]
 800e030:	2314      	movs	r3, #20
 800e032:	2102      	movs	r1, #2
 800e034:	f7fe fe82 	bl	800cd3c <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif


  return;
 800e038:	bf00      	nop
}
 800e03a:	3710      	adds	r7, #16
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}
 800e040:	0800de4d 	.word	0x0800de4d
 800e044:	2000039c 	.word	0x2000039c
 800e048:	2000039e 	.word	0x2000039e
 800e04c:	200003a0 	.word	0x200003a0

0800e050 <P2PS_STM_App_Update_Int8>:

  return result;
}

tBleStatus P2PS_STM_App_Update_Int8(uint16_t UUID, uint8_t *pPayload, uint8_t num_bytes)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b086      	sub	sp, #24
 800e054:	af02      	add	r7, sp, #8
 800e056:	4603      	mov	r3, r0
 800e058:	6039      	str	r1, [r7, #0]
 800e05a:	80fb      	strh	r3, [r7, #6]
 800e05c:	4613      	mov	r3, r2
 800e05e:	717b      	strb	r3, [r7, #5]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800e060:	2342      	movs	r3, #66	; 0x42
 800e062:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800e064:	88fb      	ldrh	r3, [r7, #6]
 800e066:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800e06a:	4293      	cmp	r3, r2
 800e06c:	d000      	beq.n	800e070 <P2PS_STM_App_Update_Int8+0x20>
                             (uint8_t *)  pPayload);

      break;

    default:
      break;
 800e06e:	e00d      	b.n	800e08c <P2PS_STM_App_Update_Int8+0x3c>
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800e070:	4b09      	ldr	r3, [pc, #36]	; (800e098 <P2PS_STM_App_Update_Int8+0x48>)
 800e072:	8818      	ldrh	r0, [r3, #0]
 800e074:	4b08      	ldr	r3, [pc, #32]	; (800e098 <P2PS_STM_App_Update_Int8+0x48>)
 800e076:	8899      	ldrh	r1, [r3, #4]
 800e078:	797a      	ldrb	r2, [r7, #5]
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	9300      	str	r3, [sp, #0]
 800e07e:	4613      	mov	r3, r2
 800e080:	2200      	movs	r2, #0
 800e082:	f7fe ff45 	bl	800cf10 <aci_gatt_update_char_value>
 800e086:	4603      	mov	r3, r0
 800e088:	73fb      	strb	r3, [r7, #15]
      break;
 800e08a:	bf00      	nop
  }

  return result;
 800e08c:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 800e08e:	4618      	mov	r0, r3
 800e090:	3710      	adds	r7, #16
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}
 800e096:	bf00      	nop
 800e098:	2000039c 	.word	0x2000039c

0800e09c <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b086      	sub	sp, #24
 800e0a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0a2:	f3ef 8310 	mrs	r3, PRIMASK
 800e0a6:	60fb      	str	r3, [r7, #12]
  return(result);
 800e0a8:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800e0aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e0ac:	b672      	cpsid	i

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800e0ae:	1cbb      	adds	r3, r7, #2
 800e0b0:	4619      	mov	r1, r3
 800e0b2:	4812      	ldr	r0, [pc, #72]	; (800e0fc <DbgTrace_TxCpltCallback+0x60>)
 800e0b4:	f000 fbd7 	bl	800e866 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800e0b8:	1cbb      	adds	r3, r7, #2
 800e0ba:	4619      	mov	r1, r3
 800e0bc:	480f      	ldr	r0, [pc, #60]	; (800e0fc <DbgTrace_TxCpltCallback+0x60>)
 800e0be:	f000 fcc6 	bl	800ea4e <CircularQueue_Sense>
 800e0c2:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d00b      	beq.n	800e0e2 <DbgTrace_TxCpltCallback+0x46>
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800e0d4:	887b      	ldrh	r3, [r7, #2]
 800e0d6:	4a0a      	ldr	r2, [pc, #40]	; (800e100 <DbgTrace_TxCpltCallback+0x64>)
 800e0d8:	4619      	mov	r1, r3
 800e0da:	6938      	ldr	r0, [r7, #16]
 800e0dc:	f7f4 f81f 	bl	800211e <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800e0e0:	e007      	b.n	800e0f2 <DbgTrace_TxCpltCallback+0x56>
    DbgTracePeripheralReady = SET;
 800e0e2:	4b08      	ldr	r3, [pc, #32]	; (800e104 <DbgTrace_TxCpltCallback+0x68>)
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	701a      	strb	r2, [r3, #0]
 800e0e8:	697b      	ldr	r3, [r7, #20]
 800e0ea:	607b      	str	r3, [r7, #4]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f383 8810 	msr	PRIMASK, r3
}
 800e0f2:	bf00      	nop
 800e0f4:	3718      	adds	r7, #24
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	2000045c 	.word	0x2000045c
 800e100:	0800e09d 	.word	0x0800e09d
 800e104:	2000001d 	.word	0x2000001d

0800e108 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b082      	sub	sp, #8
 800e10c:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800e10e:	f7f4 f800 	bl	8002112 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800e112:	2302      	movs	r3, #2
 800e114:	9300      	str	r3, [sp, #0]
 800e116:	2300      	movs	r3, #0
 800e118:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e11c:	4903      	ldr	r1, [pc, #12]	; (800e12c <DbgTraceInit+0x24>)
 800e11e:	4804      	ldr	r0, [pc, #16]	; (800e130 <DbgTraceInit+0x28>)
 800e120:	f000 f948 	bl	800e3b4 <CircularQueue_Init>
#endif 
#endif
  return;
 800e124:	bf00      	nop
}
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}
 800e12a:	bf00      	nop
 800e12c:	2000047c 	.word	0x2000047c
 800e130:	2000045c 	.word	0x2000045c

0800e134 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b084      	sub	sp, #16
 800e138:	af00      	add	r7, sp, #0
 800e13a:	60f8      	str	r0, [r7, #12]
 800e13c:	60b9      	str	r1, [r7, #8]
 800e13e:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800e140:	687a      	ldr	r2, [r7, #4]
 800e142:	68b9      	ldr	r1, [r7, #8]
 800e144:	68f8      	ldr	r0, [r7, #12]
 800e146:	f000 f805 	bl	800e154 <DbgTraceWrite>
 800e14a:	4603      	mov	r3, r0
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3710      	adds	r7, #16
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b08a      	sub	sp, #40	; 0x28
 800e158:	af00      	add	r7, sp, #0
 800e15a:	60f8      	str	r0, [r7, #12]
 800e15c:	60b9      	str	r1, [r7, #8]
 800e15e:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800e160:	2300      	movs	r3, #0
 800e162:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e164:	f3ef 8310 	mrs	r3, PRIMASK
 800e168:	61bb      	str	r3, [r7, #24]
  return(result);
 800e16a:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800e16c:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e174:	d102      	bne.n	800e17c <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800e176:	2300      	movs	r3, #0
 800e178:	627b      	str	r3, [r7, #36]	; 0x24
 800e17a:	e034      	b.n	800e1e6 <DbgTraceWrite+0x92>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2b01      	cmp	r3, #1
 800e180:	d006      	beq.n	800e190 <DbgTraceWrite+0x3c>
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	2b02      	cmp	r3, #2
 800e186:	d003      	beq.n	800e190 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800e188:	f04f 33ff 	mov.w	r3, #4294967295
 800e18c:	627b      	str	r3, [r7, #36]	; 0x24
 800e18e:	e02a      	b.n	800e1e6 <DbgTraceWrite+0x92>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d027      	beq.n	800e1e6 <DbgTraceWrite+0x92>
  {
    chars_written = bufSize;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800e19a:	b672      	cpsid	i
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	b29a      	uxth	r2, r3
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	68b9      	ldr	r1, [r7, #8]
 800e1a4:	4812      	ldr	r0, [pc, #72]	; (800e1f0 <DbgTraceWrite+0x9c>)
 800e1a6:	f000 f937 	bl	800e418 <CircularQueue_Add>
 800e1aa:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800e1ac:	69fb      	ldr	r3, [r7, #28]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d014      	beq.n	800e1dc <DbgTraceWrite+0x88>
 800e1b2:	4b10      	ldr	r3, [pc, #64]	; (800e1f4 <DbgTraceWrite+0xa0>)
 800e1b4:	781b      	ldrb	r3, [r3, #0]
 800e1b6:	b2db      	uxtb	r3, r3
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d00f      	beq.n	800e1dc <DbgTraceWrite+0x88>
    {
      DbgTracePeripheralReady = RESET;
 800e1bc:	4b0d      	ldr	r3, [pc, #52]	; (800e1f4 <DbgTraceWrite+0xa0>)
 800e1be:	2200      	movs	r2, #0
 800e1c0:	701a      	strb	r2, [r3, #0]
 800e1c2:	6a3b      	ldr	r3, [r7, #32]
 800e1c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	f383 8810 	msr	PRIMASK, r3
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	b29b      	uxth	r3, r3
 800e1d0:	4a09      	ldr	r2, [pc, #36]	; (800e1f8 <DbgTraceWrite+0xa4>)
 800e1d2:	4619      	mov	r1, r3
 800e1d4:	69f8      	ldr	r0, [r7, #28]
 800e1d6:	f7f3 ffa2 	bl	800211e <DbgOutputTraces>
 800e1da:	e004      	b.n	800e1e6 <DbgTraceWrite+0x92>
 800e1dc:	6a3b      	ldr	r3, [r7, #32]
 800e1de:	613b      	str	r3, [r7, #16]
 800e1e0:	693b      	ldr	r3, [r7, #16]
 800e1e2:	f383 8810 	msr	PRIMASK, r3
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800e1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3728      	adds	r7, #40	; 0x28
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}
 800e1f0:	2000045c 	.word	0x2000045c
 800e1f4:	2000001d 	.word	0x2000001d
 800e1f8:	0800e09d 	.word	0x0800e09d

0800e1fc <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800e1fc:	b480      	push	{r7}
 800e1fe:	b085      	sub	sp, #20
 800e200:	af00      	add	r7, sp, #0
 800e202:	4603      	mov	r3, r0
 800e204:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800e206:	4b0f      	ldr	r3, [pc, #60]	; (800e244 <OTP_Read+0x48>)
 800e208:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800e20a:	e002      	b.n	800e212 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	3b08      	subs	r3, #8
 800e210:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	3307      	adds	r3, #7
 800e216:	781b      	ldrb	r3, [r3, #0]
 800e218:	79fa      	ldrb	r2, [r7, #7]
 800e21a:	429a      	cmp	r2, r3
 800e21c:	d003      	beq.n	800e226 <OTP_Read+0x2a>
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	4a09      	ldr	r2, [pc, #36]	; (800e248 <OTP_Read+0x4c>)
 800e222:	4293      	cmp	r3, r2
 800e224:	d1f2      	bne.n	800e20c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	3307      	adds	r3, #7
 800e22a:	781b      	ldrb	r3, [r3, #0]
 800e22c:	79fa      	ldrb	r2, [r7, #7]
 800e22e:	429a      	cmp	r2, r3
 800e230:	d001      	beq.n	800e236 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800e232:	2300      	movs	r3, #0
 800e234:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800e236:	68fb      	ldr	r3, [r7, #12]
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3714      	adds	r7, #20
 800e23c:	46bd      	mov	sp, r7
 800e23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e242:	4770      	bx	lr
 800e244:	1fff73f8 	.word	0x1fff73f8
 800e248:	1fff7000 	.word	0x1fff7000

0800e24c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800e24c:	b480      	push	{r7}
 800e24e:	b083      	sub	sp, #12
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	687a      	ldr	r2, [r7, #4]
 800e258:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	687a      	ldr	r2, [r7, #4]
 800e25e:	605a      	str	r2, [r3, #4]
}
 800e260:	bf00      	nop
 800e262:	370c      	adds	r7, #12
 800e264:	46bd      	mov	sp, r7
 800e266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26a:	4770      	bx	lr

0800e26c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800e26c:	b480      	push	{r7}
 800e26e:	b087      	sub	sp, #28
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e274:	f3ef 8310 	mrs	r3, PRIMASK
 800e278:	60fb      	str	r3, [r7, #12]
  return(result);
 800e27a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e27c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800e27e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	687a      	ldr	r2, [r7, #4]
 800e286:	429a      	cmp	r2, r3
 800e288:	d102      	bne.n	800e290 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800e28a:	2301      	movs	r3, #1
 800e28c:	75fb      	strb	r3, [r7, #23]
 800e28e:	e001      	b.n	800e294 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800e290:	2300      	movs	r3, #0
 800e292:	75fb      	strb	r3, [r7, #23]
 800e294:	693b      	ldr	r3, [r7, #16]
 800e296:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800e29e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	371c      	adds	r7, #28
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2aa:	4770      	bx	lr

0800e2ac <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b087      	sub	sp, #28
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2b6:	f3ef 8310 	mrs	r3, PRIMASK
 800e2ba:	60fb      	str	r3, [r7, #12]
  return(result);
 800e2bc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e2be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e2c0:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681a      	ldr	r2, [r3, #0]
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	687a      	ldr	r2, [r7, #4]
 800e2ce:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	683a      	ldr	r2, [r7, #0]
 800e2d4:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	683a      	ldr	r2, [r7, #0]
 800e2dc:	605a      	str	r2, [r3, #4]
 800e2de:	697b      	ldr	r3, [r7, #20]
 800e2e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e2e8:	bf00      	nop
 800e2ea:	371c      	adds	r7, #28
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f2:	4770      	bx	lr

0800e2f4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b087      	sub	sp, #28
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2fe:	f3ef 8310 	mrs	r3, PRIMASK
 800e302:	60fb      	str	r3, [r7, #12]
  return(result);
 800e304:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e306:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e308:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	687a      	ldr	r2, [r7, #4]
 800e30e:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	685a      	ldr	r2, [r3, #4]
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	683a      	ldr	r2, [r7, #0]
 800e31c:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	683a      	ldr	r2, [r7, #0]
 800e324:	601a      	str	r2, [r3, #0]
 800e326:	697b      	ldr	r3, [r7, #20]
 800e328:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e32a:	693b      	ldr	r3, [r7, #16]
 800e32c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e330:	bf00      	nop
 800e332:	371c      	adds	r7, #28
 800e334:	46bd      	mov	sp, r7
 800e336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33a:	4770      	bx	lr

0800e33c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800e33c:	b480      	push	{r7}
 800e33e:	b087      	sub	sp, #28
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e344:	f3ef 8310 	mrs	r3, PRIMASK
 800e348:	60fb      	str	r3, [r7, #12]
  return(result);
 800e34a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e34c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e34e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	685b      	ldr	r3, [r3, #4]
 800e354:	687a      	ldr	r2, [r7, #4]
 800e356:	6812      	ldr	r2, [r2, #0]
 800e358:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	687a      	ldr	r2, [r7, #4]
 800e360:	6852      	ldr	r2, [r2, #4]
 800e362:	605a      	str	r2, [r3, #4]
 800e364:	697b      	ldr	r3, [r7, #20]
 800e366:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e36e:	bf00      	nop
 800e370:	371c      	adds	r7, #28
 800e372:	46bd      	mov	sp, r7
 800e374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e378:	4770      	bx	lr

0800e37a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800e37a:	b580      	push	{r7, lr}
 800e37c:	b086      	sub	sp, #24
 800e37e:	af00      	add	r7, sp, #0
 800e380:	6078      	str	r0, [r7, #4]
 800e382:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e384:	f3ef 8310 	mrs	r3, PRIMASK
 800e388:	60fb      	str	r3, [r7, #12]
  return(result);
 800e38a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e38c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e38e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681a      	ldr	r2, [r3, #0]
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	4618      	mov	r0, r3
 800e39e:	f7ff ffcd 	bl	800e33c <LST_remove_node>
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3a6:	693b      	ldr	r3, [r7, #16]
 800e3a8:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e3ac:	bf00      	nop
 800e3ae:	3718      	adds	r7, #24
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800e3b4:	b480      	push	{r7}
 800e3b6:	b085      	sub	sp, #20
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	60f8      	str	r0, [r7, #12]
 800e3bc:	60b9      	str	r1, [r7, #8]
 800e3be:	607a      	str	r2, [r7, #4]
 800e3c0:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	68ba      	ldr	r2, [r7, #8]
 800e3c6:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	2200      	movs	r2, #0
 800e3de:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	687a      	ldr	r2, [r7, #4]
 800e3e4:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	887a      	ldrh	r2, [r7, #2]
 800e3ea:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	7e3a      	ldrb	r2, [r7, #24]
 800e3f0:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800e3f2:	7e3b      	ldrb	r3, [r7, #24]
 800e3f4:	f003 0302 	and.w	r3, r3, #2
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d006      	beq.n	800e40a <CircularQueue_Init+0x56>
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	891b      	ldrh	r3, [r3, #8]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d002      	beq.n	800e40a <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800e404:	f04f 33ff 	mov.w	r3, #4294967295
 800e408:	e000      	b.n	800e40c <CircularQueue_Init+0x58>
  }
  return 0;
 800e40a:	2300      	movs	r3, #0
}
 800e40c:	4618      	mov	r0, r3
 800e40e:	3714      	adds	r7, #20
 800e410:	46bd      	mov	sp, r7
 800e412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e416:	4770      	bx	lr

0800e418 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b08e      	sub	sp, #56	; 0x38
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	60f8      	str	r0, [r7, #12]
 800e420:	60b9      	str	r1, [r7, #8]
 800e422:	603b      	str	r3, [r7, #0]
 800e424:	4613      	mov	r3, r2
 800e426:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800e428:	2300      	movs	r3, #0
 800e42a:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800e42c:	2300      	movs	r3, #0
 800e42e:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800e430:	2300      	movs	r3, #0
 800e432:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800e434:	2300      	movs	r3, #0
 800e436:	62bb      	str	r3, [r7, #40]	; 0x28
 800e438:	2300      	movs	r3, #0
 800e43a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800e43c:	2300      	movs	r3, #0
 800e43e:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800e440:	2300      	movs	r3, #0
 800e442:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	891b      	ldrh	r3, [r3, #8]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d101      	bne.n	800e450 <CircularQueue_Add+0x38>
 800e44c:	2302      	movs	r3, #2
 800e44e:	e000      	b.n	800e452 <CircularQueue_Add+0x3a>
 800e450:	2300      	movs	r3, #0
 800e452:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	695b      	ldr	r3, [r3, #20]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d02a      	beq.n	800e4b2 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	891b      	ldrh	r3, [r3, #8]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d123      	bne.n	800e4ac <CircularQueue_Add+0x94>
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	681a      	ldr	r2, [r3, #0]
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	691b      	ldr	r3, [r3, #16]
 800e46c:	4413      	add	r3, r2
 800e46e:	781b      	ldrb	r3, [r3, #0]
 800e470:	b29a      	uxth	r2, r3
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	6819      	ldr	r1, [r3, #0]
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	691b      	ldr	r3, [r3, #16]
 800e47a:	1c58      	adds	r0, r3, #1
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	685b      	ldr	r3, [r3, #4]
 800e480:	4298      	cmp	r0, r3
 800e482:	d306      	bcc.n	800e492 <CircularQueue_Add+0x7a>
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	6918      	ldr	r0, [r3, #16]
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	685b      	ldr	r3, [r3, #4]
 800e48c:	1ac3      	subs	r3, r0, r3
 800e48e:	3301      	adds	r3, #1
 800e490:	e002      	b.n	800e498 <CircularQueue_Add+0x80>
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	691b      	ldr	r3, [r3, #16]
 800e496:	3301      	adds	r3, #1
 800e498:	440b      	add	r3, r1
 800e49a:	781b      	ldrb	r3, [r3, #0]
 800e49c:	b29b      	uxth	r3, r3
 800e49e:	021b      	lsls	r3, r3, #8
 800e4a0:	b29b      	uxth	r3, r3
 800e4a2:	4413      	add	r3, r2
 800e4a4:	b29b      	uxth	r3, r3
 800e4a6:	3302      	adds	r3, #2
 800e4a8:	b29b      	uxth	r3, r3
 800e4aa:	e001      	b.n	800e4b0 <CircularQueue_Add+0x98>
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	891b      	ldrh	r3, [r3, #8]
 800e4b0:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	891b      	ldrh	r3, [r3, #8]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d002      	beq.n	800e4c0 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	891b      	ldrh	r3, [r3, #8]
 800e4be:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	691a      	ldr	r2, [r3, #16]
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	68db      	ldr	r3, [r3, #12]
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	d307      	bcc.n	800e4dc <CircularQueue_Add+0xc4>
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	685a      	ldr	r2, [r3, #4]
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	6919      	ldr	r1, [r3, #16]
 800e4d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e4d6:	440b      	add	r3, r1
 800e4d8:	1ad3      	subs	r3, r2, r3
 800e4da:	e000      	b.n	800e4de <CircularQueue_Add+0xc6>
 800e4dc:	2300      	movs	r3, #0
 800e4de:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800e4e0:	88fa      	ldrh	r2, [r7, #6]
 800e4e2:	7ffb      	ldrb	r3, [r7, #31]
 800e4e4:	4413      	add	r3, r2
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	fb03 f302 	mul.w	r3, r3, r2
 800e4ee:	69ba      	ldr	r2, [r7, #24]
 800e4f0:	429a      	cmp	r2, r3
 800e4f2:	d80b      	bhi.n	800e50c <CircularQueue_Add+0xf4>
 800e4f4:	88fa      	ldrh	r2, [r7, #6]
 800e4f6:	7ffb      	ldrb	r3, [r7, #31]
 800e4f8:	4413      	add	r3, r2
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	69bb      	ldr	r3, [r7, #24]
 800e4fe:	fbb3 f1f2 	udiv	r1, r3, r2
 800e502:	fb02 f201 	mul.w	r2, r2, r1
 800e506:	1a9b      	subs	r3, r3, r2
 800e508:	b2db      	uxtb	r3, r3
 800e50a:	e000      	b.n	800e50e <CircularQueue_Add+0xf6>
 800e50c:	2300      	movs	r3, #0
 800e50e:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800e510:	7dfa      	ldrb	r2, [r7, #23]
 800e512:	7ffb      	ldrb	r3, [r7, #31]
 800e514:	429a      	cmp	r2, r3
 800e516:	bf8c      	ite	hi
 800e518:	2301      	movhi	r3, #1
 800e51a:	2300      	movls	r3, #0
 800e51c:	b2db      	uxtb	r3, r3
 800e51e:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800e520:	7fbb      	ldrb	r3, [r7, #30]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d008      	beq.n	800e538 <CircularQueue_Add+0x120>
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	7f1b      	ldrb	r3, [r3, #28]
 800e52a:	f003 0301 	and.w	r3, r3, #1
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d002      	beq.n	800e538 <CircularQueue_Add+0x120>
 800e532:	7dfb      	ldrb	r3, [r7, #23]
 800e534:	b29b      	uxth	r3, r3
 800e536:	e000      	b.n	800e53a <CircularQueue_Add+0x122>
 800e538:	8bbb      	ldrh	r3, [r7, #28]
 800e53a:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800e53c:	7fbb      	ldrb	r3, [r7, #30]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d008      	beq.n	800e554 <CircularQueue_Add+0x13c>
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	7f1b      	ldrb	r3, [r3, #28]
 800e546:	f003 0302 	and.w	r3, r3, #2
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d002      	beq.n	800e554 <CircularQueue_Add+0x13c>
 800e54e:	7ffb      	ldrb	r3, [r7, #31]
 800e550:	b29b      	uxth	r3, r3
 800e552:	e000      	b.n	800e556 <CircularQueue_Add+0x13e>
 800e554:	8bbb      	ldrh	r3, [r7, #28]
 800e556:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800e558:	88fb      	ldrh	r3, [r7, #6]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	f000 817e 	beq.w	800e85c <CircularQueue_Add+0x444>
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	695a      	ldr	r2, [r3, #20]
 800e564:	88f9      	ldrh	r1, [r7, #6]
 800e566:	7ffb      	ldrb	r3, [r7, #31]
 800e568:	440b      	add	r3, r1
 800e56a:	4619      	mov	r1, r3
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	fb03 f301 	mul.w	r3, r3, r1
 800e572:	441a      	add	r2, r3
 800e574:	8bbb      	ldrh	r3, [r7, #28]
 800e576:	441a      	add	r2, r3
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	685b      	ldr	r3, [r3, #4]
 800e57c:	429a      	cmp	r2, r3
 800e57e:	f200 816d 	bhi.w	800e85c <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800e582:	2300      	movs	r3, #0
 800e584:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e586:	e14a      	b.n	800e81e <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	691a      	ldr	r2, [r3, #16]
 800e58c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e58e:	441a      	add	r2, r3
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	685b      	ldr	r3, [r3, #4]
 800e594:	429a      	cmp	r2, r3
 800e596:	d307      	bcc.n	800e5a8 <CircularQueue_Add+0x190>
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	691a      	ldr	r2, [r3, #16]
 800e59c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e59e:	441a      	add	r2, r3
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	685b      	ldr	r3, [r3, #4]
 800e5a4:	1ad3      	subs	r3, r2, r3
 800e5a6:	e003      	b.n	800e5b0 <CircularQueue_Add+0x198>
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	691a      	ldr	r2, [r3, #16]
 800e5ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e5ae:	4413      	add	r3, r2
 800e5b0:	68fa      	ldr	r2, [r7, #12]
 800e5b2:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	691b      	ldr	r3, [r3, #16]
 800e5b8:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	891b      	ldrh	r3, [r3, #8]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d130      	bne.n	800e624 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	681a      	ldr	r2, [r3, #0]
 800e5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c8:	1c59      	adds	r1, r3, #1
 800e5ca:	6339      	str	r1, [r7, #48]	; 0x30
 800e5cc:	4413      	add	r3, r2
 800e5ce:	88fa      	ldrh	r2, [r7, #6]
 800e5d0:	b2d2      	uxtb	r2, r2
 800e5d2:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	685b      	ldr	r3, [r3, #4]
 800e5d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d304      	bcc.n	800e5e8 <CircularQueue_Add+0x1d0>
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5e4:	1ad3      	subs	r3, r2, r3
 800e5e6:	e000      	b.n	800e5ea <CircularQueue_Add+0x1d2>
 800e5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ea:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800e5ec:	88fb      	ldrh	r3, [r7, #6]
 800e5ee:	0a1b      	lsrs	r3, r3, #8
 800e5f0:	b298      	uxth	r0, r3
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	681a      	ldr	r2, [r3, #0]
 800e5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f8:	1c59      	adds	r1, r3, #1
 800e5fa:	6339      	str	r1, [r7, #48]	; 0x30
 800e5fc:	4413      	add	r3, r2
 800e5fe:	b2c2      	uxtb	r2, r0
 800e600:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	685b      	ldr	r3, [r3, #4]
 800e606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e608:	429a      	cmp	r2, r3
 800e60a:	d304      	bcc.n	800e616 <CircularQueue_Add+0x1fe>
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	685b      	ldr	r3, [r3, #4]
 800e610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e612:	1ad3      	subs	r3, r2, r3
 800e614:	e000      	b.n	800e618 <CircularQueue_Add+0x200>
 800e616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e618:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	695b      	ldr	r3, [r3, #20]
 800e61e:	1c9a      	adds	r2, r3, #2
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800e624:	88fa      	ldrh	r2, [r7, #6]
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	6859      	ldr	r1, [r3, #4]
 800e62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e62c:	1acb      	subs	r3, r1, r3
 800e62e:	4293      	cmp	r3, r2
 800e630:	bf28      	it	cs
 800e632:	4613      	movcs	r3, r2
 800e634:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800e636:	88fb      	ldrh	r3, [r7, #6]
 800e638:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e63a:	429a      	cmp	r2, r3
 800e63c:	d007      	beq.n	800e64e <CircularQueue_Add+0x236>
 800e63e:	88fb      	ldrh	r3, [r7, #6]
 800e640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e642:	429a      	cmp	r2, r3
 800e644:	d225      	bcs.n	800e692 <CircularQueue_Add+0x27a>
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	7f1b      	ldrb	r3, [r3, #28]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d121      	bne.n	800e692 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	681a      	ldr	r2, [r3, #0]
 800e652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e654:	18d0      	adds	r0, r2, r3
 800e656:	88fb      	ldrh	r3, [r7, #6]
 800e658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e65a:	fb02 f303 	mul.w	r3, r2, r3
 800e65e:	68ba      	ldr	r2, [r7, #8]
 800e660:	4413      	add	r3, r2
 800e662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e664:	4619      	mov	r1, r3
 800e666:	f004 fcd1 	bl	801300c <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	695a      	ldr	r2, [r3, #20]
 800e66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e670:	441a      	add	r2, r3
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800e676:	2300      	movs	r3, #0
 800e678:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800e67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e67c:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800e67e:	88fa      	ldrh	r2, [r7, #6]
 800e680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e682:	1ad3      	subs	r3, r2, r3
 800e684:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800e686:	7ffb      	ldrb	r3, [r7, #31]
 800e688:	b29a      	uxth	r2, r3
 800e68a:	88fb      	ldrh	r3, [r7, #6]
 800e68c:	4413      	add	r3, r2
 800e68e:	86fb      	strh	r3, [r7, #54]	; 0x36
 800e690:	e0a4      	b.n	800e7dc <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800e692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e694:	2b00      	cmp	r3, #0
 800e696:	f000 80a1 	beq.w	800e7dc <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	7f1b      	ldrb	r3, [r3, #28]
 800e69e:	f003 0301 	and.w	r3, r3, #1
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d03a      	beq.n	800e71c <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	891b      	ldrh	r3, [r3, #8]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d10d      	bne.n	800e6ca <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	681a      	ldr	r2, [r3, #0]
 800e6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6b4:	3b02      	subs	r3, #2
 800e6b6:	4413      	add	r3, r2
 800e6b8:	22ff      	movs	r2, #255	; 0xff
 800e6ba:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	681a      	ldr	r2, [r3, #0]
 800e6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c2:	3b01      	subs	r3, #1
 800e6c4:	4413      	add	r3, r2
 800e6c6:	22ff      	movs	r2, #255	; 0xff
 800e6c8:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	695a      	ldr	r2, [r3, #20]
 800e6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d0:	441a      	add	r2, r3
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800e6da:	88fb      	ldrh	r3, [r7, #6]
 800e6dc:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800e6de:	2300      	movs	r3, #0
 800e6e0:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	891b      	ldrh	r3, [r3, #8]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d16f      	bne.n	800e7ca <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	681a      	ldr	r2, [r3, #0]
 800e6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f0:	1c59      	adds	r1, r3, #1
 800e6f2:	6339      	str	r1, [r7, #48]	; 0x30
 800e6f4:	4413      	add	r3, r2
 800e6f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6f8:	b2d2      	uxtb	r2, r2
 800e6fa:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800e6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6fe:	0a18      	lsrs	r0, r3, #8
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	681a      	ldr	r2, [r3, #0]
 800e704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e706:	1c59      	adds	r1, r3, #1
 800e708:	6339      	str	r1, [r7, #48]	; 0x30
 800e70a:	4413      	add	r3, r2
 800e70c:	b2c2      	uxtb	r2, r0
 800e70e:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	695b      	ldr	r3, [r3, #20]
 800e714:	1c9a      	adds	r2, r3, #2
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	615a      	str	r2, [r3, #20]
 800e71a:	e056      	b.n	800e7ca <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	7f1b      	ldrb	r3, [r3, #28]
 800e720:	f003 0302 	and.w	r3, r3, #2
 800e724:	2b00      	cmp	r3, #0
 800e726:	d050      	beq.n	800e7ca <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	891b      	ldrh	r3, [r3, #8]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d14a      	bne.n	800e7c6 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	681a      	ldr	r2, [r3, #0]
 800e734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e736:	3b02      	subs	r3, #2
 800e738:	4413      	add	r3, r2
 800e73a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e73c:	b2d2      	uxtb	r2, r2
 800e73e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800e740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e742:	0a19      	lsrs	r1, r3, #8
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	681a      	ldr	r2, [r3, #0]
 800e748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e74a:	3b01      	subs	r3, #1
 800e74c:	4413      	add	r3, r2
 800e74e:	b2ca      	uxtb	r2, r1
 800e750:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	681a      	ldr	r2, [r3, #0]
 800e756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e758:	18d0      	adds	r0, r2, r3
 800e75a:	88fb      	ldrh	r3, [r7, #6]
 800e75c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e75e:	fb02 f303 	mul.w	r3, r2, r3
 800e762:	68ba      	ldr	r2, [r7, #8]
 800e764:	4413      	add	r3, r2
 800e766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e768:	4619      	mov	r1, r3
 800e76a:	f004 fc4f 	bl	801300c <memcpy>
             q->byteCount += NbBytesToCopy; 
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	695a      	ldr	r2, [r3, #20]
 800e772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e774:	441a      	add	r2, r3
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800e77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e77c:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800e77e:	88fa      	ldrh	r2, [r7, #6]
 800e780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e782:	1ad3      	subs	r3, r2, r3
 800e784:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	699b      	ldr	r3, [r3, #24]
 800e78a:	1c5a      	adds	r2, r3, #1
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800e790:	2300      	movs	r3, #0
 800e792:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	681a      	ldr	r2, [r3, #0]
 800e798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e79a:	1c59      	adds	r1, r3, #1
 800e79c:	6339      	str	r1, [r7, #48]	; 0x30
 800e79e:	4413      	add	r3, r2
 800e7a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7a2:	b2d2      	uxtb	r2, r2
 800e7a4:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800e7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a8:	0a18      	lsrs	r0, r3, #8
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	681a      	ldr	r2, [r3, #0]
 800e7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b0:	1c59      	adds	r1, r3, #1
 800e7b2:	6339      	str	r1, [r7, #48]	; 0x30
 800e7b4:	4413      	add	r3, r2
 800e7b6:	b2c2      	uxtb	r2, r0
 800e7b8:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	695b      	ldr	r3, [r3, #20]
 800e7be:	1c9a      	adds	r2, r3, #2
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	615a      	str	r2, [r3, #20]
 800e7c4:	e001      	b.n	800e7ca <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	e049      	b.n	800e85e <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800e7ca:	7ffb      	ldrb	r3, [r7, #31]
 800e7cc:	b29a      	uxth	r2, r3
 800e7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d0:	b29b      	uxth	r3, r3
 800e7d2:	4413      	add	r3, r2
 800e7d4:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800e7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d015      	beq.n	800e80e <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	681a      	ldr	r2, [r3, #0]
 800e7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e8:	18d0      	adds	r0, r2, r3
 800e7ea:	88fb      	ldrh	r3, [r7, #6]
 800e7ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7ee:	fb02 f203 	mul.w	r2, r2, r3
 800e7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f4:	4413      	add	r3, r2
 800e7f6:	68ba      	ldr	r2, [r7, #8]
 800e7f8:	4413      	add	r3, r2
 800e7fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7fc:	4619      	mov	r1, r3
 800e7fe:	f004 fc05 	bl	801300c <memcpy>
        q->byteCount += NbBytesToCopy;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	695a      	ldr	r2, [r3, #20]
 800e806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e808:	441a      	add	r2, r3
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	699b      	ldr	r3, [r3, #24]
 800e812:	1c5a      	adds	r2, r3, #1
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800e818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e81a:	3301      	adds	r3, #1
 800e81c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e81e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	429a      	cmp	r2, r3
 800e824:	f4ff aeb0 	bcc.w	800e588 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	681a      	ldr	r2, [r3, #0]
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	6919      	ldr	r1, [r3, #16]
 800e830:	7ffb      	ldrb	r3, [r7, #31]
 800e832:	4419      	add	r1, r3
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	685b      	ldr	r3, [r3, #4]
 800e838:	4299      	cmp	r1, r3
 800e83a:	d307      	bcc.n	800e84c <CircularQueue_Add+0x434>
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	6919      	ldr	r1, [r3, #16]
 800e840:	7ffb      	ldrb	r3, [r7, #31]
 800e842:	4419      	add	r1, r3
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	685b      	ldr	r3, [r3, #4]
 800e848:	1acb      	subs	r3, r1, r3
 800e84a:	e003      	b.n	800e854 <CircularQueue_Add+0x43c>
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	6919      	ldr	r1, [r3, #16]
 800e850:	7ffb      	ldrb	r3, [r7, #31]
 800e852:	440b      	add	r3, r1
 800e854:	4413      	add	r3, r2
 800e856:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800e858:	6a3b      	ldr	r3, [r7, #32]
 800e85a:	e000      	b.n	800e85e <CircularQueue_Add+0x446>
    return NULL;
 800e85c:	2300      	movs	r3, #0
}
 800e85e:	4618      	mov	r0, r3
 800e860:	3738      	adds	r7, #56	; 0x38
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}

0800e866 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed  
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800e866:	b480      	push	{r7}
 800e868:	b085      	sub	sp, #20
 800e86a:	af00      	add	r7, sp, #0
 800e86c:	6078      	str	r0, [r7, #4]
 800e86e:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800e870:	2300      	movs	r3, #0
 800e872:	72fb      	strb	r3, [r7, #11]
  uint8_t* ptr= NULL;
 800e874:	2300      	movs	r3, #0
 800e876:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	891b      	ldrh	r3, [r3, #8]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d101      	bne.n	800e884 <CircularQueue_Remove+0x1e>
 800e880:	2302      	movs	r3, #2
 800e882:	e000      	b.n	800e886 <CircularQueue_Remove+0x20>
 800e884:	2300      	movs	r3, #0
 800e886:	72fb      	strb	r3, [r7, #11]
  *elementSize = 0;
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	2200      	movs	r2, #0
 800e88c:	801a      	strh	r2, [r3, #0]
  if (q->byteCount > 0) 
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	695b      	ldr	r3, [r3, #20]
 800e892:	2b00      	cmp	r3, #0
 800e894:	f000 80d4 	beq.w	800ea40 <CircularQueue_Remove+0x1da>
  {
    /* retreive element Size */
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	891b      	ldrh	r3, [r3, #8]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d121      	bne.n	800e8e4 <CircularQueue_Remove+0x7e>
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681a      	ldr	r2, [r3, #0]
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	68db      	ldr	r3, [r3, #12]
 800e8a8:	4413      	add	r3, r2
 800e8aa:	781b      	ldrb	r3, [r3, #0]
 800e8ac:	b29a      	uxth	r2, r3
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6819      	ldr	r1, [r3, #0]
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	68db      	ldr	r3, [r3, #12]
 800e8b6:	1c58      	adds	r0, r3, #1
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	685b      	ldr	r3, [r3, #4]
 800e8bc:	4298      	cmp	r0, r3
 800e8be:	d306      	bcc.n	800e8ce <CircularQueue_Remove+0x68>
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	68d8      	ldr	r0, [r3, #12]
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	685b      	ldr	r3, [r3, #4]
 800e8c8:	1ac3      	subs	r3, r0, r3
 800e8ca:	3301      	adds	r3, #1
 800e8cc:	e002      	b.n	800e8d4 <CircularQueue_Remove+0x6e>
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	68db      	ldr	r3, [r3, #12]
 800e8d2:	3301      	adds	r3, #1
 800e8d4:	440b      	add	r3, r1
 800e8d6:	781b      	ldrb	r3, [r3, #0]
 800e8d8:	b29b      	uxth	r3, r3
 800e8da:	021b      	lsls	r3, r3, #8
 800e8dc:	b29b      	uxth	r3, r3
 800e8de:	4413      	add	r3, r2
 800e8e0:	b29b      	uxth	r3, r3
 800e8e2:	e001      	b.n	800e8e8 <CircularQueue_Remove+0x82>
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	891b      	ldrh	r3, [r3, #8]
 800e8e8:	683a      	ldr	r2, [r7, #0]
 800e8ea:	8013      	strh	r3, [r2, #0]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	7f1b      	ldrb	r3, [r3, #28]
 800e8f0:	f003 0301 	and.w	r3, r3, #1
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d059      	beq.n	800e9ac <CircularQueue_Remove+0x146>
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	7f1b      	ldrb	r3, [r3, #28]
 800e8fc:	f003 0302 	and.w	r3, r3, #2
 800e900:	2b00      	cmp	r3, #0
 800e902:	d153      	bne.n	800e9ac <CircularQueue_Remove+0x146>
     {
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	881b      	ldrh	r3, [r3, #0]
 800e908:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e90c:	4293      	cmp	r3, r2
 800e90e:	d103      	bne.n	800e918 <CircularQueue_Remove+0xb2>
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	891b      	ldrh	r3, [r3, #8]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d012      	beq.n	800e93e <CircularQueue_Remove+0xd8>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	68da      	ldr	r2, [r3, #12]
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	691b      	ldr	r3, [r3, #16]
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800e920:	429a      	cmp	r2, r3
 800e922:	d943      	bls.n	800e9ac <CircularQueue_Remove+0x146>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	891b      	ldrh	r3, [r3, #8]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d03f      	beq.n	800e9ac <CircularQueue_Remove+0x146>
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	685a      	ldr	r2, [r3, #4]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	68db      	ldr	r3, [r3, #12]
 800e934:	1ad3      	subs	r3, r2, r3
 800e936:	687a      	ldr	r2, [r7, #4]
 800e938:	8912      	ldrh	r2, [r2, #8]
 800e93a:	4293      	cmp	r3, r2
 800e93c:	d236      	bcs.n	800e9ac <CircularQueue_Remove+0x146>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	695a      	ldr	r2, [r3, #20]
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	68d9      	ldr	r1, [r3, #12]
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	685b      	ldr	r3, [r3, #4]
 800e94a:	1acb      	subs	r3, r1, r3
 800e94c:	441a      	add	r2, r3
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2200      	movs	r2, #0
 800e956:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	891b      	ldrh	r3, [r3, #8]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d121      	bne.n	800e9a4 <CircularQueue_Remove+0x13e>
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681a      	ldr	r2, [r3, #0]
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	68db      	ldr	r3, [r3, #12]
 800e968:	4413      	add	r3, r2
 800e96a:	781b      	ldrb	r3, [r3, #0]
 800e96c:	b29a      	uxth	r2, r3
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6819      	ldr	r1, [r3, #0]
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	68db      	ldr	r3, [r3, #12]
 800e976:	1c58      	adds	r0, r3, #1
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	685b      	ldr	r3, [r3, #4]
 800e97c:	4298      	cmp	r0, r3
 800e97e:	d306      	bcc.n	800e98e <CircularQueue_Remove+0x128>
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	68d8      	ldr	r0, [r3, #12]
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	685b      	ldr	r3, [r3, #4]
 800e988:	1ac3      	subs	r3, r0, r3
 800e98a:	3301      	adds	r3, #1
 800e98c:	e002      	b.n	800e994 <CircularQueue_Remove+0x12e>
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	68db      	ldr	r3, [r3, #12]
 800e992:	3301      	adds	r3, #1
 800e994:	440b      	add	r3, r1
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	b29b      	uxth	r3, r3
 800e99a:	021b      	lsls	r3, r3, #8
 800e99c:	b29b      	uxth	r3, r3
 800e99e:	4413      	add	r3, r2
 800e9a0:	b29b      	uxth	r3, r3
 800e9a2:	e001      	b.n	800e9a8 <CircularQueue_Remove+0x142>
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	891b      	ldrh	r3, [r3, #8]
 800e9a8:	683a      	ldr	r2, [r7, #0]
 800e9aa:	8013      	strh	r3, [r2, #0]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681a      	ldr	r2, [r3, #0]
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	68d9      	ldr	r1, [r3, #12]
 800e9b4:	7afb      	ldrb	r3, [r7, #11]
 800e9b6:	4419      	add	r1, r3
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	685b      	ldr	r3, [r3, #4]
 800e9bc:	4299      	cmp	r1, r3
 800e9be:	d307      	bcc.n	800e9d0 <CircularQueue_Remove+0x16a>
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	68d9      	ldr	r1, [r3, #12]
 800e9c4:	7afb      	ldrb	r3, [r7, #11]
 800e9c6:	4419      	add	r1, r3
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	685b      	ldr	r3, [r3, #4]
 800e9cc:	1acb      	subs	r3, r1, r3
 800e9ce:	e003      	b.n	800e9d8 <CircularQueue_Remove+0x172>
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	68d9      	ldr	r1, [r3, #12]
 800e9d4:	7afb      	ldrb	r3, [r7, #11]
 800e9d6:	440b      	add	r3, r1
 800e9d8:	4413      	add	r3, r2
 800e9da:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	695b      	ldr	r3, [r3, #20]
 800e9e0:	683a      	ldr	r2, [r7, #0]
 800e9e2:	8812      	ldrh	r2, [r2, #0]
 800e9e4:	4611      	mov	r1, r2
 800e9e6:	7afa      	ldrb	r2, [r7, #11]
 800e9e8:	440a      	add	r2, r1
 800e9ea:	1a9a      	subs	r2, r3, r2
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	695b      	ldr	r3, [r3, #20]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d01e      	beq.n	800ea36 <CircularQueue_Remove+0x1d0>
    {
      q->first = MOD((q->first+ *elementSize + elemSizeStorageRoom ), q->queueMaxSize);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	68db      	ldr	r3, [r3, #12]
 800e9fc:	683a      	ldr	r2, [r7, #0]
 800e9fe:	8812      	ldrh	r2, [r2, #0]
 800ea00:	441a      	add	r2, r3
 800ea02:	7afb      	ldrb	r3, [r7, #11]
 800ea04:	441a      	add	r2, r3
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	685b      	ldr	r3, [r3, #4]
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	d30a      	bcc.n	800ea24 <CircularQueue_Remove+0x1be>
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	68db      	ldr	r3, [r3, #12]
 800ea12:	683a      	ldr	r2, [r7, #0]
 800ea14:	8812      	ldrh	r2, [r2, #0]
 800ea16:	441a      	add	r2, r3
 800ea18:	7afb      	ldrb	r3, [r7, #11]
 800ea1a:	441a      	add	r2, r3
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	685b      	ldr	r3, [r3, #4]
 800ea20:	1ad3      	subs	r3, r2, r3
 800ea22:	e006      	b.n	800ea32 <CircularQueue_Remove+0x1cc>
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	68db      	ldr	r3, [r3, #12]
 800ea28:	683a      	ldr	r2, [r7, #0]
 800ea2a:	8812      	ldrh	r2, [r2, #0]
 800ea2c:	441a      	add	r2, r3
 800ea2e:	7afb      	ldrb	r3, [r7, #11]
 800ea30:	4413      	add	r3, r2
 800ea32:	687a      	ldr	r2, [r7, #4]
 800ea34:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	699b      	ldr	r3, [r3, #24]
 800ea3a:	1e5a      	subs	r2, r3, #1
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	619a      	str	r2, [r3, #24]
  }
  return ptr;
 800ea40:	68fb      	ldr	r3, [r7, #12]
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3714      	adds	r7, #20
 800ea46:	46bd      	mov	sp, r7
 800ea48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4c:	4770      	bx	lr

0800ea4e <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed  
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800ea4e:	b480      	push	{r7}
 800ea50:	b087      	sub	sp, #28
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	6078      	str	r0, [r7, #4]
 800ea56:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	73fb      	strb	r3, [r7, #15]
  uint8_t* x= NULL;
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	891b      	ldrh	r3, [r3, #8]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d101      	bne.n	800ea6c <CircularQueue_Sense+0x1e>
 800ea68:	2302      	movs	r3, #2
 800ea6a:	e000      	b.n	800ea6e <CircularQueue_Sense+0x20>
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	73fb      	strb	r3, [r7, #15]
  *elementSize = 0;
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	2200      	movs	r2, #0
 800ea74:	801a      	strh	r2, [r3, #0]
  uint32_t FirstElemetPos = 0;
 800ea76:	2300      	movs	r3, #0
 800ea78:	613b      	str	r3, [r7, #16]
    
  if (q->byteCount > 0) 
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	695b      	ldr	r3, [r3, #20]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	f000 8093 	beq.w	800ebaa <CircularQueue_Sense+0x15c>
  {
    FirstElemetPos = q->first;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	68db      	ldr	r3, [r3, #12]
 800ea88:	613b      	str	r3, [r7, #16]
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	891b      	ldrh	r3, [r3, #8]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d121      	bne.n	800ead6 <CircularQueue_Sense+0x88>
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681a      	ldr	r2, [r3, #0]
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	68db      	ldr	r3, [r3, #12]
 800ea9a:	4413      	add	r3, r2
 800ea9c:	781b      	ldrb	r3, [r3, #0]
 800ea9e:	b29a      	uxth	r2, r3
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6819      	ldr	r1, [r3, #0]
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	68db      	ldr	r3, [r3, #12]
 800eaa8:	1c58      	adds	r0, r3, #1
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	685b      	ldr	r3, [r3, #4]
 800eaae:	4298      	cmp	r0, r3
 800eab0:	d306      	bcc.n	800eac0 <CircularQueue_Sense+0x72>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	68d8      	ldr	r0, [r3, #12]
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	685b      	ldr	r3, [r3, #4]
 800eaba:	1ac3      	subs	r3, r0, r3
 800eabc:	3301      	adds	r3, #1
 800eabe:	e002      	b.n	800eac6 <CircularQueue_Sense+0x78>
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	68db      	ldr	r3, [r3, #12]
 800eac4:	3301      	adds	r3, #1
 800eac6:	440b      	add	r3, r1
 800eac8:	781b      	ldrb	r3, [r3, #0]
 800eaca:	b29b      	uxth	r3, r3
 800eacc:	021b      	lsls	r3, r3, #8
 800eace:	b29b      	uxth	r3, r3
 800ead0:	4413      	add	r3, r2
 800ead2:	b29b      	uxth	r3, r3
 800ead4:	e001      	b.n	800eada <CircularQueue_Sense+0x8c>
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	891b      	ldrh	r3, [r3, #8]
 800eada:	683a      	ldr	r2, [r7, #0]
 800eadc:	8013      	strh	r3, [r2, #0]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	7f1b      	ldrb	r3, [r3, #28]
 800eae2:	f003 0301 	and.w	r3, r3, #1
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d04a      	beq.n	800eb80 <CircularQueue_Sense+0x132>
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	7f1b      	ldrb	r3, [r3, #28]
 800eaee:	f003 0302 	and.w	r3, r3, #2
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d144      	bne.n	800eb80 <CircularQueue_Sense+0x132>
    { 
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	881b      	ldrh	r3, [r3, #0]
 800eafa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eafe:	4293      	cmp	r3, r2
 800eb00:	d103      	bne.n	800eb0a <CircularQueue_Sense+0xbc>
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	891b      	ldrh	r3, [r3, #8]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d012      	beq.n	800eb30 <CircularQueue_Sense+0xe2>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	68da      	ldr	r2, [r3, #12]
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	691b      	ldr	r3, [r3, #16]
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800eb12:	429a      	cmp	r2, r3
 800eb14:	d934      	bls.n	800eb80 <CircularQueue_Sense+0x132>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	891b      	ldrh	r3, [r3, #8]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d030      	beq.n	800eb80 <CircularQueue_Sense+0x132>
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	685a      	ldr	r2, [r3, #4]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	68db      	ldr	r3, [r3, #12]
 800eb26:	1ad3      	subs	r3, r2, r3
 800eb28:	687a      	ldr	r2, [r7, #4]
 800eb2a:	8912      	ldrh	r2, [r2, #8]
 800eb2c:	4293      	cmp	r3, r2
 800eb2e:	d227      	bcs.n	800eb80 <CircularQueue_Sense+0x132>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800eb30:	2300      	movs	r3, #0
 800eb32:	613b      	str	r3, [r7, #16]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	891b      	ldrh	r3, [r3, #8]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d11d      	bne.n	800eb78 <CircularQueue_Sense+0x12a>
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681a      	ldr	r2, [r3, #0]
 800eb40:	693b      	ldr	r3, [r7, #16]
 800eb42:	4413      	add	r3, r2
 800eb44:	781b      	ldrb	r3, [r3, #0]
 800eb46:	b29a      	uxth	r2, r3
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6819      	ldr	r1, [r3, #0]
 800eb4c:	693b      	ldr	r3, [r7, #16]
 800eb4e:	1c58      	adds	r0, r3, #1
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	685b      	ldr	r3, [r3, #4]
 800eb54:	4298      	cmp	r0, r3
 800eb56:	d305      	bcc.n	800eb64 <CircularQueue_Sense+0x116>
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	685b      	ldr	r3, [r3, #4]
 800eb5c:	6938      	ldr	r0, [r7, #16]
 800eb5e:	1ac3      	subs	r3, r0, r3
 800eb60:	3301      	adds	r3, #1
 800eb62:	e001      	b.n	800eb68 <CircularQueue_Sense+0x11a>
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	3301      	adds	r3, #1
 800eb68:	440b      	add	r3, r1
 800eb6a:	781b      	ldrb	r3, [r3, #0]
 800eb6c:	b29b      	uxth	r3, r3
 800eb6e:	021b      	lsls	r3, r3, #8
 800eb70:	b29b      	uxth	r3, r3
 800eb72:	4413      	add	r3, r2
 800eb74:	b29b      	uxth	r3, r3
 800eb76:	e001      	b.n	800eb7c <CircularQueue_Sense+0x12e>
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	891b      	ldrh	r3, [r3, #8]
 800eb7c:	683a      	ldr	r2, [r7, #0]
 800eb7e:	8013      	strh	r3, [r2, #0]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681a      	ldr	r2, [r3, #0]
 800eb84:	7bf9      	ldrb	r1, [r7, #15]
 800eb86:	693b      	ldr	r3, [r7, #16]
 800eb88:	4419      	add	r1, r3
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	685b      	ldr	r3, [r3, #4]
 800eb8e:	4299      	cmp	r1, r3
 800eb90:	d306      	bcc.n	800eba0 <CircularQueue_Sense+0x152>
 800eb92:	7bf9      	ldrb	r1, [r7, #15]
 800eb94:	693b      	ldr	r3, [r7, #16]
 800eb96:	4419      	add	r1, r3
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	685b      	ldr	r3, [r3, #4]
 800eb9c:	1acb      	subs	r3, r1, r3
 800eb9e:	e002      	b.n	800eba6 <CircularQueue_Sense+0x158>
 800eba0:	7bf9      	ldrb	r1, [r7, #15]
 800eba2:	693b      	ldr	r3, [r7, #16]
 800eba4:	440b      	add	r3, r1
 800eba6:	4413      	add	r3, r2
 800eba8:	617b      	str	r3, [r7, #20]
  }
  return x;
 800ebaa:	697b      	ldr	r3, [r7, #20]
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	371c      	adds	r7, #28
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb6:	4770      	bx	lr

0800ebb8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ebb8:	b480      	push	{r7}
 800ebba:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800ebbc:	bf00      	nop
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc4:	4770      	bx	lr
	...

0800ebc8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ebc8:	b480      	push	{r7}
 800ebca:	b085      	sub	sp, #20
 800ebcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ebce:	f3ef 8305 	mrs	r3, IPSR
 800ebd2:	60bb      	str	r3, [r7, #8]
  return(result);
 800ebd4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d10f      	bne.n	800ebfa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ebda:	f3ef 8310 	mrs	r3, PRIMASK
 800ebde:	607b      	str	r3, [r7, #4]
  return(result);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d105      	bne.n	800ebf2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ebe6:	f3ef 8311 	mrs	r3, BASEPRI
 800ebea:	603b      	str	r3, [r7, #0]
  return(result);
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d007      	beq.n	800ec02 <osKernelInitialize+0x3a>
 800ebf2:	4b0e      	ldr	r3, [pc, #56]	; (800ec2c <osKernelInitialize+0x64>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	2b02      	cmp	r3, #2
 800ebf8:	d103      	bne.n	800ec02 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800ebfa:	f06f 0305 	mvn.w	r3, #5
 800ebfe:	60fb      	str	r3, [r7, #12]
 800ec00:	e00c      	b.n	800ec1c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ec02:	4b0a      	ldr	r3, [pc, #40]	; (800ec2c <osKernelInitialize+0x64>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d105      	bne.n	800ec16 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ec0a:	4b08      	ldr	r3, [pc, #32]	; (800ec2c <osKernelInitialize+0x64>)
 800ec0c:	2201      	movs	r2, #1
 800ec0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ec10:	2300      	movs	r3, #0
 800ec12:	60fb      	str	r3, [r7, #12]
 800ec14:	e002      	b.n	800ec1c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800ec16:	f04f 33ff 	mov.w	r3, #4294967295
 800ec1a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ec1c:	68fb      	ldr	r3, [r7, #12]
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	3714      	adds	r7, #20
 800ec22:	46bd      	mov	sp, r7
 800ec24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec28:	4770      	bx	lr
 800ec2a:	bf00      	nop
 800ec2c:	2000147c 	.word	0x2000147c

0800ec30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b084      	sub	sp, #16
 800ec34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec36:	f3ef 8305 	mrs	r3, IPSR
 800ec3a:	60bb      	str	r3, [r7, #8]
  return(result);
 800ec3c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d10f      	bne.n	800ec62 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec42:	f3ef 8310 	mrs	r3, PRIMASK
 800ec46:	607b      	str	r3, [r7, #4]
  return(result);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d105      	bne.n	800ec5a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ec4e:	f3ef 8311 	mrs	r3, BASEPRI
 800ec52:	603b      	str	r3, [r7, #0]
  return(result);
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d007      	beq.n	800ec6a <osKernelStart+0x3a>
 800ec5a:	4b0f      	ldr	r3, [pc, #60]	; (800ec98 <osKernelStart+0x68>)
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	2b02      	cmp	r3, #2
 800ec60:	d103      	bne.n	800ec6a <osKernelStart+0x3a>
    stat = osErrorISR;
 800ec62:	f06f 0305 	mvn.w	r3, #5
 800ec66:	60fb      	str	r3, [r7, #12]
 800ec68:	e010      	b.n	800ec8c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ec6a:	4b0b      	ldr	r3, [pc, #44]	; (800ec98 <osKernelStart+0x68>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	2b01      	cmp	r3, #1
 800ec70:	d109      	bne.n	800ec86 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ec72:	f7ff ffa1 	bl	800ebb8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ec76:	4b08      	ldr	r3, [pc, #32]	; (800ec98 <osKernelStart+0x68>)
 800ec78:	2202      	movs	r2, #2
 800ec7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ec7c:	f002 fd5e 	bl	801173c <vTaskStartScheduler>
      stat = osOK;
 800ec80:	2300      	movs	r3, #0
 800ec82:	60fb      	str	r3, [r7, #12]
 800ec84:	e002      	b.n	800ec8c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800ec86:	f04f 33ff 	mov.w	r3, #4294967295
 800ec8a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ec8c:	68fb      	ldr	r3, [r7, #12]
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3710      	adds	r7, #16
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
 800ec96:	bf00      	nop
 800ec98:	2000147c 	.word	0x2000147c

0800ec9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b090      	sub	sp, #64	; 0x40
 800eca0:	af04      	add	r7, sp, #16
 800eca2:	60f8      	str	r0, [r7, #12]
 800eca4:	60b9      	str	r1, [r7, #8]
 800eca6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800eca8:	2300      	movs	r3, #0
 800ecaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ecac:	f3ef 8305 	mrs	r3, IPSR
 800ecb0:	61fb      	str	r3, [r7, #28]
  return(result);
 800ecb2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	f040 808f 	bne.w	800edd8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecba:	f3ef 8310 	mrs	r3, PRIMASK
 800ecbe:	61bb      	str	r3, [r7, #24]
  return(result);
 800ecc0:	69bb      	ldr	r3, [r7, #24]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d105      	bne.n	800ecd2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ecc6:	f3ef 8311 	mrs	r3, BASEPRI
 800ecca:	617b      	str	r3, [r7, #20]
  return(result);
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d003      	beq.n	800ecda <osThreadNew+0x3e>
 800ecd2:	4b44      	ldr	r3, [pc, #272]	; (800ede4 <osThreadNew+0x148>)
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	2b02      	cmp	r3, #2
 800ecd8:	d07e      	beq.n	800edd8 <osThreadNew+0x13c>
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d07b      	beq.n	800edd8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800ece0:	2380      	movs	r3, #128	; 0x80
 800ece2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800ece4:	2318      	movs	r3, #24
 800ece6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800ece8:	2300      	movs	r3, #0
 800ecea:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800ecec:	f04f 33ff 	mov.w	r3, #4294967295
 800ecf0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d045      	beq.n	800ed84 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d002      	beq.n	800ed06 <osThreadNew+0x6a>
        name = attr->name;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	699b      	ldr	r3, [r3, #24]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d002      	beq.n	800ed14 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	699b      	ldr	r3, [r3, #24]
 800ed12:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ed14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d008      	beq.n	800ed2c <osThreadNew+0x90>
 800ed1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed1c:	2b38      	cmp	r3, #56	; 0x38
 800ed1e:	d805      	bhi.n	800ed2c <osThreadNew+0x90>
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	f003 0301 	and.w	r3, r3, #1
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d001      	beq.n	800ed30 <osThreadNew+0x94>
        return (NULL);
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	e054      	b.n	800edda <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	695b      	ldr	r3, [r3, #20]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d003      	beq.n	800ed40 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	695b      	ldr	r3, [r3, #20]
 800ed3c:	089b      	lsrs	r3, r3, #2
 800ed3e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	689b      	ldr	r3, [r3, #8]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d00e      	beq.n	800ed66 <osThreadNew+0xca>
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	68db      	ldr	r3, [r3, #12]
 800ed4c:	2b5b      	cmp	r3, #91	; 0x5b
 800ed4e:	d90a      	bls.n	800ed66 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d006      	beq.n	800ed66 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	695b      	ldr	r3, [r3, #20]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d002      	beq.n	800ed66 <osThreadNew+0xca>
        mem = 1;
 800ed60:	2301      	movs	r3, #1
 800ed62:	623b      	str	r3, [r7, #32]
 800ed64:	e010      	b.n	800ed88 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	689b      	ldr	r3, [r3, #8]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d10c      	bne.n	800ed88 <osThreadNew+0xec>
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	68db      	ldr	r3, [r3, #12]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d108      	bne.n	800ed88 <osThreadNew+0xec>
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	691b      	ldr	r3, [r3, #16]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d104      	bne.n	800ed88 <osThreadNew+0xec>
          mem = 0;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	623b      	str	r3, [r7, #32]
 800ed82:	e001      	b.n	800ed88 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800ed84:	2300      	movs	r3, #0
 800ed86:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ed88:	6a3b      	ldr	r3, [r7, #32]
 800ed8a:	2b01      	cmp	r3, #1
 800ed8c:	d110      	bne.n	800edb0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800ed92:	687a      	ldr	r2, [r7, #4]
 800ed94:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ed96:	9202      	str	r2, [sp, #8]
 800ed98:	9301      	str	r3, [sp, #4]
 800ed9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed9c:	9300      	str	r3, [sp, #0]
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eda2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eda4:	68f8      	ldr	r0, [r7, #12]
 800eda6:	f002 faf7 	bl	8011398 <xTaskCreateStatic>
 800edaa:	4603      	mov	r3, r0
 800edac:	613b      	str	r3, [r7, #16]
 800edae:	e013      	b.n	800edd8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800edb0:	6a3b      	ldr	r3, [r7, #32]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d110      	bne.n	800edd8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800edb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edb8:	b29a      	uxth	r2, r3
 800edba:	f107 0310 	add.w	r3, r7, #16
 800edbe:	9301      	str	r3, [sp, #4]
 800edc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc2:	9300      	str	r3, [sp, #0]
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800edc8:	68f8      	ldr	r0, [r7, #12]
 800edca:	f002 fb3f 	bl	801144c <xTaskCreate>
 800edce:	4603      	mov	r3, r0
 800edd0:	2b01      	cmp	r3, #1
 800edd2:	d001      	beq.n	800edd8 <osThreadNew+0x13c>
          hTask = NULL;
 800edd4:	2300      	movs	r3, #0
 800edd6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800edd8:	693b      	ldr	r3, [r7, #16]
}
 800edda:	4618      	mov	r0, r3
 800eddc:	3730      	adds	r7, #48	; 0x30
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}
 800ede2:	bf00      	nop
 800ede4:	2000147c 	.word	0x2000147c

0800ede8 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800ede8:	b580      	push	{r7, lr}
 800edea:	b08a      	sub	sp, #40	; 0x28
 800edec:	af02      	add	r7, sp, #8
 800edee:	6078      	str	r0, [r7, #4]
 800edf0:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800edf6:	69fb      	ldr	r3, [r7, #28]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d002      	beq.n	800ee02 <osThreadFlagsSet+0x1a>
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	da03      	bge.n	800ee0a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800ee02:	f06f 0303 	mvn.w	r3, #3
 800ee06:	60fb      	str	r3, [r7, #12]
 800ee08:	e046      	b.n	800ee98 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800ee0a:	f04f 33ff 	mov.w	r3, #4294967295
 800ee0e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee10:	f3ef 8305 	mrs	r3, IPSR
 800ee14:	61bb      	str	r3, [r7, #24]
  return(result);
 800ee16:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d10f      	bne.n	800ee3c <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee1c:	f3ef 8310 	mrs	r3, PRIMASK
 800ee20:	617b      	str	r3, [r7, #20]
  return(result);
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d105      	bne.n	800ee34 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ee28:	f3ef 8311 	mrs	r3, BASEPRI
 800ee2c:	613b      	str	r3, [r7, #16]
  return(result);
 800ee2e:	693b      	ldr	r3, [r7, #16]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d024      	beq.n	800ee7e <osThreadFlagsSet+0x96>
 800ee34:	4b1b      	ldr	r3, [pc, #108]	; (800eea4 <osThreadFlagsSet+0xbc>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	2b02      	cmp	r3, #2
 800ee3a:	d120      	bne.n	800ee7e <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800ee40:	f107 0308 	add.w	r3, r7, #8
 800ee44:	9300      	str	r3, [sp, #0]
 800ee46:	2300      	movs	r3, #0
 800ee48:	2201      	movs	r2, #1
 800ee4a:	6839      	ldr	r1, [r7, #0]
 800ee4c:	69f8      	ldr	r0, [r7, #28]
 800ee4e:	f003 fbf9 	bl	8012644 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800ee52:	f107 020c 	add.w	r2, r7, #12
 800ee56:	2300      	movs	r3, #0
 800ee58:	9300      	str	r3, [sp, #0]
 800ee5a:	4613      	mov	r3, r2
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	2100      	movs	r1, #0
 800ee60:	69f8      	ldr	r0, [r7, #28]
 800ee62:	f003 fbef 	bl	8012644 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800ee66:	68bb      	ldr	r3, [r7, #8]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d015      	beq.n	800ee98 <osThreadFlagsSet+0xb0>
 800ee6c:	4b0e      	ldr	r3, [pc, #56]	; (800eea8 <osThreadFlagsSet+0xc0>)
 800ee6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee72:	601a      	str	r2, [r3, #0]
 800ee74:	f3bf 8f4f 	dsb	sy
 800ee78:	f3bf 8f6f 	isb	sy
 800ee7c:	e00c      	b.n	800ee98 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800ee7e:	2300      	movs	r3, #0
 800ee80:	2201      	movs	r2, #1
 800ee82:	6839      	ldr	r1, [r7, #0]
 800ee84:	69f8      	ldr	r0, [r7, #28]
 800ee86:	f003 fb27 	bl	80124d8 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800ee8a:	f107 030c 	add.w	r3, r7, #12
 800ee8e:	2200      	movs	r2, #0
 800ee90:	2100      	movs	r1, #0
 800ee92:	69f8      	ldr	r0, [r7, #28]
 800ee94:	f003 fb20 	bl	80124d8 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800ee98:	68fb      	ldr	r3, [r7, #12]
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3720      	adds	r7, #32
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}
 800eea2:	bf00      	nop
 800eea4:	2000147c 	.word	0x2000147c
 800eea8:	e000ed04 	.word	0xe000ed04

0800eeac <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b08e      	sub	sp, #56	; 0x38
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	60f8      	str	r0, [r7, #12]
 800eeb4:	60b9      	str	r1, [r7, #8]
 800eeb6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eeb8:	f3ef 8305 	mrs	r3, IPSR
 800eebc:	61fb      	str	r3, [r7, #28]
  return(result);
 800eebe:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d10f      	bne.n	800eee4 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eec4:	f3ef 8310 	mrs	r3, PRIMASK
 800eec8:	61bb      	str	r3, [r7, #24]
  return(result);
 800eeca:	69bb      	ldr	r3, [r7, #24]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d105      	bne.n	800eedc <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eed0:	f3ef 8311 	mrs	r3, BASEPRI
 800eed4:	617b      	str	r3, [r7, #20]
  return(result);
 800eed6:	697b      	ldr	r3, [r7, #20]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d007      	beq.n	800eeec <osThreadFlagsWait+0x40>
 800eedc:	4b3c      	ldr	r3, [pc, #240]	; (800efd0 <osThreadFlagsWait+0x124>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	2b02      	cmp	r3, #2
 800eee2:	d103      	bne.n	800eeec <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800eee4:	f06f 0305 	mvn.w	r3, #5
 800eee8:	637b      	str	r3, [r7, #52]	; 0x34
 800eeea:	e06b      	b.n	800efc4 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	da03      	bge.n	800eefa <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800eef2:	f06f 0303 	mvn.w	r3, #3
 800eef6:	637b      	str	r3, [r7, #52]	; 0x34
 800eef8:	e064      	b.n	800efc4 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	f003 0302 	and.w	r3, r3, #2
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d002      	beq.n	800ef0a <osThreadFlagsWait+0x5e>
      clear = 0U;
 800ef04:	2300      	movs	r3, #0
 800ef06:	633b      	str	r3, [r7, #48]	; 0x30
 800ef08:	e001      	b.n	800ef0e <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800ef16:	f002 fd57 	bl	80119c8 <xTaskGetTickCount>
 800ef1a:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800ef1c:	f107 0210 	add.w	r2, r7, #16
 800ef20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ef24:	2000      	movs	r0, #0
 800ef26:	f003 fa7d 	bl	8012424 <xTaskNotifyWait>
 800ef2a:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800ef2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef2e:	2b01      	cmp	r3, #1
 800ef30:	d137      	bne.n	800efa2 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800ef32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	4013      	ands	r3, r2
 800ef38:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800ef3a:	693b      	ldr	r3, [r7, #16]
 800ef3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ef3e:	4313      	orrs	r3, r2
 800ef40:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	f003 0301 	and.w	r3, r3, #1
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d00c      	beq.n	800ef66 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800ef4c:	68fa      	ldr	r2, [r7, #12]
 800ef4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef50:	4013      	ands	r3, r2
 800ef52:	68fa      	ldr	r2, [r7, #12]
 800ef54:	429a      	cmp	r2, r3
 800ef56:	d032      	beq.n	800efbe <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d10f      	bne.n	800ef7e <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800ef5e:	f06f 0302 	mvn.w	r3, #2
 800ef62:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800ef64:	e02e      	b.n	800efc4 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800ef66:	68fa      	ldr	r2, [r7, #12]
 800ef68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef6a:	4013      	ands	r3, r2
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d128      	bne.n	800efc2 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d103      	bne.n	800ef7e <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800ef76:	f06f 0302 	mvn.w	r3, #2
 800ef7a:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800ef7c:	e022      	b.n	800efc4 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800ef7e:	f002 fd23 	bl	80119c8 <xTaskGetTickCount>
 800ef82:	4602      	mov	r2, r0
 800ef84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef86:	1ad3      	subs	r3, r2, r3
 800ef88:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800ef8a:	6a3a      	ldr	r2, [r7, #32]
 800ef8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef8e:	429a      	cmp	r2, r3
 800ef90:	d902      	bls.n	800ef98 <osThreadFlagsWait+0xec>
          tout  = 0;
 800ef92:	2300      	movs	r3, #0
 800ef94:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef96:	e00e      	b.n	800efb6 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800ef98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef9a:	6a3b      	ldr	r3, [r7, #32]
 800ef9c:	1ad3      	subs	r3, r2, r3
 800ef9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800efa0:	e009      	b.n	800efb6 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d103      	bne.n	800efb0 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800efa8:	f06f 0302 	mvn.w	r3, #2
 800efac:	637b      	str	r3, [r7, #52]	; 0x34
 800efae:	e002      	b.n	800efb6 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800efb0:	f06f 0301 	mvn.w	r3, #1
 800efb4:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800efb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d1af      	bne.n	800ef1c <osThreadFlagsWait+0x70>
 800efbc:	e002      	b.n	800efc4 <osThreadFlagsWait+0x118>
            break;
 800efbe:	bf00      	nop
 800efc0:	e000      	b.n	800efc4 <osThreadFlagsWait+0x118>
            break;
 800efc2:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800efc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800efc6:	4618      	mov	r0, r3
 800efc8:	3738      	adds	r7, #56	; 0x38
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}
 800efce:	bf00      	nop
 800efd0:	2000147c 	.word	0x2000147c

0800efd4 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b086      	sub	sp, #24
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800efdc:	f3ef 8305 	mrs	r3, IPSR
 800efe0:	613b      	str	r3, [r7, #16]
  return(result);
 800efe2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d10f      	bne.n	800f008 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800efe8:	f3ef 8310 	mrs	r3, PRIMASK
 800efec:	60fb      	str	r3, [r7, #12]
  return(result);
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d105      	bne.n	800f000 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eff4:	f3ef 8311 	mrs	r3, BASEPRI
 800eff8:	60bb      	str	r3, [r7, #8]
  return(result);
 800effa:	68bb      	ldr	r3, [r7, #8]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d007      	beq.n	800f010 <osDelay+0x3c>
 800f000:	4b0a      	ldr	r3, [pc, #40]	; (800f02c <osDelay+0x58>)
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	2b02      	cmp	r3, #2
 800f006:	d103      	bne.n	800f010 <osDelay+0x3c>
    stat = osErrorISR;
 800f008:	f06f 0305 	mvn.w	r3, #5
 800f00c:	617b      	str	r3, [r7, #20]
 800f00e:	e007      	b.n	800f020 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800f010:	2300      	movs	r3, #0
 800f012:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d002      	beq.n	800f020 <osDelay+0x4c>
      vTaskDelay(ticks);
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f002 fb5a 	bl	80116d4 <vTaskDelay>
    }
  }

  return (stat);
 800f020:	697b      	ldr	r3, [r7, #20]
}
 800f022:	4618      	mov	r0, r3
 800f024:	3718      	adds	r7, #24
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
 800f02a:	bf00      	nop
 800f02c:	2000147c 	.word	0x2000147c

0800f030 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800f030:	b580      	push	{r7, lr}
 800f032:	b08a      	sub	sp, #40	; 0x28
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800f038:	2300      	movs	r3, #0
 800f03a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f03c:	f3ef 8305 	mrs	r3, IPSR
 800f040:	613b      	str	r3, [r7, #16]
  return(result);
 800f042:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800f044:	2b00      	cmp	r3, #0
 800f046:	f040 8085 	bne.w	800f154 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f04a:	f3ef 8310 	mrs	r3, PRIMASK
 800f04e:	60fb      	str	r3, [r7, #12]
  return(result);
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d105      	bne.n	800f062 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f056:	f3ef 8311 	mrs	r3, BASEPRI
 800f05a:	60bb      	str	r3, [r7, #8]
  return(result);
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d003      	beq.n	800f06a <osMutexNew+0x3a>
 800f062:	4b3f      	ldr	r3, [pc, #252]	; (800f160 <osMutexNew+0x130>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	2b02      	cmp	r3, #2
 800f068:	d074      	beq.n	800f154 <osMutexNew+0x124>
    if (attr != NULL) {
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d003      	beq.n	800f078 <osMutexNew+0x48>
      type = attr->attr_bits;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	685b      	ldr	r3, [r3, #4]
 800f074:	623b      	str	r3, [r7, #32]
 800f076:	e001      	b.n	800f07c <osMutexNew+0x4c>
    } else {
      type = 0U;
 800f078:	2300      	movs	r3, #0
 800f07a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800f07c:	6a3b      	ldr	r3, [r7, #32]
 800f07e:	f003 0301 	and.w	r3, r3, #1
 800f082:	2b00      	cmp	r3, #0
 800f084:	d002      	beq.n	800f08c <osMutexNew+0x5c>
      rmtx = 1U;
 800f086:	2301      	movs	r3, #1
 800f088:	61fb      	str	r3, [r7, #28]
 800f08a:	e001      	b.n	800f090 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800f08c:	2300      	movs	r3, #0
 800f08e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800f090:	6a3b      	ldr	r3, [r7, #32]
 800f092:	f003 0308 	and.w	r3, r3, #8
 800f096:	2b00      	cmp	r3, #0
 800f098:	d15c      	bne.n	800f154 <osMutexNew+0x124>
      mem = -1;
 800f09a:	f04f 33ff 	mov.w	r3, #4294967295
 800f09e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d015      	beq.n	800f0d2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	689b      	ldr	r3, [r3, #8]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d006      	beq.n	800f0bc <osMutexNew+0x8c>
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	68db      	ldr	r3, [r3, #12]
 800f0b2:	2b4f      	cmp	r3, #79	; 0x4f
 800f0b4:	d902      	bls.n	800f0bc <osMutexNew+0x8c>
          mem = 1;
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	61bb      	str	r3, [r7, #24]
 800f0ba:	e00c      	b.n	800f0d6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	689b      	ldr	r3, [r3, #8]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d108      	bne.n	800f0d6 <osMutexNew+0xa6>
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	68db      	ldr	r3, [r3, #12]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d104      	bne.n	800f0d6 <osMutexNew+0xa6>
            mem = 0;
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	61bb      	str	r3, [r7, #24]
 800f0d0:	e001      	b.n	800f0d6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800f0d6:	69bb      	ldr	r3, [r7, #24]
 800f0d8:	2b01      	cmp	r3, #1
 800f0da:	d112      	bne.n	800f102 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800f0dc:	69fb      	ldr	r3, [r7, #28]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d007      	beq.n	800f0f2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	689b      	ldr	r3, [r3, #8]
 800f0e6:	4619      	mov	r1, r3
 800f0e8:	2004      	movs	r0, #4
 800f0ea:	f001 fa22 	bl	8010532 <xQueueCreateMutexStatic>
 800f0ee:	6278      	str	r0, [r7, #36]	; 0x24
 800f0f0:	e016      	b.n	800f120 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	689b      	ldr	r3, [r3, #8]
 800f0f6:	4619      	mov	r1, r3
 800f0f8:	2001      	movs	r0, #1
 800f0fa:	f001 fa1a 	bl	8010532 <xQueueCreateMutexStatic>
 800f0fe:	6278      	str	r0, [r7, #36]	; 0x24
 800f100:	e00e      	b.n	800f120 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800f102:	69bb      	ldr	r3, [r7, #24]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d10b      	bne.n	800f120 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800f108:	69fb      	ldr	r3, [r7, #28]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d004      	beq.n	800f118 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800f10e:	2004      	movs	r0, #4
 800f110:	f001 f9f7 	bl	8010502 <xQueueCreateMutex>
 800f114:	6278      	str	r0, [r7, #36]	; 0x24
 800f116:	e003      	b.n	800f120 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800f118:	2001      	movs	r0, #1
 800f11a:	f001 f9f2 	bl	8010502 <xQueueCreateMutex>
 800f11e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800f120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f122:	2b00      	cmp	r3, #0
 800f124:	d00c      	beq.n	800f140 <osMutexNew+0x110>
        if (attr != NULL) {
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d003      	beq.n	800f134 <osMutexNew+0x104>
          name = attr->name;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	617b      	str	r3, [r7, #20]
 800f132:	e001      	b.n	800f138 <osMutexNew+0x108>
        } else {
          name = NULL;
 800f134:	2300      	movs	r3, #0
 800f136:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800f138:	6979      	ldr	r1, [r7, #20]
 800f13a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f13c:	f002 f8a6 	bl	801128c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800f140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f142:	2b00      	cmp	r3, #0
 800f144:	d006      	beq.n	800f154 <osMutexNew+0x124>
 800f146:	69fb      	ldr	r3, [r7, #28]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d003      	beq.n	800f154 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800f14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f14e:	f043 0301 	orr.w	r3, r3, #1
 800f152:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800f154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f156:	4618      	mov	r0, r3
 800f158:	3728      	adds	r7, #40	; 0x28
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}
 800f15e:	bf00      	nop
 800f160:	2000147c 	.word	0x2000147c

0800f164 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800f164:	b580      	push	{r7, lr}
 800f166:	b088      	sub	sp, #32
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
 800f16c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	f023 0301 	bic.w	r3, r3, #1
 800f174:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	f003 0301 	and.w	r3, r3, #1
 800f17c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800f17e:	2300      	movs	r3, #0
 800f180:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f182:	f3ef 8305 	mrs	r3, IPSR
 800f186:	613b      	str	r3, [r7, #16]
  return(result);
 800f188:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d10f      	bne.n	800f1ae <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f18e:	f3ef 8310 	mrs	r3, PRIMASK
 800f192:	60fb      	str	r3, [r7, #12]
  return(result);
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d105      	bne.n	800f1a6 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f19a:	f3ef 8311 	mrs	r3, BASEPRI
 800f19e:	60bb      	str	r3, [r7, #8]
  return(result);
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d007      	beq.n	800f1b6 <osMutexAcquire+0x52>
 800f1a6:	4b1d      	ldr	r3, [pc, #116]	; (800f21c <osMutexAcquire+0xb8>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	2b02      	cmp	r3, #2
 800f1ac:	d103      	bne.n	800f1b6 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800f1ae:	f06f 0305 	mvn.w	r3, #5
 800f1b2:	61fb      	str	r3, [r7, #28]
 800f1b4:	e02c      	b.n	800f210 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800f1b6:	69bb      	ldr	r3, [r7, #24]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d103      	bne.n	800f1c4 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800f1bc:	f06f 0303 	mvn.w	r3, #3
 800f1c0:	61fb      	str	r3, [r7, #28]
 800f1c2:	e025      	b.n	800f210 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800f1c4:	697b      	ldr	r3, [r7, #20]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d011      	beq.n	800f1ee <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800f1ca:	6839      	ldr	r1, [r7, #0]
 800f1cc:	69b8      	ldr	r0, [r7, #24]
 800f1ce:	f001 f9fe 	bl	80105ce <xQueueTakeMutexRecursive>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	2b01      	cmp	r3, #1
 800f1d6:	d01b      	beq.n	800f210 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d003      	beq.n	800f1e6 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800f1de:	f06f 0301 	mvn.w	r3, #1
 800f1e2:	61fb      	str	r3, [r7, #28]
 800f1e4:	e014      	b.n	800f210 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800f1e6:	f06f 0302 	mvn.w	r3, #2
 800f1ea:	61fb      	str	r3, [r7, #28]
 800f1ec:	e010      	b.n	800f210 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800f1ee:	6839      	ldr	r1, [r7, #0]
 800f1f0:	69b8      	ldr	r0, [r7, #24]
 800f1f2:	f001 fd7b 	bl	8010cec <xQueueSemaphoreTake>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	2b01      	cmp	r3, #1
 800f1fa:	d009      	beq.n	800f210 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d003      	beq.n	800f20a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800f202:	f06f 0301 	mvn.w	r3, #1
 800f206:	61fb      	str	r3, [r7, #28]
 800f208:	e002      	b.n	800f210 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800f20a:	f06f 0302 	mvn.w	r3, #2
 800f20e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f210:	69fb      	ldr	r3, [r7, #28]
}
 800f212:	4618      	mov	r0, r3
 800f214:	3720      	adds	r7, #32
 800f216:	46bd      	mov	sp, r7
 800f218:	bd80      	pop	{r7, pc}
 800f21a:	bf00      	nop
 800f21c:	2000147c 	.word	0x2000147c

0800f220 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800f220:	b580      	push	{r7, lr}
 800f222:	b088      	sub	sp, #32
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f023 0301 	bic.w	r3, r3, #1
 800f22e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f003 0301 	and.w	r3, r3, #1
 800f236:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800f238:	2300      	movs	r3, #0
 800f23a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f23c:	f3ef 8305 	mrs	r3, IPSR
 800f240:	613b      	str	r3, [r7, #16]
  return(result);
 800f242:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800f244:	2b00      	cmp	r3, #0
 800f246:	d10f      	bne.n	800f268 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f248:	f3ef 8310 	mrs	r3, PRIMASK
 800f24c:	60fb      	str	r3, [r7, #12]
  return(result);
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d105      	bne.n	800f260 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f254:	f3ef 8311 	mrs	r3, BASEPRI
 800f258:	60bb      	str	r3, [r7, #8]
  return(result);
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d007      	beq.n	800f270 <osMutexRelease+0x50>
 800f260:	4b16      	ldr	r3, [pc, #88]	; (800f2bc <osMutexRelease+0x9c>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	2b02      	cmp	r3, #2
 800f266:	d103      	bne.n	800f270 <osMutexRelease+0x50>
    stat = osErrorISR;
 800f268:	f06f 0305 	mvn.w	r3, #5
 800f26c:	61fb      	str	r3, [r7, #28]
 800f26e:	e01f      	b.n	800f2b0 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800f270:	69bb      	ldr	r3, [r7, #24]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d103      	bne.n	800f27e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800f276:	f06f 0303 	mvn.w	r3, #3
 800f27a:	61fb      	str	r3, [r7, #28]
 800f27c:	e018      	b.n	800f2b0 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d009      	beq.n	800f298 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800f284:	69b8      	ldr	r0, [r7, #24]
 800f286:	f001 f96f 	bl	8010568 <xQueueGiveMutexRecursive>
 800f28a:	4603      	mov	r3, r0
 800f28c:	2b01      	cmp	r3, #1
 800f28e:	d00f      	beq.n	800f2b0 <osMutexRelease+0x90>
        stat = osErrorResource;
 800f290:	f06f 0302 	mvn.w	r3, #2
 800f294:	61fb      	str	r3, [r7, #28]
 800f296:	e00b      	b.n	800f2b0 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800f298:	2300      	movs	r3, #0
 800f29a:	2200      	movs	r2, #0
 800f29c:	2100      	movs	r1, #0
 800f29e:	69b8      	ldr	r0, [r7, #24]
 800f2a0:	f001 fa30 	bl	8010704 <xQueueGenericSend>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	2b01      	cmp	r3, #1
 800f2a8:	d002      	beq.n	800f2b0 <osMutexRelease+0x90>
        stat = osErrorResource;
 800f2aa:	f06f 0302 	mvn.w	r3, #2
 800f2ae:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800f2b0:	69fb      	ldr	r3, [r7, #28]
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3720      	adds	r7, #32
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
 800f2ba:	bf00      	nop
 800f2bc:	2000147c 	.word	0x2000147c

0800f2c0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b08c      	sub	sp, #48	; 0x30
 800f2c4:	af02      	add	r7, sp, #8
 800f2c6:	60f8      	str	r0, [r7, #12]
 800f2c8:	60b9      	str	r1, [r7, #8]
 800f2ca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f2d0:	f3ef 8305 	mrs	r3, IPSR
 800f2d4:	61bb      	str	r3, [r7, #24]
  return(result);
 800f2d6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	f040 8087 	bne.w	800f3ec <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f2de:	f3ef 8310 	mrs	r3, PRIMASK
 800f2e2:	617b      	str	r3, [r7, #20]
  return(result);
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d105      	bne.n	800f2f6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f2ea:	f3ef 8311 	mrs	r3, BASEPRI
 800f2ee:	613b      	str	r3, [r7, #16]
  return(result);
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d003      	beq.n	800f2fe <osSemaphoreNew+0x3e>
 800f2f6:	4b40      	ldr	r3, [pc, #256]	; (800f3f8 <osSemaphoreNew+0x138>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	2b02      	cmp	r3, #2
 800f2fc:	d076      	beq.n	800f3ec <osSemaphoreNew+0x12c>
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d073      	beq.n	800f3ec <osSemaphoreNew+0x12c>
 800f304:	68ba      	ldr	r2, [r7, #8]
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	429a      	cmp	r2, r3
 800f30a:	d86f      	bhi.n	800f3ec <osSemaphoreNew+0x12c>
    mem = -1;
 800f30c:	f04f 33ff 	mov.w	r3, #4294967295
 800f310:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d015      	beq.n	800f344 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	689b      	ldr	r3, [r3, #8]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d006      	beq.n	800f32e <osSemaphoreNew+0x6e>
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	68db      	ldr	r3, [r3, #12]
 800f324:	2b4f      	cmp	r3, #79	; 0x4f
 800f326:	d902      	bls.n	800f32e <osSemaphoreNew+0x6e>
        mem = 1;
 800f328:	2301      	movs	r3, #1
 800f32a:	623b      	str	r3, [r7, #32]
 800f32c:	e00c      	b.n	800f348 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	689b      	ldr	r3, [r3, #8]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d108      	bne.n	800f348 <osSemaphoreNew+0x88>
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	68db      	ldr	r3, [r3, #12]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d104      	bne.n	800f348 <osSemaphoreNew+0x88>
          mem = 0;
 800f33e:	2300      	movs	r3, #0
 800f340:	623b      	str	r3, [r7, #32]
 800f342:	e001      	b.n	800f348 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800f344:	2300      	movs	r3, #0
 800f346:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800f348:	6a3b      	ldr	r3, [r7, #32]
 800f34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f34e:	d04d      	beq.n	800f3ec <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	2b01      	cmp	r3, #1
 800f354:	d129      	bne.n	800f3aa <osSemaphoreNew+0xea>
        if (mem == 1) {
 800f356:	6a3b      	ldr	r3, [r7, #32]
 800f358:	2b01      	cmp	r3, #1
 800f35a:	d10b      	bne.n	800f374 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	689a      	ldr	r2, [r3, #8]
 800f360:	2303      	movs	r3, #3
 800f362:	9300      	str	r3, [sp, #0]
 800f364:	4613      	mov	r3, r2
 800f366:	2200      	movs	r2, #0
 800f368:	2100      	movs	r1, #0
 800f36a:	2001      	movs	r0, #1
 800f36c:	f000 ffda 	bl	8010324 <xQueueGenericCreateStatic>
 800f370:	6278      	str	r0, [r7, #36]	; 0x24
 800f372:	e005      	b.n	800f380 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800f374:	2203      	movs	r2, #3
 800f376:	2100      	movs	r1, #0
 800f378:	2001      	movs	r0, #1
 800f37a:	f001 f846 	bl	801040a <xQueueGenericCreate>
 800f37e:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f382:	2b00      	cmp	r3, #0
 800f384:	d022      	beq.n	800f3cc <osSemaphoreNew+0x10c>
 800f386:	68bb      	ldr	r3, [r7, #8]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d01f      	beq.n	800f3cc <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f38c:	2300      	movs	r3, #0
 800f38e:	2200      	movs	r2, #0
 800f390:	2100      	movs	r1, #0
 800f392:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f394:	f001 f9b6 	bl	8010704 <xQueueGenericSend>
 800f398:	4603      	mov	r3, r0
 800f39a:	2b01      	cmp	r3, #1
 800f39c:	d016      	beq.n	800f3cc <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800f39e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f3a0:	f001 fe29 	bl	8010ff6 <vQueueDelete>
            hSemaphore = NULL;
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	627b      	str	r3, [r7, #36]	; 0x24
 800f3a8:	e010      	b.n	800f3cc <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800f3aa:	6a3b      	ldr	r3, [r7, #32]
 800f3ac:	2b01      	cmp	r3, #1
 800f3ae:	d108      	bne.n	800f3c2 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	689b      	ldr	r3, [r3, #8]
 800f3b4:	461a      	mov	r2, r3
 800f3b6:	68b9      	ldr	r1, [r7, #8]
 800f3b8:	68f8      	ldr	r0, [r7, #12]
 800f3ba:	f001 f93d 	bl	8010638 <xQueueCreateCountingSemaphoreStatic>
 800f3be:	6278      	str	r0, [r7, #36]	; 0x24
 800f3c0:	e004      	b.n	800f3cc <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f3c2:	68b9      	ldr	r1, [r7, #8]
 800f3c4:	68f8      	ldr	r0, [r7, #12]
 800f3c6:	f001 f96c 	bl	80106a2 <xQueueCreateCountingSemaphore>
 800f3ca:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d00c      	beq.n	800f3ec <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d003      	beq.n	800f3e0 <osSemaphoreNew+0x120>
          name = attr->name;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	61fb      	str	r3, [r7, #28]
 800f3de:	e001      	b.n	800f3e4 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f3e4:	69f9      	ldr	r1, [r7, #28]
 800f3e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f3e8:	f001 ff50 	bl	801128c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	3728      	adds	r7, #40	; 0x28
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}
 800f3f6:	bf00      	nop
 800f3f8:	2000147c 	.word	0x2000147c

0800f3fc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b088      	sub	sp, #32
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
 800f404:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f40a:	2300      	movs	r3, #0
 800f40c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800f40e:	69bb      	ldr	r3, [r7, #24]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d103      	bne.n	800f41c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f414:	f06f 0303 	mvn.w	r3, #3
 800f418:	61fb      	str	r3, [r7, #28]
 800f41a:	e04b      	b.n	800f4b4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f41c:	f3ef 8305 	mrs	r3, IPSR
 800f420:	617b      	str	r3, [r7, #20]
  return(result);
 800f422:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f424:	2b00      	cmp	r3, #0
 800f426:	d10f      	bne.n	800f448 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f428:	f3ef 8310 	mrs	r3, PRIMASK
 800f42c:	613b      	str	r3, [r7, #16]
  return(result);
 800f42e:	693b      	ldr	r3, [r7, #16]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d105      	bne.n	800f440 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f434:	f3ef 8311 	mrs	r3, BASEPRI
 800f438:	60fb      	str	r3, [r7, #12]
  return(result);
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d026      	beq.n	800f48e <osSemaphoreAcquire+0x92>
 800f440:	4b1f      	ldr	r3, [pc, #124]	; (800f4c0 <osSemaphoreAcquire+0xc4>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	2b02      	cmp	r3, #2
 800f446:	d122      	bne.n	800f48e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d003      	beq.n	800f456 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800f44e:	f06f 0303 	mvn.w	r3, #3
 800f452:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800f454:	e02d      	b.n	800f4b2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800f456:	2300      	movs	r3, #0
 800f458:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f45a:	f107 0308 	add.w	r3, r7, #8
 800f45e:	461a      	mov	r2, r3
 800f460:	2100      	movs	r1, #0
 800f462:	69b8      	ldr	r0, [r7, #24]
 800f464:	f001 fd4a 	bl	8010efc <xQueueReceiveFromISR>
 800f468:	4603      	mov	r3, r0
 800f46a:	2b01      	cmp	r3, #1
 800f46c:	d003      	beq.n	800f476 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800f46e:	f06f 0302 	mvn.w	r3, #2
 800f472:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800f474:	e01d      	b.n	800f4b2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800f476:	68bb      	ldr	r3, [r7, #8]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d01a      	beq.n	800f4b2 <osSemaphoreAcquire+0xb6>
 800f47c:	4b11      	ldr	r3, [pc, #68]	; (800f4c4 <osSemaphoreAcquire+0xc8>)
 800f47e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f482:	601a      	str	r2, [r3, #0]
 800f484:	f3bf 8f4f 	dsb	sy
 800f488:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800f48c:	e011      	b.n	800f4b2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f48e:	6839      	ldr	r1, [r7, #0]
 800f490:	69b8      	ldr	r0, [r7, #24]
 800f492:	f001 fc2b 	bl	8010cec <xQueueSemaphoreTake>
 800f496:	4603      	mov	r3, r0
 800f498:	2b01      	cmp	r3, #1
 800f49a:	d00b      	beq.n	800f4b4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d003      	beq.n	800f4aa <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800f4a2:	f06f 0301 	mvn.w	r3, #1
 800f4a6:	61fb      	str	r3, [r7, #28]
 800f4a8:	e004      	b.n	800f4b4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800f4aa:	f06f 0302 	mvn.w	r3, #2
 800f4ae:	61fb      	str	r3, [r7, #28]
 800f4b0:	e000      	b.n	800f4b4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800f4b2:	bf00      	nop
      }
    }
  }

  return (stat);
 800f4b4:	69fb      	ldr	r3, [r7, #28]
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3720      	adds	r7, #32
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}
 800f4be:	bf00      	nop
 800f4c0:	2000147c 	.word	0x2000147c
 800f4c4:	e000ed04 	.word	0xe000ed04

0800f4c8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b088      	sub	sp, #32
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800f4d8:	69bb      	ldr	r3, [r7, #24]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d103      	bne.n	800f4e6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f4de:	f06f 0303 	mvn.w	r3, #3
 800f4e2:	61fb      	str	r3, [r7, #28]
 800f4e4:	e03e      	b.n	800f564 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f4e6:	f3ef 8305 	mrs	r3, IPSR
 800f4ea:	617b      	str	r3, [r7, #20]
  return(result);
 800f4ec:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d10f      	bne.n	800f512 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f4f2:	f3ef 8310 	mrs	r3, PRIMASK
 800f4f6:	613b      	str	r3, [r7, #16]
  return(result);
 800f4f8:	693b      	ldr	r3, [r7, #16]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d105      	bne.n	800f50a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f4fe:	f3ef 8311 	mrs	r3, BASEPRI
 800f502:	60fb      	str	r3, [r7, #12]
  return(result);
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d01e      	beq.n	800f548 <osSemaphoreRelease+0x80>
 800f50a:	4b19      	ldr	r3, [pc, #100]	; (800f570 <osSemaphoreRelease+0xa8>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	2b02      	cmp	r3, #2
 800f510:	d11a      	bne.n	800f548 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800f512:	2300      	movs	r3, #0
 800f514:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f516:	f107 0308 	add.w	r3, r7, #8
 800f51a:	4619      	mov	r1, r3
 800f51c:	69b8      	ldr	r0, [r7, #24]
 800f51e:	f001 fa7f 	bl	8010a20 <xQueueGiveFromISR>
 800f522:	4603      	mov	r3, r0
 800f524:	2b01      	cmp	r3, #1
 800f526:	d003      	beq.n	800f530 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800f528:	f06f 0302 	mvn.w	r3, #2
 800f52c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f52e:	e018      	b.n	800f562 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d015      	beq.n	800f562 <osSemaphoreRelease+0x9a>
 800f536:	4b0f      	ldr	r3, [pc, #60]	; (800f574 <osSemaphoreRelease+0xac>)
 800f538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f53c:	601a      	str	r2, [r3, #0]
 800f53e:	f3bf 8f4f 	dsb	sy
 800f542:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f546:	e00c      	b.n	800f562 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f548:	2300      	movs	r3, #0
 800f54a:	2200      	movs	r2, #0
 800f54c:	2100      	movs	r1, #0
 800f54e:	69b8      	ldr	r0, [r7, #24]
 800f550:	f001 f8d8 	bl	8010704 <xQueueGenericSend>
 800f554:	4603      	mov	r3, r0
 800f556:	2b01      	cmp	r3, #1
 800f558:	d004      	beq.n	800f564 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800f55a:	f06f 0302 	mvn.w	r3, #2
 800f55e:	61fb      	str	r3, [r7, #28]
 800f560:	e000      	b.n	800f564 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f562:	bf00      	nop
    }
  }

  return (stat);
 800f564:	69fb      	ldr	r3, [r7, #28]
}
 800f566:	4618      	mov	r0, r3
 800f568:	3720      	adds	r7, #32
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd80      	pop	{r7, pc}
 800f56e:	bf00      	nop
 800f570:	2000147c 	.word	0x2000147c
 800f574:	e000ed04 	.word	0xe000ed04

0800f578 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f578:	b580      	push	{r7, lr}
 800f57a:	b08c      	sub	sp, #48	; 0x30
 800f57c:	af02      	add	r7, sp, #8
 800f57e:	60f8      	str	r0, [r7, #12]
 800f580:	60b9      	str	r1, [r7, #8]
 800f582:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f584:	2300      	movs	r3, #0
 800f586:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f588:	f3ef 8305 	mrs	r3, IPSR
 800f58c:	61bb      	str	r3, [r7, #24]
  return(result);
 800f58e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f590:	2b00      	cmp	r3, #0
 800f592:	d170      	bne.n	800f676 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f594:	f3ef 8310 	mrs	r3, PRIMASK
 800f598:	617b      	str	r3, [r7, #20]
  return(result);
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d105      	bne.n	800f5ac <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f5a0:	f3ef 8311 	mrs	r3, BASEPRI
 800f5a4:	613b      	str	r3, [r7, #16]
  return(result);
 800f5a6:	693b      	ldr	r3, [r7, #16]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d003      	beq.n	800f5b4 <osMessageQueueNew+0x3c>
 800f5ac:	4b34      	ldr	r3, [pc, #208]	; (800f680 <osMessageQueueNew+0x108>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	2b02      	cmp	r3, #2
 800f5b2:	d060      	beq.n	800f676 <osMessageQueueNew+0xfe>
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d05d      	beq.n	800f676 <osMessageQueueNew+0xfe>
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d05a      	beq.n	800f676 <osMessageQueueNew+0xfe>
    mem = -1;
 800f5c0:	f04f 33ff 	mov.w	r3, #4294967295
 800f5c4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d029      	beq.n	800f620 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	689b      	ldr	r3, [r3, #8]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d012      	beq.n	800f5fa <osMessageQueueNew+0x82>
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	68db      	ldr	r3, [r3, #12]
 800f5d8:	2b4f      	cmp	r3, #79	; 0x4f
 800f5da:	d90e      	bls.n	800f5fa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d00a      	beq.n	800f5fa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	695a      	ldr	r2, [r3, #20]
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	68b9      	ldr	r1, [r7, #8]
 800f5ec:	fb01 f303 	mul.w	r3, r1, r3
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	d302      	bcc.n	800f5fa <osMessageQueueNew+0x82>
        mem = 1;
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	623b      	str	r3, [r7, #32]
 800f5f8:	e014      	b.n	800f624 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	689b      	ldr	r3, [r3, #8]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d110      	bne.n	800f624 <osMessageQueueNew+0xac>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	68db      	ldr	r3, [r3, #12]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d10c      	bne.n	800f624 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d108      	bne.n	800f624 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	695b      	ldr	r3, [r3, #20]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d104      	bne.n	800f624 <osMessageQueueNew+0xac>
          mem = 0;
 800f61a:	2300      	movs	r3, #0
 800f61c:	623b      	str	r3, [r7, #32]
 800f61e:	e001      	b.n	800f624 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800f620:	2300      	movs	r3, #0
 800f622:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800f624:	6a3b      	ldr	r3, [r7, #32]
 800f626:	2b01      	cmp	r3, #1
 800f628:	d10c      	bne.n	800f644 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	691a      	ldr	r2, [r3, #16]
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6899      	ldr	r1, [r3, #8]
 800f632:	2300      	movs	r3, #0
 800f634:	9300      	str	r3, [sp, #0]
 800f636:	460b      	mov	r3, r1
 800f638:	68b9      	ldr	r1, [r7, #8]
 800f63a:	68f8      	ldr	r0, [r7, #12]
 800f63c:	f000 fe72 	bl	8010324 <xQueueGenericCreateStatic>
 800f640:	6278      	str	r0, [r7, #36]	; 0x24
 800f642:	e008      	b.n	800f656 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800f644:	6a3b      	ldr	r3, [r7, #32]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d105      	bne.n	800f656 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800f64a:	2200      	movs	r2, #0
 800f64c:	68b9      	ldr	r1, [r7, #8]
 800f64e:	68f8      	ldr	r0, [r7, #12]
 800f650:	f000 fedb 	bl	801040a <xQueueGenericCreate>
 800f654:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d00c      	beq.n	800f676 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d003      	beq.n	800f66a <osMessageQueueNew+0xf2>
        name = attr->name;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	61fb      	str	r3, [r7, #28]
 800f668:	e001      	b.n	800f66e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800f66a:	2300      	movs	r3, #0
 800f66c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800f66e:	69f9      	ldr	r1, [r7, #28]
 800f670:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f672:	f001 fe0b 	bl	801128c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f678:	4618      	mov	r0, r3
 800f67a:	3728      	adds	r7, #40	; 0x28
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd80      	pop	{r7, pc}
 800f680:	2000147c 	.word	0x2000147c

0800f684 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f684:	b580      	push	{r7, lr}
 800f686:	b08a      	sub	sp, #40	; 0x28
 800f688:	af00      	add	r7, sp, #0
 800f68a:	60f8      	str	r0, [r7, #12]
 800f68c:	60b9      	str	r1, [r7, #8]
 800f68e:	603b      	str	r3, [r7, #0]
 800f690:	4613      	mov	r3, r2
 800f692:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f698:	2300      	movs	r3, #0
 800f69a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f69c:	f3ef 8305 	mrs	r3, IPSR
 800f6a0:	61fb      	str	r3, [r7, #28]
  return(result);
 800f6a2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d10f      	bne.n	800f6c8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f6a8:	f3ef 8310 	mrs	r3, PRIMASK
 800f6ac:	61bb      	str	r3, [r7, #24]
  return(result);
 800f6ae:	69bb      	ldr	r3, [r7, #24]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d105      	bne.n	800f6c0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f6b4:	f3ef 8311 	mrs	r3, BASEPRI
 800f6b8:	617b      	str	r3, [r7, #20]
  return(result);
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d02c      	beq.n	800f71a <osMessageQueuePut+0x96>
 800f6c0:	4b28      	ldr	r3, [pc, #160]	; (800f764 <osMessageQueuePut+0xe0>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	2b02      	cmp	r3, #2
 800f6c6:	d128      	bne.n	800f71a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f6c8:	6a3b      	ldr	r3, [r7, #32]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d005      	beq.n	800f6da <osMessageQueuePut+0x56>
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d002      	beq.n	800f6da <osMessageQueuePut+0x56>
 800f6d4:	683b      	ldr	r3, [r7, #0]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d003      	beq.n	800f6e2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800f6da:	f06f 0303 	mvn.w	r3, #3
 800f6de:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f6e0:	e039      	b.n	800f756 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f6e6:	f107 0210 	add.w	r2, r7, #16
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	68b9      	ldr	r1, [r7, #8]
 800f6ee:	6a38      	ldr	r0, [r7, #32]
 800f6f0:	f001 f902 	bl	80108f8 <xQueueGenericSendFromISR>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	2b01      	cmp	r3, #1
 800f6f8:	d003      	beq.n	800f702 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800f6fa:	f06f 0302 	mvn.w	r3, #2
 800f6fe:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f700:	e029      	b.n	800f756 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800f702:	693b      	ldr	r3, [r7, #16]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d026      	beq.n	800f756 <osMessageQueuePut+0xd2>
 800f708:	4b17      	ldr	r3, [pc, #92]	; (800f768 <osMessageQueuePut+0xe4>)
 800f70a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f70e:	601a      	str	r2, [r3, #0]
 800f710:	f3bf 8f4f 	dsb	sy
 800f714:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f718:	e01d      	b.n	800f756 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f71a:	6a3b      	ldr	r3, [r7, #32]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d002      	beq.n	800f726 <osMessageQueuePut+0xa2>
 800f720:	68bb      	ldr	r3, [r7, #8]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d103      	bne.n	800f72e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800f726:	f06f 0303 	mvn.w	r3, #3
 800f72a:	627b      	str	r3, [r7, #36]	; 0x24
 800f72c:	e014      	b.n	800f758 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f72e:	2300      	movs	r3, #0
 800f730:	683a      	ldr	r2, [r7, #0]
 800f732:	68b9      	ldr	r1, [r7, #8]
 800f734:	6a38      	ldr	r0, [r7, #32]
 800f736:	f000 ffe5 	bl	8010704 <xQueueGenericSend>
 800f73a:	4603      	mov	r3, r0
 800f73c:	2b01      	cmp	r3, #1
 800f73e:	d00b      	beq.n	800f758 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800f740:	683b      	ldr	r3, [r7, #0]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d003      	beq.n	800f74e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800f746:	f06f 0301 	mvn.w	r3, #1
 800f74a:	627b      	str	r3, [r7, #36]	; 0x24
 800f74c:	e004      	b.n	800f758 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800f74e:	f06f 0302 	mvn.w	r3, #2
 800f752:	627b      	str	r3, [r7, #36]	; 0x24
 800f754:	e000      	b.n	800f758 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f756:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800f758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f75a:	4618      	mov	r0, r3
 800f75c:	3728      	adds	r7, #40	; 0x28
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd80      	pop	{r7, pc}
 800f762:	bf00      	nop
 800f764:	2000147c 	.word	0x2000147c
 800f768:	e000ed04 	.word	0xe000ed04

0800f76c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b08a      	sub	sp, #40	; 0x28
 800f770:	af00      	add	r7, sp, #0
 800f772:	60f8      	str	r0, [r7, #12]
 800f774:	60b9      	str	r1, [r7, #8]
 800f776:	607a      	str	r2, [r7, #4]
 800f778:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f77e:	2300      	movs	r3, #0
 800f780:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f782:	f3ef 8305 	mrs	r3, IPSR
 800f786:	61fb      	str	r3, [r7, #28]
  return(result);
 800f788:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d10f      	bne.n	800f7ae <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f78e:	f3ef 8310 	mrs	r3, PRIMASK
 800f792:	61bb      	str	r3, [r7, #24]
  return(result);
 800f794:	69bb      	ldr	r3, [r7, #24]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d105      	bne.n	800f7a6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f79a:	f3ef 8311 	mrs	r3, BASEPRI
 800f79e:	617b      	str	r3, [r7, #20]
  return(result);
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d02c      	beq.n	800f800 <osMessageQueueGet+0x94>
 800f7a6:	4b28      	ldr	r3, [pc, #160]	; (800f848 <osMessageQueueGet+0xdc>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	2b02      	cmp	r3, #2
 800f7ac:	d128      	bne.n	800f800 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f7ae:	6a3b      	ldr	r3, [r7, #32]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d005      	beq.n	800f7c0 <osMessageQueueGet+0x54>
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d002      	beq.n	800f7c0 <osMessageQueueGet+0x54>
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d003      	beq.n	800f7c8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800f7c0:	f06f 0303 	mvn.w	r3, #3
 800f7c4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f7c6:	e038      	b.n	800f83a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f7cc:	f107 0310 	add.w	r3, r7, #16
 800f7d0:	461a      	mov	r2, r3
 800f7d2:	68b9      	ldr	r1, [r7, #8]
 800f7d4:	6a38      	ldr	r0, [r7, #32]
 800f7d6:	f001 fb91 	bl	8010efc <xQueueReceiveFromISR>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	2b01      	cmp	r3, #1
 800f7de:	d003      	beq.n	800f7e8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800f7e0:	f06f 0302 	mvn.w	r3, #2
 800f7e4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f7e6:	e028      	b.n	800f83a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d025      	beq.n	800f83a <osMessageQueueGet+0xce>
 800f7ee:	4b17      	ldr	r3, [pc, #92]	; (800f84c <osMessageQueueGet+0xe0>)
 800f7f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7f4:	601a      	str	r2, [r3, #0]
 800f7f6:	f3bf 8f4f 	dsb	sy
 800f7fa:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f7fe:	e01c      	b.n	800f83a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f800:	6a3b      	ldr	r3, [r7, #32]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d002      	beq.n	800f80c <osMessageQueueGet+0xa0>
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d103      	bne.n	800f814 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800f80c:	f06f 0303 	mvn.w	r3, #3
 800f810:	627b      	str	r3, [r7, #36]	; 0x24
 800f812:	e013      	b.n	800f83c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f814:	683a      	ldr	r2, [r7, #0]
 800f816:	68b9      	ldr	r1, [r7, #8]
 800f818:	6a38      	ldr	r0, [r7, #32]
 800f81a:	f001 f98b 	bl	8010b34 <xQueueReceive>
 800f81e:	4603      	mov	r3, r0
 800f820:	2b01      	cmp	r3, #1
 800f822:	d00b      	beq.n	800f83c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d003      	beq.n	800f832 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800f82a:	f06f 0301 	mvn.w	r3, #1
 800f82e:	627b      	str	r3, [r7, #36]	; 0x24
 800f830:	e004      	b.n	800f83c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800f832:	f06f 0302 	mvn.w	r3, #2
 800f836:	627b      	str	r3, [r7, #36]	; 0x24
 800f838:	e000      	b.n	800f83c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f83a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800f83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f83e:	4618      	mov	r0, r3
 800f840:	3728      	adds	r7, #40	; 0x28
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}
 800f846:	bf00      	nop
 800f848:	2000147c 	.word	0x2000147c
 800f84c:	e000ed04 	.word	0xe000ed04

0800f850 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f850:	b480      	push	{r7}
 800f852:	b085      	sub	sp, #20
 800f854:	af00      	add	r7, sp, #0
 800f856:	60f8      	str	r0, [r7, #12]
 800f858:	60b9      	str	r1, [r7, #8]
 800f85a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	4a07      	ldr	r2, [pc, #28]	; (800f87c <vApplicationGetIdleTaskMemory+0x2c>)
 800f860:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	4a06      	ldr	r2, [pc, #24]	; (800f880 <vApplicationGetIdleTaskMemory+0x30>)
 800f866:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2280      	movs	r2, #128	; 0x80
 800f86c:	601a      	str	r2, [r3, #0]
}
 800f86e:	bf00      	nop
 800f870:	3714      	adds	r7, #20
 800f872:	46bd      	mov	sp, r7
 800f874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f878:	4770      	bx	lr
 800f87a:	bf00      	nop
 800f87c:	20001480 	.word	0x20001480
 800f880:	200014dc 	.word	0x200014dc

0800f884 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f884:	b480      	push	{r7}
 800f886:	b085      	sub	sp, #20
 800f888:	af00      	add	r7, sp, #0
 800f88a:	60f8      	str	r0, [r7, #12]
 800f88c:	60b9      	str	r1, [r7, #8]
 800f88e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	4a07      	ldr	r2, [pc, #28]	; (800f8b0 <vApplicationGetTimerTaskMemory+0x2c>)
 800f894:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f896:	68bb      	ldr	r3, [r7, #8]
 800f898:	4a06      	ldr	r2, [pc, #24]	; (800f8b4 <vApplicationGetTimerTaskMemory+0x30>)
 800f89a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f8a2:	601a      	str	r2, [r3, #0]
}
 800f8a4:	bf00      	nop
 800f8a6:	3714      	adds	r7, #20
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ae:	4770      	bx	lr
 800f8b0:	200016dc 	.word	0x200016dc
 800f8b4:	20001738 	.word	0x20001738

0800f8b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f8b8:	b480      	push	{r7}
 800f8ba:	b085      	sub	sp, #20
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	60f8      	str	r0, [r7, #12]
 800f8c0:	60b9      	str	r1, [r7, #8]
 800f8c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	3b04      	subs	r3, #4
 800f8c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f8d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	3b04      	subs	r3, #4
 800f8d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f8d8:	68bb      	ldr	r3, [r7, #8]
 800f8da:	f023 0201 	bic.w	r2, r3, #1
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	3b04      	subs	r3, #4
 800f8e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f8e8:	4a0c      	ldr	r2, [pc, #48]	; (800f91c <pxPortInitialiseStack+0x64>)
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	3b14      	subs	r3, #20
 800f8f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f8f4:	687a      	ldr	r2, [r7, #4]
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	3b04      	subs	r3, #4
 800f8fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	f06f 0202 	mvn.w	r2, #2
 800f906:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	3b20      	subs	r3, #32
 800f90c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f90e:	68fb      	ldr	r3, [r7, #12]
}
 800f910:	4618      	mov	r0, r3
 800f912:	3714      	adds	r7, #20
 800f914:	46bd      	mov	sp, r7
 800f916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91a:	4770      	bx	lr
 800f91c:	0800f921 	.word	0x0800f921

0800f920 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f920:	b480      	push	{r7}
 800f922:	b085      	sub	sp, #20
 800f924:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f926:	2300      	movs	r3, #0
 800f928:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f92a:	4b11      	ldr	r3, [pc, #68]	; (800f970 <prvTaskExitError+0x50>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f932:	d009      	beq.n	800f948 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f938:	f383 8811 	msr	BASEPRI, r3
 800f93c:	f3bf 8f6f 	isb	sy
 800f940:	f3bf 8f4f 	dsb	sy
 800f944:	60fb      	str	r3, [r7, #12]
 800f946:	e7fe      	b.n	800f946 <prvTaskExitError+0x26>
 800f948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f94c:	f383 8811 	msr	BASEPRI, r3
 800f950:	f3bf 8f6f 	isb	sy
 800f954:	f3bf 8f4f 	dsb	sy
 800f958:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f95a:	bf00      	nop
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d0fc      	beq.n	800f95c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f962:	bf00      	nop
 800f964:	3714      	adds	r7, #20
 800f966:	46bd      	mov	sp, r7
 800f968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96c:	4770      	bx	lr
 800f96e:	bf00      	nop
 800f970:	20000020 	.word	0x20000020
	...

0800f980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f980:	4b07      	ldr	r3, [pc, #28]	; (800f9a0 <pxCurrentTCBConst2>)
 800f982:	6819      	ldr	r1, [r3, #0]
 800f984:	6808      	ldr	r0, [r1, #0]
 800f986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f98a:	f380 8809 	msr	PSP, r0
 800f98e:	f3bf 8f6f 	isb	sy
 800f992:	f04f 0000 	mov.w	r0, #0
 800f996:	f380 8811 	msr	BASEPRI, r0
 800f99a:	4770      	bx	lr
 800f99c:	f3af 8000 	nop.w

0800f9a0 <pxCurrentTCBConst2>:
 800f9a0:	200055f0 	.word	0x200055f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f9a4:	bf00      	nop
 800f9a6:	bf00      	nop

0800f9a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f9a8:	4808      	ldr	r0, [pc, #32]	; (800f9cc <prvPortStartFirstTask+0x24>)
 800f9aa:	6800      	ldr	r0, [r0, #0]
 800f9ac:	6800      	ldr	r0, [r0, #0]
 800f9ae:	f380 8808 	msr	MSP, r0
 800f9b2:	f04f 0000 	mov.w	r0, #0
 800f9b6:	f380 8814 	msr	CONTROL, r0
 800f9ba:	b662      	cpsie	i
 800f9bc:	b661      	cpsie	f
 800f9be:	f3bf 8f4f 	dsb	sy
 800f9c2:	f3bf 8f6f 	isb	sy
 800f9c6:	df00      	svc	0
 800f9c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f9ca:	bf00      	nop
 800f9cc:	e000ed08 	.word	0xe000ed08

0800f9d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b086      	sub	sp, #24
 800f9d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f9d6:	4b44      	ldr	r3, [pc, #272]	; (800fae8 <xPortStartScheduler+0x118>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	4a44      	ldr	r2, [pc, #272]	; (800faec <xPortStartScheduler+0x11c>)
 800f9dc:	4293      	cmp	r3, r2
 800f9de:	d109      	bne.n	800f9f4 <xPortStartScheduler+0x24>
 800f9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9e4:	f383 8811 	msr	BASEPRI, r3
 800f9e8:	f3bf 8f6f 	isb	sy
 800f9ec:	f3bf 8f4f 	dsb	sy
 800f9f0:	613b      	str	r3, [r7, #16]
 800f9f2:	e7fe      	b.n	800f9f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f9f4:	4b3c      	ldr	r3, [pc, #240]	; (800fae8 <xPortStartScheduler+0x118>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	4a3d      	ldr	r2, [pc, #244]	; (800faf0 <xPortStartScheduler+0x120>)
 800f9fa:	4293      	cmp	r3, r2
 800f9fc:	d109      	bne.n	800fa12 <xPortStartScheduler+0x42>
 800f9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa02:	f383 8811 	msr	BASEPRI, r3
 800fa06:	f3bf 8f6f 	isb	sy
 800fa0a:	f3bf 8f4f 	dsb	sy
 800fa0e:	60fb      	str	r3, [r7, #12]
 800fa10:	e7fe      	b.n	800fa10 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fa12:	4b38      	ldr	r3, [pc, #224]	; (800faf4 <xPortStartScheduler+0x124>)
 800fa14:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	781b      	ldrb	r3, [r3, #0]
 800fa1a:	b2db      	uxtb	r3, r3
 800fa1c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	22ff      	movs	r2, #255	; 0xff
 800fa22:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	781b      	ldrb	r3, [r3, #0]
 800fa28:	b2db      	uxtb	r3, r3
 800fa2a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fa2c:	78fb      	ldrb	r3, [r7, #3]
 800fa2e:	b2db      	uxtb	r3, r3
 800fa30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fa34:	b2da      	uxtb	r2, r3
 800fa36:	4b30      	ldr	r3, [pc, #192]	; (800faf8 <xPortStartScheduler+0x128>)
 800fa38:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fa3a:	4b30      	ldr	r3, [pc, #192]	; (800fafc <xPortStartScheduler+0x12c>)
 800fa3c:	2207      	movs	r2, #7
 800fa3e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fa40:	e009      	b.n	800fa56 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800fa42:	4b2e      	ldr	r3, [pc, #184]	; (800fafc <xPortStartScheduler+0x12c>)
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	3b01      	subs	r3, #1
 800fa48:	4a2c      	ldr	r2, [pc, #176]	; (800fafc <xPortStartScheduler+0x12c>)
 800fa4a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fa4c:	78fb      	ldrb	r3, [r7, #3]
 800fa4e:	b2db      	uxtb	r3, r3
 800fa50:	005b      	lsls	r3, r3, #1
 800fa52:	b2db      	uxtb	r3, r3
 800fa54:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fa56:	78fb      	ldrb	r3, [r7, #3]
 800fa58:	b2db      	uxtb	r3, r3
 800fa5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa5e:	2b80      	cmp	r3, #128	; 0x80
 800fa60:	d0ef      	beq.n	800fa42 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fa62:	4b26      	ldr	r3, [pc, #152]	; (800fafc <xPortStartScheduler+0x12c>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	f1c3 0307 	rsb	r3, r3, #7
 800fa6a:	2b04      	cmp	r3, #4
 800fa6c:	d009      	beq.n	800fa82 <xPortStartScheduler+0xb2>
 800fa6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa72:	f383 8811 	msr	BASEPRI, r3
 800fa76:	f3bf 8f6f 	isb	sy
 800fa7a:	f3bf 8f4f 	dsb	sy
 800fa7e:	60bb      	str	r3, [r7, #8]
 800fa80:	e7fe      	b.n	800fa80 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fa82:	4b1e      	ldr	r3, [pc, #120]	; (800fafc <xPortStartScheduler+0x12c>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	021b      	lsls	r3, r3, #8
 800fa88:	4a1c      	ldr	r2, [pc, #112]	; (800fafc <xPortStartScheduler+0x12c>)
 800fa8a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fa8c:	4b1b      	ldr	r3, [pc, #108]	; (800fafc <xPortStartScheduler+0x12c>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fa94:	4a19      	ldr	r2, [pc, #100]	; (800fafc <xPortStartScheduler+0x12c>)
 800fa96:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	b2da      	uxtb	r2, r3
 800fa9c:	697b      	ldr	r3, [r7, #20]
 800fa9e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800faa0:	4b17      	ldr	r3, [pc, #92]	; (800fb00 <xPortStartScheduler+0x130>)
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	4a16      	ldr	r2, [pc, #88]	; (800fb00 <xPortStartScheduler+0x130>)
 800faa6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800faaa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800faac:	4b14      	ldr	r3, [pc, #80]	; (800fb00 <xPortStartScheduler+0x130>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	4a13      	ldr	r2, [pc, #76]	; (800fb00 <xPortStartScheduler+0x130>)
 800fab2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fab6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fab8:	f000 f8d6 	bl	800fc68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fabc:	4b11      	ldr	r3, [pc, #68]	; (800fb04 <xPortStartScheduler+0x134>)
 800fabe:	2200      	movs	r2, #0
 800fac0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fac2:	f000 f8f5 	bl	800fcb0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fac6:	4b10      	ldr	r3, [pc, #64]	; (800fb08 <xPortStartScheduler+0x138>)
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	4a0f      	ldr	r2, [pc, #60]	; (800fb08 <xPortStartScheduler+0x138>)
 800facc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fad0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fad2:	f7ff ff69 	bl	800f9a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fad6:	f002 f83f 	bl	8011b58 <vTaskSwitchContext>
	prvTaskExitError();
 800fada:	f7ff ff21 	bl	800f920 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fade:	2300      	movs	r3, #0
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3718      	adds	r7, #24
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}
 800fae8:	e000ed00 	.word	0xe000ed00
 800faec:	410fc271 	.word	0x410fc271
 800faf0:	410fc270 	.word	0x410fc270
 800faf4:	e000e400 	.word	0xe000e400
 800faf8:	20001b38 	.word	0x20001b38
 800fafc:	20001b3c 	.word	0x20001b3c
 800fb00:	e000ed20 	.word	0xe000ed20
 800fb04:	20000020 	.word	0x20000020
 800fb08:	e000ef34 	.word	0xe000ef34

0800fb0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	b083      	sub	sp, #12
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb16:	f383 8811 	msr	BASEPRI, r3
 800fb1a:	f3bf 8f6f 	isb	sy
 800fb1e:	f3bf 8f4f 	dsb	sy
 800fb22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fb24:	4b0e      	ldr	r3, [pc, #56]	; (800fb60 <vPortEnterCritical+0x54>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	3301      	adds	r3, #1
 800fb2a:	4a0d      	ldr	r2, [pc, #52]	; (800fb60 <vPortEnterCritical+0x54>)
 800fb2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fb2e:	4b0c      	ldr	r3, [pc, #48]	; (800fb60 <vPortEnterCritical+0x54>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	2b01      	cmp	r3, #1
 800fb34:	d10e      	bne.n	800fb54 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fb36:	4b0b      	ldr	r3, [pc, #44]	; (800fb64 <vPortEnterCritical+0x58>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	b2db      	uxtb	r3, r3
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d009      	beq.n	800fb54 <vPortEnterCritical+0x48>
 800fb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb44:	f383 8811 	msr	BASEPRI, r3
 800fb48:	f3bf 8f6f 	isb	sy
 800fb4c:	f3bf 8f4f 	dsb	sy
 800fb50:	603b      	str	r3, [r7, #0]
 800fb52:	e7fe      	b.n	800fb52 <vPortEnterCritical+0x46>
	}
}
 800fb54:	bf00      	nop
 800fb56:	370c      	adds	r7, #12
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5e:	4770      	bx	lr
 800fb60:	20000020 	.word	0x20000020
 800fb64:	e000ed04 	.word	0xe000ed04

0800fb68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fb68:	b480      	push	{r7}
 800fb6a:	b083      	sub	sp, #12
 800fb6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fb6e:	4b11      	ldr	r3, [pc, #68]	; (800fbb4 <vPortExitCritical+0x4c>)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d109      	bne.n	800fb8a <vPortExitCritical+0x22>
 800fb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb7a:	f383 8811 	msr	BASEPRI, r3
 800fb7e:	f3bf 8f6f 	isb	sy
 800fb82:	f3bf 8f4f 	dsb	sy
 800fb86:	607b      	str	r3, [r7, #4]
 800fb88:	e7fe      	b.n	800fb88 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800fb8a:	4b0a      	ldr	r3, [pc, #40]	; (800fbb4 <vPortExitCritical+0x4c>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	3b01      	subs	r3, #1
 800fb90:	4a08      	ldr	r2, [pc, #32]	; (800fbb4 <vPortExitCritical+0x4c>)
 800fb92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fb94:	4b07      	ldr	r3, [pc, #28]	; (800fbb4 <vPortExitCritical+0x4c>)
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d104      	bne.n	800fba6 <vPortExitCritical+0x3e>
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800fba6:	bf00      	nop
 800fba8:	370c      	adds	r7, #12
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb0:	4770      	bx	lr
 800fbb2:	bf00      	nop
 800fbb4:	20000020 	.word	0x20000020
	...

0800fbc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fbc0:	f3ef 8009 	mrs	r0, PSP
 800fbc4:	f3bf 8f6f 	isb	sy
 800fbc8:	4b15      	ldr	r3, [pc, #84]	; (800fc20 <pxCurrentTCBConst>)
 800fbca:	681a      	ldr	r2, [r3, #0]
 800fbcc:	f01e 0f10 	tst.w	lr, #16
 800fbd0:	bf08      	it	eq
 800fbd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fbd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbda:	6010      	str	r0, [r2, #0]
 800fbdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fbe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fbe4:	f380 8811 	msr	BASEPRI, r0
 800fbe8:	f3bf 8f4f 	dsb	sy
 800fbec:	f3bf 8f6f 	isb	sy
 800fbf0:	f001 ffb2 	bl	8011b58 <vTaskSwitchContext>
 800fbf4:	f04f 0000 	mov.w	r0, #0
 800fbf8:	f380 8811 	msr	BASEPRI, r0
 800fbfc:	bc09      	pop	{r0, r3}
 800fbfe:	6819      	ldr	r1, [r3, #0]
 800fc00:	6808      	ldr	r0, [r1, #0]
 800fc02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc06:	f01e 0f10 	tst.w	lr, #16
 800fc0a:	bf08      	it	eq
 800fc0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fc10:	f380 8809 	msr	PSP, r0
 800fc14:	f3bf 8f6f 	isb	sy
 800fc18:	4770      	bx	lr
 800fc1a:	bf00      	nop
 800fc1c:	f3af 8000 	nop.w

0800fc20 <pxCurrentTCBConst>:
 800fc20:	200055f0 	.word	0x200055f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fc24:	bf00      	nop
 800fc26:	bf00      	nop

0800fc28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b082      	sub	sp, #8
 800fc2c:	af00      	add	r7, sp, #0
	__asm volatile
 800fc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc32:	f383 8811 	msr	BASEPRI, r3
 800fc36:	f3bf 8f6f 	isb	sy
 800fc3a:	f3bf 8f4f 	dsb	sy
 800fc3e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fc40:	f001 fed2 	bl	80119e8 <xTaskIncrementTick>
 800fc44:	4603      	mov	r3, r0
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d003      	beq.n	800fc52 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fc4a:	4b06      	ldr	r3, [pc, #24]	; (800fc64 <SysTick_Handler+0x3c>)
 800fc4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc50:	601a      	str	r2, [r3, #0]
 800fc52:	2300      	movs	r3, #0
 800fc54:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800fc5c:	bf00      	nop
 800fc5e:	3708      	adds	r7, #8
 800fc60:	46bd      	mov	sp, r7
 800fc62:	bd80      	pop	{r7, pc}
 800fc64:	e000ed04 	.word	0xe000ed04

0800fc68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fc68:	b480      	push	{r7}
 800fc6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fc6c:	4b0b      	ldr	r3, [pc, #44]	; (800fc9c <vPortSetupTimerInterrupt+0x34>)
 800fc6e:	2200      	movs	r2, #0
 800fc70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fc72:	4b0b      	ldr	r3, [pc, #44]	; (800fca0 <vPortSetupTimerInterrupt+0x38>)
 800fc74:	2200      	movs	r2, #0
 800fc76:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fc78:	4b0a      	ldr	r3, [pc, #40]	; (800fca4 <vPortSetupTimerInterrupt+0x3c>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	4a0a      	ldr	r2, [pc, #40]	; (800fca8 <vPortSetupTimerInterrupt+0x40>)
 800fc7e:	fba2 2303 	umull	r2, r3, r2, r3
 800fc82:	099b      	lsrs	r3, r3, #6
 800fc84:	4a09      	ldr	r2, [pc, #36]	; (800fcac <vPortSetupTimerInterrupt+0x44>)
 800fc86:	3b01      	subs	r3, #1
 800fc88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fc8a:	4b04      	ldr	r3, [pc, #16]	; (800fc9c <vPortSetupTimerInterrupt+0x34>)
 800fc8c:	2207      	movs	r2, #7
 800fc8e:	601a      	str	r2, [r3, #0]
}
 800fc90:	bf00      	nop
 800fc92:	46bd      	mov	sp, r7
 800fc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc98:	4770      	bx	lr
 800fc9a:	bf00      	nop
 800fc9c:	e000e010 	.word	0xe000e010
 800fca0:	e000e018 	.word	0xe000e018
 800fca4:	20000014 	.word	0x20000014
 800fca8:	10624dd3 	.word	0x10624dd3
 800fcac:	e000e014 	.word	0xe000e014

0800fcb0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fcb0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fcc0 <vPortEnableVFP+0x10>
 800fcb4:	6801      	ldr	r1, [r0, #0]
 800fcb6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fcba:	6001      	str	r1, [r0, #0]
 800fcbc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fcbe:	bf00      	nop
 800fcc0:	e000ed88 	.word	0xe000ed88

0800fcc4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b085      	sub	sp, #20
 800fcc8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fcca:	f3ef 8305 	mrs	r3, IPSR
 800fcce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	2b0f      	cmp	r3, #15
 800fcd4:	d913      	bls.n	800fcfe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fcd6:	4a16      	ldr	r2, [pc, #88]	; (800fd30 <vPortValidateInterruptPriority+0x6c>)
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	4413      	add	r3, r2
 800fcdc:	781b      	ldrb	r3, [r3, #0]
 800fcde:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fce0:	4b14      	ldr	r3, [pc, #80]	; (800fd34 <vPortValidateInterruptPriority+0x70>)
 800fce2:	781b      	ldrb	r3, [r3, #0]
 800fce4:	7afa      	ldrb	r2, [r7, #11]
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d209      	bcs.n	800fcfe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800fcea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcee:	f383 8811 	msr	BASEPRI, r3
 800fcf2:	f3bf 8f6f 	isb	sy
 800fcf6:	f3bf 8f4f 	dsb	sy
 800fcfa:	607b      	str	r3, [r7, #4]
 800fcfc:	e7fe      	b.n	800fcfc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fcfe:	4b0e      	ldr	r3, [pc, #56]	; (800fd38 <vPortValidateInterruptPriority+0x74>)
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fd06:	4b0d      	ldr	r3, [pc, #52]	; (800fd3c <vPortValidateInterruptPriority+0x78>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	d909      	bls.n	800fd22 <vPortValidateInterruptPriority+0x5e>
 800fd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd12:	f383 8811 	msr	BASEPRI, r3
 800fd16:	f3bf 8f6f 	isb	sy
 800fd1a:	f3bf 8f4f 	dsb	sy
 800fd1e:	603b      	str	r3, [r7, #0]
 800fd20:	e7fe      	b.n	800fd20 <vPortValidateInterruptPriority+0x5c>
	}
 800fd22:	bf00      	nop
 800fd24:	3714      	adds	r7, #20
 800fd26:	46bd      	mov	sp, r7
 800fd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2c:	4770      	bx	lr
 800fd2e:	bf00      	nop
 800fd30:	e000e3f0 	.word	0xe000e3f0
 800fd34:	20001b38 	.word	0x20001b38
 800fd38:	e000ed0c 	.word	0xe000ed0c
 800fd3c:	20001b3c 	.word	0x20001b3c

0800fd40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b08a      	sub	sp, #40	; 0x28
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fd48:	2300      	movs	r3, #0
 800fd4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fd4c:	f001 fd5a 	bl	8011804 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fd50:	4b57      	ldr	r3, [pc, #348]	; (800feb0 <pvPortMalloc+0x170>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d101      	bne.n	800fd5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fd58:	f000 f90c 	bl	800ff74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fd5c:	4b55      	ldr	r3, [pc, #340]	; (800feb4 <pvPortMalloc+0x174>)
 800fd5e:	681a      	ldr	r2, [r3, #0]
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	4013      	ands	r3, r2
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	f040 808c 	bne.w	800fe82 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d01c      	beq.n	800fdaa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800fd70:	2208      	movs	r2, #8
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	4413      	add	r3, r2
 800fd76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f003 0307 	and.w	r3, r3, #7
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d013      	beq.n	800fdaa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	f023 0307 	bic.w	r3, r3, #7
 800fd88:	3308      	adds	r3, #8
 800fd8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	f003 0307 	and.w	r3, r3, #7
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d009      	beq.n	800fdaa <pvPortMalloc+0x6a>
 800fd96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd9a:	f383 8811 	msr	BASEPRI, r3
 800fd9e:	f3bf 8f6f 	isb	sy
 800fda2:	f3bf 8f4f 	dsb	sy
 800fda6:	617b      	str	r3, [r7, #20]
 800fda8:	e7fe      	b.n	800fda8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d068      	beq.n	800fe82 <pvPortMalloc+0x142>
 800fdb0:	4b41      	ldr	r3, [pc, #260]	; (800feb8 <pvPortMalloc+0x178>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	687a      	ldr	r2, [r7, #4]
 800fdb6:	429a      	cmp	r2, r3
 800fdb8:	d863      	bhi.n	800fe82 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fdba:	4b40      	ldr	r3, [pc, #256]	; (800febc <pvPortMalloc+0x17c>)
 800fdbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fdbe:	4b3f      	ldr	r3, [pc, #252]	; (800febc <pvPortMalloc+0x17c>)
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fdc4:	e004      	b.n	800fdd0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800fdc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fdca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd2:	685b      	ldr	r3, [r3, #4]
 800fdd4:	687a      	ldr	r2, [r7, #4]
 800fdd6:	429a      	cmp	r2, r3
 800fdd8:	d903      	bls.n	800fde2 <pvPortMalloc+0xa2>
 800fdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d1f1      	bne.n	800fdc6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fde2:	4b33      	ldr	r3, [pc, #204]	; (800feb0 <pvPortMalloc+0x170>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fde8:	429a      	cmp	r2, r3
 800fdea:	d04a      	beq.n	800fe82 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fdec:	6a3b      	ldr	r3, [r7, #32]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	2208      	movs	r2, #8
 800fdf2:	4413      	add	r3, r2
 800fdf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf8:	681a      	ldr	r2, [r3, #0]
 800fdfa:	6a3b      	ldr	r3, [r7, #32]
 800fdfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe00:	685a      	ldr	r2, [r3, #4]
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	1ad2      	subs	r2, r2, r3
 800fe06:	2308      	movs	r3, #8
 800fe08:	005b      	lsls	r3, r3, #1
 800fe0a:	429a      	cmp	r2, r3
 800fe0c:	d91e      	bls.n	800fe4c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fe0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	4413      	add	r3, r2
 800fe14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fe16:	69bb      	ldr	r3, [r7, #24]
 800fe18:	f003 0307 	and.w	r3, r3, #7
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d009      	beq.n	800fe34 <pvPortMalloc+0xf4>
 800fe20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe24:	f383 8811 	msr	BASEPRI, r3
 800fe28:	f3bf 8f6f 	isb	sy
 800fe2c:	f3bf 8f4f 	dsb	sy
 800fe30:	613b      	str	r3, [r7, #16]
 800fe32:	e7fe      	b.n	800fe32 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fe34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe36:	685a      	ldr	r2, [r3, #4]
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	1ad2      	subs	r2, r2, r3
 800fe3c:	69bb      	ldr	r3, [r7, #24]
 800fe3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fe40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe42:	687a      	ldr	r2, [r7, #4]
 800fe44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fe46:	69b8      	ldr	r0, [r7, #24]
 800fe48:	f000 f8f6 	bl	8010038 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fe4c:	4b1a      	ldr	r3, [pc, #104]	; (800feb8 <pvPortMalloc+0x178>)
 800fe4e:	681a      	ldr	r2, [r3, #0]
 800fe50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe52:	685b      	ldr	r3, [r3, #4]
 800fe54:	1ad3      	subs	r3, r2, r3
 800fe56:	4a18      	ldr	r2, [pc, #96]	; (800feb8 <pvPortMalloc+0x178>)
 800fe58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fe5a:	4b17      	ldr	r3, [pc, #92]	; (800feb8 <pvPortMalloc+0x178>)
 800fe5c:	681a      	ldr	r2, [r3, #0]
 800fe5e:	4b18      	ldr	r3, [pc, #96]	; (800fec0 <pvPortMalloc+0x180>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	429a      	cmp	r2, r3
 800fe64:	d203      	bcs.n	800fe6e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fe66:	4b14      	ldr	r3, [pc, #80]	; (800feb8 <pvPortMalloc+0x178>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	4a15      	ldr	r2, [pc, #84]	; (800fec0 <pvPortMalloc+0x180>)
 800fe6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fe6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe70:	685a      	ldr	r2, [r3, #4]
 800fe72:	4b10      	ldr	r3, [pc, #64]	; (800feb4 <pvPortMalloc+0x174>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	431a      	orrs	r2, r3
 800fe78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fe7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe7e:	2200      	movs	r2, #0
 800fe80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fe82:	f001 fd05 	bl	8011890 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fe86:	69fb      	ldr	r3, [r7, #28]
 800fe88:	f003 0307 	and.w	r3, r3, #7
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d009      	beq.n	800fea4 <pvPortMalloc+0x164>
 800fe90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe94:	f383 8811 	msr	BASEPRI, r3
 800fe98:	f3bf 8f6f 	isb	sy
 800fe9c:	f3bf 8f4f 	dsb	sy
 800fea0:	60fb      	str	r3, [r7, #12]
 800fea2:	e7fe      	b.n	800fea2 <pvPortMalloc+0x162>
	return pvReturn;
 800fea4:	69fb      	ldr	r3, [r7, #28]
}
 800fea6:	4618      	mov	r0, r3
 800fea8:	3728      	adds	r7, #40	; 0x28
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop
 800feb0:	200055e0 	.word	0x200055e0
 800feb4:	200055ec 	.word	0x200055ec
 800feb8:	200055e4 	.word	0x200055e4
 800febc:	200055d8 	.word	0x200055d8
 800fec0:	200055e8 	.word	0x200055e8

0800fec4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b086      	sub	sp, #24
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d046      	beq.n	800ff64 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fed6:	2308      	movs	r3, #8
 800fed8:	425b      	negs	r3, r3
 800feda:	697a      	ldr	r2, [r7, #20]
 800fedc:	4413      	add	r3, r2
 800fede:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fee0:	697b      	ldr	r3, [r7, #20]
 800fee2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fee4:	693b      	ldr	r3, [r7, #16]
 800fee6:	685a      	ldr	r2, [r3, #4]
 800fee8:	4b20      	ldr	r3, [pc, #128]	; (800ff6c <vPortFree+0xa8>)
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	4013      	ands	r3, r2
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d109      	bne.n	800ff06 <vPortFree+0x42>
 800fef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fef6:	f383 8811 	msr	BASEPRI, r3
 800fefa:	f3bf 8f6f 	isb	sy
 800fefe:	f3bf 8f4f 	dsb	sy
 800ff02:	60fb      	str	r3, [r7, #12]
 800ff04:	e7fe      	b.n	800ff04 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ff06:	693b      	ldr	r3, [r7, #16]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d009      	beq.n	800ff22 <vPortFree+0x5e>
 800ff0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff12:	f383 8811 	msr	BASEPRI, r3
 800ff16:	f3bf 8f6f 	isb	sy
 800ff1a:	f3bf 8f4f 	dsb	sy
 800ff1e:	60bb      	str	r3, [r7, #8]
 800ff20:	e7fe      	b.n	800ff20 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	685a      	ldr	r2, [r3, #4]
 800ff26:	4b11      	ldr	r3, [pc, #68]	; (800ff6c <vPortFree+0xa8>)
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	4013      	ands	r3, r2
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d019      	beq.n	800ff64 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ff30:	693b      	ldr	r3, [r7, #16]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d115      	bne.n	800ff64 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ff38:	693b      	ldr	r3, [r7, #16]
 800ff3a:	685a      	ldr	r2, [r3, #4]
 800ff3c:	4b0b      	ldr	r3, [pc, #44]	; (800ff6c <vPortFree+0xa8>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	43db      	mvns	r3, r3
 800ff42:	401a      	ands	r2, r3
 800ff44:	693b      	ldr	r3, [r7, #16]
 800ff46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ff48:	f001 fc5c 	bl	8011804 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ff4c:	693b      	ldr	r3, [r7, #16]
 800ff4e:	685a      	ldr	r2, [r3, #4]
 800ff50:	4b07      	ldr	r3, [pc, #28]	; (800ff70 <vPortFree+0xac>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	4413      	add	r3, r2
 800ff56:	4a06      	ldr	r2, [pc, #24]	; (800ff70 <vPortFree+0xac>)
 800ff58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ff5a:	6938      	ldr	r0, [r7, #16]
 800ff5c:	f000 f86c 	bl	8010038 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ff60:	f001 fc96 	bl	8011890 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ff64:	bf00      	nop
 800ff66:	3718      	adds	r7, #24
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}
 800ff6c:	200055ec 	.word	0x200055ec
 800ff70:	200055e4 	.word	0x200055e4

0800ff74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ff74:	b480      	push	{r7}
 800ff76:	b085      	sub	sp, #20
 800ff78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ff7a:	f643 2398 	movw	r3, #15000	; 0x3a98
 800ff7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ff80:	4b27      	ldr	r3, [pc, #156]	; (8010020 <prvHeapInit+0xac>)
 800ff82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	f003 0307 	and.w	r3, r3, #7
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d00c      	beq.n	800ffa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	3307      	adds	r3, #7
 800ff92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	f023 0307 	bic.w	r3, r3, #7
 800ff9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ff9c:	68ba      	ldr	r2, [r7, #8]
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	1ad3      	subs	r3, r2, r3
 800ffa2:	4a1f      	ldr	r2, [pc, #124]	; (8010020 <prvHeapInit+0xac>)
 800ffa4:	4413      	add	r3, r2
 800ffa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ffac:	4a1d      	ldr	r2, [pc, #116]	; (8010024 <prvHeapInit+0xb0>)
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ffb2:	4b1c      	ldr	r3, [pc, #112]	; (8010024 <prvHeapInit+0xb0>)
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	68ba      	ldr	r2, [r7, #8]
 800ffbc:	4413      	add	r3, r2
 800ffbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ffc0:	2208      	movs	r2, #8
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	1a9b      	subs	r3, r3, r2
 800ffc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	f023 0307 	bic.w	r3, r3, #7
 800ffce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	4a15      	ldr	r2, [pc, #84]	; (8010028 <prvHeapInit+0xb4>)
 800ffd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ffd6:	4b14      	ldr	r3, [pc, #80]	; (8010028 <prvHeapInit+0xb4>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	2200      	movs	r2, #0
 800ffdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ffde:	4b12      	ldr	r3, [pc, #72]	; (8010028 <prvHeapInit+0xb4>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	68fa      	ldr	r2, [r7, #12]
 800ffee:	1ad2      	subs	r2, r2, r3
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fff4:	4b0c      	ldr	r3, [pc, #48]	; (8010028 <prvHeapInit+0xb4>)
 800fff6:	681a      	ldr	r2, [r3, #0]
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	685b      	ldr	r3, [r3, #4]
 8010000:	4a0a      	ldr	r2, [pc, #40]	; (801002c <prvHeapInit+0xb8>)
 8010002:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	685b      	ldr	r3, [r3, #4]
 8010008:	4a09      	ldr	r2, [pc, #36]	; (8010030 <prvHeapInit+0xbc>)
 801000a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801000c:	4b09      	ldr	r3, [pc, #36]	; (8010034 <prvHeapInit+0xc0>)
 801000e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010012:	601a      	str	r2, [r3, #0]
}
 8010014:	bf00      	nop
 8010016:	3714      	adds	r7, #20
 8010018:	46bd      	mov	sp, r7
 801001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001e:	4770      	bx	lr
 8010020:	20001b40 	.word	0x20001b40
 8010024:	200055d8 	.word	0x200055d8
 8010028:	200055e0 	.word	0x200055e0
 801002c:	200055e8 	.word	0x200055e8
 8010030:	200055e4 	.word	0x200055e4
 8010034:	200055ec 	.word	0x200055ec

08010038 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010038:	b480      	push	{r7}
 801003a:	b085      	sub	sp, #20
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010040:	4b28      	ldr	r3, [pc, #160]	; (80100e4 <prvInsertBlockIntoFreeList+0xac>)
 8010042:	60fb      	str	r3, [r7, #12]
 8010044:	e002      	b.n	801004c <prvInsertBlockIntoFreeList+0x14>
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	60fb      	str	r3, [r7, #12]
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	687a      	ldr	r2, [r7, #4]
 8010052:	429a      	cmp	r2, r3
 8010054:	d8f7      	bhi.n	8010046 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	685b      	ldr	r3, [r3, #4]
 801005e:	68ba      	ldr	r2, [r7, #8]
 8010060:	4413      	add	r3, r2
 8010062:	687a      	ldr	r2, [r7, #4]
 8010064:	429a      	cmp	r2, r3
 8010066:	d108      	bne.n	801007a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	685a      	ldr	r2, [r3, #4]
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	685b      	ldr	r3, [r3, #4]
 8010070:	441a      	add	r2, r3
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	685b      	ldr	r3, [r3, #4]
 8010082:	68ba      	ldr	r2, [r7, #8]
 8010084:	441a      	add	r2, r3
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	429a      	cmp	r2, r3
 801008c:	d118      	bne.n	80100c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	681a      	ldr	r2, [r3, #0]
 8010092:	4b15      	ldr	r3, [pc, #84]	; (80100e8 <prvInsertBlockIntoFreeList+0xb0>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	429a      	cmp	r2, r3
 8010098:	d00d      	beq.n	80100b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	685a      	ldr	r2, [r3, #4]
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	685b      	ldr	r3, [r3, #4]
 80100a4:	441a      	add	r2, r3
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	681a      	ldr	r2, [r3, #0]
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	601a      	str	r2, [r3, #0]
 80100b4:	e008      	b.n	80100c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80100b6:	4b0c      	ldr	r3, [pc, #48]	; (80100e8 <prvInsertBlockIntoFreeList+0xb0>)
 80100b8:	681a      	ldr	r2, [r3, #0]
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	601a      	str	r2, [r3, #0]
 80100be:	e003      	b.n	80100c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	681a      	ldr	r2, [r3, #0]
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80100c8:	68fa      	ldr	r2, [r7, #12]
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	429a      	cmp	r2, r3
 80100ce:	d002      	beq.n	80100d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	687a      	ldr	r2, [r7, #4]
 80100d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80100d6:	bf00      	nop
 80100d8:	3714      	adds	r7, #20
 80100da:	46bd      	mov	sp, r7
 80100dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e0:	4770      	bx	lr
 80100e2:	bf00      	nop
 80100e4:	200055d8 	.word	0x200055d8
 80100e8:	200055e0 	.word	0x200055e0

080100ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80100ec:	b480      	push	{r7}
 80100ee:	b083      	sub	sp, #12
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f103 0208 	add.w	r2, r3, #8
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f04f 32ff 	mov.w	r2, #4294967295
 8010104:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	f103 0208 	add.w	r2, r3, #8
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	f103 0208 	add.w	r2, r3, #8
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	2200      	movs	r2, #0
 801011e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010120:	bf00      	nop
 8010122:	370c      	adds	r7, #12
 8010124:	46bd      	mov	sp, r7
 8010126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012a:	4770      	bx	lr

0801012c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801012c:	b480      	push	{r7}
 801012e:	b083      	sub	sp, #12
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2200      	movs	r2, #0
 8010138:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801013a:	bf00      	nop
 801013c:	370c      	adds	r7, #12
 801013e:	46bd      	mov	sp, r7
 8010140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010144:	4770      	bx	lr

08010146 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010146:	b480      	push	{r7}
 8010148:	b085      	sub	sp, #20
 801014a:	af00      	add	r7, sp, #0
 801014c:	6078      	str	r0, [r7, #4]
 801014e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	685b      	ldr	r3, [r3, #4]
 8010154:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	68fa      	ldr	r2, [r7, #12]
 801015a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	689a      	ldr	r2, [r3, #8]
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	689b      	ldr	r3, [r3, #8]
 8010168:	683a      	ldr	r2, [r7, #0]
 801016a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	683a      	ldr	r2, [r7, #0]
 8010170:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	687a      	ldr	r2, [r7, #4]
 8010176:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	1c5a      	adds	r2, r3, #1
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	601a      	str	r2, [r3, #0]
}
 8010182:	bf00      	nop
 8010184:	3714      	adds	r7, #20
 8010186:	46bd      	mov	sp, r7
 8010188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018c:	4770      	bx	lr

0801018e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801018e:	b480      	push	{r7}
 8010190:	b085      	sub	sp, #20
 8010192:	af00      	add	r7, sp, #0
 8010194:	6078      	str	r0, [r7, #4]
 8010196:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801019e:	68bb      	ldr	r3, [r7, #8]
 80101a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101a4:	d103      	bne.n	80101ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	691b      	ldr	r3, [r3, #16]
 80101aa:	60fb      	str	r3, [r7, #12]
 80101ac:	e00c      	b.n	80101c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	3308      	adds	r3, #8
 80101b2:	60fb      	str	r3, [r7, #12]
 80101b4:	e002      	b.n	80101bc <vListInsert+0x2e>
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	685b      	ldr	r3, [r3, #4]
 80101ba:	60fb      	str	r3, [r7, #12]
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	685b      	ldr	r3, [r3, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	68ba      	ldr	r2, [r7, #8]
 80101c4:	429a      	cmp	r2, r3
 80101c6:	d2f6      	bcs.n	80101b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	685a      	ldr	r2, [r3, #4]
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	685b      	ldr	r3, [r3, #4]
 80101d4:	683a      	ldr	r2, [r7, #0]
 80101d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	68fa      	ldr	r2, [r7, #12]
 80101dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	683a      	ldr	r2, [r7, #0]
 80101e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	687a      	ldr	r2, [r7, #4]
 80101e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	1c5a      	adds	r2, r3, #1
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	601a      	str	r2, [r3, #0]
}
 80101f4:	bf00      	nop
 80101f6:	3714      	adds	r7, #20
 80101f8:	46bd      	mov	sp, r7
 80101fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fe:	4770      	bx	lr

08010200 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010200:	b480      	push	{r7}
 8010202:	b085      	sub	sp, #20
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	691b      	ldr	r3, [r3, #16]
 801020c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	685b      	ldr	r3, [r3, #4]
 8010212:	687a      	ldr	r2, [r7, #4]
 8010214:	6892      	ldr	r2, [r2, #8]
 8010216:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	689b      	ldr	r3, [r3, #8]
 801021c:	687a      	ldr	r2, [r7, #4]
 801021e:	6852      	ldr	r2, [r2, #4]
 8010220:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	685b      	ldr	r3, [r3, #4]
 8010226:	687a      	ldr	r2, [r7, #4]
 8010228:	429a      	cmp	r2, r3
 801022a:	d103      	bne.n	8010234 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	689a      	ldr	r2, [r3, #8]
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	2200      	movs	r2, #0
 8010238:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	1e5a      	subs	r2, r3, #1
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	681b      	ldr	r3, [r3, #0]
}
 8010248:	4618      	mov	r0, r3
 801024a:	3714      	adds	r7, #20
 801024c:	46bd      	mov	sp, r7
 801024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010252:	4770      	bx	lr

08010254 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b084      	sub	sp, #16
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
 801025c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d109      	bne.n	801027c <xQueueGenericReset+0x28>
 8010268:	f04f 0350 	mov.w	r3, #80	; 0x50
 801026c:	f383 8811 	msr	BASEPRI, r3
 8010270:	f3bf 8f6f 	isb	sy
 8010274:	f3bf 8f4f 	dsb	sy
 8010278:	60bb      	str	r3, [r7, #8]
 801027a:	e7fe      	b.n	801027a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 801027c:	f7ff fc46 	bl	800fb0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	681a      	ldr	r2, [r3, #0]
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010288:	68f9      	ldr	r1, [r7, #12]
 801028a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801028c:	fb01 f303 	mul.w	r3, r1, r3
 8010290:	441a      	add	r2, r3
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	2200      	movs	r2, #0
 801029a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	681a      	ldr	r2, [r3, #0]
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	681a      	ldr	r2, [r3, #0]
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102ac:	3b01      	subs	r3, #1
 80102ae:	68f9      	ldr	r1, [r7, #12]
 80102b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80102b2:	fb01 f303 	mul.w	r3, r1, r3
 80102b6:	441a      	add	r2, r3
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	22ff      	movs	r2, #255	; 0xff
 80102c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	22ff      	movs	r2, #255	; 0xff
 80102c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d114      	bne.n	80102fc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	691b      	ldr	r3, [r3, #16]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d01a      	beq.n	8010310 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	3310      	adds	r3, #16
 80102de:	4618      	mov	r0, r3
 80102e0:	f001 fce4 	bl	8011cac <xTaskRemoveFromEventList>
 80102e4:	4603      	mov	r3, r0
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d012      	beq.n	8010310 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80102ea:	4b0d      	ldr	r3, [pc, #52]	; (8010320 <xQueueGenericReset+0xcc>)
 80102ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102f0:	601a      	str	r2, [r3, #0]
 80102f2:	f3bf 8f4f 	dsb	sy
 80102f6:	f3bf 8f6f 	isb	sy
 80102fa:	e009      	b.n	8010310 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	3310      	adds	r3, #16
 8010300:	4618      	mov	r0, r3
 8010302:	f7ff fef3 	bl	80100ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	3324      	adds	r3, #36	; 0x24
 801030a:	4618      	mov	r0, r3
 801030c:	f7ff feee 	bl	80100ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010310:	f7ff fc2a 	bl	800fb68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010314:	2301      	movs	r3, #1
}
 8010316:	4618      	mov	r0, r3
 8010318:	3710      	adds	r7, #16
 801031a:	46bd      	mov	sp, r7
 801031c:	bd80      	pop	{r7, pc}
 801031e:	bf00      	nop
 8010320:	e000ed04 	.word	0xe000ed04

08010324 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010324:	b580      	push	{r7, lr}
 8010326:	b08e      	sub	sp, #56	; 0x38
 8010328:	af02      	add	r7, sp, #8
 801032a:	60f8      	str	r0, [r7, #12]
 801032c:	60b9      	str	r1, [r7, #8]
 801032e:	607a      	str	r2, [r7, #4]
 8010330:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d109      	bne.n	801034c <xQueueGenericCreateStatic+0x28>
 8010338:	f04f 0350 	mov.w	r3, #80	; 0x50
 801033c:	f383 8811 	msr	BASEPRI, r3
 8010340:	f3bf 8f6f 	isb	sy
 8010344:	f3bf 8f4f 	dsb	sy
 8010348:	62bb      	str	r3, [r7, #40]	; 0x28
 801034a:	e7fe      	b.n	801034a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d109      	bne.n	8010366 <xQueueGenericCreateStatic+0x42>
 8010352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010356:	f383 8811 	msr	BASEPRI, r3
 801035a:	f3bf 8f6f 	isb	sy
 801035e:	f3bf 8f4f 	dsb	sy
 8010362:	627b      	str	r3, [r7, #36]	; 0x24
 8010364:	e7fe      	b.n	8010364 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d002      	beq.n	8010372 <xQueueGenericCreateStatic+0x4e>
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d001      	beq.n	8010376 <xQueueGenericCreateStatic+0x52>
 8010372:	2301      	movs	r3, #1
 8010374:	e000      	b.n	8010378 <xQueueGenericCreateStatic+0x54>
 8010376:	2300      	movs	r3, #0
 8010378:	2b00      	cmp	r3, #0
 801037a:	d109      	bne.n	8010390 <xQueueGenericCreateStatic+0x6c>
 801037c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010380:	f383 8811 	msr	BASEPRI, r3
 8010384:	f3bf 8f6f 	isb	sy
 8010388:	f3bf 8f4f 	dsb	sy
 801038c:	623b      	str	r3, [r7, #32]
 801038e:	e7fe      	b.n	801038e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d102      	bne.n	801039c <xQueueGenericCreateStatic+0x78>
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d101      	bne.n	80103a0 <xQueueGenericCreateStatic+0x7c>
 801039c:	2301      	movs	r3, #1
 801039e:	e000      	b.n	80103a2 <xQueueGenericCreateStatic+0x7e>
 80103a0:	2300      	movs	r3, #0
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d109      	bne.n	80103ba <xQueueGenericCreateStatic+0x96>
 80103a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103aa:	f383 8811 	msr	BASEPRI, r3
 80103ae:	f3bf 8f6f 	isb	sy
 80103b2:	f3bf 8f4f 	dsb	sy
 80103b6:	61fb      	str	r3, [r7, #28]
 80103b8:	e7fe      	b.n	80103b8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80103ba:	2350      	movs	r3, #80	; 0x50
 80103bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	2b50      	cmp	r3, #80	; 0x50
 80103c2:	d009      	beq.n	80103d8 <xQueueGenericCreateStatic+0xb4>
 80103c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103c8:	f383 8811 	msr	BASEPRI, r3
 80103cc:	f3bf 8f6f 	isb	sy
 80103d0:	f3bf 8f4f 	dsb	sy
 80103d4:	61bb      	str	r3, [r7, #24]
 80103d6:	e7fe      	b.n	80103d6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80103d8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80103de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d00d      	beq.n	8010400 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80103e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103e6:	2201      	movs	r2, #1
 80103e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80103ec:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80103f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f2:	9300      	str	r3, [sp, #0]
 80103f4:	4613      	mov	r3, r2
 80103f6:	687a      	ldr	r2, [r7, #4]
 80103f8:	68b9      	ldr	r1, [r7, #8]
 80103fa:	68f8      	ldr	r0, [r7, #12]
 80103fc:	f000 f844 	bl	8010488 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010402:	4618      	mov	r0, r3
 8010404:	3730      	adds	r7, #48	; 0x30
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}

0801040a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801040a:	b580      	push	{r7, lr}
 801040c:	b08a      	sub	sp, #40	; 0x28
 801040e:	af02      	add	r7, sp, #8
 8010410:	60f8      	str	r0, [r7, #12]
 8010412:	60b9      	str	r1, [r7, #8]
 8010414:	4613      	mov	r3, r2
 8010416:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d109      	bne.n	8010432 <xQueueGenericCreate+0x28>
 801041e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010422:	f383 8811 	msr	BASEPRI, r3
 8010426:	f3bf 8f6f 	isb	sy
 801042a:	f3bf 8f4f 	dsb	sy
 801042e:	613b      	str	r3, [r7, #16]
 8010430:	e7fe      	b.n	8010430 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010432:	68bb      	ldr	r3, [r7, #8]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d102      	bne.n	801043e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010438:	2300      	movs	r3, #0
 801043a:	61fb      	str	r3, [r7, #28]
 801043c:	e004      	b.n	8010448 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	68ba      	ldr	r2, [r7, #8]
 8010442:	fb02 f303 	mul.w	r3, r2, r3
 8010446:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010448:	69fb      	ldr	r3, [r7, #28]
 801044a:	3350      	adds	r3, #80	; 0x50
 801044c:	4618      	mov	r0, r3
 801044e:	f7ff fc77 	bl	800fd40 <pvPortMalloc>
 8010452:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010454:	69bb      	ldr	r3, [r7, #24]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d011      	beq.n	801047e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801045a:	69bb      	ldr	r3, [r7, #24]
 801045c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	3350      	adds	r3, #80	; 0x50
 8010462:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010464:	69bb      	ldr	r3, [r7, #24]
 8010466:	2200      	movs	r2, #0
 8010468:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801046c:	79fa      	ldrb	r2, [r7, #7]
 801046e:	69bb      	ldr	r3, [r7, #24]
 8010470:	9300      	str	r3, [sp, #0]
 8010472:	4613      	mov	r3, r2
 8010474:	697a      	ldr	r2, [r7, #20]
 8010476:	68b9      	ldr	r1, [r7, #8]
 8010478:	68f8      	ldr	r0, [r7, #12]
 801047a:	f000 f805 	bl	8010488 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801047e:	69bb      	ldr	r3, [r7, #24]
	}
 8010480:	4618      	mov	r0, r3
 8010482:	3720      	adds	r7, #32
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}

08010488 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b084      	sub	sp, #16
 801048c:	af00      	add	r7, sp, #0
 801048e:	60f8      	str	r0, [r7, #12]
 8010490:	60b9      	str	r1, [r7, #8]
 8010492:	607a      	str	r2, [r7, #4]
 8010494:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d103      	bne.n	80104a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801049c:	69bb      	ldr	r3, [r7, #24]
 801049e:	69ba      	ldr	r2, [r7, #24]
 80104a0:	601a      	str	r2, [r3, #0]
 80104a2:	e002      	b.n	80104aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80104a4:	69bb      	ldr	r3, [r7, #24]
 80104a6:	687a      	ldr	r2, [r7, #4]
 80104a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80104aa:	69bb      	ldr	r3, [r7, #24]
 80104ac:	68fa      	ldr	r2, [r7, #12]
 80104ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80104b0:	69bb      	ldr	r3, [r7, #24]
 80104b2:	68ba      	ldr	r2, [r7, #8]
 80104b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80104b6:	2101      	movs	r1, #1
 80104b8:	69b8      	ldr	r0, [r7, #24]
 80104ba:	f7ff fecb 	bl	8010254 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80104be:	69bb      	ldr	r3, [r7, #24]
 80104c0:	78fa      	ldrb	r2, [r7, #3]
 80104c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80104c6:	bf00      	nop
 80104c8:	3710      	adds	r7, #16
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}

080104ce <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80104ce:	b580      	push	{r7, lr}
 80104d0:	b082      	sub	sp, #8
 80104d2:	af00      	add	r7, sp, #0
 80104d4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d00e      	beq.n	80104fa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	2200      	movs	r2, #0
 80104e0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	2200      	movs	r2, #0
 80104e6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2200      	movs	r2, #0
 80104ec:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80104ee:	2300      	movs	r3, #0
 80104f0:	2200      	movs	r2, #0
 80104f2:	2100      	movs	r1, #0
 80104f4:	6878      	ldr	r0, [r7, #4]
 80104f6:	f000 f905 	bl	8010704 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80104fa:	bf00      	nop
 80104fc:	3708      	adds	r7, #8
 80104fe:	46bd      	mov	sp, r7
 8010500:	bd80      	pop	{r7, pc}

08010502 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8010502:	b580      	push	{r7, lr}
 8010504:	b086      	sub	sp, #24
 8010506:	af00      	add	r7, sp, #0
 8010508:	4603      	mov	r3, r0
 801050a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801050c:	2301      	movs	r3, #1
 801050e:	617b      	str	r3, [r7, #20]
 8010510:	2300      	movs	r3, #0
 8010512:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010514:	79fb      	ldrb	r3, [r7, #7]
 8010516:	461a      	mov	r2, r3
 8010518:	6939      	ldr	r1, [r7, #16]
 801051a:	6978      	ldr	r0, [r7, #20]
 801051c:	f7ff ff75 	bl	801040a <xQueueGenericCreate>
 8010520:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010522:	68f8      	ldr	r0, [r7, #12]
 8010524:	f7ff ffd3 	bl	80104ce <prvInitialiseMutex>

		return xNewQueue;
 8010528:	68fb      	ldr	r3, [r7, #12]
	}
 801052a:	4618      	mov	r0, r3
 801052c:	3718      	adds	r7, #24
 801052e:	46bd      	mov	sp, r7
 8010530:	bd80      	pop	{r7, pc}

08010532 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8010532:	b580      	push	{r7, lr}
 8010534:	b088      	sub	sp, #32
 8010536:	af02      	add	r7, sp, #8
 8010538:	4603      	mov	r3, r0
 801053a:	6039      	str	r1, [r7, #0]
 801053c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801053e:	2301      	movs	r3, #1
 8010540:	617b      	str	r3, [r7, #20]
 8010542:	2300      	movs	r3, #0
 8010544:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8010546:	79fb      	ldrb	r3, [r7, #7]
 8010548:	9300      	str	r3, [sp, #0]
 801054a:	683b      	ldr	r3, [r7, #0]
 801054c:	2200      	movs	r2, #0
 801054e:	6939      	ldr	r1, [r7, #16]
 8010550:	6978      	ldr	r0, [r7, #20]
 8010552:	f7ff fee7 	bl	8010324 <xQueueGenericCreateStatic>
 8010556:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010558:	68f8      	ldr	r0, [r7, #12]
 801055a:	f7ff ffb8 	bl	80104ce <prvInitialiseMutex>

		return xNewQueue;
 801055e:	68fb      	ldr	r3, [r7, #12]
	}
 8010560:	4618      	mov	r0, r3
 8010562:	3718      	adds	r7, #24
 8010564:	46bd      	mov	sp, r7
 8010566:	bd80      	pop	{r7, pc}

08010568 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8010568:	b590      	push	{r4, r7, lr}
 801056a:	b087      	sub	sp, #28
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8010574:	693b      	ldr	r3, [r7, #16]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d109      	bne.n	801058e <xQueueGiveMutexRecursive+0x26>
 801057a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801057e:	f383 8811 	msr	BASEPRI, r3
 8010582:	f3bf 8f6f 	isb	sy
 8010586:	f3bf 8f4f 	dsb	sy
 801058a:	60fb      	str	r3, [r7, #12]
 801058c:	e7fe      	b.n	801058c <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	689c      	ldr	r4, [r3, #8]
 8010592:	f001 fd69 	bl	8012068 <xTaskGetCurrentTaskHandle>
 8010596:	4603      	mov	r3, r0
 8010598:	429c      	cmp	r4, r3
 801059a:	d111      	bne.n	80105c0 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 801059c:	693b      	ldr	r3, [r7, #16]
 801059e:	68db      	ldr	r3, [r3, #12]
 80105a0:	1e5a      	subs	r2, r3, #1
 80105a2:	693b      	ldr	r3, [r7, #16]
 80105a4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80105a6:	693b      	ldr	r3, [r7, #16]
 80105a8:	68db      	ldr	r3, [r3, #12]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d105      	bne.n	80105ba <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80105ae:	2300      	movs	r3, #0
 80105b0:	2200      	movs	r2, #0
 80105b2:	2100      	movs	r1, #0
 80105b4:	6938      	ldr	r0, [r7, #16]
 80105b6:	f000 f8a5 	bl	8010704 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80105ba:	2301      	movs	r3, #1
 80105bc:	617b      	str	r3, [r7, #20]
 80105be:	e001      	b.n	80105c4 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80105c0:	2300      	movs	r3, #0
 80105c2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80105c4:	697b      	ldr	r3, [r7, #20]
	}
 80105c6:	4618      	mov	r0, r3
 80105c8:	371c      	adds	r7, #28
 80105ca:	46bd      	mov	sp, r7
 80105cc:	bd90      	pop	{r4, r7, pc}

080105ce <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80105ce:	b590      	push	{r4, r7, lr}
 80105d0:	b087      	sub	sp, #28
 80105d2:	af00      	add	r7, sp, #0
 80105d4:	6078      	str	r0, [r7, #4]
 80105d6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80105dc:	693b      	ldr	r3, [r7, #16]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d109      	bne.n	80105f6 <xQueueTakeMutexRecursive+0x28>
 80105e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105e6:	f383 8811 	msr	BASEPRI, r3
 80105ea:	f3bf 8f6f 	isb	sy
 80105ee:	f3bf 8f4f 	dsb	sy
 80105f2:	60fb      	str	r3, [r7, #12]
 80105f4:	e7fe      	b.n	80105f4 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80105f6:	693b      	ldr	r3, [r7, #16]
 80105f8:	689c      	ldr	r4, [r3, #8]
 80105fa:	f001 fd35 	bl	8012068 <xTaskGetCurrentTaskHandle>
 80105fe:	4603      	mov	r3, r0
 8010600:	429c      	cmp	r4, r3
 8010602:	d107      	bne.n	8010614 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010604:	693b      	ldr	r3, [r7, #16]
 8010606:	68db      	ldr	r3, [r3, #12]
 8010608:	1c5a      	adds	r2, r3, #1
 801060a:	693b      	ldr	r3, [r7, #16]
 801060c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 801060e:	2301      	movs	r3, #1
 8010610:	617b      	str	r3, [r7, #20]
 8010612:	e00c      	b.n	801062e <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8010614:	6839      	ldr	r1, [r7, #0]
 8010616:	6938      	ldr	r0, [r7, #16]
 8010618:	f000 fb68 	bl	8010cec <xQueueSemaphoreTake>
 801061c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 801061e:	697b      	ldr	r3, [r7, #20]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d004      	beq.n	801062e <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010624:	693b      	ldr	r3, [r7, #16]
 8010626:	68db      	ldr	r3, [r3, #12]
 8010628:	1c5a      	adds	r2, r3, #1
 801062a:	693b      	ldr	r3, [r7, #16]
 801062c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 801062e:	697b      	ldr	r3, [r7, #20]
	}
 8010630:	4618      	mov	r0, r3
 8010632:	371c      	adds	r7, #28
 8010634:	46bd      	mov	sp, r7
 8010636:	bd90      	pop	{r4, r7, pc}

08010638 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8010638:	b580      	push	{r7, lr}
 801063a:	b08a      	sub	sp, #40	; 0x28
 801063c:	af02      	add	r7, sp, #8
 801063e:	60f8      	str	r0, [r7, #12]
 8010640:	60b9      	str	r1, [r7, #8]
 8010642:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d109      	bne.n	801065e <xQueueCreateCountingSemaphoreStatic+0x26>
 801064a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801064e:	f383 8811 	msr	BASEPRI, r3
 8010652:	f3bf 8f6f 	isb	sy
 8010656:	f3bf 8f4f 	dsb	sy
 801065a:	61bb      	str	r3, [r7, #24]
 801065c:	e7fe      	b.n	801065c <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801065e:	68ba      	ldr	r2, [r7, #8]
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	429a      	cmp	r2, r3
 8010664:	d909      	bls.n	801067a <xQueueCreateCountingSemaphoreStatic+0x42>
 8010666:	f04f 0350 	mov.w	r3, #80	; 0x50
 801066a:	f383 8811 	msr	BASEPRI, r3
 801066e:	f3bf 8f6f 	isb	sy
 8010672:	f3bf 8f4f 	dsb	sy
 8010676:	617b      	str	r3, [r7, #20]
 8010678:	e7fe      	b.n	8010678 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801067a:	2302      	movs	r3, #2
 801067c:	9300      	str	r3, [sp, #0]
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	2200      	movs	r2, #0
 8010682:	2100      	movs	r1, #0
 8010684:	68f8      	ldr	r0, [r7, #12]
 8010686:	f7ff fe4d 	bl	8010324 <xQueueGenericCreateStatic>
 801068a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801068c:	69fb      	ldr	r3, [r7, #28]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d002      	beq.n	8010698 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010692:	69fb      	ldr	r3, [r7, #28]
 8010694:	68ba      	ldr	r2, [r7, #8]
 8010696:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010698:	69fb      	ldr	r3, [r7, #28]
	}
 801069a:	4618      	mov	r0, r3
 801069c:	3720      	adds	r7, #32
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}

080106a2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80106a2:	b580      	push	{r7, lr}
 80106a4:	b086      	sub	sp, #24
 80106a6:	af00      	add	r7, sp, #0
 80106a8:	6078      	str	r0, [r7, #4]
 80106aa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d109      	bne.n	80106c6 <xQueueCreateCountingSemaphore+0x24>
 80106b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106b6:	f383 8811 	msr	BASEPRI, r3
 80106ba:	f3bf 8f6f 	isb	sy
 80106be:	f3bf 8f4f 	dsb	sy
 80106c2:	613b      	str	r3, [r7, #16]
 80106c4:	e7fe      	b.n	80106c4 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 80106c6:	683a      	ldr	r2, [r7, #0]
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	429a      	cmp	r2, r3
 80106cc:	d909      	bls.n	80106e2 <xQueueCreateCountingSemaphore+0x40>
 80106ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106d2:	f383 8811 	msr	BASEPRI, r3
 80106d6:	f3bf 8f6f 	isb	sy
 80106da:	f3bf 8f4f 	dsb	sy
 80106de:	60fb      	str	r3, [r7, #12]
 80106e0:	e7fe      	b.n	80106e0 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80106e2:	2202      	movs	r2, #2
 80106e4:	2100      	movs	r1, #0
 80106e6:	6878      	ldr	r0, [r7, #4]
 80106e8:	f7ff fe8f 	bl	801040a <xQueueGenericCreate>
 80106ec:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d002      	beq.n	80106fa <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80106f4:	697b      	ldr	r3, [r7, #20]
 80106f6:	683a      	ldr	r2, [r7, #0]
 80106f8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80106fa:	697b      	ldr	r3, [r7, #20]
	}
 80106fc:	4618      	mov	r0, r3
 80106fe:	3718      	adds	r7, #24
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}

08010704 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b08e      	sub	sp, #56	; 0x38
 8010708:	af00      	add	r7, sp, #0
 801070a:	60f8      	str	r0, [r7, #12]
 801070c:	60b9      	str	r1, [r7, #8]
 801070e:	607a      	str	r2, [r7, #4]
 8010710:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010712:	2300      	movs	r3, #0
 8010714:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801071a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801071c:	2b00      	cmp	r3, #0
 801071e:	d109      	bne.n	8010734 <xQueueGenericSend+0x30>
 8010720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010724:	f383 8811 	msr	BASEPRI, r3
 8010728:	f3bf 8f6f 	isb	sy
 801072c:	f3bf 8f4f 	dsb	sy
 8010730:	62bb      	str	r3, [r7, #40]	; 0x28
 8010732:	e7fe      	b.n	8010732 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d103      	bne.n	8010742 <xQueueGenericSend+0x3e>
 801073a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801073c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801073e:	2b00      	cmp	r3, #0
 8010740:	d101      	bne.n	8010746 <xQueueGenericSend+0x42>
 8010742:	2301      	movs	r3, #1
 8010744:	e000      	b.n	8010748 <xQueueGenericSend+0x44>
 8010746:	2300      	movs	r3, #0
 8010748:	2b00      	cmp	r3, #0
 801074a:	d109      	bne.n	8010760 <xQueueGenericSend+0x5c>
 801074c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010750:	f383 8811 	msr	BASEPRI, r3
 8010754:	f3bf 8f6f 	isb	sy
 8010758:	f3bf 8f4f 	dsb	sy
 801075c:	627b      	str	r3, [r7, #36]	; 0x24
 801075e:	e7fe      	b.n	801075e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	2b02      	cmp	r3, #2
 8010764:	d103      	bne.n	801076e <xQueueGenericSend+0x6a>
 8010766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801076a:	2b01      	cmp	r3, #1
 801076c:	d101      	bne.n	8010772 <xQueueGenericSend+0x6e>
 801076e:	2301      	movs	r3, #1
 8010770:	e000      	b.n	8010774 <xQueueGenericSend+0x70>
 8010772:	2300      	movs	r3, #0
 8010774:	2b00      	cmp	r3, #0
 8010776:	d109      	bne.n	801078c <xQueueGenericSend+0x88>
 8010778:	f04f 0350 	mov.w	r3, #80	; 0x50
 801077c:	f383 8811 	msr	BASEPRI, r3
 8010780:	f3bf 8f6f 	isb	sy
 8010784:	f3bf 8f4f 	dsb	sy
 8010788:	623b      	str	r3, [r7, #32]
 801078a:	e7fe      	b.n	801078a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801078c:	f001 fc7c 	bl	8012088 <xTaskGetSchedulerState>
 8010790:	4603      	mov	r3, r0
 8010792:	2b00      	cmp	r3, #0
 8010794:	d102      	bne.n	801079c <xQueueGenericSend+0x98>
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d101      	bne.n	80107a0 <xQueueGenericSend+0x9c>
 801079c:	2301      	movs	r3, #1
 801079e:	e000      	b.n	80107a2 <xQueueGenericSend+0x9e>
 80107a0:	2300      	movs	r3, #0
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d109      	bne.n	80107ba <xQueueGenericSend+0xb6>
 80107a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107aa:	f383 8811 	msr	BASEPRI, r3
 80107ae:	f3bf 8f6f 	isb	sy
 80107b2:	f3bf 8f4f 	dsb	sy
 80107b6:	61fb      	str	r3, [r7, #28]
 80107b8:	e7fe      	b.n	80107b8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80107ba:	f7ff f9a7 	bl	800fb0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80107be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80107c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107c6:	429a      	cmp	r2, r3
 80107c8:	d302      	bcc.n	80107d0 <xQueueGenericSend+0xcc>
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	2b02      	cmp	r3, #2
 80107ce:	d129      	bne.n	8010824 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80107d0:	683a      	ldr	r2, [r7, #0]
 80107d2:	68b9      	ldr	r1, [r7, #8]
 80107d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107d6:	f000 fc48 	bl	801106a <prvCopyDataToQueue>
 80107da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80107dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d010      	beq.n	8010806 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80107e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e6:	3324      	adds	r3, #36	; 0x24
 80107e8:	4618      	mov	r0, r3
 80107ea:	f001 fa5f 	bl	8011cac <xTaskRemoveFromEventList>
 80107ee:	4603      	mov	r3, r0
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d013      	beq.n	801081c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80107f4:	4b3f      	ldr	r3, [pc, #252]	; (80108f4 <xQueueGenericSend+0x1f0>)
 80107f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107fa:	601a      	str	r2, [r3, #0]
 80107fc:	f3bf 8f4f 	dsb	sy
 8010800:	f3bf 8f6f 	isb	sy
 8010804:	e00a      	b.n	801081c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010808:	2b00      	cmp	r3, #0
 801080a:	d007      	beq.n	801081c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801080c:	4b39      	ldr	r3, [pc, #228]	; (80108f4 <xQueueGenericSend+0x1f0>)
 801080e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010812:	601a      	str	r2, [r3, #0]
 8010814:	f3bf 8f4f 	dsb	sy
 8010818:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801081c:	f7ff f9a4 	bl	800fb68 <vPortExitCritical>
				return pdPASS;
 8010820:	2301      	movs	r3, #1
 8010822:	e063      	b.n	80108ec <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d103      	bne.n	8010832 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801082a:	f7ff f99d 	bl	800fb68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801082e:	2300      	movs	r3, #0
 8010830:	e05c      	b.n	80108ec <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010834:	2b00      	cmp	r3, #0
 8010836:	d106      	bne.n	8010846 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010838:	f107 0314 	add.w	r3, r7, #20
 801083c:	4618      	mov	r0, r3
 801083e:	f001 fa99 	bl	8011d74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010842:	2301      	movs	r3, #1
 8010844:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010846:	f7ff f98f 	bl	800fb68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801084a:	f000 ffdb 	bl	8011804 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801084e:	f7ff f95d 	bl	800fb0c <vPortEnterCritical>
 8010852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010854:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010858:	b25b      	sxtb	r3, r3
 801085a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801085e:	d103      	bne.n	8010868 <xQueueGenericSend+0x164>
 8010860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010862:	2200      	movs	r2, #0
 8010864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801086a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801086e:	b25b      	sxtb	r3, r3
 8010870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010874:	d103      	bne.n	801087e <xQueueGenericSend+0x17a>
 8010876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010878:	2200      	movs	r2, #0
 801087a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801087e:	f7ff f973 	bl	800fb68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010882:	1d3a      	adds	r2, r7, #4
 8010884:	f107 0314 	add.w	r3, r7, #20
 8010888:	4611      	mov	r1, r2
 801088a:	4618      	mov	r0, r3
 801088c:	f001 fa88 	bl	8011da0 <xTaskCheckForTimeOut>
 8010890:	4603      	mov	r3, r0
 8010892:	2b00      	cmp	r3, #0
 8010894:	d124      	bne.n	80108e0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010896:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010898:	f000 fcdf 	bl	801125a <prvIsQueueFull>
 801089c:	4603      	mov	r3, r0
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d018      	beq.n	80108d4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80108a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108a4:	3310      	adds	r3, #16
 80108a6:	687a      	ldr	r2, [r7, #4]
 80108a8:	4611      	mov	r1, r2
 80108aa:	4618      	mov	r0, r3
 80108ac:	f001 f9b0 	bl	8011c10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80108b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108b2:	f000 fc6a 	bl	801118a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80108b6:	f000 ffeb 	bl	8011890 <xTaskResumeAll>
 80108ba:	4603      	mov	r3, r0
 80108bc:	2b00      	cmp	r3, #0
 80108be:	f47f af7c 	bne.w	80107ba <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80108c2:	4b0c      	ldr	r3, [pc, #48]	; (80108f4 <xQueueGenericSend+0x1f0>)
 80108c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108c8:	601a      	str	r2, [r3, #0]
 80108ca:	f3bf 8f4f 	dsb	sy
 80108ce:	f3bf 8f6f 	isb	sy
 80108d2:	e772      	b.n	80107ba <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80108d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108d6:	f000 fc58 	bl	801118a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80108da:	f000 ffd9 	bl	8011890 <xTaskResumeAll>
 80108de:	e76c      	b.n	80107ba <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80108e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108e2:	f000 fc52 	bl	801118a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80108e6:	f000 ffd3 	bl	8011890 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80108ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80108ec:	4618      	mov	r0, r3
 80108ee:	3738      	adds	r7, #56	; 0x38
 80108f0:	46bd      	mov	sp, r7
 80108f2:	bd80      	pop	{r7, pc}
 80108f4:	e000ed04 	.word	0xe000ed04

080108f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b08e      	sub	sp, #56	; 0x38
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	60f8      	str	r0, [r7, #12]
 8010900:	60b9      	str	r1, [r7, #8]
 8010902:	607a      	str	r2, [r7, #4]
 8010904:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801090a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801090c:	2b00      	cmp	r3, #0
 801090e:	d109      	bne.n	8010924 <xQueueGenericSendFromISR+0x2c>
 8010910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010914:	f383 8811 	msr	BASEPRI, r3
 8010918:	f3bf 8f6f 	isb	sy
 801091c:	f3bf 8f4f 	dsb	sy
 8010920:	627b      	str	r3, [r7, #36]	; 0x24
 8010922:	e7fe      	b.n	8010922 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010924:	68bb      	ldr	r3, [r7, #8]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d103      	bne.n	8010932 <xQueueGenericSendFromISR+0x3a>
 801092a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801092e:	2b00      	cmp	r3, #0
 8010930:	d101      	bne.n	8010936 <xQueueGenericSendFromISR+0x3e>
 8010932:	2301      	movs	r3, #1
 8010934:	e000      	b.n	8010938 <xQueueGenericSendFromISR+0x40>
 8010936:	2300      	movs	r3, #0
 8010938:	2b00      	cmp	r3, #0
 801093a:	d109      	bne.n	8010950 <xQueueGenericSendFromISR+0x58>
 801093c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010940:	f383 8811 	msr	BASEPRI, r3
 8010944:	f3bf 8f6f 	isb	sy
 8010948:	f3bf 8f4f 	dsb	sy
 801094c:	623b      	str	r3, [r7, #32]
 801094e:	e7fe      	b.n	801094e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	2b02      	cmp	r3, #2
 8010954:	d103      	bne.n	801095e <xQueueGenericSendFromISR+0x66>
 8010956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801095a:	2b01      	cmp	r3, #1
 801095c:	d101      	bne.n	8010962 <xQueueGenericSendFromISR+0x6a>
 801095e:	2301      	movs	r3, #1
 8010960:	e000      	b.n	8010964 <xQueueGenericSendFromISR+0x6c>
 8010962:	2300      	movs	r3, #0
 8010964:	2b00      	cmp	r3, #0
 8010966:	d109      	bne.n	801097c <xQueueGenericSendFromISR+0x84>
 8010968:	f04f 0350 	mov.w	r3, #80	; 0x50
 801096c:	f383 8811 	msr	BASEPRI, r3
 8010970:	f3bf 8f6f 	isb	sy
 8010974:	f3bf 8f4f 	dsb	sy
 8010978:	61fb      	str	r3, [r7, #28]
 801097a:	e7fe      	b.n	801097a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801097c:	f7ff f9a2 	bl	800fcc4 <vPortValidateInterruptPriority>
	__asm volatile
 8010980:	f3ef 8211 	mrs	r2, BASEPRI
 8010984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010988:	f383 8811 	msr	BASEPRI, r3
 801098c:	f3bf 8f6f 	isb	sy
 8010990:	f3bf 8f4f 	dsb	sy
 8010994:	61ba      	str	r2, [r7, #24]
 8010996:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010998:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801099a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801099c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801099e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80109a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d302      	bcc.n	80109ae <xQueueGenericSendFromISR+0xb6>
 80109a8:	683b      	ldr	r3, [r7, #0]
 80109aa:	2b02      	cmp	r3, #2
 80109ac:	d12c      	bne.n	8010a08 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80109ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80109b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80109b8:	683a      	ldr	r2, [r7, #0]
 80109ba:	68b9      	ldr	r1, [r7, #8]
 80109bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80109be:	f000 fb54 	bl	801106a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80109c2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80109c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109ca:	d112      	bne.n	80109f2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80109cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d016      	beq.n	8010a02 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80109d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109d6:	3324      	adds	r3, #36	; 0x24
 80109d8:	4618      	mov	r0, r3
 80109da:	f001 f967 	bl	8011cac <xTaskRemoveFromEventList>
 80109de:	4603      	mov	r3, r0
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d00e      	beq.n	8010a02 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d00b      	beq.n	8010a02 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	2201      	movs	r2, #1
 80109ee:	601a      	str	r2, [r3, #0]
 80109f0:	e007      	b.n	8010a02 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80109f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80109f6:	3301      	adds	r3, #1
 80109f8:	b2db      	uxtb	r3, r3
 80109fa:	b25a      	sxtb	r2, r3
 80109fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010a02:	2301      	movs	r3, #1
 8010a04:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010a06:	e001      	b.n	8010a0c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010a08:	2300      	movs	r3, #0
 8010a0a:	637b      	str	r3, [r7, #52]	; 0x34
 8010a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a0e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010a10:	693b      	ldr	r3, [r7, #16]
 8010a12:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010a18:	4618      	mov	r0, r3
 8010a1a:	3738      	adds	r7, #56	; 0x38
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd80      	pop	{r7, pc}

08010a20 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b08e      	sub	sp, #56	; 0x38
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
 8010a28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d109      	bne.n	8010a48 <xQueueGiveFromISR+0x28>
	__asm volatile
 8010a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a38:	f383 8811 	msr	BASEPRI, r3
 8010a3c:	f3bf 8f6f 	isb	sy
 8010a40:	f3bf 8f4f 	dsb	sy
 8010a44:	623b      	str	r3, [r7, #32]
 8010a46:	e7fe      	b.n	8010a46 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d009      	beq.n	8010a64 <xQueueGiveFromISR+0x44>
 8010a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a54:	f383 8811 	msr	BASEPRI, r3
 8010a58:	f3bf 8f6f 	isb	sy
 8010a5c:	f3bf 8f4f 	dsb	sy
 8010a60:	61fb      	str	r3, [r7, #28]
 8010a62:	e7fe      	b.n	8010a62 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d103      	bne.n	8010a74 <xQueueGiveFromISR+0x54>
 8010a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a6e:	689b      	ldr	r3, [r3, #8]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d101      	bne.n	8010a78 <xQueueGiveFromISR+0x58>
 8010a74:	2301      	movs	r3, #1
 8010a76:	e000      	b.n	8010a7a <xQueueGiveFromISR+0x5a>
 8010a78:	2300      	movs	r3, #0
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d109      	bne.n	8010a92 <xQueueGiveFromISR+0x72>
 8010a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a82:	f383 8811 	msr	BASEPRI, r3
 8010a86:	f3bf 8f6f 	isb	sy
 8010a8a:	f3bf 8f4f 	dsb	sy
 8010a8e:	61bb      	str	r3, [r7, #24]
 8010a90:	e7fe      	b.n	8010a90 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010a92:	f7ff f917 	bl	800fcc4 <vPortValidateInterruptPriority>
	__asm volatile
 8010a96:	f3ef 8211 	mrs	r2, BASEPRI
 8010a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a9e:	f383 8811 	msr	BASEPRI, r3
 8010aa2:	f3bf 8f6f 	isb	sy
 8010aa6:	f3bf 8f4f 	dsb	sy
 8010aaa:	617a      	str	r2, [r7, #20]
 8010aac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010aae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ab6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010abe:	429a      	cmp	r2, r3
 8010ac0:	d22b      	bcs.n	8010b1a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ac4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010ac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ace:	1c5a      	adds	r2, r3, #1
 8010ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ad2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010ad4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010adc:	d112      	bne.n	8010b04 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d016      	beq.n	8010b14 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ae8:	3324      	adds	r3, #36	; 0x24
 8010aea:	4618      	mov	r0, r3
 8010aec:	f001 f8de 	bl	8011cac <xTaskRemoveFromEventList>
 8010af0:	4603      	mov	r3, r0
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d00e      	beq.n	8010b14 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010af6:	683b      	ldr	r3, [r7, #0]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d00b      	beq.n	8010b14 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010afc:	683b      	ldr	r3, [r7, #0]
 8010afe:	2201      	movs	r2, #1
 8010b00:	601a      	str	r2, [r3, #0]
 8010b02:	e007      	b.n	8010b14 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010b04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b08:	3301      	adds	r3, #1
 8010b0a:	b2db      	uxtb	r3, r3
 8010b0c:	b25a      	sxtb	r2, r3
 8010b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010b14:	2301      	movs	r3, #1
 8010b16:	637b      	str	r3, [r7, #52]	; 0x34
 8010b18:	e001      	b.n	8010b1e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8010b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b20:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	3738      	adds	r7, #56	; 0x38
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}
	...

08010b34 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b08c      	sub	sp, #48	; 0x30
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	60f8      	str	r0, [r7, #12]
 8010b3c:	60b9      	str	r1, [r7, #8]
 8010b3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010b40:	2300      	movs	r3, #0
 8010b42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d109      	bne.n	8010b62 <xQueueReceive+0x2e>
	__asm volatile
 8010b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b52:	f383 8811 	msr	BASEPRI, r3
 8010b56:	f3bf 8f6f 	isb	sy
 8010b5a:	f3bf 8f4f 	dsb	sy
 8010b5e:	623b      	str	r3, [r7, #32]
 8010b60:	e7fe      	b.n	8010b60 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010b62:	68bb      	ldr	r3, [r7, #8]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d103      	bne.n	8010b70 <xQueueReceive+0x3c>
 8010b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d101      	bne.n	8010b74 <xQueueReceive+0x40>
 8010b70:	2301      	movs	r3, #1
 8010b72:	e000      	b.n	8010b76 <xQueueReceive+0x42>
 8010b74:	2300      	movs	r3, #0
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d109      	bne.n	8010b8e <xQueueReceive+0x5a>
 8010b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b7e:	f383 8811 	msr	BASEPRI, r3
 8010b82:	f3bf 8f6f 	isb	sy
 8010b86:	f3bf 8f4f 	dsb	sy
 8010b8a:	61fb      	str	r3, [r7, #28]
 8010b8c:	e7fe      	b.n	8010b8c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010b8e:	f001 fa7b 	bl	8012088 <xTaskGetSchedulerState>
 8010b92:	4603      	mov	r3, r0
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d102      	bne.n	8010b9e <xQueueReceive+0x6a>
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d101      	bne.n	8010ba2 <xQueueReceive+0x6e>
 8010b9e:	2301      	movs	r3, #1
 8010ba0:	e000      	b.n	8010ba4 <xQueueReceive+0x70>
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d109      	bne.n	8010bbc <xQueueReceive+0x88>
 8010ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bac:	f383 8811 	msr	BASEPRI, r3
 8010bb0:	f3bf 8f6f 	isb	sy
 8010bb4:	f3bf 8f4f 	dsb	sy
 8010bb8:	61bb      	str	r3, [r7, #24]
 8010bba:	e7fe      	b.n	8010bba <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010bbc:	f7fe ffa6 	bl	800fb0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bc4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d01f      	beq.n	8010c0c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010bcc:	68b9      	ldr	r1, [r7, #8]
 8010bce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010bd0:	f000 fab5 	bl	801113e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bd6:	1e5a      	subs	r2, r3, #1
 8010bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bda:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bde:	691b      	ldr	r3, [r3, #16]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d00f      	beq.n	8010c04 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010be6:	3310      	adds	r3, #16
 8010be8:	4618      	mov	r0, r3
 8010bea:	f001 f85f 	bl	8011cac <xTaskRemoveFromEventList>
 8010bee:	4603      	mov	r3, r0
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d007      	beq.n	8010c04 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010bf4:	4b3c      	ldr	r3, [pc, #240]	; (8010ce8 <xQueueReceive+0x1b4>)
 8010bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bfa:	601a      	str	r2, [r3, #0]
 8010bfc:	f3bf 8f4f 	dsb	sy
 8010c00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010c04:	f7fe ffb0 	bl	800fb68 <vPortExitCritical>
				return pdPASS;
 8010c08:	2301      	movs	r3, #1
 8010c0a:	e069      	b.n	8010ce0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d103      	bne.n	8010c1a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010c12:	f7fe ffa9 	bl	800fb68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010c16:	2300      	movs	r3, #0
 8010c18:	e062      	b.n	8010ce0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d106      	bne.n	8010c2e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010c20:	f107 0310 	add.w	r3, r7, #16
 8010c24:	4618      	mov	r0, r3
 8010c26:	f001 f8a5 	bl	8011d74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010c2a:	2301      	movs	r3, #1
 8010c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010c2e:	f7fe ff9b 	bl	800fb68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010c32:	f000 fde7 	bl	8011804 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010c36:	f7fe ff69 	bl	800fb0c <vPortEnterCritical>
 8010c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010c40:	b25b      	sxtb	r3, r3
 8010c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c46:	d103      	bne.n	8010c50 <xQueueReceive+0x11c>
 8010c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c56:	b25b      	sxtb	r3, r3
 8010c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c5c:	d103      	bne.n	8010c66 <xQueueReceive+0x132>
 8010c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c60:	2200      	movs	r2, #0
 8010c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010c66:	f7fe ff7f 	bl	800fb68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010c6a:	1d3a      	adds	r2, r7, #4
 8010c6c:	f107 0310 	add.w	r3, r7, #16
 8010c70:	4611      	mov	r1, r2
 8010c72:	4618      	mov	r0, r3
 8010c74:	f001 f894 	bl	8011da0 <xTaskCheckForTimeOut>
 8010c78:	4603      	mov	r3, r0
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d123      	bne.n	8010cc6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010c7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c80:	f000 fad5 	bl	801122e <prvIsQueueEmpty>
 8010c84:	4603      	mov	r3, r0
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d017      	beq.n	8010cba <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c8c:	3324      	adds	r3, #36	; 0x24
 8010c8e:	687a      	ldr	r2, [r7, #4]
 8010c90:	4611      	mov	r1, r2
 8010c92:	4618      	mov	r0, r3
 8010c94:	f000 ffbc 	bl	8011c10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010c98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c9a:	f000 fa76 	bl	801118a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010c9e:	f000 fdf7 	bl	8011890 <xTaskResumeAll>
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d189      	bne.n	8010bbc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8010ca8:	4b0f      	ldr	r3, [pc, #60]	; (8010ce8 <xQueueReceive+0x1b4>)
 8010caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010cae:	601a      	str	r2, [r3, #0]
 8010cb0:	f3bf 8f4f 	dsb	sy
 8010cb4:	f3bf 8f6f 	isb	sy
 8010cb8:	e780      	b.n	8010bbc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010cba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010cbc:	f000 fa65 	bl	801118a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010cc0:	f000 fde6 	bl	8011890 <xTaskResumeAll>
 8010cc4:	e77a      	b.n	8010bbc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010cc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010cc8:	f000 fa5f 	bl	801118a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010ccc:	f000 fde0 	bl	8011890 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010cd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010cd2:	f000 faac 	bl	801122e <prvIsQueueEmpty>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	f43f af6f 	beq.w	8010bbc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010cde:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	3730      	adds	r7, #48	; 0x30
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}
 8010ce8:	e000ed04 	.word	0xe000ed04

08010cec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b08e      	sub	sp, #56	; 0x38
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
 8010cf4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010cfe:	2300      	movs	r3, #0
 8010d00:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d109      	bne.n	8010d1c <xQueueSemaphoreTake+0x30>
 8010d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d0c:	f383 8811 	msr	BASEPRI, r3
 8010d10:	f3bf 8f6f 	isb	sy
 8010d14:	f3bf 8f4f 	dsb	sy
 8010d18:	623b      	str	r3, [r7, #32]
 8010d1a:	e7fe      	b.n	8010d1a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d009      	beq.n	8010d38 <xQueueSemaphoreTake+0x4c>
 8010d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d28:	f383 8811 	msr	BASEPRI, r3
 8010d2c:	f3bf 8f6f 	isb	sy
 8010d30:	f3bf 8f4f 	dsb	sy
 8010d34:	61fb      	str	r3, [r7, #28]
 8010d36:	e7fe      	b.n	8010d36 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010d38:	f001 f9a6 	bl	8012088 <xTaskGetSchedulerState>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d102      	bne.n	8010d48 <xQueueSemaphoreTake+0x5c>
 8010d42:	683b      	ldr	r3, [r7, #0]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d101      	bne.n	8010d4c <xQueueSemaphoreTake+0x60>
 8010d48:	2301      	movs	r3, #1
 8010d4a:	e000      	b.n	8010d4e <xQueueSemaphoreTake+0x62>
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d109      	bne.n	8010d66 <xQueueSemaphoreTake+0x7a>
 8010d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d56:	f383 8811 	msr	BASEPRI, r3
 8010d5a:	f3bf 8f6f 	isb	sy
 8010d5e:	f3bf 8f4f 	dsb	sy
 8010d62:	61bb      	str	r3, [r7, #24]
 8010d64:	e7fe      	b.n	8010d64 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010d66:	f7fe fed1 	bl	800fb0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d6e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d024      	beq.n	8010dc0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d78:	1e5a      	subs	r2, r3, #1
 8010d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d7c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d104      	bne.n	8010d90 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010d86:	f001 faf1 	bl	801236c <pvTaskIncrementMutexHeldCount>
 8010d8a:	4602      	mov	r2, r0
 8010d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d8e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d92:	691b      	ldr	r3, [r3, #16]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d00f      	beq.n	8010db8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d9a:	3310      	adds	r3, #16
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f000 ff85 	bl	8011cac <xTaskRemoveFromEventList>
 8010da2:	4603      	mov	r3, r0
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d007      	beq.n	8010db8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010da8:	4b53      	ldr	r3, [pc, #332]	; (8010ef8 <xQueueSemaphoreTake+0x20c>)
 8010daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010dae:	601a      	str	r2, [r3, #0]
 8010db0:	f3bf 8f4f 	dsb	sy
 8010db4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010db8:	f7fe fed6 	bl	800fb68 <vPortExitCritical>
				return pdPASS;
 8010dbc:	2301      	movs	r3, #1
 8010dbe:	e096      	b.n	8010eee <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010dc0:	683b      	ldr	r3, [r7, #0]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d110      	bne.n	8010de8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d009      	beq.n	8010de0 <xQueueSemaphoreTake+0xf4>
 8010dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dd0:	f383 8811 	msr	BASEPRI, r3
 8010dd4:	f3bf 8f6f 	isb	sy
 8010dd8:	f3bf 8f4f 	dsb	sy
 8010ddc:	617b      	str	r3, [r7, #20]
 8010dde:	e7fe      	b.n	8010dde <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010de0:	f7fe fec2 	bl	800fb68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010de4:	2300      	movs	r3, #0
 8010de6:	e082      	b.n	8010eee <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d106      	bne.n	8010dfc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010dee:	f107 030c 	add.w	r3, r7, #12
 8010df2:	4618      	mov	r0, r3
 8010df4:	f000 ffbe 	bl	8011d74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010df8:	2301      	movs	r3, #1
 8010dfa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010dfc:	f7fe feb4 	bl	800fb68 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010e00:	f000 fd00 	bl	8011804 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010e04:	f7fe fe82 	bl	800fb0c <vPortEnterCritical>
 8010e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010e0e:	b25b      	sxtb	r3, r3
 8010e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e14:	d103      	bne.n	8010e1e <xQueueSemaphoreTake+0x132>
 8010e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e18:	2200      	movs	r2, #0
 8010e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010e24:	b25b      	sxtb	r3, r3
 8010e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e2a:	d103      	bne.n	8010e34 <xQueueSemaphoreTake+0x148>
 8010e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e2e:	2200      	movs	r2, #0
 8010e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010e34:	f7fe fe98 	bl	800fb68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010e38:	463a      	mov	r2, r7
 8010e3a:	f107 030c 	add.w	r3, r7, #12
 8010e3e:	4611      	mov	r1, r2
 8010e40:	4618      	mov	r0, r3
 8010e42:	f000 ffad 	bl	8011da0 <xTaskCheckForTimeOut>
 8010e46:	4603      	mov	r3, r0
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d132      	bne.n	8010eb2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010e4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e4e:	f000 f9ee 	bl	801122e <prvIsQueueEmpty>
 8010e52:	4603      	mov	r3, r0
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d026      	beq.n	8010ea6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d109      	bne.n	8010e74 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8010e60:	f7fe fe54 	bl	800fb0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e66:	689b      	ldr	r3, [r3, #8]
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f001 f92b 	bl	80120c4 <xTaskPriorityInherit>
 8010e6e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010e70:	f7fe fe7a 	bl	800fb68 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e76:	3324      	adds	r3, #36	; 0x24
 8010e78:	683a      	ldr	r2, [r7, #0]
 8010e7a:	4611      	mov	r1, r2
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	f000 fec7 	bl	8011c10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010e82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e84:	f000 f981 	bl	801118a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010e88:	f000 fd02 	bl	8011890 <xTaskResumeAll>
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	f47f af69 	bne.w	8010d66 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8010e94:	4b18      	ldr	r3, [pc, #96]	; (8010ef8 <xQueueSemaphoreTake+0x20c>)
 8010e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e9a:	601a      	str	r2, [r3, #0]
 8010e9c:	f3bf 8f4f 	dsb	sy
 8010ea0:	f3bf 8f6f 	isb	sy
 8010ea4:	e75f      	b.n	8010d66 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010ea6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ea8:	f000 f96f 	bl	801118a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010eac:	f000 fcf0 	bl	8011890 <xTaskResumeAll>
 8010eb0:	e759      	b.n	8010d66 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010eb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010eb4:	f000 f969 	bl	801118a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010eb8:	f000 fcea 	bl	8011890 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010ebc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ebe:	f000 f9b6 	bl	801122e <prvIsQueueEmpty>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	f43f af4e 	beq.w	8010d66 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d00d      	beq.n	8010eec <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8010ed0:	f7fe fe1c 	bl	800fb0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010ed4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ed6:	f000 f8b0 	bl	801103a <prvGetDisinheritPriorityAfterTimeout>
 8010eda:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ede:	689b      	ldr	r3, [r3, #8]
 8010ee0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	f001 f9c2 	bl	801226c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010ee8:	f7fe fe3e 	bl	800fb68 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010eec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010eee:	4618      	mov	r0, r3
 8010ef0:	3738      	adds	r7, #56	; 0x38
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	bd80      	pop	{r7, pc}
 8010ef6:	bf00      	nop
 8010ef8:	e000ed04 	.word	0xe000ed04

08010efc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010efc:	b580      	push	{r7, lr}
 8010efe:	b08e      	sub	sp, #56	; 0x38
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	60f8      	str	r0, [r7, #12]
 8010f04:	60b9      	str	r1, [r7, #8]
 8010f06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d109      	bne.n	8010f26 <xQueueReceiveFromISR+0x2a>
 8010f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f16:	f383 8811 	msr	BASEPRI, r3
 8010f1a:	f3bf 8f6f 	isb	sy
 8010f1e:	f3bf 8f4f 	dsb	sy
 8010f22:	623b      	str	r3, [r7, #32]
 8010f24:	e7fe      	b.n	8010f24 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010f26:	68bb      	ldr	r3, [r7, #8]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d103      	bne.n	8010f34 <xQueueReceiveFromISR+0x38>
 8010f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d101      	bne.n	8010f38 <xQueueReceiveFromISR+0x3c>
 8010f34:	2301      	movs	r3, #1
 8010f36:	e000      	b.n	8010f3a <xQueueReceiveFromISR+0x3e>
 8010f38:	2300      	movs	r3, #0
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d109      	bne.n	8010f52 <xQueueReceiveFromISR+0x56>
 8010f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f42:	f383 8811 	msr	BASEPRI, r3
 8010f46:	f3bf 8f6f 	isb	sy
 8010f4a:	f3bf 8f4f 	dsb	sy
 8010f4e:	61fb      	str	r3, [r7, #28]
 8010f50:	e7fe      	b.n	8010f50 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010f52:	f7fe feb7 	bl	800fcc4 <vPortValidateInterruptPriority>
	__asm volatile
 8010f56:	f3ef 8211 	mrs	r2, BASEPRI
 8010f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f5e:	f383 8811 	msr	BASEPRI, r3
 8010f62:	f3bf 8f6f 	isb	sy
 8010f66:	f3bf 8f4f 	dsb	sy
 8010f6a:	61ba      	str	r2, [r7, #24]
 8010f6c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010f6e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010f70:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f76:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d02f      	beq.n	8010fde <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010f88:	68b9      	ldr	r1, [r7, #8]
 8010f8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f8c:	f000 f8d7 	bl	801113e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f92:	1e5a      	subs	r2, r3, #1
 8010f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f96:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010f98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fa0:	d112      	bne.n	8010fc8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fa4:	691b      	ldr	r3, [r3, #16]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d016      	beq.n	8010fd8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fac:	3310      	adds	r3, #16
 8010fae:	4618      	mov	r0, r3
 8010fb0:	f000 fe7c 	bl	8011cac <xTaskRemoveFromEventList>
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d00e      	beq.n	8010fd8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d00b      	beq.n	8010fd8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	2201      	movs	r2, #1
 8010fc4:	601a      	str	r2, [r3, #0]
 8010fc6:	e007      	b.n	8010fd8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010fcc:	3301      	adds	r3, #1
 8010fce:	b2db      	uxtb	r3, r3
 8010fd0:	b25a      	sxtb	r2, r3
 8010fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010fd8:	2301      	movs	r3, #1
 8010fda:	637b      	str	r3, [r7, #52]	; 0x34
 8010fdc:	e001      	b.n	8010fe2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8010fde:	2300      	movs	r3, #0
 8010fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8010fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010fe6:	693b      	ldr	r3, [r7, #16]
 8010fe8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	3738      	adds	r7, #56	; 0x38
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	bd80      	pop	{r7, pc}

08010ff6 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010ff6:	b580      	push	{r7, lr}
 8010ff8:	b084      	sub	sp, #16
 8010ffa:	af00      	add	r7, sp, #0
 8010ffc:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d109      	bne.n	801101c <vQueueDelete+0x26>
	__asm volatile
 8011008:	f04f 0350 	mov.w	r3, #80	; 0x50
 801100c:	f383 8811 	msr	BASEPRI, r3
 8011010:	f3bf 8f6f 	isb	sy
 8011014:	f3bf 8f4f 	dsb	sy
 8011018:	60bb      	str	r3, [r7, #8]
 801101a:	e7fe      	b.n	801101a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801101c:	68f8      	ldr	r0, [r7, #12]
 801101e:	f000 f95d 	bl	80112dc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8011028:	2b00      	cmp	r3, #0
 801102a:	d102      	bne.n	8011032 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 801102c:	68f8      	ldr	r0, [r7, #12]
 801102e:	f7fe ff49 	bl	800fec4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011032:	bf00      	nop
 8011034:	3710      	adds	r7, #16
 8011036:	46bd      	mov	sp, r7
 8011038:	bd80      	pop	{r7, pc}

0801103a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801103a:	b480      	push	{r7}
 801103c:	b085      	sub	sp, #20
 801103e:	af00      	add	r7, sp, #0
 8011040:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011046:	2b00      	cmp	r3, #0
 8011048:	d006      	beq.n	8011058 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8011054:	60fb      	str	r3, [r7, #12]
 8011056:	e001      	b.n	801105c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011058:	2300      	movs	r3, #0
 801105a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801105c:	68fb      	ldr	r3, [r7, #12]
	}
 801105e:	4618      	mov	r0, r3
 8011060:	3714      	adds	r7, #20
 8011062:	46bd      	mov	sp, r7
 8011064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011068:	4770      	bx	lr

0801106a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801106a:	b580      	push	{r7, lr}
 801106c:	b086      	sub	sp, #24
 801106e:	af00      	add	r7, sp, #0
 8011070:	60f8      	str	r0, [r7, #12]
 8011072:	60b9      	str	r1, [r7, #8]
 8011074:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011076:	2300      	movs	r3, #0
 8011078:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801107e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011084:	2b00      	cmp	r3, #0
 8011086:	d10d      	bne.n	80110a4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d14d      	bne.n	801112c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	689b      	ldr	r3, [r3, #8]
 8011094:	4618      	mov	r0, r3
 8011096:	f001 f87d 	bl	8012194 <xTaskPriorityDisinherit>
 801109a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	2200      	movs	r2, #0
 80110a0:	609a      	str	r2, [r3, #8]
 80110a2:	e043      	b.n	801112c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d119      	bne.n	80110de <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	6858      	ldr	r0, [r3, #4]
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110b2:	461a      	mov	r2, r3
 80110b4:	68b9      	ldr	r1, [r7, #8]
 80110b6:	f001 ffa9 	bl	801300c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	685a      	ldr	r2, [r3, #4]
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110c2:	441a      	add	r2, r3
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	685a      	ldr	r2, [r3, #4]
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	689b      	ldr	r3, [r3, #8]
 80110d0:	429a      	cmp	r2, r3
 80110d2:	d32b      	bcc.n	801112c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	681a      	ldr	r2, [r3, #0]
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	605a      	str	r2, [r3, #4]
 80110dc:	e026      	b.n	801112c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	68d8      	ldr	r0, [r3, #12]
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110e6:	461a      	mov	r2, r3
 80110e8:	68b9      	ldr	r1, [r7, #8]
 80110ea:	f001 ff8f 	bl	801300c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	68da      	ldr	r2, [r3, #12]
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110f6:	425b      	negs	r3, r3
 80110f8:	441a      	add	r2, r3
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	68da      	ldr	r2, [r3, #12]
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	429a      	cmp	r2, r3
 8011108:	d207      	bcs.n	801111a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	689a      	ldr	r2, [r3, #8]
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011112:	425b      	negs	r3, r3
 8011114:	441a      	add	r2, r3
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	2b02      	cmp	r3, #2
 801111e:	d105      	bne.n	801112c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011120:	693b      	ldr	r3, [r7, #16]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d002      	beq.n	801112c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011126:	693b      	ldr	r3, [r7, #16]
 8011128:	3b01      	subs	r3, #1
 801112a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801112c:	693b      	ldr	r3, [r7, #16]
 801112e:	1c5a      	adds	r2, r3, #1
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011134:	697b      	ldr	r3, [r7, #20]
}
 8011136:	4618      	mov	r0, r3
 8011138:	3718      	adds	r7, #24
 801113a:	46bd      	mov	sp, r7
 801113c:	bd80      	pop	{r7, pc}

0801113e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801113e:	b580      	push	{r7, lr}
 8011140:	b082      	sub	sp, #8
 8011142:	af00      	add	r7, sp, #0
 8011144:	6078      	str	r0, [r7, #4]
 8011146:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801114c:	2b00      	cmp	r3, #0
 801114e:	d018      	beq.n	8011182 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	68da      	ldr	r2, [r3, #12]
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011158:	441a      	add	r2, r3
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	68da      	ldr	r2, [r3, #12]
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	689b      	ldr	r3, [r3, #8]
 8011166:	429a      	cmp	r2, r3
 8011168:	d303      	bcc.n	8011172 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681a      	ldr	r2, [r3, #0]
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	68d9      	ldr	r1, [r3, #12]
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801117a:	461a      	mov	r2, r3
 801117c:	6838      	ldr	r0, [r7, #0]
 801117e:	f001 ff45 	bl	801300c <memcpy>
	}
}
 8011182:	bf00      	nop
 8011184:	3708      	adds	r7, #8
 8011186:	46bd      	mov	sp, r7
 8011188:	bd80      	pop	{r7, pc}

0801118a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801118a:	b580      	push	{r7, lr}
 801118c:	b084      	sub	sp, #16
 801118e:	af00      	add	r7, sp, #0
 8011190:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011192:	f7fe fcbb 	bl	800fb0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801119c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801119e:	e011      	b.n	80111c4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d012      	beq.n	80111ce <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	3324      	adds	r3, #36	; 0x24
 80111ac:	4618      	mov	r0, r3
 80111ae:	f000 fd7d 	bl	8011cac <xTaskRemoveFromEventList>
 80111b2:	4603      	mov	r3, r0
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d001      	beq.n	80111bc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80111b8:	f000 fe52 	bl	8011e60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80111bc:	7bfb      	ldrb	r3, [r7, #15]
 80111be:	3b01      	subs	r3, #1
 80111c0:	b2db      	uxtb	r3, r3
 80111c2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80111c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	dce9      	bgt.n	80111a0 <prvUnlockQueue+0x16>
 80111cc:	e000      	b.n	80111d0 <prvUnlockQueue+0x46>
					break;
 80111ce:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	22ff      	movs	r2, #255	; 0xff
 80111d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80111d8:	f7fe fcc6 	bl	800fb68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80111dc:	f7fe fc96 	bl	800fb0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80111e6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80111e8:	e011      	b.n	801120e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	691b      	ldr	r3, [r3, #16]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d012      	beq.n	8011218 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	3310      	adds	r3, #16
 80111f6:	4618      	mov	r0, r3
 80111f8:	f000 fd58 	bl	8011cac <xTaskRemoveFromEventList>
 80111fc:	4603      	mov	r3, r0
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d001      	beq.n	8011206 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011202:	f000 fe2d 	bl	8011e60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011206:	7bbb      	ldrb	r3, [r7, #14]
 8011208:	3b01      	subs	r3, #1
 801120a:	b2db      	uxtb	r3, r3
 801120c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801120e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011212:	2b00      	cmp	r3, #0
 8011214:	dce9      	bgt.n	80111ea <prvUnlockQueue+0x60>
 8011216:	e000      	b.n	801121a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011218:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	22ff      	movs	r2, #255	; 0xff
 801121e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011222:	f7fe fca1 	bl	800fb68 <vPortExitCritical>
}
 8011226:	bf00      	nop
 8011228:	3710      	adds	r7, #16
 801122a:	46bd      	mov	sp, r7
 801122c:	bd80      	pop	{r7, pc}

0801122e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801122e:	b580      	push	{r7, lr}
 8011230:	b084      	sub	sp, #16
 8011232:	af00      	add	r7, sp, #0
 8011234:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011236:	f7fe fc69 	bl	800fb0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801123e:	2b00      	cmp	r3, #0
 8011240:	d102      	bne.n	8011248 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011242:	2301      	movs	r3, #1
 8011244:	60fb      	str	r3, [r7, #12]
 8011246:	e001      	b.n	801124c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011248:	2300      	movs	r3, #0
 801124a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801124c:	f7fe fc8c 	bl	800fb68 <vPortExitCritical>

	return xReturn;
 8011250:	68fb      	ldr	r3, [r7, #12]
}
 8011252:	4618      	mov	r0, r3
 8011254:	3710      	adds	r7, #16
 8011256:	46bd      	mov	sp, r7
 8011258:	bd80      	pop	{r7, pc}

0801125a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801125a:	b580      	push	{r7, lr}
 801125c:	b084      	sub	sp, #16
 801125e:	af00      	add	r7, sp, #0
 8011260:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011262:	f7fe fc53 	bl	800fb0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801126e:	429a      	cmp	r2, r3
 8011270:	d102      	bne.n	8011278 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011272:	2301      	movs	r3, #1
 8011274:	60fb      	str	r3, [r7, #12]
 8011276:	e001      	b.n	801127c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011278:	2300      	movs	r3, #0
 801127a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801127c:	f7fe fc74 	bl	800fb68 <vPortExitCritical>

	return xReturn;
 8011280:	68fb      	ldr	r3, [r7, #12]
}
 8011282:	4618      	mov	r0, r3
 8011284:	3710      	adds	r7, #16
 8011286:	46bd      	mov	sp, r7
 8011288:	bd80      	pop	{r7, pc}
	...

0801128c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801128c:	b480      	push	{r7}
 801128e:	b085      	sub	sp, #20
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
 8011294:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011296:	2300      	movs	r3, #0
 8011298:	60fb      	str	r3, [r7, #12]
 801129a:	e014      	b.n	80112c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801129c:	4a0e      	ldr	r2, [pc, #56]	; (80112d8 <vQueueAddToRegistry+0x4c>)
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d10b      	bne.n	80112c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80112a8:	490b      	ldr	r1, [pc, #44]	; (80112d8 <vQueueAddToRegistry+0x4c>)
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	683a      	ldr	r2, [r7, #0]
 80112ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80112b2:	4a09      	ldr	r2, [pc, #36]	; (80112d8 <vQueueAddToRegistry+0x4c>)
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	00db      	lsls	r3, r3, #3
 80112b8:	4413      	add	r3, r2
 80112ba:	687a      	ldr	r2, [r7, #4]
 80112bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80112be:	e005      	b.n	80112cc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	3301      	adds	r3, #1
 80112c4:	60fb      	str	r3, [r7, #12]
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	2b07      	cmp	r3, #7
 80112ca:	d9e7      	bls.n	801129c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80112cc:	bf00      	nop
 80112ce:	3714      	adds	r7, #20
 80112d0:	46bd      	mov	sp, r7
 80112d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d6:	4770      	bx	lr
 80112d8:	20006074 	.word	0x20006074

080112dc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80112dc:	b480      	push	{r7}
 80112de:	b085      	sub	sp, #20
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80112e4:	2300      	movs	r3, #0
 80112e6:	60fb      	str	r3, [r7, #12]
 80112e8:	e016      	b.n	8011318 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80112ea:	4a10      	ldr	r2, [pc, #64]	; (801132c <vQueueUnregisterQueue+0x50>)
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	00db      	lsls	r3, r3, #3
 80112f0:	4413      	add	r3, r2
 80112f2:	685b      	ldr	r3, [r3, #4]
 80112f4:	687a      	ldr	r2, [r7, #4]
 80112f6:	429a      	cmp	r2, r3
 80112f8:	d10b      	bne.n	8011312 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80112fa:	4a0c      	ldr	r2, [pc, #48]	; (801132c <vQueueUnregisterQueue+0x50>)
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	2100      	movs	r1, #0
 8011300:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011304:	4a09      	ldr	r2, [pc, #36]	; (801132c <vQueueUnregisterQueue+0x50>)
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	00db      	lsls	r3, r3, #3
 801130a:	4413      	add	r3, r2
 801130c:	2200      	movs	r2, #0
 801130e:	605a      	str	r2, [r3, #4]
				break;
 8011310:	e005      	b.n	801131e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	3301      	adds	r3, #1
 8011316:	60fb      	str	r3, [r7, #12]
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	2b07      	cmp	r3, #7
 801131c:	d9e5      	bls.n	80112ea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801131e:	bf00      	nop
 8011320:	3714      	adds	r7, #20
 8011322:	46bd      	mov	sp, r7
 8011324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011328:	4770      	bx	lr
 801132a:	bf00      	nop
 801132c:	20006074 	.word	0x20006074

08011330 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011330:	b580      	push	{r7, lr}
 8011332:	b086      	sub	sp, #24
 8011334:	af00      	add	r7, sp, #0
 8011336:	60f8      	str	r0, [r7, #12]
 8011338:	60b9      	str	r1, [r7, #8]
 801133a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011340:	f7fe fbe4 	bl	800fb0c <vPortEnterCritical>
 8011344:	697b      	ldr	r3, [r7, #20]
 8011346:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801134a:	b25b      	sxtb	r3, r3
 801134c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011350:	d103      	bne.n	801135a <vQueueWaitForMessageRestricted+0x2a>
 8011352:	697b      	ldr	r3, [r7, #20]
 8011354:	2200      	movs	r2, #0
 8011356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801135a:	697b      	ldr	r3, [r7, #20]
 801135c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011360:	b25b      	sxtb	r3, r3
 8011362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011366:	d103      	bne.n	8011370 <vQueueWaitForMessageRestricted+0x40>
 8011368:	697b      	ldr	r3, [r7, #20]
 801136a:	2200      	movs	r2, #0
 801136c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011370:	f7fe fbfa 	bl	800fb68 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011374:	697b      	ldr	r3, [r7, #20]
 8011376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011378:	2b00      	cmp	r3, #0
 801137a:	d106      	bne.n	801138a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801137c:	697b      	ldr	r3, [r7, #20]
 801137e:	3324      	adds	r3, #36	; 0x24
 8011380:	687a      	ldr	r2, [r7, #4]
 8011382:	68b9      	ldr	r1, [r7, #8]
 8011384:	4618      	mov	r0, r3
 8011386:	f000 fc67 	bl	8011c58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801138a:	6978      	ldr	r0, [r7, #20]
 801138c:	f7ff fefd 	bl	801118a <prvUnlockQueue>
	}
 8011390:	bf00      	nop
 8011392:	3718      	adds	r7, #24
 8011394:	46bd      	mov	sp, r7
 8011396:	bd80      	pop	{r7, pc}

08011398 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011398:	b580      	push	{r7, lr}
 801139a:	b08e      	sub	sp, #56	; 0x38
 801139c:	af04      	add	r7, sp, #16
 801139e:	60f8      	str	r0, [r7, #12]
 80113a0:	60b9      	str	r1, [r7, #8]
 80113a2:	607a      	str	r2, [r7, #4]
 80113a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80113a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d109      	bne.n	80113c0 <xTaskCreateStatic+0x28>
 80113ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113b0:	f383 8811 	msr	BASEPRI, r3
 80113b4:	f3bf 8f6f 	isb	sy
 80113b8:	f3bf 8f4f 	dsb	sy
 80113bc:	623b      	str	r3, [r7, #32]
 80113be:	e7fe      	b.n	80113be <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80113c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d109      	bne.n	80113da <xTaskCreateStatic+0x42>
 80113c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113ca:	f383 8811 	msr	BASEPRI, r3
 80113ce:	f3bf 8f6f 	isb	sy
 80113d2:	f3bf 8f4f 	dsb	sy
 80113d6:	61fb      	str	r3, [r7, #28]
 80113d8:	e7fe      	b.n	80113d8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80113da:	235c      	movs	r3, #92	; 0x5c
 80113dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80113de:	693b      	ldr	r3, [r7, #16]
 80113e0:	2b5c      	cmp	r3, #92	; 0x5c
 80113e2:	d009      	beq.n	80113f8 <xTaskCreateStatic+0x60>
 80113e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113e8:	f383 8811 	msr	BASEPRI, r3
 80113ec:	f3bf 8f6f 	isb	sy
 80113f0:	f3bf 8f4f 	dsb	sy
 80113f4:	61bb      	str	r3, [r7, #24]
 80113f6:	e7fe      	b.n	80113f6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80113f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80113fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d01e      	beq.n	801143e <xTaskCreateStatic+0xa6>
 8011400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011402:	2b00      	cmp	r3, #0
 8011404:	d01b      	beq.n	801143e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011408:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801140c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801140e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011412:	2202      	movs	r2, #2
 8011414:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011418:	2300      	movs	r3, #0
 801141a:	9303      	str	r3, [sp, #12]
 801141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801141e:	9302      	str	r3, [sp, #8]
 8011420:	f107 0314 	add.w	r3, r7, #20
 8011424:	9301      	str	r3, [sp, #4]
 8011426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011428:	9300      	str	r3, [sp, #0]
 801142a:	683b      	ldr	r3, [r7, #0]
 801142c:	687a      	ldr	r2, [r7, #4]
 801142e:	68b9      	ldr	r1, [r7, #8]
 8011430:	68f8      	ldr	r0, [r7, #12]
 8011432:	f000 f850 	bl	80114d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011436:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011438:	f000 f8dc 	bl	80115f4 <prvAddNewTaskToReadyList>
 801143c:	e001      	b.n	8011442 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 801143e:	2300      	movs	r3, #0
 8011440:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011442:	697b      	ldr	r3, [r7, #20]
	}
 8011444:	4618      	mov	r0, r3
 8011446:	3728      	adds	r7, #40	; 0x28
 8011448:	46bd      	mov	sp, r7
 801144a:	bd80      	pop	{r7, pc}

0801144c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801144c:	b580      	push	{r7, lr}
 801144e:	b08c      	sub	sp, #48	; 0x30
 8011450:	af04      	add	r7, sp, #16
 8011452:	60f8      	str	r0, [r7, #12]
 8011454:	60b9      	str	r1, [r7, #8]
 8011456:	603b      	str	r3, [r7, #0]
 8011458:	4613      	mov	r3, r2
 801145a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801145c:	88fb      	ldrh	r3, [r7, #6]
 801145e:	009b      	lsls	r3, r3, #2
 8011460:	4618      	mov	r0, r3
 8011462:	f7fe fc6d 	bl	800fd40 <pvPortMalloc>
 8011466:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011468:	697b      	ldr	r3, [r7, #20]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d00e      	beq.n	801148c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801146e:	205c      	movs	r0, #92	; 0x5c
 8011470:	f7fe fc66 	bl	800fd40 <pvPortMalloc>
 8011474:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011476:	69fb      	ldr	r3, [r7, #28]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d003      	beq.n	8011484 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801147c:	69fb      	ldr	r3, [r7, #28]
 801147e:	697a      	ldr	r2, [r7, #20]
 8011480:	631a      	str	r2, [r3, #48]	; 0x30
 8011482:	e005      	b.n	8011490 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011484:	6978      	ldr	r0, [r7, #20]
 8011486:	f7fe fd1d 	bl	800fec4 <vPortFree>
 801148a:	e001      	b.n	8011490 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801148c:	2300      	movs	r3, #0
 801148e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011490:	69fb      	ldr	r3, [r7, #28]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d017      	beq.n	80114c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011496:	69fb      	ldr	r3, [r7, #28]
 8011498:	2200      	movs	r2, #0
 801149a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801149e:	88fa      	ldrh	r2, [r7, #6]
 80114a0:	2300      	movs	r3, #0
 80114a2:	9303      	str	r3, [sp, #12]
 80114a4:	69fb      	ldr	r3, [r7, #28]
 80114a6:	9302      	str	r3, [sp, #8]
 80114a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114aa:	9301      	str	r3, [sp, #4]
 80114ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ae:	9300      	str	r3, [sp, #0]
 80114b0:	683b      	ldr	r3, [r7, #0]
 80114b2:	68b9      	ldr	r1, [r7, #8]
 80114b4:	68f8      	ldr	r0, [r7, #12]
 80114b6:	f000 f80e 	bl	80114d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80114ba:	69f8      	ldr	r0, [r7, #28]
 80114bc:	f000 f89a 	bl	80115f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80114c0:	2301      	movs	r3, #1
 80114c2:	61bb      	str	r3, [r7, #24]
 80114c4:	e002      	b.n	80114cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80114c6:	f04f 33ff 	mov.w	r3, #4294967295
 80114ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80114cc:	69bb      	ldr	r3, [r7, #24]
	}
 80114ce:	4618      	mov	r0, r3
 80114d0:	3720      	adds	r7, #32
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bd80      	pop	{r7, pc}

080114d6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80114d6:	b580      	push	{r7, lr}
 80114d8:	b088      	sub	sp, #32
 80114da:	af00      	add	r7, sp, #0
 80114dc:	60f8      	str	r0, [r7, #12]
 80114de:	60b9      	str	r1, [r7, #8]
 80114e0:	607a      	str	r2, [r7, #4]
 80114e2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80114e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114e6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	009b      	lsls	r3, r3, #2
 80114ec:	461a      	mov	r2, r3
 80114ee:	21a5      	movs	r1, #165	; 0xa5
 80114f0:	f001 fd97 	bl	8013022 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80114f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80114fe:	3b01      	subs	r3, #1
 8011500:	009b      	lsls	r3, r3, #2
 8011502:	4413      	add	r3, r2
 8011504:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011506:	69bb      	ldr	r3, [r7, #24]
 8011508:	f023 0307 	bic.w	r3, r3, #7
 801150c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801150e:	69bb      	ldr	r3, [r7, #24]
 8011510:	f003 0307 	and.w	r3, r3, #7
 8011514:	2b00      	cmp	r3, #0
 8011516:	d009      	beq.n	801152c <prvInitialiseNewTask+0x56>
 8011518:	f04f 0350 	mov.w	r3, #80	; 0x50
 801151c:	f383 8811 	msr	BASEPRI, r3
 8011520:	f3bf 8f6f 	isb	sy
 8011524:	f3bf 8f4f 	dsb	sy
 8011528:	617b      	str	r3, [r7, #20]
 801152a:	e7fe      	b.n	801152a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d01f      	beq.n	8011572 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011532:	2300      	movs	r3, #0
 8011534:	61fb      	str	r3, [r7, #28]
 8011536:	e012      	b.n	801155e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011538:	68ba      	ldr	r2, [r7, #8]
 801153a:	69fb      	ldr	r3, [r7, #28]
 801153c:	4413      	add	r3, r2
 801153e:	7819      	ldrb	r1, [r3, #0]
 8011540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011542:	69fb      	ldr	r3, [r7, #28]
 8011544:	4413      	add	r3, r2
 8011546:	3334      	adds	r3, #52	; 0x34
 8011548:	460a      	mov	r2, r1
 801154a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801154c:	68ba      	ldr	r2, [r7, #8]
 801154e:	69fb      	ldr	r3, [r7, #28]
 8011550:	4413      	add	r3, r2
 8011552:	781b      	ldrb	r3, [r3, #0]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d006      	beq.n	8011566 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011558:	69fb      	ldr	r3, [r7, #28]
 801155a:	3301      	adds	r3, #1
 801155c:	61fb      	str	r3, [r7, #28]
 801155e:	69fb      	ldr	r3, [r7, #28]
 8011560:	2b0f      	cmp	r3, #15
 8011562:	d9e9      	bls.n	8011538 <prvInitialiseNewTask+0x62>
 8011564:	e000      	b.n	8011568 <prvInitialiseNewTask+0x92>
			{
				break;
 8011566:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801156a:	2200      	movs	r2, #0
 801156c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011570:	e003      	b.n	801157a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011574:	2200      	movs	r2, #0
 8011576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801157a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801157c:	2b37      	cmp	r3, #55	; 0x37
 801157e:	d901      	bls.n	8011584 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011580:	2337      	movs	r3, #55	; 0x37
 8011582:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011588:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801158a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801158c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801158e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011592:	2200      	movs	r2, #0
 8011594:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011598:	3304      	adds	r3, #4
 801159a:	4618      	mov	r0, r3
 801159c:	f7fe fdc6 	bl	801012c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80115a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115a2:	3318      	adds	r3, #24
 80115a4:	4618      	mov	r0, r3
 80115a6:	f7fe fdc1 	bl	801012c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80115aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80115b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80115b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80115ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80115c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115c2:	2200      	movs	r2, #0
 80115c4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80115c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115c8:	2200      	movs	r2, #0
 80115ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80115ce:	683a      	ldr	r2, [r7, #0]
 80115d0:	68f9      	ldr	r1, [r7, #12]
 80115d2:	69b8      	ldr	r0, [r7, #24]
 80115d4:	f7fe f970 	bl	800f8b8 <pxPortInitialiseStack>
 80115d8:	4602      	mov	r2, r0
 80115da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80115de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d002      	beq.n	80115ea <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80115e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80115ea:	bf00      	nop
 80115ec:	3720      	adds	r7, #32
 80115ee:	46bd      	mov	sp, r7
 80115f0:	bd80      	pop	{r7, pc}
	...

080115f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b082      	sub	sp, #8
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80115fc:	f7fe fa86 	bl	800fb0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011600:	4b2d      	ldr	r3, [pc, #180]	; (80116b8 <prvAddNewTaskToReadyList+0xc4>)
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	3301      	adds	r3, #1
 8011606:	4a2c      	ldr	r2, [pc, #176]	; (80116b8 <prvAddNewTaskToReadyList+0xc4>)
 8011608:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801160a:	4b2c      	ldr	r3, [pc, #176]	; (80116bc <prvAddNewTaskToReadyList+0xc8>)
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d109      	bne.n	8011626 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011612:	4a2a      	ldr	r2, [pc, #168]	; (80116bc <prvAddNewTaskToReadyList+0xc8>)
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011618:	4b27      	ldr	r3, [pc, #156]	; (80116b8 <prvAddNewTaskToReadyList+0xc4>)
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	2b01      	cmp	r3, #1
 801161e:	d110      	bne.n	8011642 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011620:	f000 fc68 	bl	8011ef4 <prvInitialiseTaskLists>
 8011624:	e00d      	b.n	8011642 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011626:	4b26      	ldr	r3, [pc, #152]	; (80116c0 <prvAddNewTaskToReadyList+0xcc>)
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d109      	bne.n	8011642 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801162e:	4b23      	ldr	r3, [pc, #140]	; (80116bc <prvAddNewTaskToReadyList+0xc8>)
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011638:	429a      	cmp	r2, r3
 801163a:	d802      	bhi.n	8011642 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801163c:	4a1f      	ldr	r2, [pc, #124]	; (80116bc <prvAddNewTaskToReadyList+0xc8>)
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011642:	4b20      	ldr	r3, [pc, #128]	; (80116c4 <prvAddNewTaskToReadyList+0xd0>)
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	3301      	adds	r3, #1
 8011648:	4a1e      	ldr	r2, [pc, #120]	; (80116c4 <prvAddNewTaskToReadyList+0xd0>)
 801164a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801164c:	4b1d      	ldr	r3, [pc, #116]	; (80116c4 <prvAddNewTaskToReadyList+0xd0>)
 801164e:	681a      	ldr	r2, [r3, #0]
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011658:	4b1b      	ldr	r3, [pc, #108]	; (80116c8 <prvAddNewTaskToReadyList+0xd4>)
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	429a      	cmp	r2, r3
 801165e:	d903      	bls.n	8011668 <prvAddNewTaskToReadyList+0x74>
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011664:	4a18      	ldr	r2, [pc, #96]	; (80116c8 <prvAddNewTaskToReadyList+0xd4>)
 8011666:	6013      	str	r3, [r2, #0]
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801166c:	4613      	mov	r3, r2
 801166e:	009b      	lsls	r3, r3, #2
 8011670:	4413      	add	r3, r2
 8011672:	009b      	lsls	r3, r3, #2
 8011674:	4a15      	ldr	r2, [pc, #84]	; (80116cc <prvAddNewTaskToReadyList+0xd8>)
 8011676:	441a      	add	r2, r3
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	3304      	adds	r3, #4
 801167c:	4619      	mov	r1, r3
 801167e:	4610      	mov	r0, r2
 8011680:	f7fe fd61 	bl	8010146 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011684:	f7fe fa70 	bl	800fb68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011688:	4b0d      	ldr	r3, [pc, #52]	; (80116c0 <prvAddNewTaskToReadyList+0xcc>)
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d00e      	beq.n	80116ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011690:	4b0a      	ldr	r3, [pc, #40]	; (80116bc <prvAddNewTaskToReadyList+0xc8>)
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801169a:	429a      	cmp	r2, r3
 801169c:	d207      	bcs.n	80116ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801169e:	4b0c      	ldr	r3, [pc, #48]	; (80116d0 <prvAddNewTaskToReadyList+0xdc>)
 80116a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116a4:	601a      	str	r2, [r3, #0]
 80116a6:	f3bf 8f4f 	dsb	sy
 80116aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80116ae:	bf00      	nop
 80116b0:	3708      	adds	r7, #8
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd80      	pop	{r7, pc}
 80116b6:	bf00      	nop
 80116b8:	20005ac4 	.word	0x20005ac4
 80116bc:	200055f0 	.word	0x200055f0
 80116c0:	20005ad0 	.word	0x20005ad0
 80116c4:	20005ae0 	.word	0x20005ae0
 80116c8:	20005acc 	.word	0x20005acc
 80116cc:	200055f4 	.word	0x200055f4
 80116d0:	e000ed04 	.word	0xe000ed04

080116d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b084      	sub	sp, #16
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80116dc:	2300      	movs	r3, #0
 80116de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d016      	beq.n	8011714 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80116e6:	4b13      	ldr	r3, [pc, #76]	; (8011734 <vTaskDelay+0x60>)
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d009      	beq.n	8011702 <vTaskDelay+0x2e>
 80116ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116f2:	f383 8811 	msr	BASEPRI, r3
 80116f6:	f3bf 8f6f 	isb	sy
 80116fa:	f3bf 8f4f 	dsb	sy
 80116fe:	60bb      	str	r3, [r7, #8]
 8011700:	e7fe      	b.n	8011700 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8011702:	f000 f87f 	bl	8011804 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011706:	2100      	movs	r1, #0
 8011708:	6878      	ldr	r0, [r7, #4]
 801170a:	f001 f873 	bl	80127f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801170e:	f000 f8bf 	bl	8011890 <xTaskResumeAll>
 8011712:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d107      	bne.n	801172a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 801171a:	4b07      	ldr	r3, [pc, #28]	; (8011738 <vTaskDelay+0x64>)
 801171c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011720:	601a      	str	r2, [r3, #0]
 8011722:	f3bf 8f4f 	dsb	sy
 8011726:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801172a:	bf00      	nop
 801172c:	3710      	adds	r7, #16
 801172e:	46bd      	mov	sp, r7
 8011730:	bd80      	pop	{r7, pc}
 8011732:	bf00      	nop
 8011734:	20005aec 	.word	0x20005aec
 8011738:	e000ed04 	.word	0xe000ed04

0801173c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b08a      	sub	sp, #40	; 0x28
 8011740:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011742:	2300      	movs	r3, #0
 8011744:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011746:	2300      	movs	r3, #0
 8011748:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801174a:	463a      	mov	r2, r7
 801174c:	1d39      	adds	r1, r7, #4
 801174e:	f107 0308 	add.w	r3, r7, #8
 8011752:	4618      	mov	r0, r3
 8011754:	f7fe f87c 	bl	800f850 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011758:	6839      	ldr	r1, [r7, #0]
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	68ba      	ldr	r2, [r7, #8]
 801175e:	9202      	str	r2, [sp, #8]
 8011760:	9301      	str	r3, [sp, #4]
 8011762:	2300      	movs	r3, #0
 8011764:	9300      	str	r3, [sp, #0]
 8011766:	2300      	movs	r3, #0
 8011768:	460a      	mov	r2, r1
 801176a:	4920      	ldr	r1, [pc, #128]	; (80117ec <vTaskStartScheduler+0xb0>)
 801176c:	4820      	ldr	r0, [pc, #128]	; (80117f0 <vTaskStartScheduler+0xb4>)
 801176e:	f7ff fe13 	bl	8011398 <xTaskCreateStatic>
 8011772:	4602      	mov	r2, r0
 8011774:	4b1f      	ldr	r3, [pc, #124]	; (80117f4 <vTaskStartScheduler+0xb8>)
 8011776:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011778:	4b1e      	ldr	r3, [pc, #120]	; (80117f4 <vTaskStartScheduler+0xb8>)
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d002      	beq.n	8011786 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011780:	2301      	movs	r3, #1
 8011782:	617b      	str	r3, [r7, #20]
 8011784:	e001      	b.n	801178a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011786:	2300      	movs	r3, #0
 8011788:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801178a:	697b      	ldr	r3, [r7, #20]
 801178c:	2b01      	cmp	r3, #1
 801178e:	d102      	bne.n	8011796 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011790:	f001 f884 	bl	801289c <xTimerCreateTimerTask>
 8011794:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011796:	697b      	ldr	r3, [r7, #20]
 8011798:	2b01      	cmp	r3, #1
 801179a:	d115      	bne.n	80117c8 <vTaskStartScheduler+0x8c>
 801179c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117a0:	f383 8811 	msr	BASEPRI, r3
 80117a4:	f3bf 8f6f 	isb	sy
 80117a8:	f3bf 8f4f 	dsb	sy
 80117ac:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80117ae:	4b12      	ldr	r3, [pc, #72]	; (80117f8 <vTaskStartScheduler+0xbc>)
 80117b0:	f04f 32ff 	mov.w	r2, #4294967295
 80117b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80117b6:	4b11      	ldr	r3, [pc, #68]	; (80117fc <vTaskStartScheduler+0xc0>)
 80117b8:	2201      	movs	r2, #1
 80117ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80117bc:	4b10      	ldr	r3, [pc, #64]	; (8011800 <vTaskStartScheduler+0xc4>)
 80117be:	2200      	movs	r2, #0
 80117c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80117c2:	f7fe f905 	bl	800f9d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80117c6:	e00d      	b.n	80117e4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80117c8:	697b      	ldr	r3, [r7, #20]
 80117ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117ce:	d109      	bne.n	80117e4 <vTaskStartScheduler+0xa8>
 80117d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117d4:	f383 8811 	msr	BASEPRI, r3
 80117d8:	f3bf 8f6f 	isb	sy
 80117dc:	f3bf 8f4f 	dsb	sy
 80117e0:	60fb      	str	r3, [r7, #12]
 80117e2:	e7fe      	b.n	80117e2 <vTaskStartScheduler+0xa6>
}
 80117e4:	bf00      	nop
 80117e6:	3718      	adds	r7, #24
 80117e8:	46bd      	mov	sp, r7
 80117ea:	bd80      	pop	{r7, pc}
 80117ec:	08016400 	.word	0x08016400
 80117f0:	08011e79 	.word	0x08011e79
 80117f4:	20005ae8 	.word	0x20005ae8
 80117f8:	20005ae4 	.word	0x20005ae4
 80117fc:	20005ad0 	.word	0x20005ad0
 8011800:	20005ac8 	.word	0x20005ac8

08011804 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011804:	b480      	push	{r7}
 8011806:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011808:	4b04      	ldr	r3, [pc, #16]	; (801181c <vTaskSuspendAll+0x18>)
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	3301      	adds	r3, #1
 801180e:	4a03      	ldr	r2, [pc, #12]	; (801181c <vTaskSuspendAll+0x18>)
 8011810:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8011812:	bf00      	nop
 8011814:	46bd      	mov	sp, r7
 8011816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181a:	4770      	bx	lr
 801181c:	20005aec 	.word	0x20005aec

08011820 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8011820:	b480      	push	{r7}
 8011822:	b083      	sub	sp, #12
 8011824:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8011826:	2300      	movs	r3, #0
 8011828:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 801182a:	4b14      	ldr	r3, [pc, #80]	; (801187c <prvGetExpectedIdleTime+0x5c>)
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d001      	beq.n	8011836 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8011832:	2301      	movs	r3, #1
 8011834:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8011836:	4b12      	ldr	r3, [pc, #72]	; (8011880 <prvGetExpectedIdleTime+0x60>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801183c:	2b00      	cmp	r3, #0
 801183e:	d002      	beq.n	8011846 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8011840:	2300      	movs	r3, #0
 8011842:	607b      	str	r3, [r7, #4]
 8011844:	e012      	b.n	801186c <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8011846:	4b0f      	ldr	r3, [pc, #60]	; (8011884 <prvGetExpectedIdleTime+0x64>)
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	2b01      	cmp	r3, #1
 801184c:	d902      	bls.n	8011854 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 801184e:	2300      	movs	r3, #0
 8011850:	607b      	str	r3, [r7, #4]
 8011852:	e00b      	b.n	801186c <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8011854:	683b      	ldr	r3, [r7, #0]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d002      	beq.n	8011860 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 801185a:	2300      	movs	r3, #0
 801185c:	607b      	str	r3, [r7, #4]
 801185e:	e005      	b.n	801186c <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8011860:	4b09      	ldr	r3, [pc, #36]	; (8011888 <prvGetExpectedIdleTime+0x68>)
 8011862:	681a      	ldr	r2, [r3, #0]
 8011864:	4b09      	ldr	r3, [pc, #36]	; (801188c <prvGetExpectedIdleTime+0x6c>)
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	1ad3      	subs	r3, r2, r3
 801186a:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 801186c:	687b      	ldr	r3, [r7, #4]
	}
 801186e:	4618      	mov	r0, r3
 8011870:	370c      	adds	r7, #12
 8011872:	46bd      	mov	sp, r7
 8011874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011878:	4770      	bx	lr
 801187a:	bf00      	nop
 801187c:	20005acc 	.word	0x20005acc
 8011880:	200055f0 	.word	0x200055f0
 8011884:	200055f4 	.word	0x200055f4
 8011888:	20005ae4 	.word	0x20005ae4
 801188c:	20005ac8 	.word	0x20005ac8

08011890 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b084      	sub	sp, #16
 8011894:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011896:	2300      	movs	r3, #0
 8011898:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801189a:	2300      	movs	r3, #0
 801189c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801189e:	4b41      	ldr	r3, [pc, #260]	; (80119a4 <xTaskResumeAll+0x114>)
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d109      	bne.n	80118ba <xTaskResumeAll+0x2a>
 80118a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118aa:	f383 8811 	msr	BASEPRI, r3
 80118ae:	f3bf 8f6f 	isb	sy
 80118b2:	f3bf 8f4f 	dsb	sy
 80118b6:	603b      	str	r3, [r7, #0]
 80118b8:	e7fe      	b.n	80118b8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80118ba:	f7fe f927 	bl	800fb0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80118be:	4b39      	ldr	r3, [pc, #228]	; (80119a4 <xTaskResumeAll+0x114>)
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	3b01      	subs	r3, #1
 80118c4:	4a37      	ldr	r2, [pc, #220]	; (80119a4 <xTaskResumeAll+0x114>)
 80118c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80118c8:	4b36      	ldr	r3, [pc, #216]	; (80119a4 <xTaskResumeAll+0x114>)
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d162      	bne.n	8011996 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80118d0:	4b35      	ldr	r3, [pc, #212]	; (80119a8 <xTaskResumeAll+0x118>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d05e      	beq.n	8011996 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80118d8:	e02f      	b.n	801193a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80118da:	4b34      	ldr	r3, [pc, #208]	; (80119ac <xTaskResumeAll+0x11c>)
 80118dc:	68db      	ldr	r3, [r3, #12]
 80118de:	68db      	ldr	r3, [r3, #12]
 80118e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	3318      	adds	r3, #24
 80118e6:	4618      	mov	r0, r3
 80118e8:	f7fe fc8a 	bl	8010200 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	3304      	adds	r3, #4
 80118f0:	4618      	mov	r0, r3
 80118f2:	f7fe fc85 	bl	8010200 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118fa:	4b2d      	ldr	r3, [pc, #180]	; (80119b0 <xTaskResumeAll+0x120>)
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	429a      	cmp	r2, r3
 8011900:	d903      	bls.n	801190a <xTaskResumeAll+0x7a>
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011906:	4a2a      	ldr	r2, [pc, #168]	; (80119b0 <xTaskResumeAll+0x120>)
 8011908:	6013      	str	r3, [r2, #0]
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801190e:	4613      	mov	r3, r2
 8011910:	009b      	lsls	r3, r3, #2
 8011912:	4413      	add	r3, r2
 8011914:	009b      	lsls	r3, r3, #2
 8011916:	4a27      	ldr	r2, [pc, #156]	; (80119b4 <xTaskResumeAll+0x124>)
 8011918:	441a      	add	r2, r3
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	3304      	adds	r3, #4
 801191e:	4619      	mov	r1, r3
 8011920:	4610      	mov	r0, r2
 8011922:	f7fe fc10 	bl	8010146 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801192a:	4b23      	ldr	r3, [pc, #140]	; (80119b8 <xTaskResumeAll+0x128>)
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011930:	429a      	cmp	r2, r3
 8011932:	d302      	bcc.n	801193a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8011934:	4b21      	ldr	r3, [pc, #132]	; (80119bc <xTaskResumeAll+0x12c>)
 8011936:	2201      	movs	r2, #1
 8011938:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801193a:	4b1c      	ldr	r3, [pc, #112]	; (80119ac <xTaskResumeAll+0x11c>)
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d1cb      	bne.n	80118da <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d001      	beq.n	801194c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011948:	f000 fb6e 	bl	8012028 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801194c:	4b1c      	ldr	r3, [pc, #112]	; (80119c0 <xTaskResumeAll+0x130>)
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d010      	beq.n	801197a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011958:	f000 f846 	bl	80119e8 <xTaskIncrementTick>
 801195c:	4603      	mov	r3, r0
 801195e:	2b00      	cmp	r3, #0
 8011960:	d002      	beq.n	8011968 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8011962:	4b16      	ldr	r3, [pc, #88]	; (80119bc <xTaskResumeAll+0x12c>)
 8011964:	2201      	movs	r2, #1
 8011966:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	3b01      	subs	r3, #1
 801196c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d1f1      	bne.n	8011958 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8011974:	4b12      	ldr	r3, [pc, #72]	; (80119c0 <xTaskResumeAll+0x130>)
 8011976:	2200      	movs	r2, #0
 8011978:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801197a:	4b10      	ldr	r3, [pc, #64]	; (80119bc <xTaskResumeAll+0x12c>)
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d009      	beq.n	8011996 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011982:	2301      	movs	r3, #1
 8011984:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011986:	4b0f      	ldr	r3, [pc, #60]	; (80119c4 <xTaskResumeAll+0x134>)
 8011988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801198c:	601a      	str	r2, [r3, #0]
 801198e:	f3bf 8f4f 	dsb	sy
 8011992:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011996:	f7fe f8e7 	bl	800fb68 <vPortExitCritical>

	return xAlreadyYielded;
 801199a:	68bb      	ldr	r3, [r7, #8]
}
 801199c:	4618      	mov	r0, r3
 801199e:	3710      	adds	r7, #16
 80119a0:	46bd      	mov	sp, r7
 80119a2:	bd80      	pop	{r7, pc}
 80119a4:	20005aec 	.word	0x20005aec
 80119a8:	20005ac4 	.word	0x20005ac4
 80119ac:	20005a84 	.word	0x20005a84
 80119b0:	20005acc 	.word	0x20005acc
 80119b4:	200055f4 	.word	0x200055f4
 80119b8:	200055f0 	.word	0x200055f0
 80119bc:	20005ad8 	.word	0x20005ad8
 80119c0:	20005ad4 	.word	0x20005ad4
 80119c4:	e000ed04 	.word	0xe000ed04

080119c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80119c8:	b480      	push	{r7}
 80119ca:	b083      	sub	sp, #12
 80119cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80119ce:	4b05      	ldr	r3, [pc, #20]	; (80119e4 <xTaskGetTickCount+0x1c>)
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80119d4:	687b      	ldr	r3, [r7, #4]
}
 80119d6:	4618      	mov	r0, r3
 80119d8:	370c      	adds	r7, #12
 80119da:	46bd      	mov	sp, r7
 80119dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e0:	4770      	bx	lr
 80119e2:	bf00      	nop
 80119e4:	20005ac8 	.word	0x20005ac8

080119e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b086      	sub	sp, #24
 80119ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80119ee:	2300      	movs	r3, #0
 80119f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80119f2:	4b4e      	ldr	r3, [pc, #312]	; (8011b2c <xTaskIncrementTick+0x144>)
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	f040 8088 	bne.w	8011b0c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80119fc:	4b4c      	ldr	r3, [pc, #304]	; (8011b30 <xTaskIncrementTick+0x148>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	3301      	adds	r3, #1
 8011a02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011a04:	4a4a      	ldr	r2, [pc, #296]	; (8011b30 <xTaskIncrementTick+0x148>)
 8011a06:	693b      	ldr	r3, [r7, #16]
 8011a08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011a0a:	693b      	ldr	r3, [r7, #16]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d11f      	bne.n	8011a50 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8011a10:	4b48      	ldr	r3, [pc, #288]	; (8011b34 <xTaskIncrementTick+0x14c>)
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d009      	beq.n	8011a2e <xTaskIncrementTick+0x46>
 8011a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a1e:	f383 8811 	msr	BASEPRI, r3
 8011a22:	f3bf 8f6f 	isb	sy
 8011a26:	f3bf 8f4f 	dsb	sy
 8011a2a:	603b      	str	r3, [r7, #0]
 8011a2c:	e7fe      	b.n	8011a2c <xTaskIncrementTick+0x44>
 8011a2e:	4b41      	ldr	r3, [pc, #260]	; (8011b34 <xTaskIncrementTick+0x14c>)
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	60fb      	str	r3, [r7, #12]
 8011a34:	4b40      	ldr	r3, [pc, #256]	; (8011b38 <xTaskIncrementTick+0x150>)
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	4a3e      	ldr	r2, [pc, #248]	; (8011b34 <xTaskIncrementTick+0x14c>)
 8011a3a:	6013      	str	r3, [r2, #0]
 8011a3c:	4a3e      	ldr	r2, [pc, #248]	; (8011b38 <xTaskIncrementTick+0x150>)
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	6013      	str	r3, [r2, #0]
 8011a42:	4b3e      	ldr	r3, [pc, #248]	; (8011b3c <xTaskIncrementTick+0x154>)
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	3301      	adds	r3, #1
 8011a48:	4a3c      	ldr	r2, [pc, #240]	; (8011b3c <xTaskIncrementTick+0x154>)
 8011a4a:	6013      	str	r3, [r2, #0]
 8011a4c:	f000 faec 	bl	8012028 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011a50:	4b3b      	ldr	r3, [pc, #236]	; (8011b40 <xTaskIncrementTick+0x158>)
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	693a      	ldr	r2, [r7, #16]
 8011a56:	429a      	cmp	r2, r3
 8011a58:	d349      	bcc.n	8011aee <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011a5a:	4b36      	ldr	r3, [pc, #216]	; (8011b34 <xTaskIncrementTick+0x14c>)
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d104      	bne.n	8011a6e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a64:	4b36      	ldr	r3, [pc, #216]	; (8011b40 <xTaskIncrementTick+0x158>)
 8011a66:	f04f 32ff 	mov.w	r2, #4294967295
 8011a6a:	601a      	str	r2, [r3, #0]
					break;
 8011a6c:	e03f      	b.n	8011aee <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a6e:	4b31      	ldr	r3, [pc, #196]	; (8011b34 <xTaskIncrementTick+0x14c>)
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	68db      	ldr	r3, [r3, #12]
 8011a74:	68db      	ldr	r3, [r3, #12]
 8011a76:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	685b      	ldr	r3, [r3, #4]
 8011a7c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011a7e:	693a      	ldr	r2, [r7, #16]
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	429a      	cmp	r2, r3
 8011a84:	d203      	bcs.n	8011a8e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011a86:	4a2e      	ldr	r2, [pc, #184]	; (8011b40 <xTaskIncrementTick+0x158>)
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011a8c:	e02f      	b.n	8011aee <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011a8e:	68bb      	ldr	r3, [r7, #8]
 8011a90:	3304      	adds	r3, #4
 8011a92:	4618      	mov	r0, r3
 8011a94:	f7fe fbb4 	bl	8010200 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011a98:	68bb      	ldr	r3, [r7, #8]
 8011a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d004      	beq.n	8011aaa <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011aa0:	68bb      	ldr	r3, [r7, #8]
 8011aa2:	3318      	adds	r3, #24
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	f7fe fbab 	bl	8010200 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011aaa:	68bb      	ldr	r3, [r7, #8]
 8011aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011aae:	4b25      	ldr	r3, [pc, #148]	; (8011b44 <xTaskIncrementTick+0x15c>)
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	429a      	cmp	r2, r3
 8011ab4:	d903      	bls.n	8011abe <xTaskIncrementTick+0xd6>
 8011ab6:	68bb      	ldr	r3, [r7, #8]
 8011ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aba:	4a22      	ldr	r2, [pc, #136]	; (8011b44 <xTaskIncrementTick+0x15c>)
 8011abc:	6013      	str	r3, [r2, #0]
 8011abe:	68bb      	ldr	r3, [r7, #8]
 8011ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ac2:	4613      	mov	r3, r2
 8011ac4:	009b      	lsls	r3, r3, #2
 8011ac6:	4413      	add	r3, r2
 8011ac8:	009b      	lsls	r3, r3, #2
 8011aca:	4a1f      	ldr	r2, [pc, #124]	; (8011b48 <xTaskIncrementTick+0x160>)
 8011acc:	441a      	add	r2, r3
 8011ace:	68bb      	ldr	r3, [r7, #8]
 8011ad0:	3304      	adds	r3, #4
 8011ad2:	4619      	mov	r1, r3
 8011ad4:	4610      	mov	r0, r2
 8011ad6:	f7fe fb36 	bl	8010146 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011ada:	68bb      	ldr	r3, [r7, #8]
 8011adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ade:	4b1b      	ldr	r3, [pc, #108]	; (8011b4c <xTaskIncrementTick+0x164>)
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ae4:	429a      	cmp	r2, r3
 8011ae6:	d3b8      	bcc.n	8011a5a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8011ae8:	2301      	movs	r3, #1
 8011aea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011aec:	e7b5      	b.n	8011a5a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011aee:	4b17      	ldr	r3, [pc, #92]	; (8011b4c <xTaskIncrementTick+0x164>)
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011af4:	4914      	ldr	r1, [pc, #80]	; (8011b48 <xTaskIncrementTick+0x160>)
 8011af6:	4613      	mov	r3, r2
 8011af8:	009b      	lsls	r3, r3, #2
 8011afa:	4413      	add	r3, r2
 8011afc:	009b      	lsls	r3, r3, #2
 8011afe:	440b      	add	r3, r1
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	2b01      	cmp	r3, #1
 8011b04:	d907      	bls.n	8011b16 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8011b06:	2301      	movs	r3, #1
 8011b08:	617b      	str	r3, [r7, #20]
 8011b0a:	e004      	b.n	8011b16 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011b0c:	4b10      	ldr	r3, [pc, #64]	; (8011b50 <xTaskIncrementTick+0x168>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	3301      	adds	r3, #1
 8011b12:	4a0f      	ldr	r2, [pc, #60]	; (8011b50 <xTaskIncrementTick+0x168>)
 8011b14:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011b16:	4b0f      	ldr	r3, [pc, #60]	; (8011b54 <xTaskIncrementTick+0x16c>)
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d001      	beq.n	8011b22 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8011b1e:	2301      	movs	r3, #1
 8011b20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011b22:	697b      	ldr	r3, [r7, #20]
}
 8011b24:	4618      	mov	r0, r3
 8011b26:	3718      	adds	r7, #24
 8011b28:	46bd      	mov	sp, r7
 8011b2a:	bd80      	pop	{r7, pc}
 8011b2c:	20005aec 	.word	0x20005aec
 8011b30:	20005ac8 	.word	0x20005ac8
 8011b34:	20005a7c 	.word	0x20005a7c
 8011b38:	20005a80 	.word	0x20005a80
 8011b3c:	20005adc 	.word	0x20005adc
 8011b40:	20005ae4 	.word	0x20005ae4
 8011b44:	20005acc 	.word	0x20005acc
 8011b48:	200055f4 	.word	0x200055f4
 8011b4c:	200055f0 	.word	0x200055f0
 8011b50:	20005ad4 	.word	0x20005ad4
 8011b54:	20005ad8 	.word	0x20005ad8

08011b58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011b58:	b480      	push	{r7}
 8011b5a:	b085      	sub	sp, #20
 8011b5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011b5e:	4b27      	ldr	r3, [pc, #156]	; (8011bfc <vTaskSwitchContext+0xa4>)
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d003      	beq.n	8011b6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011b66:	4b26      	ldr	r3, [pc, #152]	; (8011c00 <vTaskSwitchContext+0xa8>)
 8011b68:	2201      	movs	r2, #1
 8011b6a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011b6c:	e040      	b.n	8011bf0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8011b6e:	4b24      	ldr	r3, [pc, #144]	; (8011c00 <vTaskSwitchContext+0xa8>)
 8011b70:	2200      	movs	r2, #0
 8011b72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b74:	4b23      	ldr	r3, [pc, #140]	; (8011c04 <vTaskSwitchContext+0xac>)
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	60fb      	str	r3, [r7, #12]
 8011b7a:	e00f      	b.n	8011b9c <vTaskSwitchContext+0x44>
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d109      	bne.n	8011b96 <vTaskSwitchContext+0x3e>
 8011b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b86:	f383 8811 	msr	BASEPRI, r3
 8011b8a:	f3bf 8f6f 	isb	sy
 8011b8e:	f3bf 8f4f 	dsb	sy
 8011b92:	607b      	str	r3, [r7, #4]
 8011b94:	e7fe      	b.n	8011b94 <vTaskSwitchContext+0x3c>
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	3b01      	subs	r3, #1
 8011b9a:	60fb      	str	r3, [r7, #12]
 8011b9c:	491a      	ldr	r1, [pc, #104]	; (8011c08 <vTaskSwitchContext+0xb0>)
 8011b9e:	68fa      	ldr	r2, [r7, #12]
 8011ba0:	4613      	mov	r3, r2
 8011ba2:	009b      	lsls	r3, r3, #2
 8011ba4:	4413      	add	r3, r2
 8011ba6:	009b      	lsls	r3, r3, #2
 8011ba8:	440b      	add	r3, r1
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d0e5      	beq.n	8011b7c <vTaskSwitchContext+0x24>
 8011bb0:	68fa      	ldr	r2, [r7, #12]
 8011bb2:	4613      	mov	r3, r2
 8011bb4:	009b      	lsls	r3, r3, #2
 8011bb6:	4413      	add	r3, r2
 8011bb8:	009b      	lsls	r3, r3, #2
 8011bba:	4a13      	ldr	r2, [pc, #76]	; (8011c08 <vTaskSwitchContext+0xb0>)
 8011bbc:	4413      	add	r3, r2
 8011bbe:	60bb      	str	r3, [r7, #8]
 8011bc0:	68bb      	ldr	r3, [r7, #8]
 8011bc2:	685b      	ldr	r3, [r3, #4]
 8011bc4:	685a      	ldr	r2, [r3, #4]
 8011bc6:	68bb      	ldr	r3, [r7, #8]
 8011bc8:	605a      	str	r2, [r3, #4]
 8011bca:	68bb      	ldr	r3, [r7, #8]
 8011bcc:	685a      	ldr	r2, [r3, #4]
 8011bce:	68bb      	ldr	r3, [r7, #8]
 8011bd0:	3308      	adds	r3, #8
 8011bd2:	429a      	cmp	r2, r3
 8011bd4:	d104      	bne.n	8011be0 <vTaskSwitchContext+0x88>
 8011bd6:	68bb      	ldr	r3, [r7, #8]
 8011bd8:	685b      	ldr	r3, [r3, #4]
 8011bda:	685a      	ldr	r2, [r3, #4]
 8011bdc:	68bb      	ldr	r3, [r7, #8]
 8011bde:	605a      	str	r2, [r3, #4]
 8011be0:	68bb      	ldr	r3, [r7, #8]
 8011be2:	685b      	ldr	r3, [r3, #4]
 8011be4:	68db      	ldr	r3, [r3, #12]
 8011be6:	4a09      	ldr	r2, [pc, #36]	; (8011c0c <vTaskSwitchContext+0xb4>)
 8011be8:	6013      	str	r3, [r2, #0]
 8011bea:	4a06      	ldr	r2, [pc, #24]	; (8011c04 <vTaskSwitchContext+0xac>)
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	6013      	str	r3, [r2, #0]
}
 8011bf0:	bf00      	nop
 8011bf2:	3714      	adds	r7, #20
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfa:	4770      	bx	lr
 8011bfc:	20005aec 	.word	0x20005aec
 8011c00:	20005ad8 	.word	0x20005ad8
 8011c04:	20005acc 	.word	0x20005acc
 8011c08:	200055f4 	.word	0x200055f4
 8011c0c:	200055f0 	.word	0x200055f0

08011c10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b084      	sub	sp, #16
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
 8011c18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d109      	bne.n	8011c34 <vTaskPlaceOnEventList+0x24>
 8011c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c24:	f383 8811 	msr	BASEPRI, r3
 8011c28:	f3bf 8f6f 	isb	sy
 8011c2c:	f3bf 8f4f 	dsb	sy
 8011c30:	60fb      	str	r3, [r7, #12]
 8011c32:	e7fe      	b.n	8011c32 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011c34:	4b07      	ldr	r3, [pc, #28]	; (8011c54 <vTaskPlaceOnEventList+0x44>)
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	3318      	adds	r3, #24
 8011c3a:	4619      	mov	r1, r3
 8011c3c:	6878      	ldr	r0, [r7, #4]
 8011c3e:	f7fe faa6 	bl	801018e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011c42:	2101      	movs	r1, #1
 8011c44:	6838      	ldr	r0, [r7, #0]
 8011c46:	f000 fdd5 	bl	80127f4 <prvAddCurrentTaskToDelayedList>
}
 8011c4a:	bf00      	nop
 8011c4c:	3710      	adds	r7, #16
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	bd80      	pop	{r7, pc}
 8011c52:	bf00      	nop
 8011c54:	200055f0 	.word	0x200055f0

08011c58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b086      	sub	sp, #24
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	60f8      	str	r0, [r7, #12]
 8011c60:	60b9      	str	r1, [r7, #8]
 8011c62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d109      	bne.n	8011c7e <vTaskPlaceOnEventListRestricted+0x26>
 8011c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c6e:	f383 8811 	msr	BASEPRI, r3
 8011c72:	f3bf 8f6f 	isb	sy
 8011c76:	f3bf 8f4f 	dsb	sy
 8011c7a:	617b      	str	r3, [r7, #20]
 8011c7c:	e7fe      	b.n	8011c7c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011c7e:	4b0a      	ldr	r3, [pc, #40]	; (8011ca8 <vTaskPlaceOnEventListRestricted+0x50>)
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	3318      	adds	r3, #24
 8011c84:	4619      	mov	r1, r3
 8011c86:	68f8      	ldr	r0, [r7, #12]
 8011c88:	f7fe fa5d 	bl	8010146 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d002      	beq.n	8011c98 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8011c92:	f04f 33ff 	mov.w	r3, #4294967295
 8011c96:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011c98:	6879      	ldr	r1, [r7, #4]
 8011c9a:	68b8      	ldr	r0, [r7, #8]
 8011c9c:	f000 fdaa 	bl	80127f4 <prvAddCurrentTaskToDelayedList>
	}
 8011ca0:	bf00      	nop
 8011ca2:	3718      	adds	r7, #24
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bd80      	pop	{r7, pc}
 8011ca8:	200055f0 	.word	0x200055f0

08011cac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b086      	sub	sp, #24
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	68db      	ldr	r3, [r3, #12]
 8011cb8:	68db      	ldr	r3, [r3, #12]
 8011cba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011cbc:	693b      	ldr	r3, [r7, #16]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d109      	bne.n	8011cd6 <xTaskRemoveFromEventList+0x2a>
 8011cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cc6:	f383 8811 	msr	BASEPRI, r3
 8011cca:	f3bf 8f6f 	isb	sy
 8011cce:	f3bf 8f4f 	dsb	sy
 8011cd2:	60fb      	str	r3, [r7, #12]
 8011cd4:	e7fe      	b.n	8011cd4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011cd6:	693b      	ldr	r3, [r7, #16]
 8011cd8:	3318      	adds	r3, #24
 8011cda:	4618      	mov	r0, r3
 8011cdc:	f7fe fa90 	bl	8010200 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011ce0:	4b1e      	ldr	r3, [pc, #120]	; (8011d5c <xTaskRemoveFromEventList+0xb0>)
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d11f      	bne.n	8011d28 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011ce8:	693b      	ldr	r3, [r7, #16]
 8011cea:	3304      	adds	r3, #4
 8011cec:	4618      	mov	r0, r3
 8011cee:	f7fe fa87 	bl	8010200 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011cf2:	693b      	ldr	r3, [r7, #16]
 8011cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cf6:	4b1a      	ldr	r3, [pc, #104]	; (8011d60 <xTaskRemoveFromEventList+0xb4>)
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	429a      	cmp	r2, r3
 8011cfc:	d903      	bls.n	8011d06 <xTaskRemoveFromEventList+0x5a>
 8011cfe:	693b      	ldr	r3, [r7, #16]
 8011d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d02:	4a17      	ldr	r2, [pc, #92]	; (8011d60 <xTaskRemoveFromEventList+0xb4>)
 8011d04:	6013      	str	r3, [r2, #0]
 8011d06:	693b      	ldr	r3, [r7, #16]
 8011d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d0a:	4613      	mov	r3, r2
 8011d0c:	009b      	lsls	r3, r3, #2
 8011d0e:	4413      	add	r3, r2
 8011d10:	009b      	lsls	r3, r3, #2
 8011d12:	4a14      	ldr	r2, [pc, #80]	; (8011d64 <xTaskRemoveFromEventList+0xb8>)
 8011d14:	441a      	add	r2, r3
 8011d16:	693b      	ldr	r3, [r7, #16]
 8011d18:	3304      	adds	r3, #4
 8011d1a:	4619      	mov	r1, r3
 8011d1c:	4610      	mov	r0, r2
 8011d1e:	f7fe fa12 	bl	8010146 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8011d22:	f000 f981 	bl	8012028 <prvResetNextTaskUnblockTime>
 8011d26:	e005      	b.n	8011d34 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011d28:	693b      	ldr	r3, [r7, #16]
 8011d2a:	3318      	adds	r3, #24
 8011d2c:	4619      	mov	r1, r3
 8011d2e:	480e      	ldr	r0, [pc, #56]	; (8011d68 <xTaskRemoveFromEventList+0xbc>)
 8011d30:	f7fe fa09 	bl	8010146 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011d34:	693b      	ldr	r3, [r7, #16]
 8011d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d38:	4b0c      	ldr	r3, [pc, #48]	; (8011d6c <xTaskRemoveFromEventList+0xc0>)
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d3e:	429a      	cmp	r2, r3
 8011d40:	d905      	bls.n	8011d4e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011d42:	2301      	movs	r3, #1
 8011d44:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011d46:	4b0a      	ldr	r3, [pc, #40]	; (8011d70 <xTaskRemoveFromEventList+0xc4>)
 8011d48:	2201      	movs	r2, #1
 8011d4a:	601a      	str	r2, [r3, #0]
 8011d4c:	e001      	b.n	8011d52 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8011d4e:	2300      	movs	r3, #0
 8011d50:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011d52:	697b      	ldr	r3, [r7, #20]
}
 8011d54:	4618      	mov	r0, r3
 8011d56:	3718      	adds	r7, #24
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	bd80      	pop	{r7, pc}
 8011d5c:	20005aec 	.word	0x20005aec
 8011d60:	20005acc 	.word	0x20005acc
 8011d64:	200055f4 	.word	0x200055f4
 8011d68:	20005a84 	.word	0x20005a84
 8011d6c:	200055f0 	.word	0x200055f0
 8011d70:	20005ad8 	.word	0x20005ad8

08011d74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011d74:	b480      	push	{r7}
 8011d76:	b083      	sub	sp, #12
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011d7c:	4b06      	ldr	r3, [pc, #24]	; (8011d98 <vTaskInternalSetTimeOutState+0x24>)
 8011d7e:	681a      	ldr	r2, [r3, #0]
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011d84:	4b05      	ldr	r3, [pc, #20]	; (8011d9c <vTaskInternalSetTimeOutState+0x28>)
 8011d86:	681a      	ldr	r2, [r3, #0]
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	605a      	str	r2, [r3, #4]
}
 8011d8c:	bf00      	nop
 8011d8e:	370c      	adds	r7, #12
 8011d90:	46bd      	mov	sp, r7
 8011d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d96:	4770      	bx	lr
 8011d98:	20005adc 	.word	0x20005adc
 8011d9c:	20005ac8 	.word	0x20005ac8

08011da0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b088      	sub	sp, #32
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
 8011da8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d109      	bne.n	8011dc4 <xTaskCheckForTimeOut+0x24>
 8011db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011db4:	f383 8811 	msr	BASEPRI, r3
 8011db8:	f3bf 8f6f 	isb	sy
 8011dbc:	f3bf 8f4f 	dsb	sy
 8011dc0:	613b      	str	r3, [r7, #16]
 8011dc2:	e7fe      	b.n	8011dc2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d109      	bne.n	8011dde <xTaskCheckForTimeOut+0x3e>
 8011dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dce:	f383 8811 	msr	BASEPRI, r3
 8011dd2:	f3bf 8f6f 	isb	sy
 8011dd6:	f3bf 8f4f 	dsb	sy
 8011dda:	60fb      	str	r3, [r7, #12]
 8011ddc:	e7fe      	b.n	8011ddc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8011dde:	f7fd fe95 	bl	800fb0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011de2:	4b1d      	ldr	r3, [pc, #116]	; (8011e58 <xTaskCheckForTimeOut+0xb8>)
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	685b      	ldr	r3, [r3, #4]
 8011dec:	69ba      	ldr	r2, [r7, #24]
 8011dee:	1ad3      	subs	r3, r2, r3
 8011df0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dfa:	d102      	bne.n	8011e02 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	61fb      	str	r3, [r7, #28]
 8011e00:	e023      	b.n	8011e4a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681a      	ldr	r2, [r3, #0]
 8011e06:	4b15      	ldr	r3, [pc, #84]	; (8011e5c <xTaskCheckForTimeOut+0xbc>)
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	429a      	cmp	r2, r3
 8011e0c:	d007      	beq.n	8011e1e <xTaskCheckForTimeOut+0x7e>
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	685b      	ldr	r3, [r3, #4]
 8011e12:	69ba      	ldr	r2, [r7, #24]
 8011e14:	429a      	cmp	r2, r3
 8011e16:	d302      	bcc.n	8011e1e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011e18:	2301      	movs	r3, #1
 8011e1a:	61fb      	str	r3, [r7, #28]
 8011e1c:	e015      	b.n	8011e4a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	697a      	ldr	r2, [r7, #20]
 8011e24:	429a      	cmp	r2, r3
 8011e26:	d20b      	bcs.n	8011e40 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011e28:	683b      	ldr	r3, [r7, #0]
 8011e2a:	681a      	ldr	r2, [r3, #0]
 8011e2c:	697b      	ldr	r3, [r7, #20]
 8011e2e:	1ad2      	subs	r2, r2, r3
 8011e30:	683b      	ldr	r3, [r7, #0]
 8011e32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011e34:	6878      	ldr	r0, [r7, #4]
 8011e36:	f7ff ff9d 	bl	8011d74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	61fb      	str	r3, [r7, #28]
 8011e3e:	e004      	b.n	8011e4a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8011e40:	683b      	ldr	r3, [r7, #0]
 8011e42:	2200      	movs	r2, #0
 8011e44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011e46:	2301      	movs	r3, #1
 8011e48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011e4a:	f7fd fe8d 	bl	800fb68 <vPortExitCritical>

	return xReturn;
 8011e4e:	69fb      	ldr	r3, [r7, #28]
}
 8011e50:	4618      	mov	r0, r3
 8011e52:	3720      	adds	r7, #32
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bd80      	pop	{r7, pc}
 8011e58:	20005ac8 	.word	0x20005ac8
 8011e5c:	20005adc 	.word	0x20005adc

08011e60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011e60:	b480      	push	{r7}
 8011e62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011e64:	4b03      	ldr	r3, [pc, #12]	; (8011e74 <vTaskMissedYield+0x14>)
 8011e66:	2201      	movs	r2, #1
 8011e68:	601a      	str	r2, [r3, #0]
}
 8011e6a:	bf00      	nop
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e72:	4770      	bx	lr
 8011e74:	20005ad8 	.word	0x20005ad8

08011e78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b084      	sub	sp, #16
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011e80:	f000 f878 	bl	8011f74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011e84:	4b17      	ldr	r3, [pc, #92]	; (8011ee4 <prvIdleTask+0x6c>)
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	2b01      	cmp	r3, #1
 8011e8a:	d907      	bls.n	8011e9c <prvIdleTask+0x24>
			{
				taskYIELD();
 8011e8c:	4b16      	ldr	r3, [pc, #88]	; (8011ee8 <prvIdleTask+0x70>)
 8011e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e92:	601a      	str	r2, [r3, #0]
 8011e94:	f3bf 8f4f 	dsb	sy
 8011e98:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8011e9c:	f7ff fcc0 	bl	8011820 <prvGetExpectedIdleTime>
 8011ea0:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	2b01      	cmp	r3, #1
 8011ea6:	d9eb      	bls.n	8011e80 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8011ea8:	f7ff fcac 	bl	8011804 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8011eac:	4b0f      	ldr	r3, [pc, #60]	; (8011eec <prvIdleTask+0x74>)
 8011eae:	681a      	ldr	r2, [r3, #0]
 8011eb0:	4b0f      	ldr	r3, [pc, #60]	; (8011ef0 <prvIdleTask+0x78>)
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	429a      	cmp	r2, r3
 8011eb6:	d209      	bcs.n	8011ecc <prvIdleTask+0x54>
 8011eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ebc:	f383 8811 	msr	BASEPRI, r3
 8011ec0:	f3bf 8f6f 	isb	sy
 8011ec4:	f3bf 8f4f 	dsb	sy
 8011ec8:	60bb      	str	r3, [r7, #8]
 8011eca:	e7fe      	b.n	8011eca <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8011ecc:	f7ff fca8 	bl	8011820 <prvGetExpectedIdleTime>
 8011ed0:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	2b01      	cmp	r3, #1
 8011ed6:	d902      	bls.n	8011ede <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8011ed8:	68f8      	ldr	r0, [r7, #12]
 8011eda:	f7f0 ff5f 	bl	8002d9c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8011ede:	f7ff fcd7 	bl	8011890 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8011ee2:	e7cd      	b.n	8011e80 <prvIdleTask+0x8>
 8011ee4:	200055f4 	.word	0x200055f4
 8011ee8:	e000ed04 	.word	0xe000ed04
 8011eec:	20005ae4 	.word	0x20005ae4
 8011ef0:	20005ac8 	.word	0x20005ac8

08011ef4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b082      	sub	sp, #8
 8011ef8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011efa:	2300      	movs	r3, #0
 8011efc:	607b      	str	r3, [r7, #4]
 8011efe:	e00c      	b.n	8011f1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011f00:	687a      	ldr	r2, [r7, #4]
 8011f02:	4613      	mov	r3, r2
 8011f04:	009b      	lsls	r3, r3, #2
 8011f06:	4413      	add	r3, r2
 8011f08:	009b      	lsls	r3, r3, #2
 8011f0a:	4a12      	ldr	r2, [pc, #72]	; (8011f54 <prvInitialiseTaskLists+0x60>)
 8011f0c:	4413      	add	r3, r2
 8011f0e:	4618      	mov	r0, r3
 8011f10:	f7fe f8ec 	bl	80100ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	3301      	adds	r3, #1
 8011f18:	607b      	str	r3, [r7, #4]
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	2b37      	cmp	r3, #55	; 0x37
 8011f1e:	d9ef      	bls.n	8011f00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011f20:	480d      	ldr	r0, [pc, #52]	; (8011f58 <prvInitialiseTaskLists+0x64>)
 8011f22:	f7fe f8e3 	bl	80100ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011f26:	480d      	ldr	r0, [pc, #52]	; (8011f5c <prvInitialiseTaskLists+0x68>)
 8011f28:	f7fe f8e0 	bl	80100ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011f2c:	480c      	ldr	r0, [pc, #48]	; (8011f60 <prvInitialiseTaskLists+0x6c>)
 8011f2e:	f7fe f8dd 	bl	80100ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011f32:	480c      	ldr	r0, [pc, #48]	; (8011f64 <prvInitialiseTaskLists+0x70>)
 8011f34:	f7fe f8da 	bl	80100ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011f38:	480b      	ldr	r0, [pc, #44]	; (8011f68 <prvInitialiseTaskLists+0x74>)
 8011f3a:	f7fe f8d7 	bl	80100ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011f3e:	4b0b      	ldr	r3, [pc, #44]	; (8011f6c <prvInitialiseTaskLists+0x78>)
 8011f40:	4a05      	ldr	r2, [pc, #20]	; (8011f58 <prvInitialiseTaskLists+0x64>)
 8011f42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011f44:	4b0a      	ldr	r3, [pc, #40]	; (8011f70 <prvInitialiseTaskLists+0x7c>)
 8011f46:	4a05      	ldr	r2, [pc, #20]	; (8011f5c <prvInitialiseTaskLists+0x68>)
 8011f48:	601a      	str	r2, [r3, #0]
}
 8011f4a:	bf00      	nop
 8011f4c:	3708      	adds	r7, #8
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bd80      	pop	{r7, pc}
 8011f52:	bf00      	nop
 8011f54:	200055f4 	.word	0x200055f4
 8011f58:	20005a54 	.word	0x20005a54
 8011f5c:	20005a68 	.word	0x20005a68
 8011f60:	20005a84 	.word	0x20005a84
 8011f64:	20005a98 	.word	0x20005a98
 8011f68:	20005ab0 	.word	0x20005ab0
 8011f6c:	20005a7c 	.word	0x20005a7c
 8011f70:	20005a80 	.word	0x20005a80

08011f74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b082      	sub	sp, #8
 8011f78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011f7a:	e019      	b.n	8011fb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011f7c:	f7fd fdc6 	bl	800fb0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f80:	4b0f      	ldr	r3, [pc, #60]	; (8011fc0 <prvCheckTasksWaitingTermination+0x4c>)
 8011f82:	68db      	ldr	r3, [r3, #12]
 8011f84:	68db      	ldr	r3, [r3, #12]
 8011f86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	3304      	adds	r3, #4
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	f7fe f937 	bl	8010200 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011f92:	4b0c      	ldr	r3, [pc, #48]	; (8011fc4 <prvCheckTasksWaitingTermination+0x50>)
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	3b01      	subs	r3, #1
 8011f98:	4a0a      	ldr	r2, [pc, #40]	; (8011fc4 <prvCheckTasksWaitingTermination+0x50>)
 8011f9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011f9c:	4b0a      	ldr	r3, [pc, #40]	; (8011fc8 <prvCheckTasksWaitingTermination+0x54>)
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	3b01      	subs	r3, #1
 8011fa2:	4a09      	ldr	r2, [pc, #36]	; (8011fc8 <prvCheckTasksWaitingTermination+0x54>)
 8011fa4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011fa6:	f7fd fddf 	bl	800fb68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011faa:	6878      	ldr	r0, [r7, #4]
 8011fac:	f000 f80e 	bl	8011fcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011fb0:	4b05      	ldr	r3, [pc, #20]	; (8011fc8 <prvCheckTasksWaitingTermination+0x54>)
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d1e1      	bne.n	8011f7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011fb8:	bf00      	nop
 8011fba:	3708      	adds	r7, #8
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd80      	pop	{r7, pc}
 8011fc0:	20005a98 	.word	0x20005a98
 8011fc4:	20005ac4 	.word	0x20005ac4
 8011fc8:	20005aac 	.word	0x20005aac

08011fcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b084      	sub	sp, #16
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d108      	bne.n	8011ff0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f7fd ff6e 	bl	800fec4 <vPortFree>
				vPortFree( pxTCB );
 8011fe8:	6878      	ldr	r0, [r7, #4]
 8011fea:	f7fd ff6b 	bl	800fec4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011fee:	e017      	b.n	8012020 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011ff6:	2b01      	cmp	r3, #1
 8011ff8:	d103      	bne.n	8012002 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011ffa:	6878      	ldr	r0, [r7, #4]
 8011ffc:	f7fd ff62 	bl	800fec4 <vPortFree>
	}
 8012000:	e00e      	b.n	8012020 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012008:	2b02      	cmp	r3, #2
 801200a:	d009      	beq.n	8012020 <prvDeleteTCB+0x54>
 801200c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012010:	f383 8811 	msr	BASEPRI, r3
 8012014:	f3bf 8f6f 	isb	sy
 8012018:	f3bf 8f4f 	dsb	sy
 801201c:	60fb      	str	r3, [r7, #12]
 801201e:	e7fe      	b.n	801201e <prvDeleteTCB+0x52>
	}
 8012020:	bf00      	nop
 8012022:	3710      	adds	r7, #16
 8012024:	46bd      	mov	sp, r7
 8012026:	bd80      	pop	{r7, pc}

08012028 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012028:	b480      	push	{r7}
 801202a:	b083      	sub	sp, #12
 801202c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801202e:	4b0c      	ldr	r3, [pc, #48]	; (8012060 <prvResetNextTaskUnblockTime+0x38>)
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d104      	bne.n	8012042 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012038:	4b0a      	ldr	r3, [pc, #40]	; (8012064 <prvResetNextTaskUnblockTime+0x3c>)
 801203a:	f04f 32ff 	mov.w	r2, #4294967295
 801203e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012040:	e008      	b.n	8012054 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012042:	4b07      	ldr	r3, [pc, #28]	; (8012060 <prvResetNextTaskUnblockTime+0x38>)
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	68db      	ldr	r3, [r3, #12]
 8012048:	68db      	ldr	r3, [r3, #12]
 801204a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	685b      	ldr	r3, [r3, #4]
 8012050:	4a04      	ldr	r2, [pc, #16]	; (8012064 <prvResetNextTaskUnblockTime+0x3c>)
 8012052:	6013      	str	r3, [r2, #0]
}
 8012054:	bf00      	nop
 8012056:	370c      	adds	r7, #12
 8012058:	46bd      	mov	sp, r7
 801205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205e:	4770      	bx	lr
 8012060:	20005a7c 	.word	0x20005a7c
 8012064:	20005ae4 	.word	0x20005ae4

08012068 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8012068:	b480      	push	{r7}
 801206a:	b083      	sub	sp, #12
 801206c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801206e:	4b05      	ldr	r3, [pc, #20]	; (8012084 <xTaskGetCurrentTaskHandle+0x1c>)
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	607b      	str	r3, [r7, #4]

		return xReturn;
 8012074:	687b      	ldr	r3, [r7, #4]
	}
 8012076:	4618      	mov	r0, r3
 8012078:	370c      	adds	r7, #12
 801207a:	46bd      	mov	sp, r7
 801207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012080:	4770      	bx	lr
 8012082:	bf00      	nop
 8012084:	200055f0 	.word	0x200055f0

08012088 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012088:	b480      	push	{r7}
 801208a:	b083      	sub	sp, #12
 801208c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801208e:	4b0b      	ldr	r3, [pc, #44]	; (80120bc <xTaskGetSchedulerState+0x34>)
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d102      	bne.n	801209c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012096:	2301      	movs	r3, #1
 8012098:	607b      	str	r3, [r7, #4]
 801209a:	e008      	b.n	80120ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801209c:	4b08      	ldr	r3, [pc, #32]	; (80120c0 <xTaskGetSchedulerState+0x38>)
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d102      	bne.n	80120aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80120a4:	2302      	movs	r3, #2
 80120a6:	607b      	str	r3, [r7, #4]
 80120a8:	e001      	b.n	80120ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80120aa:	2300      	movs	r3, #0
 80120ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80120ae:	687b      	ldr	r3, [r7, #4]
	}
 80120b0:	4618      	mov	r0, r3
 80120b2:	370c      	adds	r7, #12
 80120b4:	46bd      	mov	sp, r7
 80120b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ba:	4770      	bx	lr
 80120bc:	20005ad0 	.word	0x20005ad0
 80120c0:	20005aec 	.word	0x20005aec

080120c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b084      	sub	sp, #16
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80120d0:	2300      	movs	r3, #0
 80120d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d051      	beq.n	801217e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80120da:	68bb      	ldr	r3, [r7, #8]
 80120dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120de:	4b2a      	ldr	r3, [pc, #168]	; (8012188 <xTaskPriorityInherit+0xc4>)
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120e4:	429a      	cmp	r2, r3
 80120e6:	d241      	bcs.n	801216c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80120e8:	68bb      	ldr	r3, [r7, #8]
 80120ea:	699b      	ldr	r3, [r3, #24]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	db06      	blt.n	80120fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80120f0:	4b25      	ldr	r3, [pc, #148]	; (8012188 <xTaskPriorityInherit+0xc4>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80120fa:	68bb      	ldr	r3, [r7, #8]
 80120fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80120fe:	68bb      	ldr	r3, [r7, #8]
 8012100:	6959      	ldr	r1, [r3, #20]
 8012102:	68bb      	ldr	r3, [r7, #8]
 8012104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012106:	4613      	mov	r3, r2
 8012108:	009b      	lsls	r3, r3, #2
 801210a:	4413      	add	r3, r2
 801210c:	009b      	lsls	r3, r3, #2
 801210e:	4a1f      	ldr	r2, [pc, #124]	; (801218c <xTaskPriorityInherit+0xc8>)
 8012110:	4413      	add	r3, r2
 8012112:	4299      	cmp	r1, r3
 8012114:	d122      	bne.n	801215c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012116:	68bb      	ldr	r3, [r7, #8]
 8012118:	3304      	adds	r3, #4
 801211a:	4618      	mov	r0, r3
 801211c:	f7fe f870 	bl	8010200 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012120:	4b19      	ldr	r3, [pc, #100]	; (8012188 <xTaskPriorityInherit+0xc4>)
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012126:	68bb      	ldr	r3, [r7, #8]
 8012128:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801212a:	68bb      	ldr	r3, [r7, #8]
 801212c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801212e:	4b18      	ldr	r3, [pc, #96]	; (8012190 <xTaskPriorityInherit+0xcc>)
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	429a      	cmp	r2, r3
 8012134:	d903      	bls.n	801213e <xTaskPriorityInherit+0x7a>
 8012136:	68bb      	ldr	r3, [r7, #8]
 8012138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801213a:	4a15      	ldr	r2, [pc, #84]	; (8012190 <xTaskPriorityInherit+0xcc>)
 801213c:	6013      	str	r3, [r2, #0]
 801213e:	68bb      	ldr	r3, [r7, #8]
 8012140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012142:	4613      	mov	r3, r2
 8012144:	009b      	lsls	r3, r3, #2
 8012146:	4413      	add	r3, r2
 8012148:	009b      	lsls	r3, r3, #2
 801214a:	4a10      	ldr	r2, [pc, #64]	; (801218c <xTaskPriorityInherit+0xc8>)
 801214c:	441a      	add	r2, r3
 801214e:	68bb      	ldr	r3, [r7, #8]
 8012150:	3304      	adds	r3, #4
 8012152:	4619      	mov	r1, r3
 8012154:	4610      	mov	r0, r2
 8012156:	f7fd fff6 	bl	8010146 <vListInsertEnd>
 801215a:	e004      	b.n	8012166 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801215c:	4b0a      	ldr	r3, [pc, #40]	; (8012188 <xTaskPriorityInherit+0xc4>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012162:	68bb      	ldr	r3, [r7, #8]
 8012164:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012166:	2301      	movs	r3, #1
 8012168:	60fb      	str	r3, [r7, #12]
 801216a:	e008      	b.n	801217e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801216c:	68bb      	ldr	r3, [r7, #8]
 801216e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012170:	4b05      	ldr	r3, [pc, #20]	; (8012188 <xTaskPriorityInherit+0xc4>)
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012176:	429a      	cmp	r2, r3
 8012178:	d201      	bcs.n	801217e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801217a:	2301      	movs	r3, #1
 801217c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801217e:	68fb      	ldr	r3, [r7, #12]
	}
 8012180:	4618      	mov	r0, r3
 8012182:	3710      	adds	r7, #16
 8012184:	46bd      	mov	sp, r7
 8012186:	bd80      	pop	{r7, pc}
 8012188:	200055f0 	.word	0x200055f0
 801218c:	200055f4 	.word	0x200055f4
 8012190:	20005acc 	.word	0x20005acc

08012194 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012194:	b580      	push	{r7, lr}
 8012196:	b086      	sub	sp, #24
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80121a0:	2300      	movs	r3, #0
 80121a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d054      	beq.n	8012254 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80121aa:	4b2d      	ldr	r3, [pc, #180]	; (8012260 <xTaskPriorityDisinherit+0xcc>)
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	693a      	ldr	r2, [r7, #16]
 80121b0:	429a      	cmp	r2, r3
 80121b2:	d009      	beq.n	80121c8 <xTaskPriorityDisinherit+0x34>
 80121b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121b8:	f383 8811 	msr	BASEPRI, r3
 80121bc:	f3bf 8f6f 	isb	sy
 80121c0:	f3bf 8f4f 	dsb	sy
 80121c4:	60fb      	str	r3, [r7, #12]
 80121c6:	e7fe      	b.n	80121c6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80121c8:	693b      	ldr	r3, [r7, #16]
 80121ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d109      	bne.n	80121e4 <xTaskPriorityDisinherit+0x50>
 80121d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121d4:	f383 8811 	msr	BASEPRI, r3
 80121d8:	f3bf 8f6f 	isb	sy
 80121dc:	f3bf 8f4f 	dsb	sy
 80121e0:	60bb      	str	r3, [r7, #8]
 80121e2:	e7fe      	b.n	80121e2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80121e4:	693b      	ldr	r3, [r7, #16]
 80121e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80121e8:	1e5a      	subs	r2, r3, #1
 80121ea:	693b      	ldr	r3, [r7, #16]
 80121ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80121ee:	693b      	ldr	r3, [r7, #16]
 80121f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121f2:	693b      	ldr	r3, [r7, #16]
 80121f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80121f6:	429a      	cmp	r2, r3
 80121f8:	d02c      	beq.n	8012254 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80121fa:	693b      	ldr	r3, [r7, #16]
 80121fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d128      	bne.n	8012254 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012202:	693b      	ldr	r3, [r7, #16]
 8012204:	3304      	adds	r3, #4
 8012206:	4618      	mov	r0, r3
 8012208:	f7fd fffa 	bl	8010200 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801220c:	693b      	ldr	r3, [r7, #16]
 801220e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012210:	693b      	ldr	r3, [r7, #16]
 8012212:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012214:	693b      	ldr	r3, [r7, #16]
 8012216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012218:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801221c:	693b      	ldr	r3, [r7, #16]
 801221e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012220:	693b      	ldr	r3, [r7, #16]
 8012222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012224:	4b0f      	ldr	r3, [pc, #60]	; (8012264 <xTaskPriorityDisinherit+0xd0>)
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	429a      	cmp	r2, r3
 801222a:	d903      	bls.n	8012234 <xTaskPriorityDisinherit+0xa0>
 801222c:	693b      	ldr	r3, [r7, #16]
 801222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012230:	4a0c      	ldr	r2, [pc, #48]	; (8012264 <xTaskPriorityDisinherit+0xd0>)
 8012232:	6013      	str	r3, [r2, #0]
 8012234:	693b      	ldr	r3, [r7, #16]
 8012236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012238:	4613      	mov	r3, r2
 801223a:	009b      	lsls	r3, r3, #2
 801223c:	4413      	add	r3, r2
 801223e:	009b      	lsls	r3, r3, #2
 8012240:	4a09      	ldr	r2, [pc, #36]	; (8012268 <xTaskPriorityDisinherit+0xd4>)
 8012242:	441a      	add	r2, r3
 8012244:	693b      	ldr	r3, [r7, #16]
 8012246:	3304      	adds	r3, #4
 8012248:	4619      	mov	r1, r3
 801224a:	4610      	mov	r0, r2
 801224c:	f7fd ff7b 	bl	8010146 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012250:	2301      	movs	r3, #1
 8012252:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012254:	697b      	ldr	r3, [r7, #20]
	}
 8012256:	4618      	mov	r0, r3
 8012258:	3718      	adds	r7, #24
 801225a:	46bd      	mov	sp, r7
 801225c:	bd80      	pop	{r7, pc}
 801225e:	bf00      	nop
 8012260:	200055f0 	.word	0x200055f0
 8012264:	20005acc 	.word	0x20005acc
 8012268:	200055f4 	.word	0x200055f4

0801226c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801226c:	b580      	push	{r7, lr}
 801226e:	b088      	sub	sp, #32
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
 8012274:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801227a:	2301      	movs	r3, #1
 801227c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d068      	beq.n	8012356 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012284:	69bb      	ldr	r3, [r7, #24]
 8012286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012288:	2b00      	cmp	r3, #0
 801228a:	d109      	bne.n	80122a0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 801228c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012290:	f383 8811 	msr	BASEPRI, r3
 8012294:	f3bf 8f6f 	isb	sy
 8012298:	f3bf 8f4f 	dsb	sy
 801229c:	60fb      	str	r3, [r7, #12]
 801229e:	e7fe      	b.n	801229e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80122a0:	69bb      	ldr	r3, [r7, #24]
 80122a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80122a4:	683a      	ldr	r2, [r7, #0]
 80122a6:	429a      	cmp	r2, r3
 80122a8:	d902      	bls.n	80122b0 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80122aa:	683b      	ldr	r3, [r7, #0]
 80122ac:	61fb      	str	r3, [r7, #28]
 80122ae:	e002      	b.n	80122b6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80122b0:	69bb      	ldr	r3, [r7, #24]
 80122b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80122b4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80122b6:	69bb      	ldr	r3, [r7, #24]
 80122b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122ba:	69fa      	ldr	r2, [r7, #28]
 80122bc:	429a      	cmp	r2, r3
 80122be:	d04a      	beq.n	8012356 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80122c0:	69bb      	ldr	r3, [r7, #24]
 80122c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80122c4:	697a      	ldr	r2, [r7, #20]
 80122c6:	429a      	cmp	r2, r3
 80122c8:	d145      	bne.n	8012356 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80122ca:	4b25      	ldr	r3, [pc, #148]	; (8012360 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	69ba      	ldr	r2, [r7, #24]
 80122d0:	429a      	cmp	r2, r3
 80122d2:	d109      	bne.n	80122e8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80122d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122d8:	f383 8811 	msr	BASEPRI, r3
 80122dc:	f3bf 8f6f 	isb	sy
 80122e0:	f3bf 8f4f 	dsb	sy
 80122e4:	60bb      	str	r3, [r7, #8]
 80122e6:	e7fe      	b.n	80122e6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80122e8:	69bb      	ldr	r3, [r7, #24]
 80122ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122ec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80122ee:	69bb      	ldr	r3, [r7, #24]
 80122f0:	69fa      	ldr	r2, [r7, #28]
 80122f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80122f4:	69bb      	ldr	r3, [r7, #24]
 80122f6:	699b      	ldr	r3, [r3, #24]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	db04      	blt.n	8012306 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80122fc:	69fb      	ldr	r3, [r7, #28]
 80122fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012302:	69bb      	ldr	r3, [r7, #24]
 8012304:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012306:	69bb      	ldr	r3, [r7, #24]
 8012308:	6959      	ldr	r1, [r3, #20]
 801230a:	693a      	ldr	r2, [r7, #16]
 801230c:	4613      	mov	r3, r2
 801230e:	009b      	lsls	r3, r3, #2
 8012310:	4413      	add	r3, r2
 8012312:	009b      	lsls	r3, r3, #2
 8012314:	4a13      	ldr	r2, [pc, #76]	; (8012364 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012316:	4413      	add	r3, r2
 8012318:	4299      	cmp	r1, r3
 801231a:	d11c      	bne.n	8012356 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801231c:	69bb      	ldr	r3, [r7, #24]
 801231e:	3304      	adds	r3, #4
 8012320:	4618      	mov	r0, r3
 8012322:	f7fd ff6d 	bl	8010200 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012326:	69bb      	ldr	r3, [r7, #24]
 8012328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801232a:	4b0f      	ldr	r3, [pc, #60]	; (8012368 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	429a      	cmp	r2, r3
 8012330:	d903      	bls.n	801233a <vTaskPriorityDisinheritAfterTimeout+0xce>
 8012332:	69bb      	ldr	r3, [r7, #24]
 8012334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012336:	4a0c      	ldr	r2, [pc, #48]	; (8012368 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012338:	6013      	str	r3, [r2, #0]
 801233a:	69bb      	ldr	r3, [r7, #24]
 801233c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801233e:	4613      	mov	r3, r2
 8012340:	009b      	lsls	r3, r3, #2
 8012342:	4413      	add	r3, r2
 8012344:	009b      	lsls	r3, r3, #2
 8012346:	4a07      	ldr	r2, [pc, #28]	; (8012364 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012348:	441a      	add	r2, r3
 801234a:	69bb      	ldr	r3, [r7, #24]
 801234c:	3304      	adds	r3, #4
 801234e:	4619      	mov	r1, r3
 8012350:	4610      	mov	r0, r2
 8012352:	f7fd fef8 	bl	8010146 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012356:	bf00      	nop
 8012358:	3720      	adds	r7, #32
 801235a:	46bd      	mov	sp, r7
 801235c:	bd80      	pop	{r7, pc}
 801235e:	bf00      	nop
 8012360:	200055f0 	.word	0x200055f0
 8012364:	200055f4 	.word	0x200055f4
 8012368:	20005acc 	.word	0x20005acc

0801236c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801236c:	b480      	push	{r7}
 801236e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012370:	4b07      	ldr	r3, [pc, #28]	; (8012390 <pvTaskIncrementMutexHeldCount+0x24>)
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d004      	beq.n	8012382 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012378:	4b05      	ldr	r3, [pc, #20]	; (8012390 <pvTaskIncrementMutexHeldCount+0x24>)
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801237e:	3201      	adds	r2, #1
 8012380:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8012382:	4b03      	ldr	r3, [pc, #12]	; (8012390 <pvTaskIncrementMutexHeldCount+0x24>)
 8012384:	681b      	ldr	r3, [r3, #0]
	}
 8012386:	4618      	mov	r0, r3
 8012388:	46bd      	mov	sp, r7
 801238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238e:	4770      	bx	lr
 8012390:	200055f0 	.word	0x200055f0

08012394 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8012394:	b580      	push	{r7, lr}
 8012396:	b084      	sub	sp, #16
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
 801239c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 801239e:	f7fd fbb5 	bl	800fb0c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80123a2:	4b1e      	ldr	r3, [pc, #120]	; (801241c <ulTaskNotifyTake+0x88>)
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d113      	bne.n	80123d4 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80123ac:	4b1b      	ldr	r3, [pc, #108]	; (801241c <ulTaskNotifyTake+0x88>)
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	2201      	movs	r2, #1
 80123b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80123b6:	683b      	ldr	r3, [r7, #0]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d00b      	beq.n	80123d4 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80123bc:	2101      	movs	r1, #1
 80123be:	6838      	ldr	r0, [r7, #0]
 80123c0:	f000 fa18 	bl	80127f4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80123c4:	4b16      	ldr	r3, [pc, #88]	; (8012420 <ulTaskNotifyTake+0x8c>)
 80123c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123ca:	601a      	str	r2, [r3, #0]
 80123cc:	f3bf 8f4f 	dsb	sy
 80123d0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80123d4:	f7fd fbc8 	bl	800fb68 <vPortExitCritical>

		taskENTER_CRITICAL();
 80123d8:	f7fd fb98 	bl	800fb0c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80123dc:	4b0f      	ldr	r3, [pc, #60]	; (801241c <ulTaskNotifyTake+0x88>)
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80123e2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d00c      	beq.n	8012404 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d004      	beq.n	80123fa <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80123f0:	4b0a      	ldr	r3, [pc, #40]	; (801241c <ulTaskNotifyTake+0x88>)
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	2200      	movs	r2, #0
 80123f6:	655a      	str	r2, [r3, #84]	; 0x54
 80123f8:	e004      	b.n	8012404 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80123fa:	4b08      	ldr	r3, [pc, #32]	; (801241c <ulTaskNotifyTake+0x88>)
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	68fa      	ldr	r2, [r7, #12]
 8012400:	3a01      	subs	r2, #1
 8012402:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012404:	4b05      	ldr	r3, [pc, #20]	; (801241c <ulTaskNotifyTake+0x88>)
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	2200      	movs	r2, #0
 801240a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 801240e:	f7fd fbab 	bl	800fb68 <vPortExitCritical>

		return ulReturn;
 8012412:	68fb      	ldr	r3, [r7, #12]
	}
 8012414:	4618      	mov	r0, r3
 8012416:	3710      	adds	r7, #16
 8012418:	46bd      	mov	sp, r7
 801241a:	bd80      	pop	{r7, pc}
 801241c:	200055f0 	.word	0x200055f0
 8012420:	e000ed04 	.word	0xe000ed04

08012424 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8012424:	b580      	push	{r7, lr}
 8012426:	b086      	sub	sp, #24
 8012428:	af00      	add	r7, sp, #0
 801242a:	60f8      	str	r0, [r7, #12]
 801242c:	60b9      	str	r1, [r7, #8]
 801242e:	607a      	str	r2, [r7, #4]
 8012430:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8012432:	f7fd fb6b 	bl	800fb0c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8012436:	4b26      	ldr	r3, [pc, #152]	; (80124d0 <xTaskNotifyWait+0xac>)
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801243e:	b2db      	uxtb	r3, r3
 8012440:	2b02      	cmp	r3, #2
 8012442:	d01a      	beq.n	801247a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8012444:	4b22      	ldr	r3, [pc, #136]	; (80124d0 <xTaskNotifyWait+0xac>)
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801244a:	68fa      	ldr	r2, [r7, #12]
 801244c:	43d2      	mvns	r2, r2
 801244e:	400a      	ands	r2, r1
 8012450:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8012452:	4b1f      	ldr	r3, [pc, #124]	; (80124d0 <xTaskNotifyWait+0xac>)
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	2201      	movs	r2, #1
 8012458:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d00b      	beq.n	801247a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012462:	2101      	movs	r1, #1
 8012464:	6838      	ldr	r0, [r7, #0]
 8012466:	f000 f9c5 	bl	80127f4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801246a:	4b1a      	ldr	r3, [pc, #104]	; (80124d4 <xTaskNotifyWait+0xb0>)
 801246c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012470:	601a      	str	r2, [r3, #0]
 8012472:	f3bf 8f4f 	dsb	sy
 8012476:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801247a:	f7fd fb75 	bl	800fb68 <vPortExitCritical>

		taskENTER_CRITICAL();
 801247e:	f7fd fb45 	bl	800fb0c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d004      	beq.n	8012492 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8012488:	4b11      	ldr	r3, [pc, #68]	; (80124d0 <xTaskNotifyWait+0xac>)
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8012492:	4b0f      	ldr	r3, [pc, #60]	; (80124d0 <xTaskNotifyWait+0xac>)
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801249a:	b2db      	uxtb	r3, r3
 801249c:	2b02      	cmp	r3, #2
 801249e:	d002      	beq.n	80124a6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80124a0:	2300      	movs	r3, #0
 80124a2:	617b      	str	r3, [r7, #20]
 80124a4:	e008      	b.n	80124b8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80124a6:	4b0a      	ldr	r3, [pc, #40]	; (80124d0 <xTaskNotifyWait+0xac>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80124ac:	68ba      	ldr	r2, [r7, #8]
 80124ae:	43d2      	mvns	r2, r2
 80124b0:	400a      	ands	r2, r1
 80124b2:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80124b4:	2301      	movs	r3, #1
 80124b6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80124b8:	4b05      	ldr	r3, [pc, #20]	; (80124d0 <xTaskNotifyWait+0xac>)
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	2200      	movs	r2, #0
 80124be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80124c2:	f7fd fb51 	bl	800fb68 <vPortExitCritical>

		return xReturn;
 80124c6:	697b      	ldr	r3, [r7, #20]
	}
 80124c8:	4618      	mov	r0, r3
 80124ca:	3718      	adds	r7, #24
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}
 80124d0:	200055f0 	.word	0x200055f0
 80124d4:	e000ed04 	.word	0xe000ed04

080124d8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b08a      	sub	sp, #40	; 0x28
 80124dc:	af00      	add	r7, sp, #0
 80124de:	60f8      	str	r0, [r7, #12]
 80124e0:	60b9      	str	r1, [r7, #8]
 80124e2:	603b      	str	r3, [r7, #0]
 80124e4:	4613      	mov	r3, r2
 80124e6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80124e8:	2301      	movs	r3, #1
 80124ea:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d109      	bne.n	8012506 <xTaskGenericNotify+0x2e>
 80124f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124f6:	f383 8811 	msr	BASEPRI, r3
 80124fa:	f3bf 8f6f 	isb	sy
 80124fe:	f3bf 8f4f 	dsb	sy
 8012502:	61bb      	str	r3, [r7, #24]
 8012504:	e7fe      	b.n	8012504 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801250a:	f7fd faff 	bl	800fb0c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801250e:	683b      	ldr	r3, [r7, #0]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d003      	beq.n	801251c <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8012514:	6a3b      	ldr	r3, [r7, #32]
 8012516:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012518:	683b      	ldr	r3, [r7, #0]
 801251a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801251c:	6a3b      	ldr	r3, [r7, #32]
 801251e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012522:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8012524:	6a3b      	ldr	r3, [r7, #32]
 8012526:	2202      	movs	r2, #2
 8012528:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 801252c:	79fb      	ldrb	r3, [r7, #7]
 801252e:	2b04      	cmp	r3, #4
 8012530:	d827      	bhi.n	8012582 <xTaskGenericNotify+0xaa>
 8012532:	a201      	add	r2, pc, #4	; (adr r2, 8012538 <xTaskGenericNotify+0x60>)
 8012534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012538:	080125a1 	.word	0x080125a1
 801253c:	0801254d 	.word	0x0801254d
 8012540:	0801255b 	.word	0x0801255b
 8012544:	08012567 	.word	0x08012567
 8012548:	0801256f 	.word	0x0801256f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801254c:	6a3b      	ldr	r3, [r7, #32]
 801254e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012550:	68bb      	ldr	r3, [r7, #8]
 8012552:	431a      	orrs	r2, r3
 8012554:	6a3b      	ldr	r3, [r7, #32]
 8012556:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012558:	e025      	b.n	80125a6 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801255a:	6a3b      	ldr	r3, [r7, #32]
 801255c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801255e:	1c5a      	adds	r2, r3, #1
 8012560:	6a3b      	ldr	r3, [r7, #32]
 8012562:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012564:	e01f      	b.n	80125a6 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8012566:	6a3b      	ldr	r3, [r7, #32]
 8012568:	68ba      	ldr	r2, [r7, #8]
 801256a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 801256c:	e01b      	b.n	80125a6 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801256e:	7ffb      	ldrb	r3, [r7, #31]
 8012570:	2b02      	cmp	r3, #2
 8012572:	d003      	beq.n	801257c <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8012574:	6a3b      	ldr	r3, [r7, #32]
 8012576:	68ba      	ldr	r2, [r7, #8]
 8012578:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801257a:	e014      	b.n	80125a6 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 801257c:	2300      	movs	r3, #0
 801257e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8012580:	e011      	b.n	80125a6 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8012582:	6a3b      	ldr	r3, [r7, #32]
 8012584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012586:	f1b3 3fff 	cmp.w	r3, #4294967295
 801258a:	d00b      	beq.n	80125a4 <xTaskGenericNotify+0xcc>
 801258c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012590:	f383 8811 	msr	BASEPRI, r3
 8012594:	f3bf 8f6f 	isb	sy
 8012598:	f3bf 8f4f 	dsb	sy
 801259c:	617b      	str	r3, [r7, #20]
 801259e:	e7fe      	b.n	801259e <xTaskGenericNotify+0xc6>
					break;
 80125a0:	bf00      	nop
 80125a2:	e000      	b.n	80125a6 <xTaskGenericNotify+0xce>

					break;
 80125a4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80125a6:	7ffb      	ldrb	r3, [r7, #31]
 80125a8:	2b01      	cmp	r3, #1
 80125aa:	d13b      	bne.n	8012624 <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80125ac:	6a3b      	ldr	r3, [r7, #32]
 80125ae:	3304      	adds	r3, #4
 80125b0:	4618      	mov	r0, r3
 80125b2:	f7fd fe25 	bl	8010200 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80125b6:	6a3b      	ldr	r3, [r7, #32]
 80125b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125ba:	4b1e      	ldr	r3, [pc, #120]	; (8012634 <xTaskGenericNotify+0x15c>)
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	429a      	cmp	r2, r3
 80125c0:	d903      	bls.n	80125ca <xTaskGenericNotify+0xf2>
 80125c2:	6a3b      	ldr	r3, [r7, #32]
 80125c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125c6:	4a1b      	ldr	r2, [pc, #108]	; (8012634 <xTaskGenericNotify+0x15c>)
 80125c8:	6013      	str	r3, [r2, #0]
 80125ca:	6a3b      	ldr	r3, [r7, #32]
 80125cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125ce:	4613      	mov	r3, r2
 80125d0:	009b      	lsls	r3, r3, #2
 80125d2:	4413      	add	r3, r2
 80125d4:	009b      	lsls	r3, r3, #2
 80125d6:	4a18      	ldr	r2, [pc, #96]	; (8012638 <xTaskGenericNotify+0x160>)
 80125d8:	441a      	add	r2, r3
 80125da:	6a3b      	ldr	r3, [r7, #32]
 80125dc:	3304      	adds	r3, #4
 80125de:	4619      	mov	r1, r3
 80125e0:	4610      	mov	r0, r2
 80125e2:	f7fd fdb0 	bl	8010146 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80125e6:	6a3b      	ldr	r3, [r7, #32]
 80125e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d009      	beq.n	8012602 <xTaskGenericNotify+0x12a>
 80125ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125f2:	f383 8811 	msr	BASEPRI, r3
 80125f6:	f3bf 8f6f 	isb	sy
 80125fa:	f3bf 8f4f 	dsb	sy
 80125fe:	613b      	str	r3, [r7, #16]
 8012600:	e7fe      	b.n	8012600 <xTaskGenericNotify+0x128>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 8012602:	f7ff fd11 	bl	8012028 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012606:	6a3b      	ldr	r3, [r7, #32]
 8012608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801260a:	4b0c      	ldr	r3, [pc, #48]	; (801263c <xTaskGenericNotify+0x164>)
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012610:	429a      	cmp	r2, r3
 8012612:	d907      	bls.n	8012624 <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8012614:	4b0a      	ldr	r3, [pc, #40]	; (8012640 <xTaskGenericNotify+0x168>)
 8012616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801261a:	601a      	str	r2, [r3, #0]
 801261c:	f3bf 8f4f 	dsb	sy
 8012620:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012624:	f7fd faa0 	bl	800fb68 <vPortExitCritical>

		return xReturn;
 8012628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801262a:	4618      	mov	r0, r3
 801262c:	3728      	adds	r7, #40	; 0x28
 801262e:	46bd      	mov	sp, r7
 8012630:	bd80      	pop	{r7, pc}
 8012632:	bf00      	nop
 8012634:	20005acc 	.word	0x20005acc
 8012638:	200055f4 	.word	0x200055f4
 801263c:	200055f0 	.word	0x200055f0
 8012640:	e000ed04 	.word	0xe000ed04

08012644 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012644:	b580      	push	{r7, lr}
 8012646:	b08e      	sub	sp, #56	; 0x38
 8012648:	af00      	add	r7, sp, #0
 801264a:	60f8      	str	r0, [r7, #12]
 801264c:	60b9      	str	r1, [r7, #8]
 801264e:	603b      	str	r3, [r7, #0]
 8012650:	4613      	mov	r3, r2
 8012652:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8012654:	2301      	movs	r3, #1
 8012656:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d109      	bne.n	8012672 <xTaskGenericNotifyFromISR+0x2e>
 801265e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012662:	f383 8811 	msr	BASEPRI, r3
 8012666:	f3bf 8f6f 	isb	sy
 801266a:	f3bf 8f4f 	dsb	sy
 801266e:	627b      	str	r3, [r7, #36]	; 0x24
 8012670:	e7fe      	b.n	8012670 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012672:	f7fd fb27 	bl	800fcc4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 801267a:	f3ef 8211 	mrs	r2, BASEPRI
 801267e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012682:	f383 8811 	msr	BASEPRI, r3
 8012686:	f3bf 8f6f 	isb	sy
 801268a:	f3bf 8f4f 	dsb	sy
 801268e:	623a      	str	r2, [r7, #32]
 8012690:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8012692:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012694:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8012696:	683b      	ldr	r3, [r7, #0]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d003      	beq.n	80126a4 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801269c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801269e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80126a0:	683b      	ldr	r3, [r7, #0]
 80126a2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80126a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80126aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80126ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126b0:	2202      	movs	r2, #2
 80126b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80126b6:	79fb      	ldrb	r3, [r7, #7]
 80126b8:	2b04      	cmp	r3, #4
 80126ba:	d829      	bhi.n	8012710 <xTaskGenericNotifyFromISR+0xcc>
 80126bc:	a201      	add	r2, pc, #4	; (adr r2, 80126c4 <xTaskGenericNotifyFromISR+0x80>)
 80126be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126c2:	bf00      	nop
 80126c4:	0801272f 	.word	0x0801272f
 80126c8:	080126d9 	.word	0x080126d9
 80126cc:	080126e7 	.word	0x080126e7
 80126d0:	080126f3 	.word	0x080126f3
 80126d4:	080126fb 	.word	0x080126fb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80126d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80126dc:	68bb      	ldr	r3, [r7, #8]
 80126de:	431a      	orrs	r2, r3
 80126e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126e2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80126e4:	e026      	b.n	8012734 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80126e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80126ea:	1c5a      	adds	r2, r3, #1
 80126ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ee:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80126f0:	e020      	b.n	8012734 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80126f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126f4:	68ba      	ldr	r2, [r7, #8]
 80126f6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80126f8:	e01c      	b.n	8012734 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80126fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80126fe:	2b02      	cmp	r3, #2
 8012700:	d003      	beq.n	801270a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8012702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012704:	68ba      	ldr	r2, [r7, #8]
 8012706:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8012708:	e014      	b.n	8012734 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 801270a:	2300      	movs	r3, #0
 801270c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801270e:	e011      	b.n	8012734 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8012710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012718:	d00b      	beq.n	8012732 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 801271a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801271e:	f383 8811 	msr	BASEPRI, r3
 8012722:	f3bf 8f6f 	isb	sy
 8012726:	f3bf 8f4f 	dsb	sy
 801272a:	61bb      	str	r3, [r7, #24]
 801272c:	e7fe      	b.n	801272c <xTaskGenericNotifyFromISR+0xe8>
					break;
 801272e:	bf00      	nop
 8012730:	e000      	b.n	8012734 <xTaskGenericNotifyFromISR+0xf0>
					break;
 8012732:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8012734:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012738:	2b01      	cmp	r3, #1
 801273a:	d145      	bne.n	80127c8 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801273c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801273e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012740:	2b00      	cmp	r3, #0
 8012742:	d009      	beq.n	8012758 <xTaskGenericNotifyFromISR+0x114>
 8012744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012748:	f383 8811 	msr	BASEPRI, r3
 801274c:	f3bf 8f6f 	isb	sy
 8012750:	f3bf 8f4f 	dsb	sy
 8012754:	617b      	str	r3, [r7, #20]
 8012756:	e7fe      	b.n	8012756 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012758:	4b20      	ldr	r3, [pc, #128]	; (80127dc <xTaskGenericNotifyFromISR+0x198>)
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d11d      	bne.n	801279c <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012762:	3304      	adds	r3, #4
 8012764:	4618      	mov	r0, r3
 8012766:	f7fd fd4b 	bl	8010200 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801276a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801276c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801276e:	4b1c      	ldr	r3, [pc, #112]	; (80127e0 <xTaskGenericNotifyFromISR+0x19c>)
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	429a      	cmp	r2, r3
 8012774:	d903      	bls.n	801277e <xTaskGenericNotifyFromISR+0x13a>
 8012776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801277a:	4a19      	ldr	r2, [pc, #100]	; (80127e0 <xTaskGenericNotifyFromISR+0x19c>)
 801277c:	6013      	str	r3, [r2, #0]
 801277e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012782:	4613      	mov	r3, r2
 8012784:	009b      	lsls	r3, r3, #2
 8012786:	4413      	add	r3, r2
 8012788:	009b      	lsls	r3, r3, #2
 801278a:	4a16      	ldr	r2, [pc, #88]	; (80127e4 <xTaskGenericNotifyFromISR+0x1a0>)
 801278c:	441a      	add	r2, r3
 801278e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012790:	3304      	adds	r3, #4
 8012792:	4619      	mov	r1, r3
 8012794:	4610      	mov	r0, r2
 8012796:	f7fd fcd6 	bl	8010146 <vListInsertEnd>
 801279a:	e005      	b.n	80127a8 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801279c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801279e:	3318      	adds	r3, #24
 80127a0:	4619      	mov	r1, r3
 80127a2:	4811      	ldr	r0, [pc, #68]	; (80127e8 <xTaskGenericNotifyFromISR+0x1a4>)
 80127a4:	f7fd fccf 	bl	8010146 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80127a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127ac:	4b0f      	ldr	r3, [pc, #60]	; (80127ec <xTaskGenericNotifyFromISR+0x1a8>)
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127b2:	429a      	cmp	r2, r3
 80127b4:	d908      	bls.n	80127c8 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80127b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d002      	beq.n	80127c2 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80127bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127be:	2201      	movs	r2, #1
 80127c0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80127c2:	4b0b      	ldr	r3, [pc, #44]	; (80127f0 <xTaskGenericNotifyFromISR+0x1ac>)
 80127c4:	2201      	movs	r2, #1
 80127c6:	601a      	str	r2, [r3, #0]
 80127c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ca:	613b      	str	r3, [r7, #16]
	__asm volatile
 80127cc:	693b      	ldr	r3, [r7, #16]
 80127ce:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80127d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80127d4:	4618      	mov	r0, r3
 80127d6:	3738      	adds	r7, #56	; 0x38
 80127d8:	46bd      	mov	sp, r7
 80127da:	bd80      	pop	{r7, pc}
 80127dc:	20005aec 	.word	0x20005aec
 80127e0:	20005acc 	.word	0x20005acc
 80127e4:	200055f4 	.word	0x200055f4
 80127e8:	20005a84 	.word	0x20005a84
 80127ec:	200055f0 	.word	0x200055f0
 80127f0:	20005ad8 	.word	0x20005ad8

080127f4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b084      	sub	sp, #16
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
 80127fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80127fe:	4b21      	ldr	r3, [pc, #132]	; (8012884 <prvAddCurrentTaskToDelayedList+0x90>)
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012804:	4b20      	ldr	r3, [pc, #128]	; (8012888 <prvAddCurrentTaskToDelayedList+0x94>)
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	3304      	adds	r3, #4
 801280a:	4618      	mov	r0, r3
 801280c:	f7fd fcf8 	bl	8010200 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012816:	d10a      	bne.n	801282e <prvAddCurrentTaskToDelayedList+0x3a>
 8012818:	683b      	ldr	r3, [r7, #0]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d007      	beq.n	801282e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801281e:	4b1a      	ldr	r3, [pc, #104]	; (8012888 <prvAddCurrentTaskToDelayedList+0x94>)
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	3304      	adds	r3, #4
 8012824:	4619      	mov	r1, r3
 8012826:	4819      	ldr	r0, [pc, #100]	; (801288c <prvAddCurrentTaskToDelayedList+0x98>)
 8012828:	f7fd fc8d 	bl	8010146 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801282c:	e026      	b.n	801287c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801282e:	68fa      	ldr	r2, [r7, #12]
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	4413      	add	r3, r2
 8012834:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012836:	4b14      	ldr	r3, [pc, #80]	; (8012888 <prvAddCurrentTaskToDelayedList+0x94>)
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	68ba      	ldr	r2, [r7, #8]
 801283c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801283e:	68ba      	ldr	r2, [r7, #8]
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	429a      	cmp	r2, r3
 8012844:	d209      	bcs.n	801285a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012846:	4b12      	ldr	r3, [pc, #72]	; (8012890 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012848:	681a      	ldr	r2, [r3, #0]
 801284a:	4b0f      	ldr	r3, [pc, #60]	; (8012888 <prvAddCurrentTaskToDelayedList+0x94>)
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	3304      	adds	r3, #4
 8012850:	4619      	mov	r1, r3
 8012852:	4610      	mov	r0, r2
 8012854:	f7fd fc9b 	bl	801018e <vListInsert>
}
 8012858:	e010      	b.n	801287c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801285a:	4b0e      	ldr	r3, [pc, #56]	; (8012894 <prvAddCurrentTaskToDelayedList+0xa0>)
 801285c:	681a      	ldr	r2, [r3, #0]
 801285e:	4b0a      	ldr	r3, [pc, #40]	; (8012888 <prvAddCurrentTaskToDelayedList+0x94>)
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	3304      	adds	r3, #4
 8012864:	4619      	mov	r1, r3
 8012866:	4610      	mov	r0, r2
 8012868:	f7fd fc91 	bl	801018e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801286c:	4b0a      	ldr	r3, [pc, #40]	; (8012898 <prvAddCurrentTaskToDelayedList+0xa4>)
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	68ba      	ldr	r2, [r7, #8]
 8012872:	429a      	cmp	r2, r3
 8012874:	d202      	bcs.n	801287c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012876:	4a08      	ldr	r2, [pc, #32]	; (8012898 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012878:	68bb      	ldr	r3, [r7, #8]
 801287a:	6013      	str	r3, [r2, #0]
}
 801287c:	bf00      	nop
 801287e:	3710      	adds	r7, #16
 8012880:	46bd      	mov	sp, r7
 8012882:	bd80      	pop	{r7, pc}
 8012884:	20005ac8 	.word	0x20005ac8
 8012888:	200055f0 	.word	0x200055f0
 801288c:	20005ab0 	.word	0x20005ab0
 8012890:	20005a80 	.word	0x20005a80
 8012894:	20005a7c 	.word	0x20005a7c
 8012898:	20005ae4 	.word	0x20005ae4

0801289c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801289c:	b580      	push	{r7, lr}
 801289e:	b08a      	sub	sp, #40	; 0x28
 80128a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80128a2:	2300      	movs	r3, #0
 80128a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80128a6:	f000 faff 	bl	8012ea8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80128aa:	4b1c      	ldr	r3, [pc, #112]	; (801291c <xTimerCreateTimerTask+0x80>)
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d021      	beq.n	80128f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80128b2:	2300      	movs	r3, #0
 80128b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80128b6:	2300      	movs	r3, #0
 80128b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80128ba:	1d3a      	adds	r2, r7, #4
 80128bc:	f107 0108 	add.w	r1, r7, #8
 80128c0:	f107 030c 	add.w	r3, r7, #12
 80128c4:	4618      	mov	r0, r3
 80128c6:	f7fc ffdd 	bl	800f884 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80128ca:	6879      	ldr	r1, [r7, #4]
 80128cc:	68bb      	ldr	r3, [r7, #8]
 80128ce:	68fa      	ldr	r2, [r7, #12]
 80128d0:	9202      	str	r2, [sp, #8]
 80128d2:	9301      	str	r3, [sp, #4]
 80128d4:	2302      	movs	r3, #2
 80128d6:	9300      	str	r3, [sp, #0]
 80128d8:	2300      	movs	r3, #0
 80128da:	460a      	mov	r2, r1
 80128dc:	4910      	ldr	r1, [pc, #64]	; (8012920 <xTimerCreateTimerTask+0x84>)
 80128de:	4811      	ldr	r0, [pc, #68]	; (8012924 <xTimerCreateTimerTask+0x88>)
 80128e0:	f7fe fd5a 	bl	8011398 <xTaskCreateStatic>
 80128e4:	4602      	mov	r2, r0
 80128e6:	4b10      	ldr	r3, [pc, #64]	; (8012928 <xTimerCreateTimerTask+0x8c>)
 80128e8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80128ea:	4b0f      	ldr	r3, [pc, #60]	; (8012928 <xTimerCreateTimerTask+0x8c>)
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d001      	beq.n	80128f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80128f2:	2301      	movs	r3, #1
 80128f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80128f6:	697b      	ldr	r3, [r7, #20]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d109      	bne.n	8012910 <xTimerCreateTimerTask+0x74>
	__asm volatile
 80128fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012900:	f383 8811 	msr	BASEPRI, r3
 8012904:	f3bf 8f6f 	isb	sy
 8012908:	f3bf 8f4f 	dsb	sy
 801290c:	613b      	str	r3, [r7, #16]
 801290e:	e7fe      	b.n	801290e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8012910:	697b      	ldr	r3, [r7, #20]
}
 8012912:	4618      	mov	r0, r3
 8012914:	3718      	adds	r7, #24
 8012916:	46bd      	mov	sp, r7
 8012918:	bd80      	pop	{r7, pc}
 801291a:	bf00      	nop
 801291c:	20005b20 	.word	0x20005b20
 8012920:	08016408 	.word	0x08016408
 8012924:	08012a5d 	.word	0x08012a5d
 8012928:	20005b24 	.word	0x20005b24

0801292c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b08a      	sub	sp, #40	; 0x28
 8012930:	af00      	add	r7, sp, #0
 8012932:	60f8      	str	r0, [r7, #12]
 8012934:	60b9      	str	r1, [r7, #8]
 8012936:	607a      	str	r2, [r7, #4]
 8012938:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801293a:	2300      	movs	r3, #0
 801293c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d109      	bne.n	8012958 <xTimerGenericCommand+0x2c>
 8012944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012948:	f383 8811 	msr	BASEPRI, r3
 801294c:	f3bf 8f6f 	isb	sy
 8012950:	f3bf 8f4f 	dsb	sy
 8012954:	623b      	str	r3, [r7, #32]
 8012956:	e7fe      	b.n	8012956 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012958:	4b19      	ldr	r3, [pc, #100]	; (80129c0 <xTimerGenericCommand+0x94>)
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d02a      	beq.n	80129b6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012960:	68bb      	ldr	r3, [r7, #8]
 8012962:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801296c:	68bb      	ldr	r3, [r7, #8]
 801296e:	2b05      	cmp	r3, #5
 8012970:	dc18      	bgt.n	80129a4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012972:	f7ff fb89 	bl	8012088 <xTaskGetSchedulerState>
 8012976:	4603      	mov	r3, r0
 8012978:	2b02      	cmp	r3, #2
 801297a:	d109      	bne.n	8012990 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801297c:	4b10      	ldr	r3, [pc, #64]	; (80129c0 <xTimerGenericCommand+0x94>)
 801297e:	6818      	ldr	r0, [r3, #0]
 8012980:	f107 0110 	add.w	r1, r7, #16
 8012984:	2300      	movs	r3, #0
 8012986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012988:	f7fd febc 	bl	8010704 <xQueueGenericSend>
 801298c:	6278      	str	r0, [r7, #36]	; 0x24
 801298e:	e012      	b.n	80129b6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012990:	4b0b      	ldr	r3, [pc, #44]	; (80129c0 <xTimerGenericCommand+0x94>)
 8012992:	6818      	ldr	r0, [r3, #0]
 8012994:	f107 0110 	add.w	r1, r7, #16
 8012998:	2300      	movs	r3, #0
 801299a:	2200      	movs	r2, #0
 801299c:	f7fd feb2 	bl	8010704 <xQueueGenericSend>
 80129a0:	6278      	str	r0, [r7, #36]	; 0x24
 80129a2:	e008      	b.n	80129b6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80129a4:	4b06      	ldr	r3, [pc, #24]	; (80129c0 <xTimerGenericCommand+0x94>)
 80129a6:	6818      	ldr	r0, [r3, #0]
 80129a8:	f107 0110 	add.w	r1, r7, #16
 80129ac:	2300      	movs	r3, #0
 80129ae:	683a      	ldr	r2, [r7, #0]
 80129b0:	f7fd ffa2 	bl	80108f8 <xQueueGenericSendFromISR>
 80129b4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80129b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80129b8:	4618      	mov	r0, r3
 80129ba:	3728      	adds	r7, #40	; 0x28
 80129bc:	46bd      	mov	sp, r7
 80129be:	bd80      	pop	{r7, pc}
 80129c0:	20005b20 	.word	0x20005b20

080129c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b088      	sub	sp, #32
 80129c8:	af02      	add	r7, sp, #8
 80129ca:	6078      	str	r0, [r7, #4]
 80129cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80129ce:	4b22      	ldr	r3, [pc, #136]	; (8012a58 <prvProcessExpiredTimer+0x94>)
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	68db      	ldr	r3, [r3, #12]
 80129d4:	68db      	ldr	r3, [r3, #12]
 80129d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80129d8:	697b      	ldr	r3, [r7, #20]
 80129da:	3304      	adds	r3, #4
 80129dc:	4618      	mov	r0, r3
 80129de:	f7fd fc0f 	bl	8010200 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80129e2:	697b      	ldr	r3, [r7, #20]
 80129e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80129e8:	f003 0304 	and.w	r3, r3, #4
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d021      	beq.n	8012a34 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80129f0:	697b      	ldr	r3, [r7, #20]
 80129f2:	699a      	ldr	r2, [r3, #24]
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	18d1      	adds	r1, r2, r3
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	683a      	ldr	r2, [r7, #0]
 80129fc:	6978      	ldr	r0, [r7, #20]
 80129fe:	f000 f8d1 	bl	8012ba4 <prvInsertTimerInActiveList>
 8012a02:	4603      	mov	r3, r0
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d01e      	beq.n	8012a46 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012a08:	2300      	movs	r3, #0
 8012a0a:	9300      	str	r3, [sp, #0]
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	687a      	ldr	r2, [r7, #4]
 8012a10:	2100      	movs	r1, #0
 8012a12:	6978      	ldr	r0, [r7, #20]
 8012a14:	f7ff ff8a 	bl	801292c <xTimerGenericCommand>
 8012a18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012a1a:	693b      	ldr	r3, [r7, #16]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d112      	bne.n	8012a46 <prvProcessExpiredTimer+0x82>
 8012a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a24:	f383 8811 	msr	BASEPRI, r3
 8012a28:	f3bf 8f6f 	isb	sy
 8012a2c:	f3bf 8f4f 	dsb	sy
 8012a30:	60fb      	str	r3, [r7, #12]
 8012a32:	e7fe      	b.n	8012a32 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012a34:	697b      	ldr	r3, [r7, #20]
 8012a36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a3a:	f023 0301 	bic.w	r3, r3, #1
 8012a3e:	b2da      	uxtb	r2, r3
 8012a40:	697b      	ldr	r3, [r7, #20]
 8012a42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012a46:	697b      	ldr	r3, [r7, #20]
 8012a48:	6a1b      	ldr	r3, [r3, #32]
 8012a4a:	6978      	ldr	r0, [r7, #20]
 8012a4c:	4798      	blx	r3
}
 8012a4e:	bf00      	nop
 8012a50:	3718      	adds	r7, #24
 8012a52:	46bd      	mov	sp, r7
 8012a54:	bd80      	pop	{r7, pc}
 8012a56:	bf00      	nop
 8012a58:	20005b18 	.word	0x20005b18

08012a5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b084      	sub	sp, #16
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012a64:	f107 0308 	add.w	r3, r7, #8
 8012a68:	4618      	mov	r0, r3
 8012a6a:	f000 f857 	bl	8012b1c <prvGetNextExpireTime>
 8012a6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012a70:	68bb      	ldr	r3, [r7, #8]
 8012a72:	4619      	mov	r1, r3
 8012a74:	68f8      	ldr	r0, [r7, #12]
 8012a76:	f000 f803 	bl	8012a80 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012a7a:	f000 f8d5 	bl	8012c28 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012a7e:	e7f1      	b.n	8012a64 <prvTimerTask+0x8>

08012a80 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b084      	sub	sp, #16
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
 8012a88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012a8a:	f7fe febb 	bl	8011804 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012a8e:	f107 0308 	add.w	r3, r7, #8
 8012a92:	4618      	mov	r0, r3
 8012a94:	f000 f866 	bl	8012b64 <prvSampleTimeNow>
 8012a98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012a9a:	68bb      	ldr	r3, [r7, #8]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d130      	bne.n	8012b02 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012aa0:	683b      	ldr	r3, [r7, #0]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d10a      	bne.n	8012abc <prvProcessTimerOrBlockTask+0x3c>
 8012aa6:	687a      	ldr	r2, [r7, #4]
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	d806      	bhi.n	8012abc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012aae:	f7fe feef 	bl	8011890 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012ab2:	68f9      	ldr	r1, [r7, #12]
 8012ab4:	6878      	ldr	r0, [r7, #4]
 8012ab6:	f7ff ff85 	bl	80129c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012aba:	e024      	b.n	8012b06 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012abc:	683b      	ldr	r3, [r7, #0]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d008      	beq.n	8012ad4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012ac2:	4b13      	ldr	r3, [pc, #76]	; (8012b10 <prvProcessTimerOrBlockTask+0x90>)
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d101      	bne.n	8012ad0 <prvProcessTimerOrBlockTask+0x50>
 8012acc:	2301      	movs	r3, #1
 8012ace:	e000      	b.n	8012ad2 <prvProcessTimerOrBlockTask+0x52>
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012ad4:	4b0f      	ldr	r3, [pc, #60]	; (8012b14 <prvProcessTimerOrBlockTask+0x94>)
 8012ad6:	6818      	ldr	r0, [r3, #0]
 8012ad8:	687a      	ldr	r2, [r7, #4]
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	1ad3      	subs	r3, r2, r3
 8012ade:	683a      	ldr	r2, [r7, #0]
 8012ae0:	4619      	mov	r1, r3
 8012ae2:	f7fe fc25 	bl	8011330 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012ae6:	f7fe fed3 	bl	8011890 <xTaskResumeAll>
 8012aea:	4603      	mov	r3, r0
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d10a      	bne.n	8012b06 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012af0:	4b09      	ldr	r3, [pc, #36]	; (8012b18 <prvProcessTimerOrBlockTask+0x98>)
 8012af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012af6:	601a      	str	r2, [r3, #0]
 8012af8:	f3bf 8f4f 	dsb	sy
 8012afc:	f3bf 8f6f 	isb	sy
}
 8012b00:	e001      	b.n	8012b06 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012b02:	f7fe fec5 	bl	8011890 <xTaskResumeAll>
}
 8012b06:	bf00      	nop
 8012b08:	3710      	adds	r7, #16
 8012b0a:	46bd      	mov	sp, r7
 8012b0c:	bd80      	pop	{r7, pc}
 8012b0e:	bf00      	nop
 8012b10:	20005b1c 	.word	0x20005b1c
 8012b14:	20005b20 	.word	0x20005b20
 8012b18:	e000ed04 	.word	0xe000ed04

08012b1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012b1c:	b480      	push	{r7}
 8012b1e:	b085      	sub	sp, #20
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012b24:	4b0e      	ldr	r3, [pc, #56]	; (8012b60 <prvGetNextExpireTime+0x44>)
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d101      	bne.n	8012b32 <prvGetNextExpireTime+0x16>
 8012b2e:	2201      	movs	r2, #1
 8012b30:	e000      	b.n	8012b34 <prvGetNextExpireTime+0x18>
 8012b32:	2200      	movs	r2, #0
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d105      	bne.n	8012b4c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012b40:	4b07      	ldr	r3, [pc, #28]	; (8012b60 <prvGetNextExpireTime+0x44>)
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	68db      	ldr	r3, [r3, #12]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	60fb      	str	r3, [r7, #12]
 8012b4a:	e001      	b.n	8012b50 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012b50:	68fb      	ldr	r3, [r7, #12]
}
 8012b52:	4618      	mov	r0, r3
 8012b54:	3714      	adds	r7, #20
 8012b56:	46bd      	mov	sp, r7
 8012b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5c:	4770      	bx	lr
 8012b5e:	bf00      	nop
 8012b60:	20005b18 	.word	0x20005b18

08012b64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b084      	sub	sp, #16
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012b6c:	f7fe ff2c 	bl	80119c8 <xTaskGetTickCount>
 8012b70:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012b72:	4b0b      	ldr	r3, [pc, #44]	; (8012ba0 <prvSampleTimeNow+0x3c>)
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	68fa      	ldr	r2, [r7, #12]
 8012b78:	429a      	cmp	r2, r3
 8012b7a:	d205      	bcs.n	8012b88 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012b7c:	f000 f930 	bl	8012de0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	2201      	movs	r2, #1
 8012b84:	601a      	str	r2, [r3, #0]
 8012b86:	e002      	b.n	8012b8e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012b8e:	4a04      	ldr	r2, [pc, #16]	; (8012ba0 <prvSampleTimeNow+0x3c>)
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012b94:	68fb      	ldr	r3, [r7, #12]
}
 8012b96:	4618      	mov	r0, r3
 8012b98:	3710      	adds	r7, #16
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	bd80      	pop	{r7, pc}
 8012b9e:	bf00      	nop
 8012ba0:	20005b28 	.word	0x20005b28

08012ba4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b086      	sub	sp, #24
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	60f8      	str	r0, [r7, #12]
 8012bac:	60b9      	str	r1, [r7, #8]
 8012bae:	607a      	str	r2, [r7, #4]
 8012bb0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012bb2:	2300      	movs	r3, #0
 8012bb4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	68ba      	ldr	r2, [r7, #8]
 8012bba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	68fa      	ldr	r2, [r7, #12]
 8012bc0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012bc2:	68ba      	ldr	r2, [r7, #8]
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	429a      	cmp	r2, r3
 8012bc8:	d812      	bhi.n	8012bf0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012bca:	687a      	ldr	r2, [r7, #4]
 8012bcc:	683b      	ldr	r3, [r7, #0]
 8012bce:	1ad2      	subs	r2, r2, r3
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	699b      	ldr	r3, [r3, #24]
 8012bd4:	429a      	cmp	r2, r3
 8012bd6:	d302      	bcc.n	8012bde <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012bd8:	2301      	movs	r3, #1
 8012bda:	617b      	str	r3, [r7, #20]
 8012bdc:	e01b      	b.n	8012c16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012bde:	4b10      	ldr	r3, [pc, #64]	; (8012c20 <prvInsertTimerInActiveList+0x7c>)
 8012be0:	681a      	ldr	r2, [r3, #0]
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	3304      	adds	r3, #4
 8012be6:	4619      	mov	r1, r3
 8012be8:	4610      	mov	r0, r2
 8012bea:	f7fd fad0 	bl	801018e <vListInsert>
 8012bee:	e012      	b.n	8012c16 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012bf0:	687a      	ldr	r2, [r7, #4]
 8012bf2:	683b      	ldr	r3, [r7, #0]
 8012bf4:	429a      	cmp	r2, r3
 8012bf6:	d206      	bcs.n	8012c06 <prvInsertTimerInActiveList+0x62>
 8012bf8:	68ba      	ldr	r2, [r7, #8]
 8012bfa:	683b      	ldr	r3, [r7, #0]
 8012bfc:	429a      	cmp	r2, r3
 8012bfe:	d302      	bcc.n	8012c06 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012c00:	2301      	movs	r3, #1
 8012c02:	617b      	str	r3, [r7, #20]
 8012c04:	e007      	b.n	8012c16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012c06:	4b07      	ldr	r3, [pc, #28]	; (8012c24 <prvInsertTimerInActiveList+0x80>)
 8012c08:	681a      	ldr	r2, [r3, #0]
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	3304      	adds	r3, #4
 8012c0e:	4619      	mov	r1, r3
 8012c10:	4610      	mov	r0, r2
 8012c12:	f7fd fabc 	bl	801018e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012c16:	697b      	ldr	r3, [r7, #20]
}
 8012c18:	4618      	mov	r0, r3
 8012c1a:	3718      	adds	r7, #24
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	bd80      	pop	{r7, pc}
 8012c20:	20005b1c 	.word	0x20005b1c
 8012c24:	20005b18 	.word	0x20005b18

08012c28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b08e      	sub	sp, #56	; 0x38
 8012c2c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012c2e:	e0c6      	b.n	8012dbe <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	da17      	bge.n	8012c66 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012c36:	1d3b      	adds	r3, r7, #4
 8012c38:	3304      	adds	r3, #4
 8012c3a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d109      	bne.n	8012c56 <prvProcessReceivedCommands+0x2e>
 8012c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c46:	f383 8811 	msr	BASEPRI, r3
 8012c4a:	f3bf 8f6f 	isb	sy
 8012c4e:	f3bf 8f4f 	dsb	sy
 8012c52:	61fb      	str	r3, [r7, #28]
 8012c54:	e7fe      	b.n	8012c54 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012c5c:	6850      	ldr	r0, [r2, #4]
 8012c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012c60:	6892      	ldr	r2, [r2, #8]
 8012c62:	4611      	mov	r1, r2
 8012c64:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	f2c0 80a7 	blt.w	8012dbc <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c74:	695b      	ldr	r3, [r3, #20]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d004      	beq.n	8012c84 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c7c:	3304      	adds	r3, #4
 8012c7e:	4618      	mov	r0, r3
 8012c80:	f7fd fabe 	bl	8010200 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012c84:	463b      	mov	r3, r7
 8012c86:	4618      	mov	r0, r3
 8012c88:	f7ff ff6c 	bl	8012b64 <prvSampleTimeNow>
 8012c8c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	2b09      	cmp	r3, #9
 8012c92:	f200 8094 	bhi.w	8012dbe <prvProcessReceivedCommands+0x196>
 8012c96:	a201      	add	r2, pc, #4	; (adr r2, 8012c9c <prvProcessReceivedCommands+0x74>)
 8012c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c9c:	08012cc5 	.word	0x08012cc5
 8012ca0:	08012cc5 	.word	0x08012cc5
 8012ca4:	08012cc5 	.word	0x08012cc5
 8012ca8:	08012d37 	.word	0x08012d37
 8012cac:	08012d4b 	.word	0x08012d4b
 8012cb0:	08012d93 	.word	0x08012d93
 8012cb4:	08012cc5 	.word	0x08012cc5
 8012cb8:	08012cc5 	.word	0x08012cc5
 8012cbc:	08012d37 	.word	0x08012d37
 8012cc0:	08012d4b 	.word	0x08012d4b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012cca:	f043 0301 	orr.w	r3, r3, #1
 8012cce:	b2da      	uxtb	r2, r3
 8012cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012cd6:	68ba      	ldr	r2, [r7, #8]
 8012cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cda:	699b      	ldr	r3, [r3, #24]
 8012cdc:	18d1      	adds	r1, r2, r3
 8012cde:	68bb      	ldr	r3, [r7, #8]
 8012ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ce2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ce4:	f7ff ff5e 	bl	8012ba4 <prvInsertTimerInActiveList>
 8012ce8:	4603      	mov	r3, r0
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d067      	beq.n	8012dbe <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cf0:	6a1b      	ldr	r3, [r3, #32]
 8012cf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012cf4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012cfc:	f003 0304 	and.w	r3, r3, #4
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d05c      	beq.n	8012dbe <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012d04:	68ba      	ldr	r2, [r7, #8]
 8012d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d08:	699b      	ldr	r3, [r3, #24]
 8012d0a:	441a      	add	r2, r3
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	9300      	str	r3, [sp, #0]
 8012d10:	2300      	movs	r3, #0
 8012d12:	2100      	movs	r1, #0
 8012d14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d16:	f7ff fe09 	bl	801292c <xTimerGenericCommand>
 8012d1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012d1c:	6a3b      	ldr	r3, [r7, #32]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d14d      	bne.n	8012dbe <prvProcessReceivedCommands+0x196>
 8012d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d26:	f383 8811 	msr	BASEPRI, r3
 8012d2a:	f3bf 8f6f 	isb	sy
 8012d2e:	f3bf 8f4f 	dsb	sy
 8012d32:	61bb      	str	r3, [r7, #24]
 8012d34:	e7fe      	b.n	8012d34 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012d3c:	f023 0301 	bic.w	r3, r3, #1
 8012d40:	b2da      	uxtb	r2, r3
 8012d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012d48:	e039      	b.n	8012dbe <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012d50:	f043 0301 	orr.w	r3, r3, #1
 8012d54:	b2da      	uxtb	r2, r3
 8012d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012d5c:	68ba      	ldr	r2, [r7, #8]
 8012d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d60:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d64:	699b      	ldr	r3, [r3, #24]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d109      	bne.n	8012d7e <prvProcessReceivedCommands+0x156>
 8012d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d6e:	f383 8811 	msr	BASEPRI, r3
 8012d72:	f3bf 8f6f 	isb	sy
 8012d76:	f3bf 8f4f 	dsb	sy
 8012d7a:	617b      	str	r3, [r7, #20]
 8012d7c:	e7fe      	b.n	8012d7c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d80:	699a      	ldr	r2, [r3, #24]
 8012d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d84:	18d1      	adds	r1, r2, r3
 8012d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d8c:	f7ff ff0a 	bl	8012ba4 <prvInsertTimerInActiveList>
					break;
 8012d90:	e015      	b.n	8012dbe <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012d98:	f003 0302 	and.w	r3, r3, #2
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d103      	bne.n	8012da8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8012da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012da2:	f7fd f88f 	bl	800fec4 <vPortFree>
 8012da6:	e00a      	b.n	8012dbe <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012daa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012dae:	f023 0301 	bic.w	r3, r3, #1
 8012db2:	b2da      	uxtb	r2, r3
 8012db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012db6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012dba:	e000      	b.n	8012dbe <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012dbc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012dbe:	4b07      	ldr	r3, [pc, #28]	; (8012ddc <prvProcessReceivedCommands+0x1b4>)
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	1d39      	adds	r1, r7, #4
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	f7fd feb4 	bl	8010b34 <xQueueReceive>
 8012dcc:	4603      	mov	r3, r0
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	f47f af2e 	bne.w	8012c30 <prvProcessReceivedCommands+0x8>
	}
}
 8012dd4:	bf00      	nop
 8012dd6:	3730      	adds	r7, #48	; 0x30
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	bd80      	pop	{r7, pc}
 8012ddc:	20005b20 	.word	0x20005b20

08012de0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b088      	sub	sp, #32
 8012de4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012de6:	e047      	b.n	8012e78 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012de8:	4b2d      	ldr	r3, [pc, #180]	; (8012ea0 <prvSwitchTimerLists+0xc0>)
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	68db      	ldr	r3, [r3, #12]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012df2:	4b2b      	ldr	r3, [pc, #172]	; (8012ea0 <prvSwitchTimerLists+0xc0>)
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	68db      	ldr	r3, [r3, #12]
 8012df8:	68db      	ldr	r3, [r3, #12]
 8012dfa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	3304      	adds	r3, #4
 8012e00:	4618      	mov	r0, r3
 8012e02:	f7fd f9fd 	bl	8010200 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	6a1b      	ldr	r3, [r3, #32]
 8012e0a:	68f8      	ldr	r0, [r7, #12]
 8012e0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e14:	f003 0304 	and.w	r3, r3, #4
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d02d      	beq.n	8012e78 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	699b      	ldr	r3, [r3, #24]
 8012e20:	693a      	ldr	r2, [r7, #16]
 8012e22:	4413      	add	r3, r2
 8012e24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012e26:	68ba      	ldr	r2, [r7, #8]
 8012e28:	693b      	ldr	r3, [r7, #16]
 8012e2a:	429a      	cmp	r2, r3
 8012e2c:	d90e      	bls.n	8012e4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	68ba      	ldr	r2, [r7, #8]
 8012e32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	68fa      	ldr	r2, [r7, #12]
 8012e38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012e3a:	4b19      	ldr	r3, [pc, #100]	; (8012ea0 <prvSwitchTimerLists+0xc0>)
 8012e3c:	681a      	ldr	r2, [r3, #0]
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	3304      	adds	r3, #4
 8012e42:	4619      	mov	r1, r3
 8012e44:	4610      	mov	r0, r2
 8012e46:	f7fd f9a2 	bl	801018e <vListInsert>
 8012e4a:	e015      	b.n	8012e78 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	9300      	str	r3, [sp, #0]
 8012e50:	2300      	movs	r3, #0
 8012e52:	693a      	ldr	r2, [r7, #16]
 8012e54:	2100      	movs	r1, #0
 8012e56:	68f8      	ldr	r0, [r7, #12]
 8012e58:	f7ff fd68 	bl	801292c <xTimerGenericCommand>
 8012e5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d109      	bne.n	8012e78 <prvSwitchTimerLists+0x98>
 8012e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e68:	f383 8811 	msr	BASEPRI, r3
 8012e6c:	f3bf 8f6f 	isb	sy
 8012e70:	f3bf 8f4f 	dsb	sy
 8012e74:	603b      	str	r3, [r7, #0]
 8012e76:	e7fe      	b.n	8012e76 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012e78:	4b09      	ldr	r3, [pc, #36]	; (8012ea0 <prvSwitchTimerLists+0xc0>)
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d1b2      	bne.n	8012de8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012e82:	4b07      	ldr	r3, [pc, #28]	; (8012ea0 <prvSwitchTimerLists+0xc0>)
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012e88:	4b06      	ldr	r3, [pc, #24]	; (8012ea4 <prvSwitchTimerLists+0xc4>)
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	4a04      	ldr	r2, [pc, #16]	; (8012ea0 <prvSwitchTimerLists+0xc0>)
 8012e8e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012e90:	4a04      	ldr	r2, [pc, #16]	; (8012ea4 <prvSwitchTimerLists+0xc4>)
 8012e92:	697b      	ldr	r3, [r7, #20]
 8012e94:	6013      	str	r3, [r2, #0]
}
 8012e96:	bf00      	nop
 8012e98:	3718      	adds	r7, #24
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	bd80      	pop	{r7, pc}
 8012e9e:	bf00      	nop
 8012ea0:	20005b18 	.word	0x20005b18
 8012ea4:	20005b1c 	.word	0x20005b1c

08012ea8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b082      	sub	sp, #8
 8012eac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012eae:	f7fc fe2d 	bl	800fb0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012eb2:	4b15      	ldr	r3, [pc, #84]	; (8012f08 <prvCheckForValidListAndQueue+0x60>)
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d120      	bne.n	8012efc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012eba:	4814      	ldr	r0, [pc, #80]	; (8012f0c <prvCheckForValidListAndQueue+0x64>)
 8012ebc:	f7fd f916 	bl	80100ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012ec0:	4813      	ldr	r0, [pc, #76]	; (8012f10 <prvCheckForValidListAndQueue+0x68>)
 8012ec2:	f7fd f913 	bl	80100ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012ec6:	4b13      	ldr	r3, [pc, #76]	; (8012f14 <prvCheckForValidListAndQueue+0x6c>)
 8012ec8:	4a10      	ldr	r2, [pc, #64]	; (8012f0c <prvCheckForValidListAndQueue+0x64>)
 8012eca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012ecc:	4b12      	ldr	r3, [pc, #72]	; (8012f18 <prvCheckForValidListAndQueue+0x70>)
 8012ece:	4a10      	ldr	r2, [pc, #64]	; (8012f10 <prvCheckForValidListAndQueue+0x68>)
 8012ed0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	9300      	str	r3, [sp, #0]
 8012ed6:	4b11      	ldr	r3, [pc, #68]	; (8012f1c <prvCheckForValidListAndQueue+0x74>)
 8012ed8:	4a11      	ldr	r2, [pc, #68]	; (8012f20 <prvCheckForValidListAndQueue+0x78>)
 8012eda:	2110      	movs	r1, #16
 8012edc:	200a      	movs	r0, #10
 8012ede:	f7fd fa21 	bl	8010324 <xQueueGenericCreateStatic>
 8012ee2:	4602      	mov	r2, r0
 8012ee4:	4b08      	ldr	r3, [pc, #32]	; (8012f08 <prvCheckForValidListAndQueue+0x60>)
 8012ee6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012ee8:	4b07      	ldr	r3, [pc, #28]	; (8012f08 <prvCheckForValidListAndQueue+0x60>)
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d005      	beq.n	8012efc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012ef0:	4b05      	ldr	r3, [pc, #20]	; (8012f08 <prvCheckForValidListAndQueue+0x60>)
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	490b      	ldr	r1, [pc, #44]	; (8012f24 <prvCheckForValidListAndQueue+0x7c>)
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	f7fe f9c8 	bl	801128c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012efc:	f7fc fe34 	bl	800fb68 <vPortExitCritical>
}
 8012f00:	bf00      	nop
 8012f02:	46bd      	mov	sp, r7
 8012f04:	bd80      	pop	{r7, pc}
 8012f06:	bf00      	nop
 8012f08:	20005b20 	.word	0x20005b20
 8012f0c:	20005af0 	.word	0x20005af0
 8012f10:	20005b04 	.word	0x20005b04
 8012f14:	20005b18 	.word	0x20005b18
 8012f18:	20005b1c 	.word	0x20005b1c
 8012f1c:	20005bcc 	.word	0x20005bcc
 8012f20:	20005b2c 	.word	0x20005b2c
 8012f24:	08016410 	.word	0x08016410

08012f28 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8012f28:	b480      	push	{r7}
 8012f2a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8012f2c:	4b05      	ldr	r3, [pc, #20]	; (8012f44 <UTIL_LPM_Init+0x1c>)
 8012f2e:	2200      	movs	r2, #0
 8012f30:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8012f32:	4b05      	ldr	r3, [pc, #20]	; (8012f48 <UTIL_LPM_Init+0x20>)
 8012f34:	2200      	movs	r2, #0
 8012f36:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8012f38:	bf00      	nop
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f40:	4770      	bx	lr
 8012f42:	bf00      	nop
 8012f44:	20005c1c 	.word	0x20005c1c
 8012f48:	20005c20 	.word	0x20005c20

08012f4c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8012f4c:	b480      	push	{r7}
 8012f4e:	b087      	sub	sp, #28
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	6078      	str	r0, [r7, #4]
 8012f54:	460b      	mov	r3, r1
 8012f56:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012f58:	f3ef 8310 	mrs	r3, PRIMASK
 8012f5c:	613b      	str	r3, [r7, #16]
  return(result);
 8012f5e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8012f60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012f62:	b672      	cpsid	i
  
  switch(state)
 8012f64:	78fb      	ldrb	r3, [r7, #3]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d009      	beq.n	8012f7e <UTIL_LPM_SetOffMode+0x32>
 8012f6a:	2b01      	cmp	r3, #1
 8012f6c:	d000      	beq.n	8012f70 <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 8012f6e:	e00e      	b.n	8012f8e <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8012f70:	4b0c      	ldr	r3, [pc, #48]	; (8012fa4 <UTIL_LPM_SetOffMode+0x58>)
 8012f72:	681a      	ldr	r2, [r3, #0]
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	4313      	orrs	r3, r2
 8012f78:	4a0a      	ldr	r2, [pc, #40]	; (8012fa4 <UTIL_LPM_SetOffMode+0x58>)
 8012f7a:	6013      	str	r3, [r2, #0]
      break;
 8012f7c:	e007      	b.n	8012f8e <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	43da      	mvns	r2, r3
 8012f82:	4b08      	ldr	r3, [pc, #32]	; (8012fa4 <UTIL_LPM_SetOffMode+0x58>)
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	4013      	ands	r3, r2
 8012f88:	4a06      	ldr	r2, [pc, #24]	; (8012fa4 <UTIL_LPM_SetOffMode+0x58>)
 8012f8a:	6013      	str	r3, [r2, #0]
      break;
 8012f8c:	bf00      	nop
 8012f8e:	697b      	ldr	r3, [r7, #20]
 8012f90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8012f98:	bf00      	nop
 8012f9a:	371c      	adds	r7, #28
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa2:	4770      	bx	lr
 8012fa4:	20005c20 	.word	0x20005c20

08012fa8 <__errno>:
 8012fa8:	4b01      	ldr	r3, [pc, #4]	; (8012fb0 <__errno+0x8>)
 8012faa:	6818      	ldr	r0, [r3, #0]
 8012fac:	4770      	bx	lr
 8012fae:	bf00      	nop
 8012fb0:	20000024 	.word	0x20000024

08012fb4 <__libc_init_array>:
 8012fb4:	b570      	push	{r4, r5, r6, lr}
 8012fb6:	4e0d      	ldr	r6, [pc, #52]	; (8012fec <__libc_init_array+0x38>)
 8012fb8:	4c0d      	ldr	r4, [pc, #52]	; (8012ff0 <__libc_init_array+0x3c>)
 8012fba:	1ba4      	subs	r4, r4, r6
 8012fbc:	10a4      	asrs	r4, r4, #2
 8012fbe:	2500      	movs	r5, #0
 8012fc0:	42a5      	cmp	r5, r4
 8012fc2:	d109      	bne.n	8012fd8 <__libc_init_array+0x24>
 8012fc4:	4e0b      	ldr	r6, [pc, #44]	; (8012ff4 <__libc_init_array+0x40>)
 8012fc6:	4c0c      	ldr	r4, [pc, #48]	; (8012ff8 <__libc_init_array+0x44>)
 8012fc8:	f002 fdc6 	bl	8015b58 <_init>
 8012fcc:	1ba4      	subs	r4, r4, r6
 8012fce:	10a4      	asrs	r4, r4, #2
 8012fd0:	2500      	movs	r5, #0
 8012fd2:	42a5      	cmp	r5, r4
 8012fd4:	d105      	bne.n	8012fe2 <__libc_init_array+0x2e>
 8012fd6:	bd70      	pop	{r4, r5, r6, pc}
 8012fd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012fdc:	4798      	blx	r3
 8012fde:	3501      	adds	r5, #1
 8012fe0:	e7ee      	b.n	8012fc0 <__libc_init_array+0xc>
 8012fe2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012fe6:	4798      	blx	r3
 8012fe8:	3501      	adds	r5, #1
 8012fea:	e7f2      	b.n	8012fd2 <__libc_init_array+0x1e>
 8012fec:	08017b28 	.word	0x08017b28
 8012ff0:	08017b28 	.word	0x08017b28
 8012ff4:	08017b28 	.word	0x08017b28
 8012ff8:	08017b2c 	.word	0x08017b2c

08012ffc <malloc>:
 8012ffc:	4b02      	ldr	r3, [pc, #8]	; (8013008 <malloc+0xc>)
 8012ffe:	4601      	mov	r1, r0
 8013000:	6818      	ldr	r0, [r3, #0]
 8013002:	f000 b865 	b.w	80130d0 <_malloc_r>
 8013006:	bf00      	nop
 8013008:	20000024 	.word	0x20000024

0801300c <memcpy>:
 801300c:	b510      	push	{r4, lr}
 801300e:	1e43      	subs	r3, r0, #1
 8013010:	440a      	add	r2, r1
 8013012:	4291      	cmp	r1, r2
 8013014:	d100      	bne.n	8013018 <memcpy+0xc>
 8013016:	bd10      	pop	{r4, pc}
 8013018:	f811 4b01 	ldrb.w	r4, [r1], #1
 801301c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013020:	e7f7      	b.n	8013012 <memcpy+0x6>

08013022 <memset>:
 8013022:	4402      	add	r2, r0
 8013024:	4603      	mov	r3, r0
 8013026:	4293      	cmp	r3, r2
 8013028:	d100      	bne.n	801302c <memset+0xa>
 801302a:	4770      	bx	lr
 801302c:	f803 1b01 	strb.w	r1, [r3], #1
 8013030:	e7f9      	b.n	8013026 <memset+0x4>
	...

08013034 <_free_r>:
 8013034:	b538      	push	{r3, r4, r5, lr}
 8013036:	4605      	mov	r5, r0
 8013038:	2900      	cmp	r1, #0
 801303a:	d045      	beq.n	80130c8 <_free_r+0x94>
 801303c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013040:	1f0c      	subs	r4, r1, #4
 8013042:	2b00      	cmp	r3, #0
 8013044:	bfb8      	it	lt
 8013046:	18e4      	addlt	r4, r4, r3
 8013048:	f001 feaa 	bl	8014da0 <__malloc_lock>
 801304c:	4a1f      	ldr	r2, [pc, #124]	; (80130cc <_free_r+0x98>)
 801304e:	6813      	ldr	r3, [r2, #0]
 8013050:	4610      	mov	r0, r2
 8013052:	b933      	cbnz	r3, 8013062 <_free_r+0x2e>
 8013054:	6063      	str	r3, [r4, #4]
 8013056:	6014      	str	r4, [r2, #0]
 8013058:	4628      	mov	r0, r5
 801305a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801305e:	f001 bea0 	b.w	8014da2 <__malloc_unlock>
 8013062:	42a3      	cmp	r3, r4
 8013064:	d90c      	bls.n	8013080 <_free_r+0x4c>
 8013066:	6821      	ldr	r1, [r4, #0]
 8013068:	1862      	adds	r2, r4, r1
 801306a:	4293      	cmp	r3, r2
 801306c:	bf04      	itt	eq
 801306e:	681a      	ldreq	r2, [r3, #0]
 8013070:	685b      	ldreq	r3, [r3, #4]
 8013072:	6063      	str	r3, [r4, #4]
 8013074:	bf04      	itt	eq
 8013076:	1852      	addeq	r2, r2, r1
 8013078:	6022      	streq	r2, [r4, #0]
 801307a:	6004      	str	r4, [r0, #0]
 801307c:	e7ec      	b.n	8013058 <_free_r+0x24>
 801307e:	4613      	mov	r3, r2
 8013080:	685a      	ldr	r2, [r3, #4]
 8013082:	b10a      	cbz	r2, 8013088 <_free_r+0x54>
 8013084:	42a2      	cmp	r2, r4
 8013086:	d9fa      	bls.n	801307e <_free_r+0x4a>
 8013088:	6819      	ldr	r1, [r3, #0]
 801308a:	1858      	adds	r0, r3, r1
 801308c:	42a0      	cmp	r0, r4
 801308e:	d10b      	bne.n	80130a8 <_free_r+0x74>
 8013090:	6820      	ldr	r0, [r4, #0]
 8013092:	4401      	add	r1, r0
 8013094:	1858      	adds	r0, r3, r1
 8013096:	4282      	cmp	r2, r0
 8013098:	6019      	str	r1, [r3, #0]
 801309a:	d1dd      	bne.n	8013058 <_free_r+0x24>
 801309c:	6810      	ldr	r0, [r2, #0]
 801309e:	6852      	ldr	r2, [r2, #4]
 80130a0:	605a      	str	r2, [r3, #4]
 80130a2:	4401      	add	r1, r0
 80130a4:	6019      	str	r1, [r3, #0]
 80130a6:	e7d7      	b.n	8013058 <_free_r+0x24>
 80130a8:	d902      	bls.n	80130b0 <_free_r+0x7c>
 80130aa:	230c      	movs	r3, #12
 80130ac:	602b      	str	r3, [r5, #0]
 80130ae:	e7d3      	b.n	8013058 <_free_r+0x24>
 80130b0:	6820      	ldr	r0, [r4, #0]
 80130b2:	1821      	adds	r1, r4, r0
 80130b4:	428a      	cmp	r2, r1
 80130b6:	bf04      	itt	eq
 80130b8:	6811      	ldreq	r1, [r2, #0]
 80130ba:	6852      	ldreq	r2, [r2, #4]
 80130bc:	6062      	str	r2, [r4, #4]
 80130be:	bf04      	itt	eq
 80130c0:	1809      	addeq	r1, r1, r0
 80130c2:	6021      	streq	r1, [r4, #0]
 80130c4:	605c      	str	r4, [r3, #4]
 80130c6:	e7c7      	b.n	8013058 <_free_r+0x24>
 80130c8:	bd38      	pop	{r3, r4, r5, pc}
 80130ca:	bf00      	nop
 80130cc:	20005c24 	.word	0x20005c24

080130d0 <_malloc_r>:
 80130d0:	b570      	push	{r4, r5, r6, lr}
 80130d2:	1ccd      	adds	r5, r1, #3
 80130d4:	f025 0503 	bic.w	r5, r5, #3
 80130d8:	3508      	adds	r5, #8
 80130da:	2d0c      	cmp	r5, #12
 80130dc:	bf38      	it	cc
 80130de:	250c      	movcc	r5, #12
 80130e0:	2d00      	cmp	r5, #0
 80130e2:	4606      	mov	r6, r0
 80130e4:	db01      	blt.n	80130ea <_malloc_r+0x1a>
 80130e6:	42a9      	cmp	r1, r5
 80130e8:	d903      	bls.n	80130f2 <_malloc_r+0x22>
 80130ea:	230c      	movs	r3, #12
 80130ec:	6033      	str	r3, [r6, #0]
 80130ee:	2000      	movs	r0, #0
 80130f0:	bd70      	pop	{r4, r5, r6, pc}
 80130f2:	f001 fe55 	bl	8014da0 <__malloc_lock>
 80130f6:	4a21      	ldr	r2, [pc, #132]	; (801317c <_malloc_r+0xac>)
 80130f8:	6814      	ldr	r4, [r2, #0]
 80130fa:	4621      	mov	r1, r4
 80130fc:	b991      	cbnz	r1, 8013124 <_malloc_r+0x54>
 80130fe:	4c20      	ldr	r4, [pc, #128]	; (8013180 <_malloc_r+0xb0>)
 8013100:	6823      	ldr	r3, [r4, #0]
 8013102:	b91b      	cbnz	r3, 801310c <_malloc_r+0x3c>
 8013104:	4630      	mov	r0, r6
 8013106:	f000 fd15 	bl	8013b34 <_sbrk_r>
 801310a:	6020      	str	r0, [r4, #0]
 801310c:	4629      	mov	r1, r5
 801310e:	4630      	mov	r0, r6
 8013110:	f000 fd10 	bl	8013b34 <_sbrk_r>
 8013114:	1c43      	adds	r3, r0, #1
 8013116:	d124      	bne.n	8013162 <_malloc_r+0x92>
 8013118:	230c      	movs	r3, #12
 801311a:	6033      	str	r3, [r6, #0]
 801311c:	4630      	mov	r0, r6
 801311e:	f001 fe40 	bl	8014da2 <__malloc_unlock>
 8013122:	e7e4      	b.n	80130ee <_malloc_r+0x1e>
 8013124:	680b      	ldr	r3, [r1, #0]
 8013126:	1b5b      	subs	r3, r3, r5
 8013128:	d418      	bmi.n	801315c <_malloc_r+0x8c>
 801312a:	2b0b      	cmp	r3, #11
 801312c:	d90f      	bls.n	801314e <_malloc_r+0x7e>
 801312e:	600b      	str	r3, [r1, #0]
 8013130:	50cd      	str	r5, [r1, r3]
 8013132:	18cc      	adds	r4, r1, r3
 8013134:	4630      	mov	r0, r6
 8013136:	f001 fe34 	bl	8014da2 <__malloc_unlock>
 801313a:	f104 000b 	add.w	r0, r4, #11
 801313e:	1d23      	adds	r3, r4, #4
 8013140:	f020 0007 	bic.w	r0, r0, #7
 8013144:	1ac3      	subs	r3, r0, r3
 8013146:	d0d3      	beq.n	80130f0 <_malloc_r+0x20>
 8013148:	425a      	negs	r2, r3
 801314a:	50e2      	str	r2, [r4, r3]
 801314c:	e7d0      	b.n	80130f0 <_malloc_r+0x20>
 801314e:	428c      	cmp	r4, r1
 8013150:	684b      	ldr	r3, [r1, #4]
 8013152:	bf16      	itet	ne
 8013154:	6063      	strne	r3, [r4, #4]
 8013156:	6013      	streq	r3, [r2, #0]
 8013158:	460c      	movne	r4, r1
 801315a:	e7eb      	b.n	8013134 <_malloc_r+0x64>
 801315c:	460c      	mov	r4, r1
 801315e:	6849      	ldr	r1, [r1, #4]
 8013160:	e7cc      	b.n	80130fc <_malloc_r+0x2c>
 8013162:	1cc4      	adds	r4, r0, #3
 8013164:	f024 0403 	bic.w	r4, r4, #3
 8013168:	42a0      	cmp	r0, r4
 801316a:	d005      	beq.n	8013178 <_malloc_r+0xa8>
 801316c:	1a21      	subs	r1, r4, r0
 801316e:	4630      	mov	r0, r6
 8013170:	f000 fce0 	bl	8013b34 <_sbrk_r>
 8013174:	3001      	adds	r0, #1
 8013176:	d0cf      	beq.n	8013118 <_malloc_r+0x48>
 8013178:	6025      	str	r5, [r4, #0]
 801317a:	e7db      	b.n	8013134 <_malloc_r+0x64>
 801317c:	20005c24 	.word	0x20005c24
 8013180:	20005c28 	.word	0x20005c28

08013184 <__cvt>:
 8013184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013188:	ec55 4b10 	vmov	r4, r5, d0
 801318c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801318e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013192:	2d00      	cmp	r5, #0
 8013194:	460e      	mov	r6, r1
 8013196:	4691      	mov	r9, r2
 8013198:	4619      	mov	r1, r3
 801319a:	bfb8      	it	lt
 801319c:	4622      	movlt	r2, r4
 801319e:	462b      	mov	r3, r5
 80131a0:	f027 0720 	bic.w	r7, r7, #32
 80131a4:	bfbb      	ittet	lt
 80131a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80131aa:	461d      	movlt	r5, r3
 80131ac:	2300      	movge	r3, #0
 80131ae:	232d      	movlt	r3, #45	; 0x2d
 80131b0:	bfb8      	it	lt
 80131b2:	4614      	movlt	r4, r2
 80131b4:	2f46      	cmp	r7, #70	; 0x46
 80131b6:	700b      	strb	r3, [r1, #0]
 80131b8:	d004      	beq.n	80131c4 <__cvt+0x40>
 80131ba:	2f45      	cmp	r7, #69	; 0x45
 80131bc:	d100      	bne.n	80131c0 <__cvt+0x3c>
 80131be:	3601      	adds	r6, #1
 80131c0:	2102      	movs	r1, #2
 80131c2:	e000      	b.n	80131c6 <__cvt+0x42>
 80131c4:	2103      	movs	r1, #3
 80131c6:	ab03      	add	r3, sp, #12
 80131c8:	9301      	str	r3, [sp, #4]
 80131ca:	ab02      	add	r3, sp, #8
 80131cc:	9300      	str	r3, [sp, #0]
 80131ce:	4632      	mov	r2, r6
 80131d0:	4653      	mov	r3, sl
 80131d2:	ec45 4b10 	vmov	d0, r4, r5
 80131d6:	f000 fe3f 	bl	8013e58 <_dtoa_r>
 80131da:	2f47      	cmp	r7, #71	; 0x47
 80131dc:	4680      	mov	r8, r0
 80131de:	d102      	bne.n	80131e6 <__cvt+0x62>
 80131e0:	f019 0f01 	tst.w	r9, #1
 80131e4:	d026      	beq.n	8013234 <__cvt+0xb0>
 80131e6:	2f46      	cmp	r7, #70	; 0x46
 80131e8:	eb08 0906 	add.w	r9, r8, r6
 80131ec:	d111      	bne.n	8013212 <__cvt+0x8e>
 80131ee:	f898 3000 	ldrb.w	r3, [r8]
 80131f2:	2b30      	cmp	r3, #48	; 0x30
 80131f4:	d10a      	bne.n	801320c <__cvt+0x88>
 80131f6:	2200      	movs	r2, #0
 80131f8:	2300      	movs	r3, #0
 80131fa:	4620      	mov	r0, r4
 80131fc:	4629      	mov	r1, r5
 80131fe:	f7ed fc3b 	bl	8000a78 <__aeabi_dcmpeq>
 8013202:	b918      	cbnz	r0, 801320c <__cvt+0x88>
 8013204:	f1c6 0601 	rsb	r6, r6, #1
 8013208:	f8ca 6000 	str.w	r6, [sl]
 801320c:	f8da 3000 	ldr.w	r3, [sl]
 8013210:	4499      	add	r9, r3
 8013212:	2200      	movs	r2, #0
 8013214:	2300      	movs	r3, #0
 8013216:	4620      	mov	r0, r4
 8013218:	4629      	mov	r1, r5
 801321a:	f7ed fc2d 	bl	8000a78 <__aeabi_dcmpeq>
 801321e:	b938      	cbnz	r0, 8013230 <__cvt+0xac>
 8013220:	2230      	movs	r2, #48	; 0x30
 8013222:	9b03      	ldr	r3, [sp, #12]
 8013224:	454b      	cmp	r3, r9
 8013226:	d205      	bcs.n	8013234 <__cvt+0xb0>
 8013228:	1c59      	adds	r1, r3, #1
 801322a:	9103      	str	r1, [sp, #12]
 801322c:	701a      	strb	r2, [r3, #0]
 801322e:	e7f8      	b.n	8013222 <__cvt+0x9e>
 8013230:	f8cd 900c 	str.w	r9, [sp, #12]
 8013234:	9b03      	ldr	r3, [sp, #12]
 8013236:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013238:	eba3 0308 	sub.w	r3, r3, r8
 801323c:	4640      	mov	r0, r8
 801323e:	6013      	str	r3, [r2, #0]
 8013240:	b004      	add	sp, #16
 8013242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013246 <__exponent>:
 8013246:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013248:	2900      	cmp	r1, #0
 801324a:	4604      	mov	r4, r0
 801324c:	bfba      	itte	lt
 801324e:	4249      	neglt	r1, r1
 8013250:	232d      	movlt	r3, #45	; 0x2d
 8013252:	232b      	movge	r3, #43	; 0x2b
 8013254:	2909      	cmp	r1, #9
 8013256:	f804 2b02 	strb.w	r2, [r4], #2
 801325a:	7043      	strb	r3, [r0, #1]
 801325c:	dd20      	ble.n	80132a0 <__exponent+0x5a>
 801325e:	f10d 0307 	add.w	r3, sp, #7
 8013262:	461f      	mov	r7, r3
 8013264:	260a      	movs	r6, #10
 8013266:	fb91 f5f6 	sdiv	r5, r1, r6
 801326a:	fb06 1115 	mls	r1, r6, r5, r1
 801326e:	3130      	adds	r1, #48	; 0x30
 8013270:	2d09      	cmp	r5, #9
 8013272:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013276:	f103 32ff 	add.w	r2, r3, #4294967295
 801327a:	4629      	mov	r1, r5
 801327c:	dc09      	bgt.n	8013292 <__exponent+0x4c>
 801327e:	3130      	adds	r1, #48	; 0x30
 8013280:	3b02      	subs	r3, #2
 8013282:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013286:	42bb      	cmp	r3, r7
 8013288:	4622      	mov	r2, r4
 801328a:	d304      	bcc.n	8013296 <__exponent+0x50>
 801328c:	1a10      	subs	r0, r2, r0
 801328e:	b003      	add	sp, #12
 8013290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013292:	4613      	mov	r3, r2
 8013294:	e7e7      	b.n	8013266 <__exponent+0x20>
 8013296:	f813 2b01 	ldrb.w	r2, [r3], #1
 801329a:	f804 2b01 	strb.w	r2, [r4], #1
 801329e:	e7f2      	b.n	8013286 <__exponent+0x40>
 80132a0:	2330      	movs	r3, #48	; 0x30
 80132a2:	4419      	add	r1, r3
 80132a4:	7083      	strb	r3, [r0, #2]
 80132a6:	1d02      	adds	r2, r0, #4
 80132a8:	70c1      	strb	r1, [r0, #3]
 80132aa:	e7ef      	b.n	801328c <__exponent+0x46>

080132ac <_printf_float>:
 80132ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132b0:	b08d      	sub	sp, #52	; 0x34
 80132b2:	460c      	mov	r4, r1
 80132b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80132b8:	4616      	mov	r6, r2
 80132ba:	461f      	mov	r7, r3
 80132bc:	4605      	mov	r5, r0
 80132be:	f001 fcfd 	bl	8014cbc <_localeconv_r>
 80132c2:	6803      	ldr	r3, [r0, #0]
 80132c4:	9304      	str	r3, [sp, #16]
 80132c6:	4618      	mov	r0, r3
 80132c8:	f7ec ff5a 	bl	8000180 <strlen>
 80132cc:	2300      	movs	r3, #0
 80132ce:	930a      	str	r3, [sp, #40]	; 0x28
 80132d0:	f8d8 3000 	ldr.w	r3, [r8]
 80132d4:	9005      	str	r0, [sp, #20]
 80132d6:	3307      	adds	r3, #7
 80132d8:	f023 0307 	bic.w	r3, r3, #7
 80132dc:	f103 0208 	add.w	r2, r3, #8
 80132e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80132e4:	f8d4 b000 	ldr.w	fp, [r4]
 80132e8:	f8c8 2000 	str.w	r2, [r8]
 80132ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132f0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80132f4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80132f8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80132fc:	9307      	str	r3, [sp, #28]
 80132fe:	f8cd 8018 	str.w	r8, [sp, #24]
 8013302:	f04f 32ff 	mov.w	r2, #4294967295
 8013306:	4ba7      	ldr	r3, [pc, #668]	; (80135a4 <_printf_float+0x2f8>)
 8013308:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801330c:	f7ed fbe6 	bl	8000adc <__aeabi_dcmpun>
 8013310:	bb70      	cbnz	r0, 8013370 <_printf_float+0xc4>
 8013312:	f04f 32ff 	mov.w	r2, #4294967295
 8013316:	4ba3      	ldr	r3, [pc, #652]	; (80135a4 <_printf_float+0x2f8>)
 8013318:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801331c:	f7ed fbc0 	bl	8000aa0 <__aeabi_dcmple>
 8013320:	bb30      	cbnz	r0, 8013370 <_printf_float+0xc4>
 8013322:	2200      	movs	r2, #0
 8013324:	2300      	movs	r3, #0
 8013326:	4640      	mov	r0, r8
 8013328:	4649      	mov	r1, r9
 801332a:	f7ed fbaf 	bl	8000a8c <__aeabi_dcmplt>
 801332e:	b110      	cbz	r0, 8013336 <_printf_float+0x8a>
 8013330:	232d      	movs	r3, #45	; 0x2d
 8013332:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013336:	4a9c      	ldr	r2, [pc, #624]	; (80135a8 <_printf_float+0x2fc>)
 8013338:	4b9c      	ldr	r3, [pc, #624]	; (80135ac <_printf_float+0x300>)
 801333a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801333e:	bf8c      	ite	hi
 8013340:	4690      	movhi	r8, r2
 8013342:	4698      	movls	r8, r3
 8013344:	2303      	movs	r3, #3
 8013346:	f02b 0204 	bic.w	r2, fp, #4
 801334a:	6123      	str	r3, [r4, #16]
 801334c:	6022      	str	r2, [r4, #0]
 801334e:	f04f 0900 	mov.w	r9, #0
 8013352:	9700      	str	r7, [sp, #0]
 8013354:	4633      	mov	r3, r6
 8013356:	aa0b      	add	r2, sp, #44	; 0x2c
 8013358:	4621      	mov	r1, r4
 801335a:	4628      	mov	r0, r5
 801335c:	f000 f9e6 	bl	801372c <_printf_common>
 8013360:	3001      	adds	r0, #1
 8013362:	f040 808d 	bne.w	8013480 <_printf_float+0x1d4>
 8013366:	f04f 30ff 	mov.w	r0, #4294967295
 801336a:	b00d      	add	sp, #52	; 0x34
 801336c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013370:	4642      	mov	r2, r8
 8013372:	464b      	mov	r3, r9
 8013374:	4640      	mov	r0, r8
 8013376:	4649      	mov	r1, r9
 8013378:	f7ed fbb0 	bl	8000adc <__aeabi_dcmpun>
 801337c:	b110      	cbz	r0, 8013384 <_printf_float+0xd8>
 801337e:	4a8c      	ldr	r2, [pc, #560]	; (80135b0 <_printf_float+0x304>)
 8013380:	4b8c      	ldr	r3, [pc, #560]	; (80135b4 <_printf_float+0x308>)
 8013382:	e7da      	b.n	801333a <_printf_float+0x8e>
 8013384:	6861      	ldr	r1, [r4, #4]
 8013386:	1c4b      	adds	r3, r1, #1
 8013388:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801338c:	a80a      	add	r0, sp, #40	; 0x28
 801338e:	d13e      	bne.n	801340e <_printf_float+0x162>
 8013390:	2306      	movs	r3, #6
 8013392:	6063      	str	r3, [r4, #4]
 8013394:	2300      	movs	r3, #0
 8013396:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801339a:	ab09      	add	r3, sp, #36	; 0x24
 801339c:	9300      	str	r3, [sp, #0]
 801339e:	ec49 8b10 	vmov	d0, r8, r9
 80133a2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80133a6:	6022      	str	r2, [r4, #0]
 80133a8:	f8cd a004 	str.w	sl, [sp, #4]
 80133ac:	6861      	ldr	r1, [r4, #4]
 80133ae:	4628      	mov	r0, r5
 80133b0:	f7ff fee8 	bl	8013184 <__cvt>
 80133b4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80133b8:	2b47      	cmp	r3, #71	; 0x47
 80133ba:	4680      	mov	r8, r0
 80133bc:	d109      	bne.n	80133d2 <_printf_float+0x126>
 80133be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133c0:	1cd8      	adds	r0, r3, #3
 80133c2:	db02      	blt.n	80133ca <_printf_float+0x11e>
 80133c4:	6862      	ldr	r2, [r4, #4]
 80133c6:	4293      	cmp	r3, r2
 80133c8:	dd47      	ble.n	801345a <_printf_float+0x1ae>
 80133ca:	f1aa 0a02 	sub.w	sl, sl, #2
 80133ce:	fa5f fa8a 	uxtb.w	sl, sl
 80133d2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80133d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80133d8:	d824      	bhi.n	8013424 <_printf_float+0x178>
 80133da:	3901      	subs	r1, #1
 80133dc:	4652      	mov	r2, sl
 80133de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80133e2:	9109      	str	r1, [sp, #36]	; 0x24
 80133e4:	f7ff ff2f 	bl	8013246 <__exponent>
 80133e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80133ea:	1813      	adds	r3, r2, r0
 80133ec:	2a01      	cmp	r2, #1
 80133ee:	4681      	mov	r9, r0
 80133f0:	6123      	str	r3, [r4, #16]
 80133f2:	dc02      	bgt.n	80133fa <_printf_float+0x14e>
 80133f4:	6822      	ldr	r2, [r4, #0]
 80133f6:	07d1      	lsls	r1, r2, #31
 80133f8:	d501      	bpl.n	80133fe <_printf_float+0x152>
 80133fa:	3301      	adds	r3, #1
 80133fc:	6123      	str	r3, [r4, #16]
 80133fe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013402:	2b00      	cmp	r3, #0
 8013404:	d0a5      	beq.n	8013352 <_printf_float+0xa6>
 8013406:	232d      	movs	r3, #45	; 0x2d
 8013408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801340c:	e7a1      	b.n	8013352 <_printf_float+0xa6>
 801340e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8013412:	f000 8177 	beq.w	8013704 <_printf_float+0x458>
 8013416:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801341a:	d1bb      	bne.n	8013394 <_printf_float+0xe8>
 801341c:	2900      	cmp	r1, #0
 801341e:	d1b9      	bne.n	8013394 <_printf_float+0xe8>
 8013420:	2301      	movs	r3, #1
 8013422:	e7b6      	b.n	8013392 <_printf_float+0xe6>
 8013424:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8013428:	d119      	bne.n	801345e <_printf_float+0x1b2>
 801342a:	2900      	cmp	r1, #0
 801342c:	6863      	ldr	r3, [r4, #4]
 801342e:	dd0c      	ble.n	801344a <_printf_float+0x19e>
 8013430:	6121      	str	r1, [r4, #16]
 8013432:	b913      	cbnz	r3, 801343a <_printf_float+0x18e>
 8013434:	6822      	ldr	r2, [r4, #0]
 8013436:	07d2      	lsls	r2, r2, #31
 8013438:	d502      	bpl.n	8013440 <_printf_float+0x194>
 801343a:	3301      	adds	r3, #1
 801343c:	440b      	add	r3, r1
 801343e:	6123      	str	r3, [r4, #16]
 8013440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013442:	65a3      	str	r3, [r4, #88]	; 0x58
 8013444:	f04f 0900 	mov.w	r9, #0
 8013448:	e7d9      	b.n	80133fe <_printf_float+0x152>
 801344a:	b913      	cbnz	r3, 8013452 <_printf_float+0x1a6>
 801344c:	6822      	ldr	r2, [r4, #0]
 801344e:	07d0      	lsls	r0, r2, #31
 8013450:	d501      	bpl.n	8013456 <_printf_float+0x1aa>
 8013452:	3302      	adds	r3, #2
 8013454:	e7f3      	b.n	801343e <_printf_float+0x192>
 8013456:	2301      	movs	r3, #1
 8013458:	e7f1      	b.n	801343e <_printf_float+0x192>
 801345a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801345e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013462:	4293      	cmp	r3, r2
 8013464:	db05      	blt.n	8013472 <_printf_float+0x1c6>
 8013466:	6822      	ldr	r2, [r4, #0]
 8013468:	6123      	str	r3, [r4, #16]
 801346a:	07d1      	lsls	r1, r2, #31
 801346c:	d5e8      	bpl.n	8013440 <_printf_float+0x194>
 801346e:	3301      	adds	r3, #1
 8013470:	e7e5      	b.n	801343e <_printf_float+0x192>
 8013472:	2b00      	cmp	r3, #0
 8013474:	bfd4      	ite	le
 8013476:	f1c3 0302 	rsble	r3, r3, #2
 801347a:	2301      	movgt	r3, #1
 801347c:	4413      	add	r3, r2
 801347e:	e7de      	b.n	801343e <_printf_float+0x192>
 8013480:	6823      	ldr	r3, [r4, #0]
 8013482:	055a      	lsls	r2, r3, #21
 8013484:	d407      	bmi.n	8013496 <_printf_float+0x1ea>
 8013486:	6923      	ldr	r3, [r4, #16]
 8013488:	4642      	mov	r2, r8
 801348a:	4631      	mov	r1, r6
 801348c:	4628      	mov	r0, r5
 801348e:	47b8      	blx	r7
 8013490:	3001      	adds	r0, #1
 8013492:	d12b      	bne.n	80134ec <_printf_float+0x240>
 8013494:	e767      	b.n	8013366 <_printf_float+0xba>
 8013496:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801349a:	f240 80dc 	bls.w	8013656 <_printf_float+0x3aa>
 801349e:	2200      	movs	r2, #0
 80134a0:	2300      	movs	r3, #0
 80134a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80134a6:	f7ed fae7 	bl	8000a78 <__aeabi_dcmpeq>
 80134aa:	2800      	cmp	r0, #0
 80134ac:	d033      	beq.n	8013516 <_printf_float+0x26a>
 80134ae:	2301      	movs	r3, #1
 80134b0:	4a41      	ldr	r2, [pc, #260]	; (80135b8 <_printf_float+0x30c>)
 80134b2:	4631      	mov	r1, r6
 80134b4:	4628      	mov	r0, r5
 80134b6:	47b8      	blx	r7
 80134b8:	3001      	adds	r0, #1
 80134ba:	f43f af54 	beq.w	8013366 <_printf_float+0xba>
 80134be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80134c2:	429a      	cmp	r2, r3
 80134c4:	db02      	blt.n	80134cc <_printf_float+0x220>
 80134c6:	6823      	ldr	r3, [r4, #0]
 80134c8:	07d8      	lsls	r0, r3, #31
 80134ca:	d50f      	bpl.n	80134ec <_printf_float+0x240>
 80134cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80134d0:	4631      	mov	r1, r6
 80134d2:	4628      	mov	r0, r5
 80134d4:	47b8      	blx	r7
 80134d6:	3001      	adds	r0, #1
 80134d8:	f43f af45 	beq.w	8013366 <_printf_float+0xba>
 80134dc:	f04f 0800 	mov.w	r8, #0
 80134e0:	f104 091a 	add.w	r9, r4, #26
 80134e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134e6:	3b01      	subs	r3, #1
 80134e8:	4543      	cmp	r3, r8
 80134ea:	dc09      	bgt.n	8013500 <_printf_float+0x254>
 80134ec:	6823      	ldr	r3, [r4, #0]
 80134ee:	079b      	lsls	r3, r3, #30
 80134f0:	f100 8103 	bmi.w	80136fa <_printf_float+0x44e>
 80134f4:	68e0      	ldr	r0, [r4, #12]
 80134f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80134f8:	4298      	cmp	r0, r3
 80134fa:	bfb8      	it	lt
 80134fc:	4618      	movlt	r0, r3
 80134fe:	e734      	b.n	801336a <_printf_float+0xbe>
 8013500:	2301      	movs	r3, #1
 8013502:	464a      	mov	r2, r9
 8013504:	4631      	mov	r1, r6
 8013506:	4628      	mov	r0, r5
 8013508:	47b8      	blx	r7
 801350a:	3001      	adds	r0, #1
 801350c:	f43f af2b 	beq.w	8013366 <_printf_float+0xba>
 8013510:	f108 0801 	add.w	r8, r8, #1
 8013514:	e7e6      	b.n	80134e4 <_printf_float+0x238>
 8013516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013518:	2b00      	cmp	r3, #0
 801351a:	dc2b      	bgt.n	8013574 <_printf_float+0x2c8>
 801351c:	2301      	movs	r3, #1
 801351e:	4a26      	ldr	r2, [pc, #152]	; (80135b8 <_printf_float+0x30c>)
 8013520:	4631      	mov	r1, r6
 8013522:	4628      	mov	r0, r5
 8013524:	47b8      	blx	r7
 8013526:	3001      	adds	r0, #1
 8013528:	f43f af1d 	beq.w	8013366 <_printf_float+0xba>
 801352c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801352e:	b923      	cbnz	r3, 801353a <_printf_float+0x28e>
 8013530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013532:	b913      	cbnz	r3, 801353a <_printf_float+0x28e>
 8013534:	6823      	ldr	r3, [r4, #0]
 8013536:	07d9      	lsls	r1, r3, #31
 8013538:	d5d8      	bpl.n	80134ec <_printf_float+0x240>
 801353a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801353e:	4631      	mov	r1, r6
 8013540:	4628      	mov	r0, r5
 8013542:	47b8      	blx	r7
 8013544:	3001      	adds	r0, #1
 8013546:	f43f af0e 	beq.w	8013366 <_printf_float+0xba>
 801354a:	f04f 0900 	mov.w	r9, #0
 801354e:	f104 0a1a 	add.w	sl, r4, #26
 8013552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013554:	425b      	negs	r3, r3
 8013556:	454b      	cmp	r3, r9
 8013558:	dc01      	bgt.n	801355e <_printf_float+0x2b2>
 801355a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801355c:	e794      	b.n	8013488 <_printf_float+0x1dc>
 801355e:	2301      	movs	r3, #1
 8013560:	4652      	mov	r2, sl
 8013562:	4631      	mov	r1, r6
 8013564:	4628      	mov	r0, r5
 8013566:	47b8      	blx	r7
 8013568:	3001      	adds	r0, #1
 801356a:	f43f aefc 	beq.w	8013366 <_printf_float+0xba>
 801356e:	f109 0901 	add.w	r9, r9, #1
 8013572:	e7ee      	b.n	8013552 <_printf_float+0x2a6>
 8013574:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013576:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013578:	429a      	cmp	r2, r3
 801357a:	bfa8      	it	ge
 801357c:	461a      	movge	r2, r3
 801357e:	2a00      	cmp	r2, #0
 8013580:	4691      	mov	r9, r2
 8013582:	dd07      	ble.n	8013594 <_printf_float+0x2e8>
 8013584:	4613      	mov	r3, r2
 8013586:	4631      	mov	r1, r6
 8013588:	4642      	mov	r2, r8
 801358a:	4628      	mov	r0, r5
 801358c:	47b8      	blx	r7
 801358e:	3001      	adds	r0, #1
 8013590:	f43f aee9 	beq.w	8013366 <_printf_float+0xba>
 8013594:	f104 031a 	add.w	r3, r4, #26
 8013598:	f04f 0b00 	mov.w	fp, #0
 801359c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80135a0:	9306      	str	r3, [sp, #24]
 80135a2:	e015      	b.n	80135d0 <_printf_float+0x324>
 80135a4:	7fefffff 	.word	0x7fefffff
 80135a8:	08017864 	.word	0x08017864
 80135ac:	08017860 	.word	0x08017860
 80135b0:	0801786c 	.word	0x0801786c
 80135b4:	08017868 	.word	0x08017868
 80135b8:	08017870 	.word	0x08017870
 80135bc:	2301      	movs	r3, #1
 80135be:	9a06      	ldr	r2, [sp, #24]
 80135c0:	4631      	mov	r1, r6
 80135c2:	4628      	mov	r0, r5
 80135c4:	47b8      	blx	r7
 80135c6:	3001      	adds	r0, #1
 80135c8:	f43f aecd 	beq.w	8013366 <_printf_float+0xba>
 80135cc:	f10b 0b01 	add.w	fp, fp, #1
 80135d0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80135d4:	ebaa 0309 	sub.w	r3, sl, r9
 80135d8:	455b      	cmp	r3, fp
 80135da:	dcef      	bgt.n	80135bc <_printf_float+0x310>
 80135dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80135e0:	429a      	cmp	r2, r3
 80135e2:	44d0      	add	r8, sl
 80135e4:	db15      	blt.n	8013612 <_printf_float+0x366>
 80135e6:	6823      	ldr	r3, [r4, #0]
 80135e8:	07da      	lsls	r2, r3, #31
 80135ea:	d412      	bmi.n	8013612 <_printf_float+0x366>
 80135ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80135f0:	eba3 020a 	sub.w	r2, r3, sl
 80135f4:	eba3 0a01 	sub.w	sl, r3, r1
 80135f8:	4592      	cmp	sl, r2
 80135fa:	bfa8      	it	ge
 80135fc:	4692      	movge	sl, r2
 80135fe:	f1ba 0f00 	cmp.w	sl, #0
 8013602:	dc0e      	bgt.n	8013622 <_printf_float+0x376>
 8013604:	f04f 0800 	mov.w	r8, #0
 8013608:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801360c:	f104 091a 	add.w	r9, r4, #26
 8013610:	e019      	b.n	8013646 <_printf_float+0x39a>
 8013612:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013616:	4631      	mov	r1, r6
 8013618:	4628      	mov	r0, r5
 801361a:	47b8      	blx	r7
 801361c:	3001      	adds	r0, #1
 801361e:	d1e5      	bne.n	80135ec <_printf_float+0x340>
 8013620:	e6a1      	b.n	8013366 <_printf_float+0xba>
 8013622:	4653      	mov	r3, sl
 8013624:	4642      	mov	r2, r8
 8013626:	4631      	mov	r1, r6
 8013628:	4628      	mov	r0, r5
 801362a:	47b8      	blx	r7
 801362c:	3001      	adds	r0, #1
 801362e:	d1e9      	bne.n	8013604 <_printf_float+0x358>
 8013630:	e699      	b.n	8013366 <_printf_float+0xba>
 8013632:	2301      	movs	r3, #1
 8013634:	464a      	mov	r2, r9
 8013636:	4631      	mov	r1, r6
 8013638:	4628      	mov	r0, r5
 801363a:	47b8      	blx	r7
 801363c:	3001      	adds	r0, #1
 801363e:	f43f ae92 	beq.w	8013366 <_printf_float+0xba>
 8013642:	f108 0801 	add.w	r8, r8, #1
 8013646:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801364a:	1a9b      	subs	r3, r3, r2
 801364c:	eba3 030a 	sub.w	r3, r3, sl
 8013650:	4543      	cmp	r3, r8
 8013652:	dcee      	bgt.n	8013632 <_printf_float+0x386>
 8013654:	e74a      	b.n	80134ec <_printf_float+0x240>
 8013656:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013658:	2a01      	cmp	r2, #1
 801365a:	dc01      	bgt.n	8013660 <_printf_float+0x3b4>
 801365c:	07db      	lsls	r3, r3, #31
 801365e:	d53a      	bpl.n	80136d6 <_printf_float+0x42a>
 8013660:	2301      	movs	r3, #1
 8013662:	4642      	mov	r2, r8
 8013664:	4631      	mov	r1, r6
 8013666:	4628      	mov	r0, r5
 8013668:	47b8      	blx	r7
 801366a:	3001      	adds	r0, #1
 801366c:	f43f ae7b 	beq.w	8013366 <_printf_float+0xba>
 8013670:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013674:	4631      	mov	r1, r6
 8013676:	4628      	mov	r0, r5
 8013678:	47b8      	blx	r7
 801367a:	3001      	adds	r0, #1
 801367c:	f108 0801 	add.w	r8, r8, #1
 8013680:	f43f ae71 	beq.w	8013366 <_printf_float+0xba>
 8013684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013686:	2200      	movs	r2, #0
 8013688:	f103 3aff 	add.w	sl, r3, #4294967295
 801368c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013690:	2300      	movs	r3, #0
 8013692:	f7ed f9f1 	bl	8000a78 <__aeabi_dcmpeq>
 8013696:	b9c8      	cbnz	r0, 80136cc <_printf_float+0x420>
 8013698:	4653      	mov	r3, sl
 801369a:	4642      	mov	r2, r8
 801369c:	4631      	mov	r1, r6
 801369e:	4628      	mov	r0, r5
 80136a0:	47b8      	blx	r7
 80136a2:	3001      	adds	r0, #1
 80136a4:	d10e      	bne.n	80136c4 <_printf_float+0x418>
 80136a6:	e65e      	b.n	8013366 <_printf_float+0xba>
 80136a8:	2301      	movs	r3, #1
 80136aa:	4652      	mov	r2, sl
 80136ac:	4631      	mov	r1, r6
 80136ae:	4628      	mov	r0, r5
 80136b0:	47b8      	blx	r7
 80136b2:	3001      	adds	r0, #1
 80136b4:	f43f ae57 	beq.w	8013366 <_printf_float+0xba>
 80136b8:	f108 0801 	add.w	r8, r8, #1
 80136bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136be:	3b01      	subs	r3, #1
 80136c0:	4543      	cmp	r3, r8
 80136c2:	dcf1      	bgt.n	80136a8 <_printf_float+0x3fc>
 80136c4:	464b      	mov	r3, r9
 80136c6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80136ca:	e6de      	b.n	801348a <_printf_float+0x1de>
 80136cc:	f04f 0800 	mov.w	r8, #0
 80136d0:	f104 0a1a 	add.w	sl, r4, #26
 80136d4:	e7f2      	b.n	80136bc <_printf_float+0x410>
 80136d6:	2301      	movs	r3, #1
 80136d8:	e7df      	b.n	801369a <_printf_float+0x3ee>
 80136da:	2301      	movs	r3, #1
 80136dc:	464a      	mov	r2, r9
 80136de:	4631      	mov	r1, r6
 80136e0:	4628      	mov	r0, r5
 80136e2:	47b8      	blx	r7
 80136e4:	3001      	adds	r0, #1
 80136e6:	f43f ae3e 	beq.w	8013366 <_printf_float+0xba>
 80136ea:	f108 0801 	add.w	r8, r8, #1
 80136ee:	68e3      	ldr	r3, [r4, #12]
 80136f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80136f2:	1a9b      	subs	r3, r3, r2
 80136f4:	4543      	cmp	r3, r8
 80136f6:	dcf0      	bgt.n	80136da <_printf_float+0x42e>
 80136f8:	e6fc      	b.n	80134f4 <_printf_float+0x248>
 80136fa:	f04f 0800 	mov.w	r8, #0
 80136fe:	f104 0919 	add.w	r9, r4, #25
 8013702:	e7f4      	b.n	80136ee <_printf_float+0x442>
 8013704:	2900      	cmp	r1, #0
 8013706:	f43f ae8b 	beq.w	8013420 <_printf_float+0x174>
 801370a:	2300      	movs	r3, #0
 801370c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8013710:	ab09      	add	r3, sp, #36	; 0x24
 8013712:	9300      	str	r3, [sp, #0]
 8013714:	ec49 8b10 	vmov	d0, r8, r9
 8013718:	6022      	str	r2, [r4, #0]
 801371a:	f8cd a004 	str.w	sl, [sp, #4]
 801371e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013722:	4628      	mov	r0, r5
 8013724:	f7ff fd2e 	bl	8013184 <__cvt>
 8013728:	4680      	mov	r8, r0
 801372a:	e648      	b.n	80133be <_printf_float+0x112>

0801372c <_printf_common>:
 801372c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013730:	4691      	mov	r9, r2
 8013732:	461f      	mov	r7, r3
 8013734:	688a      	ldr	r2, [r1, #8]
 8013736:	690b      	ldr	r3, [r1, #16]
 8013738:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801373c:	4293      	cmp	r3, r2
 801373e:	bfb8      	it	lt
 8013740:	4613      	movlt	r3, r2
 8013742:	f8c9 3000 	str.w	r3, [r9]
 8013746:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801374a:	4606      	mov	r6, r0
 801374c:	460c      	mov	r4, r1
 801374e:	b112      	cbz	r2, 8013756 <_printf_common+0x2a>
 8013750:	3301      	adds	r3, #1
 8013752:	f8c9 3000 	str.w	r3, [r9]
 8013756:	6823      	ldr	r3, [r4, #0]
 8013758:	0699      	lsls	r1, r3, #26
 801375a:	bf42      	ittt	mi
 801375c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013760:	3302      	addmi	r3, #2
 8013762:	f8c9 3000 	strmi.w	r3, [r9]
 8013766:	6825      	ldr	r5, [r4, #0]
 8013768:	f015 0506 	ands.w	r5, r5, #6
 801376c:	d107      	bne.n	801377e <_printf_common+0x52>
 801376e:	f104 0a19 	add.w	sl, r4, #25
 8013772:	68e3      	ldr	r3, [r4, #12]
 8013774:	f8d9 2000 	ldr.w	r2, [r9]
 8013778:	1a9b      	subs	r3, r3, r2
 801377a:	42ab      	cmp	r3, r5
 801377c:	dc28      	bgt.n	80137d0 <_printf_common+0xa4>
 801377e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013782:	6822      	ldr	r2, [r4, #0]
 8013784:	3300      	adds	r3, #0
 8013786:	bf18      	it	ne
 8013788:	2301      	movne	r3, #1
 801378a:	0692      	lsls	r2, r2, #26
 801378c:	d42d      	bmi.n	80137ea <_printf_common+0xbe>
 801378e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013792:	4639      	mov	r1, r7
 8013794:	4630      	mov	r0, r6
 8013796:	47c0      	blx	r8
 8013798:	3001      	adds	r0, #1
 801379a:	d020      	beq.n	80137de <_printf_common+0xb2>
 801379c:	6823      	ldr	r3, [r4, #0]
 801379e:	68e5      	ldr	r5, [r4, #12]
 80137a0:	f8d9 2000 	ldr.w	r2, [r9]
 80137a4:	f003 0306 	and.w	r3, r3, #6
 80137a8:	2b04      	cmp	r3, #4
 80137aa:	bf08      	it	eq
 80137ac:	1aad      	subeq	r5, r5, r2
 80137ae:	68a3      	ldr	r3, [r4, #8]
 80137b0:	6922      	ldr	r2, [r4, #16]
 80137b2:	bf0c      	ite	eq
 80137b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80137b8:	2500      	movne	r5, #0
 80137ba:	4293      	cmp	r3, r2
 80137bc:	bfc4      	itt	gt
 80137be:	1a9b      	subgt	r3, r3, r2
 80137c0:	18ed      	addgt	r5, r5, r3
 80137c2:	f04f 0900 	mov.w	r9, #0
 80137c6:	341a      	adds	r4, #26
 80137c8:	454d      	cmp	r5, r9
 80137ca:	d11a      	bne.n	8013802 <_printf_common+0xd6>
 80137cc:	2000      	movs	r0, #0
 80137ce:	e008      	b.n	80137e2 <_printf_common+0xb6>
 80137d0:	2301      	movs	r3, #1
 80137d2:	4652      	mov	r2, sl
 80137d4:	4639      	mov	r1, r7
 80137d6:	4630      	mov	r0, r6
 80137d8:	47c0      	blx	r8
 80137da:	3001      	adds	r0, #1
 80137dc:	d103      	bne.n	80137e6 <_printf_common+0xba>
 80137de:	f04f 30ff 	mov.w	r0, #4294967295
 80137e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137e6:	3501      	adds	r5, #1
 80137e8:	e7c3      	b.n	8013772 <_printf_common+0x46>
 80137ea:	18e1      	adds	r1, r4, r3
 80137ec:	1c5a      	adds	r2, r3, #1
 80137ee:	2030      	movs	r0, #48	; 0x30
 80137f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80137f4:	4422      	add	r2, r4
 80137f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80137fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80137fe:	3302      	adds	r3, #2
 8013800:	e7c5      	b.n	801378e <_printf_common+0x62>
 8013802:	2301      	movs	r3, #1
 8013804:	4622      	mov	r2, r4
 8013806:	4639      	mov	r1, r7
 8013808:	4630      	mov	r0, r6
 801380a:	47c0      	blx	r8
 801380c:	3001      	adds	r0, #1
 801380e:	d0e6      	beq.n	80137de <_printf_common+0xb2>
 8013810:	f109 0901 	add.w	r9, r9, #1
 8013814:	e7d8      	b.n	80137c8 <_printf_common+0x9c>
	...

08013818 <_printf_i>:
 8013818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801381c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013820:	460c      	mov	r4, r1
 8013822:	7e09      	ldrb	r1, [r1, #24]
 8013824:	b085      	sub	sp, #20
 8013826:	296e      	cmp	r1, #110	; 0x6e
 8013828:	4617      	mov	r7, r2
 801382a:	4606      	mov	r6, r0
 801382c:	4698      	mov	r8, r3
 801382e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013830:	f000 80b3 	beq.w	801399a <_printf_i+0x182>
 8013834:	d822      	bhi.n	801387c <_printf_i+0x64>
 8013836:	2963      	cmp	r1, #99	; 0x63
 8013838:	d036      	beq.n	80138a8 <_printf_i+0x90>
 801383a:	d80a      	bhi.n	8013852 <_printf_i+0x3a>
 801383c:	2900      	cmp	r1, #0
 801383e:	f000 80b9 	beq.w	80139b4 <_printf_i+0x19c>
 8013842:	2958      	cmp	r1, #88	; 0x58
 8013844:	f000 8083 	beq.w	801394e <_printf_i+0x136>
 8013848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801384c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013850:	e032      	b.n	80138b8 <_printf_i+0xa0>
 8013852:	2964      	cmp	r1, #100	; 0x64
 8013854:	d001      	beq.n	801385a <_printf_i+0x42>
 8013856:	2969      	cmp	r1, #105	; 0x69
 8013858:	d1f6      	bne.n	8013848 <_printf_i+0x30>
 801385a:	6820      	ldr	r0, [r4, #0]
 801385c:	6813      	ldr	r3, [r2, #0]
 801385e:	0605      	lsls	r5, r0, #24
 8013860:	f103 0104 	add.w	r1, r3, #4
 8013864:	d52a      	bpl.n	80138bc <_printf_i+0xa4>
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	6011      	str	r1, [r2, #0]
 801386a:	2b00      	cmp	r3, #0
 801386c:	da03      	bge.n	8013876 <_printf_i+0x5e>
 801386e:	222d      	movs	r2, #45	; 0x2d
 8013870:	425b      	negs	r3, r3
 8013872:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013876:	486f      	ldr	r0, [pc, #444]	; (8013a34 <_printf_i+0x21c>)
 8013878:	220a      	movs	r2, #10
 801387a:	e039      	b.n	80138f0 <_printf_i+0xd8>
 801387c:	2973      	cmp	r1, #115	; 0x73
 801387e:	f000 809d 	beq.w	80139bc <_printf_i+0x1a4>
 8013882:	d808      	bhi.n	8013896 <_printf_i+0x7e>
 8013884:	296f      	cmp	r1, #111	; 0x6f
 8013886:	d020      	beq.n	80138ca <_printf_i+0xb2>
 8013888:	2970      	cmp	r1, #112	; 0x70
 801388a:	d1dd      	bne.n	8013848 <_printf_i+0x30>
 801388c:	6823      	ldr	r3, [r4, #0]
 801388e:	f043 0320 	orr.w	r3, r3, #32
 8013892:	6023      	str	r3, [r4, #0]
 8013894:	e003      	b.n	801389e <_printf_i+0x86>
 8013896:	2975      	cmp	r1, #117	; 0x75
 8013898:	d017      	beq.n	80138ca <_printf_i+0xb2>
 801389a:	2978      	cmp	r1, #120	; 0x78
 801389c:	d1d4      	bne.n	8013848 <_printf_i+0x30>
 801389e:	2378      	movs	r3, #120	; 0x78
 80138a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80138a4:	4864      	ldr	r0, [pc, #400]	; (8013a38 <_printf_i+0x220>)
 80138a6:	e055      	b.n	8013954 <_printf_i+0x13c>
 80138a8:	6813      	ldr	r3, [r2, #0]
 80138aa:	1d19      	adds	r1, r3, #4
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	6011      	str	r1, [r2, #0]
 80138b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80138b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80138b8:	2301      	movs	r3, #1
 80138ba:	e08c      	b.n	80139d6 <_printf_i+0x1be>
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	6011      	str	r1, [r2, #0]
 80138c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80138c4:	bf18      	it	ne
 80138c6:	b21b      	sxthne	r3, r3
 80138c8:	e7cf      	b.n	801386a <_printf_i+0x52>
 80138ca:	6813      	ldr	r3, [r2, #0]
 80138cc:	6825      	ldr	r5, [r4, #0]
 80138ce:	1d18      	adds	r0, r3, #4
 80138d0:	6010      	str	r0, [r2, #0]
 80138d2:	0628      	lsls	r0, r5, #24
 80138d4:	d501      	bpl.n	80138da <_printf_i+0xc2>
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	e002      	b.n	80138e0 <_printf_i+0xc8>
 80138da:	0668      	lsls	r0, r5, #25
 80138dc:	d5fb      	bpl.n	80138d6 <_printf_i+0xbe>
 80138de:	881b      	ldrh	r3, [r3, #0]
 80138e0:	4854      	ldr	r0, [pc, #336]	; (8013a34 <_printf_i+0x21c>)
 80138e2:	296f      	cmp	r1, #111	; 0x6f
 80138e4:	bf14      	ite	ne
 80138e6:	220a      	movne	r2, #10
 80138e8:	2208      	moveq	r2, #8
 80138ea:	2100      	movs	r1, #0
 80138ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80138f0:	6865      	ldr	r5, [r4, #4]
 80138f2:	60a5      	str	r5, [r4, #8]
 80138f4:	2d00      	cmp	r5, #0
 80138f6:	f2c0 8095 	blt.w	8013a24 <_printf_i+0x20c>
 80138fa:	6821      	ldr	r1, [r4, #0]
 80138fc:	f021 0104 	bic.w	r1, r1, #4
 8013900:	6021      	str	r1, [r4, #0]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d13d      	bne.n	8013982 <_printf_i+0x16a>
 8013906:	2d00      	cmp	r5, #0
 8013908:	f040 808e 	bne.w	8013a28 <_printf_i+0x210>
 801390c:	4665      	mov	r5, ip
 801390e:	2a08      	cmp	r2, #8
 8013910:	d10b      	bne.n	801392a <_printf_i+0x112>
 8013912:	6823      	ldr	r3, [r4, #0]
 8013914:	07db      	lsls	r3, r3, #31
 8013916:	d508      	bpl.n	801392a <_printf_i+0x112>
 8013918:	6923      	ldr	r3, [r4, #16]
 801391a:	6862      	ldr	r2, [r4, #4]
 801391c:	429a      	cmp	r2, r3
 801391e:	bfde      	ittt	le
 8013920:	2330      	movle	r3, #48	; 0x30
 8013922:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013926:	f105 35ff 	addle.w	r5, r5, #4294967295
 801392a:	ebac 0305 	sub.w	r3, ip, r5
 801392e:	6123      	str	r3, [r4, #16]
 8013930:	f8cd 8000 	str.w	r8, [sp]
 8013934:	463b      	mov	r3, r7
 8013936:	aa03      	add	r2, sp, #12
 8013938:	4621      	mov	r1, r4
 801393a:	4630      	mov	r0, r6
 801393c:	f7ff fef6 	bl	801372c <_printf_common>
 8013940:	3001      	adds	r0, #1
 8013942:	d14d      	bne.n	80139e0 <_printf_i+0x1c8>
 8013944:	f04f 30ff 	mov.w	r0, #4294967295
 8013948:	b005      	add	sp, #20
 801394a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801394e:	4839      	ldr	r0, [pc, #228]	; (8013a34 <_printf_i+0x21c>)
 8013950:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013954:	6813      	ldr	r3, [r2, #0]
 8013956:	6821      	ldr	r1, [r4, #0]
 8013958:	1d1d      	adds	r5, r3, #4
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	6015      	str	r5, [r2, #0]
 801395e:	060a      	lsls	r2, r1, #24
 8013960:	d50b      	bpl.n	801397a <_printf_i+0x162>
 8013962:	07ca      	lsls	r2, r1, #31
 8013964:	bf44      	itt	mi
 8013966:	f041 0120 	orrmi.w	r1, r1, #32
 801396a:	6021      	strmi	r1, [r4, #0]
 801396c:	b91b      	cbnz	r3, 8013976 <_printf_i+0x15e>
 801396e:	6822      	ldr	r2, [r4, #0]
 8013970:	f022 0220 	bic.w	r2, r2, #32
 8013974:	6022      	str	r2, [r4, #0]
 8013976:	2210      	movs	r2, #16
 8013978:	e7b7      	b.n	80138ea <_printf_i+0xd2>
 801397a:	064d      	lsls	r5, r1, #25
 801397c:	bf48      	it	mi
 801397e:	b29b      	uxthmi	r3, r3
 8013980:	e7ef      	b.n	8013962 <_printf_i+0x14a>
 8013982:	4665      	mov	r5, ip
 8013984:	fbb3 f1f2 	udiv	r1, r3, r2
 8013988:	fb02 3311 	mls	r3, r2, r1, r3
 801398c:	5cc3      	ldrb	r3, [r0, r3]
 801398e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013992:	460b      	mov	r3, r1
 8013994:	2900      	cmp	r1, #0
 8013996:	d1f5      	bne.n	8013984 <_printf_i+0x16c>
 8013998:	e7b9      	b.n	801390e <_printf_i+0xf6>
 801399a:	6813      	ldr	r3, [r2, #0]
 801399c:	6825      	ldr	r5, [r4, #0]
 801399e:	6961      	ldr	r1, [r4, #20]
 80139a0:	1d18      	adds	r0, r3, #4
 80139a2:	6010      	str	r0, [r2, #0]
 80139a4:	0628      	lsls	r0, r5, #24
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	d501      	bpl.n	80139ae <_printf_i+0x196>
 80139aa:	6019      	str	r1, [r3, #0]
 80139ac:	e002      	b.n	80139b4 <_printf_i+0x19c>
 80139ae:	066a      	lsls	r2, r5, #25
 80139b0:	d5fb      	bpl.n	80139aa <_printf_i+0x192>
 80139b2:	8019      	strh	r1, [r3, #0]
 80139b4:	2300      	movs	r3, #0
 80139b6:	6123      	str	r3, [r4, #16]
 80139b8:	4665      	mov	r5, ip
 80139ba:	e7b9      	b.n	8013930 <_printf_i+0x118>
 80139bc:	6813      	ldr	r3, [r2, #0]
 80139be:	1d19      	adds	r1, r3, #4
 80139c0:	6011      	str	r1, [r2, #0]
 80139c2:	681d      	ldr	r5, [r3, #0]
 80139c4:	6862      	ldr	r2, [r4, #4]
 80139c6:	2100      	movs	r1, #0
 80139c8:	4628      	mov	r0, r5
 80139ca:	f7ec fbe1 	bl	8000190 <memchr>
 80139ce:	b108      	cbz	r0, 80139d4 <_printf_i+0x1bc>
 80139d0:	1b40      	subs	r0, r0, r5
 80139d2:	6060      	str	r0, [r4, #4]
 80139d4:	6863      	ldr	r3, [r4, #4]
 80139d6:	6123      	str	r3, [r4, #16]
 80139d8:	2300      	movs	r3, #0
 80139da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80139de:	e7a7      	b.n	8013930 <_printf_i+0x118>
 80139e0:	6923      	ldr	r3, [r4, #16]
 80139e2:	462a      	mov	r2, r5
 80139e4:	4639      	mov	r1, r7
 80139e6:	4630      	mov	r0, r6
 80139e8:	47c0      	blx	r8
 80139ea:	3001      	adds	r0, #1
 80139ec:	d0aa      	beq.n	8013944 <_printf_i+0x12c>
 80139ee:	6823      	ldr	r3, [r4, #0]
 80139f0:	079b      	lsls	r3, r3, #30
 80139f2:	d413      	bmi.n	8013a1c <_printf_i+0x204>
 80139f4:	68e0      	ldr	r0, [r4, #12]
 80139f6:	9b03      	ldr	r3, [sp, #12]
 80139f8:	4298      	cmp	r0, r3
 80139fa:	bfb8      	it	lt
 80139fc:	4618      	movlt	r0, r3
 80139fe:	e7a3      	b.n	8013948 <_printf_i+0x130>
 8013a00:	2301      	movs	r3, #1
 8013a02:	464a      	mov	r2, r9
 8013a04:	4639      	mov	r1, r7
 8013a06:	4630      	mov	r0, r6
 8013a08:	47c0      	blx	r8
 8013a0a:	3001      	adds	r0, #1
 8013a0c:	d09a      	beq.n	8013944 <_printf_i+0x12c>
 8013a0e:	3501      	adds	r5, #1
 8013a10:	68e3      	ldr	r3, [r4, #12]
 8013a12:	9a03      	ldr	r2, [sp, #12]
 8013a14:	1a9b      	subs	r3, r3, r2
 8013a16:	42ab      	cmp	r3, r5
 8013a18:	dcf2      	bgt.n	8013a00 <_printf_i+0x1e8>
 8013a1a:	e7eb      	b.n	80139f4 <_printf_i+0x1dc>
 8013a1c:	2500      	movs	r5, #0
 8013a1e:	f104 0919 	add.w	r9, r4, #25
 8013a22:	e7f5      	b.n	8013a10 <_printf_i+0x1f8>
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d1ac      	bne.n	8013982 <_printf_i+0x16a>
 8013a28:	7803      	ldrb	r3, [r0, #0]
 8013a2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013a2e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013a32:	e76c      	b.n	801390e <_printf_i+0xf6>
 8013a34:	08017872 	.word	0x08017872
 8013a38:	08017883 	.word	0x08017883

08013a3c <iprintf>:
 8013a3c:	b40f      	push	{r0, r1, r2, r3}
 8013a3e:	4b0a      	ldr	r3, [pc, #40]	; (8013a68 <iprintf+0x2c>)
 8013a40:	b513      	push	{r0, r1, r4, lr}
 8013a42:	681c      	ldr	r4, [r3, #0]
 8013a44:	b124      	cbz	r4, 8013a50 <iprintf+0x14>
 8013a46:	69a3      	ldr	r3, [r4, #24]
 8013a48:	b913      	cbnz	r3, 8013a50 <iprintf+0x14>
 8013a4a:	4620      	mov	r0, r4
 8013a4c:	f001 f8ac 	bl	8014ba8 <__sinit>
 8013a50:	ab05      	add	r3, sp, #20
 8013a52:	9a04      	ldr	r2, [sp, #16]
 8013a54:	68a1      	ldr	r1, [r4, #8]
 8013a56:	9301      	str	r3, [sp, #4]
 8013a58:	4620      	mov	r0, r4
 8013a5a:	f001 fe09 	bl	8015670 <_vfiprintf_r>
 8013a5e:	b002      	add	sp, #8
 8013a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a64:	b004      	add	sp, #16
 8013a66:	4770      	bx	lr
 8013a68:	20000024 	.word	0x20000024

08013a6c <_puts_r>:
 8013a6c:	b570      	push	{r4, r5, r6, lr}
 8013a6e:	460e      	mov	r6, r1
 8013a70:	4605      	mov	r5, r0
 8013a72:	b118      	cbz	r0, 8013a7c <_puts_r+0x10>
 8013a74:	6983      	ldr	r3, [r0, #24]
 8013a76:	b90b      	cbnz	r3, 8013a7c <_puts_r+0x10>
 8013a78:	f001 f896 	bl	8014ba8 <__sinit>
 8013a7c:	69ab      	ldr	r3, [r5, #24]
 8013a7e:	68ac      	ldr	r4, [r5, #8]
 8013a80:	b913      	cbnz	r3, 8013a88 <_puts_r+0x1c>
 8013a82:	4628      	mov	r0, r5
 8013a84:	f001 f890 	bl	8014ba8 <__sinit>
 8013a88:	4b23      	ldr	r3, [pc, #140]	; (8013b18 <_puts_r+0xac>)
 8013a8a:	429c      	cmp	r4, r3
 8013a8c:	d117      	bne.n	8013abe <_puts_r+0x52>
 8013a8e:	686c      	ldr	r4, [r5, #4]
 8013a90:	89a3      	ldrh	r3, [r4, #12]
 8013a92:	071b      	lsls	r3, r3, #28
 8013a94:	d51d      	bpl.n	8013ad2 <_puts_r+0x66>
 8013a96:	6923      	ldr	r3, [r4, #16]
 8013a98:	b1db      	cbz	r3, 8013ad2 <_puts_r+0x66>
 8013a9a:	3e01      	subs	r6, #1
 8013a9c:	68a3      	ldr	r3, [r4, #8]
 8013a9e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013aa2:	3b01      	subs	r3, #1
 8013aa4:	60a3      	str	r3, [r4, #8]
 8013aa6:	b9e9      	cbnz	r1, 8013ae4 <_puts_r+0x78>
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	da2e      	bge.n	8013b0a <_puts_r+0x9e>
 8013aac:	4622      	mov	r2, r4
 8013aae:	210a      	movs	r1, #10
 8013ab0:	4628      	mov	r0, r5
 8013ab2:	f000 f885 	bl	8013bc0 <__swbuf_r>
 8013ab6:	3001      	adds	r0, #1
 8013ab8:	d011      	beq.n	8013ade <_puts_r+0x72>
 8013aba:	200a      	movs	r0, #10
 8013abc:	e011      	b.n	8013ae2 <_puts_r+0x76>
 8013abe:	4b17      	ldr	r3, [pc, #92]	; (8013b1c <_puts_r+0xb0>)
 8013ac0:	429c      	cmp	r4, r3
 8013ac2:	d101      	bne.n	8013ac8 <_puts_r+0x5c>
 8013ac4:	68ac      	ldr	r4, [r5, #8]
 8013ac6:	e7e3      	b.n	8013a90 <_puts_r+0x24>
 8013ac8:	4b15      	ldr	r3, [pc, #84]	; (8013b20 <_puts_r+0xb4>)
 8013aca:	429c      	cmp	r4, r3
 8013acc:	bf08      	it	eq
 8013ace:	68ec      	ldreq	r4, [r5, #12]
 8013ad0:	e7de      	b.n	8013a90 <_puts_r+0x24>
 8013ad2:	4621      	mov	r1, r4
 8013ad4:	4628      	mov	r0, r5
 8013ad6:	f000 f8c5 	bl	8013c64 <__swsetup_r>
 8013ada:	2800      	cmp	r0, #0
 8013adc:	d0dd      	beq.n	8013a9a <_puts_r+0x2e>
 8013ade:	f04f 30ff 	mov.w	r0, #4294967295
 8013ae2:	bd70      	pop	{r4, r5, r6, pc}
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	da04      	bge.n	8013af2 <_puts_r+0x86>
 8013ae8:	69a2      	ldr	r2, [r4, #24]
 8013aea:	429a      	cmp	r2, r3
 8013aec:	dc06      	bgt.n	8013afc <_puts_r+0x90>
 8013aee:	290a      	cmp	r1, #10
 8013af0:	d004      	beq.n	8013afc <_puts_r+0x90>
 8013af2:	6823      	ldr	r3, [r4, #0]
 8013af4:	1c5a      	adds	r2, r3, #1
 8013af6:	6022      	str	r2, [r4, #0]
 8013af8:	7019      	strb	r1, [r3, #0]
 8013afa:	e7cf      	b.n	8013a9c <_puts_r+0x30>
 8013afc:	4622      	mov	r2, r4
 8013afe:	4628      	mov	r0, r5
 8013b00:	f000 f85e 	bl	8013bc0 <__swbuf_r>
 8013b04:	3001      	adds	r0, #1
 8013b06:	d1c9      	bne.n	8013a9c <_puts_r+0x30>
 8013b08:	e7e9      	b.n	8013ade <_puts_r+0x72>
 8013b0a:	6823      	ldr	r3, [r4, #0]
 8013b0c:	200a      	movs	r0, #10
 8013b0e:	1c5a      	adds	r2, r3, #1
 8013b10:	6022      	str	r2, [r4, #0]
 8013b12:	7018      	strb	r0, [r3, #0]
 8013b14:	e7e5      	b.n	8013ae2 <_puts_r+0x76>
 8013b16:	bf00      	nop
 8013b18:	080178c4 	.word	0x080178c4
 8013b1c:	080178e4 	.word	0x080178e4
 8013b20:	080178a4 	.word	0x080178a4

08013b24 <puts>:
 8013b24:	4b02      	ldr	r3, [pc, #8]	; (8013b30 <puts+0xc>)
 8013b26:	4601      	mov	r1, r0
 8013b28:	6818      	ldr	r0, [r3, #0]
 8013b2a:	f7ff bf9f 	b.w	8013a6c <_puts_r>
 8013b2e:	bf00      	nop
 8013b30:	20000024 	.word	0x20000024

08013b34 <_sbrk_r>:
 8013b34:	b538      	push	{r3, r4, r5, lr}
 8013b36:	4c06      	ldr	r4, [pc, #24]	; (8013b50 <_sbrk_r+0x1c>)
 8013b38:	2300      	movs	r3, #0
 8013b3a:	4605      	mov	r5, r0
 8013b3c:	4608      	mov	r0, r1
 8013b3e:	6023      	str	r3, [r4, #0]
 8013b40:	f7f2 f94e 	bl	8005de0 <_sbrk>
 8013b44:	1c43      	adds	r3, r0, #1
 8013b46:	d102      	bne.n	8013b4e <_sbrk_r+0x1a>
 8013b48:	6823      	ldr	r3, [r4, #0]
 8013b4a:	b103      	cbz	r3, 8013b4e <_sbrk_r+0x1a>
 8013b4c:	602b      	str	r3, [r5, #0]
 8013b4e:	bd38      	pop	{r3, r4, r5, pc}
 8013b50:	200060b4 	.word	0x200060b4

08013b54 <siprintf>:
 8013b54:	b40e      	push	{r1, r2, r3}
 8013b56:	b500      	push	{lr}
 8013b58:	b09c      	sub	sp, #112	; 0x70
 8013b5a:	ab1d      	add	r3, sp, #116	; 0x74
 8013b5c:	9002      	str	r0, [sp, #8]
 8013b5e:	9006      	str	r0, [sp, #24]
 8013b60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013b64:	4809      	ldr	r0, [pc, #36]	; (8013b8c <siprintf+0x38>)
 8013b66:	9107      	str	r1, [sp, #28]
 8013b68:	9104      	str	r1, [sp, #16]
 8013b6a:	4909      	ldr	r1, [pc, #36]	; (8013b90 <siprintf+0x3c>)
 8013b6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b70:	9105      	str	r1, [sp, #20]
 8013b72:	6800      	ldr	r0, [r0, #0]
 8013b74:	9301      	str	r3, [sp, #4]
 8013b76:	a902      	add	r1, sp, #8
 8013b78:	f001 fc58 	bl	801542c <_svfiprintf_r>
 8013b7c:	9b02      	ldr	r3, [sp, #8]
 8013b7e:	2200      	movs	r2, #0
 8013b80:	701a      	strb	r2, [r3, #0]
 8013b82:	b01c      	add	sp, #112	; 0x70
 8013b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b88:	b003      	add	sp, #12
 8013b8a:	4770      	bx	lr
 8013b8c:	20000024 	.word	0x20000024
 8013b90:	ffff0208 	.word	0xffff0208

08013b94 <strncpy>:
 8013b94:	b570      	push	{r4, r5, r6, lr}
 8013b96:	3901      	subs	r1, #1
 8013b98:	4604      	mov	r4, r0
 8013b9a:	b902      	cbnz	r2, 8013b9e <strncpy+0xa>
 8013b9c:	bd70      	pop	{r4, r5, r6, pc}
 8013b9e:	4623      	mov	r3, r4
 8013ba0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8013ba4:	f803 5b01 	strb.w	r5, [r3], #1
 8013ba8:	1e56      	subs	r6, r2, #1
 8013baa:	b92d      	cbnz	r5, 8013bb8 <strncpy+0x24>
 8013bac:	4414      	add	r4, r2
 8013bae:	42a3      	cmp	r3, r4
 8013bb0:	d0f4      	beq.n	8013b9c <strncpy+0x8>
 8013bb2:	f803 5b01 	strb.w	r5, [r3], #1
 8013bb6:	e7fa      	b.n	8013bae <strncpy+0x1a>
 8013bb8:	461c      	mov	r4, r3
 8013bba:	4632      	mov	r2, r6
 8013bbc:	e7ed      	b.n	8013b9a <strncpy+0x6>
	...

08013bc0 <__swbuf_r>:
 8013bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bc2:	460e      	mov	r6, r1
 8013bc4:	4614      	mov	r4, r2
 8013bc6:	4605      	mov	r5, r0
 8013bc8:	b118      	cbz	r0, 8013bd2 <__swbuf_r+0x12>
 8013bca:	6983      	ldr	r3, [r0, #24]
 8013bcc:	b90b      	cbnz	r3, 8013bd2 <__swbuf_r+0x12>
 8013bce:	f000 ffeb 	bl	8014ba8 <__sinit>
 8013bd2:	4b21      	ldr	r3, [pc, #132]	; (8013c58 <__swbuf_r+0x98>)
 8013bd4:	429c      	cmp	r4, r3
 8013bd6:	d12a      	bne.n	8013c2e <__swbuf_r+0x6e>
 8013bd8:	686c      	ldr	r4, [r5, #4]
 8013bda:	69a3      	ldr	r3, [r4, #24]
 8013bdc:	60a3      	str	r3, [r4, #8]
 8013bde:	89a3      	ldrh	r3, [r4, #12]
 8013be0:	071a      	lsls	r2, r3, #28
 8013be2:	d52e      	bpl.n	8013c42 <__swbuf_r+0x82>
 8013be4:	6923      	ldr	r3, [r4, #16]
 8013be6:	b363      	cbz	r3, 8013c42 <__swbuf_r+0x82>
 8013be8:	6923      	ldr	r3, [r4, #16]
 8013bea:	6820      	ldr	r0, [r4, #0]
 8013bec:	1ac0      	subs	r0, r0, r3
 8013bee:	6963      	ldr	r3, [r4, #20]
 8013bf0:	b2f6      	uxtb	r6, r6
 8013bf2:	4283      	cmp	r3, r0
 8013bf4:	4637      	mov	r7, r6
 8013bf6:	dc04      	bgt.n	8013c02 <__swbuf_r+0x42>
 8013bf8:	4621      	mov	r1, r4
 8013bfa:	4628      	mov	r0, r5
 8013bfc:	f000 ff6a 	bl	8014ad4 <_fflush_r>
 8013c00:	bb28      	cbnz	r0, 8013c4e <__swbuf_r+0x8e>
 8013c02:	68a3      	ldr	r3, [r4, #8]
 8013c04:	3b01      	subs	r3, #1
 8013c06:	60a3      	str	r3, [r4, #8]
 8013c08:	6823      	ldr	r3, [r4, #0]
 8013c0a:	1c5a      	adds	r2, r3, #1
 8013c0c:	6022      	str	r2, [r4, #0]
 8013c0e:	701e      	strb	r6, [r3, #0]
 8013c10:	6963      	ldr	r3, [r4, #20]
 8013c12:	3001      	adds	r0, #1
 8013c14:	4283      	cmp	r3, r0
 8013c16:	d004      	beq.n	8013c22 <__swbuf_r+0x62>
 8013c18:	89a3      	ldrh	r3, [r4, #12]
 8013c1a:	07db      	lsls	r3, r3, #31
 8013c1c:	d519      	bpl.n	8013c52 <__swbuf_r+0x92>
 8013c1e:	2e0a      	cmp	r6, #10
 8013c20:	d117      	bne.n	8013c52 <__swbuf_r+0x92>
 8013c22:	4621      	mov	r1, r4
 8013c24:	4628      	mov	r0, r5
 8013c26:	f000 ff55 	bl	8014ad4 <_fflush_r>
 8013c2a:	b190      	cbz	r0, 8013c52 <__swbuf_r+0x92>
 8013c2c:	e00f      	b.n	8013c4e <__swbuf_r+0x8e>
 8013c2e:	4b0b      	ldr	r3, [pc, #44]	; (8013c5c <__swbuf_r+0x9c>)
 8013c30:	429c      	cmp	r4, r3
 8013c32:	d101      	bne.n	8013c38 <__swbuf_r+0x78>
 8013c34:	68ac      	ldr	r4, [r5, #8]
 8013c36:	e7d0      	b.n	8013bda <__swbuf_r+0x1a>
 8013c38:	4b09      	ldr	r3, [pc, #36]	; (8013c60 <__swbuf_r+0xa0>)
 8013c3a:	429c      	cmp	r4, r3
 8013c3c:	bf08      	it	eq
 8013c3e:	68ec      	ldreq	r4, [r5, #12]
 8013c40:	e7cb      	b.n	8013bda <__swbuf_r+0x1a>
 8013c42:	4621      	mov	r1, r4
 8013c44:	4628      	mov	r0, r5
 8013c46:	f000 f80d 	bl	8013c64 <__swsetup_r>
 8013c4a:	2800      	cmp	r0, #0
 8013c4c:	d0cc      	beq.n	8013be8 <__swbuf_r+0x28>
 8013c4e:	f04f 37ff 	mov.w	r7, #4294967295
 8013c52:	4638      	mov	r0, r7
 8013c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c56:	bf00      	nop
 8013c58:	080178c4 	.word	0x080178c4
 8013c5c:	080178e4 	.word	0x080178e4
 8013c60:	080178a4 	.word	0x080178a4

08013c64 <__swsetup_r>:
 8013c64:	4b32      	ldr	r3, [pc, #200]	; (8013d30 <__swsetup_r+0xcc>)
 8013c66:	b570      	push	{r4, r5, r6, lr}
 8013c68:	681d      	ldr	r5, [r3, #0]
 8013c6a:	4606      	mov	r6, r0
 8013c6c:	460c      	mov	r4, r1
 8013c6e:	b125      	cbz	r5, 8013c7a <__swsetup_r+0x16>
 8013c70:	69ab      	ldr	r3, [r5, #24]
 8013c72:	b913      	cbnz	r3, 8013c7a <__swsetup_r+0x16>
 8013c74:	4628      	mov	r0, r5
 8013c76:	f000 ff97 	bl	8014ba8 <__sinit>
 8013c7a:	4b2e      	ldr	r3, [pc, #184]	; (8013d34 <__swsetup_r+0xd0>)
 8013c7c:	429c      	cmp	r4, r3
 8013c7e:	d10f      	bne.n	8013ca0 <__swsetup_r+0x3c>
 8013c80:	686c      	ldr	r4, [r5, #4]
 8013c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c86:	b29a      	uxth	r2, r3
 8013c88:	0715      	lsls	r5, r2, #28
 8013c8a:	d42c      	bmi.n	8013ce6 <__swsetup_r+0x82>
 8013c8c:	06d0      	lsls	r0, r2, #27
 8013c8e:	d411      	bmi.n	8013cb4 <__swsetup_r+0x50>
 8013c90:	2209      	movs	r2, #9
 8013c92:	6032      	str	r2, [r6, #0]
 8013c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c98:	81a3      	strh	r3, [r4, #12]
 8013c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8013c9e:	e03e      	b.n	8013d1e <__swsetup_r+0xba>
 8013ca0:	4b25      	ldr	r3, [pc, #148]	; (8013d38 <__swsetup_r+0xd4>)
 8013ca2:	429c      	cmp	r4, r3
 8013ca4:	d101      	bne.n	8013caa <__swsetup_r+0x46>
 8013ca6:	68ac      	ldr	r4, [r5, #8]
 8013ca8:	e7eb      	b.n	8013c82 <__swsetup_r+0x1e>
 8013caa:	4b24      	ldr	r3, [pc, #144]	; (8013d3c <__swsetup_r+0xd8>)
 8013cac:	429c      	cmp	r4, r3
 8013cae:	bf08      	it	eq
 8013cb0:	68ec      	ldreq	r4, [r5, #12]
 8013cb2:	e7e6      	b.n	8013c82 <__swsetup_r+0x1e>
 8013cb4:	0751      	lsls	r1, r2, #29
 8013cb6:	d512      	bpl.n	8013cde <__swsetup_r+0x7a>
 8013cb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013cba:	b141      	cbz	r1, 8013cce <__swsetup_r+0x6a>
 8013cbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013cc0:	4299      	cmp	r1, r3
 8013cc2:	d002      	beq.n	8013cca <__swsetup_r+0x66>
 8013cc4:	4630      	mov	r0, r6
 8013cc6:	f7ff f9b5 	bl	8013034 <_free_r>
 8013cca:	2300      	movs	r3, #0
 8013ccc:	6363      	str	r3, [r4, #52]	; 0x34
 8013cce:	89a3      	ldrh	r3, [r4, #12]
 8013cd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013cd4:	81a3      	strh	r3, [r4, #12]
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	6063      	str	r3, [r4, #4]
 8013cda:	6923      	ldr	r3, [r4, #16]
 8013cdc:	6023      	str	r3, [r4, #0]
 8013cde:	89a3      	ldrh	r3, [r4, #12]
 8013ce0:	f043 0308 	orr.w	r3, r3, #8
 8013ce4:	81a3      	strh	r3, [r4, #12]
 8013ce6:	6923      	ldr	r3, [r4, #16]
 8013ce8:	b94b      	cbnz	r3, 8013cfe <__swsetup_r+0x9a>
 8013cea:	89a3      	ldrh	r3, [r4, #12]
 8013cec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013cf4:	d003      	beq.n	8013cfe <__swsetup_r+0x9a>
 8013cf6:	4621      	mov	r1, r4
 8013cf8:	4630      	mov	r0, r6
 8013cfa:	f001 f811 	bl	8014d20 <__smakebuf_r>
 8013cfe:	89a2      	ldrh	r2, [r4, #12]
 8013d00:	f012 0301 	ands.w	r3, r2, #1
 8013d04:	d00c      	beq.n	8013d20 <__swsetup_r+0xbc>
 8013d06:	2300      	movs	r3, #0
 8013d08:	60a3      	str	r3, [r4, #8]
 8013d0a:	6963      	ldr	r3, [r4, #20]
 8013d0c:	425b      	negs	r3, r3
 8013d0e:	61a3      	str	r3, [r4, #24]
 8013d10:	6923      	ldr	r3, [r4, #16]
 8013d12:	b953      	cbnz	r3, 8013d2a <__swsetup_r+0xc6>
 8013d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d18:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8013d1c:	d1ba      	bne.n	8013c94 <__swsetup_r+0x30>
 8013d1e:	bd70      	pop	{r4, r5, r6, pc}
 8013d20:	0792      	lsls	r2, r2, #30
 8013d22:	bf58      	it	pl
 8013d24:	6963      	ldrpl	r3, [r4, #20]
 8013d26:	60a3      	str	r3, [r4, #8]
 8013d28:	e7f2      	b.n	8013d10 <__swsetup_r+0xac>
 8013d2a:	2000      	movs	r0, #0
 8013d2c:	e7f7      	b.n	8013d1e <__swsetup_r+0xba>
 8013d2e:	bf00      	nop
 8013d30:	20000024 	.word	0x20000024
 8013d34:	080178c4 	.word	0x080178c4
 8013d38:	080178e4 	.word	0x080178e4
 8013d3c:	080178a4 	.word	0x080178a4

08013d40 <quorem>:
 8013d40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d44:	6903      	ldr	r3, [r0, #16]
 8013d46:	690c      	ldr	r4, [r1, #16]
 8013d48:	42a3      	cmp	r3, r4
 8013d4a:	4680      	mov	r8, r0
 8013d4c:	f2c0 8082 	blt.w	8013e54 <quorem+0x114>
 8013d50:	3c01      	subs	r4, #1
 8013d52:	f101 0714 	add.w	r7, r1, #20
 8013d56:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8013d5a:	f100 0614 	add.w	r6, r0, #20
 8013d5e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8013d62:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8013d66:	eb06 030c 	add.w	r3, r6, ip
 8013d6a:	3501      	adds	r5, #1
 8013d6c:	eb07 090c 	add.w	r9, r7, ip
 8013d70:	9301      	str	r3, [sp, #4]
 8013d72:	fbb0 f5f5 	udiv	r5, r0, r5
 8013d76:	b395      	cbz	r5, 8013dde <quorem+0x9e>
 8013d78:	f04f 0a00 	mov.w	sl, #0
 8013d7c:	4638      	mov	r0, r7
 8013d7e:	46b6      	mov	lr, r6
 8013d80:	46d3      	mov	fp, sl
 8013d82:	f850 2b04 	ldr.w	r2, [r0], #4
 8013d86:	b293      	uxth	r3, r2
 8013d88:	fb05 a303 	mla	r3, r5, r3, sl
 8013d8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013d90:	b29b      	uxth	r3, r3
 8013d92:	ebab 0303 	sub.w	r3, fp, r3
 8013d96:	0c12      	lsrs	r2, r2, #16
 8013d98:	f8de b000 	ldr.w	fp, [lr]
 8013d9c:	fb05 a202 	mla	r2, r5, r2, sl
 8013da0:	fa13 f38b 	uxtah	r3, r3, fp
 8013da4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8013da8:	fa1f fb82 	uxth.w	fp, r2
 8013dac:	f8de 2000 	ldr.w	r2, [lr]
 8013db0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8013db4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013db8:	b29b      	uxth	r3, r3
 8013dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013dbe:	4581      	cmp	r9, r0
 8013dc0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8013dc4:	f84e 3b04 	str.w	r3, [lr], #4
 8013dc8:	d2db      	bcs.n	8013d82 <quorem+0x42>
 8013dca:	f856 300c 	ldr.w	r3, [r6, ip]
 8013dce:	b933      	cbnz	r3, 8013dde <quorem+0x9e>
 8013dd0:	9b01      	ldr	r3, [sp, #4]
 8013dd2:	3b04      	subs	r3, #4
 8013dd4:	429e      	cmp	r6, r3
 8013dd6:	461a      	mov	r2, r3
 8013dd8:	d330      	bcc.n	8013e3c <quorem+0xfc>
 8013dda:	f8c8 4010 	str.w	r4, [r8, #16]
 8013dde:	4640      	mov	r0, r8
 8013de0:	f001 f9f6 	bl	80151d0 <__mcmp>
 8013de4:	2800      	cmp	r0, #0
 8013de6:	db25      	blt.n	8013e34 <quorem+0xf4>
 8013de8:	3501      	adds	r5, #1
 8013dea:	4630      	mov	r0, r6
 8013dec:	f04f 0c00 	mov.w	ip, #0
 8013df0:	f857 2b04 	ldr.w	r2, [r7], #4
 8013df4:	f8d0 e000 	ldr.w	lr, [r0]
 8013df8:	b293      	uxth	r3, r2
 8013dfa:	ebac 0303 	sub.w	r3, ip, r3
 8013dfe:	0c12      	lsrs	r2, r2, #16
 8013e00:	fa13 f38e 	uxtah	r3, r3, lr
 8013e04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013e08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013e0c:	b29b      	uxth	r3, r3
 8013e0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013e12:	45b9      	cmp	r9, r7
 8013e14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013e18:	f840 3b04 	str.w	r3, [r0], #4
 8013e1c:	d2e8      	bcs.n	8013df0 <quorem+0xb0>
 8013e1e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8013e22:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8013e26:	b92a      	cbnz	r2, 8013e34 <quorem+0xf4>
 8013e28:	3b04      	subs	r3, #4
 8013e2a:	429e      	cmp	r6, r3
 8013e2c:	461a      	mov	r2, r3
 8013e2e:	d30b      	bcc.n	8013e48 <quorem+0x108>
 8013e30:	f8c8 4010 	str.w	r4, [r8, #16]
 8013e34:	4628      	mov	r0, r5
 8013e36:	b003      	add	sp, #12
 8013e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e3c:	6812      	ldr	r2, [r2, #0]
 8013e3e:	3b04      	subs	r3, #4
 8013e40:	2a00      	cmp	r2, #0
 8013e42:	d1ca      	bne.n	8013dda <quorem+0x9a>
 8013e44:	3c01      	subs	r4, #1
 8013e46:	e7c5      	b.n	8013dd4 <quorem+0x94>
 8013e48:	6812      	ldr	r2, [r2, #0]
 8013e4a:	3b04      	subs	r3, #4
 8013e4c:	2a00      	cmp	r2, #0
 8013e4e:	d1ef      	bne.n	8013e30 <quorem+0xf0>
 8013e50:	3c01      	subs	r4, #1
 8013e52:	e7ea      	b.n	8013e2a <quorem+0xea>
 8013e54:	2000      	movs	r0, #0
 8013e56:	e7ee      	b.n	8013e36 <quorem+0xf6>

08013e58 <_dtoa_r>:
 8013e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e5c:	ec57 6b10 	vmov	r6, r7, d0
 8013e60:	b097      	sub	sp, #92	; 0x5c
 8013e62:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013e64:	9106      	str	r1, [sp, #24]
 8013e66:	4604      	mov	r4, r0
 8013e68:	920b      	str	r2, [sp, #44]	; 0x2c
 8013e6a:	9312      	str	r3, [sp, #72]	; 0x48
 8013e6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013e70:	e9cd 6700 	strd	r6, r7, [sp]
 8013e74:	b93d      	cbnz	r5, 8013e86 <_dtoa_r+0x2e>
 8013e76:	2010      	movs	r0, #16
 8013e78:	f7ff f8c0 	bl	8012ffc <malloc>
 8013e7c:	6260      	str	r0, [r4, #36]	; 0x24
 8013e7e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013e82:	6005      	str	r5, [r0, #0]
 8013e84:	60c5      	str	r5, [r0, #12]
 8013e86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e88:	6819      	ldr	r1, [r3, #0]
 8013e8a:	b151      	cbz	r1, 8013ea2 <_dtoa_r+0x4a>
 8013e8c:	685a      	ldr	r2, [r3, #4]
 8013e8e:	604a      	str	r2, [r1, #4]
 8013e90:	2301      	movs	r3, #1
 8013e92:	4093      	lsls	r3, r2
 8013e94:	608b      	str	r3, [r1, #8]
 8013e96:	4620      	mov	r0, r4
 8013e98:	f000 ffb8 	bl	8014e0c <_Bfree>
 8013e9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	601a      	str	r2, [r3, #0]
 8013ea2:	1e3b      	subs	r3, r7, #0
 8013ea4:	bfbb      	ittet	lt
 8013ea6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013eaa:	9301      	strlt	r3, [sp, #4]
 8013eac:	2300      	movge	r3, #0
 8013eae:	2201      	movlt	r2, #1
 8013eb0:	bfac      	ite	ge
 8013eb2:	f8c8 3000 	strge.w	r3, [r8]
 8013eb6:	f8c8 2000 	strlt.w	r2, [r8]
 8013eba:	4baf      	ldr	r3, [pc, #700]	; (8014178 <_dtoa_r+0x320>)
 8013ebc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013ec0:	ea33 0308 	bics.w	r3, r3, r8
 8013ec4:	d114      	bne.n	8013ef0 <_dtoa_r+0x98>
 8013ec6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013ec8:	f242 730f 	movw	r3, #9999	; 0x270f
 8013ecc:	6013      	str	r3, [r2, #0]
 8013ece:	9b00      	ldr	r3, [sp, #0]
 8013ed0:	b923      	cbnz	r3, 8013edc <_dtoa_r+0x84>
 8013ed2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8013ed6:	2800      	cmp	r0, #0
 8013ed8:	f000 8542 	beq.w	8014960 <_dtoa_r+0xb08>
 8013edc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013ede:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801418c <_dtoa_r+0x334>
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	f000 8544 	beq.w	8014970 <_dtoa_r+0xb18>
 8013ee8:	f10b 0303 	add.w	r3, fp, #3
 8013eec:	f000 bd3e 	b.w	801496c <_dtoa_r+0xb14>
 8013ef0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013ef4:	2200      	movs	r2, #0
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	4630      	mov	r0, r6
 8013efa:	4639      	mov	r1, r7
 8013efc:	f7ec fdbc 	bl	8000a78 <__aeabi_dcmpeq>
 8013f00:	4681      	mov	r9, r0
 8013f02:	b168      	cbz	r0, 8013f20 <_dtoa_r+0xc8>
 8013f04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013f06:	2301      	movs	r3, #1
 8013f08:	6013      	str	r3, [r2, #0]
 8013f0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	f000 8524 	beq.w	801495a <_dtoa_r+0xb02>
 8013f12:	4b9a      	ldr	r3, [pc, #616]	; (801417c <_dtoa_r+0x324>)
 8013f14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013f16:	f103 3bff 	add.w	fp, r3, #4294967295
 8013f1a:	6013      	str	r3, [r2, #0]
 8013f1c:	f000 bd28 	b.w	8014970 <_dtoa_r+0xb18>
 8013f20:	aa14      	add	r2, sp, #80	; 0x50
 8013f22:	a915      	add	r1, sp, #84	; 0x54
 8013f24:	ec47 6b10 	vmov	d0, r6, r7
 8013f28:	4620      	mov	r0, r4
 8013f2a:	f001 f9c8 	bl	80152be <__d2b>
 8013f2e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8013f32:	9004      	str	r0, [sp, #16]
 8013f34:	2d00      	cmp	r5, #0
 8013f36:	d07c      	beq.n	8014032 <_dtoa_r+0x1da>
 8013f38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013f3c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8013f40:	46b2      	mov	sl, r6
 8013f42:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8013f46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013f4a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8013f4e:	2200      	movs	r2, #0
 8013f50:	4b8b      	ldr	r3, [pc, #556]	; (8014180 <_dtoa_r+0x328>)
 8013f52:	4650      	mov	r0, sl
 8013f54:	4659      	mov	r1, fp
 8013f56:	f7ec f96f 	bl	8000238 <__aeabi_dsub>
 8013f5a:	a381      	add	r3, pc, #516	; (adr r3, 8014160 <_dtoa_r+0x308>)
 8013f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f60:	f7ec fb22 	bl	80005a8 <__aeabi_dmul>
 8013f64:	a380      	add	r3, pc, #512	; (adr r3, 8014168 <_dtoa_r+0x310>)
 8013f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f6a:	f7ec f967 	bl	800023c <__adddf3>
 8013f6e:	4606      	mov	r6, r0
 8013f70:	4628      	mov	r0, r5
 8013f72:	460f      	mov	r7, r1
 8013f74:	f7ec faae 	bl	80004d4 <__aeabi_i2d>
 8013f78:	a37d      	add	r3, pc, #500	; (adr r3, 8014170 <_dtoa_r+0x318>)
 8013f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f7e:	f7ec fb13 	bl	80005a8 <__aeabi_dmul>
 8013f82:	4602      	mov	r2, r0
 8013f84:	460b      	mov	r3, r1
 8013f86:	4630      	mov	r0, r6
 8013f88:	4639      	mov	r1, r7
 8013f8a:	f7ec f957 	bl	800023c <__adddf3>
 8013f8e:	4606      	mov	r6, r0
 8013f90:	460f      	mov	r7, r1
 8013f92:	f7ec fdb9 	bl	8000b08 <__aeabi_d2iz>
 8013f96:	2200      	movs	r2, #0
 8013f98:	4682      	mov	sl, r0
 8013f9a:	2300      	movs	r3, #0
 8013f9c:	4630      	mov	r0, r6
 8013f9e:	4639      	mov	r1, r7
 8013fa0:	f7ec fd74 	bl	8000a8c <__aeabi_dcmplt>
 8013fa4:	b148      	cbz	r0, 8013fba <_dtoa_r+0x162>
 8013fa6:	4650      	mov	r0, sl
 8013fa8:	f7ec fa94 	bl	80004d4 <__aeabi_i2d>
 8013fac:	4632      	mov	r2, r6
 8013fae:	463b      	mov	r3, r7
 8013fb0:	f7ec fd62 	bl	8000a78 <__aeabi_dcmpeq>
 8013fb4:	b908      	cbnz	r0, 8013fba <_dtoa_r+0x162>
 8013fb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013fba:	f1ba 0f16 	cmp.w	sl, #22
 8013fbe:	d859      	bhi.n	8014074 <_dtoa_r+0x21c>
 8013fc0:	4970      	ldr	r1, [pc, #448]	; (8014184 <_dtoa_r+0x32c>)
 8013fc2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8013fc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013fca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fce:	f7ec fd7b 	bl	8000ac8 <__aeabi_dcmpgt>
 8013fd2:	2800      	cmp	r0, #0
 8013fd4:	d050      	beq.n	8014078 <_dtoa_r+0x220>
 8013fd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013fda:	2300      	movs	r3, #0
 8013fdc:	930f      	str	r3, [sp, #60]	; 0x3c
 8013fde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013fe0:	1b5d      	subs	r5, r3, r5
 8013fe2:	f1b5 0801 	subs.w	r8, r5, #1
 8013fe6:	bf49      	itett	mi
 8013fe8:	f1c5 0301 	rsbmi	r3, r5, #1
 8013fec:	2300      	movpl	r3, #0
 8013fee:	9305      	strmi	r3, [sp, #20]
 8013ff0:	f04f 0800 	movmi.w	r8, #0
 8013ff4:	bf58      	it	pl
 8013ff6:	9305      	strpl	r3, [sp, #20]
 8013ff8:	f1ba 0f00 	cmp.w	sl, #0
 8013ffc:	db3e      	blt.n	801407c <_dtoa_r+0x224>
 8013ffe:	2300      	movs	r3, #0
 8014000:	44d0      	add	r8, sl
 8014002:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8014006:	9307      	str	r3, [sp, #28]
 8014008:	9b06      	ldr	r3, [sp, #24]
 801400a:	2b09      	cmp	r3, #9
 801400c:	f200 8090 	bhi.w	8014130 <_dtoa_r+0x2d8>
 8014010:	2b05      	cmp	r3, #5
 8014012:	bfc4      	itt	gt
 8014014:	3b04      	subgt	r3, #4
 8014016:	9306      	strgt	r3, [sp, #24]
 8014018:	9b06      	ldr	r3, [sp, #24]
 801401a:	f1a3 0302 	sub.w	r3, r3, #2
 801401e:	bfcc      	ite	gt
 8014020:	2500      	movgt	r5, #0
 8014022:	2501      	movle	r5, #1
 8014024:	2b03      	cmp	r3, #3
 8014026:	f200 808f 	bhi.w	8014148 <_dtoa_r+0x2f0>
 801402a:	e8df f003 	tbb	[pc, r3]
 801402e:	7f7d      	.short	0x7f7d
 8014030:	7131      	.short	0x7131
 8014032:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8014036:	441d      	add	r5, r3
 8014038:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801403c:	2820      	cmp	r0, #32
 801403e:	dd13      	ble.n	8014068 <_dtoa_r+0x210>
 8014040:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8014044:	9b00      	ldr	r3, [sp, #0]
 8014046:	fa08 f800 	lsl.w	r8, r8, r0
 801404a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801404e:	fa23 f000 	lsr.w	r0, r3, r0
 8014052:	ea48 0000 	orr.w	r0, r8, r0
 8014056:	f7ec fa2d 	bl	80004b4 <__aeabi_ui2d>
 801405a:	2301      	movs	r3, #1
 801405c:	4682      	mov	sl, r0
 801405e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8014062:	3d01      	subs	r5, #1
 8014064:	9313      	str	r3, [sp, #76]	; 0x4c
 8014066:	e772      	b.n	8013f4e <_dtoa_r+0xf6>
 8014068:	9b00      	ldr	r3, [sp, #0]
 801406a:	f1c0 0020 	rsb	r0, r0, #32
 801406e:	fa03 f000 	lsl.w	r0, r3, r0
 8014072:	e7f0      	b.n	8014056 <_dtoa_r+0x1fe>
 8014074:	2301      	movs	r3, #1
 8014076:	e7b1      	b.n	8013fdc <_dtoa_r+0x184>
 8014078:	900f      	str	r0, [sp, #60]	; 0x3c
 801407a:	e7b0      	b.n	8013fde <_dtoa_r+0x186>
 801407c:	9b05      	ldr	r3, [sp, #20]
 801407e:	eba3 030a 	sub.w	r3, r3, sl
 8014082:	9305      	str	r3, [sp, #20]
 8014084:	f1ca 0300 	rsb	r3, sl, #0
 8014088:	9307      	str	r3, [sp, #28]
 801408a:	2300      	movs	r3, #0
 801408c:	930e      	str	r3, [sp, #56]	; 0x38
 801408e:	e7bb      	b.n	8014008 <_dtoa_r+0x1b0>
 8014090:	2301      	movs	r3, #1
 8014092:	930a      	str	r3, [sp, #40]	; 0x28
 8014094:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014096:	2b00      	cmp	r3, #0
 8014098:	dd59      	ble.n	801414e <_dtoa_r+0x2f6>
 801409a:	9302      	str	r3, [sp, #8]
 801409c:	4699      	mov	r9, r3
 801409e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80140a0:	2200      	movs	r2, #0
 80140a2:	6072      	str	r2, [r6, #4]
 80140a4:	2204      	movs	r2, #4
 80140a6:	f102 0014 	add.w	r0, r2, #20
 80140aa:	4298      	cmp	r0, r3
 80140ac:	6871      	ldr	r1, [r6, #4]
 80140ae:	d953      	bls.n	8014158 <_dtoa_r+0x300>
 80140b0:	4620      	mov	r0, r4
 80140b2:	f000 fe77 	bl	8014da4 <_Balloc>
 80140b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80140b8:	6030      	str	r0, [r6, #0]
 80140ba:	f1b9 0f0e 	cmp.w	r9, #14
 80140be:	f8d3 b000 	ldr.w	fp, [r3]
 80140c2:	f200 80e6 	bhi.w	8014292 <_dtoa_r+0x43a>
 80140c6:	2d00      	cmp	r5, #0
 80140c8:	f000 80e3 	beq.w	8014292 <_dtoa_r+0x43a>
 80140cc:	ed9d 7b00 	vldr	d7, [sp]
 80140d0:	f1ba 0f00 	cmp.w	sl, #0
 80140d4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80140d8:	dd74      	ble.n	80141c4 <_dtoa_r+0x36c>
 80140da:	4a2a      	ldr	r2, [pc, #168]	; (8014184 <_dtoa_r+0x32c>)
 80140dc:	f00a 030f 	and.w	r3, sl, #15
 80140e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80140e4:	ed93 7b00 	vldr	d7, [r3]
 80140e8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80140ec:	06f0      	lsls	r0, r6, #27
 80140ee:	ed8d 7b08 	vstr	d7, [sp, #32]
 80140f2:	d565      	bpl.n	80141c0 <_dtoa_r+0x368>
 80140f4:	4b24      	ldr	r3, [pc, #144]	; (8014188 <_dtoa_r+0x330>)
 80140f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80140fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80140fe:	f7ec fb7d 	bl	80007fc <__aeabi_ddiv>
 8014102:	e9cd 0100 	strd	r0, r1, [sp]
 8014106:	f006 060f 	and.w	r6, r6, #15
 801410a:	2503      	movs	r5, #3
 801410c:	4f1e      	ldr	r7, [pc, #120]	; (8014188 <_dtoa_r+0x330>)
 801410e:	e04c      	b.n	80141aa <_dtoa_r+0x352>
 8014110:	2301      	movs	r3, #1
 8014112:	930a      	str	r3, [sp, #40]	; 0x28
 8014114:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014116:	4453      	add	r3, sl
 8014118:	f103 0901 	add.w	r9, r3, #1
 801411c:	9302      	str	r3, [sp, #8]
 801411e:	464b      	mov	r3, r9
 8014120:	2b01      	cmp	r3, #1
 8014122:	bfb8      	it	lt
 8014124:	2301      	movlt	r3, #1
 8014126:	e7ba      	b.n	801409e <_dtoa_r+0x246>
 8014128:	2300      	movs	r3, #0
 801412a:	e7b2      	b.n	8014092 <_dtoa_r+0x23a>
 801412c:	2300      	movs	r3, #0
 801412e:	e7f0      	b.n	8014112 <_dtoa_r+0x2ba>
 8014130:	2501      	movs	r5, #1
 8014132:	2300      	movs	r3, #0
 8014134:	9306      	str	r3, [sp, #24]
 8014136:	950a      	str	r5, [sp, #40]	; 0x28
 8014138:	f04f 33ff 	mov.w	r3, #4294967295
 801413c:	9302      	str	r3, [sp, #8]
 801413e:	4699      	mov	r9, r3
 8014140:	2200      	movs	r2, #0
 8014142:	2312      	movs	r3, #18
 8014144:	920b      	str	r2, [sp, #44]	; 0x2c
 8014146:	e7aa      	b.n	801409e <_dtoa_r+0x246>
 8014148:	2301      	movs	r3, #1
 801414a:	930a      	str	r3, [sp, #40]	; 0x28
 801414c:	e7f4      	b.n	8014138 <_dtoa_r+0x2e0>
 801414e:	2301      	movs	r3, #1
 8014150:	9302      	str	r3, [sp, #8]
 8014152:	4699      	mov	r9, r3
 8014154:	461a      	mov	r2, r3
 8014156:	e7f5      	b.n	8014144 <_dtoa_r+0x2ec>
 8014158:	3101      	adds	r1, #1
 801415a:	6071      	str	r1, [r6, #4]
 801415c:	0052      	lsls	r2, r2, #1
 801415e:	e7a2      	b.n	80140a6 <_dtoa_r+0x24e>
 8014160:	636f4361 	.word	0x636f4361
 8014164:	3fd287a7 	.word	0x3fd287a7
 8014168:	8b60c8b3 	.word	0x8b60c8b3
 801416c:	3fc68a28 	.word	0x3fc68a28
 8014170:	509f79fb 	.word	0x509f79fb
 8014174:	3fd34413 	.word	0x3fd34413
 8014178:	7ff00000 	.word	0x7ff00000
 801417c:	08017871 	.word	0x08017871
 8014180:	3ff80000 	.word	0x3ff80000
 8014184:	08017930 	.word	0x08017930
 8014188:	08017908 	.word	0x08017908
 801418c:	0801789d 	.word	0x0801789d
 8014190:	07f1      	lsls	r1, r6, #31
 8014192:	d508      	bpl.n	80141a6 <_dtoa_r+0x34e>
 8014194:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014198:	e9d7 2300 	ldrd	r2, r3, [r7]
 801419c:	f7ec fa04 	bl	80005a8 <__aeabi_dmul>
 80141a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80141a4:	3501      	adds	r5, #1
 80141a6:	1076      	asrs	r6, r6, #1
 80141a8:	3708      	adds	r7, #8
 80141aa:	2e00      	cmp	r6, #0
 80141ac:	d1f0      	bne.n	8014190 <_dtoa_r+0x338>
 80141ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80141b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80141b6:	f7ec fb21 	bl	80007fc <__aeabi_ddiv>
 80141ba:	e9cd 0100 	strd	r0, r1, [sp]
 80141be:	e01a      	b.n	80141f6 <_dtoa_r+0x39e>
 80141c0:	2502      	movs	r5, #2
 80141c2:	e7a3      	b.n	801410c <_dtoa_r+0x2b4>
 80141c4:	f000 80a0 	beq.w	8014308 <_dtoa_r+0x4b0>
 80141c8:	f1ca 0600 	rsb	r6, sl, #0
 80141cc:	4b9f      	ldr	r3, [pc, #636]	; (801444c <_dtoa_r+0x5f4>)
 80141ce:	4fa0      	ldr	r7, [pc, #640]	; (8014450 <_dtoa_r+0x5f8>)
 80141d0:	f006 020f 	and.w	r2, r6, #15
 80141d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80141d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80141e0:	f7ec f9e2 	bl	80005a8 <__aeabi_dmul>
 80141e4:	e9cd 0100 	strd	r0, r1, [sp]
 80141e8:	1136      	asrs	r6, r6, #4
 80141ea:	2300      	movs	r3, #0
 80141ec:	2502      	movs	r5, #2
 80141ee:	2e00      	cmp	r6, #0
 80141f0:	d17f      	bne.n	80142f2 <_dtoa_r+0x49a>
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d1e1      	bne.n	80141ba <_dtoa_r+0x362>
 80141f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	f000 8087 	beq.w	801430c <_dtoa_r+0x4b4>
 80141fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014202:	2200      	movs	r2, #0
 8014204:	4b93      	ldr	r3, [pc, #588]	; (8014454 <_dtoa_r+0x5fc>)
 8014206:	4630      	mov	r0, r6
 8014208:	4639      	mov	r1, r7
 801420a:	f7ec fc3f 	bl	8000a8c <__aeabi_dcmplt>
 801420e:	2800      	cmp	r0, #0
 8014210:	d07c      	beq.n	801430c <_dtoa_r+0x4b4>
 8014212:	f1b9 0f00 	cmp.w	r9, #0
 8014216:	d079      	beq.n	801430c <_dtoa_r+0x4b4>
 8014218:	9b02      	ldr	r3, [sp, #8]
 801421a:	2b00      	cmp	r3, #0
 801421c:	dd35      	ble.n	801428a <_dtoa_r+0x432>
 801421e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014222:	9308      	str	r3, [sp, #32]
 8014224:	4639      	mov	r1, r7
 8014226:	2200      	movs	r2, #0
 8014228:	4b8b      	ldr	r3, [pc, #556]	; (8014458 <_dtoa_r+0x600>)
 801422a:	4630      	mov	r0, r6
 801422c:	f7ec f9bc 	bl	80005a8 <__aeabi_dmul>
 8014230:	e9cd 0100 	strd	r0, r1, [sp]
 8014234:	9f02      	ldr	r7, [sp, #8]
 8014236:	3501      	adds	r5, #1
 8014238:	4628      	mov	r0, r5
 801423a:	f7ec f94b 	bl	80004d4 <__aeabi_i2d>
 801423e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014242:	f7ec f9b1 	bl	80005a8 <__aeabi_dmul>
 8014246:	2200      	movs	r2, #0
 8014248:	4b84      	ldr	r3, [pc, #528]	; (801445c <_dtoa_r+0x604>)
 801424a:	f7eb fff7 	bl	800023c <__adddf3>
 801424e:	4605      	mov	r5, r0
 8014250:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8014254:	2f00      	cmp	r7, #0
 8014256:	d15d      	bne.n	8014314 <_dtoa_r+0x4bc>
 8014258:	2200      	movs	r2, #0
 801425a:	4b81      	ldr	r3, [pc, #516]	; (8014460 <_dtoa_r+0x608>)
 801425c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014260:	f7eb ffea 	bl	8000238 <__aeabi_dsub>
 8014264:	462a      	mov	r2, r5
 8014266:	4633      	mov	r3, r6
 8014268:	e9cd 0100 	strd	r0, r1, [sp]
 801426c:	f7ec fc2c 	bl	8000ac8 <__aeabi_dcmpgt>
 8014270:	2800      	cmp	r0, #0
 8014272:	f040 8288 	bne.w	8014786 <_dtoa_r+0x92e>
 8014276:	462a      	mov	r2, r5
 8014278:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801427c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014280:	f7ec fc04 	bl	8000a8c <__aeabi_dcmplt>
 8014284:	2800      	cmp	r0, #0
 8014286:	f040 827c 	bne.w	8014782 <_dtoa_r+0x92a>
 801428a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801428e:	e9cd 2300 	strd	r2, r3, [sp]
 8014292:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014294:	2b00      	cmp	r3, #0
 8014296:	f2c0 8150 	blt.w	801453a <_dtoa_r+0x6e2>
 801429a:	f1ba 0f0e 	cmp.w	sl, #14
 801429e:	f300 814c 	bgt.w	801453a <_dtoa_r+0x6e2>
 80142a2:	4b6a      	ldr	r3, [pc, #424]	; (801444c <_dtoa_r+0x5f4>)
 80142a4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80142a8:	ed93 7b00 	vldr	d7, [r3]
 80142ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80142b4:	f280 80d8 	bge.w	8014468 <_dtoa_r+0x610>
 80142b8:	f1b9 0f00 	cmp.w	r9, #0
 80142bc:	f300 80d4 	bgt.w	8014468 <_dtoa_r+0x610>
 80142c0:	f040 825e 	bne.w	8014780 <_dtoa_r+0x928>
 80142c4:	2200      	movs	r2, #0
 80142c6:	4b66      	ldr	r3, [pc, #408]	; (8014460 <_dtoa_r+0x608>)
 80142c8:	ec51 0b17 	vmov	r0, r1, d7
 80142cc:	f7ec f96c 	bl	80005a8 <__aeabi_dmul>
 80142d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80142d4:	f7ec fbee 	bl	8000ab4 <__aeabi_dcmpge>
 80142d8:	464f      	mov	r7, r9
 80142da:	464e      	mov	r6, r9
 80142dc:	2800      	cmp	r0, #0
 80142de:	f040 8234 	bne.w	801474a <_dtoa_r+0x8f2>
 80142e2:	2331      	movs	r3, #49	; 0x31
 80142e4:	f10b 0501 	add.w	r5, fp, #1
 80142e8:	f88b 3000 	strb.w	r3, [fp]
 80142ec:	f10a 0a01 	add.w	sl, sl, #1
 80142f0:	e22f      	b.n	8014752 <_dtoa_r+0x8fa>
 80142f2:	07f2      	lsls	r2, r6, #31
 80142f4:	d505      	bpl.n	8014302 <_dtoa_r+0x4aa>
 80142f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80142fa:	f7ec f955 	bl	80005a8 <__aeabi_dmul>
 80142fe:	3501      	adds	r5, #1
 8014300:	2301      	movs	r3, #1
 8014302:	1076      	asrs	r6, r6, #1
 8014304:	3708      	adds	r7, #8
 8014306:	e772      	b.n	80141ee <_dtoa_r+0x396>
 8014308:	2502      	movs	r5, #2
 801430a:	e774      	b.n	80141f6 <_dtoa_r+0x39e>
 801430c:	f8cd a020 	str.w	sl, [sp, #32]
 8014310:	464f      	mov	r7, r9
 8014312:	e791      	b.n	8014238 <_dtoa_r+0x3e0>
 8014314:	4b4d      	ldr	r3, [pc, #308]	; (801444c <_dtoa_r+0x5f4>)
 8014316:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801431a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801431e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014320:	2b00      	cmp	r3, #0
 8014322:	d047      	beq.n	80143b4 <_dtoa_r+0x55c>
 8014324:	4602      	mov	r2, r0
 8014326:	460b      	mov	r3, r1
 8014328:	2000      	movs	r0, #0
 801432a:	494e      	ldr	r1, [pc, #312]	; (8014464 <_dtoa_r+0x60c>)
 801432c:	f7ec fa66 	bl	80007fc <__aeabi_ddiv>
 8014330:	462a      	mov	r2, r5
 8014332:	4633      	mov	r3, r6
 8014334:	f7eb ff80 	bl	8000238 <__aeabi_dsub>
 8014338:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801433c:	465d      	mov	r5, fp
 801433e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014342:	f7ec fbe1 	bl	8000b08 <__aeabi_d2iz>
 8014346:	4606      	mov	r6, r0
 8014348:	f7ec f8c4 	bl	80004d4 <__aeabi_i2d>
 801434c:	4602      	mov	r2, r0
 801434e:	460b      	mov	r3, r1
 8014350:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014354:	f7eb ff70 	bl	8000238 <__aeabi_dsub>
 8014358:	3630      	adds	r6, #48	; 0x30
 801435a:	f805 6b01 	strb.w	r6, [r5], #1
 801435e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014362:	e9cd 0100 	strd	r0, r1, [sp]
 8014366:	f7ec fb91 	bl	8000a8c <__aeabi_dcmplt>
 801436a:	2800      	cmp	r0, #0
 801436c:	d163      	bne.n	8014436 <_dtoa_r+0x5de>
 801436e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014372:	2000      	movs	r0, #0
 8014374:	4937      	ldr	r1, [pc, #220]	; (8014454 <_dtoa_r+0x5fc>)
 8014376:	f7eb ff5f 	bl	8000238 <__aeabi_dsub>
 801437a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801437e:	f7ec fb85 	bl	8000a8c <__aeabi_dcmplt>
 8014382:	2800      	cmp	r0, #0
 8014384:	f040 80b7 	bne.w	80144f6 <_dtoa_r+0x69e>
 8014388:	eba5 030b 	sub.w	r3, r5, fp
 801438c:	429f      	cmp	r7, r3
 801438e:	f77f af7c 	ble.w	801428a <_dtoa_r+0x432>
 8014392:	2200      	movs	r2, #0
 8014394:	4b30      	ldr	r3, [pc, #192]	; (8014458 <_dtoa_r+0x600>)
 8014396:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801439a:	f7ec f905 	bl	80005a8 <__aeabi_dmul>
 801439e:	2200      	movs	r2, #0
 80143a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80143a4:	4b2c      	ldr	r3, [pc, #176]	; (8014458 <_dtoa_r+0x600>)
 80143a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80143aa:	f7ec f8fd 	bl	80005a8 <__aeabi_dmul>
 80143ae:	e9cd 0100 	strd	r0, r1, [sp]
 80143b2:	e7c4      	b.n	801433e <_dtoa_r+0x4e6>
 80143b4:	462a      	mov	r2, r5
 80143b6:	4633      	mov	r3, r6
 80143b8:	f7ec f8f6 	bl	80005a8 <__aeabi_dmul>
 80143bc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80143c0:	eb0b 0507 	add.w	r5, fp, r7
 80143c4:	465e      	mov	r6, fp
 80143c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80143ca:	f7ec fb9d 	bl	8000b08 <__aeabi_d2iz>
 80143ce:	4607      	mov	r7, r0
 80143d0:	f7ec f880 	bl	80004d4 <__aeabi_i2d>
 80143d4:	3730      	adds	r7, #48	; 0x30
 80143d6:	4602      	mov	r2, r0
 80143d8:	460b      	mov	r3, r1
 80143da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80143de:	f7eb ff2b 	bl	8000238 <__aeabi_dsub>
 80143e2:	f806 7b01 	strb.w	r7, [r6], #1
 80143e6:	42ae      	cmp	r6, r5
 80143e8:	e9cd 0100 	strd	r0, r1, [sp]
 80143ec:	f04f 0200 	mov.w	r2, #0
 80143f0:	d126      	bne.n	8014440 <_dtoa_r+0x5e8>
 80143f2:	4b1c      	ldr	r3, [pc, #112]	; (8014464 <_dtoa_r+0x60c>)
 80143f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80143f8:	f7eb ff20 	bl	800023c <__adddf3>
 80143fc:	4602      	mov	r2, r0
 80143fe:	460b      	mov	r3, r1
 8014400:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014404:	f7ec fb60 	bl	8000ac8 <__aeabi_dcmpgt>
 8014408:	2800      	cmp	r0, #0
 801440a:	d174      	bne.n	80144f6 <_dtoa_r+0x69e>
 801440c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014410:	2000      	movs	r0, #0
 8014412:	4914      	ldr	r1, [pc, #80]	; (8014464 <_dtoa_r+0x60c>)
 8014414:	f7eb ff10 	bl	8000238 <__aeabi_dsub>
 8014418:	4602      	mov	r2, r0
 801441a:	460b      	mov	r3, r1
 801441c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014420:	f7ec fb34 	bl	8000a8c <__aeabi_dcmplt>
 8014424:	2800      	cmp	r0, #0
 8014426:	f43f af30 	beq.w	801428a <_dtoa_r+0x432>
 801442a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801442e:	2b30      	cmp	r3, #48	; 0x30
 8014430:	f105 32ff 	add.w	r2, r5, #4294967295
 8014434:	d002      	beq.n	801443c <_dtoa_r+0x5e4>
 8014436:	f8dd a020 	ldr.w	sl, [sp, #32]
 801443a:	e04a      	b.n	80144d2 <_dtoa_r+0x67a>
 801443c:	4615      	mov	r5, r2
 801443e:	e7f4      	b.n	801442a <_dtoa_r+0x5d2>
 8014440:	4b05      	ldr	r3, [pc, #20]	; (8014458 <_dtoa_r+0x600>)
 8014442:	f7ec f8b1 	bl	80005a8 <__aeabi_dmul>
 8014446:	e9cd 0100 	strd	r0, r1, [sp]
 801444a:	e7bc      	b.n	80143c6 <_dtoa_r+0x56e>
 801444c:	08017930 	.word	0x08017930
 8014450:	08017908 	.word	0x08017908
 8014454:	3ff00000 	.word	0x3ff00000
 8014458:	40240000 	.word	0x40240000
 801445c:	401c0000 	.word	0x401c0000
 8014460:	40140000 	.word	0x40140000
 8014464:	3fe00000 	.word	0x3fe00000
 8014468:	e9dd 6700 	ldrd	r6, r7, [sp]
 801446c:	465d      	mov	r5, fp
 801446e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014472:	4630      	mov	r0, r6
 8014474:	4639      	mov	r1, r7
 8014476:	f7ec f9c1 	bl	80007fc <__aeabi_ddiv>
 801447a:	f7ec fb45 	bl	8000b08 <__aeabi_d2iz>
 801447e:	4680      	mov	r8, r0
 8014480:	f7ec f828 	bl	80004d4 <__aeabi_i2d>
 8014484:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014488:	f7ec f88e 	bl	80005a8 <__aeabi_dmul>
 801448c:	4602      	mov	r2, r0
 801448e:	460b      	mov	r3, r1
 8014490:	4630      	mov	r0, r6
 8014492:	4639      	mov	r1, r7
 8014494:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8014498:	f7eb fece 	bl	8000238 <__aeabi_dsub>
 801449c:	f805 6b01 	strb.w	r6, [r5], #1
 80144a0:	eba5 060b 	sub.w	r6, r5, fp
 80144a4:	45b1      	cmp	r9, r6
 80144a6:	4602      	mov	r2, r0
 80144a8:	460b      	mov	r3, r1
 80144aa:	d139      	bne.n	8014520 <_dtoa_r+0x6c8>
 80144ac:	f7eb fec6 	bl	800023c <__adddf3>
 80144b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80144b4:	4606      	mov	r6, r0
 80144b6:	460f      	mov	r7, r1
 80144b8:	f7ec fb06 	bl	8000ac8 <__aeabi_dcmpgt>
 80144bc:	b9c8      	cbnz	r0, 80144f2 <_dtoa_r+0x69a>
 80144be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80144c2:	4630      	mov	r0, r6
 80144c4:	4639      	mov	r1, r7
 80144c6:	f7ec fad7 	bl	8000a78 <__aeabi_dcmpeq>
 80144ca:	b110      	cbz	r0, 80144d2 <_dtoa_r+0x67a>
 80144cc:	f018 0f01 	tst.w	r8, #1
 80144d0:	d10f      	bne.n	80144f2 <_dtoa_r+0x69a>
 80144d2:	9904      	ldr	r1, [sp, #16]
 80144d4:	4620      	mov	r0, r4
 80144d6:	f000 fc99 	bl	8014e0c <_Bfree>
 80144da:	2300      	movs	r3, #0
 80144dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80144de:	702b      	strb	r3, [r5, #0]
 80144e0:	f10a 0301 	add.w	r3, sl, #1
 80144e4:	6013      	str	r3, [r2, #0]
 80144e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	f000 8241 	beq.w	8014970 <_dtoa_r+0xb18>
 80144ee:	601d      	str	r5, [r3, #0]
 80144f0:	e23e      	b.n	8014970 <_dtoa_r+0xb18>
 80144f2:	f8cd a020 	str.w	sl, [sp, #32]
 80144f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80144fa:	2a39      	cmp	r2, #57	; 0x39
 80144fc:	f105 33ff 	add.w	r3, r5, #4294967295
 8014500:	d108      	bne.n	8014514 <_dtoa_r+0x6bc>
 8014502:	459b      	cmp	fp, r3
 8014504:	d10a      	bne.n	801451c <_dtoa_r+0x6c4>
 8014506:	9b08      	ldr	r3, [sp, #32]
 8014508:	3301      	adds	r3, #1
 801450a:	9308      	str	r3, [sp, #32]
 801450c:	2330      	movs	r3, #48	; 0x30
 801450e:	f88b 3000 	strb.w	r3, [fp]
 8014512:	465b      	mov	r3, fp
 8014514:	781a      	ldrb	r2, [r3, #0]
 8014516:	3201      	adds	r2, #1
 8014518:	701a      	strb	r2, [r3, #0]
 801451a:	e78c      	b.n	8014436 <_dtoa_r+0x5de>
 801451c:	461d      	mov	r5, r3
 801451e:	e7ea      	b.n	80144f6 <_dtoa_r+0x69e>
 8014520:	2200      	movs	r2, #0
 8014522:	4b9b      	ldr	r3, [pc, #620]	; (8014790 <_dtoa_r+0x938>)
 8014524:	f7ec f840 	bl	80005a8 <__aeabi_dmul>
 8014528:	2200      	movs	r2, #0
 801452a:	2300      	movs	r3, #0
 801452c:	4606      	mov	r6, r0
 801452e:	460f      	mov	r7, r1
 8014530:	f7ec faa2 	bl	8000a78 <__aeabi_dcmpeq>
 8014534:	2800      	cmp	r0, #0
 8014536:	d09a      	beq.n	801446e <_dtoa_r+0x616>
 8014538:	e7cb      	b.n	80144d2 <_dtoa_r+0x67a>
 801453a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801453c:	2a00      	cmp	r2, #0
 801453e:	f000 808b 	beq.w	8014658 <_dtoa_r+0x800>
 8014542:	9a06      	ldr	r2, [sp, #24]
 8014544:	2a01      	cmp	r2, #1
 8014546:	dc6e      	bgt.n	8014626 <_dtoa_r+0x7ce>
 8014548:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801454a:	2a00      	cmp	r2, #0
 801454c:	d067      	beq.n	801461e <_dtoa_r+0x7c6>
 801454e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014552:	9f07      	ldr	r7, [sp, #28]
 8014554:	9d05      	ldr	r5, [sp, #20]
 8014556:	9a05      	ldr	r2, [sp, #20]
 8014558:	2101      	movs	r1, #1
 801455a:	441a      	add	r2, r3
 801455c:	4620      	mov	r0, r4
 801455e:	9205      	str	r2, [sp, #20]
 8014560:	4498      	add	r8, r3
 8014562:	f000 fcf3 	bl	8014f4c <__i2b>
 8014566:	4606      	mov	r6, r0
 8014568:	2d00      	cmp	r5, #0
 801456a:	dd0c      	ble.n	8014586 <_dtoa_r+0x72e>
 801456c:	f1b8 0f00 	cmp.w	r8, #0
 8014570:	dd09      	ble.n	8014586 <_dtoa_r+0x72e>
 8014572:	4545      	cmp	r5, r8
 8014574:	9a05      	ldr	r2, [sp, #20]
 8014576:	462b      	mov	r3, r5
 8014578:	bfa8      	it	ge
 801457a:	4643      	movge	r3, r8
 801457c:	1ad2      	subs	r2, r2, r3
 801457e:	9205      	str	r2, [sp, #20]
 8014580:	1aed      	subs	r5, r5, r3
 8014582:	eba8 0803 	sub.w	r8, r8, r3
 8014586:	9b07      	ldr	r3, [sp, #28]
 8014588:	b1eb      	cbz	r3, 80145c6 <_dtoa_r+0x76e>
 801458a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801458c:	2b00      	cmp	r3, #0
 801458e:	d067      	beq.n	8014660 <_dtoa_r+0x808>
 8014590:	b18f      	cbz	r7, 80145b6 <_dtoa_r+0x75e>
 8014592:	4631      	mov	r1, r6
 8014594:	463a      	mov	r2, r7
 8014596:	4620      	mov	r0, r4
 8014598:	f000 fd78 	bl	801508c <__pow5mult>
 801459c:	9a04      	ldr	r2, [sp, #16]
 801459e:	4601      	mov	r1, r0
 80145a0:	4606      	mov	r6, r0
 80145a2:	4620      	mov	r0, r4
 80145a4:	f000 fcdb 	bl	8014f5e <__multiply>
 80145a8:	9904      	ldr	r1, [sp, #16]
 80145aa:	9008      	str	r0, [sp, #32]
 80145ac:	4620      	mov	r0, r4
 80145ae:	f000 fc2d 	bl	8014e0c <_Bfree>
 80145b2:	9b08      	ldr	r3, [sp, #32]
 80145b4:	9304      	str	r3, [sp, #16]
 80145b6:	9b07      	ldr	r3, [sp, #28]
 80145b8:	1bda      	subs	r2, r3, r7
 80145ba:	d004      	beq.n	80145c6 <_dtoa_r+0x76e>
 80145bc:	9904      	ldr	r1, [sp, #16]
 80145be:	4620      	mov	r0, r4
 80145c0:	f000 fd64 	bl	801508c <__pow5mult>
 80145c4:	9004      	str	r0, [sp, #16]
 80145c6:	2101      	movs	r1, #1
 80145c8:	4620      	mov	r0, r4
 80145ca:	f000 fcbf 	bl	8014f4c <__i2b>
 80145ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80145d0:	4607      	mov	r7, r0
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	f000 81d0 	beq.w	8014978 <_dtoa_r+0xb20>
 80145d8:	461a      	mov	r2, r3
 80145da:	4601      	mov	r1, r0
 80145dc:	4620      	mov	r0, r4
 80145de:	f000 fd55 	bl	801508c <__pow5mult>
 80145e2:	9b06      	ldr	r3, [sp, #24]
 80145e4:	2b01      	cmp	r3, #1
 80145e6:	4607      	mov	r7, r0
 80145e8:	dc40      	bgt.n	801466c <_dtoa_r+0x814>
 80145ea:	9b00      	ldr	r3, [sp, #0]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d139      	bne.n	8014664 <_dtoa_r+0x80c>
 80145f0:	9b01      	ldr	r3, [sp, #4]
 80145f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d136      	bne.n	8014668 <_dtoa_r+0x810>
 80145fa:	9b01      	ldr	r3, [sp, #4]
 80145fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014600:	0d1b      	lsrs	r3, r3, #20
 8014602:	051b      	lsls	r3, r3, #20
 8014604:	b12b      	cbz	r3, 8014612 <_dtoa_r+0x7ba>
 8014606:	9b05      	ldr	r3, [sp, #20]
 8014608:	3301      	adds	r3, #1
 801460a:	9305      	str	r3, [sp, #20]
 801460c:	f108 0801 	add.w	r8, r8, #1
 8014610:	2301      	movs	r3, #1
 8014612:	9307      	str	r3, [sp, #28]
 8014614:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014616:	2b00      	cmp	r3, #0
 8014618:	d12a      	bne.n	8014670 <_dtoa_r+0x818>
 801461a:	2001      	movs	r0, #1
 801461c:	e030      	b.n	8014680 <_dtoa_r+0x828>
 801461e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014620:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014624:	e795      	b.n	8014552 <_dtoa_r+0x6fa>
 8014626:	9b07      	ldr	r3, [sp, #28]
 8014628:	f109 37ff 	add.w	r7, r9, #4294967295
 801462c:	42bb      	cmp	r3, r7
 801462e:	bfbf      	itttt	lt
 8014630:	9b07      	ldrlt	r3, [sp, #28]
 8014632:	9707      	strlt	r7, [sp, #28]
 8014634:	1afa      	sublt	r2, r7, r3
 8014636:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8014638:	bfbb      	ittet	lt
 801463a:	189b      	addlt	r3, r3, r2
 801463c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801463e:	1bdf      	subge	r7, r3, r7
 8014640:	2700      	movlt	r7, #0
 8014642:	f1b9 0f00 	cmp.w	r9, #0
 8014646:	bfb5      	itete	lt
 8014648:	9b05      	ldrlt	r3, [sp, #20]
 801464a:	9d05      	ldrge	r5, [sp, #20]
 801464c:	eba3 0509 	sublt.w	r5, r3, r9
 8014650:	464b      	movge	r3, r9
 8014652:	bfb8      	it	lt
 8014654:	2300      	movlt	r3, #0
 8014656:	e77e      	b.n	8014556 <_dtoa_r+0x6fe>
 8014658:	9f07      	ldr	r7, [sp, #28]
 801465a:	9d05      	ldr	r5, [sp, #20]
 801465c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801465e:	e783      	b.n	8014568 <_dtoa_r+0x710>
 8014660:	9a07      	ldr	r2, [sp, #28]
 8014662:	e7ab      	b.n	80145bc <_dtoa_r+0x764>
 8014664:	2300      	movs	r3, #0
 8014666:	e7d4      	b.n	8014612 <_dtoa_r+0x7ba>
 8014668:	9b00      	ldr	r3, [sp, #0]
 801466a:	e7d2      	b.n	8014612 <_dtoa_r+0x7ba>
 801466c:	2300      	movs	r3, #0
 801466e:	9307      	str	r3, [sp, #28]
 8014670:	693b      	ldr	r3, [r7, #16]
 8014672:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014676:	6918      	ldr	r0, [r3, #16]
 8014678:	f000 fc1a 	bl	8014eb0 <__hi0bits>
 801467c:	f1c0 0020 	rsb	r0, r0, #32
 8014680:	4440      	add	r0, r8
 8014682:	f010 001f 	ands.w	r0, r0, #31
 8014686:	d047      	beq.n	8014718 <_dtoa_r+0x8c0>
 8014688:	f1c0 0320 	rsb	r3, r0, #32
 801468c:	2b04      	cmp	r3, #4
 801468e:	dd3b      	ble.n	8014708 <_dtoa_r+0x8b0>
 8014690:	9b05      	ldr	r3, [sp, #20]
 8014692:	f1c0 001c 	rsb	r0, r0, #28
 8014696:	4403      	add	r3, r0
 8014698:	9305      	str	r3, [sp, #20]
 801469a:	4405      	add	r5, r0
 801469c:	4480      	add	r8, r0
 801469e:	9b05      	ldr	r3, [sp, #20]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	dd05      	ble.n	80146b0 <_dtoa_r+0x858>
 80146a4:	461a      	mov	r2, r3
 80146a6:	9904      	ldr	r1, [sp, #16]
 80146a8:	4620      	mov	r0, r4
 80146aa:	f000 fd3d 	bl	8015128 <__lshift>
 80146ae:	9004      	str	r0, [sp, #16]
 80146b0:	f1b8 0f00 	cmp.w	r8, #0
 80146b4:	dd05      	ble.n	80146c2 <_dtoa_r+0x86a>
 80146b6:	4639      	mov	r1, r7
 80146b8:	4642      	mov	r2, r8
 80146ba:	4620      	mov	r0, r4
 80146bc:	f000 fd34 	bl	8015128 <__lshift>
 80146c0:	4607      	mov	r7, r0
 80146c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80146c4:	b353      	cbz	r3, 801471c <_dtoa_r+0x8c4>
 80146c6:	4639      	mov	r1, r7
 80146c8:	9804      	ldr	r0, [sp, #16]
 80146ca:	f000 fd81 	bl	80151d0 <__mcmp>
 80146ce:	2800      	cmp	r0, #0
 80146d0:	da24      	bge.n	801471c <_dtoa_r+0x8c4>
 80146d2:	2300      	movs	r3, #0
 80146d4:	220a      	movs	r2, #10
 80146d6:	9904      	ldr	r1, [sp, #16]
 80146d8:	4620      	mov	r0, r4
 80146da:	f000 fbae 	bl	8014e3a <__multadd>
 80146de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80146e0:	9004      	str	r0, [sp, #16]
 80146e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	f000 814d 	beq.w	8014986 <_dtoa_r+0xb2e>
 80146ec:	2300      	movs	r3, #0
 80146ee:	4631      	mov	r1, r6
 80146f0:	220a      	movs	r2, #10
 80146f2:	4620      	mov	r0, r4
 80146f4:	f000 fba1 	bl	8014e3a <__multadd>
 80146f8:	9b02      	ldr	r3, [sp, #8]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	4606      	mov	r6, r0
 80146fe:	dc4f      	bgt.n	80147a0 <_dtoa_r+0x948>
 8014700:	9b06      	ldr	r3, [sp, #24]
 8014702:	2b02      	cmp	r3, #2
 8014704:	dd4c      	ble.n	80147a0 <_dtoa_r+0x948>
 8014706:	e011      	b.n	801472c <_dtoa_r+0x8d4>
 8014708:	d0c9      	beq.n	801469e <_dtoa_r+0x846>
 801470a:	9a05      	ldr	r2, [sp, #20]
 801470c:	331c      	adds	r3, #28
 801470e:	441a      	add	r2, r3
 8014710:	9205      	str	r2, [sp, #20]
 8014712:	441d      	add	r5, r3
 8014714:	4498      	add	r8, r3
 8014716:	e7c2      	b.n	801469e <_dtoa_r+0x846>
 8014718:	4603      	mov	r3, r0
 801471a:	e7f6      	b.n	801470a <_dtoa_r+0x8b2>
 801471c:	f1b9 0f00 	cmp.w	r9, #0
 8014720:	dc38      	bgt.n	8014794 <_dtoa_r+0x93c>
 8014722:	9b06      	ldr	r3, [sp, #24]
 8014724:	2b02      	cmp	r3, #2
 8014726:	dd35      	ble.n	8014794 <_dtoa_r+0x93c>
 8014728:	f8cd 9008 	str.w	r9, [sp, #8]
 801472c:	9b02      	ldr	r3, [sp, #8]
 801472e:	b963      	cbnz	r3, 801474a <_dtoa_r+0x8f2>
 8014730:	4639      	mov	r1, r7
 8014732:	2205      	movs	r2, #5
 8014734:	4620      	mov	r0, r4
 8014736:	f000 fb80 	bl	8014e3a <__multadd>
 801473a:	4601      	mov	r1, r0
 801473c:	4607      	mov	r7, r0
 801473e:	9804      	ldr	r0, [sp, #16]
 8014740:	f000 fd46 	bl	80151d0 <__mcmp>
 8014744:	2800      	cmp	r0, #0
 8014746:	f73f adcc 	bgt.w	80142e2 <_dtoa_r+0x48a>
 801474a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801474c:	465d      	mov	r5, fp
 801474e:	ea6f 0a03 	mvn.w	sl, r3
 8014752:	f04f 0900 	mov.w	r9, #0
 8014756:	4639      	mov	r1, r7
 8014758:	4620      	mov	r0, r4
 801475a:	f000 fb57 	bl	8014e0c <_Bfree>
 801475e:	2e00      	cmp	r6, #0
 8014760:	f43f aeb7 	beq.w	80144d2 <_dtoa_r+0x67a>
 8014764:	f1b9 0f00 	cmp.w	r9, #0
 8014768:	d005      	beq.n	8014776 <_dtoa_r+0x91e>
 801476a:	45b1      	cmp	r9, r6
 801476c:	d003      	beq.n	8014776 <_dtoa_r+0x91e>
 801476e:	4649      	mov	r1, r9
 8014770:	4620      	mov	r0, r4
 8014772:	f000 fb4b 	bl	8014e0c <_Bfree>
 8014776:	4631      	mov	r1, r6
 8014778:	4620      	mov	r0, r4
 801477a:	f000 fb47 	bl	8014e0c <_Bfree>
 801477e:	e6a8      	b.n	80144d2 <_dtoa_r+0x67a>
 8014780:	2700      	movs	r7, #0
 8014782:	463e      	mov	r6, r7
 8014784:	e7e1      	b.n	801474a <_dtoa_r+0x8f2>
 8014786:	f8dd a020 	ldr.w	sl, [sp, #32]
 801478a:	463e      	mov	r6, r7
 801478c:	e5a9      	b.n	80142e2 <_dtoa_r+0x48a>
 801478e:	bf00      	nop
 8014790:	40240000 	.word	0x40240000
 8014794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014796:	f8cd 9008 	str.w	r9, [sp, #8]
 801479a:	2b00      	cmp	r3, #0
 801479c:	f000 80fa 	beq.w	8014994 <_dtoa_r+0xb3c>
 80147a0:	2d00      	cmp	r5, #0
 80147a2:	dd05      	ble.n	80147b0 <_dtoa_r+0x958>
 80147a4:	4631      	mov	r1, r6
 80147a6:	462a      	mov	r2, r5
 80147a8:	4620      	mov	r0, r4
 80147aa:	f000 fcbd 	bl	8015128 <__lshift>
 80147ae:	4606      	mov	r6, r0
 80147b0:	9b07      	ldr	r3, [sp, #28]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d04c      	beq.n	8014850 <_dtoa_r+0x9f8>
 80147b6:	6871      	ldr	r1, [r6, #4]
 80147b8:	4620      	mov	r0, r4
 80147ba:	f000 faf3 	bl	8014da4 <_Balloc>
 80147be:	6932      	ldr	r2, [r6, #16]
 80147c0:	3202      	adds	r2, #2
 80147c2:	4605      	mov	r5, r0
 80147c4:	0092      	lsls	r2, r2, #2
 80147c6:	f106 010c 	add.w	r1, r6, #12
 80147ca:	300c      	adds	r0, #12
 80147cc:	f7fe fc1e 	bl	801300c <memcpy>
 80147d0:	2201      	movs	r2, #1
 80147d2:	4629      	mov	r1, r5
 80147d4:	4620      	mov	r0, r4
 80147d6:	f000 fca7 	bl	8015128 <__lshift>
 80147da:	9b00      	ldr	r3, [sp, #0]
 80147dc:	f8cd b014 	str.w	fp, [sp, #20]
 80147e0:	f003 0301 	and.w	r3, r3, #1
 80147e4:	46b1      	mov	r9, r6
 80147e6:	9307      	str	r3, [sp, #28]
 80147e8:	4606      	mov	r6, r0
 80147ea:	4639      	mov	r1, r7
 80147ec:	9804      	ldr	r0, [sp, #16]
 80147ee:	f7ff faa7 	bl	8013d40 <quorem>
 80147f2:	4649      	mov	r1, r9
 80147f4:	4605      	mov	r5, r0
 80147f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80147fa:	9804      	ldr	r0, [sp, #16]
 80147fc:	f000 fce8 	bl	80151d0 <__mcmp>
 8014800:	4632      	mov	r2, r6
 8014802:	9000      	str	r0, [sp, #0]
 8014804:	4639      	mov	r1, r7
 8014806:	4620      	mov	r0, r4
 8014808:	f000 fcfc 	bl	8015204 <__mdiff>
 801480c:	68c3      	ldr	r3, [r0, #12]
 801480e:	4602      	mov	r2, r0
 8014810:	bb03      	cbnz	r3, 8014854 <_dtoa_r+0x9fc>
 8014812:	4601      	mov	r1, r0
 8014814:	9008      	str	r0, [sp, #32]
 8014816:	9804      	ldr	r0, [sp, #16]
 8014818:	f000 fcda 	bl	80151d0 <__mcmp>
 801481c:	9a08      	ldr	r2, [sp, #32]
 801481e:	4603      	mov	r3, r0
 8014820:	4611      	mov	r1, r2
 8014822:	4620      	mov	r0, r4
 8014824:	9308      	str	r3, [sp, #32]
 8014826:	f000 faf1 	bl	8014e0c <_Bfree>
 801482a:	9b08      	ldr	r3, [sp, #32]
 801482c:	b9a3      	cbnz	r3, 8014858 <_dtoa_r+0xa00>
 801482e:	9a06      	ldr	r2, [sp, #24]
 8014830:	b992      	cbnz	r2, 8014858 <_dtoa_r+0xa00>
 8014832:	9a07      	ldr	r2, [sp, #28]
 8014834:	b982      	cbnz	r2, 8014858 <_dtoa_r+0xa00>
 8014836:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801483a:	d029      	beq.n	8014890 <_dtoa_r+0xa38>
 801483c:	9b00      	ldr	r3, [sp, #0]
 801483e:	2b00      	cmp	r3, #0
 8014840:	dd01      	ble.n	8014846 <_dtoa_r+0x9ee>
 8014842:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8014846:	9b05      	ldr	r3, [sp, #20]
 8014848:	1c5d      	adds	r5, r3, #1
 801484a:	f883 8000 	strb.w	r8, [r3]
 801484e:	e782      	b.n	8014756 <_dtoa_r+0x8fe>
 8014850:	4630      	mov	r0, r6
 8014852:	e7c2      	b.n	80147da <_dtoa_r+0x982>
 8014854:	2301      	movs	r3, #1
 8014856:	e7e3      	b.n	8014820 <_dtoa_r+0x9c8>
 8014858:	9a00      	ldr	r2, [sp, #0]
 801485a:	2a00      	cmp	r2, #0
 801485c:	db04      	blt.n	8014868 <_dtoa_r+0xa10>
 801485e:	d125      	bne.n	80148ac <_dtoa_r+0xa54>
 8014860:	9a06      	ldr	r2, [sp, #24]
 8014862:	bb1a      	cbnz	r2, 80148ac <_dtoa_r+0xa54>
 8014864:	9a07      	ldr	r2, [sp, #28]
 8014866:	bb0a      	cbnz	r2, 80148ac <_dtoa_r+0xa54>
 8014868:	2b00      	cmp	r3, #0
 801486a:	ddec      	ble.n	8014846 <_dtoa_r+0x9ee>
 801486c:	2201      	movs	r2, #1
 801486e:	9904      	ldr	r1, [sp, #16]
 8014870:	4620      	mov	r0, r4
 8014872:	f000 fc59 	bl	8015128 <__lshift>
 8014876:	4639      	mov	r1, r7
 8014878:	9004      	str	r0, [sp, #16]
 801487a:	f000 fca9 	bl	80151d0 <__mcmp>
 801487e:	2800      	cmp	r0, #0
 8014880:	dc03      	bgt.n	801488a <_dtoa_r+0xa32>
 8014882:	d1e0      	bne.n	8014846 <_dtoa_r+0x9ee>
 8014884:	f018 0f01 	tst.w	r8, #1
 8014888:	d0dd      	beq.n	8014846 <_dtoa_r+0x9ee>
 801488a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801488e:	d1d8      	bne.n	8014842 <_dtoa_r+0x9ea>
 8014890:	9b05      	ldr	r3, [sp, #20]
 8014892:	9a05      	ldr	r2, [sp, #20]
 8014894:	1c5d      	adds	r5, r3, #1
 8014896:	2339      	movs	r3, #57	; 0x39
 8014898:	7013      	strb	r3, [r2, #0]
 801489a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801489e:	2b39      	cmp	r3, #57	; 0x39
 80148a0:	f105 32ff 	add.w	r2, r5, #4294967295
 80148a4:	d04f      	beq.n	8014946 <_dtoa_r+0xaee>
 80148a6:	3301      	adds	r3, #1
 80148a8:	7013      	strb	r3, [r2, #0]
 80148aa:	e754      	b.n	8014756 <_dtoa_r+0x8fe>
 80148ac:	9a05      	ldr	r2, [sp, #20]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	f102 0501 	add.w	r5, r2, #1
 80148b4:	dd06      	ble.n	80148c4 <_dtoa_r+0xa6c>
 80148b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80148ba:	d0e9      	beq.n	8014890 <_dtoa_r+0xa38>
 80148bc:	f108 0801 	add.w	r8, r8, #1
 80148c0:	9b05      	ldr	r3, [sp, #20]
 80148c2:	e7c2      	b.n	801484a <_dtoa_r+0x9f2>
 80148c4:	9a02      	ldr	r2, [sp, #8]
 80148c6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80148ca:	eba5 030b 	sub.w	r3, r5, fp
 80148ce:	4293      	cmp	r3, r2
 80148d0:	d021      	beq.n	8014916 <_dtoa_r+0xabe>
 80148d2:	2300      	movs	r3, #0
 80148d4:	220a      	movs	r2, #10
 80148d6:	9904      	ldr	r1, [sp, #16]
 80148d8:	4620      	mov	r0, r4
 80148da:	f000 faae 	bl	8014e3a <__multadd>
 80148de:	45b1      	cmp	r9, r6
 80148e0:	9004      	str	r0, [sp, #16]
 80148e2:	f04f 0300 	mov.w	r3, #0
 80148e6:	f04f 020a 	mov.w	r2, #10
 80148ea:	4649      	mov	r1, r9
 80148ec:	4620      	mov	r0, r4
 80148ee:	d105      	bne.n	80148fc <_dtoa_r+0xaa4>
 80148f0:	f000 faa3 	bl	8014e3a <__multadd>
 80148f4:	4681      	mov	r9, r0
 80148f6:	4606      	mov	r6, r0
 80148f8:	9505      	str	r5, [sp, #20]
 80148fa:	e776      	b.n	80147ea <_dtoa_r+0x992>
 80148fc:	f000 fa9d 	bl	8014e3a <__multadd>
 8014900:	4631      	mov	r1, r6
 8014902:	4681      	mov	r9, r0
 8014904:	2300      	movs	r3, #0
 8014906:	220a      	movs	r2, #10
 8014908:	4620      	mov	r0, r4
 801490a:	f000 fa96 	bl	8014e3a <__multadd>
 801490e:	4606      	mov	r6, r0
 8014910:	e7f2      	b.n	80148f8 <_dtoa_r+0xaa0>
 8014912:	f04f 0900 	mov.w	r9, #0
 8014916:	2201      	movs	r2, #1
 8014918:	9904      	ldr	r1, [sp, #16]
 801491a:	4620      	mov	r0, r4
 801491c:	f000 fc04 	bl	8015128 <__lshift>
 8014920:	4639      	mov	r1, r7
 8014922:	9004      	str	r0, [sp, #16]
 8014924:	f000 fc54 	bl	80151d0 <__mcmp>
 8014928:	2800      	cmp	r0, #0
 801492a:	dcb6      	bgt.n	801489a <_dtoa_r+0xa42>
 801492c:	d102      	bne.n	8014934 <_dtoa_r+0xadc>
 801492e:	f018 0f01 	tst.w	r8, #1
 8014932:	d1b2      	bne.n	801489a <_dtoa_r+0xa42>
 8014934:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014938:	2b30      	cmp	r3, #48	; 0x30
 801493a:	f105 32ff 	add.w	r2, r5, #4294967295
 801493e:	f47f af0a 	bne.w	8014756 <_dtoa_r+0x8fe>
 8014942:	4615      	mov	r5, r2
 8014944:	e7f6      	b.n	8014934 <_dtoa_r+0xadc>
 8014946:	4593      	cmp	fp, r2
 8014948:	d105      	bne.n	8014956 <_dtoa_r+0xafe>
 801494a:	2331      	movs	r3, #49	; 0x31
 801494c:	f10a 0a01 	add.w	sl, sl, #1
 8014950:	f88b 3000 	strb.w	r3, [fp]
 8014954:	e6ff      	b.n	8014756 <_dtoa_r+0x8fe>
 8014956:	4615      	mov	r5, r2
 8014958:	e79f      	b.n	801489a <_dtoa_r+0xa42>
 801495a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80149c0 <_dtoa_r+0xb68>
 801495e:	e007      	b.n	8014970 <_dtoa_r+0xb18>
 8014960:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014962:	f8df b060 	ldr.w	fp, [pc, #96]	; 80149c4 <_dtoa_r+0xb6c>
 8014966:	b11b      	cbz	r3, 8014970 <_dtoa_r+0xb18>
 8014968:	f10b 0308 	add.w	r3, fp, #8
 801496c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801496e:	6013      	str	r3, [r2, #0]
 8014970:	4658      	mov	r0, fp
 8014972:	b017      	add	sp, #92	; 0x5c
 8014974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014978:	9b06      	ldr	r3, [sp, #24]
 801497a:	2b01      	cmp	r3, #1
 801497c:	f77f ae35 	ble.w	80145ea <_dtoa_r+0x792>
 8014980:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014982:	9307      	str	r3, [sp, #28]
 8014984:	e649      	b.n	801461a <_dtoa_r+0x7c2>
 8014986:	9b02      	ldr	r3, [sp, #8]
 8014988:	2b00      	cmp	r3, #0
 801498a:	dc03      	bgt.n	8014994 <_dtoa_r+0xb3c>
 801498c:	9b06      	ldr	r3, [sp, #24]
 801498e:	2b02      	cmp	r3, #2
 8014990:	f73f aecc 	bgt.w	801472c <_dtoa_r+0x8d4>
 8014994:	465d      	mov	r5, fp
 8014996:	4639      	mov	r1, r7
 8014998:	9804      	ldr	r0, [sp, #16]
 801499a:	f7ff f9d1 	bl	8013d40 <quorem>
 801499e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80149a2:	f805 8b01 	strb.w	r8, [r5], #1
 80149a6:	9a02      	ldr	r2, [sp, #8]
 80149a8:	eba5 030b 	sub.w	r3, r5, fp
 80149ac:	429a      	cmp	r2, r3
 80149ae:	ddb0      	ble.n	8014912 <_dtoa_r+0xaba>
 80149b0:	2300      	movs	r3, #0
 80149b2:	220a      	movs	r2, #10
 80149b4:	9904      	ldr	r1, [sp, #16]
 80149b6:	4620      	mov	r0, r4
 80149b8:	f000 fa3f 	bl	8014e3a <__multadd>
 80149bc:	9004      	str	r0, [sp, #16]
 80149be:	e7ea      	b.n	8014996 <_dtoa_r+0xb3e>
 80149c0:	08017870 	.word	0x08017870
 80149c4:	08017894 	.word	0x08017894

080149c8 <__sflush_r>:
 80149c8:	898a      	ldrh	r2, [r1, #12]
 80149ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149ce:	4605      	mov	r5, r0
 80149d0:	0710      	lsls	r0, r2, #28
 80149d2:	460c      	mov	r4, r1
 80149d4:	d458      	bmi.n	8014a88 <__sflush_r+0xc0>
 80149d6:	684b      	ldr	r3, [r1, #4]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	dc05      	bgt.n	80149e8 <__sflush_r+0x20>
 80149dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80149de:	2b00      	cmp	r3, #0
 80149e0:	dc02      	bgt.n	80149e8 <__sflush_r+0x20>
 80149e2:	2000      	movs	r0, #0
 80149e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80149ea:	2e00      	cmp	r6, #0
 80149ec:	d0f9      	beq.n	80149e2 <__sflush_r+0x1a>
 80149ee:	2300      	movs	r3, #0
 80149f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80149f4:	682f      	ldr	r7, [r5, #0]
 80149f6:	6a21      	ldr	r1, [r4, #32]
 80149f8:	602b      	str	r3, [r5, #0]
 80149fa:	d032      	beq.n	8014a62 <__sflush_r+0x9a>
 80149fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80149fe:	89a3      	ldrh	r3, [r4, #12]
 8014a00:	075a      	lsls	r2, r3, #29
 8014a02:	d505      	bpl.n	8014a10 <__sflush_r+0x48>
 8014a04:	6863      	ldr	r3, [r4, #4]
 8014a06:	1ac0      	subs	r0, r0, r3
 8014a08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014a0a:	b10b      	cbz	r3, 8014a10 <__sflush_r+0x48>
 8014a0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014a0e:	1ac0      	subs	r0, r0, r3
 8014a10:	2300      	movs	r3, #0
 8014a12:	4602      	mov	r2, r0
 8014a14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014a16:	6a21      	ldr	r1, [r4, #32]
 8014a18:	4628      	mov	r0, r5
 8014a1a:	47b0      	blx	r6
 8014a1c:	1c43      	adds	r3, r0, #1
 8014a1e:	89a3      	ldrh	r3, [r4, #12]
 8014a20:	d106      	bne.n	8014a30 <__sflush_r+0x68>
 8014a22:	6829      	ldr	r1, [r5, #0]
 8014a24:	291d      	cmp	r1, #29
 8014a26:	d848      	bhi.n	8014aba <__sflush_r+0xf2>
 8014a28:	4a29      	ldr	r2, [pc, #164]	; (8014ad0 <__sflush_r+0x108>)
 8014a2a:	40ca      	lsrs	r2, r1
 8014a2c:	07d6      	lsls	r6, r2, #31
 8014a2e:	d544      	bpl.n	8014aba <__sflush_r+0xf2>
 8014a30:	2200      	movs	r2, #0
 8014a32:	6062      	str	r2, [r4, #4]
 8014a34:	04d9      	lsls	r1, r3, #19
 8014a36:	6922      	ldr	r2, [r4, #16]
 8014a38:	6022      	str	r2, [r4, #0]
 8014a3a:	d504      	bpl.n	8014a46 <__sflush_r+0x7e>
 8014a3c:	1c42      	adds	r2, r0, #1
 8014a3e:	d101      	bne.n	8014a44 <__sflush_r+0x7c>
 8014a40:	682b      	ldr	r3, [r5, #0]
 8014a42:	b903      	cbnz	r3, 8014a46 <__sflush_r+0x7e>
 8014a44:	6560      	str	r0, [r4, #84]	; 0x54
 8014a46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a48:	602f      	str	r7, [r5, #0]
 8014a4a:	2900      	cmp	r1, #0
 8014a4c:	d0c9      	beq.n	80149e2 <__sflush_r+0x1a>
 8014a4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a52:	4299      	cmp	r1, r3
 8014a54:	d002      	beq.n	8014a5c <__sflush_r+0x94>
 8014a56:	4628      	mov	r0, r5
 8014a58:	f7fe faec 	bl	8013034 <_free_r>
 8014a5c:	2000      	movs	r0, #0
 8014a5e:	6360      	str	r0, [r4, #52]	; 0x34
 8014a60:	e7c0      	b.n	80149e4 <__sflush_r+0x1c>
 8014a62:	2301      	movs	r3, #1
 8014a64:	4628      	mov	r0, r5
 8014a66:	47b0      	blx	r6
 8014a68:	1c41      	adds	r1, r0, #1
 8014a6a:	d1c8      	bne.n	80149fe <__sflush_r+0x36>
 8014a6c:	682b      	ldr	r3, [r5, #0]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d0c5      	beq.n	80149fe <__sflush_r+0x36>
 8014a72:	2b1d      	cmp	r3, #29
 8014a74:	d001      	beq.n	8014a7a <__sflush_r+0xb2>
 8014a76:	2b16      	cmp	r3, #22
 8014a78:	d101      	bne.n	8014a7e <__sflush_r+0xb6>
 8014a7a:	602f      	str	r7, [r5, #0]
 8014a7c:	e7b1      	b.n	80149e2 <__sflush_r+0x1a>
 8014a7e:	89a3      	ldrh	r3, [r4, #12]
 8014a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a84:	81a3      	strh	r3, [r4, #12]
 8014a86:	e7ad      	b.n	80149e4 <__sflush_r+0x1c>
 8014a88:	690f      	ldr	r7, [r1, #16]
 8014a8a:	2f00      	cmp	r7, #0
 8014a8c:	d0a9      	beq.n	80149e2 <__sflush_r+0x1a>
 8014a8e:	0793      	lsls	r3, r2, #30
 8014a90:	680e      	ldr	r6, [r1, #0]
 8014a92:	bf08      	it	eq
 8014a94:	694b      	ldreq	r3, [r1, #20]
 8014a96:	600f      	str	r7, [r1, #0]
 8014a98:	bf18      	it	ne
 8014a9a:	2300      	movne	r3, #0
 8014a9c:	eba6 0807 	sub.w	r8, r6, r7
 8014aa0:	608b      	str	r3, [r1, #8]
 8014aa2:	f1b8 0f00 	cmp.w	r8, #0
 8014aa6:	dd9c      	ble.n	80149e2 <__sflush_r+0x1a>
 8014aa8:	4643      	mov	r3, r8
 8014aaa:	463a      	mov	r2, r7
 8014aac:	6a21      	ldr	r1, [r4, #32]
 8014aae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014ab0:	4628      	mov	r0, r5
 8014ab2:	47b0      	blx	r6
 8014ab4:	2800      	cmp	r0, #0
 8014ab6:	dc06      	bgt.n	8014ac6 <__sflush_r+0xfe>
 8014ab8:	89a3      	ldrh	r3, [r4, #12]
 8014aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014abe:	81a3      	strh	r3, [r4, #12]
 8014ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8014ac4:	e78e      	b.n	80149e4 <__sflush_r+0x1c>
 8014ac6:	4407      	add	r7, r0
 8014ac8:	eba8 0800 	sub.w	r8, r8, r0
 8014acc:	e7e9      	b.n	8014aa2 <__sflush_r+0xda>
 8014ace:	bf00      	nop
 8014ad0:	20400001 	.word	0x20400001

08014ad4 <_fflush_r>:
 8014ad4:	b538      	push	{r3, r4, r5, lr}
 8014ad6:	690b      	ldr	r3, [r1, #16]
 8014ad8:	4605      	mov	r5, r0
 8014ada:	460c      	mov	r4, r1
 8014adc:	b1db      	cbz	r3, 8014b16 <_fflush_r+0x42>
 8014ade:	b118      	cbz	r0, 8014ae8 <_fflush_r+0x14>
 8014ae0:	6983      	ldr	r3, [r0, #24]
 8014ae2:	b90b      	cbnz	r3, 8014ae8 <_fflush_r+0x14>
 8014ae4:	f000 f860 	bl	8014ba8 <__sinit>
 8014ae8:	4b0c      	ldr	r3, [pc, #48]	; (8014b1c <_fflush_r+0x48>)
 8014aea:	429c      	cmp	r4, r3
 8014aec:	d109      	bne.n	8014b02 <_fflush_r+0x2e>
 8014aee:	686c      	ldr	r4, [r5, #4]
 8014af0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014af4:	b17b      	cbz	r3, 8014b16 <_fflush_r+0x42>
 8014af6:	4621      	mov	r1, r4
 8014af8:	4628      	mov	r0, r5
 8014afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014afe:	f7ff bf63 	b.w	80149c8 <__sflush_r>
 8014b02:	4b07      	ldr	r3, [pc, #28]	; (8014b20 <_fflush_r+0x4c>)
 8014b04:	429c      	cmp	r4, r3
 8014b06:	d101      	bne.n	8014b0c <_fflush_r+0x38>
 8014b08:	68ac      	ldr	r4, [r5, #8]
 8014b0a:	e7f1      	b.n	8014af0 <_fflush_r+0x1c>
 8014b0c:	4b05      	ldr	r3, [pc, #20]	; (8014b24 <_fflush_r+0x50>)
 8014b0e:	429c      	cmp	r4, r3
 8014b10:	bf08      	it	eq
 8014b12:	68ec      	ldreq	r4, [r5, #12]
 8014b14:	e7ec      	b.n	8014af0 <_fflush_r+0x1c>
 8014b16:	2000      	movs	r0, #0
 8014b18:	bd38      	pop	{r3, r4, r5, pc}
 8014b1a:	bf00      	nop
 8014b1c:	080178c4 	.word	0x080178c4
 8014b20:	080178e4 	.word	0x080178e4
 8014b24:	080178a4 	.word	0x080178a4

08014b28 <std>:
 8014b28:	2300      	movs	r3, #0
 8014b2a:	b510      	push	{r4, lr}
 8014b2c:	4604      	mov	r4, r0
 8014b2e:	e9c0 3300 	strd	r3, r3, [r0]
 8014b32:	6083      	str	r3, [r0, #8]
 8014b34:	8181      	strh	r1, [r0, #12]
 8014b36:	6643      	str	r3, [r0, #100]	; 0x64
 8014b38:	81c2      	strh	r2, [r0, #14]
 8014b3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014b3e:	6183      	str	r3, [r0, #24]
 8014b40:	4619      	mov	r1, r3
 8014b42:	2208      	movs	r2, #8
 8014b44:	305c      	adds	r0, #92	; 0x5c
 8014b46:	f7fe fa6c 	bl	8013022 <memset>
 8014b4a:	4b05      	ldr	r3, [pc, #20]	; (8014b60 <std+0x38>)
 8014b4c:	6263      	str	r3, [r4, #36]	; 0x24
 8014b4e:	4b05      	ldr	r3, [pc, #20]	; (8014b64 <std+0x3c>)
 8014b50:	62a3      	str	r3, [r4, #40]	; 0x28
 8014b52:	4b05      	ldr	r3, [pc, #20]	; (8014b68 <std+0x40>)
 8014b54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014b56:	4b05      	ldr	r3, [pc, #20]	; (8014b6c <std+0x44>)
 8014b58:	6224      	str	r4, [r4, #32]
 8014b5a:	6323      	str	r3, [r4, #48]	; 0x30
 8014b5c:	bd10      	pop	{r4, pc}
 8014b5e:	bf00      	nop
 8014b60:	0801589d 	.word	0x0801589d
 8014b64:	080158bf 	.word	0x080158bf
 8014b68:	080158f7 	.word	0x080158f7
 8014b6c:	0801591b 	.word	0x0801591b

08014b70 <_cleanup_r>:
 8014b70:	4901      	ldr	r1, [pc, #4]	; (8014b78 <_cleanup_r+0x8>)
 8014b72:	f000 b885 	b.w	8014c80 <_fwalk_reent>
 8014b76:	bf00      	nop
 8014b78:	08014ad5 	.word	0x08014ad5

08014b7c <__sfmoreglue>:
 8014b7c:	b570      	push	{r4, r5, r6, lr}
 8014b7e:	1e4a      	subs	r2, r1, #1
 8014b80:	2568      	movs	r5, #104	; 0x68
 8014b82:	4355      	muls	r5, r2
 8014b84:	460e      	mov	r6, r1
 8014b86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014b8a:	f7fe faa1 	bl	80130d0 <_malloc_r>
 8014b8e:	4604      	mov	r4, r0
 8014b90:	b140      	cbz	r0, 8014ba4 <__sfmoreglue+0x28>
 8014b92:	2100      	movs	r1, #0
 8014b94:	e9c0 1600 	strd	r1, r6, [r0]
 8014b98:	300c      	adds	r0, #12
 8014b9a:	60a0      	str	r0, [r4, #8]
 8014b9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014ba0:	f7fe fa3f 	bl	8013022 <memset>
 8014ba4:	4620      	mov	r0, r4
 8014ba6:	bd70      	pop	{r4, r5, r6, pc}

08014ba8 <__sinit>:
 8014ba8:	6983      	ldr	r3, [r0, #24]
 8014baa:	b510      	push	{r4, lr}
 8014bac:	4604      	mov	r4, r0
 8014bae:	bb33      	cbnz	r3, 8014bfe <__sinit+0x56>
 8014bb0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8014bb4:	6503      	str	r3, [r0, #80]	; 0x50
 8014bb6:	4b12      	ldr	r3, [pc, #72]	; (8014c00 <__sinit+0x58>)
 8014bb8:	4a12      	ldr	r2, [pc, #72]	; (8014c04 <__sinit+0x5c>)
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	6282      	str	r2, [r0, #40]	; 0x28
 8014bbe:	4298      	cmp	r0, r3
 8014bc0:	bf04      	itt	eq
 8014bc2:	2301      	moveq	r3, #1
 8014bc4:	6183      	streq	r3, [r0, #24]
 8014bc6:	f000 f81f 	bl	8014c08 <__sfp>
 8014bca:	6060      	str	r0, [r4, #4]
 8014bcc:	4620      	mov	r0, r4
 8014bce:	f000 f81b 	bl	8014c08 <__sfp>
 8014bd2:	60a0      	str	r0, [r4, #8]
 8014bd4:	4620      	mov	r0, r4
 8014bd6:	f000 f817 	bl	8014c08 <__sfp>
 8014bda:	2200      	movs	r2, #0
 8014bdc:	60e0      	str	r0, [r4, #12]
 8014bde:	2104      	movs	r1, #4
 8014be0:	6860      	ldr	r0, [r4, #4]
 8014be2:	f7ff ffa1 	bl	8014b28 <std>
 8014be6:	2201      	movs	r2, #1
 8014be8:	2109      	movs	r1, #9
 8014bea:	68a0      	ldr	r0, [r4, #8]
 8014bec:	f7ff ff9c 	bl	8014b28 <std>
 8014bf0:	2202      	movs	r2, #2
 8014bf2:	2112      	movs	r1, #18
 8014bf4:	68e0      	ldr	r0, [r4, #12]
 8014bf6:	f7ff ff97 	bl	8014b28 <std>
 8014bfa:	2301      	movs	r3, #1
 8014bfc:	61a3      	str	r3, [r4, #24]
 8014bfe:	bd10      	pop	{r4, pc}
 8014c00:	0801785c 	.word	0x0801785c
 8014c04:	08014b71 	.word	0x08014b71

08014c08 <__sfp>:
 8014c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c0a:	4b1b      	ldr	r3, [pc, #108]	; (8014c78 <__sfp+0x70>)
 8014c0c:	681e      	ldr	r6, [r3, #0]
 8014c0e:	69b3      	ldr	r3, [r6, #24]
 8014c10:	4607      	mov	r7, r0
 8014c12:	b913      	cbnz	r3, 8014c1a <__sfp+0x12>
 8014c14:	4630      	mov	r0, r6
 8014c16:	f7ff ffc7 	bl	8014ba8 <__sinit>
 8014c1a:	3648      	adds	r6, #72	; 0x48
 8014c1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014c20:	3b01      	subs	r3, #1
 8014c22:	d503      	bpl.n	8014c2c <__sfp+0x24>
 8014c24:	6833      	ldr	r3, [r6, #0]
 8014c26:	b133      	cbz	r3, 8014c36 <__sfp+0x2e>
 8014c28:	6836      	ldr	r6, [r6, #0]
 8014c2a:	e7f7      	b.n	8014c1c <__sfp+0x14>
 8014c2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014c30:	b16d      	cbz	r5, 8014c4e <__sfp+0x46>
 8014c32:	3468      	adds	r4, #104	; 0x68
 8014c34:	e7f4      	b.n	8014c20 <__sfp+0x18>
 8014c36:	2104      	movs	r1, #4
 8014c38:	4638      	mov	r0, r7
 8014c3a:	f7ff ff9f 	bl	8014b7c <__sfmoreglue>
 8014c3e:	6030      	str	r0, [r6, #0]
 8014c40:	2800      	cmp	r0, #0
 8014c42:	d1f1      	bne.n	8014c28 <__sfp+0x20>
 8014c44:	230c      	movs	r3, #12
 8014c46:	603b      	str	r3, [r7, #0]
 8014c48:	4604      	mov	r4, r0
 8014c4a:	4620      	mov	r0, r4
 8014c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c4e:	4b0b      	ldr	r3, [pc, #44]	; (8014c7c <__sfp+0x74>)
 8014c50:	6665      	str	r5, [r4, #100]	; 0x64
 8014c52:	e9c4 5500 	strd	r5, r5, [r4]
 8014c56:	60a5      	str	r5, [r4, #8]
 8014c58:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8014c5c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8014c60:	2208      	movs	r2, #8
 8014c62:	4629      	mov	r1, r5
 8014c64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014c68:	f7fe f9db 	bl	8013022 <memset>
 8014c6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014c70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014c74:	e7e9      	b.n	8014c4a <__sfp+0x42>
 8014c76:	bf00      	nop
 8014c78:	0801785c 	.word	0x0801785c
 8014c7c:	ffff0001 	.word	0xffff0001

08014c80 <_fwalk_reent>:
 8014c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c84:	4680      	mov	r8, r0
 8014c86:	4689      	mov	r9, r1
 8014c88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014c8c:	2600      	movs	r6, #0
 8014c8e:	b914      	cbnz	r4, 8014c96 <_fwalk_reent+0x16>
 8014c90:	4630      	mov	r0, r6
 8014c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c96:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8014c9a:	3f01      	subs	r7, #1
 8014c9c:	d501      	bpl.n	8014ca2 <_fwalk_reent+0x22>
 8014c9e:	6824      	ldr	r4, [r4, #0]
 8014ca0:	e7f5      	b.n	8014c8e <_fwalk_reent+0xe>
 8014ca2:	89ab      	ldrh	r3, [r5, #12]
 8014ca4:	2b01      	cmp	r3, #1
 8014ca6:	d907      	bls.n	8014cb8 <_fwalk_reent+0x38>
 8014ca8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014cac:	3301      	adds	r3, #1
 8014cae:	d003      	beq.n	8014cb8 <_fwalk_reent+0x38>
 8014cb0:	4629      	mov	r1, r5
 8014cb2:	4640      	mov	r0, r8
 8014cb4:	47c8      	blx	r9
 8014cb6:	4306      	orrs	r6, r0
 8014cb8:	3568      	adds	r5, #104	; 0x68
 8014cba:	e7ee      	b.n	8014c9a <_fwalk_reent+0x1a>

08014cbc <_localeconv_r>:
 8014cbc:	4b04      	ldr	r3, [pc, #16]	; (8014cd0 <_localeconv_r+0x14>)
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	6a18      	ldr	r0, [r3, #32]
 8014cc2:	4b04      	ldr	r3, [pc, #16]	; (8014cd4 <_localeconv_r+0x18>)
 8014cc4:	2800      	cmp	r0, #0
 8014cc6:	bf08      	it	eq
 8014cc8:	4618      	moveq	r0, r3
 8014cca:	30f0      	adds	r0, #240	; 0xf0
 8014ccc:	4770      	bx	lr
 8014cce:	bf00      	nop
 8014cd0:	20000024 	.word	0x20000024
 8014cd4:	20000088 	.word	0x20000088

08014cd8 <__swhatbuf_r>:
 8014cd8:	b570      	push	{r4, r5, r6, lr}
 8014cda:	460e      	mov	r6, r1
 8014cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ce0:	2900      	cmp	r1, #0
 8014ce2:	b096      	sub	sp, #88	; 0x58
 8014ce4:	4614      	mov	r4, r2
 8014ce6:	461d      	mov	r5, r3
 8014ce8:	da07      	bge.n	8014cfa <__swhatbuf_r+0x22>
 8014cea:	2300      	movs	r3, #0
 8014cec:	602b      	str	r3, [r5, #0]
 8014cee:	89b3      	ldrh	r3, [r6, #12]
 8014cf0:	061a      	lsls	r2, r3, #24
 8014cf2:	d410      	bmi.n	8014d16 <__swhatbuf_r+0x3e>
 8014cf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014cf8:	e00e      	b.n	8014d18 <__swhatbuf_r+0x40>
 8014cfa:	466a      	mov	r2, sp
 8014cfc:	f000 fe34 	bl	8015968 <_fstat_r>
 8014d00:	2800      	cmp	r0, #0
 8014d02:	dbf2      	blt.n	8014cea <__swhatbuf_r+0x12>
 8014d04:	9a01      	ldr	r2, [sp, #4]
 8014d06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014d0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014d0e:	425a      	negs	r2, r3
 8014d10:	415a      	adcs	r2, r3
 8014d12:	602a      	str	r2, [r5, #0]
 8014d14:	e7ee      	b.n	8014cf4 <__swhatbuf_r+0x1c>
 8014d16:	2340      	movs	r3, #64	; 0x40
 8014d18:	2000      	movs	r0, #0
 8014d1a:	6023      	str	r3, [r4, #0]
 8014d1c:	b016      	add	sp, #88	; 0x58
 8014d1e:	bd70      	pop	{r4, r5, r6, pc}

08014d20 <__smakebuf_r>:
 8014d20:	898b      	ldrh	r3, [r1, #12]
 8014d22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014d24:	079d      	lsls	r5, r3, #30
 8014d26:	4606      	mov	r6, r0
 8014d28:	460c      	mov	r4, r1
 8014d2a:	d507      	bpl.n	8014d3c <__smakebuf_r+0x1c>
 8014d2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014d30:	6023      	str	r3, [r4, #0]
 8014d32:	6123      	str	r3, [r4, #16]
 8014d34:	2301      	movs	r3, #1
 8014d36:	6163      	str	r3, [r4, #20]
 8014d38:	b002      	add	sp, #8
 8014d3a:	bd70      	pop	{r4, r5, r6, pc}
 8014d3c:	ab01      	add	r3, sp, #4
 8014d3e:	466a      	mov	r2, sp
 8014d40:	f7ff ffca 	bl	8014cd8 <__swhatbuf_r>
 8014d44:	9900      	ldr	r1, [sp, #0]
 8014d46:	4605      	mov	r5, r0
 8014d48:	4630      	mov	r0, r6
 8014d4a:	f7fe f9c1 	bl	80130d0 <_malloc_r>
 8014d4e:	b948      	cbnz	r0, 8014d64 <__smakebuf_r+0x44>
 8014d50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d54:	059a      	lsls	r2, r3, #22
 8014d56:	d4ef      	bmi.n	8014d38 <__smakebuf_r+0x18>
 8014d58:	f023 0303 	bic.w	r3, r3, #3
 8014d5c:	f043 0302 	orr.w	r3, r3, #2
 8014d60:	81a3      	strh	r3, [r4, #12]
 8014d62:	e7e3      	b.n	8014d2c <__smakebuf_r+0xc>
 8014d64:	4b0d      	ldr	r3, [pc, #52]	; (8014d9c <__smakebuf_r+0x7c>)
 8014d66:	62b3      	str	r3, [r6, #40]	; 0x28
 8014d68:	89a3      	ldrh	r3, [r4, #12]
 8014d6a:	6020      	str	r0, [r4, #0]
 8014d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014d70:	81a3      	strh	r3, [r4, #12]
 8014d72:	9b00      	ldr	r3, [sp, #0]
 8014d74:	6163      	str	r3, [r4, #20]
 8014d76:	9b01      	ldr	r3, [sp, #4]
 8014d78:	6120      	str	r0, [r4, #16]
 8014d7a:	b15b      	cbz	r3, 8014d94 <__smakebuf_r+0x74>
 8014d7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014d80:	4630      	mov	r0, r6
 8014d82:	f000 fe03 	bl	801598c <_isatty_r>
 8014d86:	b128      	cbz	r0, 8014d94 <__smakebuf_r+0x74>
 8014d88:	89a3      	ldrh	r3, [r4, #12]
 8014d8a:	f023 0303 	bic.w	r3, r3, #3
 8014d8e:	f043 0301 	orr.w	r3, r3, #1
 8014d92:	81a3      	strh	r3, [r4, #12]
 8014d94:	89a3      	ldrh	r3, [r4, #12]
 8014d96:	431d      	orrs	r5, r3
 8014d98:	81a5      	strh	r5, [r4, #12]
 8014d9a:	e7cd      	b.n	8014d38 <__smakebuf_r+0x18>
 8014d9c:	08014b71 	.word	0x08014b71

08014da0 <__malloc_lock>:
 8014da0:	4770      	bx	lr

08014da2 <__malloc_unlock>:
 8014da2:	4770      	bx	lr

08014da4 <_Balloc>:
 8014da4:	b570      	push	{r4, r5, r6, lr}
 8014da6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014da8:	4604      	mov	r4, r0
 8014daa:	460e      	mov	r6, r1
 8014dac:	b93d      	cbnz	r5, 8014dbe <_Balloc+0x1a>
 8014dae:	2010      	movs	r0, #16
 8014db0:	f7fe f924 	bl	8012ffc <malloc>
 8014db4:	6260      	str	r0, [r4, #36]	; 0x24
 8014db6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014dba:	6005      	str	r5, [r0, #0]
 8014dbc:	60c5      	str	r5, [r0, #12]
 8014dbe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014dc0:	68eb      	ldr	r3, [r5, #12]
 8014dc2:	b183      	cbz	r3, 8014de6 <_Balloc+0x42>
 8014dc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014dc6:	68db      	ldr	r3, [r3, #12]
 8014dc8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014dcc:	b9b8      	cbnz	r0, 8014dfe <_Balloc+0x5a>
 8014dce:	2101      	movs	r1, #1
 8014dd0:	fa01 f506 	lsl.w	r5, r1, r6
 8014dd4:	1d6a      	adds	r2, r5, #5
 8014dd6:	0092      	lsls	r2, r2, #2
 8014dd8:	4620      	mov	r0, r4
 8014dda:	f000 fabf 	bl	801535c <_calloc_r>
 8014dde:	b160      	cbz	r0, 8014dfa <_Balloc+0x56>
 8014de0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8014de4:	e00e      	b.n	8014e04 <_Balloc+0x60>
 8014de6:	2221      	movs	r2, #33	; 0x21
 8014de8:	2104      	movs	r1, #4
 8014dea:	4620      	mov	r0, r4
 8014dec:	f000 fab6 	bl	801535c <_calloc_r>
 8014df0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014df2:	60e8      	str	r0, [r5, #12]
 8014df4:	68db      	ldr	r3, [r3, #12]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d1e4      	bne.n	8014dc4 <_Balloc+0x20>
 8014dfa:	2000      	movs	r0, #0
 8014dfc:	bd70      	pop	{r4, r5, r6, pc}
 8014dfe:	6802      	ldr	r2, [r0, #0]
 8014e00:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8014e04:	2300      	movs	r3, #0
 8014e06:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014e0a:	e7f7      	b.n	8014dfc <_Balloc+0x58>

08014e0c <_Bfree>:
 8014e0c:	b570      	push	{r4, r5, r6, lr}
 8014e0e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8014e10:	4606      	mov	r6, r0
 8014e12:	460d      	mov	r5, r1
 8014e14:	b93c      	cbnz	r4, 8014e26 <_Bfree+0x1a>
 8014e16:	2010      	movs	r0, #16
 8014e18:	f7fe f8f0 	bl	8012ffc <malloc>
 8014e1c:	6270      	str	r0, [r6, #36]	; 0x24
 8014e1e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014e22:	6004      	str	r4, [r0, #0]
 8014e24:	60c4      	str	r4, [r0, #12]
 8014e26:	b13d      	cbz	r5, 8014e38 <_Bfree+0x2c>
 8014e28:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014e2a:	686a      	ldr	r2, [r5, #4]
 8014e2c:	68db      	ldr	r3, [r3, #12]
 8014e2e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014e32:	6029      	str	r1, [r5, #0]
 8014e34:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8014e38:	bd70      	pop	{r4, r5, r6, pc}

08014e3a <__multadd>:
 8014e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e3e:	690d      	ldr	r5, [r1, #16]
 8014e40:	461f      	mov	r7, r3
 8014e42:	4606      	mov	r6, r0
 8014e44:	460c      	mov	r4, r1
 8014e46:	f101 0c14 	add.w	ip, r1, #20
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	f8dc 0000 	ldr.w	r0, [ip]
 8014e50:	b281      	uxth	r1, r0
 8014e52:	fb02 7101 	mla	r1, r2, r1, r7
 8014e56:	0c0f      	lsrs	r7, r1, #16
 8014e58:	0c00      	lsrs	r0, r0, #16
 8014e5a:	fb02 7000 	mla	r0, r2, r0, r7
 8014e5e:	b289      	uxth	r1, r1
 8014e60:	3301      	adds	r3, #1
 8014e62:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8014e66:	429d      	cmp	r5, r3
 8014e68:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8014e6c:	f84c 1b04 	str.w	r1, [ip], #4
 8014e70:	dcec      	bgt.n	8014e4c <__multadd+0x12>
 8014e72:	b1d7      	cbz	r7, 8014eaa <__multadd+0x70>
 8014e74:	68a3      	ldr	r3, [r4, #8]
 8014e76:	42ab      	cmp	r3, r5
 8014e78:	dc12      	bgt.n	8014ea0 <__multadd+0x66>
 8014e7a:	6861      	ldr	r1, [r4, #4]
 8014e7c:	4630      	mov	r0, r6
 8014e7e:	3101      	adds	r1, #1
 8014e80:	f7ff ff90 	bl	8014da4 <_Balloc>
 8014e84:	6922      	ldr	r2, [r4, #16]
 8014e86:	3202      	adds	r2, #2
 8014e88:	f104 010c 	add.w	r1, r4, #12
 8014e8c:	4680      	mov	r8, r0
 8014e8e:	0092      	lsls	r2, r2, #2
 8014e90:	300c      	adds	r0, #12
 8014e92:	f7fe f8bb 	bl	801300c <memcpy>
 8014e96:	4621      	mov	r1, r4
 8014e98:	4630      	mov	r0, r6
 8014e9a:	f7ff ffb7 	bl	8014e0c <_Bfree>
 8014e9e:	4644      	mov	r4, r8
 8014ea0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014ea4:	3501      	adds	r5, #1
 8014ea6:	615f      	str	r7, [r3, #20]
 8014ea8:	6125      	str	r5, [r4, #16]
 8014eaa:	4620      	mov	r0, r4
 8014eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014eb0 <__hi0bits>:
 8014eb0:	0c02      	lsrs	r2, r0, #16
 8014eb2:	0412      	lsls	r2, r2, #16
 8014eb4:	4603      	mov	r3, r0
 8014eb6:	b9b2      	cbnz	r2, 8014ee6 <__hi0bits+0x36>
 8014eb8:	0403      	lsls	r3, r0, #16
 8014eba:	2010      	movs	r0, #16
 8014ebc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014ec0:	bf04      	itt	eq
 8014ec2:	021b      	lsleq	r3, r3, #8
 8014ec4:	3008      	addeq	r0, #8
 8014ec6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014eca:	bf04      	itt	eq
 8014ecc:	011b      	lsleq	r3, r3, #4
 8014ece:	3004      	addeq	r0, #4
 8014ed0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014ed4:	bf04      	itt	eq
 8014ed6:	009b      	lsleq	r3, r3, #2
 8014ed8:	3002      	addeq	r0, #2
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	db06      	blt.n	8014eec <__hi0bits+0x3c>
 8014ede:	005b      	lsls	r3, r3, #1
 8014ee0:	d503      	bpl.n	8014eea <__hi0bits+0x3a>
 8014ee2:	3001      	adds	r0, #1
 8014ee4:	4770      	bx	lr
 8014ee6:	2000      	movs	r0, #0
 8014ee8:	e7e8      	b.n	8014ebc <__hi0bits+0xc>
 8014eea:	2020      	movs	r0, #32
 8014eec:	4770      	bx	lr

08014eee <__lo0bits>:
 8014eee:	6803      	ldr	r3, [r0, #0]
 8014ef0:	f013 0207 	ands.w	r2, r3, #7
 8014ef4:	4601      	mov	r1, r0
 8014ef6:	d00b      	beq.n	8014f10 <__lo0bits+0x22>
 8014ef8:	07da      	lsls	r2, r3, #31
 8014efa:	d423      	bmi.n	8014f44 <__lo0bits+0x56>
 8014efc:	0798      	lsls	r0, r3, #30
 8014efe:	bf49      	itett	mi
 8014f00:	085b      	lsrmi	r3, r3, #1
 8014f02:	089b      	lsrpl	r3, r3, #2
 8014f04:	2001      	movmi	r0, #1
 8014f06:	600b      	strmi	r3, [r1, #0]
 8014f08:	bf5c      	itt	pl
 8014f0a:	600b      	strpl	r3, [r1, #0]
 8014f0c:	2002      	movpl	r0, #2
 8014f0e:	4770      	bx	lr
 8014f10:	b298      	uxth	r0, r3
 8014f12:	b9a8      	cbnz	r0, 8014f40 <__lo0bits+0x52>
 8014f14:	0c1b      	lsrs	r3, r3, #16
 8014f16:	2010      	movs	r0, #16
 8014f18:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014f1c:	bf04      	itt	eq
 8014f1e:	0a1b      	lsreq	r3, r3, #8
 8014f20:	3008      	addeq	r0, #8
 8014f22:	071a      	lsls	r2, r3, #28
 8014f24:	bf04      	itt	eq
 8014f26:	091b      	lsreq	r3, r3, #4
 8014f28:	3004      	addeq	r0, #4
 8014f2a:	079a      	lsls	r2, r3, #30
 8014f2c:	bf04      	itt	eq
 8014f2e:	089b      	lsreq	r3, r3, #2
 8014f30:	3002      	addeq	r0, #2
 8014f32:	07da      	lsls	r2, r3, #31
 8014f34:	d402      	bmi.n	8014f3c <__lo0bits+0x4e>
 8014f36:	085b      	lsrs	r3, r3, #1
 8014f38:	d006      	beq.n	8014f48 <__lo0bits+0x5a>
 8014f3a:	3001      	adds	r0, #1
 8014f3c:	600b      	str	r3, [r1, #0]
 8014f3e:	4770      	bx	lr
 8014f40:	4610      	mov	r0, r2
 8014f42:	e7e9      	b.n	8014f18 <__lo0bits+0x2a>
 8014f44:	2000      	movs	r0, #0
 8014f46:	4770      	bx	lr
 8014f48:	2020      	movs	r0, #32
 8014f4a:	4770      	bx	lr

08014f4c <__i2b>:
 8014f4c:	b510      	push	{r4, lr}
 8014f4e:	460c      	mov	r4, r1
 8014f50:	2101      	movs	r1, #1
 8014f52:	f7ff ff27 	bl	8014da4 <_Balloc>
 8014f56:	2201      	movs	r2, #1
 8014f58:	6144      	str	r4, [r0, #20]
 8014f5a:	6102      	str	r2, [r0, #16]
 8014f5c:	bd10      	pop	{r4, pc}

08014f5e <__multiply>:
 8014f5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f62:	4614      	mov	r4, r2
 8014f64:	690a      	ldr	r2, [r1, #16]
 8014f66:	6923      	ldr	r3, [r4, #16]
 8014f68:	429a      	cmp	r2, r3
 8014f6a:	bfb8      	it	lt
 8014f6c:	460b      	movlt	r3, r1
 8014f6e:	4688      	mov	r8, r1
 8014f70:	bfbc      	itt	lt
 8014f72:	46a0      	movlt	r8, r4
 8014f74:	461c      	movlt	r4, r3
 8014f76:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014f7a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014f7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014f82:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014f86:	eb07 0609 	add.w	r6, r7, r9
 8014f8a:	42b3      	cmp	r3, r6
 8014f8c:	bfb8      	it	lt
 8014f8e:	3101      	addlt	r1, #1
 8014f90:	f7ff ff08 	bl	8014da4 <_Balloc>
 8014f94:	f100 0514 	add.w	r5, r0, #20
 8014f98:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8014f9c:	462b      	mov	r3, r5
 8014f9e:	2200      	movs	r2, #0
 8014fa0:	4573      	cmp	r3, lr
 8014fa2:	d316      	bcc.n	8014fd2 <__multiply+0x74>
 8014fa4:	f104 0214 	add.w	r2, r4, #20
 8014fa8:	f108 0114 	add.w	r1, r8, #20
 8014fac:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8014fb0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8014fb4:	9300      	str	r3, [sp, #0]
 8014fb6:	9b00      	ldr	r3, [sp, #0]
 8014fb8:	9201      	str	r2, [sp, #4]
 8014fba:	4293      	cmp	r3, r2
 8014fbc:	d80c      	bhi.n	8014fd8 <__multiply+0x7a>
 8014fbe:	2e00      	cmp	r6, #0
 8014fc0:	dd03      	ble.n	8014fca <__multiply+0x6c>
 8014fc2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d05d      	beq.n	8015086 <__multiply+0x128>
 8014fca:	6106      	str	r6, [r0, #16]
 8014fcc:	b003      	add	sp, #12
 8014fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fd2:	f843 2b04 	str.w	r2, [r3], #4
 8014fd6:	e7e3      	b.n	8014fa0 <__multiply+0x42>
 8014fd8:	f8b2 b000 	ldrh.w	fp, [r2]
 8014fdc:	f1bb 0f00 	cmp.w	fp, #0
 8014fe0:	d023      	beq.n	801502a <__multiply+0xcc>
 8014fe2:	4689      	mov	r9, r1
 8014fe4:	46ac      	mov	ip, r5
 8014fe6:	f04f 0800 	mov.w	r8, #0
 8014fea:	f859 4b04 	ldr.w	r4, [r9], #4
 8014fee:	f8dc a000 	ldr.w	sl, [ip]
 8014ff2:	b2a3      	uxth	r3, r4
 8014ff4:	fa1f fa8a 	uxth.w	sl, sl
 8014ff8:	fb0b a303 	mla	r3, fp, r3, sl
 8014ffc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015000:	f8dc 4000 	ldr.w	r4, [ip]
 8015004:	4443      	add	r3, r8
 8015006:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801500a:	fb0b 840a 	mla	r4, fp, sl, r8
 801500e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8015012:	46e2      	mov	sl, ip
 8015014:	b29b      	uxth	r3, r3
 8015016:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801501a:	454f      	cmp	r7, r9
 801501c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015020:	f84a 3b04 	str.w	r3, [sl], #4
 8015024:	d82b      	bhi.n	801507e <__multiply+0x120>
 8015026:	f8cc 8004 	str.w	r8, [ip, #4]
 801502a:	9b01      	ldr	r3, [sp, #4]
 801502c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8015030:	3204      	adds	r2, #4
 8015032:	f1ba 0f00 	cmp.w	sl, #0
 8015036:	d020      	beq.n	801507a <__multiply+0x11c>
 8015038:	682b      	ldr	r3, [r5, #0]
 801503a:	4689      	mov	r9, r1
 801503c:	46a8      	mov	r8, r5
 801503e:	f04f 0b00 	mov.w	fp, #0
 8015042:	f8b9 c000 	ldrh.w	ip, [r9]
 8015046:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801504a:	fb0a 440c 	mla	r4, sl, ip, r4
 801504e:	445c      	add	r4, fp
 8015050:	46c4      	mov	ip, r8
 8015052:	b29b      	uxth	r3, r3
 8015054:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015058:	f84c 3b04 	str.w	r3, [ip], #4
 801505c:	f859 3b04 	ldr.w	r3, [r9], #4
 8015060:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8015064:	0c1b      	lsrs	r3, r3, #16
 8015066:	fb0a b303 	mla	r3, sl, r3, fp
 801506a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801506e:	454f      	cmp	r7, r9
 8015070:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8015074:	d805      	bhi.n	8015082 <__multiply+0x124>
 8015076:	f8c8 3004 	str.w	r3, [r8, #4]
 801507a:	3504      	adds	r5, #4
 801507c:	e79b      	b.n	8014fb6 <__multiply+0x58>
 801507e:	46d4      	mov	ip, sl
 8015080:	e7b3      	b.n	8014fea <__multiply+0x8c>
 8015082:	46e0      	mov	r8, ip
 8015084:	e7dd      	b.n	8015042 <__multiply+0xe4>
 8015086:	3e01      	subs	r6, #1
 8015088:	e799      	b.n	8014fbe <__multiply+0x60>
	...

0801508c <__pow5mult>:
 801508c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015090:	4615      	mov	r5, r2
 8015092:	f012 0203 	ands.w	r2, r2, #3
 8015096:	4606      	mov	r6, r0
 8015098:	460f      	mov	r7, r1
 801509a:	d007      	beq.n	80150ac <__pow5mult+0x20>
 801509c:	3a01      	subs	r2, #1
 801509e:	4c21      	ldr	r4, [pc, #132]	; (8015124 <__pow5mult+0x98>)
 80150a0:	2300      	movs	r3, #0
 80150a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80150a6:	f7ff fec8 	bl	8014e3a <__multadd>
 80150aa:	4607      	mov	r7, r0
 80150ac:	10ad      	asrs	r5, r5, #2
 80150ae:	d035      	beq.n	801511c <__pow5mult+0x90>
 80150b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80150b2:	b93c      	cbnz	r4, 80150c4 <__pow5mult+0x38>
 80150b4:	2010      	movs	r0, #16
 80150b6:	f7fd ffa1 	bl	8012ffc <malloc>
 80150ba:	6270      	str	r0, [r6, #36]	; 0x24
 80150bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80150c0:	6004      	str	r4, [r0, #0]
 80150c2:	60c4      	str	r4, [r0, #12]
 80150c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80150c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80150cc:	b94c      	cbnz	r4, 80150e2 <__pow5mult+0x56>
 80150ce:	f240 2171 	movw	r1, #625	; 0x271
 80150d2:	4630      	mov	r0, r6
 80150d4:	f7ff ff3a 	bl	8014f4c <__i2b>
 80150d8:	2300      	movs	r3, #0
 80150da:	f8c8 0008 	str.w	r0, [r8, #8]
 80150de:	4604      	mov	r4, r0
 80150e0:	6003      	str	r3, [r0, #0]
 80150e2:	f04f 0800 	mov.w	r8, #0
 80150e6:	07eb      	lsls	r3, r5, #31
 80150e8:	d50a      	bpl.n	8015100 <__pow5mult+0x74>
 80150ea:	4639      	mov	r1, r7
 80150ec:	4622      	mov	r2, r4
 80150ee:	4630      	mov	r0, r6
 80150f0:	f7ff ff35 	bl	8014f5e <__multiply>
 80150f4:	4639      	mov	r1, r7
 80150f6:	4681      	mov	r9, r0
 80150f8:	4630      	mov	r0, r6
 80150fa:	f7ff fe87 	bl	8014e0c <_Bfree>
 80150fe:	464f      	mov	r7, r9
 8015100:	106d      	asrs	r5, r5, #1
 8015102:	d00b      	beq.n	801511c <__pow5mult+0x90>
 8015104:	6820      	ldr	r0, [r4, #0]
 8015106:	b938      	cbnz	r0, 8015118 <__pow5mult+0x8c>
 8015108:	4622      	mov	r2, r4
 801510a:	4621      	mov	r1, r4
 801510c:	4630      	mov	r0, r6
 801510e:	f7ff ff26 	bl	8014f5e <__multiply>
 8015112:	6020      	str	r0, [r4, #0]
 8015114:	f8c0 8000 	str.w	r8, [r0]
 8015118:	4604      	mov	r4, r0
 801511a:	e7e4      	b.n	80150e6 <__pow5mult+0x5a>
 801511c:	4638      	mov	r0, r7
 801511e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015122:	bf00      	nop
 8015124:	080179f8 	.word	0x080179f8

08015128 <__lshift>:
 8015128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801512c:	460c      	mov	r4, r1
 801512e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015132:	6923      	ldr	r3, [r4, #16]
 8015134:	6849      	ldr	r1, [r1, #4]
 8015136:	eb0a 0903 	add.w	r9, sl, r3
 801513a:	68a3      	ldr	r3, [r4, #8]
 801513c:	4607      	mov	r7, r0
 801513e:	4616      	mov	r6, r2
 8015140:	f109 0501 	add.w	r5, r9, #1
 8015144:	42ab      	cmp	r3, r5
 8015146:	db32      	blt.n	80151ae <__lshift+0x86>
 8015148:	4638      	mov	r0, r7
 801514a:	f7ff fe2b 	bl	8014da4 <_Balloc>
 801514e:	2300      	movs	r3, #0
 8015150:	4680      	mov	r8, r0
 8015152:	f100 0114 	add.w	r1, r0, #20
 8015156:	461a      	mov	r2, r3
 8015158:	4553      	cmp	r3, sl
 801515a:	db2b      	blt.n	80151b4 <__lshift+0x8c>
 801515c:	6920      	ldr	r0, [r4, #16]
 801515e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015162:	f104 0314 	add.w	r3, r4, #20
 8015166:	f016 021f 	ands.w	r2, r6, #31
 801516a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801516e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015172:	d025      	beq.n	80151c0 <__lshift+0x98>
 8015174:	f1c2 0e20 	rsb	lr, r2, #32
 8015178:	2000      	movs	r0, #0
 801517a:	681e      	ldr	r6, [r3, #0]
 801517c:	468a      	mov	sl, r1
 801517e:	4096      	lsls	r6, r2
 8015180:	4330      	orrs	r0, r6
 8015182:	f84a 0b04 	str.w	r0, [sl], #4
 8015186:	f853 0b04 	ldr.w	r0, [r3], #4
 801518a:	459c      	cmp	ip, r3
 801518c:	fa20 f00e 	lsr.w	r0, r0, lr
 8015190:	d814      	bhi.n	80151bc <__lshift+0x94>
 8015192:	6048      	str	r0, [r1, #4]
 8015194:	b108      	cbz	r0, 801519a <__lshift+0x72>
 8015196:	f109 0502 	add.w	r5, r9, #2
 801519a:	3d01      	subs	r5, #1
 801519c:	4638      	mov	r0, r7
 801519e:	f8c8 5010 	str.w	r5, [r8, #16]
 80151a2:	4621      	mov	r1, r4
 80151a4:	f7ff fe32 	bl	8014e0c <_Bfree>
 80151a8:	4640      	mov	r0, r8
 80151aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151ae:	3101      	adds	r1, #1
 80151b0:	005b      	lsls	r3, r3, #1
 80151b2:	e7c7      	b.n	8015144 <__lshift+0x1c>
 80151b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80151b8:	3301      	adds	r3, #1
 80151ba:	e7cd      	b.n	8015158 <__lshift+0x30>
 80151bc:	4651      	mov	r1, sl
 80151be:	e7dc      	b.n	801517a <__lshift+0x52>
 80151c0:	3904      	subs	r1, #4
 80151c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80151c6:	f841 2f04 	str.w	r2, [r1, #4]!
 80151ca:	459c      	cmp	ip, r3
 80151cc:	d8f9      	bhi.n	80151c2 <__lshift+0x9a>
 80151ce:	e7e4      	b.n	801519a <__lshift+0x72>

080151d0 <__mcmp>:
 80151d0:	6903      	ldr	r3, [r0, #16]
 80151d2:	690a      	ldr	r2, [r1, #16]
 80151d4:	1a9b      	subs	r3, r3, r2
 80151d6:	b530      	push	{r4, r5, lr}
 80151d8:	d10c      	bne.n	80151f4 <__mcmp+0x24>
 80151da:	0092      	lsls	r2, r2, #2
 80151dc:	3014      	adds	r0, #20
 80151de:	3114      	adds	r1, #20
 80151e0:	1884      	adds	r4, r0, r2
 80151e2:	4411      	add	r1, r2
 80151e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80151e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80151ec:	4295      	cmp	r5, r2
 80151ee:	d003      	beq.n	80151f8 <__mcmp+0x28>
 80151f0:	d305      	bcc.n	80151fe <__mcmp+0x2e>
 80151f2:	2301      	movs	r3, #1
 80151f4:	4618      	mov	r0, r3
 80151f6:	bd30      	pop	{r4, r5, pc}
 80151f8:	42a0      	cmp	r0, r4
 80151fa:	d3f3      	bcc.n	80151e4 <__mcmp+0x14>
 80151fc:	e7fa      	b.n	80151f4 <__mcmp+0x24>
 80151fe:	f04f 33ff 	mov.w	r3, #4294967295
 8015202:	e7f7      	b.n	80151f4 <__mcmp+0x24>

08015204 <__mdiff>:
 8015204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015208:	460d      	mov	r5, r1
 801520a:	4607      	mov	r7, r0
 801520c:	4611      	mov	r1, r2
 801520e:	4628      	mov	r0, r5
 8015210:	4614      	mov	r4, r2
 8015212:	f7ff ffdd 	bl	80151d0 <__mcmp>
 8015216:	1e06      	subs	r6, r0, #0
 8015218:	d108      	bne.n	801522c <__mdiff+0x28>
 801521a:	4631      	mov	r1, r6
 801521c:	4638      	mov	r0, r7
 801521e:	f7ff fdc1 	bl	8014da4 <_Balloc>
 8015222:	2301      	movs	r3, #1
 8015224:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8015228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801522c:	bfa4      	itt	ge
 801522e:	4623      	movge	r3, r4
 8015230:	462c      	movge	r4, r5
 8015232:	4638      	mov	r0, r7
 8015234:	6861      	ldr	r1, [r4, #4]
 8015236:	bfa6      	itte	ge
 8015238:	461d      	movge	r5, r3
 801523a:	2600      	movge	r6, #0
 801523c:	2601      	movlt	r6, #1
 801523e:	f7ff fdb1 	bl	8014da4 <_Balloc>
 8015242:	692b      	ldr	r3, [r5, #16]
 8015244:	60c6      	str	r6, [r0, #12]
 8015246:	6926      	ldr	r6, [r4, #16]
 8015248:	f105 0914 	add.w	r9, r5, #20
 801524c:	f104 0214 	add.w	r2, r4, #20
 8015250:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8015254:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8015258:	f100 0514 	add.w	r5, r0, #20
 801525c:	f04f 0e00 	mov.w	lr, #0
 8015260:	f852 ab04 	ldr.w	sl, [r2], #4
 8015264:	f859 4b04 	ldr.w	r4, [r9], #4
 8015268:	fa1e f18a 	uxtah	r1, lr, sl
 801526c:	b2a3      	uxth	r3, r4
 801526e:	1ac9      	subs	r1, r1, r3
 8015270:	0c23      	lsrs	r3, r4, #16
 8015272:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8015276:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801527a:	b289      	uxth	r1, r1
 801527c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8015280:	45c8      	cmp	r8, r9
 8015282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8015286:	4694      	mov	ip, r2
 8015288:	f845 3b04 	str.w	r3, [r5], #4
 801528c:	d8e8      	bhi.n	8015260 <__mdiff+0x5c>
 801528e:	45bc      	cmp	ip, r7
 8015290:	d304      	bcc.n	801529c <__mdiff+0x98>
 8015292:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8015296:	b183      	cbz	r3, 80152ba <__mdiff+0xb6>
 8015298:	6106      	str	r6, [r0, #16]
 801529a:	e7c5      	b.n	8015228 <__mdiff+0x24>
 801529c:	f85c 1b04 	ldr.w	r1, [ip], #4
 80152a0:	fa1e f381 	uxtah	r3, lr, r1
 80152a4:	141a      	asrs	r2, r3, #16
 80152a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80152aa:	b29b      	uxth	r3, r3
 80152ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80152b0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80152b4:	f845 3b04 	str.w	r3, [r5], #4
 80152b8:	e7e9      	b.n	801528e <__mdiff+0x8a>
 80152ba:	3e01      	subs	r6, #1
 80152bc:	e7e9      	b.n	8015292 <__mdiff+0x8e>

080152be <__d2b>:
 80152be:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80152c2:	460e      	mov	r6, r1
 80152c4:	2101      	movs	r1, #1
 80152c6:	ec59 8b10 	vmov	r8, r9, d0
 80152ca:	4615      	mov	r5, r2
 80152cc:	f7ff fd6a 	bl	8014da4 <_Balloc>
 80152d0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80152d4:	4607      	mov	r7, r0
 80152d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80152da:	bb34      	cbnz	r4, 801532a <__d2b+0x6c>
 80152dc:	9301      	str	r3, [sp, #4]
 80152de:	f1b8 0300 	subs.w	r3, r8, #0
 80152e2:	d027      	beq.n	8015334 <__d2b+0x76>
 80152e4:	a802      	add	r0, sp, #8
 80152e6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80152ea:	f7ff fe00 	bl	8014eee <__lo0bits>
 80152ee:	9900      	ldr	r1, [sp, #0]
 80152f0:	b1f0      	cbz	r0, 8015330 <__d2b+0x72>
 80152f2:	9a01      	ldr	r2, [sp, #4]
 80152f4:	f1c0 0320 	rsb	r3, r0, #32
 80152f8:	fa02 f303 	lsl.w	r3, r2, r3
 80152fc:	430b      	orrs	r3, r1
 80152fe:	40c2      	lsrs	r2, r0
 8015300:	617b      	str	r3, [r7, #20]
 8015302:	9201      	str	r2, [sp, #4]
 8015304:	9b01      	ldr	r3, [sp, #4]
 8015306:	61bb      	str	r3, [r7, #24]
 8015308:	2b00      	cmp	r3, #0
 801530a:	bf14      	ite	ne
 801530c:	2102      	movne	r1, #2
 801530e:	2101      	moveq	r1, #1
 8015310:	6139      	str	r1, [r7, #16]
 8015312:	b1c4      	cbz	r4, 8015346 <__d2b+0x88>
 8015314:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8015318:	4404      	add	r4, r0
 801531a:	6034      	str	r4, [r6, #0]
 801531c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015320:	6028      	str	r0, [r5, #0]
 8015322:	4638      	mov	r0, r7
 8015324:	b003      	add	sp, #12
 8015326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801532a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801532e:	e7d5      	b.n	80152dc <__d2b+0x1e>
 8015330:	6179      	str	r1, [r7, #20]
 8015332:	e7e7      	b.n	8015304 <__d2b+0x46>
 8015334:	a801      	add	r0, sp, #4
 8015336:	f7ff fdda 	bl	8014eee <__lo0bits>
 801533a:	9b01      	ldr	r3, [sp, #4]
 801533c:	617b      	str	r3, [r7, #20]
 801533e:	2101      	movs	r1, #1
 8015340:	6139      	str	r1, [r7, #16]
 8015342:	3020      	adds	r0, #32
 8015344:	e7e5      	b.n	8015312 <__d2b+0x54>
 8015346:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801534a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801534e:	6030      	str	r0, [r6, #0]
 8015350:	6918      	ldr	r0, [r3, #16]
 8015352:	f7ff fdad 	bl	8014eb0 <__hi0bits>
 8015356:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801535a:	e7e1      	b.n	8015320 <__d2b+0x62>

0801535c <_calloc_r>:
 801535c:	b538      	push	{r3, r4, r5, lr}
 801535e:	fb02 f401 	mul.w	r4, r2, r1
 8015362:	4621      	mov	r1, r4
 8015364:	f7fd feb4 	bl	80130d0 <_malloc_r>
 8015368:	4605      	mov	r5, r0
 801536a:	b118      	cbz	r0, 8015374 <_calloc_r+0x18>
 801536c:	4622      	mov	r2, r4
 801536e:	2100      	movs	r1, #0
 8015370:	f7fd fe57 	bl	8013022 <memset>
 8015374:	4628      	mov	r0, r5
 8015376:	bd38      	pop	{r3, r4, r5, pc}

08015378 <__ssputs_r>:
 8015378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801537c:	688e      	ldr	r6, [r1, #8]
 801537e:	429e      	cmp	r6, r3
 8015380:	4682      	mov	sl, r0
 8015382:	460c      	mov	r4, r1
 8015384:	4690      	mov	r8, r2
 8015386:	4699      	mov	r9, r3
 8015388:	d837      	bhi.n	80153fa <__ssputs_r+0x82>
 801538a:	898a      	ldrh	r2, [r1, #12]
 801538c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015390:	d031      	beq.n	80153f6 <__ssputs_r+0x7e>
 8015392:	6825      	ldr	r5, [r4, #0]
 8015394:	6909      	ldr	r1, [r1, #16]
 8015396:	1a6f      	subs	r7, r5, r1
 8015398:	6965      	ldr	r5, [r4, #20]
 801539a:	2302      	movs	r3, #2
 801539c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80153a0:	fb95 f5f3 	sdiv	r5, r5, r3
 80153a4:	f109 0301 	add.w	r3, r9, #1
 80153a8:	443b      	add	r3, r7
 80153aa:	429d      	cmp	r5, r3
 80153ac:	bf38      	it	cc
 80153ae:	461d      	movcc	r5, r3
 80153b0:	0553      	lsls	r3, r2, #21
 80153b2:	d530      	bpl.n	8015416 <__ssputs_r+0x9e>
 80153b4:	4629      	mov	r1, r5
 80153b6:	f7fd fe8b 	bl	80130d0 <_malloc_r>
 80153ba:	4606      	mov	r6, r0
 80153bc:	b950      	cbnz	r0, 80153d4 <__ssputs_r+0x5c>
 80153be:	230c      	movs	r3, #12
 80153c0:	f8ca 3000 	str.w	r3, [sl]
 80153c4:	89a3      	ldrh	r3, [r4, #12]
 80153c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80153ca:	81a3      	strh	r3, [r4, #12]
 80153cc:	f04f 30ff 	mov.w	r0, #4294967295
 80153d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153d4:	463a      	mov	r2, r7
 80153d6:	6921      	ldr	r1, [r4, #16]
 80153d8:	f7fd fe18 	bl	801300c <memcpy>
 80153dc:	89a3      	ldrh	r3, [r4, #12]
 80153de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80153e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80153e6:	81a3      	strh	r3, [r4, #12]
 80153e8:	6126      	str	r6, [r4, #16]
 80153ea:	6165      	str	r5, [r4, #20]
 80153ec:	443e      	add	r6, r7
 80153ee:	1bed      	subs	r5, r5, r7
 80153f0:	6026      	str	r6, [r4, #0]
 80153f2:	60a5      	str	r5, [r4, #8]
 80153f4:	464e      	mov	r6, r9
 80153f6:	454e      	cmp	r6, r9
 80153f8:	d900      	bls.n	80153fc <__ssputs_r+0x84>
 80153fa:	464e      	mov	r6, r9
 80153fc:	4632      	mov	r2, r6
 80153fe:	4641      	mov	r1, r8
 8015400:	6820      	ldr	r0, [r4, #0]
 8015402:	f000 faf7 	bl	80159f4 <memmove>
 8015406:	68a3      	ldr	r3, [r4, #8]
 8015408:	1b9b      	subs	r3, r3, r6
 801540a:	60a3      	str	r3, [r4, #8]
 801540c:	6823      	ldr	r3, [r4, #0]
 801540e:	441e      	add	r6, r3
 8015410:	6026      	str	r6, [r4, #0]
 8015412:	2000      	movs	r0, #0
 8015414:	e7dc      	b.n	80153d0 <__ssputs_r+0x58>
 8015416:	462a      	mov	r2, r5
 8015418:	f000 fb05 	bl	8015a26 <_realloc_r>
 801541c:	4606      	mov	r6, r0
 801541e:	2800      	cmp	r0, #0
 8015420:	d1e2      	bne.n	80153e8 <__ssputs_r+0x70>
 8015422:	6921      	ldr	r1, [r4, #16]
 8015424:	4650      	mov	r0, sl
 8015426:	f7fd fe05 	bl	8013034 <_free_r>
 801542a:	e7c8      	b.n	80153be <__ssputs_r+0x46>

0801542c <_svfiprintf_r>:
 801542c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015430:	461d      	mov	r5, r3
 8015432:	898b      	ldrh	r3, [r1, #12]
 8015434:	061f      	lsls	r7, r3, #24
 8015436:	b09d      	sub	sp, #116	; 0x74
 8015438:	4680      	mov	r8, r0
 801543a:	460c      	mov	r4, r1
 801543c:	4616      	mov	r6, r2
 801543e:	d50f      	bpl.n	8015460 <_svfiprintf_r+0x34>
 8015440:	690b      	ldr	r3, [r1, #16]
 8015442:	b96b      	cbnz	r3, 8015460 <_svfiprintf_r+0x34>
 8015444:	2140      	movs	r1, #64	; 0x40
 8015446:	f7fd fe43 	bl	80130d0 <_malloc_r>
 801544a:	6020      	str	r0, [r4, #0]
 801544c:	6120      	str	r0, [r4, #16]
 801544e:	b928      	cbnz	r0, 801545c <_svfiprintf_r+0x30>
 8015450:	230c      	movs	r3, #12
 8015452:	f8c8 3000 	str.w	r3, [r8]
 8015456:	f04f 30ff 	mov.w	r0, #4294967295
 801545a:	e0c8      	b.n	80155ee <_svfiprintf_r+0x1c2>
 801545c:	2340      	movs	r3, #64	; 0x40
 801545e:	6163      	str	r3, [r4, #20]
 8015460:	2300      	movs	r3, #0
 8015462:	9309      	str	r3, [sp, #36]	; 0x24
 8015464:	2320      	movs	r3, #32
 8015466:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801546a:	2330      	movs	r3, #48	; 0x30
 801546c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015470:	9503      	str	r5, [sp, #12]
 8015472:	f04f 0b01 	mov.w	fp, #1
 8015476:	4637      	mov	r7, r6
 8015478:	463d      	mov	r5, r7
 801547a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801547e:	b10b      	cbz	r3, 8015484 <_svfiprintf_r+0x58>
 8015480:	2b25      	cmp	r3, #37	; 0x25
 8015482:	d13e      	bne.n	8015502 <_svfiprintf_r+0xd6>
 8015484:	ebb7 0a06 	subs.w	sl, r7, r6
 8015488:	d00b      	beq.n	80154a2 <_svfiprintf_r+0x76>
 801548a:	4653      	mov	r3, sl
 801548c:	4632      	mov	r2, r6
 801548e:	4621      	mov	r1, r4
 8015490:	4640      	mov	r0, r8
 8015492:	f7ff ff71 	bl	8015378 <__ssputs_r>
 8015496:	3001      	adds	r0, #1
 8015498:	f000 80a4 	beq.w	80155e4 <_svfiprintf_r+0x1b8>
 801549c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801549e:	4453      	add	r3, sl
 80154a0:	9309      	str	r3, [sp, #36]	; 0x24
 80154a2:	783b      	ldrb	r3, [r7, #0]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	f000 809d 	beq.w	80155e4 <_svfiprintf_r+0x1b8>
 80154aa:	2300      	movs	r3, #0
 80154ac:	f04f 32ff 	mov.w	r2, #4294967295
 80154b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80154b4:	9304      	str	r3, [sp, #16]
 80154b6:	9307      	str	r3, [sp, #28]
 80154b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80154bc:	931a      	str	r3, [sp, #104]	; 0x68
 80154be:	462f      	mov	r7, r5
 80154c0:	2205      	movs	r2, #5
 80154c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80154c6:	4850      	ldr	r0, [pc, #320]	; (8015608 <_svfiprintf_r+0x1dc>)
 80154c8:	f7ea fe62 	bl	8000190 <memchr>
 80154cc:	9b04      	ldr	r3, [sp, #16]
 80154ce:	b9d0      	cbnz	r0, 8015506 <_svfiprintf_r+0xda>
 80154d0:	06d9      	lsls	r1, r3, #27
 80154d2:	bf44      	itt	mi
 80154d4:	2220      	movmi	r2, #32
 80154d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80154da:	071a      	lsls	r2, r3, #28
 80154dc:	bf44      	itt	mi
 80154de:	222b      	movmi	r2, #43	; 0x2b
 80154e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80154e4:	782a      	ldrb	r2, [r5, #0]
 80154e6:	2a2a      	cmp	r2, #42	; 0x2a
 80154e8:	d015      	beq.n	8015516 <_svfiprintf_r+0xea>
 80154ea:	9a07      	ldr	r2, [sp, #28]
 80154ec:	462f      	mov	r7, r5
 80154ee:	2000      	movs	r0, #0
 80154f0:	250a      	movs	r5, #10
 80154f2:	4639      	mov	r1, r7
 80154f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80154f8:	3b30      	subs	r3, #48	; 0x30
 80154fa:	2b09      	cmp	r3, #9
 80154fc:	d94d      	bls.n	801559a <_svfiprintf_r+0x16e>
 80154fe:	b1b8      	cbz	r0, 8015530 <_svfiprintf_r+0x104>
 8015500:	e00f      	b.n	8015522 <_svfiprintf_r+0xf6>
 8015502:	462f      	mov	r7, r5
 8015504:	e7b8      	b.n	8015478 <_svfiprintf_r+0x4c>
 8015506:	4a40      	ldr	r2, [pc, #256]	; (8015608 <_svfiprintf_r+0x1dc>)
 8015508:	1a80      	subs	r0, r0, r2
 801550a:	fa0b f000 	lsl.w	r0, fp, r0
 801550e:	4318      	orrs	r0, r3
 8015510:	9004      	str	r0, [sp, #16]
 8015512:	463d      	mov	r5, r7
 8015514:	e7d3      	b.n	80154be <_svfiprintf_r+0x92>
 8015516:	9a03      	ldr	r2, [sp, #12]
 8015518:	1d11      	adds	r1, r2, #4
 801551a:	6812      	ldr	r2, [r2, #0]
 801551c:	9103      	str	r1, [sp, #12]
 801551e:	2a00      	cmp	r2, #0
 8015520:	db01      	blt.n	8015526 <_svfiprintf_r+0xfa>
 8015522:	9207      	str	r2, [sp, #28]
 8015524:	e004      	b.n	8015530 <_svfiprintf_r+0x104>
 8015526:	4252      	negs	r2, r2
 8015528:	f043 0302 	orr.w	r3, r3, #2
 801552c:	9207      	str	r2, [sp, #28]
 801552e:	9304      	str	r3, [sp, #16]
 8015530:	783b      	ldrb	r3, [r7, #0]
 8015532:	2b2e      	cmp	r3, #46	; 0x2e
 8015534:	d10c      	bne.n	8015550 <_svfiprintf_r+0x124>
 8015536:	787b      	ldrb	r3, [r7, #1]
 8015538:	2b2a      	cmp	r3, #42	; 0x2a
 801553a:	d133      	bne.n	80155a4 <_svfiprintf_r+0x178>
 801553c:	9b03      	ldr	r3, [sp, #12]
 801553e:	1d1a      	adds	r2, r3, #4
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	9203      	str	r2, [sp, #12]
 8015544:	2b00      	cmp	r3, #0
 8015546:	bfb8      	it	lt
 8015548:	f04f 33ff 	movlt.w	r3, #4294967295
 801554c:	3702      	adds	r7, #2
 801554e:	9305      	str	r3, [sp, #20]
 8015550:	4d2e      	ldr	r5, [pc, #184]	; (801560c <_svfiprintf_r+0x1e0>)
 8015552:	7839      	ldrb	r1, [r7, #0]
 8015554:	2203      	movs	r2, #3
 8015556:	4628      	mov	r0, r5
 8015558:	f7ea fe1a 	bl	8000190 <memchr>
 801555c:	b138      	cbz	r0, 801556e <_svfiprintf_r+0x142>
 801555e:	2340      	movs	r3, #64	; 0x40
 8015560:	1b40      	subs	r0, r0, r5
 8015562:	fa03 f000 	lsl.w	r0, r3, r0
 8015566:	9b04      	ldr	r3, [sp, #16]
 8015568:	4303      	orrs	r3, r0
 801556a:	3701      	adds	r7, #1
 801556c:	9304      	str	r3, [sp, #16]
 801556e:	7839      	ldrb	r1, [r7, #0]
 8015570:	4827      	ldr	r0, [pc, #156]	; (8015610 <_svfiprintf_r+0x1e4>)
 8015572:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015576:	2206      	movs	r2, #6
 8015578:	1c7e      	adds	r6, r7, #1
 801557a:	f7ea fe09 	bl	8000190 <memchr>
 801557e:	2800      	cmp	r0, #0
 8015580:	d038      	beq.n	80155f4 <_svfiprintf_r+0x1c8>
 8015582:	4b24      	ldr	r3, [pc, #144]	; (8015614 <_svfiprintf_r+0x1e8>)
 8015584:	bb13      	cbnz	r3, 80155cc <_svfiprintf_r+0x1a0>
 8015586:	9b03      	ldr	r3, [sp, #12]
 8015588:	3307      	adds	r3, #7
 801558a:	f023 0307 	bic.w	r3, r3, #7
 801558e:	3308      	adds	r3, #8
 8015590:	9303      	str	r3, [sp, #12]
 8015592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015594:	444b      	add	r3, r9
 8015596:	9309      	str	r3, [sp, #36]	; 0x24
 8015598:	e76d      	b.n	8015476 <_svfiprintf_r+0x4a>
 801559a:	fb05 3202 	mla	r2, r5, r2, r3
 801559e:	2001      	movs	r0, #1
 80155a0:	460f      	mov	r7, r1
 80155a2:	e7a6      	b.n	80154f2 <_svfiprintf_r+0xc6>
 80155a4:	2300      	movs	r3, #0
 80155a6:	3701      	adds	r7, #1
 80155a8:	9305      	str	r3, [sp, #20]
 80155aa:	4619      	mov	r1, r3
 80155ac:	250a      	movs	r5, #10
 80155ae:	4638      	mov	r0, r7
 80155b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80155b4:	3a30      	subs	r2, #48	; 0x30
 80155b6:	2a09      	cmp	r2, #9
 80155b8:	d903      	bls.n	80155c2 <_svfiprintf_r+0x196>
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d0c8      	beq.n	8015550 <_svfiprintf_r+0x124>
 80155be:	9105      	str	r1, [sp, #20]
 80155c0:	e7c6      	b.n	8015550 <_svfiprintf_r+0x124>
 80155c2:	fb05 2101 	mla	r1, r5, r1, r2
 80155c6:	2301      	movs	r3, #1
 80155c8:	4607      	mov	r7, r0
 80155ca:	e7f0      	b.n	80155ae <_svfiprintf_r+0x182>
 80155cc:	ab03      	add	r3, sp, #12
 80155ce:	9300      	str	r3, [sp, #0]
 80155d0:	4622      	mov	r2, r4
 80155d2:	4b11      	ldr	r3, [pc, #68]	; (8015618 <_svfiprintf_r+0x1ec>)
 80155d4:	a904      	add	r1, sp, #16
 80155d6:	4640      	mov	r0, r8
 80155d8:	f7fd fe68 	bl	80132ac <_printf_float>
 80155dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80155e0:	4681      	mov	r9, r0
 80155e2:	d1d6      	bne.n	8015592 <_svfiprintf_r+0x166>
 80155e4:	89a3      	ldrh	r3, [r4, #12]
 80155e6:	065b      	lsls	r3, r3, #25
 80155e8:	f53f af35 	bmi.w	8015456 <_svfiprintf_r+0x2a>
 80155ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80155ee:	b01d      	add	sp, #116	; 0x74
 80155f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155f4:	ab03      	add	r3, sp, #12
 80155f6:	9300      	str	r3, [sp, #0]
 80155f8:	4622      	mov	r2, r4
 80155fa:	4b07      	ldr	r3, [pc, #28]	; (8015618 <_svfiprintf_r+0x1ec>)
 80155fc:	a904      	add	r1, sp, #16
 80155fe:	4640      	mov	r0, r8
 8015600:	f7fe f90a 	bl	8013818 <_printf_i>
 8015604:	e7ea      	b.n	80155dc <_svfiprintf_r+0x1b0>
 8015606:	bf00      	nop
 8015608:	08017a04 	.word	0x08017a04
 801560c:	08017a0a 	.word	0x08017a0a
 8015610:	08017a0e 	.word	0x08017a0e
 8015614:	080132ad 	.word	0x080132ad
 8015618:	08015379 	.word	0x08015379

0801561c <__sfputc_r>:
 801561c:	6893      	ldr	r3, [r2, #8]
 801561e:	3b01      	subs	r3, #1
 8015620:	2b00      	cmp	r3, #0
 8015622:	b410      	push	{r4}
 8015624:	6093      	str	r3, [r2, #8]
 8015626:	da08      	bge.n	801563a <__sfputc_r+0x1e>
 8015628:	6994      	ldr	r4, [r2, #24]
 801562a:	42a3      	cmp	r3, r4
 801562c:	db01      	blt.n	8015632 <__sfputc_r+0x16>
 801562e:	290a      	cmp	r1, #10
 8015630:	d103      	bne.n	801563a <__sfputc_r+0x1e>
 8015632:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015636:	f7fe bac3 	b.w	8013bc0 <__swbuf_r>
 801563a:	6813      	ldr	r3, [r2, #0]
 801563c:	1c58      	adds	r0, r3, #1
 801563e:	6010      	str	r0, [r2, #0]
 8015640:	7019      	strb	r1, [r3, #0]
 8015642:	4608      	mov	r0, r1
 8015644:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015648:	4770      	bx	lr

0801564a <__sfputs_r>:
 801564a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801564c:	4606      	mov	r6, r0
 801564e:	460f      	mov	r7, r1
 8015650:	4614      	mov	r4, r2
 8015652:	18d5      	adds	r5, r2, r3
 8015654:	42ac      	cmp	r4, r5
 8015656:	d101      	bne.n	801565c <__sfputs_r+0x12>
 8015658:	2000      	movs	r0, #0
 801565a:	e007      	b.n	801566c <__sfputs_r+0x22>
 801565c:	463a      	mov	r2, r7
 801565e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015662:	4630      	mov	r0, r6
 8015664:	f7ff ffda 	bl	801561c <__sfputc_r>
 8015668:	1c43      	adds	r3, r0, #1
 801566a:	d1f3      	bne.n	8015654 <__sfputs_r+0xa>
 801566c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015670 <_vfiprintf_r>:
 8015670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015674:	460c      	mov	r4, r1
 8015676:	b09d      	sub	sp, #116	; 0x74
 8015678:	4617      	mov	r7, r2
 801567a:	461d      	mov	r5, r3
 801567c:	4606      	mov	r6, r0
 801567e:	b118      	cbz	r0, 8015688 <_vfiprintf_r+0x18>
 8015680:	6983      	ldr	r3, [r0, #24]
 8015682:	b90b      	cbnz	r3, 8015688 <_vfiprintf_r+0x18>
 8015684:	f7ff fa90 	bl	8014ba8 <__sinit>
 8015688:	4b7c      	ldr	r3, [pc, #496]	; (801587c <_vfiprintf_r+0x20c>)
 801568a:	429c      	cmp	r4, r3
 801568c:	d158      	bne.n	8015740 <_vfiprintf_r+0xd0>
 801568e:	6874      	ldr	r4, [r6, #4]
 8015690:	89a3      	ldrh	r3, [r4, #12]
 8015692:	0718      	lsls	r0, r3, #28
 8015694:	d55e      	bpl.n	8015754 <_vfiprintf_r+0xe4>
 8015696:	6923      	ldr	r3, [r4, #16]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d05b      	beq.n	8015754 <_vfiprintf_r+0xe4>
 801569c:	2300      	movs	r3, #0
 801569e:	9309      	str	r3, [sp, #36]	; 0x24
 80156a0:	2320      	movs	r3, #32
 80156a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80156a6:	2330      	movs	r3, #48	; 0x30
 80156a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80156ac:	9503      	str	r5, [sp, #12]
 80156ae:	f04f 0b01 	mov.w	fp, #1
 80156b2:	46b8      	mov	r8, r7
 80156b4:	4645      	mov	r5, r8
 80156b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80156ba:	b10b      	cbz	r3, 80156c0 <_vfiprintf_r+0x50>
 80156bc:	2b25      	cmp	r3, #37	; 0x25
 80156be:	d154      	bne.n	801576a <_vfiprintf_r+0xfa>
 80156c0:	ebb8 0a07 	subs.w	sl, r8, r7
 80156c4:	d00b      	beq.n	80156de <_vfiprintf_r+0x6e>
 80156c6:	4653      	mov	r3, sl
 80156c8:	463a      	mov	r2, r7
 80156ca:	4621      	mov	r1, r4
 80156cc:	4630      	mov	r0, r6
 80156ce:	f7ff ffbc 	bl	801564a <__sfputs_r>
 80156d2:	3001      	adds	r0, #1
 80156d4:	f000 80c2 	beq.w	801585c <_vfiprintf_r+0x1ec>
 80156d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156da:	4453      	add	r3, sl
 80156dc:	9309      	str	r3, [sp, #36]	; 0x24
 80156de:	f898 3000 	ldrb.w	r3, [r8]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	f000 80ba 	beq.w	801585c <_vfiprintf_r+0x1ec>
 80156e8:	2300      	movs	r3, #0
 80156ea:	f04f 32ff 	mov.w	r2, #4294967295
 80156ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80156f2:	9304      	str	r3, [sp, #16]
 80156f4:	9307      	str	r3, [sp, #28]
 80156f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80156fa:	931a      	str	r3, [sp, #104]	; 0x68
 80156fc:	46a8      	mov	r8, r5
 80156fe:	2205      	movs	r2, #5
 8015700:	f818 1b01 	ldrb.w	r1, [r8], #1
 8015704:	485e      	ldr	r0, [pc, #376]	; (8015880 <_vfiprintf_r+0x210>)
 8015706:	f7ea fd43 	bl	8000190 <memchr>
 801570a:	9b04      	ldr	r3, [sp, #16]
 801570c:	bb78      	cbnz	r0, 801576e <_vfiprintf_r+0xfe>
 801570e:	06d9      	lsls	r1, r3, #27
 8015710:	bf44      	itt	mi
 8015712:	2220      	movmi	r2, #32
 8015714:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015718:	071a      	lsls	r2, r3, #28
 801571a:	bf44      	itt	mi
 801571c:	222b      	movmi	r2, #43	; 0x2b
 801571e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015722:	782a      	ldrb	r2, [r5, #0]
 8015724:	2a2a      	cmp	r2, #42	; 0x2a
 8015726:	d02a      	beq.n	801577e <_vfiprintf_r+0x10e>
 8015728:	9a07      	ldr	r2, [sp, #28]
 801572a:	46a8      	mov	r8, r5
 801572c:	2000      	movs	r0, #0
 801572e:	250a      	movs	r5, #10
 8015730:	4641      	mov	r1, r8
 8015732:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015736:	3b30      	subs	r3, #48	; 0x30
 8015738:	2b09      	cmp	r3, #9
 801573a:	d969      	bls.n	8015810 <_vfiprintf_r+0x1a0>
 801573c:	b360      	cbz	r0, 8015798 <_vfiprintf_r+0x128>
 801573e:	e024      	b.n	801578a <_vfiprintf_r+0x11a>
 8015740:	4b50      	ldr	r3, [pc, #320]	; (8015884 <_vfiprintf_r+0x214>)
 8015742:	429c      	cmp	r4, r3
 8015744:	d101      	bne.n	801574a <_vfiprintf_r+0xda>
 8015746:	68b4      	ldr	r4, [r6, #8]
 8015748:	e7a2      	b.n	8015690 <_vfiprintf_r+0x20>
 801574a:	4b4f      	ldr	r3, [pc, #316]	; (8015888 <_vfiprintf_r+0x218>)
 801574c:	429c      	cmp	r4, r3
 801574e:	bf08      	it	eq
 8015750:	68f4      	ldreq	r4, [r6, #12]
 8015752:	e79d      	b.n	8015690 <_vfiprintf_r+0x20>
 8015754:	4621      	mov	r1, r4
 8015756:	4630      	mov	r0, r6
 8015758:	f7fe fa84 	bl	8013c64 <__swsetup_r>
 801575c:	2800      	cmp	r0, #0
 801575e:	d09d      	beq.n	801569c <_vfiprintf_r+0x2c>
 8015760:	f04f 30ff 	mov.w	r0, #4294967295
 8015764:	b01d      	add	sp, #116	; 0x74
 8015766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801576a:	46a8      	mov	r8, r5
 801576c:	e7a2      	b.n	80156b4 <_vfiprintf_r+0x44>
 801576e:	4a44      	ldr	r2, [pc, #272]	; (8015880 <_vfiprintf_r+0x210>)
 8015770:	1a80      	subs	r0, r0, r2
 8015772:	fa0b f000 	lsl.w	r0, fp, r0
 8015776:	4318      	orrs	r0, r3
 8015778:	9004      	str	r0, [sp, #16]
 801577a:	4645      	mov	r5, r8
 801577c:	e7be      	b.n	80156fc <_vfiprintf_r+0x8c>
 801577e:	9a03      	ldr	r2, [sp, #12]
 8015780:	1d11      	adds	r1, r2, #4
 8015782:	6812      	ldr	r2, [r2, #0]
 8015784:	9103      	str	r1, [sp, #12]
 8015786:	2a00      	cmp	r2, #0
 8015788:	db01      	blt.n	801578e <_vfiprintf_r+0x11e>
 801578a:	9207      	str	r2, [sp, #28]
 801578c:	e004      	b.n	8015798 <_vfiprintf_r+0x128>
 801578e:	4252      	negs	r2, r2
 8015790:	f043 0302 	orr.w	r3, r3, #2
 8015794:	9207      	str	r2, [sp, #28]
 8015796:	9304      	str	r3, [sp, #16]
 8015798:	f898 3000 	ldrb.w	r3, [r8]
 801579c:	2b2e      	cmp	r3, #46	; 0x2e
 801579e:	d10e      	bne.n	80157be <_vfiprintf_r+0x14e>
 80157a0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80157a4:	2b2a      	cmp	r3, #42	; 0x2a
 80157a6:	d138      	bne.n	801581a <_vfiprintf_r+0x1aa>
 80157a8:	9b03      	ldr	r3, [sp, #12]
 80157aa:	1d1a      	adds	r2, r3, #4
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	9203      	str	r2, [sp, #12]
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	bfb8      	it	lt
 80157b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80157b8:	f108 0802 	add.w	r8, r8, #2
 80157bc:	9305      	str	r3, [sp, #20]
 80157be:	4d33      	ldr	r5, [pc, #204]	; (801588c <_vfiprintf_r+0x21c>)
 80157c0:	f898 1000 	ldrb.w	r1, [r8]
 80157c4:	2203      	movs	r2, #3
 80157c6:	4628      	mov	r0, r5
 80157c8:	f7ea fce2 	bl	8000190 <memchr>
 80157cc:	b140      	cbz	r0, 80157e0 <_vfiprintf_r+0x170>
 80157ce:	2340      	movs	r3, #64	; 0x40
 80157d0:	1b40      	subs	r0, r0, r5
 80157d2:	fa03 f000 	lsl.w	r0, r3, r0
 80157d6:	9b04      	ldr	r3, [sp, #16]
 80157d8:	4303      	orrs	r3, r0
 80157da:	f108 0801 	add.w	r8, r8, #1
 80157de:	9304      	str	r3, [sp, #16]
 80157e0:	f898 1000 	ldrb.w	r1, [r8]
 80157e4:	482a      	ldr	r0, [pc, #168]	; (8015890 <_vfiprintf_r+0x220>)
 80157e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80157ea:	2206      	movs	r2, #6
 80157ec:	f108 0701 	add.w	r7, r8, #1
 80157f0:	f7ea fcce 	bl	8000190 <memchr>
 80157f4:	2800      	cmp	r0, #0
 80157f6:	d037      	beq.n	8015868 <_vfiprintf_r+0x1f8>
 80157f8:	4b26      	ldr	r3, [pc, #152]	; (8015894 <_vfiprintf_r+0x224>)
 80157fa:	bb1b      	cbnz	r3, 8015844 <_vfiprintf_r+0x1d4>
 80157fc:	9b03      	ldr	r3, [sp, #12]
 80157fe:	3307      	adds	r3, #7
 8015800:	f023 0307 	bic.w	r3, r3, #7
 8015804:	3308      	adds	r3, #8
 8015806:	9303      	str	r3, [sp, #12]
 8015808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801580a:	444b      	add	r3, r9
 801580c:	9309      	str	r3, [sp, #36]	; 0x24
 801580e:	e750      	b.n	80156b2 <_vfiprintf_r+0x42>
 8015810:	fb05 3202 	mla	r2, r5, r2, r3
 8015814:	2001      	movs	r0, #1
 8015816:	4688      	mov	r8, r1
 8015818:	e78a      	b.n	8015730 <_vfiprintf_r+0xc0>
 801581a:	2300      	movs	r3, #0
 801581c:	f108 0801 	add.w	r8, r8, #1
 8015820:	9305      	str	r3, [sp, #20]
 8015822:	4619      	mov	r1, r3
 8015824:	250a      	movs	r5, #10
 8015826:	4640      	mov	r0, r8
 8015828:	f810 2b01 	ldrb.w	r2, [r0], #1
 801582c:	3a30      	subs	r2, #48	; 0x30
 801582e:	2a09      	cmp	r2, #9
 8015830:	d903      	bls.n	801583a <_vfiprintf_r+0x1ca>
 8015832:	2b00      	cmp	r3, #0
 8015834:	d0c3      	beq.n	80157be <_vfiprintf_r+0x14e>
 8015836:	9105      	str	r1, [sp, #20]
 8015838:	e7c1      	b.n	80157be <_vfiprintf_r+0x14e>
 801583a:	fb05 2101 	mla	r1, r5, r1, r2
 801583e:	2301      	movs	r3, #1
 8015840:	4680      	mov	r8, r0
 8015842:	e7f0      	b.n	8015826 <_vfiprintf_r+0x1b6>
 8015844:	ab03      	add	r3, sp, #12
 8015846:	9300      	str	r3, [sp, #0]
 8015848:	4622      	mov	r2, r4
 801584a:	4b13      	ldr	r3, [pc, #76]	; (8015898 <_vfiprintf_r+0x228>)
 801584c:	a904      	add	r1, sp, #16
 801584e:	4630      	mov	r0, r6
 8015850:	f7fd fd2c 	bl	80132ac <_printf_float>
 8015854:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015858:	4681      	mov	r9, r0
 801585a:	d1d5      	bne.n	8015808 <_vfiprintf_r+0x198>
 801585c:	89a3      	ldrh	r3, [r4, #12]
 801585e:	065b      	lsls	r3, r3, #25
 8015860:	f53f af7e 	bmi.w	8015760 <_vfiprintf_r+0xf0>
 8015864:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015866:	e77d      	b.n	8015764 <_vfiprintf_r+0xf4>
 8015868:	ab03      	add	r3, sp, #12
 801586a:	9300      	str	r3, [sp, #0]
 801586c:	4622      	mov	r2, r4
 801586e:	4b0a      	ldr	r3, [pc, #40]	; (8015898 <_vfiprintf_r+0x228>)
 8015870:	a904      	add	r1, sp, #16
 8015872:	4630      	mov	r0, r6
 8015874:	f7fd ffd0 	bl	8013818 <_printf_i>
 8015878:	e7ec      	b.n	8015854 <_vfiprintf_r+0x1e4>
 801587a:	bf00      	nop
 801587c:	080178c4 	.word	0x080178c4
 8015880:	08017a04 	.word	0x08017a04
 8015884:	080178e4 	.word	0x080178e4
 8015888:	080178a4 	.word	0x080178a4
 801588c:	08017a0a 	.word	0x08017a0a
 8015890:	08017a0e 	.word	0x08017a0e
 8015894:	080132ad 	.word	0x080132ad
 8015898:	0801564b 	.word	0x0801564b

0801589c <__sread>:
 801589c:	b510      	push	{r4, lr}
 801589e:	460c      	mov	r4, r1
 80158a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80158a4:	f000 f8e6 	bl	8015a74 <_read_r>
 80158a8:	2800      	cmp	r0, #0
 80158aa:	bfab      	itete	ge
 80158ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80158ae:	89a3      	ldrhlt	r3, [r4, #12]
 80158b0:	181b      	addge	r3, r3, r0
 80158b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80158b6:	bfac      	ite	ge
 80158b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80158ba:	81a3      	strhlt	r3, [r4, #12]
 80158bc:	bd10      	pop	{r4, pc}

080158be <__swrite>:
 80158be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158c2:	461f      	mov	r7, r3
 80158c4:	898b      	ldrh	r3, [r1, #12]
 80158c6:	05db      	lsls	r3, r3, #23
 80158c8:	4605      	mov	r5, r0
 80158ca:	460c      	mov	r4, r1
 80158cc:	4616      	mov	r6, r2
 80158ce:	d505      	bpl.n	80158dc <__swrite+0x1e>
 80158d0:	2302      	movs	r3, #2
 80158d2:	2200      	movs	r2, #0
 80158d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80158d8:	f000 f868 	bl	80159ac <_lseek_r>
 80158dc:	89a3      	ldrh	r3, [r4, #12]
 80158de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80158e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80158e6:	81a3      	strh	r3, [r4, #12]
 80158e8:	4632      	mov	r2, r6
 80158ea:	463b      	mov	r3, r7
 80158ec:	4628      	mov	r0, r5
 80158ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80158f2:	f000 b817 	b.w	8015924 <_write_r>

080158f6 <__sseek>:
 80158f6:	b510      	push	{r4, lr}
 80158f8:	460c      	mov	r4, r1
 80158fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80158fe:	f000 f855 	bl	80159ac <_lseek_r>
 8015902:	1c43      	adds	r3, r0, #1
 8015904:	89a3      	ldrh	r3, [r4, #12]
 8015906:	bf15      	itete	ne
 8015908:	6560      	strne	r0, [r4, #84]	; 0x54
 801590a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801590e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015912:	81a3      	strheq	r3, [r4, #12]
 8015914:	bf18      	it	ne
 8015916:	81a3      	strhne	r3, [r4, #12]
 8015918:	bd10      	pop	{r4, pc}

0801591a <__sclose>:
 801591a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801591e:	f000 b813 	b.w	8015948 <_close_r>
	...

08015924 <_write_r>:
 8015924:	b538      	push	{r3, r4, r5, lr}
 8015926:	4c07      	ldr	r4, [pc, #28]	; (8015944 <_write_r+0x20>)
 8015928:	4605      	mov	r5, r0
 801592a:	4608      	mov	r0, r1
 801592c:	4611      	mov	r1, r2
 801592e:	2200      	movs	r2, #0
 8015930:	6022      	str	r2, [r4, #0]
 8015932:	461a      	mov	r2, r3
 8015934:	f7f8 fbfe 	bl	800e134 <_write>
 8015938:	1c43      	adds	r3, r0, #1
 801593a:	d102      	bne.n	8015942 <_write_r+0x1e>
 801593c:	6823      	ldr	r3, [r4, #0]
 801593e:	b103      	cbz	r3, 8015942 <_write_r+0x1e>
 8015940:	602b      	str	r3, [r5, #0]
 8015942:	bd38      	pop	{r3, r4, r5, pc}
 8015944:	200060b4 	.word	0x200060b4

08015948 <_close_r>:
 8015948:	b538      	push	{r3, r4, r5, lr}
 801594a:	4c06      	ldr	r4, [pc, #24]	; (8015964 <_close_r+0x1c>)
 801594c:	2300      	movs	r3, #0
 801594e:	4605      	mov	r5, r0
 8015950:	4608      	mov	r0, r1
 8015952:	6023      	str	r3, [r4, #0]
 8015954:	f7f0 fa0f 	bl	8005d76 <_close>
 8015958:	1c43      	adds	r3, r0, #1
 801595a:	d102      	bne.n	8015962 <_close_r+0x1a>
 801595c:	6823      	ldr	r3, [r4, #0]
 801595e:	b103      	cbz	r3, 8015962 <_close_r+0x1a>
 8015960:	602b      	str	r3, [r5, #0]
 8015962:	bd38      	pop	{r3, r4, r5, pc}
 8015964:	200060b4 	.word	0x200060b4

08015968 <_fstat_r>:
 8015968:	b538      	push	{r3, r4, r5, lr}
 801596a:	4c07      	ldr	r4, [pc, #28]	; (8015988 <_fstat_r+0x20>)
 801596c:	2300      	movs	r3, #0
 801596e:	4605      	mov	r5, r0
 8015970:	4608      	mov	r0, r1
 8015972:	4611      	mov	r1, r2
 8015974:	6023      	str	r3, [r4, #0]
 8015976:	f7f0 fa0a 	bl	8005d8e <_fstat>
 801597a:	1c43      	adds	r3, r0, #1
 801597c:	d102      	bne.n	8015984 <_fstat_r+0x1c>
 801597e:	6823      	ldr	r3, [r4, #0]
 8015980:	b103      	cbz	r3, 8015984 <_fstat_r+0x1c>
 8015982:	602b      	str	r3, [r5, #0]
 8015984:	bd38      	pop	{r3, r4, r5, pc}
 8015986:	bf00      	nop
 8015988:	200060b4 	.word	0x200060b4

0801598c <_isatty_r>:
 801598c:	b538      	push	{r3, r4, r5, lr}
 801598e:	4c06      	ldr	r4, [pc, #24]	; (80159a8 <_isatty_r+0x1c>)
 8015990:	2300      	movs	r3, #0
 8015992:	4605      	mov	r5, r0
 8015994:	4608      	mov	r0, r1
 8015996:	6023      	str	r3, [r4, #0]
 8015998:	f7f0 fa09 	bl	8005dae <_isatty>
 801599c:	1c43      	adds	r3, r0, #1
 801599e:	d102      	bne.n	80159a6 <_isatty_r+0x1a>
 80159a0:	6823      	ldr	r3, [r4, #0]
 80159a2:	b103      	cbz	r3, 80159a6 <_isatty_r+0x1a>
 80159a4:	602b      	str	r3, [r5, #0]
 80159a6:	bd38      	pop	{r3, r4, r5, pc}
 80159a8:	200060b4 	.word	0x200060b4

080159ac <_lseek_r>:
 80159ac:	b538      	push	{r3, r4, r5, lr}
 80159ae:	4c07      	ldr	r4, [pc, #28]	; (80159cc <_lseek_r+0x20>)
 80159b0:	4605      	mov	r5, r0
 80159b2:	4608      	mov	r0, r1
 80159b4:	4611      	mov	r1, r2
 80159b6:	2200      	movs	r2, #0
 80159b8:	6022      	str	r2, [r4, #0]
 80159ba:	461a      	mov	r2, r3
 80159bc:	f7f0 fa02 	bl	8005dc4 <_lseek>
 80159c0:	1c43      	adds	r3, r0, #1
 80159c2:	d102      	bne.n	80159ca <_lseek_r+0x1e>
 80159c4:	6823      	ldr	r3, [r4, #0]
 80159c6:	b103      	cbz	r3, 80159ca <_lseek_r+0x1e>
 80159c8:	602b      	str	r3, [r5, #0]
 80159ca:	bd38      	pop	{r3, r4, r5, pc}
 80159cc:	200060b4 	.word	0x200060b4

080159d0 <__ascii_mbtowc>:
 80159d0:	b082      	sub	sp, #8
 80159d2:	b901      	cbnz	r1, 80159d6 <__ascii_mbtowc+0x6>
 80159d4:	a901      	add	r1, sp, #4
 80159d6:	b142      	cbz	r2, 80159ea <__ascii_mbtowc+0x1a>
 80159d8:	b14b      	cbz	r3, 80159ee <__ascii_mbtowc+0x1e>
 80159da:	7813      	ldrb	r3, [r2, #0]
 80159dc:	600b      	str	r3, [r1, #0]
 80159de:	7812      	ldrb	r2, [r2, #0]
 80159e0:	1c10      	adds	r0, r2, #0
 80159e2:	bf18      	it	ne
 80159e4:	2001      	movne	r0, #1
 80159e6:	b002      	add	sp, #8
 80159e8:	4770      	bx	lr
 80159ea:	4610      	mov	r0, r2
 80159ec:	e7fb      	b.n	80159e6 <__ascii_mbtowc+0x16>
 80159ee:	f06f 0001 	mvn.w	r0, #1
 80159f2:	e7f8      	b.n	80159e6 <__ascii_mbtowc+0x16>

080159f4 <memmove>:
 80159f4:	4288      	cmp	r0, r1
 80159f6:	b510      	push	{r4, lr}
 80159f8:	eb01 0302 	add.w	r3, r1, r2
 80159fc:	d807      	bhi.n	8015a0e <memmove+0x1a>
 80159fe:	1e42      	subs	r2, r0, #1
 8015a00:	4299      	cmp	r1, r3
 8015a02:	d00a      	beq.n	8015a1a <memmove+0x26>
 8015a04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015a08:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015a0c:	e7f8      	b.n	8015a00 <memmove+0xc>
 8015a0e:	4283      	cmp	r3, r0
 8015a10:	d9f5      	bls.n	80159fe <memmove+0xa>
 8015a12:	1881      	adds	r1, r0, r2
 8015a14:	1ad2      	subs	r2, r2, r3
 8015a16:	42d3      	cmn	r3, r2
 8015a18:	d100      	bne.n	8015a1c <memmove+0x28>
 8015a1a:	bd10      	pop	{r4, pc}
 8015a1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015a20:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015a24:	e7f7      	b.n	8015a16 <memmove+0x22>

08015a26 <_realloc_r>:
 8015a26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a28:	4607      	mov	r7, r0
 8015a2a:	4614      	mov	r4, r2
 8015a2c:	460e      	mov	r6, r1
 8015a2e:	b921      	cbnz	r1, 8015a3a <_realloc_r+0x14>
 8015a30:	4611      	mov	r1, r2
 8015a32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015a36:	f7fd bb4b 	b.w	80130d0 <_malloc_r>
 8015a3a:	b922      	cbnz	r2, 8015a46 <_realloc_r+0x20>
 8015a3c:	f7fd fafa 	bl	8013034 <_free_r>
 8015a40:	4625      	mov	r5, r4
 8015a42:	4628      	mov	r0, r5
 8015a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a46:	f000 f834 	bl	8015ab2 <_malloc_usable_size_r>
 8015a4a:	42a0      	cmp	r0, r4
 8015a4c:	d20f      	bcs.n	8015a6e <_realloc_r+0x48>
 8015a4e:	4621      	mov	r1, r4
 8015a50:	4638      	mov	r0, r7
 8015a52:	f7fd fb3d 	bl	80130d0 <_malloc_r>
 8015a56:	4605      	mov	r5, r0
 8015a58:	2800      	cmp	r0, #0
 8015a5a:	d0f2      	beq.n	8015a42 <_realloc_r+0x1c>
 8015a5c:	4631      	mov	r1, r6
 8015a5e:	4622      	mov	r2, r4
 8015a60:	f7fd fad4 	bl	801300c <memcpy>
 8015a64:	4631      	mov	r1, r6
 8015a66:	4638      	mov	r0, r7
 8015a68:	f7fd fae4 	bl	8013034 <_free_r>
 8015a6c:	e7e9      	b.n	8015a42 <_realloc_r+0x1c>
 8015a6e:	4635      	mov	r5, r6
 8015a70:	e7e7      	b.n	8015a42 <_realloc_r+0x1c>
	...

08015a74 <_read_r>:
 8015a74:	b538      	push	{r3, r4, r5, lr}
 8015a76:	4c07      	ldr	r4, [pc, #28]	; (8015a94 <_read_r+0x20>)
 8015a78:	4605      	mov	r5, r0
 8015a7a:	4608      	mov	r0, r1
 8015a7c:	4611      	mov	r1, r2
 8015a7e:	2200      	movs	r2, #0
 8015a80:	6022      	str	r2, [r4, #0]
 8015a82:	461a      	mov	r2, r3
 8015a84:	f7f0 f95a 	bl	8005d3c <_read>
 8015a88:	1c43      	adds	r3, r0, #1
 8015a8a:	d102      	bne.n	8015a92 <_read_r+0x1e>
 8015a8c:	6823      	ldr	r3, [r4, #0]
 8015a8e:	b103      	cbz	r3, 8015a92 <_read_r+0x1e>
 8015a90:	602b      	str	r3, [r5, #0]
 8015a92:	bd38      	pop	{r3, r4, r5, pc}
 8015a94:	200060b4 	.word	0x200060b4

08015a98 <__ascii_wctomb>:
 8015a98:	b149      	cbz	r1, 8015aae <__ascii_wctomb+0x16>
 8015a9a:	2aff      	cmp	r2, #255	; 0xff
 8015a9c:	bf85      	ittet	hi
 8015a9e:	238a      	movhi	r3, #138	; 0x8a
 8015aa0:	6003      	strhi	r3, [r0, #0]
 8015aa2:	700a      	strbls	r2, [r1, #0]
 8015aa4:	f04f 30ff 	movhi.w	r0, #4294967295
 8015aa8:	bf98      	it	ls
 8015aaa:	2001      	movls	r0, #1
 8015aac:	4770      	bx	lr
 8015aae:	4608      	mov	r0, r1
 8015ab0:	4770      	bx	lr

08015ab2 <_malloc_usable_size_r>:
 8015ab2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ab6:	1f18      	subs	r0, r3, #4
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	bfbc      	itt	lt
 8015abc:	580b      	ldrlt	r3, [r1, r0]
 8015abe:	18c0      	addlt	r0, r0, r3
 8015ac0:	4770      	bx	lr
	...

08015ac4 <round>:
 8015ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ac6:	ec57 6b10 	vmov	r6, r7, d0
 8015aca:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8015ace:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8015ad2:	2c13      	cmp	r4, #19
 8015ad4:	463b      	mov	r3, r7
 8015ad6:	463d      	mov	r5, r7
 8015ad8:	dc17      	bgt.n	8015b0a <round+0x46>
 8015ada:	2c00      	cmp	r4, #0
 8015adc:	da09      	bge.n	8015af2 <round+0x2e>
 8015ade:	3401      	adds	r4, #1
 8015ae0:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8015ae4:	d103      	bne.n	8015aee <round+0x2a>
 8015ae6:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8015aea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015aee:	2100      	movs	r1, #0
 8015af0:	e02c      	b.n	8015b4c <round+0x88>
 8015af2:	4a18      	ldr	r2, [pc, #96]	; (8015b54 <round+0x90>)
 8015af4:	4122      	asrs	r2, r4
 8015af6:	4217      	tst	r7, r2
 8015af8:	d100      	bne.n	8015afc <round+0x38>
 8015afa:	b19e      	cbz	r6, 8015b24 <round+0x60>
 8015afc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8015b00:	4123      	asrs	r3, r4
 8015b02:	442b      	add	r3, r5
 8015b04:	ea23 0302 	bic.w	r3, r3, r2
 8015b08:	e7f1      	b.n	8015aee <round+0x2a>
 8015b0a:	2c33      	cmp	r4, #51	; 0x33
 8015b0c:	dd0d      	ble.n	8015b2a <round+0x66>
 8015b0e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8015b12:	d107      	bne.n	8015b24 <round+0x60>
 8015b14:	4630      	mov	r0, r6
 8015b16:	4639      	mov	r1, r7
 8015b18:	ee10 2a10 	vmov	r2, s0
 8015b1c:	f7ea fb8e 	bl	800023c <__adddf3>
 8015b20:	4606      	mov	r6, r0
 8015b22:	460f      	mov	r7, r1
 8015b24:	ec47 6b10 	vmov	d0, r6, r7
 8015b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b2a:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8015b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8015b32:	40d0      	lsrs	r0, r2
 8015b34:	4206      	tst	r6, r0
 8015b36:	d0f5      	beq.n	8015b24 <round+0x60>
 8015b38:	2201      	movs	r2, #1
 8015b3a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8015b3e:	fa02 f404 	lsl.w	r4, r2, r4
 8015b42:	1931      	adds	r1, r6, r4
 8015b44:	bf28      	it	cs
 8015b46:	189b      	addcs	r3, r3, r2
 8015b48:	ea21 0100 	bic.w	r1, r1, r0
 8015b4c:	461f      	mov	r7, r3
 8015b4e:	460e      	mov	r6, r1
 8015b50:	e7e8      	b.n	8015b24 <round+0x60>
 8015b52:	bf00      	nop
 8015b54:	000fffff 	.word	0x000fffff

08015b58 <_init>:
 8015b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b5a:	bf00      	nop
 8015b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b5e:	bc08      	pop	{r3}
 8015b60:	469e      	mov	lr, r3
 8015b62:	4770      	bx	lr

08015b64 <_fini>:
 8015b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b66:	bf00      	nop
 8015b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b6a:	bc08      	pop	{r3}
 8015b6c:	469e      	mov	lr, r3
 8015b6e:	4770      	bx	lr
