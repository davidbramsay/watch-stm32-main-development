
Watch_BLEFreeRTOS_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015e80  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002030  08015fc0  08015fc0  00025fc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017ff0  08017ff0  00027ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017ff8  08017ff8  00027ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017ffc  08017ffc  00027ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001fc  20000004  08018000  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_APP_CONTEXT 00000090  20000200  080181fc  00030200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 TIMERSERVER_CONTEXT 00000099  20000290  0801828c  00030290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_DRIVER_CONTEXT 0000003e  2000032c  08018325  0003032c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 SYSTEM_DRIVER_CONTEXT 00000011  2000036c  08018363  0003036c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004978  20000380  08018374  00030380  2**2
                  ALLOC
 12 ._user_heap_stack 00001400  20004cf8  08018374  00034cf8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0003037d  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 15 MB_MEM1       000001b8  20030028  20030028  00040000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00040000  2**2
                  ALLOC
 17 .debug_info   000557dd  00000000  00000000  000303ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 00009192  00000000  00000000  00085b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00003b60  00000000  00000000  0008ed20  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00003780  00000000  00000000  00092880  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  00033696  00000000  00000000  00096000  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   000374b5  00000000  00000000  000c9696  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    00112a88  00000000  00000000  00100b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  002135d3  2**0
                  CONTENTS, READONLY
 25 .debug_frame  000108c0  00000000  00000000  00213650  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000380 	.word	0x20000380
 800015c:	00000000 	.word	0x00000000
 8000160:	08015fa8 	.word	0x08015fa8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000384 	.word	0x20000384
 800017c:	08015fa8 	.word	0x08015fa8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800036e:	f1a4 0401 	sub.w	r4, r4, #1
 8000372:	d1e9      	bne.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b972 	b.w	8000e54 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9e08      	ldr	r6, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	4688      	mov	r8, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d14b      	bne.n	8000c2e <__udivmoddi4+0xa6>
 8000b96:	428a      	cmp	r2, r1
 8000b98:	4615      	mov	r5, r2
 8000b9a:	d967      	bls.n	8000c6c <__udivmoddi4+0xe4>
 8000b9c:	fab2 f282 	clz	r2, r2
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0720 	rsb	r7, r2, #32
 8000ba6:	fa01 f302 	lsl.w	r3, r1, r2
 8000baa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bae:	4095      	lsls	r5, r2
 8000bb0:	ea47 0803 	orr.w	r8, r7, r3
 8000bb4:	4094      	lsls	r4, r2
 8000bb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bba:	0c23      	lsrs	r3, r4, #16
 8000bbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bc0:	fa1f fc85 	uxth.w	ip, r5
 8000bc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bcc:	fb07 f10c 	mul.w	r1, r7, ip
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x60>
 8000bd4:	18eb      	adds	r3, r5, r3
 8000bd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bda:	f080 811b 	bcs.w	8000e14 <__udivmoddi4+0x28c>
 8000bde:	4299      	cmp	r1, r3
 8000be0:	f240 8118 	bls.w	8000e14 <__udivmoddi4+0x28c>
 8000be4:	3f02      	subs	r7, #2
 8000be6:	442b      	add	r3, r5
 8000be8:	1a5b      	subs	r3, r3, r1
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bfc:	45a4      	cmp	ip, r4
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x8c>
 8000c00:	192c      	adds	r4, r5, r4
 8000c02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c06:	f080 8107 	bcs.w	8000e18 <__udivmoddi4+0x290>
 8000c0a:	45a4      	cmp	ip, r4
 8000c0c:	f240 8104 	bls.w	8000e18 <__udivmoddi4+0x290>
 8000c10:	3802      	subs	r0, #2
 8000c12:	442c      	add	r4, r5
 8000c14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c18:	eba4 040c 	sub.w	r4, r4, ip
 8000c1c:	2700      	movs	r7, #0
 8000c1e:	b11e      	cbz	r6, 8000c28 <__udivmoddi4+0xa0>
 8000c20:	40d4      	lsrs	r4, r2
 8000c22:	2300      	movs	r3, #0
 8000c24:	e9c6 4300 	strd	r4, r3, [r6]
 8000c28:	4639      	mov	r1, r7
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d909      	bls.n	8000c46 <__udivmoddi4+0xbe>
 8000c32:	2e00      	cmp	r6, #0
 8000c34:	f000 80eb 	beq.w	8000e0e <__udivmoddi4+0x286>
 8000c38:	2700      	movs	r7, #0
 8000c3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c3e:	4638      	mov	r0, r7
 8000c40:	4639      	mov	r1, r7
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	fab3 f783 	clz	r7, r3
 8000c4a:	2f00      	cmp	r7, #0
 8000c4c:	d147      	bne.n	8000cde <__udivmoddi4+0x156>
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d302      	bcc.n	8000c58 <__udivmoddi4+0xd0>
 8000c52:	4282      	cmp	r2, r0
 8000c54:	f200 80fa 	bhi.w	8000e4c <__udivmoddi4+0x2c4>
 8000c58:	1a84      	subs	r4, r0, r2
 8000c5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5e:	2001      	movs	r0, #1
 8000c60:	4698      	mov	r8, r3
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	d0e0      	beq.n	8000c28 <__udivmoddi4+0xa0>
 8000c66:	e9c6 4800 	strd	r4, r8, [r6]
 8000c6a:	e7dd      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000c6c:	b902      	cbnz	r2, 8000c70 <__udivmoddi4+0xe8>
 8000c6e:	deff      	udf	#255	; 0xff
 8000c70:	fab2 f282 	clz	r2, r2
 8000c74:	2a00      	cmp	r2, #0
 8000c76:	f040 808f 	bne.w	8000d98 <__udivmoddi4+0x210>
 8000c7a:	1b49      	subs	r1, r1, r5
 8000c7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c80:	fa1f f885 	uxth.w	r8, r5
 8000c84:	2701      	movs	r7, #1
 8000c86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c94:	fb08 f10c 	mul.w	r1, r8, ip
 8000c98:	4299      	cmp	r1, r3
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0x124>
 8000c9c:	18eb      	adds	r3, r5, r3
 8000c9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x122>
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	f200 80cd 	bhi.w	8000e44 <__udivmoddi4+0x2bc>
 8000caa:	4684      	mov	ip, r0
 8000cac:	1a59      	subs	r1, r3, r1
 8000cae:	b2a3      	uxth	r3, r4
 8000cb0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cb8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cbc:	fb08 f800 	mul.w	r8, r8, r0
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x14c>
 8000cc4:	192c      	adds	r4, r5, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x14a>
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	f200 80b6 	bhi.w	8000e3e <__udivmoddi4+0x2b6>
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	eba4 0408 	sub.w	r4, r4, r8
 8000cd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cdc:	e79f      	b.n	8000c1e <__udivmoddi4+0x96>
 8000cde:	f1c7 0c20 	rsb	ip, r7, #32
 8000ce2:	40bb      	lsls	r3, r7
 8000ce4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ce8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cec:	fa01 f407 	lsl.w	r4, r1, r7
 8000cf0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cf4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cf8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cfc:	4325      	orrs	r5, r4
 8000cfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d02:	0c2c      	lsrs	r4, r5, #16
 8000d04:	fb08 3319 	mls	r3, r8, r9, r3
 8000d08:	fa1f fa8e 	uxth.w	sl, lr
 8000d0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d10:	fb09 f40a 	mul.w	r4, r9, sl
 8000d14:	429c      	cmp	r4, r3
 8000d16:	fa02 f207 	lsl.w	r2, r2, r7
 8000d1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b0>
 8000d20:	eb1e 0303 	adds.w	r3, lr, r3
 8000d24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d28:	f080 8087 	bcs.w	8000e3a <__udivmoddi4+0x2b2>
 8000d2c:	429c      	cmp	r4, r3
 8000d2e:	f240 8084 	bls.w	8000e3a <__udivmoddi4+0x2b2>
 8000d32:	f1a9 0902 	sub.w	r9, r9, #2
 8000d36:	4473      	add	r3, lr
 8000d38:	1b1b      	subs	r3, r3, r4
 8000d3a:	b2ad      	uxth	r5, r5
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d4c:	45a2      	cmp	sl, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1da>
 8000d50:	eb1e 0404 	adds.w	r4, lr, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d58:	d26b      	bcs.n	8000e32 <__udivmoddi4+0x2aa>
 8000d5a:	45a2      	cmp	sl, r4
 8000d5c:	d969      	bls.n	8000e32 <__udivmoddi4+0x2aa>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4474      	add	r4, lr
 8000d62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d66:	fba0 8902 	umull	r8, r9, r0, r2
 8000d6a:	eba4 040a 	sub.w	r4, r4, sl
 8000d6e:	454c      	cmp	r4, r9
 8000d70:	46c2      	mov	sl, r8
 8000d72:	464b      	mov	r3, r9
 8000d74:	d354      	bcc.n	8000e20 <__udivmoddi4+0x298>
 8000d76:	d051      	beq.n	8000e1c <__udivmoddi4+0x294>
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d069      	beq.n	8000e50 <__udivmoddi4+0x2c8>
 8000d7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d80:	eb64 0403 	sbc.w	r4, r4, r3
 8000d84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d88:	40fd      	lsrs	r5, r7
 8000d8a:	40fc      	lsrs	r4, r7
 8000d8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000d90:	e9c6 5400 	strd	r5, r4, [r6]
 8000d94:	2700      	movs	r7, #0
 8000d96:	e747      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000d98:	f1c2 0320 	rsb	r3, r2, #32
 8000d9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000da0:	4095      	lsls	r5, r2
 8000da2:	fa01 f002 	lsl.w	r0, r1, r2
 8000da6:	fa21 f303 	lsr.w	r3, r1, r3
 8000daa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dae:	4338      	orrs	r0, r7
 8000db0:	0c01      	lsrs	r1, r0, #16
 8000db2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000db6:	fa1f f885 	uxth.w	r8, r5
 8000dba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc2:	fb07 f308 	mul.w	r3, r7, r8
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d907      	bls.n	8000dde <__udivmoddi4+0x256>
 8000dce:	1869      	adds	r1, r5, r1
 8000dd0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dd4:	d22f      	bcs.n	8000e36 <__udivmoddi4+0x2ae>
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	d92d      	bls.n	8000e36 <__udivmoddi4+0x2ae>
 8000dda:	3f02      	subs	r7, #2
 8000ddc:	4429      	add	r1, r5
 8000dde:	1acb      	subs	r3, r1, r3
 8000de0:	b281      	uxth	r1, r0
 8000de2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dee:	fb00 f308 	mul.w	r3, r0, r8
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d907      	bls.n	8000e06 <__udivmoddi4+0x27e>
 8000df6:	1869      	adds	r1, r5, r1
 8000df8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dfc:	d217      	bcs.n	8000e2e <__udivmoddi4+0x2a6>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d915      	bls.n	8000e2e <__udivmoddi4+0x2a6>
 8000e02:	3802      	subs	r0, #2
 8000e04:	4429      	add	r1, r5
 8000e06:	1ac9      	subs	r1, r1, r3
 8000e08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e0c:	e73b      	b.n	8000c86 <__udivmoddi4+0xfe>
 8000e0e:	4637      	mov	r7, r6
 8000e10:	4630      	mov	r0, r6
 8000e12:	e709      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000e14:	4607      	mov	r7, r0
 8000e16:	e6e7      	b.n	8000be8 <__udivmoddi4+0x60>
 8000e18:	4618      	mov	r0, r3
 8000e1a:	e6fb      	b.n	8000c14 <__udivmoddi4+0x8c>
 8000e1c:	4541      	cmp	r1, r8
 8000e1e:	d2ab      	bcs.n	8000d78 <__udivmoddi4+0x1f0>
 8000e20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e24:	eb69 020e 	sbc.w	r2, r9, lr
 8000e28:	3801      	subs	r0, #1
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	e7a4      	b.n	8000d78 <__udivmoddi4+0x1f0>
 8000e2e:	4660      	mov	r0, ip
 8000e30:	e7e9      	b.n	8000e06 <__udivmoddi4+0x27e>
 8000e32:	4618      	mov	r0, r3
 8000e34:	e795      	b.n	8000d62 <__udivmoddi4+0x1da>
 8000e36:	4667      	mov	r7, ip
 8000e38:	e7d1      	b.n	8000dde <__udivmoddi4+0x256>
 8000e3a:	4681      	mov	r9, r0
 8000e3c:	e77c      	b.n	8000d38 <__udivmoddi4+0x1b0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	442c      	add	r4, r5
 8000e42:	e747      	b.n	8000cd4 <__udivmoddi4+0x14c>
 8000e44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e48:	442b      	add	r3, r5
 8000e4a:	e72f      	b.n	8000cac <__udivmoddi4+0x124>
 8000e4c:	4638      	mov	r0, r7
 8000e4e:	e708      	b.n	8000c62 <__udivmoddi4+0xda>
 8000e50:	4637      	mov	r7, r6
 8000e52:	e6e9      	b.n	8000c28 <__udivmoddi4+0xa0>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <LL_FLASH_GetUDN+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	1fff7580 	.word	0x1fff7580

08000e70 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <LL_FLASH_GetDeviceID+0x14>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	b2db      	uxtb	r3, r3
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	1fff7584 	.word	0x1fff7584

08000e88 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <LL_FLASH_GetSTCompanyID+0x14>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	0a1b      	lsrs	r3, r3, #8
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	1fff7584 	.word	0x1fff7584

08000ea0 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8000ea0:	b5b0      	push	{r4, r5, r7, lr}
 8000ea2:	b08c      	sub	sp, #48	; 0x30
 8000ea4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8000ea6:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <APP_BLE_Init+0xb4>)
 8000ea8:	463c      	mov	r4, r7
 8000eaa:	461d      	mov	r5, r3
 8000eac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000eb8:	c407      	stmia	r4!, {r0, r1, r2}
 8000eba:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8000ebc:	f000 f9fe 	bl	80012bc <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	2002      	movs	r0, #2
 8000ec4:	f012 fa6a 	bl	801339c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  HciUserEvtProcessId = osThreadNew(HciUserEvtProcess, NULL, &HciUserEvtProcess_attr);
 8000ec8:	4a23      	ldr	r2, [pc, #140]	; (8000f58 <APP_BLE_Init+0xb8>)
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4823      	ldr	r0, [pc, #140]	; (8000f5c <APP_BLE_Init+0xbc>)
 8000ece:	f00e f985 	bl	800f1dc <osThreadNew>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	4b22      	ldr	r3, [pc, #136]	; (8000f60 <APP_BLE_Init+0xc0>)
 8000ed6:	601a      	str	r2, [r3, #0]

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 8000ed8:	463b      	mov	r3, r7
 8000eda:	4618      	mov	r0, r3
 8000edc:	f00c fd16 	bl	800d90c <SHCI_C2_BLE_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <APP_BLE_Init+0x4a>
  {
    Error_Handler();
 8000ee6:	f004 fb53 	bl	8005590 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8000eea:	f000 fa0f 	bl	800130c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8000eee:	f00b fcb9 	bl	800c864 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <APP_BLE_Init+0xc4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8000efa:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <APP_BLE_Init+0xc4>)
 8000efc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f00:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  AdvUpdateProcessId = osThreadNew(AdvUpdateProcess, NULL, &AdvUpdateProcess_attr);
 8000f02:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <APP_BLE_Init+0xc8>)
 8000f04:	2100      	movs	r1, #0
 8000f06:	4819      	ldr	r0, [pc, #100]	; (8000f6c <APP_BLE_Init+0xcc>)
 8000f08:	f00e f968 	bl	800f1dc <osThreadNew>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <APP_BLE_Init+0xd0>)
 8000f10:	601a      	str	r2, [r3, #0]

  /**
   * Initialize HRS Application
   */
  //P2P FIX HRSAPP_Init();
  index_con_int = 0;
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <APP_BLE_Init+0xd4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 8000f18:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <APP_BLE_Init+0xd8>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	701a      	strb	r2, [r3, #0]
  P2PS_APP_Init();
 8000f1e:	f000 fcf3 	bl	8001908 <P2PS_APP_Init>

  /**
   * Create timer to handle the connection state machine
   */

  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Mgr);
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <APP_BLE_Init+0xdc>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	4916      	ldr	r1, [pc, #88]	; (8000f80 <APP_BLE_Init+0xe0>)
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f002 fc67 	bl	80037fc <HW_TS_Create>
  /**
   * Make device discoverable
   */

  //P2P FIX lines below
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL; //AD_TYPE_16_BIT_SERV_UUID;
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <APP_BLE_Init+0xc4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;//1;
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <APP_BLE_Init+0xc4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	761a      	strb	r2, [r3, #24]
  //P2P FIX Add_Advertisment_Service_UUID(HEART_RATE_SERVICE_UUID);
  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8000f3a:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <APP_BLE_Init+0xe4>)
 8000f3c:	2280      	movs	r2, #128	; 0x80
 8000f3e:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <APP_BLE_Init+0xe8>)
 8000f42:	22a0      	movs	r2, #160	; 0xa0
 8000f44:	801a      	strh	r2, [r3, #0]

  /**
  * Start to Advertise to be connected by Collector
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8000f46:	2001      	movs	r0, #1
 8000f48:	f000 fabc 	bl	80014c4 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8000f4c:	bf00      	nop
}
 8000f4e:	3730      	adds	r7, #48	; 0x30
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bdb0      	pop	{r4, r5, r7, pc}
 8000f54:	08015fec 	.word	0x08015fec
 8000f58:	0801692c 	.word	0x0801692c
 8000f5c:	080016d9 	.word	0x080016d9
 8000f60:	20004870 	.word	0x20004870
 8000f64:	20000200 	.word	0x20000200
 8000f68:	08016908 	.word	0x08016908
 8000f6c:	080016b1 	.word	0x080016b1
 8000f70:	20004880 	.word	0x20004880
 8000f74:	20004879 	.word	0x20004879
 8000f78:	20004878 	.word	0x20004878
 8000f7c:	08001699 	.word	0x08001699
 8000f80:	20000281 	.word	0x20000281
 8000f84:	20000284 	.word	0x20000284
 8000f88:	20000286 	.word	0x20000286

08000f8c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08c      	sub	sp, #48	; 0x30
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8000f94:	2342      	movs	r3, #66	; 0x42
 8000f96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8000fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b3e      	cmp	r3, #62	; 0x3e
 8000fa6:	d028      	beq.n	8000ffa <SVCCTL_App_Notification+0x6e>
 8000fa8:	2bff      	cmp	r3, #255	; 0xff
 8000faa:	f000 80a5 	beq.w	80010f8 <SVCCTL_App_Notification+0x16c>
 8000fae:	2b05      	cmp	r3, #5
 8000fb0:	d000      	beq.n	8000fb4 <SVCCTL_App_Notification+0x28>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
        break;
 8000fb2:	e145      	b.n	8001240 <SVCCTL_App_Notification+0x2b4>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8000fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	613b      	str	r3, [r7, #16]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	4ba2      	ldr	r3, [pc, #648]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 8000fc4:	8adb      	ldrh	r3, [r3, #22]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d109      	bne.n	8000fde <SVCCTL_App_Notification+0x52>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8000fca:	4ba0      	ldr	r3, [pc, #640]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8000fd0:	4b9e      	ldr	r3, [pc, #632]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 8000fd8:	489d      	ldr	r0, [pc, #628]	; (8001250 <SVCCTL_App_Notification+0x2c4>)
 8000fda:	f012 ffcb 	bl	8013f74 <puts>
      Adv_Request(APP_BLE_FAST_ADV);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f000 fa70 	bl	80014c4 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8000fe4:	4b9b      	ldr	r3, [pc, #620]	; (8001254 <SVCCTL_App_Notification+0x2c8>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8000fea:	4b98      	ldr	r3, [pc, #608]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 8000fec:	8ada      	ldrh	r2, [r3, #22]
 8000fee:	4b99      	ldr	r3, [pc, #612]	; (8001254 <SVCCTL_App_Notification+0x2c8>)
 8000ff0:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 8000ff2:	4898      	ldr	r0, [pc, #608]	; (8001254 <SVCCTL_App_Notification+0x2c8>)
 8000ff4:	f000 fc74 	bl	80018e0 <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 8000ff8:	e122      	b.n	8001240 <SVCCTL_App_Notification+0x2b4>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8000ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	61fb      	str	r3, [r7, #28]
      switch (meta_evt->subevent)
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b03      	cmp	r3, #3
 8001006:	d004      	beq.n	8001012 <SVCCTL_App_Notification+0x86>
 8001008:	2b0c      	cmp	r3, #12
 800100a:	d006      	beq.n	800101a <SVCCTL_App_Notification+0x8e>
 800100c:	2b01      	cmp	r3, #1
 800100e:	d042      	beq.n	8001096 <SVCCTL_App_Notification+0x10a>
          break;
 8001010:	e071      	b.n	80010f6 <SVCCTL_App_Notification+0x16a>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 8001012:	4891      	ldr	r0, [pc, #580]	; (8001258 <SVCCTL_App_Notification+0x2cc>)
 8001014:	f012 ffae 	bl	8013f74 <puts>
          break;
 8001018:	e06d      	b.n	80010f6 <SVCCTL_App_Notification+0x16a>
          APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE \n");
 800101a:	4890      	ldr	r0, [pc, #576]	; (800125c <SVCCTL_App_Notification+0x2d0>)
 800101c:	f012 ffaa 	bl	8013f74 <puts>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	3301      	adds	r3, #1
 8001024:	61bb      	str	r3, [r7, #24]
          if (evt_le_phy_update_complete->Status == 0)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d103      	bne.n	8001036 <SVCCTL_App_Notification+0xaa>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status ok \n");
 800102e:	488c      	ldr	r0, [pc, #560]	; (8001260 <SVCCTL_App_Notification+0x2d4>)
 8001030:	f012 ffa0 	bl	8013f74 <puts>
 8001034:	e002      	b.n	800103c <SVCCTL_App_Notification+0xb0>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status nok \n");
 8001036:	488b      	ldr	r0, [pc, #556]	; (8001264 <SVCCTL_App_Notification+0x2d8>)
 8001038:	f012 ff9c 	bl	8013f74 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800103c:	4b83      	ldr	r3, [pc, #524]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 800103e:	8adb      	ldrh	r3, [r3, #22]
 8001040:	f107 020e 	add.w	r2, r7, #14
 8001044:	f107 010f 	add.w	r1, r7, #15
 8001048:	4618      	mov	r0, r3
 800104a:	f00c fb70 	bl	800d72e <hci_le_read_phy>
 800104e:	4603      	mov	r3, r0
 8001050:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret == BLE_STATUS_SUCCESS)
 8001054:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001058:	2b00      	cmp	r3, #0
 800105a:	d118      	bne.n	800108e <SVCCTL_App_Notification+0x102>
            APP_DBG_MSG("Read_PHY success \n");
 800105c:	4882      	ldr	r0, [pc, #520]	; (8001268 <SVCCTL_App_Notification+0x2dc>)
 800105e:	f012 ff89 	bl	8013f74 <puts>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	2b02      	cmp	r3, #2
 8001066:	d10a      	bne.n	800107e <SVCCTL_App_Notification+0xf2>
 8001068:	7bbb      	ldrb	r3, [r7, #14]
 800106a:	2b02      	cmp	r3, #2
 800106c:	d107      	bne.n	800107e <SVCCTL_App_Notification+0xf2>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	4619      	mov	r1, r3
 8001072:	7bbb      	ldrb	r3, [r7, #14]
 8001074:	461a      	mov	r2, r3
 8001076:	487d      	ldr	r0, [pc, #500]	; (800126c <SVCCTL_App_Notification+0x2e0>)
 8001078:	f012 ff08 	bl	8013e8c <iprintf>
          break;
 800107c:	e03b      	b.n	80010f6 <SVCCTL_App_Notification+0x16a>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	4619      	mov	r1, r3
 8001082:	7bbb      	ldrb	r3, [r7, #14]
 8001084:	461a      	mov	r2, r3
 8001086:	4879      	ldr	r0, [pc, #484]	; (800126c <SVCCTL_App_Notification+0x2e0>)
 8001088:	f012 ff00 	bl	8013e8c <iprintf>
          break;
 800108c:	e033      	b.n	80010f6 <SVCCTL_App_Notification+0x16a>
            APP_DBG_MSG("Read conf not succeess \n");
 800108e:	4878      	ldr	r0, [pc, #480]	; (8001270 <SVCCTL_App_Notification+0x2e4>)
 8001090:	f012 ff70 	bl	8013f74 <puts>
          break;
 8001094:	e02f      	b.n	80010f6 <SVCCTL_App_Notification+0x16a>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800109c:	4b6b      	ldr	r3, [pc, #428]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 800109e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80010a2:	4618      	mov	r0, r3
 80010a4:	f002 fc20 	bl	80038e8 <HW_TS_Stop>
          APP_DBG_MSG("EVT_LE_CONN_COMPLETE for connection handle 0x%x\n", connection_complete_event->Connection_Handle);
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	4619      	mov	r1, r3
 80010b2:	4870      	ldr	r0, [pc, #448]	; (8001274 <SVCCTL_App_Notification+0x2e8>)
 80010b4:	f012 feea 	bl	8013e8c <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80010b8:	4b64      	ldr	r3, [pc, #400]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 80010ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80010be:	2b04      	cmp	r3, #4
 80010c0:	d104      	bne.n	80010cc <SVCCTL_App_Notification+0x140>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80010c2:	4b62      	ldr	r3, [pc, #392]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 80010c4:	2206      	movs	r2, #6
 80010c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80010ca:	e003      	b.n	80010d4 <SVCCTL_App_Notification+0x148>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80010cc:	4b5f      	ldr	r3, [pc, #380]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 80010ce:	2205      	movs	r2, #5
 80010d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	4b5b      	ldr	r3, [pc, #364]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 80010de:	82da      	strh	r2, [r3, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 80010e0:	4b5c      	ldr	r3, [pc, #368]	; (8001254 <SVCCTL_App_Notification+0x2c8>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80010e6:	4b59      	ldr	r3, [pc, #356]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 80010e8:	8ada      	ldrh	r2, [r3, #22]
 80010ea:	4b5a      	ldr	r3, [pc, #360]	; (8001254 <SVCCTL_App_Notification+0x2c8>)
 80010ec:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 80010ee:	4859      	ldr	r0, [pc, #356]	; (8001254 <SVCCTL_App_Notification+0x2c8>)
 80010f0:	f000 fbf6 	bl	80018e0 <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 80010f4:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 80010f6:	e0a3      	b.n	8001240 <SVCCTL_App_Notification+0x2b4>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 80010f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010fa:	3302      	adds	r3, #2
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blue_evt->ecode)
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	b29b      	uxth	r3, r3
 8001104:	f240 4205 	movw	r2, #1029	; 0x405
 8001108:	4293      	cmp	r3, r2
 800110a:	d04a      	beq.n	80011a2 <SVCCTL_App_Notification+0x216>
 800110c:	f240 4205 	movw	r2, #1029	; 0x405
 8001110:	4293      	cmp	r3, r2
 8001112:	dc18      	bgt.n	8001146 <SVCCTL_App_Notification+0x1ba>
 8001114:	f240 4202 	movw	r2, #1026	; 0x402
 8001118:	4293      	cmp	r3, r2
 800111a:	d033      	beq.n	8001184 <SVCCTL_App_Notification+0x1f8>
 800111c:	f240 4202 	movw	r2, #1026	; 0x402
 8001120:	4293      	cmp	r3, r2
 8001122:	dc07      	bgt.n	8001134 <SVCCTL_App_Notification+0x1a8>
 8001124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001128:	d028      	beq.n	800117c <SVCCTL_App_Notification+0x1f0>
 800112a:	f240 4201 	movw	r2, #1025	; 0x401
 800112e:	4293      	cmp	r3, r2
 8001130:	d069      	beq.n	8001206 <SVCCTL_App_Notification+0x27a>
      break; /* EVT_VENDOR */
 8001132:	e084      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
      switch (blue_evt->ecode)
 8001134:	f240 4203 	movw	r2, #1027	; 0x403
 8001138:	4293      	cmp	r3, r2
 800113a:	d02a      	beq.n	8001192 <SVCCTL_App_Notification+0x206>
 800113c:	f240 4204 	movw	r2, #1028	; 0x404
 8001140:	4293      	cmp	r3, r2
 8001142:	d02a      	beq.n	800119a <SVCCTL_App_Notification+0x20e>
      break; /* EVT_VENDOR */
 8001144:	e07b      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
      switch (blue_evt->ecode)
 8001146:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800114a:	d03a      	beq.n	80011c2 <SVCCTL_App_Notification+0x236>
 800114c:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8001150:	dc08      	bgt.n	8001164 <SVCCTL_App_Notification+0x1d8>
 8001152:	f240 4206 	movw	r2, #1030	; 0x406
 8001156:	4293      	cmp	r3, r2
 8001158:	d02f      	beq.n	80011ba <SVCCTL_App_Notification+0x22e>
 800115a:	f240 4207 	movw	r2, #1031	; 0x407
 800115e:	4293      	cmp	r3, r2
 8001160:	d069      	beq.n	8001236 <SVCCTL_App_Notification+0x2aa>
      break; /* EVT_VENDOR */
 8001162:	e06c      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
      switch (blue_evt->ecode)
 8001164:	f240 420a 	movw	r2, #1034	; 0x40a
 8001168:	4293      	cmp	r3, r2
 800116a:	d02e      	beq.n	80011ca <SVCCTL_App_Notification+0x23e>
 800116c:	f240 420a 	movw	r2, #1034	; 0x40a
 8001170:	4293      	cmp	r3, r2
 8001172:	db2e      	blt.n	80011d2 <SVCCTL_App_Notification+0x246>
 8001174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001178:	d05a      	beq.n	8001230 <SVCCTL_App_Notification+0x2a4>
      break; /* EVT_VENDOR */
 800117a:	e060      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_LIMITED_DISCOVERABLE \n");
 800117c:	483e      	ldr	r0, [pc, #248]	; (8001278 <SVCCTL_App_Notification+0x2ec>)
 800117e:	f012 fef9 	bl	8013f74 <puts>
          break; /* EVT_BLUE_GAP_LIMITED_DISCOVERABLE */
 8001182:	e05c      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PASS_KEY_REQUEST \n");
 8001184:	483d      	ldr	r0, [pc, #244]	; (800127c <SVCCTL_App_Notification+0x2f0>)
 8001186:	f012 fef5 	bl	8013f74 <puts>
        APP_DBG_MSG("\r\n\r** aci_gap_pass_key_resp \n");
 800118a:	483d      	ldr	r0, [pc, #244]	; (8001280 <SVCCTL_App_Notification+0x2f4>)
 800118c:	f012 fef2 	bl	8013f74 <puts>
          break; /* EVT_BLUE_GAP_PASS_KEY_REQUEST */
 8001190:	e055      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_AUTHORIZATION_REQUEST \n");
 8001192:	483c      	ldr	r0, [pc, #240]	; (8001284 <SVCCTL_App_Notification+0x2f8>)
 8001194:	f012 feee 	bl	8013f74 <puts>
          break; /* EVT_BLUE_GAP_AUTHORIZATION_REQUEST */
 8001198:	e051      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_SLAVE_SECURITY_INITIATED \n");
 800119a:	483b      	ldr	r0, [pc, #236]	; (8001288 <SVCCTL_App_Notification+0x2fc>)
 800119c:	f012 feea 	bl	8013f74 <puts>
          break; /* EVT_BLUE_GAP_SLAVE_SECURITY_INITIATED */
 80011a0:	e04d      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_BOND_LOST \n");
 80011a2:	483a      	ldr	r0, [pc, #232]	; (800128c <SVCCTL_App_Notification+0x300>)
 80011a4:	f012 fee6 	bl	8013f74 <puts>
          aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 80011a8:	4b28      	ldr	r3, [pc, #160]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 80011aa:	8adb      	ldrh	r3, [r3, #22]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f00b fef4 	bl	800cf9a <aci_gap_allow_rebond>
        APP_DBG_MSG("\r\n\r** Send allow rebond \n");
 80011b2:	4837      	ldr	r0, [pc, #220]	; (8001290 <SVCCTL_App_Notification+0x304>)
 80011b4:	f012 fede 	bl	8013f74 <puts>
          break; /* EVT_BLUE_GAP_BOND_LOST */
 80011b8:	e041      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_DEVICE_FOUND \n");
 80011ba:	4836      	ldr	r0, [pc, #216]	; (8001294 <SVCCTL_App_Notification+0x308>)
 80011bc:	f012 feda 	bl	8013f74 <puts>
          break; /* EVT_BLUE_GAP_DEVICE_FOUND */
 80011c0:	e03d      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
         APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_DEVICE_FOUND \n");
 80011c2:	4834      	ldr	r0, [pc, #208]	; (8001294 <SVCCTL_App_Notification+0x308>)
 80011c4:	f012 fed6 	bl	8013f74 <puts>
          break; /* EVT_BLUE_GAP_DEVICE_FOUND */
 80011c8:	e039      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
         APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_KEYPRESS_NOTIFICATION \n");
 80011ca:	4833      	ldr	r0, [pc, #204]	; (8001298 <SVCCTL_App_Notification+0x30c>)
 80011cc:	f012 fed2 	bl	8013f74 <puts>
          break; /* EVT_BLUE_GAP_KEY_PRESS_NOTIFICATION */    
 80011d0:	e035      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(blue_evt->data))->Numeric_Value);
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	3302      	adds	r3, #2
          APP_DBG_MSG("numeric_value = %ld\n",
 80011d6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80011da:	4619      	mov	r1, r3
 80011dc:	482f      	ldr	r0, [pc, #188]	; (800129c <SVCCTL_App_Notification+0x310>)
 80011de:	f012 fe55 	bl	8013e8c <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(blue_evt->data))->Numeric_Value);
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	3302      	adds	r3, #2
          APP_DBG_MSG("Hex_value = %lx\n",
 80011e6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80011ea:	4619      	mov	r1, r3
 80011ec:	482c      	ldr	r0, [pc, #176]	; (80012a0 <SVCCTL_App_Notification+0x314>)
 80011ee:	f012 fe4d 	bl	8013e8c <iprintf>
          aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 1); /* CONFIRM_YES = 1 */
 80011f2:	4b16      	ldr	r3, [pc, #88]	; (800124c <SVCCTL_App_Notification+0x2c0>)
 80011f4:	8adb      	ldrh	r3, [r3, #22]
 80011f6:	2101      	movs	r1, #1
 80011f8:	4618      	mov	r0, r3
 80011fa:	f00b ff18 	bl	800d02e <aci_gap_numeric_comparison_value_confirm_yesno>
          APP_DBG_MSG("\r\n\r** aci_gap_numeric_comparison_value_confirm_yesno-->YES \n");
 80011fe:	4829      	ldr	r0, [pc, #164]	; (80012a4 <SVCCTL_App_Notification+0x318>)
 8001200:	f012 feb8 	bl	8013f74 <puts>
          break;
 8001204:	e01b      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blue_evt->data;
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001208:	3302      	adds	r3, #2
 800120a:	623b      	str	r3, [r7, #32]
            APP_DBG_MSG("BLE_CTRL_App_Notification: EVT_BLUE_GAP_PAIRING_CMPLT, pairing_complete->Status = %d\n",pairing_complete->Status);
 800120c:	6a3b      	ldr	r3, [r7, #32]
 800120e:	789b      	ldrb	r3, [r3, #2]
 8001210:	4619      	mov	r1, r3
 8001212:	4825      	ldr	r0, [pc, #148]	; (80012a8 <SVCCTL_App_Notification+0x31c>)
 8001214:	f012 fe3a 	bl	8013e8c <iprintf>
            if (pairing_complete->Status == 0)
 8001218:	6a3b      	ldr	r3, [r7, #32]
 800121a:	789b      	ldrb	r3, [r3, #2]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d103      	bne.n	8001228 <SVCCTL_App_Notification+0x29c>
              APP_DBG_MSG("\r\n\r** Pairing OK \n");
 8001220:	4822      	ldr	r0, [pc, #136]	; (80012ac <SVCCTL_App_Notification+0x320>)
 8001222:	f012 fea7 	bl	8013f74 <puts>
           break;    
 8001226:	e00a      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
              APP_DBG_MSG("\r\n\r** Pairing KO \n");
 8001228:	4821      	ldr	r0, [pc, #132]	; (80012b0 <SVCCTL_App_Notification+0x324>)
 800122a:	f012 fea3 	bl	8013f74 <puts>
           break;    
 800122e:	e006      	b.n	800123e <SVCCTL_App_Notification+0x2b2>
          mutex = 1;
 8001230:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <SVCCTL_App_Notification+0x328>)
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PROCEDURE_COMPLETE \n");
 8001236:	4820      	ldr	r0, [pc, #128]	; (80012b8 <SVCCTL_App_Notification+0x32c>)
 8001238:	f012 fe9c 	bl	8013f74 <puts>
          break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800123c:	bf00      	nop
      break; /* EVT_VENDOR */
 800123e:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8001240:	2301      	movs	r3, #1
}
 8001242:	4618      	mov	r0, r3
 8001244:	3730      	adds	r7, #48	; 0x30
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000200 	.word	0x20000200
 8001250:	0801601c 	.word	0x0801601c
 8001254:	20004874 	.word	0x20004874
 8001258:	08016044 	.word	0x08016044
 800125c:	08016070 	.word	0x08016070
 8001260:	0801608c 	.word	0x0801608c
 8001264:	080160b0 	.word	0x080160b0
 8001268:	080160d8 	.word	0x080160d8
 800126c:	080160ec 	.word	0x080160ec
 8001270:	08016108 	.word	0x08016108
 8001274:	08016120 	.word	0x08016120
 8001278:	08016154 	.word	0x08016154
 800127c:	08016180 	.word	0x08016180
 8001280:	080161a8 	.word	0x080161a8
 8001284:	080161c8 	.word	0x080161c8
 8001288:	080161f4 	.word	0x080161f4
 800128c:	08016224 	.word	0x08016224
 8001290:	08016244 	.word	0x08016244
 8001294:	08016260 	.word	0x08016260
 8001298:	08016284 	.word	0x08016284
 800129c:	080162b0 	.word	0x080162b0
 80012a0:	080162c8 	.word	0x080162c8
 80012a4:	080162dc 	.word	0x080162dc
 80012a8:	08016318 	.word	0x08016318
 80012ac:	08016370 	.word	0x08016370
 80012b0:	08016384 	.word	0x08016384
 80012b4:	20004878 	.word	0x20004878
 80012b8:	08016398 	.word	0x08016398

080012bc <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  MtxHciId = osMutexNew( NULL );
 80012c2:	2000      	movs	r0, #0
 80012c4:	f00e f954 	bl	800f570 <osMutexNew>
 80012c8:	4602      	mov	r2, r0
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <Ble_Tl_Init+0x3c>)
 80012cc:	601a      	str	r2, [r3, #0]
  SemHciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	2001      	movs	r0, #1
 80012d4:	f00e fa94 	bl	800f800 <osSemaphoreNew>
 80012d8:	4602      	mov	r2, r0
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <Ble_Tl_Init+0x40>)
 80012dc:	601a      	str	r2, [r3, #0]

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <Ble_Tl_Init+0x44>)
 80012e0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <Ble_Tl_Init+0x48>)
 80012e4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80012e6:	463b      	mov	r3, r7
 80012e8:	4619      	mov	r1, r3
 80012ea:	4807      	ldr	r0, [pc, #28]	; (8001308 <Ble_Tl_Init+0x4c>)
 80012ec:	f00c fb3c 	bl	800d968 <hci_init>

  return;
 80012f0:	bf00      	nop
}
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	2000487c 	.word	0x2000487c
 80012fc:	2000486c 	.word	0x2000486c
 8001300:	20030028 	.word	0x20030028
 8001304:	08001791 	.word	0x08001791
 8001308:	08001759 	.word	0x08001759

0800130c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 800130c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130e:	b08f      	sub	sp, #60	; 0x3c
 8001310:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8001312:	f44f 7350 	mov.w	r3, #832	; 0x340
 8001316:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8001318:	f00c f9e5 	bl	800d6e6 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800131c:	f000 f978 	bl	8001610 <BleGetBdAddress>
 8001320:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8001322:	69fa      	ldr	r2, [r7, #28]
 8001324:	2106      	movs	r1, #6
 8001326:	2000      	movs	r0, #0
 8001328:	f00c f91d 	bl	800d566 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	795a      	ldrb	r2, [r3, #5]
 8001330:	4b5c      	ldr	r3, [pc, #368]	; (80014a4 <Ble_Hci_Gap_Gatt_Init+0x198>)
 8001332:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	791a      	ldrb	r2, [r3, #4]
 8001338:	4b5a      	ldr	r3, [pc, #360]	; (80014a4 <Ble_Hci_Gap_Gatt_Init+0x198>)
 800133a:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	78da      	ldrb	r2, [r3, #3]
 8001340:	4b58      	ldr	r3, [pc, #352]	; (80014a4 <Ble_Hci_Gap_Gatt_Init+0x198>)
 8001342:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	789a      	ldrb	r2, [r3, #2]
 8001348:	4b56      	ldr	r3, [pc, #344]	; (80014a4 <Ble_Hci_Gap_Gatt_Init+0x198>)
 800134a:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	785a      	ldrb	r2, [r3, #1]
 8001350:	4b54      	ldr	r3, [pc, #336]	; (80014a4 <Ble_Hci_Gap_Gatt_Init+0x198>)
 8001352:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	781a      	ldrb	r2, [r3, #0]
 8001358:	4b52      	ldr	r3, [pc, #328]	; (80014a4 <Ble_Hci_Gap_Gatt_Init+0x198>)
 800135a:	735a      	strb	r2, [r3, #13]

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET,
 800135c:	4a52      	ldr	r2, [pc, #328]	; (80014a8 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800135e:	2110      	movs	r1, #16
 8001360:	2018      	movs	r0, #24
 8001362:	f00c f900 	bl	800d566 <aci_hal_write_config_data>
                            (uint8_t*) BLE_CFG_IR_VALUE);

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET,
 8001366:	4a51      	ldr	r2, [pc, #324]	; (80014ac <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8001368:	2110      	movs	r1, #16
 800136a:	2008      	movs	r0, #8
 800136c:	f00c f8fb 	bl	800d566 <aci_hal_write_config_data>
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8001370:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8001374:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8001376:	f7ff fd6f 	bl	8000e58 <LL_FLASH_GetUDN>
 800137a:	4603      	mov	r3, r0
 800137c:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	461a      	mov	r2, r3
 8001382:	2106      	movs	r1, #6
 8001384:	202e      	movs	r0, #46	; 0x2e
 8001386:	f00c f8ee 	bl	800d566 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800138a:	4a47      	ldr	r2, [pc, #284]	; (80014a8 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800138c:	2110      	movs	r1, #16
 800138e:	2018      	movs	r0, #24
 8001390:	f00c f8e9 	bl	800d566 <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8001394:	4a45      	ldr	r2, [pc, #276]	; (80014ac <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8001396:	2110      	movs	r1, #16
 8001398:	2008      	movs	r0, #8
 800139a:	f00c f8e4 	bl	800d566 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800139e:	2118      	movs	r1, #24
 80013a0:	2001      	movs	r0, #1
 80013a2:	f00c f949 	bl	800d638 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 80013a6:	f00b fe99 	bl	800d0dc <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80013ae:	7efb      	ldrb	r3, [r7, #27]
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 80013b6:	7efb      	ldrb	r3, [r7, #27]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d024      	beq.n	8001406 <Ble_Hci_Gap_Gatt_Init+0xfa>
  {
    const char *name = "DRAMSAY";
 80013bc:	4b3c      	ldr	r3, [pc, #240]	; (80014b0 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 80013be:	617b      	str	r3, [r7, #20]
    aci_gap_init(role, 0,
 80013c0:	f107 0212 	add.w	r2, r7, #18
 80013c4:	7ef8      	ldrb	r0, [r7, #27]
 80013c6:	f107 030e 	add.w	r3, r7, #14
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	4613      	mov	r3, r2
 80013d4:	2207      	movs	r2, #7
 80013d6:	2100      	movs	r1, #0
 80013d8:	f00b fcd4 	bl	800cd84 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 80013dc:	8a7c      	ldrh	r4, [r7, #18]
 80013de:	8a3d      	ldrh	r5, [r7, #16]
 80013e0:	6978      	ldr	r0, [r7, #20]
 80013e2:	f7fe fecd 	bl	8000180 <strlen>
 80013e6:	4603      	mov	r3, r0
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	4613      	mov	r3, r2
 80013f0:	2200      	movs	r2, #0
 80013f2:	4629      	mov	r1, r5
 80013f4:	4620      	mov	r0, r4
 80013f6:	f00c f82f 	bl	800d458 <aci_gatt_update_char_value>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d002      	beq.n	8001406 <Ble_Hci_Gap_Gatt_Init+0xfa>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
 8001400:	482c      	ldr	r0, [pc, #176]	; (80014b4 <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 8001402:	f012 fdb7 	bl	8013f74 <puts>
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8001406:	8a78      	ldrh	r0, [r7, #18]
 8001408:	89f9      	ldrh	r1, [r7, #14]
 800140a:	463b      	mov	r3, r7
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2302      	movs	r3, #2
 8001410:	2200      	movs	r2, #0
 8001412:	f00c f821 	bl	800d458 <aci_gatt_update_char_value>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d002      	beq.n	8001422 <Ble_Hci_Gap_Gatt_Init+0x116>
                                gap_appearance_char_handle,
                                0,
                                2,
                                (uint8_t *)&appearance))
  {
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
 800141c:	4826      	ldr	r0, [pc, #152]	; (80014b8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800141e:	f012 fda9 	bl	8013f74 <puts>
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8001422:	2202      	movs	r2, #2
 8001424:	2102      	movs	r1, #2
 8001426:	2000      	movs	r0, #0
 8001428:	f00c f9e9 	bl	800d7fe <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800142c:	4b23      	ldr	r3, [pc, #140]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800142e:	2201      	movs	r2, #1
 8001430:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8001432:	4b22      	ldr	r3, [pc, #136]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f00b fbb2 	bl	800cba0 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800143e:	2201      	movs	r2, #1
 8001440:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8001442:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001444:	2208      	movs	r2, #8
 8001446:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8001448:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800144a:	2210      	movs	r2, #16
 800144c:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800144e:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001450:	2200      	movs	r2, #0
 8001452:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8001454:	4b19      	ldr	r3, [pc, #100]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001456:	4a1a      	ldr	r2, [pc, #104]	; (80014c0 <Ble_Hci_Gap_Gatt_Init+0x1b4>)
 8001458:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800145a:	4b18      	ldr	r3, [pc, #96]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800145c:	2201      	movs	r2, #1
 800145e:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8001460:	4b16      	ldr	r3, [pc, #88]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001462:	789d      	ldrb	r5, [r3, #2]
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001466:	785e      	ldrb	r6, [r3, #1]
 8001468:	4b14      	ldr	r3, [pc, #80]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800146a:	791b      	ldrb	r3, [r3, #4]
 800146c:	4a13      	ldr	r2, [pc, #76]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800146e:	7952      	ldrb	r2, [r2, #5]
 8001470:	4912      	ldr	r1, [pc, #72]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001472:	78c9      	ldrb	r1, [r1, #3]
 8001474:	4811      	ldr	r0, [pc, #68]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001476:	6880      	ldr	r0, [r0, #8]
 8001478:	2400      	movs	r4, #0
 800147a:	9404      	str	r4, [sp, #16]
 800147c:	9003      	str	r0, [sp, #12]
 800147e:	9102      	str	r1, [sp, #8]
 8001480:	9201      	str	r2, [sp, #4]
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	2300      	movs	r3, #0
 8001486:	2201      	movs	r2, #1
 8001488:	4631      	mov	r1, r6
 800148a:	4628      	mov	r0, r5
 800148c:	f00b fbd2 	bl	800cc34 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8001490:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001492:	789b      	ldrb	r3, [r3, #2]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <Ble_Hci_Gap_Gatt_Init+0x190>
   {
     aci_gap_configure_whitelist();
 8001498:	f00b fd5b 	bl	800cf52 <aci_gap_configure_whitelist>
   }
}
 800149c:	bf00      	nop
 800149e:	3724      	adds	r7, #36	; 0x24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014a4:	20000004 	.word	0x20000004
 80014a8:	080168e0 	.word	0x080168e0
 80014ac:	080168f0 	.word	0x080168f0
 80014b0:	080163c0 	.word	0x080163c0
 80014b4:	080163c8 	.word	0x080163c8
 80014b8:	080163f8 	.word	0x080163f8
 80014bc:	20000200 	.word	0x20000200
 80014c0:	0001b207 	.word	0x0001b207

080014c4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08c      	sub	sp, #48	; 0x30
 80014c8:	af08      	add	r7, sp, #32
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80014ce:	2342      	movs	r3, #66	; 0x42
 80014d0:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d106      	bne.n	80014e6 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 80014d8:	4b3f      	ldr	r3, [pc, #252]	; (80015d8 <Adv_Request+0x114>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 80014de:	4b3f      	ldr	r3, [pc, #252]	; (80015dc <Adv_Request+0x118>)
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	81bb      	strh	r3, [r7, #12]
 80014e4:	e005      	b.n	80014f2 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 80014e6:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80014ea:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 80014ec:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80014f0:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80014f2:	4b3b      	ldr	r3, [pc, #236]	; (80015e0 <Adv_Request+0x11c>)
 80014f4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80014f8:	4618      	mov	r0, r3
 80014fa:	f002 f9f5 	bl	80038e8 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
 80014fe:	4b38      	ldr	r3, [pc, #224]	; (80015e0 <Adv_Request+0x11c>)
 8001500:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001504:	4619      	mov	r1, r3
 8001506:	4837      	ldr	r0, [pc, #220]	; (80015e4 <Adv_Request+0x120>)
 8001508:	f012 fcc0 	bl	8013e8c <iprintf>

    if ((New_Status == APP_BLE_LP_ADV)
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d119      	bne.n	8001546 <Adv_Request+0x82>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8001512:	4b33      	ldr	r3, [pc, #204]	; (80015e0 <Adv_Request+0x11c>)
 8001514:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001518:	2b01      	cmp	r3, #1
 800151a:	d004      	beq.n	8001526 <Adv_Request+0x62>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800151c:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <Adv_Request+0x11c>)
 800151e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001522:	2b02      	cmp	r3, #2
 8001524:	d10f      	bne.n	8001546 <Adv_Request+0x82>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 8001526:	f00b fa39 	bl	800c99c <aci_gap_set_non_discoverable>
 800152a:	4603      	mov	r3, r0
 800152c:	72fb      	strb	r3, [r7, #11]
      if (ret == BLE_STATUS_SUCCESS)
 800152e:	7afb      	ldrb	r3, [r7, #11]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d103      	bne.n	800153c <Adv_Request+0x78>
      {
        APP_DBG_MSG("Successfully Stopped Advertising \n");
 8001534:	482c      	ldr	r0, [pc, #176]	; (80015e8 <Adv_Request+0x124>)
 8001536:	f012 fd1d 	bl	8013f74 <puts>
 800153a:	e004      	b.n	8001546 <Adv_Request+0x82>
      }
      else
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
 800153c:	7afb      	ldrb	r3, [r7, #11]
 800153e:	4619      	mov	r1, r3
 8001540:	482a      	ldr	r0, [pc, #168]	; (80015ec <Adv_Request+0x128>)
 8001542:	f012 fca3 	bl	8013e8c <iprintf>
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 8001546:	4a26      	ldr	r2, [pc, #152]	; (80015e0 <Adv_Request+0x11c>)
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800154e:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <Adv_Request+0x11c>)
 8001550:	7e1b      	ldrb	r3, [r3, #24]
 8001552:	89b8      	ldrh	r0, [r7, #12]
 8001554:	89f9      	ldrh	r1, [r7, #14]
 8001556:	2200      	movs	r2, #0
 8001558:	9206      	str	r2, [sp, #24]
 800155a:	2200      	movs	r2, #0
 800155c:	9205      	str	r2, [sp, #20]
 800155e:	4a24      	ldr	r2, [pc, #144]	; (80015f0 <Adv_Request+0x12c>)
 8001560:	9204      	str	r2, [sp, #16]
 8001562:	9303      	str	r3, [sp, #12]
 8001564:	4b23      	ldr	r3, [pc, #140]	; (80015f4 <Adv_Request+0x130>)
 8001566:	9302      	str	r3, [sp, #8]
 8001568:	2308      	movs	r3, #8
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	2300      	movs	r3, #0
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2300      	movs	r3, #0
 8001572:	4602      	mov	r2, r0
 8001574:	2000      	movs	r0, #0
 8001576:	f00b fa35 	bl	800c9e4 <aci_gap_set_discoverable>
 800157a:	4603      	mov	r3, r0
 800157c:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800157e:	491e      	ldr	r1, [pc, #120]	; (80015f8 <Adv_Request+0x134>)
 8001580:	200e      	movs	r0, #14
 8001582:	f00b fc8a 	bl	800ce9a <aci_gap_update_adv_data>
 8001586:	4603      	mov	r3, r0
 8001588:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 800158a:	7afb      	ldrb	r3, [r7, #11]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d111      	bne.n	80015b4 <Adv_Request+0xf0>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d10a      	bne.n	80015ac <Adv_Request+0xe8>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 8001596:	4819      	ldr	r0, [pc, #100]	; (80015fc <Adv_Request+0x138>)
 8001598:	f012 fcec 	bl	8013f74 <puts>
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800159c:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <Adv_Request+0x11c>)
 800159e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80015a2:	4917      	ldr	r1, [pc, #92]	; (8001600 <Adv_Request+0x13c>)
 80015a4:	4618      	mov	r0, r3
 80015a6:	f002 fa29 	bl	80039fc <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 80015aa:	e012      	b.n	80015d2 <Adv_Request+0x10e>
        APP_DBG_MSG("Successfully Start Low Power Advertising \n");
 80015ac:	4815      	ldr	r0, [pc, #84]	; (8001604 <Adv_Request+0x140>)
 80015ae:	f012 fce1 	bl	8013f74 <puts>
  return;
 80015b2:	e00e      	b.n	80015d2 <Adv_Request+0x10e>
      if (New_Status == APP_BLE_FAST_ADV)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d105      	bne.n	80015c6 <Adv_Request+0x102>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 80015ba:	7afb      	ldrb	r3, [r7, #11]
 80015bc:	4619      	mov	r1, r3
 80015be:	4812      	ldr	r0, [pc, #72]	; (8001608 <Adv_Request+0x144>)
 80015c0:	f012 fc64 	bl	8013e8c <iprintf>
  return;
 80015c4:	e005      	b.n	80015d2 <Adv_Request+0x10e>
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
 80015c6:	7afb      	ldrb	r3, [r7, #11]
 80015c8:	4619      	mov	r1, r3
 80015ca:	4810      	ldr	r0, [pc, #64]	; (800160c <Adv_Request+0x148>)
 80015cc:	f012 fc5e 	bl	8013e8c <iprintf>
  return;
 80015d0:	bf00      	nop
}
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000284 	.word	0x20000284
 80015dc:	20000286 	.word	0x20000286
 80015e0:	20000200 	.word	0x20000200
 80015e4:	08016428 	.word	0x08016428
 80015e8:	08016444 	.word	0x08016444
 80015ec:	08016468 	.word	0x08016468
 80015f0:	20000219 	.word	0x20000219
 80015f4:	08016900 	.word	0x08016900
 80015f8:	20000004 	.word	0x20000004
 80015fc:	08016490 	.word	0x08016490
 8001600:	0001e046 	.word	0x0001e046
 8001604:	080164b8 	.word	0x080164b8
 8001608:	080164e4 	.word	0x080164e4
 800160c:	08016514 	.word	0x08016514

08001610 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8001616:	f7ff fc1f 	bl	8000e58 <LL_FLASH_GetUDN>
 800161a:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001622:	d023      	beq.n	800166c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8001624:	f7ff fc30 	bl	8000e88 <LL_FLASH_GetSTCompanyID>
 8001628:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800162a:	f7ff fc21 	bl	8000e70 <LL_FLASH_GetDeviceID>
 800162e:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <BleGetBdAddress+0x80>)
 8001636:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	0a1b      	lsrs	r3, r3, #8
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4b14      	ldr	r3, [pc, #80]	; (8001690 <BleGetBdAddress+0x80>)
 8001640:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	0c1b      	lsrs	r3, r3, #16
 8001646:	b2da      	uxtb	r2, r3
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <BleGetBdAddress+0x80>)
 800164a:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	b2da      	uxtb	r2, r3
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <BleGetBdAddress+0x80>)
 8001652:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <BleGetBdAddress+0x80>)
 800165a:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	0a1b      	lsrs	r3, r3, #8
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <BleGetBdAddress+0x80>)
 8001664:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <BleGetBdAddress+0x80>)
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	e00b      	b.n	8001684 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800166c:	2000      	movs	r0, #0
 800166e:	f00d f865 	bl	800e73c <OTP_Read>
 8001672:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d002      	beq.n	8001680 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	e001      	b.n	8001684 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <BleGetBdAddress+0x84>)
 8001682:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 8001684:	697b      	ldr	r3, [r7, #20]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	2000039c 	.word	0x2000039c
 8001694:	080168d8 	.word	0x080168d8

08001698 <Adv_Mgr>:
  return;
}
*/

static void Adv_Mgr( void )
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as an aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  osThreadFlagsSet( AdvUpdateProcessId, 1 );
 800169c:	4b03      	ldr	r3, [pc, #12]	; (80016ac <Adv_Mgr+0x14>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2101      	movs	r1, #1
 80016a2:	4618      	mov	r0, r3
 80016a4:	f00d fe40 	bl	800f328 <osThreadFlagsSet>

  return;
 80016a8:	bf00      	nop
}
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20004880 	.word	0x20004880

080016b0 <AdvUpdateProcess>:

static void AdvUpdateProcess(void *argument)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 80016b8:	f04f 32ff 	mov.w	r2, #4294967295
 80016bc:	2100      	movs	r1, #0
 80016be:	2001      	movs	r0, #1
 80016c0:	f00d fe94 	bl	800f3ec <osThreadFlagsWait>
    Adv_Update( );
 80016c4:	f000 f801 	bl	80016ca <Adv_Update>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 80016c8:	e7f6      	b.n	80016b8 <AdvUpdateProcess+0x8>

080016ca <Adv_Update>:
  }
}

static void Adv_Update( void )
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	af00      	add	r7, sp, #0
  Adv_Request(APP_BLE_LP_ADV);
 80016ce:	2002      	movs	r0, #2
 80016d0:	f7ff fef8 	bl	80014c4 <Adv_Request>

  return;
 80016d4:	bf00      	nop
}
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HciUserEvtProcess>:
  }
  return;
}

static void HciUserEvtProcess(void *argument)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
 80016e4:	2100      	movs	r1, #0
 80016e6:	2001      	movs	r0, #1
 80016e8:	f00d fe80 	bl	800f3ec <osThreadFlagsWait>
    hci_user_evt_proc( );
 80016ec:	f00c f958 	bl	800d9a0 <hci_user_evt_proc>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 80016f0:	e7f6      	b.n	80016e0 <HciUserEvtProcess+0x8>
	...

080016f4 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet( HciUserEvtProcessId, 1 );
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <hci_notify_asynch_evt+0x1c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2101      	movs	r1, #1
 8001702:	4618      	mov	r0, r3
 8001704:	f00d fe10 	bl	800f328 <osThreadFlagsSet>
  return;
 8001708:	bf00      	nop
}
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20004870 	.word	0x20004870

08001714 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemHciId );
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <hci_cmd_resp_release+0x1c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f00e f971 	bl	800fa08 <osSemaphoreRelease>
  return;
 8001726:	bf00      	nop
}
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	2000486c 	.word	0x2000486c

08001734 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemHciId, osWaitForever );
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <hci_cmd_resp_wait+0x20>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f04f 31ff 	mov.w	r1, #4294967295
 8001744:	4618      	mov	r0, r3
 8001746:	f00e f8f9 	bl	800f93c <osSemaphoreAcquire>
  return;
 800174a:	bf00      	nop
}
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000486c 	.word	0x2000486c

08001758 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	3308      	adds	r3, #8
 800176a:	4618      	mov	r0, r3
 800176c:	f00b f8c4 	bl	800c8f8 <SVCCTL_UserEvtRx>
 8001770:	4603      	mov	r3, r0
 8001772:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8001774:	7afb      	ldrb	r3, [r7, #11]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2201      	movs	r2, #1
 800177e:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8001780:	e002      	b.n	8001788 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
}
 8001788:	bf00      	nop
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
  switch (status)
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d002      	beq.n	80017a6 <BLE_StatusNot+0x16>
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d008      	beq.n	80017b6 <BLE_StatusNot+0x26>
    case HCI_TL_CmdAvailable:
      osMutexRelease( MtxHciId );
      break;

    default:
      break;
 80017a4:	e00d      	b.n	80017c2 <BLE_StatusNot+0x32>
      osMutexAcquire( MtxHciId, osWaitForever );
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <BLE_StatusNot+0x3c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f04f 31ff 	mov.w	r1, #4294967295
 80017ae:	4618      	mov	r0, r3
 80017b0:	f00d ff78 	bl	800f6a4 <osMutexAcquire>
      break;
 80017b4:	e005      	b.n	80017c2 <BLE_StatusNot+0x32>
      osMutexRelease( MtxHciId );
 80017b6:	4b05      	ldr	r3, [pc, #20]	; (80017cc <BLE_StatusNot+0x3c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f00d ffd0 	bl	800f760 <osMutexRelease>
      break;
 80017c0:	bf00      	nop
  }
  return;
 80017c2:	bf00      	nop
}
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	2000487c 	.word	0x2000487c

080017d0 <P2PS_STM_App_Notification>:
static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d00e      	beq.n	80017fe <P2PS_STM_App_Notification+0x2e>
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d016      	beq.n	8001812 <P2PS_STM_App_Notification+0x42>
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d000      	beq.n	80017ea <P2PS_STM_App_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 80017e8:	e066      	b.n	80018b8 <P2PS_STM_App_Notification+0xe8>
      P2P_Server_App_Context.Notification_Status = 1;
 80017ea:	4b35      	ldr	r3, [pc, #212]	; (80018c0 <P2PS_STM_App_Notification+0xf0>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n");
 80017f0:	4834      	ldr	r0, [pc, #208]	; (80018c4 <P2PS_STM_App_Notification+0xf4>)
 80017f2:	f012 fbbf 	bl	8013f74 <puts>
      APP_DBG_MSG(" \n\r");
 80017f6:	4834      	ldr	r0, [pc, #208]	; (80018c8 <P2PS_STM_App_Notification+0xf8>)
 80017f8:	f012 fb48 	bl	8013e8c <iprintf>
      break;
 80017fc:	e05c      	b.n	80018b8 <P2PS_STM_App_Notification+0xe8>
      P2P_Server_App_Context.Notification_Status = 0;
 80017fe:	4b30      	ldr	r3, [pc, #192]	; (80018c0 <P2PS_STM_App_Notification+0xf0>)
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 8001804:	4831      	ldr	r0, [pc, #196]	; (80018cc <P2PS_STM_App_Notification+0xfc>)
 8001806:	f012 fbb5 	bl	8013f74 <puts>
      APP_DBG_MSG(" \n\r");
 800180a:	482f      	ldr	r0, [pc, #188]	; (80018c8 <P2PS_STM_App_Notification+0xf8>)
 800180c:	f012 fb3e 	bl	8013e8c <iprintf>
      break;
 8001810:	e052      	b.n	80018b8 <P2PS_STM_App_Notification+0xe8>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d123      	bne.n	8001864 <P2PS_STM_App_Notification+0x94>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	3301      	adds	r3, #1
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d10b      	bne.n	8001840 <P2PS_STM_App_Notification+0x70>
          BSP_LED_On(LED_BLUE);
 8001828:	2000      	movs	r0, #0
 800182a:	f004 fa99 	bl	8005d60 <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 ON\n");
 800182e:	4828      	ldr	r0, [pc, #160]	; (80018d0 <P2PS_STM_App_Notification+0x100>)
 8001830:	f012 fba0 	bl	8013f74 <puts>
          APP_DBG_MSG(" \n\r");
 8001834:	4824      	ldr	r0, [pc, #144]	; (80018c8 <P2PS_STM_App_Notification+0xf8>)
 8001836:	f012 fb29 	bl	8013e8c <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 800183a:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <P2PS_STM_App_Notification+0xf0>)
 800183c:	2201      	movs	r2, #1
 800183e:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	3301      	adds	r3, #1
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10b      	bne.n	8001864 <P2PS_STM_App_Notification+0x94>
          BSP_LED_Off(LED_BLUE);
 800184c:	2000      	movs	r0, #0
 800184e:	f004 faa1 	bl	8005d94 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 OFF\n");
 8001852:	4820      	ldr	r0, [pc, #128]	; (80018d4 <P2PS_STM_App_Notification+0x104>)
 8001854:	f012 fb8e 	bl	8013f74 <puts>
          APP_DBG_MSG(" \n\r");
 8001858:	481b      	ldr	r0, [pc, #108]	; (80018c8 <P2PS_STM_App_Notification+0xf8>)
 800185a:	f012 fb17 	bl	8013e8c <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 800185e:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <P2PS_STM_App_Notification+0xf0>)
 8001860:	2200      	movs	r2, #0
 8001862:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d123      	bne.n	80018b6 <P2PS_STM_App_Notification+0xe6>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	3301      	adds	r3, #1
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d10b      	bne.n	8001892 <P2PS_STM_App_Notification+0xc2>
          BSP_LED_On(LED_BLUE);
 800187a:	2000      	movs	r0, #0
 800187c:	f004 fa70 	bl	8005d60 <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 ON\n");
 8001880:	4815      	ldr	r0, [pc, #84]	; (80018d8 <P2PS_STM_App_Notification+0x108>)
 8001882:	f012 fb77 	bl	8013f74 <puts>
          APP_DBG_MSG(" \n\r");
 8001886:	4810      	ldr	r0, [pc, #64]	; (80018c8 <P2PS_STM_App_Notification+0xf8>)
 8001888:	f012 fb00 	bl	8013e8c <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <P2PS_STM_App_Notification+0xf0>)
 800188e:	2201      	movs	r2, #1
 8001890:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	3301      	adds	r3, #1
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10b      	bne.n	80018b6 <P2PS_STM_App_Notification+0xe6>
          BSP_LED_Off(LED_BLUE);
 800189e:	2000      	movs	r0, #0
 80018a0:	f004 fa78 	bl	8005d94 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 OFF\n");
 80018a4:	480d      	ldr	r0, [pc, #52]	; (80018dc <P2PS_STM_App_Notification+0x10c>)
 80018a6:	f012 fb65 	bl	8013f74 <puts>
          APP_DBG_MSG(" \n\r");
 80018aa:	4807      	ldr	r0, [pc, #28]	; (80018c8 <P2PS_STM_App_Notification+0xf8>)
 80018ac:	f012 faee 	bl	8013e8c <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <P2PS_STM_App_Notification+0xf0>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	709a      	strb	r2, [r3, #2]
      break;
 80018b6:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 80018b8:	bf00      	nop
}
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000288 	.word	0x20000288
 80018c4:	080165ac 	.word	0x080165ac
 80018c8:	080165e0 	.word	0x080165e0
 80018cc:	080165e4 	.word	0x080165e4
 80018d0:	08016618 	.word	0x08016618
 80018d4:	08016640 	.word	0x08016640
 80018d8:	08016668 	.word	0x08016668
 80018dc:	08016690 	.word	0x08016690

080018e0 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d005      	beq.n	80018fc <P2PS_APP_Notification+0x1c>
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d000      	beq.n	80018f6 <P2PS_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 80018f4:	e003      	b.n	80018fe <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();
 80018f6:	f000 f821 	bl	800193c <P2PS_APP_LED_BUTTON_context_Init>
    break;
 80018fa:	e000      	b.n	80018fe <P2PS_APP_Notification+0x1e>
    break;
 80018fc:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 80018fe:	bf00      	nop
}
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
  //P2P FIX UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
  P2PProcessId = osThreadNew(P2PProcess, NULL, &P2PProcess_attr);
 800190c:	4a07      	ldr	r2, [pc, #28]	; (800192c <P2PS_APP_Init+0x24>)
 800190e:	2100      	movs	r1, #0
 8001910:	4807      	ldr	r0, [pc, #28]	; (8001930 <P2PS_APP_Init+0x28>)
 8001912:	f00d fc63 	bl	800f1dc <osThreadNew>
 8001916:	4602      	mov	r2, r0
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <P2PS_APP_Init+0x2c>)
 800191a:	601a      	str	r2, [r3, #0]
  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <P2PS_APP_Init+0x30>)
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
  P2PS_APP_LED_BUTTON_context_Init();
 8001922:	f000 f80b 	bl	800193c <P2PS_APP_LED_BUTTON_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 8001926:	bf00      	nop
}
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	08016950 	.word	0x08016950
 8001930:	080019c1 	.word	0x080019c1
 8001934:	20004884 	.word	0x20004884
 8001938:	20000288 	.word	0x20000288

0800193c <P2PS_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0

  BSP_LED_Off(LED_BLUE);
 8001940:	2000      	movs	r0, #0
 8001942:	f004 fa27 	bl	8005d94 <BSP_LED_Off>

  #if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 8001946:	4b07      	ldr	r3, [pc, #28]	; (8001964 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 8001948:	2201      	movs	r2, #1
 800194a:	705a      	strb	r2, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 800194e:	2200      	movs	r2, #0
 8001950:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 8001952:	4b04      	ldr	r3, [pc, #16]	; (8001964 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 8001954:	2201      	movs	r2, #1
 8001956:	70da      	strb	r2, [r3, #3]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8001958:	4b02      	ldr	r3, [pc, #8]	; (8001964 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 800195a:	2200      	movs	r2, #0
 800195c:	711a      	strb	r2, [r3, #4]
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x06; /* device6 */
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x06; /* Device6 */
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
#endif
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000288 	.word	0x20000288

08001968 <P2PS_Send_Notification>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_Send_Notification(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0

  if(P2P_Server_App_Context.ButtonControl.ButtonStatus == 0x00){
 800196c:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <P2PS_Send_Notification+0x44>)
 800196e:	791b      	ldrb	r3, [r3, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d103      	bne.n	800197c <P2PS_Send_Notification+0x14>
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x01;
 8001974:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <P2PS_Send_Notification+0x44>)
 8001976:	2201      	movs	r2, #1
 8001978:	711a      	strb	r2, [r3, #4]
 800197a:	e002      	b.n	8001982 <P2PS_Send_Notification+0x1a>
  } else {
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <P2PS_Send_Notification+0x44>)
 800197e:	2200      	movs	r2, #0
 8001980:	711a      	strb	r2, [r3, #4]
  }

   if(P2P_Server_App_Context.Notification_Status){
 8001982:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <P2PS_Send_Notification+0x44>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00b      	beq.n	80019a2 <P2PS_Send_Notification+0x3a>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
 800198a:	4809      	ldr	r0, [pc, #36]	; (80019b0 <P2PS_Send_Notification+0x48>)
 800198c:	f012 fa7e 	bl	8013e8c <iprintf>
    APP_DBG_MSG(" \n\r");
 8001990:	4808      	ldr	r0, [pc, #32]	; (80019b4 <P2PS_Send_Notification+0x4c>)
 8001992:	f012 fa7b 	bl	8013e8c <iprintf>


    P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Server_App_Context.ButtonControl);
 8001996:	4908      	ldr	r1, [pc, #32]	; (80019b8 <P2PS_Send_Notification+0x50>)
 8001998:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800199c:	f00c fdfc 	bl	800e598 <P2PS_STM_App_Update_Char>

   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
   }

  return;
 80019a0:	e003      	b.n	80019aa <P2PS_Send_Notification+0x42>
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
 80019a2:	4806      	ldr	r0, [pc, #24]	; (80019bc <P2PS_Send_Notification+0x54>)
 80019a4:	f012 fa72 	bl	8013e8c <iprintf>
  return;
 80019a8:	bf00      	nop
}
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000288 	.word	0x20000288
 80019b0:	080166b8 	.word	0x080166b8
 80019b4:	080165e0 	.word	0x080165e0
 80019b8:	2000028b 	.word	0x2000028b
 80019bc:	080166f8 	.word	0x080166f8

080019c0 <P2PProcess>:

static void P2PProcess(void *argument)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 80019c8:	f04f 32ff 	mov.w	r2, #4294967295
 80019cc:	2100      	movs	r1, #0
 80019ce:	2001      	movs	r0, #1
 80019d0:	f00d fd0c 	bl	800f3ec <osThreadFlagsWait>
    P2PS_Send_Notification( );
 80019d4:	f7ff ffc8 	bl	8001968 <P2PS_Send_Notification>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 80019d8:	e7f6      	b.n	80019c8 <P2PProcess+0x8>
	...

080019dc <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <LL_PWR_EnableBootC2+0x1c>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <LL_PWR_EnableBootC2+0x1c>)
 80019e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ea:	60d3      	str	r3, [r2, #12]
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	58000400 	.word	0x58000400

080019fc <LL_C2_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8001a06:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001a0a:	4905      	ldr	r1, [pc, #20]	; (8001a20 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	58000800 	.word	0x58000800

08001a24 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001a2e:	6a1a      	ldr	r2, [r3, #32]
 8001a30:	4904      	ldr	r1, [pc, #16]	; (8001a44 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	620b      	str	r3, [r1, #32]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	58000800 	.word	0x58000800

08001a48 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
}
 8001a6e:	bf00      	nop
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b085      	sub	sp, #20
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8001a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a86:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001a8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8001a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a9a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
}
 8001aa6:	bf00      	nop
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	601a      	str	r2, [r3, #0]
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f043 0201 	orr.w	r2, r3, #1
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	601a      	str	r2, [r3, #0]
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	041b      	lsls	r3, r3, #16
 8001b04:	43db      	mvns	r3, r3
 8001b06:	401a      	ands	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	605a      	str	r2, [r3, #4]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	041b      	lsls	r3, r3, #16
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	605a      	str	r2, [r3, #4]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	401a      	ands	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	605a      	str	r2, [r3, #4]
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	609a      	str	r2, [r3, #8]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	041a      	lsls	r2, r3, #16
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	609a      	str	r2, [r3, #8]
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	4013      	ands	r3, r2
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d101      	bne.n	8001bb6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69da      	ldr	r2, [r3, #28]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d101      	bne.n	8001be0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8001bf4:	2102      	movs	r1, #2
 8001bf6:	4819      	ldr	r0, [pc, #100]	; (8001c5c <HW_IPCC_Rx_Handler+0x6c>)
 8001bf8:	f7ff ffe4 	bl	8001bc4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d009      	beq.n	8001c16 <HW_IPCC_Rx_Handler+0x26>
 8001c02:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <HW_IPCC_Rx_Handler+0x6c>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8001c10:	f000 f8ea 	bl	8001de8 <HW_IPCC_SYS_EvtHandler>
 8001c14:	e01f      	b.n	8001c56 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8001c16:	2101      	movs	r1, #1
 8001c18:	4810      	ldr	r0, [pc, #64]	; (8001c5c <HW_IPCC_Rx_Handler+0x6c>)
 8001c1a:	f7ff ffd3 	bl	8001bc4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d008      	beq.n	8001c36 <HW_IPCC_Rx_Handler+0x46>
 8001c24:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <HW_IPCC_Rx_Handler+0x6c>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d102      	bne.n	8001c36 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8001c30:	f000 f89e 	bl	8001d70 <HW_IPCC_BLE_EvtHandler>
 8001c34:	e00f      	b.n	8001c56 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8001c36:	2108      	movs	r1, #8
 8001c38:	4808      	ldr	r0, [pc, #32]	; (8001c5c <HW_IPCC_Rx_Handler+0x6c>)
 8001c3a:	f7ff ffc3 	bl	8001bc4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d009      	beq.n	8001c58 <HW_IPCC_Rx_Handler+0x68>
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HW_IPCC_Rx_Handler+0x6c>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d002      	beq.n	8001c58 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8001c52:	f000 f915 	bl	8001e80 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8001c56:	bf00      	nop
 8001c58:	bf00      	nop
}
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	58000c00 	.word	0x58000c00

08001c60 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8001c64:	2102      	movs	r1, #2
 8001c66:	4822      	ldr	r0, [pc, #136]	; (8001cf0 <HW_IPCC_Tx_Handler+0x90>)
 8001c68:	f7ff ff97 	bl	8001b9a <LL_C1_IPCC_IsActiveFlag_CHx>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d109      	bne.n	8001c86 <HW_IPCC_Tx_Handler+0x26>
 8001c72:	4b1f      	ldr	r3, [pc, #124]	; (8001cf0 <HW_IPCC_Tx_Handler+0x90>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8001c80:	f000 f8a6 	bl	8001dd0 <HW_IPCC_SYS_CmdEvtHandler>
 8001c84:	e031      	b.n	8001cea <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8001c86:	2102      	movs	r1, #2
 8001c88:	4819      	ldr	r0, [pc, #100]	; (8001cf0 <HW_IPCC_Tx_Handler+0x90>)
 8001c8a:	f7ff ff86 	bl	8001b9a <LL_C1_IPCC_IsActiveFlag_CHx>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d109      	bne.n	8001ca8 <HW_IPCC_Tx_Handler+0x48>
 8001c94:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <HW_IPCC_Tx_Handler+0x90>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8001ca2:	f000 f895 	bl	8001dd0 <HW_IPCC_SYS_CmdEvtHandler>
 8001ca6:	e020      	b.n	8001cea <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8001ca8:	2108      	movs	r1, #8
 8001caa:	4811      	ldr	r0, [pc, #68]	; (8001cf0 <HW_IPCC_Tx_Handler+0x90>)
 8001cac:	f7ff ff75 	bl	8001b9a <LL_C1_IPCC_IsActiveFlag_CHx>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d109      	bne.n	8001cca <HW_IPCC_Tx_Handler+0x6a>
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <HW_IPCC_Tx_Handler+0x90>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8001cc4:	f000 f8be 	bl	8001e44 <HW_IPCC_MM_FreeBufHandler>
 8001cc8:	e00f      	b.n	8001cea <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8001cca:	2120      	movs	r1, #32
 8001ccc:	4808      	ldr	r0, [pc, #32]	; (8001cf0 <HW_IPCC_Tx_Handler+0x90>)
 8001cce:	f7ff ff64 	bl	8001b9a <LL_C1_IPCC_IsActiveFlag_CHx>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d109      	bne.n	8001cec <HW_IPCC_Tx_Handler+0x8c>
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HW_IPCC_Tx_Handler+0x90>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d002      	beq.n	8001cec <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8001ce6:	f000 f84f 	bl	8001d88 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8001cea:	bf00      	nop
 8001cec:	bf00      	nop
}
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	58000c00 	.word	0x58000c00

08001cf4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8001cf8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001cfc:	f7ff febd 	bl	8001a7a <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8001d00:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d04:	f7ff fe7a 	bl	80019fc <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8001d08:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d0c:	f7ff fe8a 	bl	8001a24 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8001d10:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8001d12:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8001d14:	f7ff fe62 	bl	80019dc <LL_PWR_EnableBootC2>

  return;
 8001d18:	bf00      	nop
}
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8001d20:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001d24:	f7ff fe90 	bl	8001a48 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8001d28:	4806      	ldr	r0, [pc, #24]	; (8001d44 <HW_IPCC_Init+0x28>)
 8001d2a:	f7ff fed2 	bl	8001ad2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8001d2e:	4805      	ldr	r0, [pc, #20]	; (8001d44 <HW_IPCC_Init+0x28>)
 8001d30:	f7ff febf 	bl	8001ab2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001d34:	202c      	movs	r0, #44	; 0x2c
 8001d36:	f004 fa51 	bl	80061dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001d3a:	202d      	movs	r0, #45	; 0x2d
 8001d3c:	f004 fa4e 	bl	80061dc <HAL_NVIC_EnableIRQ>

  return;
 8001d40:	bf00      	nop
}
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	58000c00 	.word	0x58000c00

08001d48 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	4802      	ldr	r0, [pc, #8]	; (8001d58 <HW_IPCC_BLE_Init+0x10>)
 8001d50:	f7ff fef4 	bl	8001b3c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001d54:	bf00      	nop
}
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	58000c00 	.word	0x58000c00

08001d5c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8001d60:	2101      	movs	r1, #1
 8001d62:	4802      	ldr	r0, [pc, #8]	; (8001d6c <HW_IPCC_BLE_SendCmd+0x10>)
 8001d64:	f7ff ff0a 	bl	8001b7c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8001d68:	bf00      	nop
}
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	58000c00 	.word	0x58000c00

08001d70 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8001d74:	f00c f952 	bl	800e01c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8001d78:	2101      	movs	r1, #1
 8001d7a:	4802      	ldr	r0, [pc, #8]	; (8001d84 <HW_IPCC_BLE_EvtHandler+0x14>)
 8001d7c:	f7ff fef0 	bl	8001b60 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001d80:	bf00      	nop
}
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	58000c00 	.word	0x58000c00

08001d88 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8001d8c:	2120      	movs	r1, #32
 8001d8e:	4803      	ldr	r0, [pc, #12]	; (8001d9c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8001d90:	f7ff fec2 	bl	8001b18 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8001d94:	f00c f972 	bl	800e07c <HW_IPCC_BLE_AclDataAckNot>

  return;
 8001d98:	bf00      	nop
}
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	58000c00 	.word	0x58000c00

08001da0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001da4:	2102      	movs	r1, #2
 8001da6:	4802      	ldr	r0, [pc, #8]	; (8001db0 <HW_IPCC_SYS_Init+0x10>)
 8001da8:	f7ff fec8 	bl	8001b3c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001dac:	bf00      	nop
}
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	58000c00 	.word	0x58000c00

08001db4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001db8:	2102      	movs	r1, #2
 8001dba:	4804      	ldr	r0, [pc, #16]	; (8001dcc <HW_IPCC_SYS_SendCmd+0x18>)
 8001dbc:	f7ff fede 	bl	8001b7c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001dc0:	2102      	movs	r1, #2
 8001dc2:	4802      	ldr	r0, [pc, #8]	; (8001dcc <HW_IPCC_SYS_SendCmd+0x18>)
 8001dc4:	f7ff fe95 	bl	8001af2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001dc8:	bf00      	nop
}
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	58000c00 	.word	0x58000c00

08001dd0 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001dd4:	2102      	movs	r1, #2
 8001dd6:	4803      	ldr	r0, [pc, #12]	; (8001de4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8001dd8:	f7ff fe9e 	bl	8001b18 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8001ddc:	f00c f99e 	bl	800e11c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8001de0:	bf00      	nop
}
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	58000c00 	.word	0x58000c00

08001de8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8001dec:	f00c f9ac 	bl	800e148 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001df0:	2102      	movs	r1, #2
 8001df2:	4802      	ldr	r0, [pc, #8]	; (8001dfc <HW_IPCC_SYS_EvtHandler+0x14>)
 8001df4:	f7ff feb4 	bl	8001b60 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001df8:	bf00      	nop
}
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	58000c00 	.word	0x58000c00

08001e00 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8001e08:	2108      	movs	r1, #8
 8001e0a:	480c      	ldr	r0, [pc, #48]	; (8001e3c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001e0c:	f7ff fec5 	bl	8001b9a <LL_C1_IPCC_IsActiveFlag_CHx>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d007      	beq.n	8001e26 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001e1c:	2108      	movs	r1, #8
 8001e1e:	4807      	ldr	r0, [pc, #28]	; (8001e3c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001e20:	f7ff fe67 	bl	8001af2 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8001e24:	e006      	b.n	8001e34 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001e2a:	2108      	movs	r1, #8
 8001e2c:	4803      	ldr	r0, [pc, #12]	; (8001e3c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001e2e:	f7ff fea5 	bl	8001b7c <LL_C1_IPCC_SetFlag_CHx>
  return;
 8001e32:	bf00      	nop
}
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	58000c00 	.word	0x58000c00
 8001e40:	200003a4 	.word	0x200003a4

08001e44 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001e48:	2108      	movs	r1, #8
 8001e4a:	4806      	ldr	r0, [pc, #24]	; (8001e64 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001e4c:	f7ff fe64 	bl	8001b18 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001e56:	2108      	movs	r1, #8
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001e5a:	f7ff fe8f 	bl	8001b7c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8001e5e:	bf00      	nop
}
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	58000c00 	.word	0x58000c00
 8001e68:	200003a4 	.word	0x200003a4

08001e6c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001e70:	2108      	movs	r1, #8
 8001e72:	4802      	ldr	r0, [pc, #8]	; (8001e7c <HW_IPCC_TRACES_Init+0x10>)
 8001e74:	f7ff fe62 	bl	8001b3c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001e78:	bf00      	nop
}
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	58000c00 	.word	0x58000c00

08001e80 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8001e84:	f00c fa08 	bl	800e298 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001e88:	2108      	movs	r1, #8
 8001e8a:	4802      	ldr	r0, [pc, #8]	; (8001e94 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8001e8c:	f7ff fe68 	bl	8001b60 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001e90:	bf00      	nop
}
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	58000c00 	.word	0x58000c00

08001e98 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001e98:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e9a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9c:	3304      	adds	r3, #4

08001e9e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e9e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001ea2:	d3f9      	bcc.n	8001e98 <CopyDataInit>
  bx lr
 8001ea4:	4770      	bx	lr

08001ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001ea6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001ea8:	3004      	adds	r0, #4

08001eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001eaa:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001eac:	d3fb      	bcc.n	8001ea6 <FillZerobss>
  bx lr
 8001eae:	4770      	bx	lr

08001eb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001eb0:	480c      	ldr	r0, [pc, #48]	; (8001ee4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001eb2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001eb4:	f003 ff88 	bl	8005dc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001eb8:	480b      	ldr	r0, [pc, #44]	; (8001ee8 <LoopForever+0x8>)
 8001eba:	490c      	ldr	r1, [pc, #48]	; (8001eec <LoopForever+0xc>)
 8001ebc:	4a0c      	ldr	r2, [pc, #48]	; (8001ef0 <LoopForever+0x10>)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f7ff ffed 	bl	8001e9e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001ec4:	480b      	ldr	r0, [pc, #44]	; (8001ef4 <LoopForever+0x14>)
 8001ec6:	490c      	ldr	r1, [pc, #48]	; (8001ef8 <LoopForever+0x18>)
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f7ff ffee 	bl	8001eaa <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001ece:	480b      	ldr	r0, [pc, #44]	; (8001efc <LoopForever+0x1c>)
 8001ed0:	490b      	ldr	r1, [pc, #44]	; (8001f00 <LoopForever+0x20>)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f7ff ffe9 	bl	8001eaa <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ed8:	f011 fa94 	bl	8013404 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001edc:	f002 f9f4 	bl	80042c8 <main>

08001ee0 <LoopForever>:

LoopForever:
  b LoopForever
 8001ee0:	e7fe      	b.n	8001ee0 <LoopForever>
 8001ee2:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001ee4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001ee8:	20000004 	.word	0x20000004
 8001eec:	20000200 	.word	0x20000200
 8001ef0:	08018000 	.word	0x08018000
  INIT_BSS _sbss, _ebss
 8001ef4:	20000380 	.word	0x20000380
 8001ef8:	20004cf8 	.word	0x20004cf8
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001efc:	200301e0 	.word	0x200301e0
 8001f00:	20030a57 	.word	0x20030a57

08001f04 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f04:	e7fe      	b.n	8001f04 <ADC1_IRQHandler>
	...

08001f08 <LL_EXTI_EnableIT_32_63>:
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <LL_EXTI_EnableIT_32_63+0x24>)
 8001f12:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001f16:	4905      	ldr	r1, [pc, #20]	; (8001f2c <LL_EXTI_EnableIT_32_63+0x24>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	58000800 	.word	0x58000800

08001f30 <LL_AHB2_GRP1_EnableClock>:
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4013      	ands	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f54:	68fb      	ldr	r3, [r7, #12]
}
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <LL_C2_AHB2_GRP1_EnableClock>:
{
 8001f62:	b480      	push	{r7}
 8001f64:	b085      	sub	sp, #20
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8001f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f6e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001f72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8001f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f82:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
}
 8001f8e:	bf00      	nop
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001f9e:	f003 ffe1 	bl	8005f64 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001fa2:	f003 ffe5 	bl	8005f70 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8001fa6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001faa:	f7ff ffad 	bl	8001f08 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8001fae:	f00c fb4b 	bl	800e648 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8001fb2:	f000 f821 	bl	8001ff8 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8001fb6:	f000 f8bf 	bl	8002138 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8001fba:	bf00      	nop
}
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8001fc0:	b5b0      	push	{r4, r5, r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <APPD_EnableCPU2+0x34>)
 8001fc8:	1d3c      	adds	r4, r7, #4
 8001fca:	461d      	mov	r5, r3
 8001fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fd4:	c403      	stmia	r4!, {r0, r1}
 8001fd6:	8022      	strh	r2, [r4, #0]
 8001fd8:	3402      	adds	r4, #2
 8001fda:	0c13      	lsrs	r3, r2, #16
 8001fdc:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8001fde:	f00c f949 	bl	800e274 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f00b fca8 	bl	800d93a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8001fea:	bf00      	nop
}
 8001fec:	3720      	adds	r7, #32
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	08016744 	.word	0x08016744

08001ff8 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8002018:	2300      	movs	r3, #0
 800201a:	77fb      	strb	r3, [r7, #31]
 800201c:	e033      	b.n	8002086 <APPD_SetCPU2GpioConfig+0x8e>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 800201e:	7ffb      	ldrb	r3, [r7, #31]
 8002020:	4a42      	ldr	r2, [pc, #264]	; (800212c <APPD_SetCPU2GpioConfig+0x134>)
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4413      	add	r3, r2
 8002026:	799b      	ldrb	r3, [r3, #6]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d028      	beq.n	800207e <APPD_SetCPU2GpioConfig+0x86>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 800202c:	7ffb      	ldrb	r3, [r7, #31]
 800202e:	4a3f      	ldr	r2, [pc, #252]	; (800212c <APPD_SetCPU2GpioConfig+0x134>)
 8002030:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002034:	4a3e      	ldr	r2, [pc, #248]	; (8002130 <APPD_SetCPU2GpioConfig+0x138>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00f      	beq.n	800205a <APPD_SetCPU2GpioConfig+0x62>
 800203a:	4a3e      	ldr	r2, [pc, #248]	; (8002134 <APPD_SetCPU2GpioConfig+0x13c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d015      	beq.n	800206c <APPD_SetCPU2GpioConfig+0x74>
 8002040:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002044:	d000      	beq.n	8002048 <APPD_SetCPU2GpioConfig+0x50>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8002046:	e01b      	b.n	8002080 <APPD_SetCPU2GpioConfig+0x88>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8002048:	7ffb      	ldrb	r3, [r7, #31]
 800204a:	4a38      	ldr	r2, [pc, #224]	; (800212c <APPD_SetCPU2GpioConfig+0x134>)
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4413      	add	r3, r2
 8002050:	889a      	ldrh	r2, [r3, #4]
 8002052:	8bbb      	ldrh	r3, [r7, #28]
 8002054:	4313      	orrs	r3, r2
 8002056:	83bb      	strh	r3, [r7, #28]
          break;
 8002058:	e012      	b.n	8002080 <APPD_SetCPU2GpioConfig+0x88>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 800205a:	7ffb      	ldrb	r3, [r7, #31]
 800205c:	4a33      	ldr	r2, [pc, #204]	; (800212c <APPD_SetCPU2GpioConfig+0x134>)
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4413      	add	r3, r2
 8002062:	889a      	ldrh	r2, [r3, #4]
 8002064:	8b7b      	ldrh	r3, [r7, #26]
 8002066:	4313      	orrs	r3, r2
 8002068:	837b      	strh	r3, [r7, #26]
          break;
 800206a:	e009      	b.n	8002080 <APPD_SetCPU2GpioConfig+0x88>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 800206c:	7ffb      	ldrb	r3, [r7, #31]
 800206e:	4a2f      	ldr	r2, [pc, #188]	; (800212c <APPD_SetCPU2GpioConfig+0x134>)
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4413      	add	r3, r2
 8002074:	889a      	ldrh	r2, [r3, #4]
 8002076:	8b3b      	ldrh	r3, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	833b      	strh	r3, [r7, #24]
          break;
 800207c:	e000      	b.n	8002080 <APPD_SetCPU2GpioConfig+0x88>
      }
    }
 800207e:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8002080:	7ffb      	ldrb	r3, [r7, #31]
 8002082:	3301      	adds	r3, #1
 8002084:	77fb      	strb	r3, [r7, #31]
 8002086:	7ffb      	ldrb	r3, [r7, #31]
 8002088:	2b21      	cmp	r3, #33	; 0x21
 800208a:	d9c8      	bls.n	800201e <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8002090:	2301      	movs	r3, #1
 8002092:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002094:	2303      	movs	r3, #3
 8002096:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8002098:	8bbb      	ldrh	r3, [r7, #28]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d014      	beq.n	80020c8 <APPD_SetCPU2GpioConfig+0xd0>
  {
    gpio_config.Pin = gpioa_pin_list;
 800209e:	8bbb      	ldrh	r3, [r7, #28]
 80020a0:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a2:	2001      	movs	r0, #1
 80020a4:	f7ff ff44 	bl	8001f30 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80020a8:	2001      	movs	r0, #1
 80020aa:	f7ff ff5a 	bl	8001f62 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	4619      	mov	r1, r3
 80020b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b6:	f004 fbdd 	bl	8006874 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80020ba:	8bbb      	ldrh	r3, [r7, #28]
 80020bc:	2200      	movs	r2, #0
 80020be:	4619      	mov	r1, r3
 80020c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c4:	f004 fd5e 	bl	8006b84 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80020c8:	8b7b      	ldrh	r3, [r7, #26]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d012      	beq.n	80020f4 <APPD_SetCPU2GpioConfig+0xfc>
  {
    gpio_config.Pin = gpiob_pin_list;
 80020ce:	8b7b      	ldrh	r3, [r7, #26]
 80020d0:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d2:	2002      	movs	r0, #2
 80020d4:	f7ff ff2c 	bl	8001f30 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 80020d8:	2002      	movs	r0, #2
 80020da:	f7ff ff42 	bl	8001f62 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	4619      	mov	r1, r3
 80020e2:	4813      	ldr	r0, [pc, #76]	; (8002130 <APPD_SetCPU2GpioConfig+0x138>)
 80020e4:	f004 fbc6 	bl	8006874 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 80020e8:	8b7b      	ldrh	r3, [r7, #26]
 80020ea:	2200      	movs	r2, #0
 80020ec:	4619      	mov	r1, r3
 80020ee:	4810      	ldr	r0, [pc, #64]	; (8002130 <APPD_SetCPU2GpioConfig+0x138>)
 80020f0:	f004 fd48 	bl	8006b84 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 80020f4:	8b3b      	ldrh	r3, [r7, #24]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d013      	beq.n	8002122 <APPD_SetCPU2GpioConfig+0x12a>
  {
    gpio_config.Pin = gpioc_pin_list;
 80020fa:	8b3b      	ldrh	r3, [r7, #24]
 80020fc:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020fe:	2004      	movs	r0, #4
 8002100:	f7ff ff16 	bl	8001f30 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8002104:	2004      	movs	r0, #4
 8002106:	f7ff ff2c 	bl	8001f62 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	4619      	mov	r1, r3
 800210e:	4809      	ldr	r0, [pc, #36]	; (8002134 <APPD_SetCPU2GpioConfig+0x13c>)
 8002110:	f004 fbb0 	bl	8006874 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8002114:	8b3b      	ldrh	r3, [r7, #24]
 8002116:	2200      	movs	r2, #0
 8002118:	4619      	mov	r1, r3
 800211a:	4806      	ldr	r0, [pc, #24]	; (8002134 <APPD_SetCPU2GpioConfig+0x13c>)
 800211c:	f004 fd32 	bl	8006b84 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8002120:	bf00      	nop
 8002122:	bf00      	nop
}
 8002124:	3720      	adds	r7, #32
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	08016974 	.word	0x08016974
 8002130:	48000400 	.word	0x48000400
 8002134:	48000800 	.word	0x48000800

08002138 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 800213c:	bf00      	nop
}
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8002146:	b580      	push	{r7, lr}
 8002148:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 800214a:	f002 fa0d 	bl	8004568 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 800214e:	bf00      	nop
}
 8002150:	bd80      	pop	{r7, pc}

08002152 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b084      	sub	sp, #16
 8002156:	af00      	add	r7, sp, #0
 8002158:	60f8      	str	r0, [r7, #12]
 800215a:	460b      	mov	r3, r1
 800215c:	607a      	str	r2, [r7, #4]
 800215e:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8002160:	897a      	ldrh	r2, [r7, #10]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68f9      	ldr	r1, [r7, #12]
 8002166:	2000      	movs	r0, #0
 8002168:	f001 fcdc 	bl	8003b24 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 800216c:	bf00      	nop
}
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800217c:	4b07      	ldr	r3, [pc, #28]	; (800219c <LL_C2_PWR_SetPowerMode+0x28>)
 800217e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002182:	f023 0207 	bic.w	r2, r3, #7
 8002186:	4905      	ldr	r1, [pc, #20]	; (800219c <LL_C2_PWR_SetPowerMode+0x28>)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	58000400 	.word	0x58000400

080021a0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80021a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80021b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	608b      	str	r3, [r1, #8]
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <APPE_Init>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 80021cc:	f000 f814 	bl	80021f8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80021d0:	4908      	ldr	r1, [pc, #32]	; (80021f4 <APPE_Init+0x2c>)
 80021d2:	2000      	movs	r0, #0
 80021d4:	f001 fa2c 	bl	8003630 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 80021d8:	f7ff fedf 	bl	8001f9a <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80021dc:	2101      	movs	r1, #1
 80021de:	2001      	movs	r0, #1
 80021e0:	f011 f8dc 	bl	801339c <UTIL_LPM_SetOffMode>

  Led_Init();
 80021e4:	f000 f8a1 	bl	800232a <Led_Init>

  Button_Init();
 80021e8:	f000 f8a6 	bl	8002338 <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80021ec:	f000 f812 	bl	8002214 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80021f0:	bf00      	nop
}
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20004a8c 	.word	0x20004a8c

080021f8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80021fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002200:	f7ff ffce 	bl	80021a0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8002204:	f011 f8b8 	bl	8013378 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8002208:	2004      	movs	r0, #4
 800220a:	f7ff ffb3 	bl	8002174 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 800220e:	bf00      	nop
}
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800221a:	f00b fe75 	bl	800df08 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 800221e:	2000      	movs	r0, #0
 8002220:	f00d f9a6 	bl	800f570 <osMutexNew>
 8002224:	4602      	mov	r2, r0
 8002226:	4b17      	ldr	r3, [pc, #92]	; (8002284 <appe_Tl_Init+0x70>)
 8002228:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 800222a:	2200      	movs	r2, #0
 800222c:	2100      	movs	r1, #0
 800222e:	2001      	movs	r0, #1
 8002230:	f00d fae6 	bl	800f800 <osSemaphoreNew>
 8002234:	4602      	mov	r2, r0
 8002236:	4b14      	ldr	r3, [pc, #80]	; (8002288 <appe_Tl_Init+0x74>)
 8002238:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 800223a:	4a14      	ldr	r2, [pc, #80]	; (800228c <appe_Tl_Init+0x78>)
 800223c:	2100      	movs	r1, #0
 800223e:	4814      	ldr	r0, [pc, #80]	; (8002290 <appe_Tl_Init+0x7c>)
 8002240:	f00c ffcc 	bl	800f1dc <osThreadNew>
 8002244:	4602      	mov	r2, r0
 8002246:	4b13      	ldr	r3, [pc, #76]	; (8002294 <appe_Tl_Init+0x80>)
 8002248:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800224a:	4b13      	ldr	r3, [pc, #76]	; (8002298 <appe_Tl_Init+0x84>)
 800224c:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800224e:	4b13      	ldr	r3, [pc, #76]	; (800229c <appe_Tl_Init+0x88>)
 8002250:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8002252:	463b      	mov	r3, r7
 8002254:	4619      	mov	r1, r3
 8002256:	4812      	ldr	r0, [pc, #72]	; (80022a0 <appe_Tl_Init+0x8c>)
 8002258:	f00b fd1c 	bl	800dc94 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800225c:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <appe_Tl_Init+0x90>)
 800225e:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8002260:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <appe_Tl_Init+0x94>)
 8002262:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8002264:	4b11      	ldr	r3, [pc, #68]	; (80022ac <appe_Tl_Init+0x98>)
 8002266:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8002268:	f240 533c 	movw	r3, #1340	; 0x53c
 800226c:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 800226e:	f107 0308 	add.w	r3, r7, #8
 8002272:	4618      	mov	r0, r3
 8002274:	f00b ff8a 	bl	800e18c <TL_MM_Init>

  TL_Enable();
 8002278:	f00b fe40 	bl	800defc <TL_Enable>

  return;
 800227c:	bf00      	nop
}
 800227e:	3720      	adds	r7, #32
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20004888 	.word	0x20004888
 8002288:	20004890 	.word	0x20004890
 800228c:	08016a84 	.word	0x08016a84
 8002290:	08002311 	.word	0x08002311
 8002294:	2000488c 	.word	0x2000488c
 8002298:	20030724 	.word	0x20030724
 800229c:	080022b1 	.word	0x080022b1
 80022a0:	080022f1 	.word	0x080022f1
 80022a4:	2003093c 	.word	0x2003093c
 80022a8:	20030830 	.word	0x20030830
 80022ac:	200301e8 	.word	0x200301e8

080022b0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	71fb      	strb	r3, [r7, #7]
  switch (status)
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d002      	beq.n	80022c6 <APPE_SysStatusNot+0x16>
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d008      	beq.n	80022d6 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 80022c4:	e00d      	b.n	80022e2 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 80022c6:	4b09      	ldr	r3, [pc, #36]	; (80022ec <APPE_SysStatusNot+0x3c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f04f 31ff 	mov.w	r1, #4294967295
 80022ce:	4618      	mov	r0, r3
 80022d0:	f00d f9e8 	bl	800f6a4 <osMutexAcquire>
      break;
 80022d4:	e005      	b.n	80022e2 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 80022d6:	4b05      	ldr	r3, [pc, #20]	; (80022ec <APPE_SysStatusNot+0x3c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f00d fa40 	bl	800f760 <osMutexRelease>
      break;
 80022e0:	bf00      	nop
  }
  return;
 80022e2:	bf00      	nop
}
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20004888 	.word	0x20004888

080022f0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 80022f8:	f7ff fe62 	bl	8001fc0 <APPD_EnableCPU2>

  APP_BLE_Init( );
 80022fc:	f7fe fdd0 	bl	8000ea0 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8002300:	2100      	movs	r1, #0
 8002302:	2001      	movs	r0, #1
 8002304:	f011 f84a 	bl	801339c <UTIL_LPM_SetOffMode>
  return;
 8002308:	bf00      	nop
}
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002318:	f04f 32ff 	mov.w	r2, #4294967295
 800231c:	2100      	movs	r1, #0
 800231e:	2001      	movs	r0, #1
 8002320:	f00d f864 	bl	800f3ec <osThreadFlagsWait>
     shci_user_evt_proc();
 8002324:	f00b fcd2 	bl	800dccc <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002328:	e7f6      	b.n	8002318 <ShciUserEvtProcess+0x8>

0800232a <Led_Init>:
    }
}

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0
  BSP_LED_Init(LED_RED);

  BSP_LED_On(LED_GREEN);
#endif

  return;
 800232e:	bf00      	nop
}
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <Button_Init>:

static void Button_Init( void )
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
#endif

  return;
 800233c:	bf00      	nop
}
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet( ShciUserEvtProcessId, 1 );
 8002350:	4b04      	ldr	r3, [pc, #16]	; (8002364 <shci_notify_asynch_evt+0x1c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2101      	movs	r1, #1
 8002356:	4618      	mov	r0, r3
 8002358:	f00c ffe6 	bl	800f328 <osThreadFlagsSet>
  return;
 800235c:	bf00      	nop
}
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	2000488c 	.word	0x2000488c

08002368 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 8002370:	4b04      	ldr	r3, [pc, #16]	; (8002384 <shci_cmd_resp_release+0x1c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f00d fb47 	bl	800fa08 <osSemaphoreRelease>
  return;
 800237a:	bf00      	nop
}
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20004890 	.word	0x20004890

08002388 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <shci_cmd_resp_wait+0x20>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f04f 31ff 	mov.w	r1, #4294967295
 8002398:	4618      	mov	r0, r3
 800239a:	f00d facf 	bl	800f93c <osSemaphoreAcquire>
  return;
 800239e:	bf00      	nop
}
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20004890 	.word	0x20004890

080023ac <Dotstar_Init>:
} DotStar_State;


DotStar_State dotstar_state;

void Dotstar_Init(DotStar_InitHandle* dotstar_init){
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

   dotstar_state.spiHandle = dotstar_init->spiHandle;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a23      	ldr	r2, [pc, #140]	; (8002448 <Dotstar_Init+0x9c>)
 80023ba:	6013      	str	r3, [r2, #0]
   dotstar_state.numLEDs = dotstar_init->numLEDs;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	889a      	ldrh	r2, [r3, #4]
 80023c0:	4b21      	ldr	r3, [pc, #132]	; (8002448 <Dotstar_Init+0x9c>)
 80023c2:	809a      	strh	r2, [r3, #4]
   dotstar_state.brightness = 0;
 80023c4:	4b20      	ldr	r3, [pc, #128]	; (8002448 <Dotstar_Init+0x9c>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	719a      	strb	r2, [r3, #6]
   dotstar_state.rOffset = dotstar_init->colorOrder & 3;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	799b      	ldrb	r3, [r3, #6]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	4b1c      	ldr	r3, [pc, #112]	; (8002448 <Dotstar_Init+0x9c>)
 80023d6:	731a      	strb	r2, [r3, #12]
   dotstar_state.gOffset = (dotstar_init->colorOrder >> 2) & 3;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	799b      	ldrb	r3, [r3, #6]
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	f003 0303 	and.w	r3, r3, #3
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	4b18      	ldr	r3, [pc, #96]	; (8002448 <Dotstar_Init+0x9c>)
 80023e8:	735a      	strb	r2, [r3, #13]
   dotstar_state.bOffset = (dotstar_init->colorOrder >> 4) & 3;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	799b      	ldrb	r3, [r3, #6]
 80023ee:	091b      	lsrs	r3, r3, #4
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	4b13      	ldr	r3, [pc, #76]	; (8002448 <Dotstar_Init+0x9c>)
 80023fa:	739a      	strb	r2, [r3, #14]

   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 80023fc:	4b12      	ldr	r3, [pc, #72]	; (8002448 <Dotstar_Init+0x9c>)
 80023fe:	7b1a      	ldrb	r2, [r3, #12]
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <Dotstar_Init+0x9c>)
 8002402:	7b5b      	ldrb	r3, [r3, #13]
 8002404:	429a      	cmp	r2, r3
 8002406:	d10c      	bne.n	8002422 <Dotstar_Init+0x76>
     dotstar_state.numLEDs + ((dotstar_state.numLEDs + 3) / 4) : // MONO: 10 bits/pixel, round up to next byte
 8002408:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <Dotstar_Init+0x9c>)
 800240a:	889a      	ldrh	r2, [r3, #4]
 800240c:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <Dotstar_Init+0x9c>)
 800240e:	889b      	ldrh	r3, [r3, #4]
 8002410:	3303      	adds	r3, #3
 8002412:	2b00      	cmp	r3, #0
 8002414:	da00      	bge.n	8002418 <Dotstar_Init+0x6c>
 8002416:	3303      	adds	r3, #3
 8002418:	109b      	asrs	r3, r3, #2
 800241a:	b29b      	uxth	r3, r3
   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 800241c:	4413      	add	r3, r2
 800241e:	b29b      	uxth	r3, r3
 8002420:	e005      	b.n	800242e <Dotstar_Init+0x82>
     dotstar_state.numLEDs * 3;              // COLOR: 3 bytes/pixel
 8002422:	4b09      	ldr	r3, [pc, #36]	; (8002448 <Dotstar_Init+0x9c>)
 8002424:	889b      	ldrh	r3, [r3, #4]
   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8002426:	461a      	mov	r2, r3
 8002428:	0052      	lsls	r2, r2, #1
 800242a:	4413      	add	r3, r2
 800242c:	b29b      	uxth	r3, r3
 800242e:	81fb      	strh	r3, [r7, #14]

   dotstar_state.pixels = (uint8_t *)malloc(bytes);
 8002430:	89fb      	ldrh	r3, [r7, #14]
 8002432:	4618      	mov	r0, r3
 8002434:	f011 f80a 	bl	801344c <malloc>
 8002438:	4603      	mov	r3, r0
 800243a:	461a      	mov	r2, r3
 800243c:	4b02      	ldr	r3, [pc, #8]	; (8002448 <Dotstar_Init+0x9c>)
 800243e:	609a      	str	r2, [r3, #8]
}
 8002440:	bf00      	nop
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20004894 	.word	0x20004894

0800244c <ds_show>:
*/

/*!
  @brief   Transmit pixel data in RAM to DotStars.
*/
void ds_show(void) {
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0

  if(!dotstar_state.pixels) return;
 8002452:	4b4b      	ldr	r3, [pc, #300]	; (8002580 <ds_show+0x134>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 808e 	beq.w	8002578 <ds_show+0x12c>

  uint8_t *ptr = dotstar_state.pixels, i;            // -> LED data
 800245c:	4b48      	ldr	r3, [pc, #288]	; (8002580 <ds_show+0x134>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	60fb      	str	r3, [r7, #12]
  uint16_t n   = dotstar_state.numLEDs;              // Counter
 8002462:	4b47      	ldr	r3, [pc, #284]	; (8002580 <ds_show+0x134>)
 8002464:	889b      	ldrh	r3, [r3, #4]
 8002466:	813b      	strh	r3, [r7, #8]
  uint16_t b16 = (uint16_t)dotstar_state.brightness; // Type-convert for fixed-point math
 8002468:	4b45      	ldr	r3, [pc, #276]	; (8002580 <ds_show+0x134>)
 800246a:	799b      	ldrb	r3, [r3, #6]
 800246c:	80fb      	strh	r3, [r7, #6]
  uint8_t sendval;

    sendval = 0x00;
 800246e:	2300      	movs	r3, #0
 8002470:	717b      	strb	r3, [r7, #5]
    for(i=0; i<4; i++) spi_out(&sendval);    // 4 byte start-frame marker
 8002472:	2300      	movs	r3, #0
 8002474:	72fb      	strb	r3, [r7, #11]
 8002476:	e00a      	b.n	800248e <ds_show+0x42>
 8002478:	4b41      	ldr	r3, [pc, #260]	; (8002580 <ds_show+0x134>)
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	1d79      	adds	r1, r7, #5
 800247e:	f04f 33ff 	mov.w	r3, #4294967295
 8002482:	2201      	movs	r2, #1
 8002484:	f007 fc79 	bl	8009d7a <HAL_SPI_Transmit>
 8002488:	7afb      	ldrb	r3, [r7, #11]
 800248a:	3301      	adds	r3, #1
 800248c:	72fb      	strb	r3, [r7, #11]
 800248e:	7afb      	ldrb	r3, [r7, #11]
 8002490:	2b03      	cmp	r3, #3
 8002492:	d9f1      	bls.n	8002478 <ds_show+0x2c>

    if(dotstar_state.brightness) {                     // Scale pixel brightness on output
 8002494:	4b3a      	ldr	r3, [pc, #232]	; (8002580 <ds_show+0x134>)
 8002496:	799b      	ldrb	r3, [r3, #6]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d02c      	beq.n	80024f6 <ds_show+0xaa>
      do {                               // For each pixel...
    	sendval = 0xFF;
 800249c:	23ff      	movs	r3, #255	; 0xff
 800249e:	717b      	strb	r3, [r7, #5]
        spi_out(&sendval);                   //  Pixel start
 80024a0:	4b37      	ldr	r3, [pc, #220]	; (8002580 <ds_show+0x134>)
 80024a2:	6818      	ldr	r0, [r3, #0]
 80024a4:	1d79      	adds	r1, r7, #5
 80024a6:	f04f 33ff 	mov.w	r3, #4294967295
 80024aa:	2201      	movs	r2, #1
 80024ac:	f007 fc65 	bl	8009d7a <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 80024b0:	2300      	movs	r3, #0
 80024b2:	72fb      	strb	r3, [r7, #11]
 80024b4:	e015      	b.n	80024e2 <ds_show+0x96>
        	sendval = (*ptr++ * b16) >> 8;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	60fa      	str	r2, [r7, #12]
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	88fb      	ldrh	r3, [r7, #6]
 80024c2:	fb03 f302 	mul.w	r3, r3, r2
 80024c6:	121b      	asrs	r3, r3, #8
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	717b      	strb	r3, [r7, #5]
        	spi_out(&sendval); // Scale, write RGB
 80024cc:	4b2c      	ldr	r3, [pc, #176]	; (8002580 <ds_show+0x134>)
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	1d79      	adds	r1, r7, #5
 80024d2:	f04f 33ff 	mov.w	r3, #4294967295
 80024d6:	2201      	movs	r2, #1
 80024d8:	f007 fc4f 	bl	8009d7a <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 80024dc:	7afb      	ldrb	r3, [r7, #11]
 80024de:	3301      	adds	r3, #1
 80024e0:	72fb      	strb	r3, [r7, #11]
 80024e2:	7afb      	ldrb	r3, [r7, #11]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d9e6      	bls.n	80024b6 <ds_show+0x6a>
        }
      } while(--n);
 80024e8:	893b      	ldrh	r3, [r7, #8]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	813b      	strh	r3, [r7, #8]
 80024ee:	893b      	ldrh	r3, [r7, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1d3      	bne.n	800249c <ds_show+0x50>
 80024f4:	e025      	b.n	8002542 <ds_show+0xf6>
    } else {                             // Full brightness (no scaling)
      do {                               // For each pixel...
    	sendval = 0xFF;
 80024f6:	23ff      	movs	r3, #255	; 0xff
 80024f8:	717b      	strb	r3, [r7, #5]
        spi_out(&sendval);                   //  Pixel start
 80024fa:	4b21      	ldr	r3, [pc, #132]	; (8002580 <ds_show+0x134>)
 80024fc:	6818      	ldr	r0, [r3, #0]
 80024fe:	1d79      	adds	r1, r7, #5
 8002500:	f04f 33ff 	mov.w	r3, #4294967295
 8002504:	2201      	movs	r2, #1
 8002506:	f007 fc38 	bl	8009d7a <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 800250a:	2300      	movs	r3, #0
 800250c:	72fb      	strb	r3, [r7, #11]
 800250e:	e00f      	b.n	8002530 <ds_show+0xe4>
        	sendval = *ptr++;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	60fa      	str	r2, [r7, #12]
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	717b      	strb	r3, [r7, #5]
        	spi_out(&sendval); // Write R,G,B
 800251a:	4b19      	ldr	r3, [pc, #100]	; (8002580 <ds_show+0x134>)
 800251c:	6818      	ldr	r0, [r3, #0]
 800251e:	1d79      	adds	r1, r7, #5
 8002520:	f04f 33ff 	mov.w	r3, #4294967295
 8002524:	2201      	movs	r2, #1
 8002526:	f007 fc28 	bl	8009d7a <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 800252a:	7afb      	ldrb	r3, [r7, #11]
 800252c:	3301      	adds	r3, #1
 800252e:	72fb      	strb	r3, [r7, #11]
 8002530:	7afb      	ldrb	r3, [r7, #11]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d9ec      	bls.n	8002510 <ds_show+0xc4>
        }
      } while(--n);
 8002536:	893b      	ldrh	r3, [r7, #8]
 8002538:	3b01      	subs	r3, #1
 800253a:	813b      	strh	r3, [r7, #8]
 800253c:	893b      	ldrh	r3, [r7, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1d9      	bne.n	80024f6 <ds_show+0xaa>
    // revisions are more strict (e.g. might mandate use of end-frame
    // before start-frame marker). i.e. let's not remove this. But after
    // testing a bit more the suggestion is to use at least (numLeds+1)/2
    // high values (1) or (numLeds+15)/16 full bytes as EndFrame. For details see also:
    // https://cpldcpu.wordpress.com/2014/11/30/understanding-the-apa102-superled/
    sendval = 0xFF;
 8002542:	23ff      	movs	r3, #255	; 0xff
 8002544:	717b      	strb	r3, [r7, #5]
    for(i=0; i<((dotstar_state.numLEDs + 15) / 16); i++) spi_out(&sendval);
 8002546:	2300      	movs	r3, #0
 8002548:	72fb      	strb	r3, [r7, #11]
 800254a:	e00a      	b.n	8002562 <ds_show+0x116>
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <ds_show+0x134>)
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	1d79      	adds	r1, r7, #5
 8002552:	f04f 33ff 	mov.w	r3, #4294967295
 8002556:	2201      	movs	r2, #1
 8002558:	f007 fc0f 	bl	8009d7a <HAL_SPI_Transmit>
 800255c:	7afb      	ldrb	r3, [r7, #11]
 800255e:	3301      	adds	r3, #1
 8002560:	72fb      	strb	r3, [r7, #11]
 8002562:	7afa      	ldrb	r2, [r7, #11]
 8002564:	4b06      	ldr	r3, [pc, #24]	; (8002580 <ds_show+0x134>)
 8002566:	889b      	ldrh	r3, [r3, #4]
 8002568:	330f      	adds	r3, #15
 800256a:	2b00      	cmp	r3, #0
 800256c:	da00      	bge.n	8002570 <ds_show+0x124>
 800256e:	330f      	adds	r3, #15
 8002570:	111b      	asrs	r3, r3, #4
 8002572:	429a      	cmp	r2, r3
 8002574:	dbea      	blt.n	800254c <ds_show+0x100>
 8002576:	e000      	b.n	800257a <ds_show+0x12e>
  if(!dotstar_state.pixels) return;
 8002578:	bf00      	nop

}
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20004894 	.word	0x20004894

08002584 <ds_clear>:

/*!
  @brief   Fill the whole DotStar strip with 0 / black / off.
*/
void ds_clear() {
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  memset(dotstar_state.pixels, 0, (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8002588:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <ds_clear+0x44>)
 800258a:	6898      	ldr	r0, [r3, #8]
 800258c:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <ds_clear+0x44>)
 800258e:	7b1a      	ldrb	r2, [r3, #12]
 8002590:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <ds_clear+0x44>)
 8002592:	7b5b      	ldrb	r3, [r3, #13]
 8002594:	429a      	cmp	r2, r3
 8002596:	d10b      	bne.n	80025b0 <ds_clear+0x2c>
    dotstar_state.numLEDs + ((dotstar_state.numLEDs + 3) / 4) : // MONO: 10 bits/pixel
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <ds_clear+0x44>)
 800259a:	889b      	ldrh	r3, [r3, #4]
 800259c:	461a      	mov	r2, r3
 800259e:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <ds_clear+0x44>)
 80025a0:	889b      	ldrh	r3, [r3, #4]
 80025a2:	3303      	adds	r3, #3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	da00      	bge.n	80025aa <ds_clear+0x26>
 80025a8:	3303      	adds	r3, #3
 80025aa:	109b      	asrs	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	e005      	b.n	80025bc <ds_clear+0x38>
    dotstar_state.numLEDs * 3);                   // COLOR: 3 bytes/pixel
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <ds_clear+0x44>)
 80025b2:	889b      	ldrh	r3, [r3, #4]
 80025b4:	461a      	mov	r2, r3
 80025b6:	4613      	mov	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	4413      	add	r3, r2
  memset(dotstar_state.pixels, 0, (dotstar_state.rOffset == dotstar_state.gOffset) ?
 80025bc:	461a      	mov	r2, r3
 80025be:	2100      	movs	r1, #0
 80025c0:	f010 ff57 	bl	8013472 <memset>
}
 80025c4:	bf00      	nop
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20004894 	.word	0x20004894

080025cc <ds_setPixelColor32B>:
  @param   n  Pixel index, starting from 0.
  @param   c  32-bit color value. Most significant byte is 0, second is
              red, then green, and least significant byte is blue.
              e.g. 0x00RRGGBB
*/
void ds_setPixelColor32B(uint16_t n, uint32_t c) {
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	6039      	str	r1, [r7, #0]
 80025d6:	80fb      	strh	r3, [r7, #6]
  if(n < dotstar_state.numLEDs) {
 80025d8:	4b16      	ldr	r3, [pc, #88]	; (8002634 <ds_setPixelColor32B+0x68>)
 80025da:	889b      	ldrh	r3, [r3, #4]
 80025dc:	88fa      	ldrh	r2, [r7, #6]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d221      	bcs.n	8002626 <ds_setPixelColor32B+0x5a>
    uint8_t *p = &dotstar_state.pixels[n * 3];
 80025e2:	4b14      	ldr	r3, [pc, #80]	; (8002634 <ds_setPixelColor32B+0x68>)
 80025e4:	6899      	ldr	r1, [r3, #8]
 80025e6:	88fa      	ldrh	r2, [r7, #6]
 80025e8:	4613      	mov	r3, r2
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4413      	add	r3, r2
 80025ee:	440b      	add	r3, r1
 80025f0:	60fb      	str	r3, [r7, #12]
    p[dotstar_state.rOffset] = (uint8_t)(c >> 16);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	0c1a      	lsrs	r2, r3, #16
 80025f6:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <ds_setPixelColor32B+0x68>)
 80025f8:	7b1b      	ldrb	r3, [r3, #12]
 80025fa:	4619      	mov	r1, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	440b      	add	r3, r1
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	701a      	strb	r2, [r3, #0]
    p[dotstar_state.gOffset] = (uint8_t)(c >>  8);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	0a1a      	lsrs	r2, r3, #8
 8002608:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <ds_setPixelColor32B+0x68>)
 800260a:	7b5b      	ldrb	r3, [r3, #13]
 800260c:	4619      	mov	r1, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	440b      	add	r3, r1
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	701a      	strb	r2, [r3, #0]
    p[dotstar_state.bOffset] = (uint8_t)c;
 8002616:	4b07      	ldr	r3, [pc, #28]	; (8002634 <ds_setPixelColor32B+0x68>)
 8002618:	7b9b      	ldrb	r3, [r3, #14]
 800261a:	461a      	mov	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4413      	add	r3, r2
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]
  }
}
 8002626:	bf00      	nop
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	20004894 	.word	0x20004894

08002638 <ds_fill>:
  @param   first  Index of first pixel to fill, starting from 0. Must be
                  in-bounds, no clipping is performed. 0 if unspecified.
  @param   count  Number of pixels to fill, as a positive value. Passing
                  0 or leaving unspecified will fill to end of strip.
*/
void ds_fill(uint32_t c, uint16_t first, uint16_t count) {
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	807b      	strh	r3, [r7, #2]
 8002644:	4613      	mov	r3, r2
 8002646:	803b      	strh	r3, [r7, #0]
  uint16_t i, end;

  if(first >= dotstar_state.numLEDs) {
 8002648:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <ds_fill+0x68>)
 800264a:	889b      	ldrh	r3, [r3, #4]
 800264c:	887a      	ldrh	r2, [r7, #2]
 800264e:	429a      	cmp	r2, r3
 8002650:	d222      	bcs.n	8002698 <ds_fill+0x60>
    return; // If first LED is past end of strip, nothing to do
  }

  // Calculate the index ONE AFTER the last pixel to fill
  if(count == 0) {
 8002652:	883b      	ldrh	r3, [r7, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d103      	bne.n	8002660 <ds_fill+0x28>
    // Fill to end of strip
    end = dotstar_state.numLEDs;
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <ds_fill+0x68>)
 800265a:	889b      	ldrh	r3, [r3, #4]
 800265c:	81bb      	strh	r3, [r7, #12]
 800265e:	e00b      	b.n	8002678 <ds_fill+0x40>
  } else {
    // Ensure that the loop won't go past the last pixel
    end = first + count;
 8002660:	887a      	ldrh	r2, [r7, #2]
 8002662:	883b      	ldrh	r3, [r7, #0]
 8002664:	4413      	add	r3, r2
 8002666:	81bb      	strh	r3, [r7, #12]
    if(end > dotstar_state.numLEDs) end = dotstar_state.numLEDs;
 8002668:	4b0d      	ldr	r3, [pc, #52]	; (80026a0 <ds_fill+0x68>)
 800266a:	889b      	ldrh	r3, [r3, #4]
 800266c:	89ba      	ldrh	r2, [r7, #12]
 800266e:	429a      	cmp	r2, r3
 8002670:	d902      	bls.n	8002678 <ds_fill+0x40>
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <ds_fill+0x68>)
 8002674:	889b      	ldrh	r3, [r3, #4]
 8002676:	81bb      	strh	r3, [r7, #12]
  }

  for(i = first; i < end; i++) {
 8002678:	887b      	ldrh	r3, [r7, #2]
 800267a:	81fb      	strh	r3, [r7, #14]
 800267c:	e007      	b.n	800268e <ds_fill+0x56>
    ds_setPixelColor32B(i, c);
 800267e:	89fb      	ldrh	r3, [r7, #14]
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff ffa2 	bl	80025cc <ds_setPixelColor32B>
  for(i = first; i < end; i++) {
 8002688:	89fb      	ldrh	r3, [r7, #14]
 800268a:	3301      	adds	r3, #1
 800268c:	81fb      	strh	r3, [r7, #14]
 800268e:	89fa      	ldrh	r2, [r7, #14]
 8002690:	89bb      	ldrh	r3, [r7, #12]
 8002692:	429a      	cmp	r2, r3
 8002694:	d3f3      	bcc.n	800267e <ds_fill+0x46>
 8002696:	e000      	b.n	800269a <ds_fill+0x62>
    return; // If first LED is past end of strip, nothing to do
 8002698:	bf00      	nop
  }
}
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20004894 	.word	0x20004894

080026a4 <ds_setBrightness>:
           is 'non destructive' -- it's applied as color data is being
           issued to the strip, not during setPixelColor(), and also
           means that getPixelColor() returns the exact value originally
           stored.
*/
void ds_setBrightness(uint8_t b) {
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	71fb      	strb	r3, [r7, #7]
  // optimizes the actual scaling math later, allowing a fast 8x8-bit
  // multiply and taking the MSB. 'brightness' is a uint8_t, adding 1
  // here may (intentionally) roll over...so 0 = max brightness (color
  // values are interpreted literally; no scaling), 1 = min brightness
  // (off), 255 = just below max brightness.
  dotstar_state.brightness = b + 1;
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	3301      	adds	r3, #1
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	4b03      	ldr	r3, [pc, #12]	; (80026c4 <ds_setBrightness+0x20>)
 80026b6:	719a      	strb	r2, [r3, #6]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	20004894 	.word	0x20004894

080026c8 <I2C_Write_Byte>:
//#include "stm32wbxx_hal_i2c.h"
//#include "stm32wbxx_hal.h"


void I2C_Write_Byte(uint8_t value, uint8_t Cmd)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af02      	add	r7, sp, #8
 80026ce:	4603      	mov	r3, r0
 80026d0:	460a      	mov	r2, r1
 80026d2:	71fb      	strb	r3, [r7, #7]
 80026d4:	4613      	mov	r3, r2
 80026d6:	71bb      	strb	r3, [r7, #6]
  uint16_t Addr = 0x3C << 1;
 80026d8:	2378      	movs	r3, #120	; 0x78
 80026da:	81fb      	strh	r3, [r7, #14]
  uint8_t Data[2];
  Data[0] = Cmd;
 80026dc:	79bb      	ldrb	r3, [r7, #6]
 80026de:	733b      	strb	r3, [r7, #12]
  Data[1] = value;
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	737b      	strb	r3, [r7, #13]

  HAL_I2C_Master_Transmit(&ER_OLED_I2C_PORT, Addr, Data, 2, HAL_MAX_DELAY);
 80026e4:	f107 020c 	add.w	r2, r7, #12
 80026e8:	89f9      	ldrh	r1, [r7, #14]
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	2302      	movs	r3, #2
 80026f2:	4803      	ldr	r0, [pc, #12]	; (8002700 <I2C_Write_Byte+0x38>)
 80026f4:	f004 fb2a 	bl	8006d4c <HAL_I2C_Master_Transmit>
}
 80026f8:	bf00      	nop
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	200048b8 	.word	0x200048b8

08002704 <er_oled_begin>:

void er_oled_begin()
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
    command(0xae);//--turn off oled panel
 8002708:	2100      	movs	r1, #0
 800270a:	20ae      	movs	r0, #174	; 0xae
 800270c:	f7ff ffdc 	bl	80026c8 <I2C_Write_Byte>

    command(0xd5);//--set display clock divide ratio/oscillator frequency
 8002710:	2100      	movs	r1, #0
 8002712:	20d5      	movs	r0, #213	; 0xd5
 8002714:	f7ff ffd8 	bl	80026c8 <I2C_Write_Byte>
    command(0x80);//--set divide ratio
 8002718:	2100      	movs	r1, #0
 800271a:	2080      	movs	r0, #128	; 0x80
 800271c:	f7ff ffd4 	bl	80026c8 <I2C_Write_Byte>

    command(0xa8);//--set multiplex ratio
 8002720:	2100      	movs	r1, #0
 8002722:	20a8      	movs	r0, #168	; 0xa8
 8002724:	f7ff ffd0 	bl	80026c8 <I2C_Write_Byte>
    command(0x27);//--1/40 duty
 8002728:	2100      	movs	r1, #0
 800272a:	2027      	movs	r0, #39	; 0x27
 800272c:	f7ff ffcc 	bl	80026c8 <I2C_Write_Byte>

    command(0xd3);//-set display offset
 8002730:	2100      	movs	r1, #0
 8002732:	20d3      	movs	r0, #211	; 0xd3
 8002734:	f7ff ffc8 	bl	80026c8 <I2C_Write_Byte>
    command(0x00);//-not offset
 8002738:	2100      	movs	r1, #0
 800273a:	2000      	movs	r0, #0
 800273c:	f7ff ffc4 	bl	80026c8 <I2C_Write_Byte>

    command(0xad);//--Internal IREF Setting
 8002740:	2100      	movs	r1, #0
 8002742:	20ad      	movs	r0, #173	; 0xad
 8002744:	f7ff ffc0 	bl	80026c8 <I2C_Write_Byte>
    command(0x30);//--
 8002748:	2100      	movs	r1, #0
 800274a:	2030      	movs	r0, #48	; 0x30
 800274c:	f7ff ffbc 	bl	80026c8 <I2C_Write_Byte>

    command(0x8d);//--set Charge Pump enable/disable
 8002750:	2100      	movs	r1, #0
 8002752:	208d      	movs	r0, #141	; 0x8d
 8002754:	f7ff ffb8 	bl	80026c8 <I2C_Write_Byte>
    command(0x14);//--set(0x10) disable
 8002758:	2100      	movs	r1, #0
 800275a:	2014      	movs	r0, #20
 800275c:	f7ff ffb4 	bl	80026c8 <I2C_Write_Byte>

    command(0x40);//--set start line address
 8002760:	2100      	movs	r1, #0
 8002762:	2040      	movs	r0, #64	; 0x40
 8002764:	f7ff ffb0 	bl	80026c8 <I2C_Write_Byte>

    command(0xa6);//--set normal display
 8002768:	2100      	movs	r1, #0
 800276a:	20a6      	movs	r0, #166	; 0xa6
 800276c:	f7ff ffac 	bl	80026c8 <I2C_Write_Byte>

    command(0xa4);//Disable Entire Display On
 8002770:	2100      	movs	r1, #0
 8002772:	20a4      	movs	r0, #164	; 0xa4
 8002774:	f7ff ffa8 	bl	80026c8 <I2C_Write_Byte>

    command(0xa1);//--set segment re-map 128 to 0
 8002778:	2100      	movs	r1, #0
 800277a:	20a1      	movs	r0, #161	; 0xa1
 800277c:	f7ff ffa4 	bl	80026c8 <I2C_Write_Byte>

    command(0xC8);//--Set COM Output Scan Direction 64 to 0
 8002780:	2100      	movs	r1, #0
 8002782:	20c8      	movs	r0, #200	; 0xc8
 8002784:	f7ff ffa0 	bl	80026c8 <I2C_Write_Byte>

    command(0xda);//--set com pins hardware configuration
 8002788:	2100      	movs	r1, #0
 800278a:	20da      	movs	r0, #218	; 0xda
 800278c:	f7ff ff9c 	bl	80026c8 <I2C_Write_Byte>
    command(0x12);
 8002790:	2100      	movs	r1, #0
 8002792:	2012      	movs	r0, #18
 8002794:	f7ff ff98 	bl	80026c8 <I2C_Write_Byte>

    command(0x81);//--set contrast control register
 8002798:	2100      	movs	r1, #0
 800279a:	2081      	movs	r0, #129	; 0x81
 800279c:	f7ff ff94 	bl	80026c8 <I2C_Write_Byte>
    command(0xaf);
 80027a0:	2100      	movs	r1, #0
 80027a2:	20af      	movs	r0, #175	; 0xaf
 80027a4:	f7ff ff90 	bl	80026c8 <I2C_Write_Byte>

    command(0xd9);//--set pre-charge period
 80027a8:	2100      	movs	r1, #0
 80027aa:	20d9      	movs	r0, #217	; 0xd9
 80027ac:	f7ff ff8c 	bl	80026c8 <I2C_Write_Byte>
    command(0x22);
 80027b0:	2100      	movs	r1, #0
 80027b2:	2022      	movs	r0, #34	; 0x22
 80027b4:	f7ff ff88 	bl	80026c8 <I2C_Write_Byte>

    command(0xdb);//--set vcomh
 80027b8:	2100      	movs	r1, #0
 80027ba:	20db      	movs	r0, #219	; 0xdb
 80027bc:	f7ff ff84 	bl	80026c8 <I2C_Write_Byte>
    command(0x20);
 80027c0:	2100      	movs	r1, #0
 80027c2:	2020      	movs	r0, #32
 80027c4:	f7ff ff80 	bl	80026c8 <I2C_Write_Byte>

    command(0xaf);//--turn on oled panel
 80027c8:	2100      	movs	r1, #0
 80027ca:	20af      	movs	r0, #175	; 0xaf
 80027cc:	f7ff ff7c 	bl	80026c8 <I2C_Write_Byte>

}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <er_oled_clear>:

void er_oled_clear(uint8_t* buffer)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
	int i;
	for(i = 0;i < WIDTH * HEIGHT / 8;i++)
 80027dc:	2300      	movs	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	e007      	b.n	80027f2 <er_oled_clear+0x1e>
	{
		buffer[i] = 0;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	4413      	add	r3, r2
 80027e8:	2200      	movs	r2, #0
 80027ea:	701a      	strb	r2, [r3, #0]
	for(i = 0;i < WIDTH * HEIGHT / 8;i++)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	3301      	adds	r3, #1
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80027f8:	dbf3      	blt.n	80027e2 <er_oled_clear+0xe>
	}
}
 80027fa:	bf00      	nop
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <er_oled_pixel>:

void er_oled_pixel(int x, int y, char color, uint8_t* buffer)
{
 8002806:	b480      	push	{r7}
 8002808:	b085      	sub	sp, #20
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	603b      	str	r3, [r7, #0]
 8002812:	4613      	mov	r3, r2
 8002814:	71fb      	strb	r3, [r7, #7]
    if(x > WIDTH || y > HEIGHT)return ;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2b48      	cmp	r3, #72	; 0x48
 800281a:	dc61      	bgt.n	80028e0 <er_oled_pixel+0xda>
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2b28      	cmp	r3, #40	; 0x28
 8002820:	dc5e      	bgt.n	80028e0 <er_oled_pixel+0xda>
    if(color)
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d02c      	beq.n	8002882 <er_oled_pixel+0x7c>
        buffer[x+(y/8)*WIDTH] |= 1<<(y%8);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	da00      	bge.n	8002830 <er_oled_pixel+0x2a>
 800282e:	3307      	adds	r3, #7
 8002830:	10db      	asrs	r3, r3, #3
 8002832:	461a      	mov	r2, r3
 8002834:	4613      	mov	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4413      	add	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4619      	mov	r1, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	440b      	add	r3, r1
 8002842:	4619      	mov	r1, r3
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	440b      	add	r3, r1
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	b259      	sxtb	r1, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	4258      	negs	r0, r3
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	f000 0007 	and.w	r0, r0, #7
 8002858:	bf58      	it	pl
 800285a:	4243      	negpl	r3, r0
 800285c:	2001      	movs	r0, #1
 800285e:	fa00 f303 	lsl.w	r3, r0, r3
 8002862:	b25b      	sxtb	r3, r3
 8002864:	430b      	orrs	r3, r1
 8002866:	b259      	sxtb	r1, r3
 8002868:	4613      	mov	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4413      	add	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	461a      	mov	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4413      	add	r3, r2
 8002876:	461a      	mov	r2, r3
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	4413      	add	r3, r2
 800287c:	b2ca      	uxtb	r2, r1
 800287e:	701a      	strb	r2, [r3, #0]
 8002880:	e02f      	b.n	80028e2 <er_oled_pixel+0xdc>
    else
        buffer[x+(y/8)*WIDTH] &= ~(1<<(y%8));
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	da00      	bge.n	800288a <er_oled_pixel+0x84>
 8002888:	3307      	adds	r3, #7
 800288a:	10db      	asrs	r3, r3, #3
 800288c:	461a      	mov	r2, r3
 800288e:	4613      	mov	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	4413      	add	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	4619      	mov	r1, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	440b      	add	r3, r1
 800289c:	4619      	mov	r1, r3
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	440b      	add	r3, r1
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	b259      	sxtb	r1, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	4258      	negs	r0, r3
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	f000 0007 	and.w	r0, r0, #7
 80028b2:	bf58      	it	pl
 80028b4:	4243      	negpl	r3, r0
 80028b6:	2001      	movs	r0, #1
 80028b8:	fa00 f303 	lsl.w	r3, r0, r3
 80028bc:	b25b      	sxtb	r3, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	b25b      	sxtb	r3, r3
 80028c2:	400b      	ands	r3, r1
 80028c4:	b259      	sxtb	r1, r3
 80028c6:	4613      	mov	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	4413      	add	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	461a      	mov	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4413      	add	r3, r2
 80028d4:	461a      	mov	r2, r3
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	4413      	add	r3, r2
 80028da:	b2ca      	uxtb	r2, r1
 80028dc:	701a      	strb	r2, [r3, #0]
 80028de:	e000      	b.n	80028e2 <er_oled_pixel+0xdc>
    if(x > WIDTH || y > HEIGHT)return ;
 80028e0:	bf00      	nop
}
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <er_oled_char>:
		}
	}
}

void er_oled_char(unsigned char x, unsigned char y, char acsii, char size, char mode, uint8_t* buffer)
{
 80028ec:	b590      	push	{r4, r7, lr}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4604      	mov	r4, r0
 80028f4:	4608      	mov	r0, r1
 80028f6:	4611      	mov	r1, r2
 80028f8:	461a      	mov	r2, r3
 80028fa:	4623      	mov	r3, r4
 80028fc:	71fb      	strb	r3, [r7, #7]
 80028fe:	4603      	mov	r3, r0
 8002900:	71bb      	strb	r3, [r7, #6]
 8002902:	460b      	mov	r3, r1
 8002904:	717b      	strb	r3, [r7, #5]
 8002906:	4613      	mov	r3, r2
 8002908:	713b      	strb	r3, [r7, #4]
    unsigned char i, j, y0=y;
 800290a:	79bb      	ldrb	r3, [r7, #6]
 800290c:	743b      	strb	r3, [r7, #16]
    uint16_t temp;
    uint16_t position = 0x80;
 800290e:	2380      	movs	r3, #128	; 0x80
 8002910:	827b      	strh	r3, [r7, #18]
    uint8_t maxindex = 8;
 8002912:	2308      	movs	r3, #8
 8002914:	747b      	strb	r3, [r7, #17]
    unsigned char ch = acsii - ' ';
 8002916:	797b      	ldrb	r3, [r7, #5]
 8002918:	3b20      	subs	r3, #32
 800291a:	73fb      	strb	r3, [r7, #15]

    if (size == 32){
 800291c:	793b      	ldrb	r3, [r7, #4]
 800291e:	2b20      	cmp	r3, #32
 8002920:	d104      	bne.n	800292c <er_oled_char+0x40>
    	position = 0x8000;
 8002922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002926:	827b      	strh	r3, [r7, #18]
    	maxindex =16;
 8002928:	2310      	movs	r3, #16
 800292a:	747b      	strb	r3, [r7, #17]
    }

    for(i = 0;i<size;i++) {
 800292c:	2300      	movs	r3, #0
 800292e:	75fb      	strb	r3, [r7, #23]
 8002930:	e0b1      	b.n	8002a96 <er_oled_char+0x1aa>
        if(size == 12)
 8002932:	793b      	ldrb	r3, [r7, #4]
 8002934:	2b0c      	cmp	r3, #12
 8002936:	d11d      	bne.n	8002974 <er_oled_char+0x88>
        {
            if(mode)temp = Font1206[ch][i];
 8002938:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00b      	beq.n	8002958 <er_oled_char+0x6c>
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	7df9      	ldrb	r1, [r7, #23]
 8002944:	4858      	ldr	r0, [pc, #352]	; (8002aa8 <er_oled_char+0x1bc>)
 8002946:	4613      	mov	r3, r2
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	4413      	add	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4403      	add	r3, r0
 8002950:	440b      	add	r3, r1
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	82bb      	strh	r3, [r7, #20]
 8002956:	e06c      	b.n	8002a32 <er_oled_char+0x146>
            else temp = ~Font1206[ch][i];
 8002958:	7bfa      	ldrb	r2, [r7, #15]
 800295a:	7df9      	ldrb	r1, [r7, #23]
 800295c:	4852      	ldr	r0, [pc, #328]	; (8002aa8 <er_oled_char+0x1bc>)
 800295e:	4613      	mov	r3, r2
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4403      	add	r3, r0
 8002968:	440b      	add	r3, r1
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	b29b      	uxth	r3, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	82bb      	strh	r3, [r7, #20]
 8002972:	e05e      	b.n	8002a32 <er_oled_char+0x146>
        }
        else if(size == 16)
 8002974:	793b      	ldrb	r3, [r7, #4]
 8002976:	2b10      	cmp	r3, #16
 8002978:	d117      	bne.n	80029aa <er_oled_char+0xbe>
        {
            if(mode)temp = Font1608[ch][i];
 800297a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800297e:	2b00      	cmp	r3, #0
 8002980:	d008      	beq.n	8002994 <er_oled_char+0xa8>
 8002982:	7bfa      	ldrb	r2, [r7, #15]
 8002984:	7dfb      	ldrb	r3, [r7, #23]
 8002986:	4949      	ldr	r1, [pc, #292]	; (8002aac <er_oled_char+0x1c0>)
 8002988:	0112      	lsls	r2, r2, #4
 800298a:	440a      	add	r2, r1
 800298c:	4413      	add	r3, r2
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	82bb      	strh	r3, [r7, #20]
 8002992:	e04e      	b.n	8002a32 <er_oled_char+0x146>
            else temp = ~Font1608[ch][i];
 8002994:	7bfa      	ldrb	r2, [r7, #15]
 8002996:	7dfb      	ldrb	r3, [r7, #23]
 8002998:	4944      	ldr	r1, [pc, #272]	; (8002aac <er_oled_char+0x1c0>)
 800299a:	0112      	lsls	r2, r2, #4
 800299c:	440a      	add	r2, r1
 800299e:	4413      	add	r3, r2
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	82bb      	strh	r3, [r7, #20]
 80029a8:	e043      	b.n	8002a32 <er_oled_char+0x146>
        }
        else {
            if(mode) {
 80029aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d01c      	beq.n	80029ec <er_oled_char+0x100>
            	temp = Font3216[ch - 16][2*i] << 8;
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
 80029b4:	f1a3 0210 	sub.w	r2, r3, #16
 80029b8:	7dfb      	ldrb	r3, [r7, #23]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	493c      	ldr	r1, [pc, #240]	; (8002ab0 <er_oled_char+0x1c4>)
 80029be:	0192      	lsls	r2, r2, #6
 80029c0:	440a      	add	r2, r1
 80029c2:	4413      	add	r3, r2
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	021b      	lsls	r3, r3, #8
 80029ca:	82bb      	strh	r3, [r7, #20]
                temp |= Font3216[ch-16][2*i + 1];
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	f1a3 0210 	sub.w	r2, r3, #16
 80029d2:	7dfb      	ldrb	r3, [r7, #23]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	3301      	adds	r3, #1
 80029d8:	4935      	ldr	r1, [pc, #212]	; (8002ab0 <er_oled_char+0x1c4>)
 80029da:	0192      	lsls	r2, r2, #6
 80029dc:	440a      	add	r2, r1
 80029de:	4413      	add	r3, r2
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	8abb      	ldrh	r3, [r7, #20]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	82bb      	strh	r3, [r7, #20]
 80029ea:	e022      	b.n	8002a32 <er_oled_char+0x146>
            }
            else {
            	temp = ~Font3216[ch - 16][2*i] << 8;
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	f1a3 0210 	sub.w	r2, r3, #16
 80029f2:	7dfb      	ldrb	r3, [r7, #23]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	492e      	ldr	r1, [pc, #184]	; (8002ab0 <er_oled_char+0x1c4>)
 80029f8:	0192      	lsls	r2, r2, #6
 80029fa:	440a      	add	r2, r1
 80029fc:	4413      	add	r3, r2
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	82bb      	strh	r3, [r7, #20]
            	temp |= ~Font3216[ch - 16][2*i + 1];
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	f1a3 0210 	sub.w	r2, r3, #16
 8002a10:	7dfb      	ldrb	r3, [r7, #23]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	3301      	adds	r3, #1
 8002a16:	4926      	ldr	r1, [pc, #152]	; (8002ab0 <er_oled_char+0x1c4>)
 8002a18:	0192      	lsls	r2, r2, #6
 8002a1a:	440a      	add	r2, r1
 8002a1c:	4413      	add	r3, r2
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	43db      	mvns	r3, r3
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	b21a      	sxth	r2, r3
 8002a28:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	b21b      	sxth	r3, r3
 8002a30:	82bb      	strh	r3, [r7, #20]
            }
        }
        for(j =0;j<maxindex;j++)
 8002a32:	2300      	movs	r3, #0
 8002a34:	75bb      	strb	r3, [r7, #22]
 8002a36:	e027      	b.n	8002a88 <er_oled_char+0x19c>
        {
            if(temp & position) er_oled_pixel(x, y, 1, buffer);
 8002a38:	8aba      	ldrh	r2, [r7, #20]
 8002a3a:	8a7b      	ldrh	r3, [r7, #18]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d006      	beq.n	8002a52 <er_oled_char+0x166>
 8002a44:	79f8      	ldrb	r0, [r7, #7]
 8002a46:	79b9      	ldrb	r1, [r7, #6]
 8002a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f7ff fedb 	bl	8002806 <er_oled_pixel>
 8002a50:	e005      	b.n	8002a5e <er_oled_char+0x172>
            else er_oled_pixel(x, y, 0, buffer);
 8002a52:	79f8      	ldrb	r0, [r7, #7]
 8002a54:	79b9      	ldrb	r1, [r7, #6]
 8002a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f7ff fed4 	bl	8002806 <er_oled_pixel>
            temp <<= 1;
 8002a5e:	8abb      	ldrh	r3, [r7, #20]
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	82bb      	strh	r3, [r7, #20]
            y++;
 8002a64:	79bb      	ldrb	r3, [r7, #6]
 8002a66:	3301      	adds	r3, #1
 8002a68:	71bb      	strb	r3, [r7, #6]
            if((y-y0) == size)
 8002a6a:	79ba      	ldrb	r2, [r7, #6]
 8002a6c:	7c3b      	ldrb	r3, [r7, #16]
 8002a6e:	1ad2      	subs	r2, r2, r3
 8002a70:	793b      	ldrb	r3, [r7, #4]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d105      	bne.n	8002a82 <er_oled_char+0x196>
            {
                y = y0;
 8002a76:	7c3b      	ldrb	r3, [r7, #16]
 8002a78:	71bb      	strb	r3, [r7, #6]
                x++;
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	71fb      	strb	r3, [r7, #7]
                break;
 8002a80:	e006      	b.n	8002a90 <er_oled_char+0x1a4>
        for(j =0;j<maxindex;j++)
 8002a82:	7dbb      	ldrb	r3, [r7, #22]
 8002a84:	3301      	adds	r3, #1
 8002a86:	75bb      	strb	r3, [r7, #22]
 8002a88:	7dba      	ldrb	r2, [r7, #22]
 8002a8a:	7c7b      	ldrb	r3, [r7, #17]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d3d3      	bcc.n	8002a38 <er_oled_char+0x14c>
    for(i = 0;i<size;i++) {
 8002a90:	7dfb      	ldrb	r3, [r7, #23]
 8002a92:	3301      	adds	r3, #1
 8002a94:	75fb      	strb	r3, [r7, #23]
 8002a96:	7dfa      	ldrb	r2, [r7, #23]
 8002a98:	793b      	ldrb	r3, [r7, #4]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	f4ff af49 	bcc.w	8002932 <er_oled_char+0x46>
            }
        }
    }
}
 8002aa0:	bf00      	nop
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd90      	pop	{r4, r7, pc}
 8002aa8:	08016aa8 	.word	0x08016aa8
 8002aac:	08016f1c 	.word	0x08016f1c
 8002ab0:	0801750c 	.word	0x0801750c

08002ab4 <er_oled_string>:

void er_oled_string(uint8_t x, uint8_t y, const char *pString, uint8_t Size, uint8_t Mode, uint8_t* buffer)
{
 8002ab4:	b590      	push	{r4, r7, lr}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	603a      	str	r2, [r7, #0]
 8002abc:	461a      	mov	r2, r3
 8002abe:	4603      	mov	r3, r0
 8002ac0:	71fb      	strb	r3, [r7, #7]
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	71bb      	strb	r3, [r7, #6]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	717b      	strb	r3, [r7, #5]
    while (*pString != '\0') {
 8002aca:	e02c      	b.n	8002b26 <er_oled_string+0x72>
        if (x > (WIDTH - Size / 2)) {
 8002acc:	79fa      	ldrb	r2, [r7, #7]
 8002ace:	797b      	ldrb	r3, [r7, #5]
 8002ad0:	085b      	lsrs	r3, r3, #1
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	f1c3 0348 	rsb	r3, r3, #72	; 0x48
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	dd0f      	ble.n	8002afc <er_oled_string+0x48>
            x = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	71fb      	strb	r3, [r7, #7]
            y += Size;
 8002ae0:	79ba      	ldrb	r2, [r7, #6]
 8002ae2:	797b      	ldrb	r3, [r7, #5]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	71bb      	strb	r3, [r7, #6]
            if (y > (HEIGHT - Size)) {
 8002ae8:	79ba      	ldrb	r2, [r7, #6]
 8002aea:	797b      	ldrb	r3, [r7, #5]
 8002aec:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8002af0:	429a      	cmp	r2, r3
 8002af2:	dd03      	ble.n	8002afc <er_oled_string+0x48>
                y = x = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	71fb      	strb	r3, [r7, #7]
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	71bb      	strb	r3, [r7, #6]
            }
        }

        er_oled_char(x, y, *pString, Size, Mode, buffer);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	781a      	ldrb	r2, [r3, #0]
 8002b00:	797c      	ldrb	r4, [r7, #5]
 8002b02:	79b9      	ldrb	r1, [r7, #6]
 8002b04:	79f8      	ldrb	r0, [r7, #7]
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	9301      	str	r3, [sp, #4]
 8002b0a:	7e3b      	ldrb	r3, [r7, #24]
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	4623      	mov	r3, r4
 8002b10:	f7ff feec 	bl	80028ec <er_oled_char>
        x += Size / 2;
 8002b14:	797b      	ldrb	r3, [r7, #5]
 8002b16:	085b      	lsrs	r3, r3, #1
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	71fb      	strb	r3, [r7, #7]
        pString++;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	3301      	adds	r3, #1
 8002b24:	603b      	str	r3, [r7, #0]
    while (*pString != '\0') {
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1ce      	bne.n	8002acc <er_oled_string+0x18>
    }
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd90      	pop	{r4, r7, pc}

08002b36 <er_oled_bitmap>:
        }
    }
}

void er_oled_bitmap(uint8_t x,uint8_t y,const uint8_t *pBmp, uint8_t chWidth, uint8_t chHeight, uint8_t* buffer)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	603a      	str	r2, [r7, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	4603      	mov	r3, r0
 8002b42:	71fb      	strb	r3, [r7, #7]
 8002b44:	460b      	mov	r3, r1
 8002b46:	71bb      	strb	r3, [r7, #6]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	717b      	strb	r3, [r7, #5]
	uint8_t i, j, byteWidth = (chWidth + 7)/8;
 8002b4c:	797b      	ldrb	r3, [r7, #5]
 8002b4e:	3307      	adds	r3, #7
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	da00      	bge.n	8002b56 <er_oled_bitmap+0x20>
 8002b54:	3307      	adds	r3, #7
 8002b56:	10db      	asrs	r3, r3, #3
 8002b58:	737b      	strb	r3, [r7, #13]
	for(j = 0;j < chHeight;j++){
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	73bb      	strb	r3, [r7, #14]
 8002b5e:	e02c      	b.n	8002bba <er_oled_bitmap+0x84>
		for(i = 0;i <chWidth;i++){
 8002b60:	2300      	movs	r3, #0
 8002b62:	73fb      	strb	r3, [r7, #15]
 8002b64:	e022      	b.n	8002bac <er_oled_bitmap+0x76>
			if((pBmp[j * byteWidth + i / 8]) & (128 >> (i & 7))){
 8002b66:	7bbb      	ldrb	r3, [r7, #14]
 8002b68:	7b7a      	ldrb	r2, [r7, #13]
 8002b6a:	fb02 f303 	mul.w	r3, r2, r3
 8002b6e:	7bfa      	ldrb	r2, [r7, #15]
 8002b70:	08d2      	lsrs	r2, r2, #3
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	4413      	add	r3, r2
 8002b76:	461a      	mov	r2, r3
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	4619      	mov	r1, r3
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	2280      	movs	r2, #128	; 0x80
 8002b88:	fa42 f303 	asr.w	r3, r2, r3
 8002b8c:	400b      	ands	r3, r1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d009      	beq.n	8002ba6 <er_oled_bitmap+0x70>
				er_oled_pixel(x + i,y + j, 1, buffer);
 8002b92:	79fa      	ldrb	r2, [r7, #7]
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
 8002b96:	18d0      	adds	r0, r2, r3
 8002b98:	79ba      	ldrb	r2, [r7, #6]
 8002b9a:	7bbb      	ldrb	r3, [r7, #14]
 8002b9c:	18d1      	adds	r1, r2, r3
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f7ff fe30 	bl	8002806 <er_oled_pixel>
		for(i = 0;i <chWidth;i++){
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	73fb      	strb	r3, [r7, #15]
 8002bac:	7bfa      	ldrb	r2, [r7, #15]
 8002bae:	797b      	ldrb	r3, [r7, #5]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d3d8      	bcc.n	8002b66 <er_oled_bitmap+0x30>
	for(j = 0;j < chHeight;j++){
 8002bb4:	7bbb      	ldrb	r3, [r7, #14]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	73bb      	strb	r3, [r7, #14]
 8002bba:	7bba      	ldrb	r2, [r7, #14]
 8002bbc:	7e3b      	ldrb	r3, [r7, #24]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d3ce      	bcc.n	8002b60 <er_oled_bitmap+0x2a>
			}
		}
	}
}
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <er_oled_display>:

void er_oled_display(uint8_t* pBuf)
{    uint8_t page,i;
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b084      	sub	sp, #16
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
    for (page = 0; page < PAGES; page++) {
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	73fb      	strb	r3, [r7, #15]
 8002bd6:	e029      	b.n	8002c2c <er_oled_display+0x62>
        command(0xB0 + page);/* set page address */
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	3b50      	subs	r3, #80	; 0x50
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2100      	movs	r1, #0
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fd71 	bl	80026c8 <I2C_Write_Byte>
        command(0x0c);   /* set low column address */
 8002be6:	2100      	movs	r1, #0
 8002be8:	200c      	movs	r0, #12
 8002bea:	f7ff fd6d 	bl	80026c8 <I2C_Write_Byte>
        command(0x11);  /* set high column address */
 8002bee:	2100      	movs	r1, #0
 8002bf0:	2011      	movs	r0, #17
 8002bf2:	f7ff fd69 	bl	80026c8 <I2C_Write_Byte>
        for(i = 0; i< WIDTH; i++ ) {
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	73bb      	strb	r3, [r7, #14]
 8002bfa:	e011      	b.n	8002c20 <er_oled_display+0x56>
          data(pBuf[i+page*WIDTH]);// write data one
 8002bfc:	7bb9      	ldrb	r1, [r7, #14]
 8002bfe:	7bfa      	ldrb	r2, [r7, #15]
 8002c00:	4613      	mov	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4413      	add	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	440b      	add	r3, r1
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4413      	add	r3, r2
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2140      	movs	r1, #64	; 0x40
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff fd57 	bl	80026c8 <I2C_Write_Byte>
        for(i = 0; i< WIDTH; i++ ) {
 8002c1a:	7bbb      	ldrb	r3, [r7, #14]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	73bb      	strb	r3, [r7, #14]
 8002c20:	7bbb      	ldrb	r3, [r7, #14]
 8002c22:	2b47      	cmp	r3, #71	; 0x47
 8002c24:	d9ea      	bls.n	8002bfc <er_oled_display+0x32>
    for (page = 0; page < PAGES; page++) {
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d9d2      	bls.n	8002bd8 <er_oled_display+0xe>
        }
    }
}
 8002c32:	bf00      	nop
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <er_oled_time>:

void er_oled_time(const char *pString)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b0de      	sub	sp, #376	; 0x178
 8002c3e:	af02      	add	r7, sp, #8
 8002c40:	1d3b      	adds	r3, r7, #4
 8002c42:	6018      	str	r0, [r3, #0]
	uint8_t oled_buf[WIDTH * HEIGHT / 8];

	er_oled_clear(oled_buf);
 8002c44:	f107 0308 	add.w	r3, r7, #8
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff fdc3 	bl	80027d4 <er_oled_clear>
    er_oled_char( 0, 4, *pString++,  32, 1, oled_buf);
 8002c4e:	1d3b      	adds	r3, r7, #4
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	1d3a      	adds	r2, r7, #4
 8002c54:	1c59      	adds	r1, r3, #1
 8002c56:	6011      	str	r1, [r2, #0]
 8002c58:	781a      	ldrb	r2, [r3, #0]
 8002c5a:	f107 0308 	add.w	r3, r7, #8
 8002c5e:	9301      	str	r3, [sp, #4]
 8002c60:	2301      	movs	r3, #1
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	2320      	movs	r3, #32
 8002c66:	2104      	movs	r1, #4
 8002c68:	2000      	movs	r0, #0
 8002c6a:	f7ff fe3f 	bl	80028ec <er_oled_char>
    er_oled_char(16, 4, *pString++ , 32, 1, oled_buf);
 8002c6e:	1d3b      	adds	r3, r7, #4
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	1d3a      	adds	r2, r7, #4
 8002c74:	1c59      	adds	r1, r3, #1
 8002c76:	6011      	str	r1, [r2, #0]
 8002c78:	781a      	ldrb	r2, [r3, #0]
 8002c7a:	f107 0308 	add.w	r3, r7, #8
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	2301      	movs	r3, #1
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	2320      	movs	r3, #32
 8002c86:	2104      	movs	r1, #4
 8002c88:	2010      	movs	r0, #16
 8002c8a:	f7ff fe2f 	bl	80028ec <er_oled_char>
    er_oled_char(40, 4, *pString++ , 32, 1, oled_buf);
 8002c8e:	1d3b      	adds	r3, r7, #4
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	1d3a      	adds	r2, r7, #4
 8002c94:	1c59      	adds	r1, r3, #1
 8002c96:	6011      	str	r1, [r2, #0]
 8002c98:	781a      	ldrb	r2, [r3, #0]
 8002c9a:	f107 0308 	add.w	r3, r7, #8
 8002c9e:	9301      	str	r3, [sp, #4]
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	2320      	movs	r3, #32
 8002ca6:	2104      	movs	r1, #4
 8002ca8:	2028      	movs	r0, #40	; 0x28
 8002caa:	f7ff fe1f 	bl	80028ec <er_oled_char>
    er_oled_char(56, 4, *pString   , 32, 1, oled_buf);
 8002cae:	1d3b      	adds	r3, r7, #4
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	781a      	ldrb	r2, [r3, #0]
 8002cb4:	f107 0308 	add.w	r3, r7, #8
 8002cb8:	9301      	str	r3, [sp, #4]
 8002cba:	2301      	movs	r3, #1
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	2320      	movs	r3, #32
 8002cc0:	2104      	movs	r1, #4
 8002cc2:	2038      	movs	r0, #56	; 0x38
 8002cc4:	f7ff fe12 	bl	80028ec <er_oled_char>

    er_oled_pixel(36, 12, 1, oled_buf);
 8002cc8:	f107 0308 	add.w	r3, r7, #8
 8002ccc:	2201      	movs	r2, #1
 8002cce:	210c      	movs	r1, #12
 8002cd0:	2024      	movs	r0, #36	; 0x24
 8002cd2:	f7ff fd98 	bl	8002806 <er_oled_pixel>
	er_oled_pixel(36, 13, 1, oled_buf);
 8002cd6:	f107 0308 	add.w	r3, r7, #8
 8002cda:	2201      	movs	r2, #1
 8002cdc:	210d      	movs	r1, #13
 8002cde:	2024      	movs	r0, #36	; 0x24
 8002ce0:	f7ff fd91 	bl	8002806 <er_oled_pixel>
	er_oled_pixel(36, 14, 1, oled_buf);
 8002ce4:	f107 0308 	add.w	r3, r7, #8
 8002ce8:	2201      	movs	r2, #1
 8002cea:	210e      	movs	r1, #14
 8002cec:	2024      	movs	r0, #36	; 0x24
 8002cee:	f7ff fd8a 	bl	8002806 <er_oled_pixel>
	er_oled_pixel(36, 28, 1, oled_buf);
 8002cf2:	f107 0308 	add.w	r3, r7, #8
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	211c      	movs	r1, #28
 8002cfa:	2024      	movs	r0, #36	; 0x24
 8002cfc:	f7ff fd83 	bl	8002806 <er_oled_pixel>
	er_oled_pixel(36, 27, 1, oled_buf);
 8002d00:	f107 0308 	add.w	r3, r7, #8
 8002d04:	2201      	movs	r2, #1
 8002d06:	211b      	movs	r1, #27
 8002d08:	2024      	movs	r0, #36	; 0x24
 8002d0a:	f7ff fd7c 	bl	8002806 <er_oled_pixel>
	er_oled_pixel(36, 26, 1, oled_buf);
 8002d0e:	f107 0308 	add.w	r3, r7, #8
 8002d12:	2201      	movs	r2, #1
 8002d14:	211a      	movs	r1, #26
 8002d16:	2024      	movs	r0, #36	; 0x24
 8002d18:	f7ff fd75 	bl	8002806 <er_oled_pixel>

	er_oled_display(oled_buf);
 8002d1c:	f107 0308 	add.w	r3, r7, #8
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff ff52 	bl	8002bca <er_oled_display>
}
 8002d26:	bf00      	nop
 8002d28:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <er_oled_print_2digit>:

void er_oled_print_2digit(int value){
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b0e0      	sub	sp, #384	; 0x180
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	1d3b      	adds	r3, r7, #4
 8002d38:	6018      	str	r0, [r3, #0]
  uint8_t oled_buf[WIDTH * HEIGHT / 8] = {0};
 8002d3a:	f107 030c 	add.w	r3, r7, #12
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002d44:	461a      	mov	r2, r3
 8002d46:	2100      	movs	r1, #0
 8002d48:	f010 fb93 	bl	8013472 <memset>
  char c = (char) ( ((int) '0') + (value % 10));
 8002d4c:	1d3b      	adds	r3, r7, #4
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	4b1e      	ldr	r3, [pc, #120]	; (8002dcc <er_oled_print_2digit+0x9c>)
 8002d52:	fb83 1302 	smull	r1, r3, r3, r2
 8002d56:	1099      	asrs	r1, r3, #2
 8002d58:	17d3      	asrs	r3, r2, #31
 8002d5a:	1ac9      	subs	r1, r1, r3
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	1ad1      	subs	r1, r2, r3
 8002d66:	b2cb      	uxtb	r3, r1
 8002d68:	3330      	adds	r3, #48	; 0x30
 8002d6a:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
  char d = (char) ( ((int) '0') + (value / 10));
 8002d6e:	1d3b      	adds	r3, r7, #4
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a16      	ldr	r2, [pc, #88]	; (8002dcc <er_oled_print_2digit+0x9c>)
 8002d74:	fb82 1203 	smull	r1, r2, r2, r3
 8002d78:	1092      	asrs	r2, r2, #2
 8002d7a:	17db      	asrs	r3, r3, #31
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	3330      	adds	r3, #48	; 0x30
 8002d82:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
  er_oled_char(27, 14, d, 12, 1, oled_buf);
 8002d86:	f897 2176 	ldrb.w	r2, [r7, #374]	; 0x176
 8002d8a:	f107 030c 	add.w	r3, r7, #12
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	2301      	movs	r3, #1
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	230c      	movs	r3, #12
 8002d96:	210e      	movs	r1, #14
 8002d98:	201b      	movs	r0, #27
 8002d9a:	f7ff fda7 	bl	80028ec <er_oled_char>
  er_oled_char(36, 14, c, 12, 1, oled_buf);
 8002d9e:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8002da2:	f107 030c 	add.w	r3, r7, #12
 8002da6:	9301      	str	r3, [sp, #4]
 8002da8:	2301      	movs	r3, #1
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	230c      	movs	r3, #12
 8002dae:	210e      	movs	r1, #14
 8002db0:	2024      	movs	r0, #36	; 0x24
 8002db2:	f7ff fd9b 	bl	80028ec <er_oled_char>
  er_oled_display(oled_buf);
 8002db6:	f107 030c 	add.w	r3, r7, #12
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff ff05 	bl	8002bca <er_oled_display>

}
 8002dc0:	bf00      	nop
 8002dc2:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	66666667 	.word	0x66666667

08002dd0 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <LL_EXTI_EnableIT_0_31>:
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002dec:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <LL_EXTI_EnableIT_0_31+0x24>)
 8002dee:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002df2:	4905      	ldr	r1, [pc, #20]	; (8002e08 <LL_EXTI_EnableIT_0_31+0x24>)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	58000800 	.word	0x58000800

08002e0c <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002e14:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4904      	ldr	r1, [pc, #16]	; (8002e2c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	600b      	str	r3, [r1, #0]
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	58000800 	.word	0x58000800

08002e30 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002e36:	4b0d      	ldr	r3, [pc, #52]	; (8002e6c <ReadRtcSsrValue+0x3c>)
 8002e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002e3e:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <ReadRtcSsrValue+0x3c>)
 8002e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002e46:	e005      	b.n	8002e54 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002e4c:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <ReadRtcSsrValue+0x3c>)
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d1f5      	bne.n	8002e48 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002e5c:	683b      	ldr	r3, [r7, #0]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40002800 	.word	0x40002800

08002e70 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	460a      	mov	r2, r1
 8002e7a:	71fb      	strb	r3, [r7, #7]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002e80:	79ba      	ldrb	r2, [r7, #6]
 8002e82:	491d      	ldr	r1, [pc, #116]	; (8002ef8 <LinkTimerAfter+0x88>)
 8002e84:	4613      	mov	r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	4413      	add	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	440b      	add	r3, r1
 8002e8e:	3315      	adds	r3, #21
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	2b06      	cmp	r3, #6
 8002e98:	d009      	beq.n	8002eae <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002e9a:	7bfa      	ldrb	r2, [r7, #15]
 8002e9c:	4916      	ldr	r1, [pc, #88]	; (8002ef8 <LinkTimerAfter+0x88>)
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	4413      	add	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	440b      	add	r3, r1
 8002ea8:	3314      	adds	r3, #20
 8002eaa:	79fa      	ldrb	r2, [r7, #7]
 8002eac:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002eae:	79fa      	ldrb	r2, [r7, #7]
 8002eb0:	4911      	ldr	r1, [pc, #68]	; (8002ef8 <LinkTimerAfter+0x88>)
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	4413      	add	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	440b      	add	r3, r1
 8002ebc:	3315      	adds	r3, #21
 8002ebe:	7bfa      	ldrb	r2, [r7, #15]
 8002ec0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002ec2:	79fa      	ldrb	r2, [r7, #7]
 8002ec4:	490c      	ldr	r1, [pc, #48]	; (8002ef8 <LinkTimerAfter+0x88>)
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	4413      	add	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	440b      	add	r3, r1
 8002ed0:	3314      	adds	r3, #20
 8002ed2:	79ba      	ldrb	r2, [r7, #6]
 8002ed4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002ed6:	79ba      	ldrb	r2, [r7, #6]
 8002ed8:	4907      	ldr	r1, [pc, #28]	; (8002ef8 <LinkTimerAfter+0x88>)
 8002eda:	4613      	mov	r3, r2
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	4413      	add	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	440b      	add	r3, r1
 8002ee4:	3315      	adds	r3, #21
 8002ee6:	79fa      	ldrb	r2, [r7, #7]
 8002ee8:	701a      	strb	r2, [r3, #0]

  return;
 8002eea:	bf00      	nop
}
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000290 	.word	0x20000290

08002efc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4603      	mov	r3, r0
 8002f04:	460a      	mov	r2, r1
 8002f06:	71fb      	strb	r3, [r7, #7]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002f0c:	4b29      	ldr	r3, [pc, #164]	; (8002fb4 <LinkTimerBefore+0xb8>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	79ba      	ldrb	r2, [r7, #6]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d032      	beq.n	8002f7e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002f18:	79ba      	ldrb	r2, [r7, #6]
 8002f1a:	4927      	ldr	r1, [pc, #156]	; (8002fb8 <LinkTimerBefore+0xbc>)
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	4413      	add	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	440b      	add	r3, r1
 8002f26:	3314      	adds	r3, #20
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002f2c:	7bfa      	ldrb	r2, [r7, #15]
 8002f2e:	4922      	ldr	r1, [pc, #136]	; (8002fb8 <LinkTimerBefore+0xbc>)
 8002f30:	4613      	mov	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4413      	add	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	440b      	add	r3, r1
 8002f3a:	3315      	adds	r3, #21
 8002f3c:	79fa      	ldrb	r2, [r7, #7]
 8002f3e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002f40:	79fa      	ldrb	r2, [r7, #7]
 8002f42:	491d      	ldr	r1, [pc, #116]	; (8002fb8 <LinkTimerBefore+0xbc>)
 8002f44:	4613      	mov	r3, r2
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	4413      	add	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	440b      	add	r3, r1
 8002f4e:	3315      	adds	r3, #21
 8002f50:	79ba      	ldrb	r2, [r7, #6]
 8002f52:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002f54:	79fa      	ldrb	r2, [r7, #7]
 8002f56:	4918      	ldr	r1, [pc, #96]	; (8002fb8 <LinkTimerBefore+0xbc>)
 8002f58:	4613      	mov	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	440b      	add	r3, r1
 8002f62:	3314      	adds	r3, #20
 8002f64:	7bfa      	ldrb	r2, [r7, #15]
 8002f66:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002f68:	79ba      	ldrb	r2, [r7, #6]
 8002f6a:	4913      	ldr	r1, [pc, #76]	; (8002fb8 <LinkTimerBefore+0xbc>)
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	4413      	add	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	440b      	add	r3, r1
 8002f76:	3314      	adds	r3, #20
 8002f78:	79fa      	ldrb	r2, [r7, #7]
 8002f7a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002f7c:	e014      	b.n	8002fa8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002f7e:	79fa      	ldrb	r2, [r7, #7]
 8002f80:	490d      	ldr	r1, [pc, #52]	; (8002fb8 <LinkTimerBefore+0xbc>)
 8002f82:	4613      	mov	r3, r2
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	4413      	add	r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	440b      	add	r3, r1
 8002f8c:	3315      	adds	r3, #21
 8002f8e:	79ba      	ldrb	r2, [r7, #6]
 8002f90:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002f92:	79ba      	ldrb	r2, [r7, #6]
 8002f94:	4908      	ldr	r1, [pc, #32]	; (8002fb8 <LinkTimerBefore+0xbc>)
 8002f96:	4613      	mov	r3, r2
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	4413      	add	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	440b      	add	r3, r1
 8002fa0:	3314      	adds	r3, #20
 8002fa2:	79fa      	ldrb	r2, [r7, #7]
 8002fa4:	701a      	strb	r2, [r3, #0]
  return;
 8002fa6:	bf00      	nop
}
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	20000320 	.word	0x20000320
 8002fb8:	20000290 	.word	0x20000290

08002fbc <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002fc6:	4b4e      	ldr	r3, [pc, #312]	; (8003100 <linkTimer+0x144>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b06      	cmp	r3, #6
 8002fce:	d118      	bne.n	8003002 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002fd0:	4b4b      	ldr	r3, [pc, #300]	; (8003100 <linkTimer+0x144>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	4b4b      	ldr	r3, [pc, #300]	; (8003104 <linkTimer+0x148>)
 8002fd8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002fda:	4a49      	ldr	r2, [pc, #292]	; (8003100 <linkTimer+0x144>)
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002fe0:	79fa      	ldrb	r2, [r7, #7]
 8002fe2:	4949      	ldr	r1, [pc, #292]	; (8003108 <linkTimer+0x14c>)
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	4413      	add	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	440b      	add	r3, r1
 8002fee:	3315      	adds	r3, #21
 8002ff0:	2206      	movs	r2, #6
 8002ff2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002ff4:	4b45      	ldr	r3, [pc, #276]	; (800310c <linkTimer+0x150>)
 8002ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8002ffa:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	81fb      	strh	r3, [r7, #14]
 8003000:	e078      	b.n	80030f4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8003002:	f000 f909 	bl	8003218 <ReturnTimeElapsed>
 8003006:	4603      	mov	r3, r0
 8003008:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800300a:	79fa      	ldrb	r2, [r7, #7]
 800300c:	493e      	ldr	r1, [pc, #248]	; (8003108 <linkTimer+0x14c>)
 800300e:	4613      	mov	r3, r2
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	4413      	add	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	440b      	add	r3, r1
 8003018:	3308      	adds	r3, #8
 800301a:	6819      	ldr	r1, [r3, #0]
 800301c:	89fb      	ldrh	r3, [r7, #14]
 800301e:	79fa      	ldrb	r2, [r7, #7]
 8003020:	4419      	add	r1, r3
 8003022:	4839      	ldr	r0, [pc, #228]	; (8003108 <linkTimer+0x14c>)
 8003024:	4613      	mov	r3, r2
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4413      	add	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4403      	add	r3, r0
 800302e:	3308      	adds	r3, #8
 8003030:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8003032:	79fa      	ldrb	r2, [r7, #7]
 8003034:	4934      	ldr	r1, [pc, #208]	; (8003108 <linkTimer+0x14c>)
 8003036:	4613      	mov	r3, r2
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	4413      	add	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	440b      	add	r3, r1
 8003040:	3308      	adds	r3, #8
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8003046:	4b2e      	ldr	r3, [pc, #184]	; (8003100 <linkTimer+0x144>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	4619      	mov	r1, r3
 800304e:	4a2e      	ldr	r2, [pc, #184]	; (8003108 <linkTimer+0x14c>)
 8003050:	460b      	mov	r3, r1
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	440b      	add	r3, r1
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4413      	add	r3, r2
 800305a:	3308      	adds	r3, #8
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	429a      	cmp	r2, r3
 8003062:	d337      	bcc.n	80030d4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8003064:	4b26      	ldr	r3, [pc, #152]	; (8003100 <linkTimer+0x144>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800306a:	7b7a      	ldrb	r2, [r7, #13]
 800306c:	4926      	ldr	r1, [pc, #152]	; (8003108 <linkTimer+0x14c>)
 800306e:	4613      	mov	r3, r2
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	4413      	add	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	440b      	add	r3, r1
 8003078:	3315      	adds	r3, #21
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800307e:	e013      	b.n	80030a8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8003080:	7b7a      	ldrb	r2, [r7, #13]
 8003082:	4921      	ldr	r1, [pc, #132]	; (8003108 <linkTimer+0x14c>)
 8003084:	4613      	mov	r3, r2
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	4413      	add	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	440b      	add	r3, r1
 800308e:	3315      	adds	r3, #21
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8003094:	7b7a      	ldrb	r2, [r7, #13]
 8003096:	491c      	ldr	r1, [pc, #112]	; (8003108 <linkTimer+0x14c>)
 8003098:	4613      	mov	r3, r2
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	4413      	add	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	440b      	add	r3, r1
 80030a2:	3315      	adds	r3, #21
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80030a8:	7b3b      	ldrb	r3, [r7, #12]
 80030aa:	2b06      	cmp	r3, #6
 80030ac:	d00b      	beq.n	80030c6 <linkTimer+0x10a>
 80030ae:	7b3a      	ldrb	r2, [r7, #12]
 80030b0:	4915      	ldr	r1, [pc, #84]	; (8003108 <linkTimer+0x14c>)
 80030b2:	4613      	mov	r3, r2
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	4413      	add	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	440b      	add	r3, r1
 80030bc:	3308      	adds	r3, #8
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d2dc      	bcs.n	8003080 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80030c6:	7b7a      	ldrb	r2, [r7, #13]
 80030c8:	79fb      	ldrb	r3, [r7, #7]
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff fecf 	bl	8002e70 <LinkTimerAfter>
 80030d2:	e00f      	b.n	80030f4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80030d4:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <linkTimer+0x144>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	4611      	mov	r1, r2
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff ff0c 	bl	8002efc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80030e4:	4b06      	ldr	r3, [pc, #24]	; (8003100 <linkTimer+0x144>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <linkTimer+0x148>)
 80030ec:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80030ee:	4a04      	ldr	r2, [pc, #16]	; (8003100 <linkTimer+0x144>)
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80030f4:	89fb      	ldrh	r3, [r7, #14]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20000320 	.word	0x20000320
 8003104:	20000321 	.word	0x20000321
 8003108:	20000290 	.word	0x20000290
 800310c:	20000324 	.word	0x20000324

08003110 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	460a      	mov	r2, r1
 800311a:	71fb      	strb	r3, [r7, #7]
 800311c:	4613      	mov	r3, r2
 800311e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8003120:	4b39      	ldr	r3, [pc, #228]	; (8003208 <UnlinkTimer+0xf8>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	79fa      	ldrb	r2, [r7, #7]
 8003128:	429a      	cmp	r2, r3
 800312a:	d111      	bne.n	8003150 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 800312c:	4b36      	ldr	r3, [pc, #216]	; (8003208 <UnlinkTimer+0xf8>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	b2da      	uxtb	r2, r3
 8003132:	4b36      	ldr	r3, [pc, #216]	; (800320c <UnlinkTimer+0xfc>)
 8003134:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8003136:	79fa      	ldrb	r2, [r7, #7]
 8003138:	4935      	ldr	r1, [pc, #212]	; (8003210 <UnlinkTimer+0x100>)
 800313a:	4613      	mov	r3, r2
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	4413      	add	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	440b      	add	r3, r1
 8003144:	3315      	adds	r3, #21
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	b2da      	uxtb	r2, r3
 800314a:	4b2f      	ldr	r3, [pc, #188]	; (8003208 <UnlinkTimer+0xf8>)
 800314c:	701a      	strb	r2, [r3, #0]
 800314e:	e03e      	b.n	80031ce <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8003150:	79fa      	ldrb	r2, [r7, #7]
 8003152:	492f      	ldr	r1, [pc, #188]	; (8003210 <UnlinkTimer+0x100>)
 8003154:	4613      	mov	r3, r2
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	4413      	add	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	440b      	add	r3, r1
 800315e:	3314      	adds	r3, #20
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8003164:	79fa      	ldrb	r2, [r7, #7]
 8003166:	492a      	ldr	r1, [pc, #168]	; (8003210 <UnlinkTimer+0x100>)
 8003168:	4613      	mov	r3, r2
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	4413      	add	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	440b      	add	r3, r1
 8003172:	3315      	adds	r3, #21
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8003178:	79f9      	ldrb	r1, [r7, #7]
 800317a:	7bfa      	ldrb	r2, [r7, #15]
 800317c:	4824      	ldr	r0, [pc, #144]	; (8003210 <UnlinkTimer+0x100>)
 800317e:	460b      	mov	r3, r1
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	440b      	add	r3, r1
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4403      	add	r3, r0
 8003188:	3315      	adds	r3, #21
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	b2d8      	uxtb	r0, r3
 800318e:	4920      	ldr	r1, [pc, #128]	; (8003210 <UnlinkTimer+0x100>)
 8003190:	4613      	mov	r3, r2
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	4413      	add	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	440b      	add	r3, r1
 800319a:	3315      	adds	r3, #21
 800319c:	4602      	mov	r2, r0
 800319e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80031a0:	7bbb      	ldrb	r3, [r7, #14]
 80031a2:	2b06      	cmp	r3, #6
 80031a4:	d013      	beq.n	80031ce <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80031a6:	79f9      	ldrb	r1, [r7, #7]
 80031a8:	7bba      	ldrb	r2, [r7, #14]
 80031aa:	4819      	ldr	r0, [pc, #100]	; (8003210 <UnlinkTimer+0x100>)
 80031ac:	460b      	mov	r3, r1
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	440b      	add	r3, r1
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	4403      	add	r3, r0
 80031b6:	3314      	adds	r3, #20
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	b2d8      	uxtb	r0, r3
 80031bc:	4914      	ldr	r1, [pc, #80]	; (8003210 <UnlinkTimer+0x100>)
 80031be:	4613      	mov	r3, r2
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4413      	add	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	440b      	add	r3, r1
 80031c8:	3314      	adds	r3, #20
 80031ca:	4602      	mov	r2, r0
 80031cc:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80031ce:	79fa      	ldrb	r2, [r7, #7]
 80031d0:	490f      	ldr	r1, [pc, #60]	; (8003210 <UnlinkTimer+0x100>)
 80031d2:	4613      	mov	r3, r2
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	4413      	add	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	440b      	add	r3, r1
 80031dc:	330c      	adds	r3, #12
 80031de:	2201      	movs	r2, #1
 80031e0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80031e2:	4b09      	ldr	r3, [pc, #36]	; (8003208 <UnlinkTimer+0xf8>)
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b06      	cmp	r3, #6
 80031ea:	d107      	bne.n	80031fc <UnlinkTimer+0xec>
 80031ec:	79bb      	ldrb	r3, [r7, #6]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d104      	bne.n	80031fc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80031f2:	4b08      	ldr	r3, [pc, #32]	; (8003214 <UnlinkTimer+0x104>)
 80031f4:	f04f 32ff 	mov.w	r2, #4294967295
 80031f8:	601a      	str	r2, [r3, #0]
  }

  return;
 80031fa:	bf00      	nop
 80031fc:	bf00      	nop
}
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	20000320 	.word	0x20000320
 800320c:	20000321 	.word	0x20000321
 8003210:	20000290 	.word	0x20000290
 8003214:	20000324 	.word	0x20000324

08003218 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800321e:	4b1a      	ldr	r3, [pc, #104]	; (8003288 <ReturnTimeElapsed+0x70>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003226:	d026      	beq.n	8003276 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8003228:	f7ff fe02 	bl	8002e30 <ReadRtcSsrValue>
 800322c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800322e:	4b16      	ldr	r3, [pc, #88]	; (8003288 <ReturnTimeElapsed+0x70>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	429a      	cmp	r2, r3
 8003236:	d805      	bhi.n	8003244 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8003238:	4b13      	ldr	r3, [pc, #76]	; (8003288 <ReturnTimeElapsed+0x70>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	607b      	str	r3, [r7, #4]
 8003242:	e00a      	b.n	800325a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8003244:	4b11      	ldr	r3, [pc, #68]	; (800328c <ReturnTimeElapsed+0x74>)
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	461a      	mov	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8003250:	4b0d      	ldr	r3, [pc, #52]	; (8003288 <ReturnTimeElapsed+0x70>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	4413      	add	r3, r2
 8003258:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800325a:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <ReturnTimeElapsed+0x78>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	461a      	mov	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	fb02 f303 	mul.w	r3, r2, r3
 8003266:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8003268:	4b0a      	ldr	r3, [pc, #40]	; (8003294 <ReturnTimeElapsed+0x7c>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	40d3      	lsrs	r3, r2
 8003272:	607b      	str	r3, [r7, #4]
 8003274:	e001      	b.n	800327a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8003276:	2300      	movs	r3, #0
 8003278:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	b29b      	uxth	r3, r3
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20000324 	.word	0x20000324
 800328c:	200003ae 	.word	0x200003ae
 8003290:	200003ad 	.word	0x200003ad
 8003294:	200003ac 	.word	0x200003ac

08003298 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 80032a2:	88fb      	ldrh	r3, [r7, #6]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d108      	bne.n	80032ba <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80032a8:	f7ff fdc2 	bl	8002e30 <ReadRtcSsrValue>
 80032ac:	4602      	mov	r2, r0
 80032ae:	4b24      	ldr	r3, [pc, #144]	; (8003340 <RestartWakeupCounter+0xa8>)
 80032b0:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80032b2:	2003      	movs	r0, #3
 80032b4:	f002 ffae 	bl	8006214 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80032b8:	e03e      	b.n	8003338 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80032ba:	88fb      	ldrh	r3, [r7, #6]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d803      	bhi.n	80032c8 <RestartWakeupCounter+0x30>
 80032c0:	4b20      	ldr	r3, [pc, #128]	; (8003344 <RestartWakeupCounter+0xac>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d002      	beq.n	80032ce <RestartWakeupCounter+0x36>
      Value -= 1;
 80032c8:	88fb      	ldrh	r3, [r7, #6]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80032ce:	bf00      	nop
 80032d0:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <RestartWakeupCounter+0xb0>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f7      	beq.n	80032d0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80032e0:	4b19      	ldr	r3, [pc, #100]	; (8003348 <RestartWakeupCounter+0xb0>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	4b17      	ldr	r3, [pc, #92]	; (8003348 <RestartWakeupCounter+0xb0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80032f4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80032f6:	4b15      	ldr	r3, [pc, #84]	; (800334c <RestartWakeupCounter+0xb4>)
 80032f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80032fc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80032fe:	2003      	movs	r0, #3
 8003300:	f002 ff96 	bl	8006230 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8003304:	4b12      	ldr	r3, [pc, #72]	; (8003350 <RestartWakeupCounter+0xb8>)
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	0c1b      	lsrs	r3, r3, #16
 800330a:	041b      	lsls	r3, r3, #16
 800330c:	88fa      	ldrh	r2, [r7, #6]
 800330e:	4910      	ldr	r1, [pc, #64]	; (8003350 <RestartWakeupCounter+0xb8>)
 8003310:	4313      	orrs	r3, r2
 8003312:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8003314:	f7ff fd8c 	bl	8002e30 <ReadRtcSsrValue>
 8003318:	4602      	mov	r2, r0
 800331a:	4b09      	ldr	r3, [pc, #36]	; (8003340 <RestartWakeupCounter+0xa8>)
 800331c:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 800331e:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <RestartWakeupCounter+0xb0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	4b08      	ldr	r3, [pc, #32]	; (8003348 <RestartWakeupCounter+0xb0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003330:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8003332:	f3af 8000 	nop.w
  return ;
 8003336:	bf00      	nop
}
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20000324 	.word	0x20000324
 8003344:	200003ac 	.word	0x200003ac
 8003348:	200003a8 	.word	0x200003a8
 800334c:	58000800 	.word	0x58000800
 8003350:	40002800 	.word	0x40002800

08003354 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800335a:	4b47      	ldr	r3, [pc, #284]	; (8003478 <RescheduleTimerList+0x124>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003366:	d108      	bne.n	800337a <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8003368:	bf00      	nop
 800336a:	4b44      	ldr	r3, [pc, #272]	; (800347c <RescheduleTimerList+0x128>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f003 0304 	and.w	r3, r3, #4
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f7      	bne.n	800336a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800337a:	4b40      	ldr	r3, [pc, #256]	; (800347c <RescheduleTimerList+0x128>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	4b3e      	ldr	r3, [pc, #248]	; (800347c <RescheduleTimerList+0x128>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800338c:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800338e:	4b3c      	ldr	r3, [pc, #240]	; (8003480 <RescheduleTimerList+0x12c>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8003394:	7bfa      	ldrb	r2, [r7, #15]
 8003396:	493b      	ldr	r1, [pc, #236]	; (8003484 <RescheduleTimerList+0x130>)
 8003398:	4613      	mov	r3, r2
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4413      	add	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	440b      	add	r3, r1
 80033a2:	3308      	adds	r3, #8
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80033a8:	f7ff ff36 	bl	8003218 <ReturnTimeElapsed>
 80033ac:	4603      	mov	r3, r0
 80033ae:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80033b0:	88fb      	ldrh	r3, [r7, #6]
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d205      	bcs.n	80033c4 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80033b8:	2300      	movs	r3, #0
 80033ba:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80033bc:	4b32      	ldr	r3, [pc, #200]	; (8003488 <RescheduleTimerList+0x134>)
 80033be:	2201      	movs	r2, #1
 80033c0:	701a      	strb	r2, [r3, #0]
 80033c2:	e04d      	b.n	8003460 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80033c4:	88fb      	ldrh	r3, [r7, #6]
 80033c6:	4a31      	ldr	r2, [pc, #196]	; (800348c <RescheduleTimerList+0x138>)
 80033c8:	8812      	ldrh	r2, [r2, #0]
 80033ca:	b292      	uxth	r2, r2
 80033cc:	4413      	add	r3, r2
 80033ce:	461a      	mov	r2, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d906      	bls.n	80033e4 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80033d6:	4b2d      	ldr	r3, [pc, #180]	; (800348c <RescheduleTimerList+0x138>)
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80033dc:	4b2a      	ldr	r3, [pc, #168]	; (8003488 <RescheduleTimerList+0x134>)
 80033de:	2200      	movs	r2, #0
 80033e0:	701a      	strb	r2, [r3, #0]
 80033e2:	e03d      	b.n	8003460 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	88fb      	ldrh	r3, [r7, #6]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80033ee:	4b26      	ldr	r3, [pc, #152]	; (8003488 <RescheduleTimerList+0x134>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80033f4:	e034      	b.n	8003460 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80033f6:	7bfa      	ldrb	r2, [r7, #15]
 80033f8:	4922      	ldr	r1, [pc, #136]	; (8003484 <RescheduleTimerList+0x130>)
 80033fa:	4613      	mov	r3, r2
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	4413      	add	r3, r2
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	440b      	add	r3, r1
 8003404:	3308      	adds	r3, #8
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	88fb      	ldrh	r3, [r7, #6]
 800340a:	429a      	cmp	r2, r3
 800340c:	d20a      	bcs.n	8003424 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800340e:	7bfa      	ldrb	r2, [r7, #15]
 8003410:	491c      	ldr	r1, [pc, #112]	; (8003484 <RescheduleTimerList+0x130>)
 8003412:	4613      	mov	r3, r2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	4413      	add	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	440b      	add	r3, r1
 800341c:	3308      	adds	r3, #8
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	e013      	b.n	800344c <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8003424:	7bfa      	ldrb	r2, [r7, #15]
 8003426:	4917      	ldr	r1, [pc, #92]	; (8003484 <RescheduleTimerList+0x130>)
 8003428:	4613      	mov	r3, r2
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	4413      	add	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	440b      	add	r3, r1
 8003432:	3308      	adds	r3, #8
 8003434:	6819      	ldr	r1, [r3, #0]
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	7bfa      	ldrb	r2, [r7, #15]
 800343a:	1ac9      	subs	r1, r1, r3
 800343c:	4811      	ldr	r0, [pc, #68]	; (8003484 <RescheduleTimerList+0x130>)
 800343e:	4613      	mov	r3, r2
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	4413      	add	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4403      	add	r3, r0
 8003448:	3308      	adds	r3, #8
 800344a:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800344c:	7bfa      	ldrb	r2, [r7, #15]
 800344e:	490d      	ldr	r1, [pc, #52]	; (8003484 <RescheduleTimerList+0x130>)
 8003450:	4613      	mov	r3, r2
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	4413      	add	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	440b      	add	r3, r1
 800345a:	3315      	adds	r3, #21
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	2b06      	cmp	r3, #6
 8003464:	d1c7      	bne.n	80033f6 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8003466:	89bb      	ldrh	r3, [r7, #12]
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff ff15 	bl	8003298 <RestartWakeupCounter>

  return ;
 800346e:	bf00      	nop
}
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40002800 	.word	0x40002800
 800347c:	200003a8 	.word	0x200003a8
 8003480:	20000320 	.word	0x20000320
 8003484:	20000290 	.word	0x20000290
 8003488:	20000328 	.word	0x20000328
 800348c:	200003b0 	.word	0x200003b0

08003490 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08a      	sub	sp, #40	; 0x28
 8003494:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003496:	f3ef 8310 	mrs	r3, PRIMASK
 800349a:	617b      	str	r3, [r7, #20]
  return(result);
 800349c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80034a0:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80034a2:	4b5e      	ldr	r3, [pc, #376]	; (800361c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	22ca      	movs	r2, #202	; 0xca
 80034aa:	625a      	str	r2, [r3, #36]	; 0x24
 80034ac:	4b5b      	ldr	r3, [pc, #364]	; (800361c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2253      	movs	r2, #83	; 0x53
 80034b4:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 80034b6:	4b59      	ldr	r3, [pc, #356]	; (800361c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	4b57      	ldr	r3, [pc, #348]	; (800361c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c8:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80034ca:	4b55      	ldr	r3, [pc, #340]	; (8003620 <HW_TS_RTC_Wakeup_Handler+0x190>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80034d2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80034d6:	4953      	ldr	r1, [pc, #332]	; (8003624 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80034d8:	4613      	mov	r3, r2
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	4413      	add	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	440b      	add	r3, r1
 80034e2:	330c      	adds	r3, #12
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d170      	bne.n	80035ce <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80034ec:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80034f0:	494c      	ldr	r1, [pc, #304]	; (8003624 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80034f2:	4613      	mov	r3, r2
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	4413      	add	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	440b      	add	r3, r1
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8003500:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003504:	4947      	ldr	r1, [pc, #284]	; (8003624 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8003506:	4613      	mov	r3, r2
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	4413      	add	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	440b      	add	r3, r1
 8003510:	3310      	adds	r3, #16
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8003516:	4b44      	ldr	r3, [pc, #272]	; (8003628 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d04e      	beq.n	80035be <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8003520:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003524:	493f      	ldr	r1, [pc, #252]	; (8003624 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8003526:	4613      	mov	r3, r2
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	4413      	add	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	440b      	add	r3, r1
 8003530:	330d      	adds	r3, #13
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b01      	cmp	r3, #1
 8003538:	d125      	bne.n	8003586 <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800353a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800353e:	2101      	movs	r1, #1
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff fde5 	bl	8003110 <UnlinkTimer>
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8003550:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003554:	4933      	ldr	r1, [pc, #204]	; (8003624 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8003556:	4613      	mov	r3, r2
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	4413      	add	r3, r2
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	440b      	add	r3, r1
 8003560:	3304      	adds	r3, #4
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003568:	4611      	mov	r1, r2
 800356a:	4618      	mov	r0, r3
 800356c:	f000 fa46 	bl	80039fc <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003570:	4b2a      	ldr	r3, [pc, #168]	; (800361c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	22ca      	movs	r2, #202	; 0xca
 8003578:	625a      	str	r2, [r3, #36]	; 0x24
 800357a:	4b28      	ldr	r3, [pc, #160]	; (800361c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2253      	movs	r2, #83	; 0x53
 8003582:	625a      	str	r2, [r3, #36]	; 0x24
 8003584:	e013      	b.n	80035ae <HW_TS_RTC_Wakeup_Handler+0x11e>
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8003590:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003594:	4618      	mov	r0, r3
 8003596:	f000 f9a7 	bl	80038e8 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800359a:	4b20      	ldr	r3, [pc, #128]	; (800361c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	22ca      	movs	r2, #202	; 0xca
 80035a2:	625a      	str	r2, [r3, #36]	; 0x24
 80035a4:	4b1d      	ldr	r3, [pc, #116]	; (800361c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2253      	movs	r2, #83	; 0x53
 80035ac:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80035ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035b2:	69fa      	ldr	r2, [r7, #28]
 80035b4:	4619      	mov	r1, r3
 80035b6:	69b8      	ldr	r0, [r7, #24]
 80035b8:	f000 faa6 	bl	8003b08 <HW_TS_RTC_Int_AppNot>
 80035bc:	e024      	b.n	8003608 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 80035be:	f7ff fec9 	bl	8003354 <RescheduleTimerList>
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	60bb      	str	r3, [r7, #8]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	f383 8810 	msr	PRIMASK, r3
 80035cc:	e01c      	b.n	8003608 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80035ce:	bf00      	nop
 80035d0:	4b12      	ldr	r3, [pc, #72]	; (800361c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f7      	beq.n	80035d0 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80035e0:	4b0e      	ldr	r3, [pc, #56]	; (800361c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	4b0c      	ldr	r3, [pc, #48]	; (800361c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80035f4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80035f6:	4b0d      	ldr	r3, [pc, #52]	; (800362c <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80035f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80035fc:	60da      	str	r2, [r3, #12]
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	607b      	str	r3, [r7, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003608:	4b04      	ldr	r3, [pc, #16]	; (800361c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	22ff      	movs	r2, #255	; 0xff
 8003610:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8003612:	bf00      	nop
}
 8003614:	3728      	adds	r7, #40	; 0x28
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	200003a8 	.word	0x200003a8
 8003620:	20000320 	.word	0x20000320
 8003624:	20000290 	.word	0x20000290
 8003628:	20000328 	.word	0x20000328
 800362c:	58000800 	.word	0x58000800

08003630 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b088      	sub	sp, #32
 8003634:	af00      	add	r7, sp, #0
 8003636:	4603      	mov	r3, r0
 8003638:	6039      	str	r1, [r7, #0]
 800363a:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 800363c:	4a64      	ldr	r2, [pc, #400]	; (80037d0 <HW_TS_Init+0x1a0>)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003642:	4b63      	ldr	r3, [pc, #396]	; (80037d0 <HW_TS_Init+0x1a0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	22ca      	movs	r2, #202	; 0xca
 800364a:	625a      	str	r2, [r3, #36]	; 0x24
 800364c:	4b60      	ldr	r3, [pc, #384]	; (80037d0 <HW_TS_Init+0x1a0>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2253      	movs	r2, #83	; 0x53
 8003654:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003656:	4b5f      	ldr	r3, [pc, #380]	; (80037d4 <HW_TS_Init+0x1a4>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	4a5e      	ldr	r2, [pc, #376]	; (80037d4 <HW_TS_Init+0x1a4>)
 800365c:	f043 0320 	orr.w	r3, r3, #32
 8003660:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8003662:	4b5c      	ldr	r3, [pc, #368]	; (80037d4 <HW_TS_Init+0x1a4>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	b2db      	uxtb	r3, r3
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	b2db      	uxtb	r3, r3
 800366e:	f1c3 0304 	rsb	r3, r3, #4
 8003672:	b2da      	uxtb	r2, r3
 8003674:	4b58      	ldr	r3, [pc, #352]	; (80037d8 <HW_TS_Init+0x1a8>)
 8003676:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8003678:	4b56      	ldr	r3, [pc, #344]	; (80037d4 <HW_TS_Init+0x1a4>)
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003680:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8003684:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	fa92 f2a2 	rbit	r2, r2
 800368c:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	2a00      	cmp	r2, #0
 8003696:	d101      	bne.n	800369c <HW_TS_Init+0x6c>
  {
    return 32U;
 8003698:	2220      	movs	r2, #32
 800369a:	e003      	b.n	80036a4 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	fab2 f282 	clz	r2, r2
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	40d3      	lsrs	r3, r2
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	3301      	adds	r3, #1
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	4b4b      	ldr	r3, [pc, #300]	; (80037dc <HW_TS_Init+0x1ac>)
 80036ae:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80036b0:	4b48      	ldr	r3, [pc, #288]	; (80037d4 <HW_TS_Init+0x1a4>)
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3301      	adds	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	4b47      	ldr	r3, [pc, #284]	; (80037e0 <HW_TS_Init+0x1b0>)
 80036c2:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80036c4:	4b46      	ldr	r3, [pc, #280]	; (80037e0 <HW_TS_Init+0x1b0>)
 80036c6:	881b      	ldrh	r3, [r3, #0]
 80036c8:	3b01      	subs	r3, #1
 80036ca:	4a44      	ldr	r2, [pc, #272]	; (80037dc <HW_TS_Init+0x1ac>)
 80036cc:	7812      	ldrb	r2, [r2, #0]
 80036ce:	fb02 f303 	mul.w	r3, r2, r3
 80036d2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80036d6:	4a40      	ldr	r2, [pc, #256]	; (80037d8 <HW_TS_Init+0x1a8>)
 80036d8:	7812      	ldrb	r2, [r2, #0]
 80036da:	40d3      	lsrs	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d904      	bls.n	80036f2 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80036e8:	4b3e      	ldr	r3, [pc, #248]	; (80037e4 <HW_TS_Init+0x1b4>)
 80036ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036ee:	801a      	strh	r2, [r3, #0]
 80036f0:	e003      	b.n	80036fa <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	4b3b      	ldr	r3, [pc, #236]	; (80037e4 <HW_TS_Init+0x1b4>)
 80036f8:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80036fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80036fe:	f7ff fb85 	bl	8002e0c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003702:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003706:	f7ff fb6d 	bl	8002de4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d143      	bne.n	8003798 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003710:	4b35      	ldr	r3, [pc, #212]	; (80037e8 <HW_TS_Init+0x1b8>)
 8003712:	2201      	movs	r2, #1
 8003714:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003716:	4b35      	ldr	r3, [pc, #212]	; (80037ec <HW_TS_Init+0x1bc>)
 8003718:	f04f 32ff 	mov.w	r2, #4294967295
 800371c:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800371e:	2300      	movs	r3, #0
 8003720:	77fb      	strb	r3, [r7, #31]
 8003722:	e00c      	b.n	800373e <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8003724:	7ffa      	ldrb	r2, [r7, #31]
 8003726:	4932      	ldr	r1, [pc, #200]	; (80037f0 <HW_TS_Init+0x1c0>)
 8003728:	4613      	mov	r3, r2
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	4413      	add	r3, r2
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	440b      	add	r3, r1
 8003732:	330c      	adds	r3, #12
 8003734:	2200      	movs	r2, #0
 8003736:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003738:	7ffb      	ldrb	r3, [r7, #31]
 800373a:	3301      	adds	r3, #1
 800373c:	77fb      	strb	r3, [r7, #31]
 800373e:	7ffb      	ldrb	r3, [r7, #31]
 8003740:	2b05      	cmp	r3, #5
 8003742:	d9ef      	bls.n	8003724 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8003744:	4b2b      	ldr	r3, [pc, #172]	; (80037f4 <HW_TS_Init+0x1c4>)
 8003746:	2206      	movs	r2, #6
 8003748:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800374a:	4b21      	ldr	r3, [pc, #132]	; (80037d0 <HW_TS_Init+0x1a0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	4b1f      	ldr	r3, [pc, #124]	; (80037d0 <HW_TS_Init+0x1a0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800375c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800375e:	4b1c      	ldr	r3, [pc, #112]	; (80037d0 <HW_TS_Init+0x1a0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	b2da      	uxtb	r2, r3
 8003768:	4b19      	ldr	r3, [pc, #100]	; (80037d0 <HW_TS_Init+0x1a0>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003772:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8003774:	4b20      	ldr	r3, [pc, #128]	; (80037f8 <HW_TS_Init+0x1c8>)
 8003776:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800377a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800377c:	2003      	movs	r0, #3
 800377e:	f002 fd57 	bl	8006230 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8003782:	4b13      	ldr	r3, [pc, #76]	; (80037d0 <HW_TS_Init+0x1a0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	4b11      	ldr	r3, [pc, #68]	; (80037d0 <HW_TS_Init+0x1a0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003794:	609a      	str	r2, [r3, #8]
 8003796:	e00a      	b.n	80037ae <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8003798:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <HW_TS_Init+0x1a0>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d002      	beq.n	80037ae <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80037a8:	2003      	movs	r0, #3
 80037aa:	f002 fd33 	bl	8006214 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80037ae:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <HW_TS_Init+0x1a0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	22ff      	movs	r2, #255	; 0xff
 80037b6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80037b8:	2200      	movs	r2, #0
 80037ba:	2106      	movs	r1, #6
 80037bc:	2003      	movs	r0, #3
 80037be:	f002 fcf3 	bl	80061a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80037c2:	2003      	movs	r0, #3
 80037c4:	f002 fd0a 	bl	80061dc <HAL_NVIC_EnableIRQ>

  return;
 80037c8:	bf00      	nop
}
 80037ca:	3720      	adds	r7, #32
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	200003a8 	.word	0x200003a8
 80037d4:	40002800 	.word	0x40002800
 80037d8:	200003ac 	.word	0x200003ac
 80037dc:	200003ad 	.word	0x200003ad
 80037e0:	200003ae 	.word	0x200003ae
 80037e4:	200003b0 	.word	0x200003b0
 80037e8:	20000328 	.word	0x20000328
 80037ec:	20000324 	.word	0x20000324
 80037f0:	20000290 	.word	0x20000290
 80037f4:	20000320 	.word	0x20000320
 80037f8:	58000800 	.word	0x58000800

080037fc <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b08b      	sub	sp, #44	; 0x2c
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	4613      	mov	r3, r2
 800380a:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 800380c:	2300      	movs	r3, #0
 800380e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003812:	f3ef 8310 	mrs	r3, PRIMASK
 8003816:	61fb      	str	r3, [r7, #28]
  return(result);
 8003818:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800381a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800381c:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800381e:	e004      	b.n	800382a <HW_TS_Create+0x2e>
  {
    loop++;
 8003820:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003824:	3301      	adds	r3, #1
 8003826:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800382a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800382e:	2b05      	cmp	r3, #5
 8003830:	d80c      	bhi.n	800384c <HW_TS_Create+0x50>
 8003832:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003836:	492b      	ldr	r1, [pc, #172]	; (80038e4 <HW_TS_Create+0xe8>)
 8003838:	4613      	mov	r3, r2
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	4413      	add	r3, r2
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	440b      	add	r3, r1
 8003842:	330c      	adds	r3, #12
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1e9      	bne.n	8003820 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800384c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003850:	2b06      	cmp	r3, #6
 8003852:	d037      	beq.n	80038c4 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8003854:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003858:	4922      	ldr	r1, [pc, #136]	; (80038e4 <HW_TS_Create+0xe8>)
 800385a:	4613      	mov	r3, r2
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	4413      	add	r3, r2
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	440b      	add	r3, r1
 8003864:	330c      	adds	r3, #12
 8003866:	2201      	movs	r2, #1
 8003868:	701a      	strb	r2, [r3, #0]
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8003874:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003878:	491a      	ldr	r1, [pc, #104]	; (80038e4 <HW_TS_Create+0xe8>)
 800387a:	4613      	mov	r3, r2
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	4413      	add	r3, r2
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	440b      	add	r3, r1
 8003884:	3310      	adds	r3, #16
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800388a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800388e:	4915      	ldr	r1, [pc, #84]	; (80038e4 <HW_TS_Create+0xe8>)
 8003890:	4613      	mov	r3, r2
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	4413      	add	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	440b      	add	r3, r1
 800389a:	330d      	adds	r3, #13
 800389c:	79fa      	ldrb	r2, [r7, #7]
 800389e:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80038a0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80038a4:	490f      	ldr	r1, [pc, #60]	; (80038e4 <HW_TS_Create+0xe8>)
 80038a6:	4613      	mov	r3, r2
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	4413      	add	r3, r2
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	440b      	add	r3, r1
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80038ba:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80038bc:	2300      	movs	r3, #0
 80038be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80038c2:	e007      	b.n	80038d4 <HW_TS_Create+0xd8>
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80038ce:	2301      	movs	r3, #1
 80038d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80038d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80038d8:	4618      	mov	r0, r3
 80038da:	372c      	adds	r7, #44	; 0x2c
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	20000290 	.word	0x20000290

080038e8 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038f2:	f3ef 8310 	mrs	r3, PRIMASK
 80038f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80038f8:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80038fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80038fc:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80038fe:	2003      	movs	r0, #3
 8003900:	f002 fc7a 	bl	80061f8 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003904:	4b37      	ldr	r3, [pc, #220]	; (80039e4 <HW_TS_Stop+0xfc>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	22ca      	movs	r2, #202	; 0xca
 800390c:	625a      	str	r2, [r3, #36]	; 0x24
 800390e:	4b35      	ldr	r3, [pc, #212]	; (80039e4 <HW_TS_Stop+0xfc>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2253      	movs	r2, #83	; 0x53
 8003916:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003918:	79fa      	ldrb	r2, [r7, #7]
 800391a:	4933      	ldr	r1, [pc, #204]	; (80039e8 <HW_TS_Stop+0x100>)
 800391c:	4613      	mov	r3, r2
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	4413      	add	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	440b      	add	r3, r1
 8003926:	330c      	adds	r3, #12
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d148      	bne.n	80039c2 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8003930:	79fb      	ldrb	r3, [r7, #7]
 8003932:	2100      	movs	r1, #0
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff fbeb 	bl	8003110 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800393a:	4b2c      	ldr	r3, [pc, #176]	; (80039ec <HW_TS_Stop+0x104>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003940:	7cfb      	ldrb	r3, [r7, #19]
 8003942:	2b06      	cmp	r3, #6
 8003944:	d135      	bne.n	80039b2 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003946:	4b2a      	ldr	r3, [pc, #168]	; (80039f0 <HW_TS_Stop+0x108>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800394e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003952:	d108      	bne.n	8003966 <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8003954:	bf00      	nop
 8003956:	4b23      	ldr	r3, [pc, #140]	; (80039e4 <HW_TS_Stop+0xfc>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f7      	bne.n	8003956 <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8003966:	4b1f      	ldr	r3, [pc, #124]	; (80039e4 <HW_TS_Stop+0xfc>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	4b1d      	ldr	r3, [pc, #116]	; (80039e4 <HW_TS_Stop+0xfc>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003978:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800397a:	bf00      	nop
 800397c:	4b19      	ldr	r3, [pc, #100]	; (80039e4 <HW_TS_Stop+0xfc>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0f7      	beq.n	800397c <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800398c:	4b15      	ldr	r3, [pc, #84]	; (80039e4 <HW_TS_Stop+0xfc>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	b2da      	uxtb	r2, r3
 8003996:	4b13      	ldr	r3, [pc, #76]	; (80039e4 <HW_TS_Stop+0xfc>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80039a0:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80039a2:	4b14      	ldr	r3, [pc, #80]	; (80039f4 <HW_TS_Stop+0x10c>)
 80039a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80039a8:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80039aa:	2003      	movs	r0, #3
 80039ac:	f002 fc40 	bl	8006230 <HAL_NVIC_ClearPendingIRQ>
 80039b0:	e007      	b.n	80039c2 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80039b2:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <HW_TS_Stop+0x110>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	7cfa      	ldrb	r2, [r7, #19]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d001      	beq.n	80039c2 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 80039be:	f7ff fcc9 	bl	8003354 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80039c2:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <HW_TS_Stop+0xfc>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	22ff      	movs	r2, #255	; 0xff
 80039ca:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80039cc:	2003      	movs	r0, #3
 80039ce:	f002 fc05 	bl	80061dc <HAL_NVIC_EnableIRQ>
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80039dc:	bf00      	nop
}
 80039de:	3718      	adds	r7, #24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	200003a8 	.word	0x200003a8
 80039e8:	20000290 	.word	0x20000290
 80039ec:	20000320 	.word	0x20000320
 80039f0:	40002800 	.word	0x40002800
 80039f4:	58000800 	.word	0x58000800
 80039f8:	20000321 	.word	0x20000321

080039fc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	6039      	str	r1, [r7, #0]
 8003a06:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003a08:	79fa      	ldrb	r2, [r7, #7]
 8003a0a:	493b      	ldr	r1, [pc, #236]	; (8003af8 <HW_TS_Start+0xfc>)
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	4413      	add	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	440b      	add	r3, r1
 8003a16:	330c      	adds	r3, #12
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d103      	bne.n	8003a28 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8003a20:	79fb      	ldrb	r3, [r7, #7]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7ff ff60 	bl	80038e8 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a28:	f3ef 8310 	mrs	r3, PRIMASK
 8003a2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003a30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a32:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003a34:	2003      	movs	r0, #3
 8003a36:	f002 fbdf 	bl	80061f8 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003a3a:	4b30      	ldr	r3, [pc, #192]	; (8003afc <HW_TS_Start+0x100>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	22ca      	movs	r2, #202	; 0xca
 8003a42:	625a      	str	r2, [r3, #36]	; 0x24
 8003a44:	4b2d      	ldr	r3, [pc, #180]	; (8003afc <HW_TS_Start+0x100>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2253      	movs	r2, #83	; 0x53
 8003a4c:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8003a4e:	79fa      	ldrb	r2, [r7, #7]
 8003a50:	4929      	ldr	r1, [pc, #164]	; (8003af8 <HW_TS_Start+0xfc>)
 8003a52:	4613      	mov	r3, r2
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	4413      	add	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	440b      	add	r3, r1
 8003a5c:	330c      	adds	r3, #12
 8003a5e:	2202      	movs	r2, #2
 8003a60:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8003a62:	79fa      	ldrb	r2, [r7, #7]
 8003a64:	4924      	ldr	r1, [pc, #144]	; (8003af8 <HW_TS_Start+0xfc>)
 8003a66:	4613      	mov	r3, r2
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	4413      	add	r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	440b      	add	r3, r1
 8003a70:	3308      	adds	r3, #8
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8003a76:	79fa      	ldrb	r2, [r7, #7]
 8003a78:	491f      	ldr	r1, [pc, #124]	; (8003af8 <HW_TS_Start+0xfc>)
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	4413      	add	r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	440b      	add	r3, r1
 8003a84:	3304      	adds	r3, #4
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8003a8a:	79fb      	ldrb	r3, [r7, #7]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff fa95 	bl	8002fbc <linkTimer>
 8003a92:	4603      	mov	r3, r0
 8003a94:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8003a96:	4b1a      	ldr	r3, [pc, #104]	; (8003b00 <HW_TS_Start+0x104>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003a9c:	4b19      	ldr	r3, [pc, #100]	; (8003b04 <HW_TS_Start+0x108>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	7c7a      	ldrb	r2, [r7, #17]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d002      	beq.n	8003aae <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8003aa8:	f7ff fc54 	bl	8003354 <RescheduleTimerList>
 8003aac:	e013      	b.n	8003ad6 <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8003aae:	79fa      	ldrb	r2, [r7, #7]
 8003ab0:	4911      	ldr	r1, [pc, #68]	; (8003af8 <HW_TS_Start+0xfc>)
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	4413      	add	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	440b      	add	r3, r1
 8003abc:	3308      	adds	r3, #8
 8003abe:	6819      	ldr	r1, [r3, #0]
 8003ac0:	8a7b      	ldrh	r3, [r7, #18]
 8003ac2:	79fa      	ldrb	r2, [r7, #7]
 8003ac4:	1ac9      	subs	r1, r1, r3
 8003ac6:	480c      	ldr	r0, [pc, #48]	; (8003af8 <HW_TS_Start+0xfc>)
 8003ac8:	4613      	mov	r3, r2
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	4413      	add	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4403      	add	r3, r0
 8003ad2:	3308      	adds	r3, #8
 8003ad4:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003ad6:	4b09      	ldr	r3, [pc, #36]	; (8003afc <HW_TS_Start+0x100>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	22ff      	movs	r2, #255	; 0xff
 8003ade:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003ae0:	2003      	movs	r0, #3
 8003ae2:	f002 fb7b 	bl	80061dc <HAL_NVIC_EnableIRQ>
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003af0:	bf00      	nop
}
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	20000290 	.word	0x20000290
 8003afc:	200003a8 	.word	0x200003a8
 8003b00:	20000320 	.word	0x20000320
 8003b04:	20000321 	.word	0x20000321

08003b08 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	460b      	mov	r3, r1
 8003b12:	607a      	str	r2, [r7, #4]
 8003b14:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4798      	blx	r3

  return;
 8003b1a:	bf00      	nop
}
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	607b      	str	r3, [r7, #4]
 8003b2e:	4603      	mov	r3, r0
 8003b30:	73fb      	strb	r3, [r7, #15]
 8003b32:	4613      	mov	r3, r2
 8003b34:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8003b36:	2300      	movs	r3, #0
 8003b38:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d000      	beq.n	8003b46 <HW_UART_Transmit_DMA+0x22>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8003b44:	e00e      	b.n	8003b64 <HW_UART_Transmit_DMA+0x40>
            HW_huart1TxCb = cb;
 8003b46:	4a17      	ldr	r2, [pc, #92]	; (8003ba4 <HW_UART_Transmit_DMA+0x80>)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8003b4c:	4b16      	ldr	r3, [pc, #88]	; (8003ba8 <HW_UART_Transmit_DMA+0x84>)
 8003b4e:	4a17      	ldr	r2, [pc, #92]	; (8003bac <HW_UART_Transmit_DMA+0x88>)
 8003b50:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003b52:	89bb      	ldrh	r3, [r7, #12]
 8003b54:	461a      	mov	r2, r3
 8003b56:	68b9      	ldr	r1, [r7, #8]
 8003b58:	4813      	ldr	r0, [pc, #76]	; (8003ba8 <HW_UART_Transmit_DMA+0x84>)
 8003b5a:	f007 fe77 	bl	800b84c <HAL_UART_Transmit_DMA>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	75fb      	strb	r3, [r7, #23]
            break;
 8003b62:	bf00      	nop
    }

    switch (hal_status)
 8003b64:	7dfb      	ldrb	r3, [r7, #23]
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	d816      	bhi.n	8003b98 <HW_UART_Transmit_DMA+0x74>
 8003b6a:	a201      	add	r2, pc, #4	; (adr r2, 8003b70 <HW_UART_Transmit_DMA+0x4c>)
 8003b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b70:	08003b81 	.word	0x08003b81
 8003b74:	08003b87 	.word	0x08003b87
 8003b78:	08003b8d 	.word	0x08003b8d
 8003b7c:	08003b93 	.word	0x08003b93
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8003b80:	2300      	movs	r3, #0
 8003b82:	75bb      	strb	r3, [r7, #22]
            break;
 8003b84:	e009      	b.n	8003b9a <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8003b86:	2301      	movs	r3, #1
 8003b88:	75bb      	strb	r3, [r7, #22]
            break;
 8003b8a:	e006      	b.n	8003b9a <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	75bb      	strb	r3, [r7, #22]
            break;
 8003b90:	e003      	b.n	8003b9a <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8003b92:	2303      	movs	r3, #3
 8003b94:	75bb      	strb	r3, [r7, #22]
            break;
 8003b96:	e000      	b.n	8003b9a <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8003b98:	bf00      	nop
    }

    return hw_status;
 8003b9a:	7dbb      	ldrb	r3, [r7, #22]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	200048a8 	.word	0x200048a8
 8003ba8:	200049f8 	.word	0x200049f8
 8003bac:	40013800 	.word	0x40013800

08003bb0 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4b08      	ldr	r3, [pc, #32]	; (8003be0 <HAL_UART_TxCpltCallback+0x30>)
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d000      	beq.n	8003bc6 <HAL_UART_TxCpltCallback+0x16>
            }
            break;
#endif

        default:
            break;
 8003bc4:	e007      	b.n	8003bd6 <HAL_UART_TxCpltCallback+0x26>
            if(HW_huart1TxCb)
 8003bc6:	4b07      	ldr	r3, [pc, #28]	; (8003be4 <HAL_UART_TxCpltCallback+0x34>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <HAL_UART_TxCpltCallback+0x24>
                HW_huart1TxCb();
 8003bce:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <HAL_UART_TxCpltCallback+0x34>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4798      	blx	r3
            break;
 8003bd4:	bf00      	nop
    }

    return;
 8003bd6:	bf00      	nop
}
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40013800 	.word	0x40013800
 8003be4:	200048a8 	.word	0x200048a8

08003be8 <_angle_correction>:





int _angle_correction(int measured_angle){
 8003be8:	b480      	push	{r7}
 8003bea:	b089      	sub	sp, #36	; 0x24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  //given a measured angle, get back a warped angle interpolated from measured corrections
  int i=0;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61fb      	str	r3, [r7, #28]
  while(measured_angle > MAP_ANGLE_MEASURED[i+1]) i++;
 8003bf4:	e002      	b.n	8003bfc <_angle_correction+0x14>
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	61fb      	str	r3, [r7, #28]
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	4a1f      	ldr	r2, [pc, #124]	; (8003c80 <_angle_correction+0x98>)
 8003c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	dcf4      	bgt.n	8003bf6 <_angle_correction+0xe>

  int low_m = MAP_ANGLE_MEASURED[i];
 8003c0c:	4a1c      	ldr	r2, [pc, #112]	; (8003c80 <_angle_correction+0x98>)
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c14:	61bb      	str	r3, [r7, #24]
  int high_m = MAP_ANGLE_MEASURED[i+1];
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	4a19      	ldr	r2, [pc, #100]	; (8003c80 <_angle_correction+0x98>)
 8003c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c20:	617b      	str	r3, [r7, #20]
  int low_r = MAP_ANGLE_REAL[i];
 8003c22:	4a18      	ldr	r2, [pc, #96]	; (8003c84 <_angle_correction+0x9c>)
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c2a:	613b      	str	r3, [r7, #16]
  int high_r = MAP_ANGLE_REAL[i+1];
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	4a14      	ldr	r2, [pc, #80]	; (8003c84 <_angle_correction+0x9c>)
 8003c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c36:	60fb      	str	r3, [r7, #12]

  int scaled = (int)((high_r-low_r)*(measured_angle-low_m)/(float)(high_m-low_m));
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	1a8a      	subs	r2, r1, r2
 8003c44:	fb02 f303 	mul.w	r3, r2, r3
 8003c48:	ee07 3a90 	vmov	s15, r3
 8003c4c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	ee07 3a90 	vmov	s15, r3
 8003c5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c66:	ee17 3a90 	vmov	r3, s15
 8003c6a:	60bb      	str	r3, [r7, #8]
  return (low_r + scaled);
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	4413      	add	r3, r2
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3724      	adds	r7, #36	; 0x24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	080177f0 	.word	0x080177f0
 8003c84:	080177cc 	.word	0x080177cc

08003c88 <_get_pad_angle>:


int _get_pad_angle(int p1, int p2){
 8003c88:	b590      	push	{r4, r7, lr}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
    //return angle from 0 to 120 degrees between two pads given their two values
    if (p1 == 0) return 120;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <_get_pad_angle+0x14>
 8003c98:	2378      	movs	r3, #120	; 0x78
 8003c9a:	e02c      	b.n	8003cf6 <_get_pad_angle+0x6e>
    if (p2 == 0) return 0;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <_get_pad_angle+0x1e>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	e027      	b.n	8003cf6 <_get_pad_angle+0x6e>
    return round(((float)(p2)/(float)(p1+p2))*120.0);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	ee07 3a90 	vmov	s15, r3
 8003cac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	ee07 3a90 	vmov	s15, r3
 8003cba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cbe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003cc2:	ee16 0a90 	vmov	r0, s13
 8003cc6:	f7fc fc17 	bl	80004f8 <__aeabi_f2d>
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	4b0c      	ldr	r3, [pc, #48]	; (8003d00 <_get_pad_angle+0x78>)
 8003cd0:	f7fc fc6a 	bl	80005a8 <__aeabi_dmul>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	460c      	mov	r4, r1
 8003cd8:	ec44 3b17 	vmov	d7, r3, r4
 8003cdc:	eeb0 0a47 	vmov.f32	s0, s14
 8003ce0:	eef0 0a67 	vmov.f32	s1, s15
 8003ce4:	f012 f916 	bl	8015f14 <round>
 8003ce8:	ec54 3b10 	vmov	r3, r4, d0
 8003cec:	4618      	mov	r0, r3
 8003cee:	4621      	mov	r1, r4
 8003cf0:	f7fc ff0a 	bl	8000b08 <__aeabi_d2iz>
 8003cf4:	4603      	mov	r3, r0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd90      	pop	{r4, r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	405e0000 	.word	0x405e0000

08003d04 <_get_angle>:


int _get_angle(int* c) {
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08a      	sub	sp, #40	; 0x28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  //c[0] is proximity
  //60 min on clock, so 6 deg resolution
  //3 pads.  take top 2 values, map linearly to 120 degree slice.
  int angle = ANGLE_OFFSET;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	627b      	str	r3, [r7, #36]	; 0x24
  int warped_angle;

  if (c[1] > c[3] && c[2] > c[3]) { //first third, between 1 and 2
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3304      	adds	r3, #4
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	330c      	adds	r3, #12
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	dd20      	ble.n	8003d62 <_get_angle+0x5e>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3308      	adds	r3, #8
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	330c      	adds	r3, #12
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	dd18      	ble.n	8003d62 <_get_angle+0x5e>
    int pos1 = c[1]-c[3];
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3304      	adds	r3, #4
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	330c      	adds	r3, #12
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	623b      	str	r3, [r7, #32]
    int pos2 = c[2]-c[3];
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3308      	adds	r3, #8
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	330c      	adds	r3, #12
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	61fb      	str	r3, [r7, #28]
    angle += _get_pad_angle(pos1, pos2);
 8003d50:	69f9      	ldr	r1, [r7, #28]
 8003d52:	6a38      	ldr	r0, [r7, #32]
 8003d54:	f7ff ff98 	bl	8003c88 <_get_pad_angle>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	4413      	add	r3, r2
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (c[1] > c[3] && c[2] > c[3]) { //first third, between 1 and 2
 8003d60:	e042      	b.n	8003de8 <_get_angle+0xe4>
  }

  else if (c[2] > c[1] && c[3] > c[1]) { //second third, between 2 and 3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3308      	adds	r3, #8
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	dd21      	ble.n	8003db6 <_get_angle+0xb2>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	330c      	adds	r3, #12
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	dd19      	ble.n	8003db6 <_get_angle+0xb2>
    int pos1 = c[2]-c[1];
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	3308      	adds	r3, #8
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	61bb      	str	r3, [r7, #24]
    int pos2 = c[3]-c[1];
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	330c      	adds	r3, #12
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	617b      	str	r3, [r7, #20]
    angle += _get_pad_angle(pos1, pos2) + 120;
 8003da2:	6979      	ldr	r1, [r7, #20]
 8003da4:	69b8      	ldr	r0, [r7, #24]
 8003da6:	f7ff ff6f 	bl	8003c88 <_get_pad_angle>
 8003daa:	4603      	mov	r3, r0
 8003dac:	3378      	adds	r3, #120	; 0x78
 8003dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db0:	4413      	add	r3, r2
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
  else if (c[2] > c[1] && c[3] > c[1]) { //second third, between 2 and 3
 8003db4:	e018      	b.n	8003de8 <_get_angle+0xe4>
  }

  else { //third third, between 3 and 1
    int pos1 = c[3]-c[2];
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	330c      	adds	r3, #12
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3308      	adds	r3, #8
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	613b      	str	r3, [r7, #16]
    int pos2 = c[1]-c[2];
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3308      	adds	r3, #8
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	60fb      	str	r3, [r7, #12]
    angle += _get_pad_angle(pos1, pos2) + 240;
 8003dd6:	68f9      	ldr	r1, [r7, #12]
 8003dd8:	6938      	ldr	r0, [r7, #16]
 8003dda:	f7ff ff55 	bl	8003c88 <_get_pad_angle>
 8003dde:	4603      	mov	r3, r0
 8003de0:	33f0      	adds	r3, #240	; 0xf0
 8003de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de4:	4413      	add	r3, r2
 8003de6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  angle %= 360;
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	4a0b      	ldr	r2, [pc, #44]	; (8003e18 <_get_angle+0x114>)
 8003dec:	fb82 1203 	smull	r1, r2, r2, r3
 8003df0:	441a      	add	r2, r3
 8003df2:	1211      	asrs	r1, r2, #8
 8003df4:	17da      	asrs	r2, r3, #31
 8003df6:	1a8a      	subs	r2, r1, r2
 8003df8:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003dfc:	fb01 f202 	mul.w	r2, r1, r2
 8003e00:	1a9b      	subs	r3, r3, r2
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
  warped_angle = _angle_correction(angle);
 8003e04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e06:	f7ff feef 	bl	8003be8 <_angle_correction>
 8003e0a:	60b8      	str	r0, [r7, #8]

  return warped_angle;
 8003e0c:	68bb      	ldr	r3, [r7, #8]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3728      	adds	r7, #40	; 0x28
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	b60b60b7 	.word	0xb60b60b7

08003e1c <_get_min>:


int _get_min(int* c) {
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
	int angle = _get_angle(c);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7ff ff6d 	bl	8003d04 <_get_angle>
 8003e2a:	60f8      	str	r0, [r7, #12]
	return angle/6;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4a04      	ldr	r2, [pc, #16]	; (8003e40 <_get_min+0x24>)
 8003e30:	fb82 1203 	smull	r1, r2, r2, r3
 8003e34:	17db      	asrs	r3, r3, #31
 8003e36:	1ad3      	subs	r3, r2, r3
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	2aaaaaab 	.word	0x2aaaaaab

08003e44 <_get_min_if_pressed>:


int _get_min_if_pressed(int* c){
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
	//return -1 if not pressed, otherwise return a logical minute value
	if (c[0] <= IQS_TOUCH_THRESH) return -1;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b0a      	cmp	r3, #10
 8003e52:	dc02      	bgt.n	8003e5a <_get_min_if_pressed+0x16>
 8003e54:	f04f 33ff 	mov.w	r3, #4294967295
 8003e58:	e003      	b.n	8003e62 <_get_min_if_pressed+0x1e>
	else return _get_min(c);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff ffde 	bl	8003e1c <_get_min>
 8003e60:	4603      	mov	r3, r0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <iqs263_poll_raw>:


void iqs263_poll_raw(int* coords){
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b086      	sub	sp, #24
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]

  //uint16_t coords[4];

  uint8_t coords_raw[8];

  iqs263_read(0x06, coords_raw, 8);
 8003e72:	f107 030c 	add.w	r3, r7, #12
 8003e76:	2208      	movs	r2, #8
 8003e78:	4619      	mov	r1, r3
 8003e7a:	2006      	movs	r0, #6
 8003e7c:	f000 f888 	bl	8003f90 <iqs263_read>

  for (int i=0; i<4; i++){
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]
 8003e84:	e019      	b.n	8003eba <iqs263_poll_raw+0x50>
	  coords[i] = (coords_raw[2*i+1] << 8) | (coords_raw[2*i] & 0xFF);
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	f107 0218 	add.w	r2, r7, #24
 8003e90:	4413      	add	r3, r2
 8003e92:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003e96:	021a      	lsls	r2, r3, #8
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	f107 0118 	add.w	r1, r7, #24
 8003ea0:	440b      	add	r3, r1
 8003ea2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	440b      	add	r3, r1
 8003eb0:	4302      	orrs	r2, r0
 8003eb2:	601a      	str	r2, [r3, #0]
  for (int i=0; i<4; i++){
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	617b      	str	r3, [r7, #20]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	dde2      	ble.n	8003e86 <iqs263_poll_raw+0x1c>
  }
  //c[0] is proximity

}
 8003ec0:	bf00      	nop
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <setup_iqs263>:


HAL_StatusTypeDef setup_iqs263() {
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af04      	add	r7, sp, #16

	uint8_t c;
	HAL_StatusTypeDef resp = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	71fb      	strb	r3, [r7, #7]
	uint8_t out_data[5] = {0x00, 0x00, 0x00, 0x00, 0x00};
 8003ed2:	463b      	mov	r3, r7
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	711a      	strb	r2, [r3, #4]

	//check product num
	while (resp == HAL_ERROR){
 8003eda:	e00e      	b.n	8003efa <setup_iqs263+0x32>
		resp = HAL_I2C_Mem_Read(&IQS_I2C_PORT, IQS_ADDR, 0x00, sizeof(uint8_t), &c, sizeof(uint8_t), HAL_MAX_DELAY);
 8003edc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee0:	9302      	str	r3, [sp, #8]
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	9301      	str	r3, [sp, #4]
 8003ee6:	1dbb      	adds	r3, r7, #6
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	2301      	movs	r3, #1
 8003eec:	2200      	movs	r2, #0
 8003eee:	2188      	movs	r1, #136	; 0x88
 8003ef0:	4826      	ldr	r0, [pc, #152]	; (8003f8c <setup_iqs263+0xc4>)
 8003ef2:	f003 f933 	bl	800715c <HAL_I2C_Mem_Read>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003efa:	79fb      	ldrb	r3, [r7, #7]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d0ed      	beq.n	8003edc <setup_iqs263+0x14>
	}

	if (c != 0x3C) {
 8003f00:	79bb      	ldrb	r3, [r7, #6]
 8003f02:	2b3c      	cmp	r3, #60	; 0x3c
 8003f04:	d001      	beq.n	8003f0a <setup_iqs263+0x42>
	  //ERROR - should read product code 0x3C
	  return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e03c      	b.n	8003f84 <setup_iqs263+0xbc>
	}

	HAL_Delay(100);
 8003f0a:	2064      	movs	r0, #100	; 0x64
 8003f0c:	f001 fb09 	bl	8005522 <HAL_Delay>


	//now write and read 0x0E to address 0x0D
	out_data[0] = 0x0E;
 8003f10:	230e      	movs	r3, #14
 8003f12:	703b      	strb	r3, [r7, #0]

	resp = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003f18:	e00e      	b.n	8003f38 <setup_iqs263+0x70>
		  resp = HAL_I2C_Mem_Write(&IQS_I2C_PORT, IQS_ADDR, 0x0D, 1, out_data, 1, HAL_MAX_DELAY);
 8003f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f1e:	9302      	str	r3, [sp, #8]
 8003f20:	2301      	movs	r3, #1
 8003f22:	9301      	str	r3, [sp, #4]
 8003f24:	463b      	mov	r3, r7
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	2301      	movs	r3, #1
 8003f2a:	220d      	movs	r2, #13
 8003f2c:	2188      	movs	r1, #136	; 0x88
 8003f2e:	4817      	ldr	r0, [pc, #92]	; (8003f8c <setup_iqs263+0xc4>)
 8003f30:	f003 f800 	bl	8006f34 <HAL_I2C_Mem_Write>
 8003f34:	4603      	mov	r3, r0
 8003f36:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003f38:	79fb      	ldrb	r3, [r7, #7]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d0ed      	beq.n	8003f1a <setup_iqs263+0x52>
	}
	HAL_Delay(100);
 8003f3e:	2064      	movs	r0, #100	; 0x64
 8003f40:	f001 faef 	bl	8005522 <HAL_Delay>
	}

	HAL_Delay(50);
	*/

	out_data[0]=0x00;
 8003f44:	2300      	movs	r3, #0
 8003f46:	703b      	strb	r3, [r7, #0]
	//time average filter coef in bits 5:4 (00 is slowest, 11 is fastest), counts filtering for noise in bits 1:0 (00 is no filter, 11 is slowest).
	out_data[1]=0b00001001;
 8003f48:	2309      	movs	r3, #9
 8003f4a:	707b      	strb	r3, [r7, #1]
	//lets go into Low Power mode if we have a prolonged state.	Wake on  movement on CH3
	out_data[2]=0x00;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	70bb      	strb	r3, [r7, #2]
	//out_data[2]=0b10001000;
	//lets disable turbo and only sample at fixed period 40Hz (given 2MHz clock)
	//out_data[3]=0x00;
	out_data[3]=0b00000110;
 8003f50:	2306      	movs	r3, #6
 8003f52:	70fb      	strb	r3, [r7, #3]
	out_data[4]=0x00;
 8003f54:	2300      	movs	r3, #0
 8003f56:	713b      	strb	r3, [r7, #4]

	resp = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003f5c:	e00e      	b.n	8003f7c <setup_iqs263+0xb4>
		  resp = HAL_I2C_Mem_Write(&IQS_I2C_PORT, IQS_ADDR, 0x09, 1, out_data, 5, HAL_MAX_DELAY);
 8003f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f62:	9302      	str	r3, [sp, #8]
 8003f64:	2305      	movs	r3, #5
 8003f66:	9301      	str	r3, [sp, #4]
 8003f68:	463b      	mov	r3, r7
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	2209      	movs	r2, #9
 8003f70:	2188      	movs	r1, #136	; 0x88
 8003f72:	4806      	ldr	r0, [pc, #24]	; (8003f8c <setup_iqs263+0xc4>)
 8003f74:	f002 ffde 	bl	8006f34 <HAL_I2C_Mem_Write>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d0ed      	beq.n	8003f5e <setup_iqs263+0x96>
	while (resp == HAL_ERROR){
	    resp = HAL_I2C_Mem_Read(&IQS_I2C_PORT, IQS_ADDR, 0x09, 1, readback, 5, HAL_MAX_DELAY);
	}
	*/

    return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	200048b8 	.word	0x200048b8

08003f90 <iqs263_read>:

  return HAL_OK;

}

HAL_StatusTypeDef iqs263_read(uint8_t addr, uint8_t* buf, uint8_t size) {
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b088      	sub	sp, #32
 8003f94:	af04      	add	r7, sp, #16
 8003f96:	4603      	mov	r3, r0
 8003f98:	6039      	str	r1, [r7, #0]
 8003f9a:	71fb      	strb	r3, [r7, #7]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	71bb      	strb	r3, [r7, #6]


  const uint16_t max_tries = 300;
 8003fa0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003fa4:	817b      	strh	r3, [r7, #10]
  uint16_t current_tries = 0;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	81fb      	strh	r3, [r7, #14]

  HAL_StatusTypeDef resp = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	737b      	strb	r3, [r7, #13]

  while (resp == HAL_ERROR && current_tries < max_tries){
 8003fae:	e014      	b.n	8003fda <iqs263_read+0x4a>
    resp = HAL_I2C_Mem_Read(&IQS_I2C_PORT, IQS_ADDR, addr, 1, buf, size, HAL_MAX_DELAY);
 8003fb0:	79fb      	ldrb	r3, [r7, #7]
 8003fb2:	b299      	uxth	r1, r3
 8003fb4:	79bb      	ldrb	r3, [r7, #6]
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fbc:	9202      	str	r2, [sp, #8]
 8003fbe:	9301      	str	r3, [sp, #4]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	460a      	mov	r2, r1
 8003fc8:	2188      	movs	r1, #136	; 0x88
 8003fca:	480d      	ldr	r0, [pc, #52]	; (8004000 <iqs263_read+0x70>)
 8003fcc:	f003 f8c6 	bl	800715c <HAL_I2C_Mem_Read>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	737b      	strb	r3, [r7, #13]
    current_tries++;
 8003fd4:	89fb      	ldrh	r3, [r7, #14]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	81fb      	strh	r3, [r7, #14]
  while (resp == HAL_ERROR && current_tries < max_tries){
 8003fda:	7b7b      	ldrb	r3, [r7, #13]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d103      	bne.n	8003fe8 <iqs263_read+0x58>
 8003fe0:	89fa      	ldrh	r2, [r7, #14]
 8003fe2:	897b      	ldrh	r3, [r7, #10]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d3e3      	bcc.n	8003fb0 <iqs263_read+0x20>
  }

  if (current_tries >= max_tries) {
 8003fe8:	89fa      	ldrh	r2, [r7, #14]
 8003fea:	897b      	ldrh	r3, [r7, #10]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d301      	bcc.n	8003ff4 <iqs263_read+0x64>
	  return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <iqs263_read+0x66>
  }

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0

}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	200048b8 	.word	0x200048b8

08004004 <iqs263_get_min_if_pressed>:
	iqs263_poll_raw(coords);
	return _get_min(coords);
}


int iqs263_get_min_if_pressed(){
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
	int* coords[4] = {0x0000, 0x0000, 0x0000, 0x0000};
 800400a:	463b      	mov	r3, r7
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	605a      	str	r2, [r3, #4]
 8004012:	609a      	str	r2, [r3, #8]
 8004014:	60da      	str	r2, [r3, #12]
	iqs263_poll_raw(coords);
 8004016:	463b      	mov	r3, r7
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff ff26 	bl	8003e6a <iqs263_poll_raw>
	return _get_min_if_pressed(coords);
 800401e:	463b      	mov	r3, r7
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff ff0f 	bl	8003e44 <_get_min_if_pressed>
 8004026:	4603      	mov	r3, r0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <LL_EXTI_DisableIT_0_31>:
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004038:	4b07      	ldr	r3, [pc, #28]	; (8004058 <LL_EXTI_DisableIT_0_31+0x28>)
 800403a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	43db      	mvns	r3, r3
 8004042:	4905      	ldr	r1, [pc, #20]	; (8004058 <LL_EXTI_DisableIT_0_31+0x28>)
 8004044:	4013      	ands	r3, r2
 8004046:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	58000800 	.word	0x58000800

0800405c <LL_EXTI_DisableIT_32_63>:
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8004064:	4b07      	ldr	r3, [pc, #28]	; (8004084 <LL_EXTI_DisableIT_32_63+0x28>)
 8004066:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	43db      	mvns	r3, r3
 800406e:	4905      	ldr	r1, [pc, #20]	; (8004084 <LL_EXTI_DisableIT_32_63+0x28>)
 8004070:	4013      	ands	r3, r2
 8004072:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	58000800 	.word	0x58000800

08004088 <LL_RCC_HSE_SetCapacitorTuning>:
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8004090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004094:	4a0a      	ldr	r2, [pc, #40]	; (80040c0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8004096:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800409a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800409e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040a2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	021b      	lsls	r3, r3, #8
 80040aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	cafecafe 	.word	0xcafecafe

080040c4 <LL_RCC_LSE_SetDriveCapability>:
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80040cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d4:	f023 0218 	bic.w	r2, r3, #24
 80040d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80040f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004108:	bf00      	nop
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8004112:	b480      	push	{r7}
 8004114:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800411a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800412a:	bf00      	nop
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8004138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004140:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004144:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004148:	d101      	bne.n	800414e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800414a:	2301      	movs	r3, #1
 800414c:	e000      	b.n	8004150 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800415a:	b480      	push	{r7}
 800415c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800415e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800416e:	d101      	bne.n	8004174 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8004170:	2301      	movs	r3, #1
 8004172:	e000      	b.n	8004176 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <LL_AHB2_GRP1_EnableClock>:
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800418c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800418e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4313      	orrs	r3, r2
 8004196:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800419c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4013      	ands	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80041a4:	68fb      	ldr	r3, [r7, #12]
}
 80041a6:	bf00      	nop
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <LL_AHB3_GRP1_EnableClock>:
{
 80041b2:	b480      	push	{r7}
 80041b4:	b085      	sub	sp, #20
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80041ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80041ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4013      	ands	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80041d6:	68fb      	ldr	r3, [r7, #12]
}
 80041d8:	bf00      	nop
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	041b      	lsls	r3, r3, #16
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	605a      	str	r2, [r3, #4]
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <LL_C1_IPCC_DisableReceiveChannel>:
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	431a      	orrs	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	605a      	str	r2, [r3, #4]
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <LL_C2_IPCC_DisableTransmitChannel>:
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
 8004232:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	695a      	ldr	r2, [r3, #20]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	041b      	lsls	r3, r3, #16
 800423c:	431a      	orrs	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	615a      	str	r2, [r3, #20]
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <LL_C2_IPCC_DisableReceiveChannel>:
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	695a      	ldr	r2, [r3, #20]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	615a      	str	r2, [r3, #20]
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	609a      	str	r2, [r3, #8]
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <LL_C2_IPCC_ClearFlag_CHx>:
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	619a      	str	r2, [r3, #24]
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80042ac:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <LL_LPM_EnableSleep+0x1c>)
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	4a04      	ldr	r2, [pc, #16]	; (80042c4 <LL_LPM_EnableSleep+0x1c>)
 80042b2:	f023 0304 	bic.w	r3, r3, #4
 80042b6:	6113      	str	r3, [r2, #16]
}
 80042b8:	bf00      	nop
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	e000ed00 	.word	0xe000ed00

080042c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0

  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80042cc:	4b42      	ldr	r3, [pc, #264]	; (80043d8 <main+0x110>)
 80042ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80042d2:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80042d4:	f001 fdee 	bl	8005eb4 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 80042d8:	f001 f8d5 	bl	8005486 <Reset_Device>
  Config_HSE();
 80042dc:	f001 f8bf 	bl	800545e <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80042e0:	f000 f8c2 	bl	8004468 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 80042e4:	f001 f8b4 	bl	8005450 <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 80042e8:	f001 f90f 	bl	800550a <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80042ec:	f000 fb1e 	bl	800492c <MX_GPIO_Init>
  MX_I2C1_Init();
 80042f0:	f000 f988 	bl	8004604 <MX_I2C1_Init>
  MX_SPI1_Init();
 80042f4:	f000 fa2c 	bl	8004750 <MX_SPI1_Init>
  MX_RF_Init();
 80042f8:	f000 f9c4 	bl	8004684 <MX_RF_Init>
  MX_RTC_Init();
 80042fc:	f000 f9ca 	bl	8004694 <MX_RTC_Init>
  MX_TIM1_Init();
 8004300:	f000 fa64 	bl	80047cc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8004304:	f00a ff00 	bl	800f108 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
    /* creation of rtcMutex */
    rtcMutexHandle = osMutexNew(&rtcMutex_attributes);
 8004308:	4834      	ldr	r0, [pc, #208]	; (80043dc <main+0x114>)
 800430a:	f00b f931 	bl	800f570 <osMutexNew>
 800430e:	4602      	mov	r2, r0
 8004310:	4b33      	ldr	r3, [pc, #204]	; (80043e0 <main+0x118>)
 8004312:	601a      	str	r2, [r3, #0]

    /* creation of screenTextMutex */
    screenTextMutexHandle = osMutexNew(&screenTextMutex_attributes);
 8004314:	4833      	ldr	r0, [pc, #204]	; (80043e4 <main+0x11c>)
 8004316:	f00b f92b 	bl	800f570 <osMutexNew>
 800431a:	4602      	mov	r2, r0
 800431c:	4b32      	ldr	r3, [pc, #200]	; (80043e8 <main+0x120>)
 800431e:	601a      	str	r2, [r3, #0]

    /* creation of ledStateMutex */
    ledStateMutexHandle = osMutexNew(&ledStateMutex_attributes);
 8004320:	4832      	ldr	r0, [pc, #200]	; (80043ec <main+0x124>)
 8004322:	f00b f925 	bl	800f570 <osMutexNew>
 8004326:	4602      	mov	r2, r0
 8004328:	4b31      	ldr	r3, [pc, #196]	; (80043f0 <main+0x128>)
 800432a:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
      /* creation of bleTXqueue */
      bleTXqueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &bleTXqueue_attributes);
 800432c:	4a31      	ldr	r2, [pc, #196]	; (80043f4 <main+0x12c>)
 800432e:	2102      	movs	r1, #2
 8004330:	2010      	movs	r0, #16
 8004332:	f00b fbc1 	bl	800fab8 <osMessageQueueNew>
 8004336:	4602      	mov	r2, r0
 8004338:	4b2f      	ldr	r3, [pc, #188]	; (80043f8 <main+0x130>)
 800433a:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
        /* creation of screenUpdate */
        screenUpdateHandle = osThreadNew(startScreenUpdate, NULL, &screenUpdate_attributes);
 800433c:	4a2f      	ldr	r2, [pc, #188]	; (80043fc <main+0x134>)
 800433e:	2100      	movs	r1, #0
 8004340:	482f      	ldr	r0, [pc, #188]	; (8004400 <main+0x138>)
 8004342:	f00a ff4b 	bl	800f1dc <osThreadNew>
 8004346:	4602      	mov	r2, r0
 8004348:	4b2e      	ldr	r3, [pc, #184]	; (8004404 <main+0x13c>)
 800434a:	601a      	str	r2, [r3, #0]

        /* creation of LEDControl */
        LEDControlHandle = osThreadNew(startLEDControl, NULL, &LEDControl_attributes);
 800434c:	4a2e      	ldr	r2, [pc, #184]	; (8004408 <main+0x140>)
 800434e:	2100      	movs	r1, #0
 8004350:	482e      	ldr	r0, [pc, #184]	; (800440c <main+0x144>)
 8004352:	f00a ff43 	bl	800f1dc <osThreadNew>
 8004356:	4602      	mov	r2, r0
 8004358:	4b2d      	ldr	r3, [pc, #180]	; (8004410 <main+0x148>)
 800435a:	601a      	str	r2, [r3, #0]

        /* creation of buttonPress */
        buttonPressHandle = osThreadNew(startButtonPress, NULL, &buttonPress_attributes);
 800435c:	4a2d      	ldr	r2, [pc, #180]	; (8004414 <main+0x14c>)
 800435e:	2100      	movs	r1, #0
 8004360:	482d      	ldr	r0, [pc, #180]	; (8004418 <main+0x150>)
 8004362:	f00a ff3b 	bl	800f1dc <osThreadNew>
 8004366:	4602      	mov	r2, r0
 8004368:	4b2c      	ldr	r3, [pc, #176]	; (800441c <main+0x154>)
 800436a:	601a      	str	r2, [r3, #0]

        /* creation of vibrateControl */
        vibrateControlHandle = osThreadNew(startVibrateControl, NULL, &vibrateControl_attributes);
 800436c:	4a2c      	ldr	r2, [pc, #176]	; (8004420 <main+0x158>)
 800436e:	2100      	movs	r1, #0
 8004370:	482c      	ldr	r0, [pc, #176]	; (8004424 <main+0x15c>)
 8004372:	f00a ff33 	bl	800f1dc <osThreadNew>
 8004376:	4602      	mov	r2, r0
 8004378:	4b2b      	ldr	r3, [pc, #172]	; (8004428 <main+0x160>)
 800437a:	601a      	str	r2, [r3, #0]

        /* creation of rtcSecondTick */
        rtcSecondTickHandle = osThreadNew(startRTCTick, NULL, &rtcSecondTick_attributes);
 800437c:	4a2b      	ldr	r2, [pc, #172]	; (800442c <main+0x164>)
 800437e:	2100      	movs	r1, #0
 8004380:	482b      	ldr	r0, [pc, #172]	; (8004430 <main+0x168>)
 8004382:	f00a ff2b 	bl	800f1dc <osThreadNew>
 8004386:	4602      	mov	r2, r0
 8004388:	4b2a      	ldr	r3, [pc, #168]	; (8004434 <main+0x16c>)
 800438a:	601a      	str	r2, [r3, #0]

        /* creation of bleTX */
        bleTXHandle = osThreadNew(startBLETX, NULL, &bleTX_attributes);
 800438c:	4a2a      	ldr	r2, [pc, #168]	; (8004438 <main+0x170>)
 800438e:	2100      	movs	r1, #0
 8004390:	482a      	ldr	r0, [pc, #168]	; (800443c <main+0x174>)
 8004392:	f00a ff23 	bl	800f1dc <osThreadNew>
 8004396:	4602      	mov	r2, r0
 8004398:	4b29      	ldr	r3, [pc, #164]	; (8004440 <main+0x178>)
 800439a:	601a      	str	r2, [r3, #0]

        /* creation of bleRX */
        bleRXHandle = osThreadNew(startBLERX, NULL, &bleRX_attributes);
 800439c:	4a29      	ldr	r2, [pc, #164]	; (8004444 <main+0x17c>)
 800439e:	2100      	movs	r1, #0
 80043a0:	4829      	ldr	r0, [pc, #164]	; (8004448 <main+0x180>)
 80043a2:	f00a ff1b 	bl	800f1dc <osThreadNew>
 80043a6:	4602      	mov	r2, r0
 80043a8:	4b28      	ldr	r3, [pc, #160]	; (800444c <main+0x184>)
 80043aa:	601a      	str	r2, [r3, #0]

        /* creation of LEDTimer */
        LEDTimerHandle = osThreadNew(startLEDTimer, NULL, &LEDTimer_attributes);
 80043ac:	4a28      	ldr	r2, [pc, #160]	; (8004450 <main+0x188>)
 80043ae:	2100      	movs	r1, #0
 80043b0:	4828      	ldr	r0, [pc, #160]	; (8004454 <main+0x18c>)
 80043b2:	f00a ff13 	bl	800f1dc <osThreadNew>
 80043b6:	4602      	mov	r2, r0
 80043b8:	4b27      	ldr	r3, [pc, #156]	; (8004458 <main+0x190>)
 80043ba:	601a      	str	r2, [r3, #0]

        /* creation of touchRead */
        touchReadHandle = osThreadNew(startTouchRead, NULL, &touchRead_attributes);
 80043bc:	4a27      	ldr	r2, [pc, #156]	; (800445c <main+0x194>)
 80043be:	2100      	movs	r1, #0
 80043c0:	4827      	ldr	r0, [pc, #156]	; (8004460 <main+0x198>)
 80043c2:	f00a ff0b 	bl	800f1dc <osThreadNew>
 80043c6:	4602      	mov	r2, r0
 80043c8:	4b26      	ldr	r3, [pc, #152]	; (8004464 <main+0x19c>)
 80043ca:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Init code for STM32_WPAN */
  APPE_Init();
 80043cc:	f7fd fefc 	bl	80021c8 <APPE_Init>
  /* Start scheduler */
  osKernelStart();
 80043d0:	f00a fece 	bl	800f170 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80043d4:	e7fe      	b.n	80043d4 <main+0x10c>
 80043d6:	bf00      	nop
 80043d8:	58004000 	.word	0x58004000
 80043dc:	08017c40 	.word	0x08017c40
 80043e0:	20004b78 	.word	0x20004b78
 80043e4:	08017c50 	.word	0x08017c50
 80043e8:	20004908 	.word	0x20004908
 80043ec:	08017c60 	.word	0x08017c60
 80043f0:	20004ac0 	.word	0x20004ac0
 80043f4:	08017c28 	.word	0x08017c28
 80043f8:	20004b70 	.word	0x20004b70
 80043fc:	08017ae4 	.word	0x08017ae4
 8004400:	08004aa1 	.word	0x08004aa1
 8004404:	20004ab0 	.word	0x20004ab0
 8004408:	08017b08 	.word	0x08017b08
 800440c:	08004c91 	.word	0x08004c91
 8004410:	200048b0 	.word	0x200048b0
 8004414:	08017b2c 	.word	0x08017b2c
 8004418:	08004f19 	.word	0x08004f19
 800441c:	200048ac 	.word	0x200048ac
 8004420:	08017b50 	.word	0x08017b50
 8004424:	08005041 	.word	0x08005041
 8004428:	20004b74 	.word	0x20004b74
 800442c:	08017b74 	.word	0x08017b74
 8004430:	0800507d 	.word	0x0800507d
 8004434:	20004abc 	.word	0x20004abc
 8004438:	08017b98 	.word	0x08017b98
 800443c:	08005285 	.word	0x08005285
 8004440:	20004904 	.word	0x20004904
 8004444:	08017bbc 	.word	0x08017bbc
 8004448:	08005297 	.word	0x08005297
 800444c:	20004ab8 	.word	0x20004ab8
 8004450:	08017be0 	.word	0x08017be0
 8004454:	080052a9 	.word	0x080052a9
 8004458:	200048b4 	.word	0x200048b4
 800445c:	08017c04 	.word	0x08017c04
 8004460:	08005335 	.word	0x08005335
 8004464:	20004ab4 	.word	0x20004ab4

08004468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b0ae      	sub	sp, #184	; 0xb8
 800446c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800446e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004472:	2248      	movs	r2, #72	; 0x48
 8004474:	2100      	movs	r1, #0
 8004476:	4618      	mov	r0, r3
 8004478:	f00e fffb 	bl	8013472 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800447c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	605a      	str	r2, [r3, #4]
 8004486:	609a      	str	r2, [r3, #8]
 8004488:	60da      	str	r2, [r3, #12]
 800448a:	611a      	str	r2, [r3, #16]
 800448c:	615a      	str	r2, [r3, #20]
 800448e:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004490:	1d3b      	adds	r3, r7, #4
 8004492:	2250      	movs	r2, #80	; 0x50
 8004494:	2100      	movs	r1, #0
 8004496:	4618      	mov	r0, r3
 8004498:	f00e ffeb 	bl	8013472 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800449c:	f003 fa2c 	bl	80078f8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80044a0:	2000      	movs	r0, #0
 80044a2:	f7ff fe0f 	bl	80040c4 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80044a6:	4b2f      	ldr	r3, [pc, #188]	; (8004564 <SystemClock_Config+0xfc>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044ae:	4a2d      	ldr	r2, [pc, #180]	; (8004564 <SystemClock_Config+0xfc>)
 80044b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	4b2b      	ldr	r3, [pc, #172]	; (8004564 <SystemClock_Config+0xfc>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80044c2:	2307      	movs	r3, #7
 80044c4:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80044c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044ca:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80044cc:	2301      	movs	r3, #1
 80044ce:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80044d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80044d6:	2340      	movs	r3, #64	; 0x40
 80044d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80044dc:	2300      	movs	r3, #0
 80044de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80044e6:	4618      	mov	r0, r3
 80044e8:	f003 fda6 	bl	8008038 <HAL_RCC_OscConfig>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80044f2:	f001 f84d 	bl	8005590 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80044f6:	236f      	movs	r3, #111	; 0x6f
 80044f8:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80044fa:	2302      	movs	r3, #2
 80044fc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80044fe:	2300      	movs	r3, #0
 8004500:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004502:	2300      	movs	r3, #0
 8004504:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004506:	2300      	movs	r3, #0
 8004508:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800450a:	2300      	movs	r3, #0
 800450c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800450e:	2300      	movs	r3, #0
 8004510:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004512:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004516:	2101      	movs	r1, #1
 8004518:	4618      	mov	r0, r3
 800451a:	f004 f919 	bl	8008750 <HAL_RCC_ClockConfig>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004524:	f001 f834 	bl	8005590 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8004528:	f643 0303 	movw	r3, #14339	; 0x3803
 800452c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800452e:	2300      	movs	r3, #0
 8004530:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004532:	2300      	movs	r3, #0
 8004534:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004536:	f44f 7380 	mov.w	r3, #256	; 0x100
 800453a:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800453c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004540:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8004542:	2302      	movs	r3, #2
 8004544:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8004546:	2310      	movs	r3, #16
 8004548:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800454a:	1d3b      	adds	r3, r7, #4
 800454c:	4618      	mov	r0, r3
 800454e:	f004 fd70 	bl	8009032 <HAL_RCCEx_PeriphCLKConfig>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8004558:	f001 f81a 	bl	8005590 <Error_Handler>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  /* USER CODE END Smps */
}
 800455c:	bf00      	nop
 800455e:	37b8      	adds	r7, #184	; 0xb8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	58000400 	.word	0x58000400

08004568 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800456c:	4b23      	ldr	r3, [pc, #140]	; (80045fc <MX_USART1_UART_Init+0x94>)
 800456e:	4a24      	ldr	r2, [pc, #144]	; (8004600 <MX_USART1_UART_Init+0x98>)
 8004570:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004572:	4b22      	ldr	r3, [pc, #136]	; (80045fc <MX_USART1_UART_Init+0x94>)
 8004574:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004578:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800457a:	4b20      	ldr	r3, [pc, #128]	; (80045fc <MX_USART1_UART_Init+0x94>)
 800457c:	2200      	movs	r2, #0
 800457e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004580:	4b1e      	ldr	r3, [pc, #120]	; (80045fc <MX_USART1_UART_Init+0x94>)
 8004582:	2200      	movs	r2, #0
 8004584:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004586:	4b1d      	ldr	r3, [pc, #116]	; (80045fc <MX_USART1_UART_Init+0x94>)
 8004588:	2200      	movs	r2, #0
 800458a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800458c:	4b1b      	ldr	r3, [pc, #108]	; (80045fc <MX_USART1_UART_Init+0x94>)
 800458e:	220c      	movs	r2, #12
 8004590:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004592:	4b1a      	ldr	r3, [pc, #104]	; (80045fc <MX_USART1_UART_Init+0x94>)
 8004594:	2200      	movs	r2, #0
 8004596:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8004598:	4b18      	ldr	r3, [pc, #96]	; (80045fc <MX_USART1_UART_Init+0x94>)
 800459a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800459e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80045a0:	4b16      	ldr	r3, [pc, #88]	; (80045fc <MX_USART1_UART_Init+0x94>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80045a6:	4b15      	ldr	r3, [pc, #84]	; (80045fc <MX_USART1_UART_Init+0x94>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80045ac:	4b13      	ldr	r3, [pc, #76]	; (80045fc <MX_USART1_UART_Init+0x94>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80045b2:	4812      	ldr	r0, [pc, #72]	; (80045fc <MX_USART1_UART_Init+0x94>)
 80045b4:	f007 f8fa 	bl	800b7ac <HAL_UART_Init>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80045be:	f000 ffe7 	bl	8005590 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80045c2:	2100      	movs	r1, #0
 80045c4:	480d      	ldr	r0, [pc, #52]	; (80045fc <MX_USART1_UART_Init+0x94>)
 80045c6:	f008 f80d 	bl	800c5e4 <HAL_UARTEx_SetTxFifoThreshold>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80045d0:	f000 ffde 	bl	8005590 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80045d4:	2100      	movs	r1, #0
 80045d6:	4809      	ldr	r0, [pc, #36]	; (80045fc <MX_USART1_UART_Init+0x94>)
 80045d8:	f008 f842 	bl	800c660 <HAL_UARTEx_SetRxFifoThreshold>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80045e2:	f000 ffd5 	bl	8005590 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80045e6:	4805      	ldr	r0, [pc, #20]	; (80045fc <MX_USART1_UART_Init+0x94>)
 80045e8:	f007 ffc3 	bl	800c572 <HAL_UARTEx_DisableFifoMode>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80045f2:	f000 ffcd 	bl	8005590 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80045f6:	bf00      	nop
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	200049f8 	.word	0x200049f8
 8004600:	40013800 	.word	0x40013800

08004604 <MX_I2C1_Init>:


static void MX_I2C1_Init(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004608:	4b1b      	ldr	r3, [pc, #108]	; (8004678 <MX_I2C1_Init+0x74>)
 800460a:	4a1c      	ldr	r2, [pc, #112]	; (800467c <MX_I2C1_Init+0x78>)
 800460c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 800460e:	4b1a      	ldr	r3, [pc, #104]	; (8004678 <MX_I2C1_Init+0x74>)
 8004610:	4a1b      	ldr	r2, [pc, #108]	; (8004680 <MX_I2C1_Init+0x7c>)
 8004612:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004614:	4b18      	ldr	r3, [pc, #96]	; (8004678 <MX_I2C1_Init+0x74>)
 8004616:	2200      	movs	r2, #0
 8004618:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800461a:	4b17      	ldr	r3, [pc, #92]	; (8004678 <MX_I2C1_Init+0x74>)
 800461c:	2201      	movs	r2, #1
 800461e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004620:	4b15      	ldr	r3, [pc, #84]	; (8004678 <MX_I2C1_Init+0x74>)
 8004622:	2200      	movs	r2, #0
 8004624:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004626:	4b14      	ldr	r3, [pc, #80]	; (8004678 <MX_I2C1_Init+0x74>)
 8004628:	2200      	movs	r2, #0
 800462a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800462c:	4b12      	ldr	r3, [pc, #72]	; (8004678 <MX_I2C1_Init+0x74>)
 800462e:	2200      	movs	r2, #0
 8004630:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004632:	4b11      	ldr	r3, [pc, #68]	; (8004678 <MX_I2C1_Init+0x74>)
 8004634:	2200      	movs	r2, #0
 8004636:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004638:	4b0f      	ldr	r3, [pc, #60]	; (8004678 <MX_I2C1_Init+0x74>)
 800463a:	2200      	movs	r2, #0
 800463c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800463e:	480e      	ldr	r0, [pc, #56]	; (8004678 <MX_I2C1_Init+0x74>)
 8004640:	f002 faf4 	bl	8006c2c <HAL_I2C_Init>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800464a:	f000 ffa1 	bl	8005590 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800464e:	2100      	movs	r1, #0
 8004650:	4809      	ldr	r0, [pc, #36]	; (8004678 <MX_I2C1_Init+0x74>)
 8004652:	f003 f8b9 	bl	80077c8 <HAL_I2CEx_ConfigAnalogFilter>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800465c:	f000 ff98 	bl	8005590 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004660:	2100      	movs	r1, #0
 8004662:	4805      	ldr	r0, [pc, #20]	; (8004678 <MX_I2C1_Init+0x74>)
 8004664:	f003 f8fb 	bl	800785e <HAL_I2CEx_ConfigDigitalFilter>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800466e:	f000 ff8f 	bl	8005590 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004672:	bf00      	nop
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	200048b8 	.word	0x200048b8
 800467c:	40005400 	.word	0x40005400
 8004680:	00300f38 	.word	0x00300f38

08004684 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8004688:	bf00      	nop
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
	...

08004694 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800469a:	4b2b      	ldr	r3, [pc, #172]	; (8004748 <MX_RTC_Init+0xb4>)
 800469c:	4a2b      	ldr	r2, [pc, #172]	; (800474c <MX_RTC_Init+0xb8>)
 800469e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80046a0:	4b29      	ldr	r3, [pc, #164]	; (8004748 <MX_RTC_Init+0xb4>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80046a6:	4b28      	ldr	r3, [pc, #160]	; (8004748 <MX_RTC_Init+0xb4>)
 80046a8:	227f      	movs	r2, #127	; 0x7f
 80046aa:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80046ac:	4b26      	ldr	r3, [pc, #152]	; (8004748 <MX_RTC_Init+0xb4>)
 80046ae:	22ff      	movs	r2, #255	; 0xff
 80046b0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80046b2:	4b25      	ldr	r3, [pc, #148]	; (8004748 <MX_RTC_Init+0xb4>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80046b8:	4b23      	ldr	r3, [pc, #140]	; (8004748 <MX_RTC_Init+0xb4>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80046be:	4b22      	ldr	r3, [pc, #136]	; (8004748 <MX_RTC_Init+0xb4>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80046c4:	4b20      	ldr	r3, [pc, #128]	; (8004748 <MX_RTC_Init+0xb4>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80046ca:	481f      	ldr	r0, [pc, #124]	; (8004748 <MX_RTC_Init+0xb4>)
 80046cc:	f004 ff37 	bl	800953e <HAL_RTC_Init>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80046d6:	f000 ff5b 	bl	8005590 <Error_Handler>
  /* Enable RTC registers write protection */
  //LL_RTC_EnableWriteProtection(RTC);

  /** Initialize RTC and set the Time and Date
    */
    RTC_TimeTypeDef sTime = {0};
 80046da:	1d3b      	adds	r3, r7, #4
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	605a      	str	r2, [r3, #4]
 80046e2:	609a      	str	r2, [r3, #8]
 80046e4:	60da      	str	r2, [r3, #12]
 80046e6:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 80046e8:	2300      	movs	r3, #0
 80046ea:	603b      	str	r3, [r7, #0]

    sTime.Hours = 0x0;
 80046ec:	2300      	movs	r3, #0
 80046ee:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 0x0;
 80046f0:	2300      	movs	r3, #0
 80046f2:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 0x0;
 80046f4:	2300      	movs	r3, #0
 80046f6:	71bb      	strb	r3, [r7, #6]
    sTime.SubSeconds = 0x0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	60bb      	str	r3, [r7, #8]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80046fc:	2300      	movs	r3, #0
 80046fe:	613b      	str	r3, [r7, #16]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004700:	2300      	movs	r3, #0
 8004702:	617b      	str	r3, [r7, #20]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004704:	1d3b      	adds	r3, r7, #4
 8004706:	2201      	movs	r2, #1
 8004708:	4619      	mov	r1, r3
 800470a:	480f      	ldr	r0, [pc, #60]	; (8004748 <MX_RTC_Init+0xb4>)
 800470c:	f004 ffb5 	bl	800967a <HAL_RTC_SetTime>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <MX_RTC_Init+0x86>
    {
      Error_Handler();
 8004716:	f000 ff3b 	bl	8005590 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800471a:	2301      	movs	r3, #1
 800471c:	703b      	strb	r3, [r7, #0]
    sDate.Month = RTC_MONTH_JANUARY;
 800471e:	2301      	movs	r3, #1
 8004720:	707b      	strb	r3, [r7, #1]
    sDate.Date = 0x1;
 8004722:	2301      	movs	r3, #1
 8004724:	70bb      	strb	r3, [r7, #2]
    sDate.Year = 0x0;
 8004726:	2300      	movs	r3, #0
 8004728:	70fb      	strb	r3, [r7, #3]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800472a:	463b      	mov	r3, r7
 800472c:	2201      	movs	r2, #1
 800472e:	4619      	mov	r1, r3
 8004730:	4805      	ldr	r0, [pc, #20]	; (8004748 <MX_RTC_Init+0xb4>)
 8004732:	f005 f8c2 	bl	80098ba <HAL_RTC_SetDate>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <MX_RTC_Init+0xac>
    {
      Error_Handler();
 800473c:	f000 ff28 	bl	8005590 <Error_Handler>
    }


  /* USER CODE END RTC_Init 2 */

}
 8004740:	bf00      	nop
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	20004a8c 	.word	0x20004a8c
 800474c:	40002800 	.word	0x40002800

08004750 <MX_SPI1_Init>:

}*/

/* USER CODE BEGIN 4 */
static void MX_SPI1_Init(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004754:	4b1b      	ldr	r3, [pc, #108]	; (80047c4 <MX_SPI1_Init+0x74>)
 8004756:	4a1c      	ldr	r2, [pc, #112]	; (80047c8 <MX_SPI1_Init+0x78>)
 8004758:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800475a:	4b1a      	ldr	r3, [pc, #104]	; (80047c4 <MX_SPI1_Init+0x74>)
 800475c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004760:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8004762:	4b18      	ldr	r3, [pc, #96]	; (80047c4 <MX_SPI1_Init+0x74>)
 8004764:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004768:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800476a:	4b16      	ldr	r3, [pc, #88]	; (80047c4 <MX_SPI1_Init+0x74>)
 800476c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004770:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004772:	4b14      	ldr	r3, [pc, #80]	; (80047c4 <MX_SPI1_Init+0x74>)
 8004774:	2200      	movs	r2, #0
 8004776:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004778:	4b12      	ldr	r3, [pc, #72]	; (80047c4 <MX_SPI1_Init+0x74>)
 800477a:	2200      	movs	r2, #0
 800477c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800477e:	4b11      	ldr	r3, [pc, #68]	; (80047c4 <MX_SPI1_Init+0x74>)
 8004780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004784:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004786:	4b0f      	ldr	r3, [pc, #60]	; (80047c4 <MX_SPI1_Init+0x74>)
 8004788:	2200      	movs	r2, #0
 800478a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800478c:	4b0d      	ldr	r3, [pc, #52]	; (80047c4 <MX_SPI1_Init+0x74>)
 800478e:	2200      	movs	r2, #0
 8004790:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004792:	4b0c      	ldr	r3, [pc, #48]	; (80047c4 <MX_SPI1_Init+0x74>)
 8004794:	2200      	movs	r2, #0
 8004796:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004798:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <MX_SPI1_Init+0x74>)
 800479a:	2200      	movs	r2, #0
 800479c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800479e:	4b09      	ldr	r3, [pc, #36]	; (80047c4 <MX_SPI1_Init+0x74>)
 80047a0:	2207      	movs	r2, #7
 80047a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80047a4:	4b07      	ldr	r3, [pc, #28]	; (80047c4 <MX_SPI1_Init+0x74>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80047aa:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <MX_SPI1_Init+0x74>)
 80047ac:	2208      	movs	r2, #8
 80047ae:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80047b0:	4804      	ldr	r0, [pc, #16]	; (80047c4 <MX_SPI1_Init+0x74>)
 80047b2:	f005 fa3f 	bl	8009c34 <HAL_SPI_Init>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80047bc:	f000 fee8 	bl	8005590 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80047c0:	bf00      	nop
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	20004b7c 	.word	0x20004b7c
 80047c8:	40013000 	.word	0x40013000

080047cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b09c      	sub	sp, #112	; 0x70
 80047d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80047d2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	605a      	str	r2, [r3, #4]
 80047dc:	609a      	str	r2, [r3, #8]
 80047de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	605a      	str	r2, [r3, #4]
 80047ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80047ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80047f0:	2200      	movs	r2, #0
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	605a      	str	r2, [r3, #4]
 80047f6:	609a      	str	r2, [r3, #8]
 80047f8:	60da      	str	r2, [r3, #12]
 80047fa:	611a      	str	r2, [r3, #16]
 80047fc:	615a      	str	r2, [r3, #20]
 80047fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004800:	1d3b      	adds	r3, r7, #4
 8004802:	2234      	movs	r2, #52	; 0x34
 8004804:	2100      	movs	r1, #0
 8004806:	4618      	mov	r0, r3
 8004808:	f00e fe33 	bl	8013472 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800480c:	4b45      	ldr	r3, [pc, #276]	; (8004924 <MX_TIM1_Init+0x158>)
 800480e:	4a46      	ldr	r2, [pc, #280]	; (8004928 <MX_TIM1_Init+0x15c>)
 8004810:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004812:	4b44      	ldr	r3, [pc, #272]	; (8004924 <MX_TIM1_Init+0x158>)
 8004814:	2200      	movs	r2, #0
 8004816:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004818:	4b42      	ldr	r3, [pc, #264]	; (8004924 <MX_TIM1_Init+0x158>)
 800481a:	2200      	movs	r2, #0
 800481c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 800481e:	4b41      	ldr	r3, [pc, #260]	; (8004924 <MX_TIM1_Init+0x158>)
 8004820:	2264      	movs	r2, #100	; 0x64
 8004822:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004824:	4b3f      	ldr	r3, [pc, #252]	; (8004924 <MX_TIM1_Init+0x158>)
 8004826:	2200      	movs	r2, #0
 8004828:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800482a:	4b3e      	ldr	r3, [pc, #248]	; (8004924 <MX_TIM1_Init+0x158>)
 800482c:	2200      	movs	r2, #0
 800482e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004830:	4b3c      	ldr	r3, [pc, #240]	; (8004924 <MX_TIM1_Init+0x158>)
 8004832:	2200      	movs	r2, #0
 8004834:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004836:	483b      	ldr	r0, [pc, #236]	; (8004924 <MX_TIM1_Init+0x158>)
 8004838:	f005 fd6a 	bl	800a310 <HAL_TIM_Base_Init>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004842:	f000 fea5 	bl	8005590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800484a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800484c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004850:	4619      	mov	r1, r3
 8004852:	4834      	ldr	r0, [pc, #208]	; (8004924 <MX_TIM1_Init+0x158>)
 8004854:	f006 f9f6 	bl	800ac44 <HAL_TIM_ConfigClockSource>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800485e:	f000 fe97 	bl	8005590 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004862:	4830      	ldr	r0, [pc, #192]	; (8004924 <MX_TIM1_Init+0x158>)
 8004864:	f005 fdfa 	bl	800a45c <HAL_TIM_PWM_Init>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800486e:	f000 fe8f 	bl	8005590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004872:	2300      	movs	r3, #0
 8004874:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004876:	2300      	movs	r3, #0
 8004878:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800487a:	2300      	movs	r3, #0
 800487c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800487e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004882:	4619      	mov	r1, r3
 8004884:	4827      	ldr	r0, [pc, #156]	; (8004924 <MX_TIM1_Init+0x158>)
 8004886:	f006 fe63 	bl	800b550 <HAL_TIMEx_MasterConfigSynchronization>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d001      	beq.n	8004894 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8004890:	f000 fe7e 	bl	8005590 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004894:	2360      	movs	r3, #96	; 0x60
 8004896:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 100;
 8004898:	2364      	movs	r3, #100	; 0x64
 800489a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800489c:	2300      	movs	r3, #0
 800489e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80048a0:	2300      	movs	r3, #0
 80048a2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80048a4:	2304      	movs	r3, #4
 80048a6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80048a8:	2300      	movs	r3, #0
 80048aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80048ac:	2300      	movs	r3, #0
 80048ae:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80048b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80048b4:	2200      	movs	r2, #0
 80048b6:	4619      	mov	r1, r3
 80048b8:	481a      	ldr	r0, [pc, #104]	; (8004924 <MX_TIM1_Init+0x158>)
 80048ba:	f006 f8b3 	bl	800aa24 <HAL_TIM_PWM_ConfigChannel>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80048c4:	f000 fe64 	bl	8005590 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80048c8:	2300      	movs	r3, #0
 80048ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80048d4:	2300      	movs	r3, #0
 80048d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80048d8:	2300      	movs	r3, #0
 80048da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80048dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80048e2:	2300      	movs	r3, #0
 80048e4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80048e6:	2300      	movs	r3, #0
 80048e8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80048ea:	2300      	movs	r3, #0
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80048ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80048f4:	2300      	movs	r3, #0
 80048f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80048f8:	2300      	movs	r3, #0
 80048fa:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80048fc:	2300      	movs	r3, #0
 80048fe:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004900:	1d3b      	adds	r3, r7, #4
 8004902:	4619      	mov	r1, r3
 8004904:	4807      	ldr	r0, [pc, #28]	; (8004924 <MX_TIM1_Init+0x158>)
 8004906:	f006 fe83 	bl	800b610 <HAL_TIMEx_ConfigBreakDeadTime>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8004910:	f000 fe3e 	bl	8005590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004914:	4803      	ldr	r0, [pc, #12]	; (8004924 <MX_TIM1_Init+0x158>)
 8004916:	f001 f89b 	bl	8005a50 <HAL_TIM_MspPostInit>

}
 800491a:	bf00      	nop
 800491c:	3770      	adds	r7, #112	; 0x70
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	20004ac4 	.word	0x20004ac4
 8004928:	40012c00 	.word	0x40012c00

0800492c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004932:	1d3b      	adds	r3, r7, #4
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	605a      	str	r2, [r3, #4]
 800493a:	609a      	str	r2, [r3, #8]
 800493c:	60da      	str	r2, [r3, #12]
 800493e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004940:	2004      	movs	r0, #4
 8004942:	f7ff fc1d 	bl	8004180 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004946:	2002      	movs	r0, #2
 8004948:	f7ff fc1a 	bl	8004180 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800494c:	2001      	movs	r0, #1
 800494e:	f7ff fc17 	bl	8004180 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_RESET);
 8004952:	2200      	movs	r2, #0
 8004954:	2101      	movs	r1, #1
 8004956:	481b      	ldr	r0, [pc, #108]	; (80049c4 <MX_GPIO_Init+0x98>)
 8004958:	f002 f914 	bl	8006b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OLED_RESET_Pin */
  GPIO_InitStruct.Pin = OLED_RESET_Pin;
 800495c:	2301      	movs	r3, #1
 800495e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004960:	2301      	movs	r3, #1
 8004962:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004964:	2300      	movs	r3, #0
 8004966:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004968:	2300      	movs	r3, #0
 800496a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(OLED_RESET_GPIO_Port, &GPIO_InitStruct);
 800496c:	1d3b      	adds	r3, r7, #4
 800496e:	4619      	mov	r1, r3
 8004970:	4814      	ldr	r0, [pc, #80]	; (80049c4 <MX_GPIO_Init+0x98>)
 8004972:	f001 ff7f 	bl	8006874 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8004976:	2338      	movs	r3, #56	; 0x38
 8004978:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800497a:	4b13      	ldr	r3, [pc, #76]	; (80049c8 <MX_GPIO_Init+0x9c>)
 800497c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800497e:	2301      	movs	r3, #1
 8004980:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004982:	1d3b      	adds	r3, r7, #4
 8004984:	4619      	mov	r1, r3
 8004986:	480f      	ldr	r0, [pc, #60]	; (80049c4 <MX_GPIO_Init+0x98>)
 8004988:	f001 ff74 	bl	8006874 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 15, 0);
 800498c:	2200      	movs	r2, #0
 800498e:	210f      	movs	r1, #15
 8004990:	2009      	movs	r0, #9
 8004992:	f001 fc09 	bl	80061a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004996:	2009      	movs	r0, #9
 8004998:	f001 fc20 	bl	80061dc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 800499c:	2200      	movs	r2, #0
 800499e:	210f      	movs	r1, #15
 80049a0:	200a      	movs	r0, #10
 80049a2:	f001 fc01 	bl	80061a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80049a6:	200a      	movs	r0, #10
 80049a8:	f001 fc18 	bl	80061dc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 15, 0);
 80049ac:	2200      	movs	r2, #0
 80049ae:	210f      	movs	r1, #15
 80049b0:	2017      	movs	r0, #23
 80049b2:	f001 fbf9 	bl	80061a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80049b6:	2017      	movs	r0, #23
 80049b8:	f001 fc10 	bl	80061dc <HAL_NVIC_EnableIRQ>

}
 80049bc:	bf00      	nop
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	48000400 	.word	0x48000400
 80049c8:	10310000 	.word	0x10310000

080049cc <HAL_GPIO_EXTI_Callback>:
static inline void clear_bit(long *x, int bitNum) {
    *x &= (~(1L << bitNum));
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	4603      	mov	r3, r0
 80049d4:	80fb      	strh	r3, [r7, #6]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80049d6:	2300      	movs	r3, #0
 80049d8:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(buttonPressHandle, GPIO_Pin, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 80049da:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <HAL_GPIO_EXTI_Callback+0x40>)
 80049dc:	6818      	ldr	r0, [r3, #0]
 80049de:	88f9      	ldrh	r1, [r7, #6]
 80049e0:	f107 030c 	add.w	r3, r7, #12
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	2300      	movs	r3, #0
 80049e8:	2203      	movs	r2, #3
 80049ea:	f00e f853 	bl	8012a94 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d007      	beq.n	8004a04 <HAL_GPIO_EXTI_Callback+0x38>
 80049f4:	4b06      	ldr	r3, [pc, #24]	; (8004a10 <HAL_GPIO_EXTI_Callback+0x44>)
 80049f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	f3bf 8f6f 	isb	sy

}
 8004a04:	bf00      	nop
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	200048ac 	.word	0x200048ac
 8004a10:	e000ed04 	.word	0xe000ed04

08004a14 <get_RTC_hrmin>:
    return full_rtc_val;

}


void get_RTC_hrmin(char *dest) {
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b08c      	sub	sp, #48	; 0x30
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]

    RTC_TimeTypeDef cTime;
    RTC_DateTypeDef cDate;

    osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 8004a1c:	4b1d      	ldr	r3, [pc, #116]	; (8004a94 <get_RTC_hrmin+0x80>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f04f 31ff 	mov.w	r1, #4294967295
 8004a24:	4618      	mov	r0, r3
 8004a26:	f00a fe3d 	bl	800f6a4 <osMutexAcquire>
    HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BCD);
 8004a2a:	f107 0318 	add.w	r3, r7, #24
 8004a2e:	2201      	movs	r2, #1
 8004a30:	4619      	mov	r1, r3
 8004a32:	4819      	ldr	r0, [pc, #100]	; (8004a98 <get_RTC_hrmin+0x84>)
 8004a34:	f004 fee5 	bl	8009802 <HAL_RTC_GetTime>
    //must get date as well; RTC shadow registers will error if both aren't accessed
    HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BCD);
 8004a38:	f107 0314 	add.w	r3, r7, #20
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4815      	ldr	r0, [pc, #84]	; (8004a98 <get_RTC_hrmin+0x84>)
 8004a42:	f004 ffe8 	bl	8009a16 <HAL_RTC_GetDate>
    osMutexRelease(rtcMutexHandle);
 8004a46:	4b13      	ldr	r3, [pc, #76]	; (8004a94 <get_RTC_hrmin+0x80>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f00a fe88 	bl	800f760 <osMutexRelease>

    uint8_t  hrs = RTC_Bcd2ToByte(cTime.Hours);
 8004a50:	7e3b      	ldrb	r3, [r7, #24]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f005 f89c 	bl	8009b90 <RTC_Bcd2ToByte>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t mins = RTC_Bcd2ToByte(cTime.Minutes);
 8004a5e:	7e7b      	ldrb	r3, [r7, #25]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f005 f895 	bl	8009b90 <RTC_Bcd2ToByte>
 8004a66:	4603      	mov	r3, r0
 8004a68:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    char time[5];
    sprintf (time, "%02d%02d", hrs, mins);
 8004a6c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004a70:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a74:	f107 000c 	add.w	r0, r7, #12
 8004a78:	4908      	ldr	r1, [pc, #32]	; (8004a9c <get_RTC_hrmin+0x88>)
 8004a7a:	f00f fa93 	bl	8013fa4 <siprintf>

    strncpy(dest, time, sizeof(time));
 8004a7e:	f107 030c 	add.w	r3, r7, #12
 8004a82:	2205      	movs	r2, #5
 8004a84:	4619      	mov	r1, r3
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f00f faac 	bl	8013fe4 <strncpy>

}
 8004a8c:	bf00      	nop
 8004a8e:	3730      	adds	r7, #48	; 0x30
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	20004b78 	.word	0x20004b78
 8004a98:	20004a8c 	.word	0x20004a8c
 8004a9c:	08016820 	.word	0x08016820

08004aa0 <startScreenUpdate>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startScreenUpdate */
void startScreenUpdate(void *argument)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8004aa6:	af02      	add	r7, sp, #8
 8004aa8:	1d3b      	adds	r3, r7, #4
 8004aaa:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
  HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_SET);
 8004aac:	2201      	movs	r2, #1
 8004aae:	2101      	movs	r1, #1
 8004ab0:	4870      	ldr	r0, [pc, #448]	; (8004c74 <startScreenUpdate+0x1d4>)
 8004ab2:	f002 f867 	bl	8006b84 <HAL_GPIO_WritePin>

  uint8_t oled_buf[WIDTH * HEIGHT / 8];

  er_oled_begin();
 8004ab6:	f7fd fe25 	bl	8002704 <er_oled_begin>
  er_oled_clear(oled_buf);
 8004aba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fd fe88 	bl	80027d4 <er_oled_clear>
  er_oled_string(6, 14, "DRAMSAY", 12, 1, oled_buf);
 8004ac4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004ac8:	9301      	str	r3, [sp, #4]
 8004aca:	2301      	movs	r3, #1
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	230c      	movs	r3, #12
 8004ad0:	4a69      	ldr	r2, [pc, #420]	; (8004c78 <startScreenUpdate+0x1d8>)
 8004ad2:	210e      	movs	r1, #14
 8004ad4:	2006      	movs	r0, #6
 8004ad6:	f7fd ffed 	bl	8002ab4 <er_oled_string>
  er_oled_display(oled_buf);
 8004ada:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fe f873 	bl	8002bca <er_oled_display>

  osDelay(3000);
 8004ae4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004ae8:	f00a fd14 	bl	800f514 <osDelay>
  er_oled_clear(oled_buf);
 8004aec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7fd fe6f 	bl	80027d4 <er_oled_clear>
  er_oled_display(oled_buf);
 8004af6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fe f865 	bl	8002bca <er_oled_display>


  ScreenStatus_t screenStatus= SCREEN_TIME;
 8004b00:	f107 039b 	add.w	r3, r7, #155	; 0x9b
 8004b04:	2201      	movs	r2, #1
 8004b06:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {

	  	//wait for someone to update screen state elsewhere and notify
	  	xTaskNotifyWait(0x00, 0x00, &screenStatus, portMAX_DELAY);
 8004b08:	f107 029b 	add.w	r2, r7, #155	; 0x9b
 8004b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b10:	2100      	movs	r1, #0
 8004b12:	2000      	movs	r0, #0
 8004b14:	f00d feae 	bl	8012874 <xTaskNotifyWait>
	  	switch(screenStatus){
 8004b18:	f107 039b 	add.w	r3, r7, #155	; 0x9b
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	2b03      	cmp	r3, #3
 8004b22:	f200 809a 	bhi.w	8004c5a <startScreenUpdate+0x1ba>
 8004b26:	a201      	add	r2, pc, #4	; (adr r2, 8004b2c <startScreenUpdate+0x8c>)
 8004b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2c:	08004b3d 	.word	0x08004b3d
 8004b30:	08004c71 	.word	0x08004c71
 8004b34:	08004c01 	.word	0x08004c01
 8004b38:	08004b53 	.word	0x08004b53
	  			case SCREEN_TIME:
	  				//test time
	  				//er_oled_time("1743");

	  				//only hrmin
	  				get_RTC_hrmin(time);
 8004b3c:	f107 030c 	add.w	r3, r7, #12
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7ff ff67 	bl	8004a14 <get_RTC_hrmin>
	  				er_oled_time(time);
 8004b46:	f107 030c 	add.w	r3, r7, #12
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fe f875 	bl	8002c3a <er_oled_time>
	  				//get_RTC_hrminsec(time);
	  				//er_oled_clear(oled_buf);
	  				//er_oled_string(0, 14, time, 12, 1, oled_buf);
	  				//er_oled_display(oled_buf);

	  				break;
 8004b50:	e08f      	b.n	8004c72 <startScreenUpdate+0x1d2>

	  				break;

	  			case SCREEN_IMAGE:

	  				er_oled_clear(oled_buf);
 8004b52:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fd fe3c 	bl	80027d4 <er_oled_clear>

	  				osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 8004b5c:	4b47      	ldr	r3, [pc, #284]	; (8004c7c <startScreenUpdate+0x1dc>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f04f 31ff 	mov.w	r1, #4294967295
 8004b64:	4618      	mov	r0, r3
 8004b66:	f00a fd9d 	bl	800f6a4 <osMutexAcquire>
	  				imageNum = ScreenState.screenImage;
 8004b6a:	4b45      	ldr	r3, [pc, #276]	; (8004c80 <startScreenUpdate+0x1e0>)
 8004b6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b70:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	  				osMutexRelease(screenTextMutexHandle);
 8004b74:	4b41      	ldr	r3, [pc, #260]	; (8004c7c <startScreenUpdate+0x1dc>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f00a fdf1 	bl	800f760 <osMutexRelease>

	  				if (imageNum == 1){er_oled_bitmap(0, 0, PIC1, 72, 40, oled_buf);}
 8004b7e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d10b      	bne.n	8004b9e <startScreenUpdate+0xfe>
 8004b86:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004b8a:	9301      	str	r3, [sp, #4]
 8004b8c:	2328      	movs	r3, #40	; 0x28
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	2348      	movs	r3, #72	; 0x48
 8004b92:	4a3c      	ldr	r2, [pc, #240]	; (8004c84 <startScreenUpdate+0x1e4>)
 8004b94:	2100      	movs	r1, #0
 8004b96:	2000      	movs	r0, #0
 8004b98:	f7fd ffcd 	bl	8002b36 <er_oled_bitmap>
 8004b9c:	e01a      	b.n	8004bd4 <startScreenUpdate+0x134>
	  				else if (imageNum == 2) {er_oled_bitmap(0, 0, PIC2, 72, 40, oled_buf);}
 8004b9e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d10b      	bne.n	8004bbe <startScreenUpdate+0x11e>
 8004ba6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004baa:	9301      	str	r3, [sp, #4]
 8004bac:	2328      	movs	r3, #40	; 0x28
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	2348      	movs	r3, #72	; 0x48
 8004bb2:	4a35      	ldr	r2, [pc, #212]	; (8004c88 <startScreenUpdate+0x1e8>)
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	f7fd ffbd 	bl	8002b36 <er_oled_bitmap>
 8004bbc:	e00a      	b.n	8004bd4 <startScreenUpdate+0x134>
	  				else {er_oled_string(0, 14, "invalid image number", 24, 1, oled_buf);}
 8004bbe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004bc2:	9301      	str	r3, [sp, #4]
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	2318      	movs	r3, #24
 8004bca:	4a30      	ldr	r2, [pc, #192]	; (8004c8c <startScreenUpdate+0x1ec>)
 8004bcc:	210e      	movs	r1, #14
 8004bce:	2000      	movs	r0, #0
 8004bd0:	f7fd ff70 	bl	8002ab4 <er_oled_string>

	  				er_oled_display(oled_buf);
 8004bd4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7fd fff6 	bl	8002bca <er_oled_display>
	  				osDelay(1000);
 8004bde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004be2:	f00a fc97 	bl	800f514 <osDelay>
	  				command(0xa7);//--set Negative display
 8004be6:	2100      	movs	r1, #0
 8004be8:	20a7      	movs	r0, #167	; 0xa7
 8004bea:	f7fd fd6d 	bl	80026c8 <I2C_Write_Byte>
	  				osDelay(1000);
 8004bee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004bf2:	f00a fc8f 	bl	800f514 <osDelay>
	  				command(0xa6);//--set normal display
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	20a6      	movs	r0, #166	; 0xa6
 8004bfa:	f7fd fd65 	bl	80026c8 <I2C_Write_Byte>
	  				break;
 8004bfe:	e038      	b.n	8004c72 <startScreenUpdate+0x1d2>

	  			case SCREEN_TEXT:

	  				osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 8004c00:	4b1e      	ldr	r3, [pc, #120]	; (8004c7c <startScreenUpdate+0x1dc>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f04f 31ff 	mov.w	r1, #4294967295
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f00a fd4b 	bl	800f6a4 <osMutexAcquire>
	  				strncpy(screenText, ScreenState.screenText, sizeof(ScreenState.screenText));
 8004c0e:	f107 0318 	add.w	r3, r7, #24
 8004c12:	2280      	movs	r2, #128	; 0x80
 8004c14:	491a      	ldr	r1, [pc, #104]	; (8004c80 <startScreenUpdate+0x1e0>)
 8004c16:	4618      	mov	r0, r3
 8004c18:	f00f f9e4 	bl	8013fe4 <strncpy>
	  				osMutexRelease(screenTextMutexHandle);
 8004c1c:	4b17      	ldr	r3, [pc, #92]	; (8004c7c <startScreenUpdate+0x1dc>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f00a fd9d 	bl	800f760 <osMutexRelease>
	  				er_oled_clear(oled_buf);
 8004c26:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fd fdd2 	bl	80027d4 <er_oled_clear>
	  				er_oled_string(0, 14, screenText, 12, 1, oled_buf);
 8004c30:	f107 0218 	add.w	r2, r7, #24
 8004c34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004c38:	9301      	str	r3, [sp, #4]
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	230c      	movs	r3, #12
 8004c40:	210e      	movs	r1, #14
 8004c42:	2000      	movs	r0, #0
 8004c44:	f7fd ff36 	bl	8002ab4 <er_oled_string>
	  				er_oled_display(oled_buf);
 8004c48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7fd ffbc 	bl	8002bca <er_oled_display>
	  				osDelay(5);
 8004c52:	2005      	movs	r0, #5
 8004c54:	f00a fc5e 	bl	800f514 <osDelay>
	  				break;
 8004c58:	e00b      	b.n	8004c72 <startScreenUpdate+0x1d2>

	  			default: //includes SCREEN_OFF
	  				er_oled_clear(oled_buf);
 8004c5a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fd fdb8 	bl	80027d4 <er_oled_clear>
	  				er_oled_display(oled_buf);
 8004c64:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fd ffae 	bl	8002bca <er_oled_display>
	  				break;
 8004c6e:	e000      	b.n	8004c72 <startScreenUpdate+0x1d2>
	  				break;
 8004c70:	bf00      	nop
	  	xTaskNotifyWait(0x00, 0x00, &screenStatus, portMAX_DELAY);
 8004c72:	e749      	b.n	8004b08 <startScreenUpdate+0x68>
 8004c74:	48000400 	.word	0x48000400
 8004c78:	0801683c 	.word	0x0801683c
 8004c7c:	20004908 	.word	0x20004908
 8004c80:	20004be0 	.word	0x20004be0
 8004c84:	08017814 	.word	0x08017814
 8004c88:	0801797c 	.word	0x0801797c
 8004c8c:	08016844 	.word	0x08016844

08004c90 <startLEDControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startLEDControl */
void startLEDControl(void *argument)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b08a      	sub	sp, #40	; 0x28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
   	//LedState.currentMode = LED_CONFIRM_FLASH;
   	//osMutexRelease(ledStateMutexHandle);


  //LedState Init
  osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 8004c98:	4b98      	ldr	r3, [pc, #608]	; (8004efc <startLEDControl+0x26c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f00a fcff 	bl	800f6a4 <osMutexAcquire>
  LedState.currentMode = LED_SPIRAL;
 8004ca6:	4b96      	ldr	r3, [pc, #600]	; (8004f00 <startLEDControl+0x270>)
 8004ca8:	2205      	movs	r2, #5
 8004caa:	701a      	strb	r2, [r3, #0]
  LedState.nextMode = LED_OFF;
 8004cac:	4b94      	ldr	r3, [pc, #592]	; (8004f00 <startLEDControl+0x270>)
 8004cae:	2201      	movs	r2, #1
 8004cb0:	705a      	strb	r2, [r3, #1]
  LedState.modeTimeout = pdMS_TO_TICKS(5000);
 8004cb2:	4b93      	ldr	r3, [pc, #588]	; (8004f00 <startLEDControl+0x270>)
 8004cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb8:	605a      	str	r2, [r3, #4]
  osMutexRelease(ledStateMutexHandle);
 8004cba:	4b90      	ldr	r3, [pc, #576]	; (8004efc <startLEDControl+0x26c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f00a fd4e 	bl	800f760 <osMutexRelease>

  //Dotstar Init
  DotStar_InitHandle dotstar;
  dotstar.spiHandle = &hspi1;
 8004cc4:	4b8f      	ldr	r3, [pc, #572]	; (8004f04 <startLEDControl+0x274>)
 8004cc6:	60fb      	str	r3, [r7, #12]
  dotstar.numLEDs = NUM_PIXELS;
 8004cc8:	230c      	movs	r3, #12
 8004cca:	823b      	strh	r3, [r7, #16]
  dotstar.colorOrder = DOTSTAR_BGR;
 8004ccc:	2306      	movs	r3, #6
 8004cce:	74bb      	strb	r3, [r7, #18]
  Dotstar_Init(&dotstar);
 8004cd0:	f107 030c 	add.w	r3, r7, #12
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7fd fb69 	bl	80023ac <Dotstar_Init>

  ds_clear();  //turn off
 8004cda:	f7fd fc53 	bl	8002584 <ds_clear>
  ds_show();
 8004cde:	f7fd fbb5 	bl	800244c <ds_show>

  const uint8_t STANDARD_BRIGHTNESS = 20; //20, 0-255
 8004ce2:	2314      	movs	r3, #20
 8004ce4:	75fb      	strb	r3, [r7, #23]
  const uint8_t MAX_BRIGHTNESS = 0x33; //max brightness, 0x01-0xFF
 8004ce6:	2333      	movs	r3, #51	; 0x33
 8004ce8:	75bb      	strb	r3, [r7, #22]

  ds_setBrightness(STANDARD_BRIGHTNESS);
 8004cea:	7dfb      	ldrb	r3, [r7, #23]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7fd fcd9 	bl	80026a4 <ds_setBrightness>
  osDelay(1000);
 8004cf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004cf6:	f00a fc0d 	bl	800f514 <osDelay>

  LedStatus_t currentMode;
  LedStatus_t lastLoopMode = LED_OFF;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  uint16_t counter = 0;
 8004d00:	2300      	movs	r3, #0
 8004d02:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint8_t stateVar1 = 0;
 8004d04:	2300      	movs	r3, #0
 8004d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t stateVar2 = 0;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  uint32_t color = 0x000000;
 8004d10:	2300      	movs	r3, #0
 8004d12:	61fb      	str	r3, [r7, #28]
  /* Infinite loop */
  for(;;)
  {
    //check state, get mode, call timer if necessary

    osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 8004d14:	4b79      	ldr	r3, [pc, #484]	; (8004efc <startLEDControl+0x26c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f04f 31ff 	mov.w	r1, #4294967295
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f00a fcc1 	bl	800f6a4 <osMutexAcquire>
	currentMode = LedState.currentMode;
 8004d22:	4b77      	ldr	r3, [pc, #476]	; (8004f00 <startLEDControl+0x270>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	757b      	strb	r3, [r7, #21]
	if (LedState.modeTimeout){
 8004d28:	4b75      	ldr	r3, [pc, #468]	; (8004f00 <startLEDControl+0x270>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d006      	beq.n	8004d3e <startLEDControl+0xae>
		xTaskNotifyGive(LEDTimerHandle);
 8004d30:	4b75      	ldr	r3, [pc, #468]	; (8004f08 <startLEDControl+0x278>)
 8004d32:	6818      	ldr	r0, [r3, #0]
 8004d34:	2300      	movs	r3, #0
 8004d36:	2202      	movs	r2, #2
 8004d38:	2100      	movs	r1, #0
 8004d3a:	f00d fdf5 	bl	8012928 <xTaskGenericNotify>
	}
	osMutexRelease(ledStateMutexHandle);
 8004d3e:	4b6f      	ldr	r3, [pc, #444]	; (8004efc <startLEDControl+0x26c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f00a fd0c 	bl	800f760 <osMutexRelease>

	//reset count if we've switched modes
	if (lastLoopMode != currentMode) { counter = 0; stateVar1 = 0; stateVar2 = 0;}
 8004d48:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004d4c:	7d7b      	ldrb	r3, [r7, #21]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d007      	beq.n	8004d62 <startLEDControl+0xd2>
 8004d52:	2300      	movs	r3, #0
 8004d54:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004d56:	2300      	movs	r3, #0
 8004d58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	switch(currentMode){
 8004d62:	7d7b      	ldrb	r3, [r7, #21]
 8004d64:	3b02      	subs	r3, #2
 8004d66:	2b03      	cmp	r3, #3
 8004d68:	f200 80b3 	bhi.w	8004ed2 <startLEDControl+0x242>
 8004d6c:	a201      	add	r2, pc, #4	; (adr r2, 8004d74 <startLEDControl+0xe4>)
 8004d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d72:	bf00      	nop
 8004d74:	08004eed 	.word	0x08004eed
 8004d78:	08004eed 	.word	0x08004eed
 8004d7c:	08004d85 	.word	0x08004d85
 8004d80:	08004e2b 	.word	0x08004e2b

			break;
		case LED_CONFIRM_FLASH:

			//each color go from 00 to MAX_BRIGHTNESS to 00 over a second, 1000Hz=sec, ~512 steps, 2ms
			if (lastLoopMode != currentMode) { ds_fill(0xFFFFFF, 0, 12);}
 8004d84:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004d88:	7d7b      	ldrb	r3, [r7, #21]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d005      	beq.n	8004d9a <startLEDControl+0x10a>
 8004d8e:	220c      	movs	r2, #12
 8004d90:	2100      	movs	r1, #0
 8004d92:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8004d96:	f7fd fc4f 	bl	8002638 <ds_fill>
		    ds_setBrightness(stateVar1);
 8004d9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fd fc80 	bl	80026a4 <ds_setBrightness>
			ds_show();
 8004da4:	f7fd fb52 	bl	800244c <ds_show>

		    //increment color intensity
		    if (stateVar2) {stateVar1--;}
 8004da8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d005      	beq.n	8004dbc <startLEDControl+0x12c>
 8004db0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004db4:	3b01      	subs	r3, #1
 8004db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dba:	e004      	b.n	8004dc6 <startLEDControl+0x136>
		    else {stateVar1++;}
 8004dbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		    //if we hit a limit switch color scaling up or down
		    if (stateVar1 == MAX_BRIGHTNESS) {stateVar2 = 1;}
 8004dc6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004dca:	7dbb      	ldrb	r3, [r7, #22]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d102      	bne.n	8004dd6 <startLEDControl+0x146>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    if (stateVar1 == 0x00) {stateVar2 = 0;}
 8004dd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d102      	bne.n	8004de4 <startLEDControl+0x154>
 8004dde:	2300      	movs	r3, #0
 8004de0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

			osDelay(pdMS_TO_TICKS(2)); //2ms delay
 8004de4:	2002      	movs	r0, #2
 8004de6:	f00a fb95 	bl	800f514 <osDelay>

			if (++counter == (MAX_BRIGHTNESS*4)) { //if we hit 1 cycle here (= MAX_BRIGHTNESS*2,could *4 to set to two full cycles), set state to off
 8004dea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dec:	3301      	adds	r3, #1
 8004dee:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004df0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004df2:	7dbb      	ldrb	r3, [r7, #22]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d17a      	bne.n	8004ef0 <startLEDControl+0x260>
				ds_clear();
 8004dfa:	f7fd fbc3 	bl	8002584 <ds_clear>
				ds_show();
 8004dfe:	f7fd fb25 	bl	800244c <ds_show>
				ds_setBrightness(STANDARD_BRIGHTNESS);
 8004e02:	7dfb      	ldrb	r3, [r7, #23]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7fd fc4d 	bl	80026a4 <ds_setBrightness>

				osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 8004e0a:	4b3c      	ldr	r3, [pc, #240]	; (8004efc <startLEDControl+0x26c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f04f 31ff 	mov.w	r1, #4294967295
 8004e12:	4618      	mov	r0, r3
 8004e14:	f00a fc46 	bl	800f6a4 <osMutexAcquire>
				LedState.currentMode = LED_OFF;
 8004e18:	4b39      	ldr	r3, [pc, #228]	; (8004f00 <startLEDControl+0x270>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	701a      	strb	r2, [r3, #0]
				osMutexRelease(ledStateMutexHandle);
 8004e1e:	4b37      	ldr	r3, [pc, #220]	; (8004efc <startLEDControl+0x26c>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f00a fc9c 	bl	800f760 <osMutexRelease>
			}

			break;
 8004e28:	e062      	b.n	8004ef0 <startLEDControl+0x260>

		case LED_SPIRAL:

			//rotate fixed pattern around 12
			//modulo 12
			for (int i=0; i< NUM_PIXELS; i++){
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	61bb      	str	r3, [r7, #24]
 8004e2e:	e038      	b.n	8004ea2 <startLEDControl+0x212>

				if (i==(counter+2)%12){ color = 0xFFFFFF; }
 8004e30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e32:	1c99      	adds	r1, r3, #2
 8004e34:	4b35      	ldr	r3, [pc, #212]	; (8004f0c <startLEDControl+0x27c>)
 8004e36:	fb83 2301 	smull	r2, r3, r3, r1
 8004e3a:	105a      	asrs	r2, r3, #1
 8004e3c:	17cb      	asrs	r3, r1, #31
 8004e3e:	1ad2      	subs	r2, r2, r3
 8004e40:	4613      	mov	r3, r2
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	4413      	add	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	1aca      	subs	r2, r1, r3
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d103      	bne.n	8004e58 <startLEDControl+0x1c8>
 8004e50:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8004e54:	61fb      	str	r3, [r7, #28]
 8004e56:	e01b      	b.n	8004e90 <startLEDControl+0x200>
				else if (i==(counter+1)%12){ color = 0xD0D0D0; }
 8004e58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e5a:	1c59      	adds	r1, r3, #1
 8004e5c:	4b2b      	ldr	r3, [pc, #172]	; (8004f0c <startLEDControl+0x27c>)
 8004e5e:	fb83 2301 	smull	r2, r3, r3, r1
 8004e62:	105a      	asrs	r2, r3, #1
 8004e64:	17cb      	asrs	r3, r1, #31
 8004e66:	1ad2      	subs	r2, r2, r3
 8004e68:	4613      	mov	r3, r2
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	1aca      	subs	r2, r1, r3
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d102      	bne.n	8004e7e <startLEDControl+0x1ee>
 8004e78:	4b25      	ldr	r3, [pc, #148]	; (8004f10 <startLEDControl+0x280>)
 8004e7a:	61fb      	str	r3, [r7, #28]
 8004e7c:	e008      	b.n	8004e90 <startLEDControl+0x200>
				else if (i==counter)       { color = 0xA0A0A0; }
 8004e7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d102      	bne.n	8004e8c <startLEDControl+0x1fc>
 8004e86:	4b23      	ldr	r3, [pc, #140]	; (8004f14 <startLEDControl+0x284>)
 8004e88:	61fb      	str	r3, [r7, #28]
 8004e8a:	e001      	b.n	8004e90 <startLEDControl+0x200>
				else { color = 0x000000; }
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	61fb      	str	r3, [r7, #28]

				ds_setPixelColor32B(i, color); // 'off' pixel at head
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	69f9      	ldr	r1, [r7, #28]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fd fb98 	bl	80025cc <ds_setPixelColor32B>
			for (int i=0; i< NUM_PIXELS; i++){
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	61bb      	str	r3, [r7, #24]
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	2b0b      	cmp	r3, #11
 8004ea6:	ddc3      	ble.n	8004e30 <startLEDControl+0x1a0>
			}

			ds_show();
 8004ea8:	f7fd fad0 	bl	800244c <ds_show>
			counter = (counter+1)%12;
 8004eac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	4b16      	ldr	r3, [pc, #88]	; (8004f0c <startLEDControl+0x27c>)
 8004eb2:	fb83 1302 	smull	r1, r3, r3, r2
 8004eb6:	1059      	asrs	r1, r3, #1
 8004eb8:	17d3      	asrs	r3, r2, #31
 8004eba:	1ac9      	subs	r1, r1, r3
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	440b      	add	r3, r1
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	1ad1      	subs	r1, r2, r3
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	84bb      	strh	r3, [r7, #36]	; 0x24
			osDelay(pdMS_TO_TICKS(50));
 8004eca:	2032      	movs	r0, #50	; 0x32
 8004ecc:	f00a fb22 	bl	800f514 <osDelay>

			break;
 8004ed0:	e00f      	b.n	8004ef2 <startLEDControl+0x262>

		default: //case LED_OTHER, LED_OFF, LED_NONE
			if (lastLoopMode != currentMode) {
 8004ed2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004ed6:	7d7b      	ldrb	r3, [r7, #21]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d003      	beq.n	8004ee4 <startLEDControl+0x254>
				ds_clear();
 8004edc:	f7fd fb52 	bl	8002584 <ds_clear>
				ds_show();
 8004ee0:	f7fd fab4 	bl	800244c <ds_show>
			}
			osDelay(250);
 8004ee4:	20fa      	movs	r0, #250	; 0xfa
 8004ee6:	f00a fb15 	bl	800f514 <osDelay>
			break;
 8004eea:	e002      	b.n	8004ef2 <startLEDControl+0x262>
			break;
 8004eec:	bf00      	nop
 8004eee:	e000      	b.n	8004ef2 <startLEDControl+0x262>
			break;
 8004ef0:	bf00      	nop
	}

	lastLoopMode = currentMode;
 8004ef2:	7d7b      	ldrb	r3, [r7, #21]
 8004ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 8004ef8:	e70c      	b.n	8004d14 <startLEDControl+0x84>
 8004efa:	bf00      	nop
 8004efc:	20004ac0 	.word	0x20004ac0
 8004f00:	20004a84 	.word	0x20004a84
 8004f04:	20004b7c 	.word	0x20004b7c
 8004f08:	200048b4 	.word	0x200048b4
 8004f0c:	2aaaaaab 	.word	0x2aaaaaab
 8004f10:	00d0d0d0 	.word	0x00d0d0d0
 8004f14:	00a0a0a0 	.word	0x00a0a0a0

08004f18 <startButtonPress>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startButtonPress */
void startButtonPress(void *argument)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startButtonPress */
  /* Infinite loop */

  //Buttons are PULLED UP and drop to 0 when pressed
  uint8_t buttonState[] = {1, 1, 1};
 8004f20:	4a44      	ldr	r2, [pc, #272]	; (8005034 <startButtonPress+0x11c>)
 8004f22:	f107 0314 	add.w	r3, r7, #20
 8004f26:	6812      	ldr	r2, [r2, #0]
 8004f28:	4611      	mov	r1, r2
 8004f2a:	8019      	strh	r1, [r3, #0]
 8004f2c:	3302      	adds	r3, #2
 8004f2e:	0c12      	lsrs	r2, r2, #16
 8004f30:	701a      	strb	r2, [r3, #0]
  uint32_t callingPin = 0x00;
 8004f32:	2300      	movs	r3, #0
 8004f34:	613b      	str	r3, [r7, #16]

  for(;;)
  {
	//wait for rising or falling edge trigger, put calling pin in callingPin
	xTaskNotifyWait(0x00, 0x00, &callingPin, portMAX_DELAY);
 8004f36:	f107 0210 	add.w	r2, r7, #16
 8004f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f3e:	2100      	movs	r1, #0
 8004f40:	2000      	movs	r0, #0
 8004f42:	f00d fc97 	bl	8012874 <xTaskNotifyWait>

	//check state of pin
	GPIO_PinState first_read = HAL_GPIO_ReadPin(GPIOB, callingPin);
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	483a      	ldr	r0, [pc, #232]	; (8005038 <startButtonPress+0x120>)
 8004f4e:	f001 fe01 	bl	8006b54 <HAL_GPIO_ReadPin>
 8004f52:	4603      	mov	r3, r0
 8004f54:	75fb      	strb	r3, [r7, #23]

	//wait 50ms
    osDelay(50);
 8004f56:	2032      	movs	r0, #50	; 0x32
 8004f58:	f00a fadc 	bl	800f514 <osDelay>

    //check again (debounce) to get a good reading
	if (first_read == HAL_GPIO_ReadPin(GPIOB, callingPin)){
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	4619      	mov	r1, r3
 8004f62:	4835      	ldr	r0, [pc, #212]	; (8005038 <startButtonPress+0x120>)
 8004f64:	f001 fdf6 	bl	8006b54 <HAL_GPIO_ReadPin>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	7dfb      	ldrb	r3, [r7, #23]
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d1e1      	bne.n	8004f36 <startButtonPress+0x1e>
		//when this happens (except during debouncing) so we expect this to be true
		//almost always

		//callingPin can be used as bitmask Pin 5/4/3 give 1000000/10000/1000

		if (callingPin == 0b1000 && first_read != buttonState[0]) { //button 1 trigger
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	2b08      	cmp	r3, #8
 8004f76:	d11b      	bne.n	8004fb0 <startButtonPress+0x98>
 8004f78:	7d3b      	ldrb	r3, [r7, #20]
 8004f7a:	7dfa      	ldrb	r2, [r7, #23]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d017      	beq.n	8004fb0 <startButtonPress+0x98>
		  //set buttonState
		  buttonState[0] = first_read;
 8004f80:	7dfb      	ldrb	r3, [r7, #23]
 8004f82:	753b      	strb	r3, [r7, #20]

		  //do stuff if button pressed
		  if (!first_read){
 8004f84:	7dfb      	ldrb	r3, [r7, #23]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d102      	bne.n	8004f90 <startButtonPress+0x78>
		       	osDelay(100);
 8004f8a:	2064      	movs	r0, #100	; 0x64
 8004f8c:	f00a fac2 	bl	800f514 <osDelay>
		  }

		  		    //send BLE queue indicator; button 1 = 0x0
		  		    uint16_t bleval = 0x0000 | ((!first_read) << 8);
 8004f90:	7dfb      	ldrb	r3, [r7, #23]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d102      	bne.n	8004f9c <startButtonPress+0x84>
 8004f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f9a:	e000      	b.n	8004f9e <startButtonPress+0x86>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	81fb      	strh	r3, [r7, #14]
		  		    osMessageQueuePut(bleTXqueueHandle, &bleval, 0, 0);
 8004fa0:	4b26      	ldr	r3, [pc, #152]	; (800503c <startButtonPress+0x124>)
 8004fa2:	6818      	ldr	r0, [r3, #0]
 8004fa4:	f107 010e 	add.w	r1, r7, #14
 8004fa8:	2300      	movs	r3, #0
 8004faa:	2200      	movs	r2, #0
 8004fac:	f00a fe0a 	bl	800fbc4 <osMessageQueuePut>
		}
		if (callingPin == 0b10000 && first_read != buttonState[1]) { //button 2 trigger
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	2b10      	cmp	r3, #16
 8004fb4:	d11c      	bne.n	8004ff0 <startButtonPress+0xd8>
 8004fb6:	7d7b      	ldrb	r3, [r7, #21]
 8004fb8:	7dfa      	ldrb	r2, [r7, #23]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d018      	beq.n	8004ff0 <startButtonPress+0xd8>
		    //set buttonState
		    buttonState[1] = first_read;
 8004fbe:	7dfb      	ldrb	r3, [r7, #23]
 8004fc0:	757b      	strb	r3, [r7, #21]

		    //do stuff if button pressed
		    if (!first_read){
 8004fc2:	7dfb      	ldrb	r3, [r7, #23]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d102      	bne.n	8004fce <startButtonPress+0xb6>
		       	osDelay(100);
 8004fc8:	2064      	movs	r0, #100	; 0x64
 8004fca:	f00a faa3 	bl	800f514 <osDelay>
		    }

		    //send BLE queue indicator; button 2 = 0x1
		    uint16_t bleval = 0x1000 | ((!first_read) << 8);
 8004fce:	7dfb      	ldrb	r3, [r7, #23]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d102      	bne.n	8004fda <startButtonPress+0xc2>
 8004fd4:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8004fd8:	e001      	b.n	8004fde <startButtonPress+0xc6>
 8004fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fde:	81bb      	strh	r3, [r7, #12]
		    osMessageQueuePut(bleTXqueueHandle, &bleval, 0, 0);
 8004fe0:	4b16      	ldr	r3, [pc, #88]	; (800503c <startButtonPress+0x124>)
 8004fe2:	6818      	ldr	r0, [r3, #0]
 8004fe4:	f107 010c 	add.w	r1, r7, #12
 8004fe8:	2300      	movs	r3, #0
 8004fea:	2200      	movs	r2, #0
 8004fec:	f00a fdea 	bl	800fbc4 <osMessageQueuePut>
		}
		if (callingPin == 0b100000 && first_read != buttonState[2]) { //button 3 trigger
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	2b20      	cmp	r3, #32
 8004ff4:	d19f      	bne.n	8004f36 <startButtonPress+0x1e>
 8004ff6:	7dbb      	ldrb	r3, [r7, #22]
 8004ff8:	7dfa      	ldrb	r2, [r7, #23]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d09b      	beq.n	8004f36 <startButtonPress+0x1e>
		    //set buttonState
		    buttonState[2] = first_read;
 8004ffe:	7dfb      	ldrb	r3, [r7, #23]
 8005000:	75bb      	strb	r3, [r7, #22]

		    //do stuff if button pressed
		    if (!first_read){
 8005002:	7dfb      	ldrb	r3, [r7, #23]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d102      	bne.n	800500e <startButtonPress+0xf6>
		    	osDelay(100);
 8005008:	2064      	movs	r0, #100	; 0x64
 800500a:	f00a fa83 	bl	800f514 <osDelay>
		    }

		    //send BLE queue indicator; button 3 = 0x2
		    uint16_t bleval = 0x2000 | ((!first_read) << 8);
 800500e:	7dfb      	ldrb	r3, [r7, #23]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d102      	bne.n	800501a <startButtonPress+0x102>
 8005014:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8005018:	e001      	b.n	800501e <startButtonPress+0x106>
 800501a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800501e:	817b      	strh	r3, [r7, #10]
		    osMessageQueuePut(bleTXqueueHandle, &bleval, 0, 0);
 8005020:	4b06      	ldr	r3, [pc, #24]	; (800503c <startButtonPress+0x124>)
 8005022:	6818      	ldr	r0, [r3, #0]
 8005024:	f107 010a 	add.w	r1, r7, #10
 8005028:	2300      	movs	r3, #0
 800502a:	2200      	movs	r2, #0
 800502c:	f00a fdca 	bl	800fbc4 <osMessageQueuePut>
  {
 8005030:	e781      	b.n	8004f36 <startButtonPress+0x1e>
 8005032:	bf00      	nop
 8005034:	0801685c 	.word	0x0801685c
 8005038:	48000400 	.word	0x48000400
 800503c:	20004b70 	.word	0x20004b70

08005040 <startVibrateControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startVibrateControl */
void startVibrateControl(void *argument)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startVibrateControl */

  //HAL_GPIO_WritePin(VIBRATION_GPIO_Port, VIBRATION_Pin, GPIO_PIN_RESET);

  //Init Vibration Motor PWM Parameters
  int duty_cycle = 79; //0 is off, up to ~80
 8005048:	234f      	movs	r3, #79	; 0x4f
 800504a:	60fb      	str	r3, [r7, #12]
  htim1.Instance->CCR2 = duty_cycle;
 800504c:	4b0a      	ldr	r3, [pc, #40]	; (8005078 <startVibrateControl+0x38>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	639a      	str	r2, [r3, #56]	; 0x38

  /* Infinite loop */
  for(;;)
  {
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8005054:	2100      	movs	r1, #0
 8005056:	4808      	ldr	r0, [pc, #32]	; (8005078 <startVibrateControl+0x38>)
 8005058:	f005 fa62 	bl	800a520 <HAL_TIM_PWM_Start>

    osDelay(2000);
 800505c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005060:	f00a fa58 	bl	800f514 <osDelay>

    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8005064:	2100      	movs	r1, #0
 8005066:	4804      	ldr	r0, [pc, #16]	; (8005078 <startVibrateControl+0x38>)
 8005068:	f005 fb34 	bl	800a6d4 <HAL_TIM_PWM_Stop>

    osDelay(2000);
 800506c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005070:	f00a fa50 	bl	800f514 <osDelay>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8005074:	e7ee      	b.n	8005054 <startVibrateControl+0x14>
 8005076:	bf00      	nop
 8005078:	20004ac4 	.word	0x20004ac4

0800507c <startRTCTick>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startRTCTick */
void startRTCTick(void *argument)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b088      	sub	sp, #32
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startRTCTick */

	RTC_TimeTypeDef sTime = {0};
 8005084:	f107 0308 	add.w	r3, r7, #8
 8005088:	2200      	movs	r2, #0
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	605a      	str	r2, [r3, #4]
 800508e:	609a      	str	r2, [r3, #8]
 8005090:	60da      	str	r2, [r3, #12]
 8005092:	611a      	str	r2, [r3, #16]
    sTime.Hours      = 0x15;
 8005094:	2315      	movs	r3, #21
 8005096:	723b      	strb	r3, [r7, #8]
    sTime.Minutes    = 0x41;
 8005098:	2341      	movs	r3, #65	; 0x41
 800509a:	727b      	strb	r3, [r7, #9]
    sTime.Seconds    = 0x57;
 800509c:	2357      	movs	r3, #87	; 0x57
 800509e:	72bb      	strb	r3, [r7, #10]
    sTime.SubSeconds = 0x0;
 80050a0:	2300      	movs	r3, #0
 80050a2:	60fb      	str	r3, [r7, #12]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80050a4:	2300      	movs	r3, #0
 80050a6:	617b      	str	r3, [r7, #20]
   	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80050a8:	2300      	movs	r3, #0
 80050aa:	61bb      	str	r3, [r7, #24]

   	osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 80050ac:	4b6d      	ldr	r3, [pc, #436]	; (8005264 <startRTCTick+0x1e8>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f04f 31ff 	mov.w	r1, #4294967295
 80050b4:	4618      	mov	r0, r3
 80050b6:	f00a faf5 	bl	800f6a4 <osMutexAcquire>
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 80050ba:	f107 0308 	add.w	r3, r7, #8
 80050be:	2201      	movs	r2, #1
 80050c0:	4619      	mov	r1, r3
 80050c2:	4869      	ldr	r0, [pc, #420]	; (8005268 <startRTCTick+0x1ec>)
 80050c4:	f004 fad9 	bl	800967a <HAL_RTC_SetTime>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <startRTCTick+0x56>
	    Error_Handler();
 80050ce:	f000 fa5f 	bl	8005590 <Error_Handler>
	}
	osMutexRelease(rtcMutexHandle);
 80050d2:	4b64      	ldr	r3, [pc, #400]	; (8005264 <startRTCTick+0x1e8>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f00a fb42 	bl	800f760 <osMutexRelease>

  /* Infinite loop */
  for(;;)
  {
    osDelay(6000);
 80050dc:	f241 7070 	movw	r0, #6000	; 0x1770
 80050e0:	f00a fa18 	bl	800f514 <osDelay>

    osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 80050e4:	4b61      	ldr	r3, [pc, #388]	; (800526c <startRTCTick+0x1f0>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f04f 31ff 	mov.w	r1, #4294967295
 80050ec:	4618      	mov	r0, r3
 80050ee:	f00a fad9 	bl	800f6a4 <osMutexAcquire>
    LedState.currentMode = LED_SPIRAL;
 80050f2:	4b5f      	ldr	r3, [pc, #380]	; (8005270 <startRTCTick+0x1f4>)
 80050f4:	2205      	movs	r2, #5
 80050f6:	701a      	strb	r2, [r3, #0]
    osMutexRelease(ledStateMutexHandle);
 80050f8:	4b5c      	ldr	r3, [pc, #368]	; (800526c <startRTCTick+0x1f0>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f00a fb2f 	bl	800f760 <osMutexRelease>

    osDelay(3000);
 8005102:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005106:	f00a fa05 	bl	800f514 <osDelay>

    ScreenStatus_t newScreen = SCREEN_TIME;
 800510a:	2301      	movs	r3, #1
 800510c:	77fb      	strb	r3, [r7, #31]
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 800510e:	4b59      	ldr	r3, [pc, #356]	; (8005274 <startRTCTick+0x1f8>)
 8005110:	6818      	ldr	r0, [r3, #0]
 8005112:	7ff9      	ldrb	r1, [r7, #31]
 8005114:	2300      	movs	r3, #0
 8005116:	2203      	movs	r2, #3
 8005118:	f00d fc06 	bl	8012928 <xTaskGenericNotify>

    osDelay(3000);
 800511c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005120:	f00a f9f8 	bl	800f514 <osDelay>

    osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 8005124:	4b51      	ldr	r3, [pc, #324]	; (800526c <startRTCTick+0x1f0>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f04f 31ff 	mov.w	r1, #4294967295
 800512c:	4618      	mov	r0, r3
 800512e:	f00a fab9 	bl	800f6a4 <osMutexAcquire>
    LedState.currentMode = LED_CONFIRM_FLASH;
 8005132:	4b4f      	ldr	r3, [pc, #316]	; (8005270 <startRTCTick+0x1f4>)
 8005134:	2204      	movs	r2, #4
 8005136:	701a      	strb	r2, [r3, #0]
    osMutexRelease(ledStateMutexHandle);
 8005138:	4b4c      	ldr	r3, [pc, #304]	; (800526c <startRTCTick+0x1f0>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4618      	mov	r0, r3
 800513e:	f00a fb0f 	bl	800f760 <osMutexRelease>

    osDelay(1000);
 8005142:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005146:	f00a f9e5 	bl	800f514 <osDelay>

    osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 800514a:	4b48      	ldr	r3, [pc, #288]	; (800526c <startRTCTick+0x1f0>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f04f 31ff 	mov.w	r1, #4294967295
 8005152:	4618      	mov	r0, r3
 8005154:	f00a faa6 	bl	800f6a4 <osMutexAcquire>
    LedState.currentMode = LED_SPIRAL;
 8005158:	4b45      	ldr	r3, [pc, #276]	; (8005270 <startRTCTick+0x1f4>)
 800515a:	2205      	movs	r2, #5
 800515c:	701a      	strb	r2, [r3, #0]
    osMutexRelease(ledStateMutexHandle);
 800515e:	4b43      	ldr	r3, [pc, #268]	; (800526c <startRTCTick+0x1f0>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f00a fafc 	bl	800f760 <osMutexRelease>

    osDelay(3000);
 8005168:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800516c:	f00a f9d2 	bl	800f514 <osDelay>

    newScreen = SCREEN_TEXT;
 8005170:	2303      	movs	r3, #3
 8005172:	77fb      	strb	r3, [r7, #31]
	osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 8005174:	4b40      	ldr	r3, [pc, #256]	; (8005278 <startRTCTick+0x1fc>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f04f 31ff 	mov.w	r1, #4294967295
 800517c:	4618      	mov	r0, r3
 800517e:	f00a fa91 	bl	800f6a4 <osMutexAcquire>
	strncpy(ScreenState.screenText, "arbitrary", sizeof("arbitrary"));
 8005182:	4a3e      	ldr	r2, [pc, #248]	; (800527c <startRTCTick+0x200>)
 8005184:	4b3e      	ldr	r3, [pc, #248]	; (8005280 <startRTCTick+0x204>)
 8005186:	cb03      	ldmia	r3!, {r0, r1}
 8005188:	6010      	str	r0, [r2, #0]
 800518a:	6051      	str	r1, [r2, #4]
 800518c:	881b      	ldrh	r3, [r3, #0]
 800518e:	8113      	strh	r3, [r2, #8]
	osMutexRelease(screenTextMutexHandle);
 8005190:	4b39      	ldr	r3, [pc, #228]	; (8005278 <startRTCTick+0x1fc>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4618      	mov	r0, r3
 8005196:	f00a fae3 	bl	800f760 <osMutexRelease>
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 800519a:	4b36      	ldr	r3, [pc, #216]	; (8005274 <startRTCTick+0x1f8>)
 800519c:	6818      	ldr	r0, [r3, #0]
 800519e:	7ff9      	ldrb	r1, [r7, #31]
 80051a0:	2300      	movs	r3, #0
 80051a2:	2203      	movs	r2, #3
 80051a4:	f00d fbc0 	bl	8012928 <xTaskGenericNotify>

    osDelay(3000);
 80051a8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80051ac:	f00a f9b2 	bl	800f514 <osDelay>
        Error_Handler();
    }
    osMutexRelease(rtcMutexHandle);
	*/

    newScreen = SCREEN_TIME;
 80051b0:	2301      	movs	r3, #1
 80051b2:	77fb      	strb	r3, [r7, #31]
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 80051b4:	4b2f      	ldr	r3, [pc, #188]	; (8005274 <startRTCTick+0x1f8>)
 80051b6:	6818      	ldr	r0, [r3, #0]
 80051b8:	7ff9      	ldrb	r1, [r7, #31]
 80051ba:	2300      	movs	r3, #0
 80051bc:	2203      	movs	r2, #3
 80051be:	f00d fbb3 	bl	8012928 <xTaskGenericNotify>
    osDelay(1000);
 80051c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80051c6:	f00a f9a5 	bl	800f514 <osDelay>
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 80051ca:	4b2a      	ldr	r3, [pc, #168]	; (8005274 <startRTCTick+0x1f8>)
 80051cc:	6818      	ldr	r0, [r3, #0]
 80051ce:	7ff9      	ldrb	r1, [r7, #31]
 80051d0:	2300      	movs	r3, #0
 80051d2:	2203      	movs	r2, #3
 80051d4:	f00d fba8 	bl	8012928 <xTaskGenericNotify>
    osDelay(1000);
 80051d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80051dc:	f00a f99a 	bl	800f514 <osDelay>
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 80051e0:	4b24      	ldr	r3, [pc, #144]	; (8005274 <startRTCTick+0x1f8>)
 80051e2:	6818      	ldr	r0, [r3, #0]
 80051e4:	7ff9      	ldrb	r1, [r7, #31]
 80051e6:	2300      	movs	r3, #0
 80051e8:	2203      	movs	r2, #3
 80051ea:	f00d fb9d 	bl	8012928 <xTaskGenericNotify>
    osDelay(1000);
 80051ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80051f2:	f00a f98f 	bl	800f514 <osDelay>
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 80051f6:	4b1f      	ldr	r3, [pc, #124]	; (8005274 <startRTCTick+0x1f8>)
 80051f8:	6818      	ldr	r0, [r3, #0]
 80051fa:	7ff9      	ldrb	r1, [r7, #31]
 80051fc:	2300      	movs	r3, #0
 80051fe:	2203      	movs	r2, #3
 8005200:	f00d fb92 	bl	8012928 <xTaskGenericNotify>
    osDelay(1000);
 8005204:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005208:	f00a f984 	bl	800f514 <osDelay>


    osDelay(1000);
 800520c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005210:	f00a f980 	bl	800f514 <osDelay>

    newScreen = SCREEN_IMAGE;
 8005214:	2304      	movs	r3, #4
 8005216:	77fb      	strb	r3, [r7, #31]
   	osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 8005218:	4b17      	ldr	r3, [pc, #92]	; (8005278 <startRTCTick+0x1fc>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f04f 31ff 	mov.w	r1, #4294967295
 8005220:	4618      	mov	r0, r3
 8005222:	f00a fa3f 	bl	800f6a4 <osMutexAcquire>
   	ScreenState.screenImage = 1;
 8005226:	4b15      	ldr	r3, [pc, #84]	; (800527c <startRTCTick+0x200>)
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
   	osMutexRelease(screenTextMutexHandle);
 800522e:	4b12      	ldr	r3, [pc, #72]	; (8005278 <startRTCTick+0x1fc>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f00a fa94 	bl	800f760 <osMutexRelease>
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 8005238:	4b0e      	ldr	r3, [pc, #56]	; (8005274 <startRTCTick+0x1f8>)
 800523a:	6818      	ldr	r0, [r3, #0]
 800523c:	7ff9      	ldrb	r1, [r7, #31]
 800523e:	2300      	movs	r3, #0
 8005240:	2203      	movs	r2, #3
 8005242:	f00d fb71 	bl	8012928 <xTaskGenericNotify>

    osDelay(3000);
 8005246:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800524a:	f00a f963 	bl	800f514 <osDelay>

    newScreen = SCREEN_OFF;
 800524e:	2300      	movs	r3, #0
 8005250:	77fb      	strb	r3, [r7, #31]
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 8005252:	4b08      	ldr	r3, [pc, #32]	; (8005274 <startRTCTick+0x1f8>)
 8005254:	6818      	ldr	r0, [r3, #0]
 8005256:	7ff9      	ldrb	r1, [r7, #31]
 8005258:	2300      	movs	r3, #0
 800525a:	2203      	movs	r2, #3
 800525c:	f00d fb64 	bl	8012928 <xTaskGenericNotify>
  {
 8005260:	e73c      	b.n	80050dc <startRTCTick+0x60>
 8005262:	bf00      	nop
 8005264:	20004b78 	.word	0x20004b78
 8005268:	20004a8c 	.word	0x20004a8c
 800526c:	20004ac0 	.word	0x20004ac0
 8005270:	20004a84 	.word	0x20004a84
 8005274:	20004ab0 	.word	0x20004ab0
 8005278:	20004908 	.word	0x20004908
 800527c:	20004be0 	.word	0x20004be0
 8005280:	08016860 	.word	0x08016860

08005284 <startBLETX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBLETX */
void startBLETX(void *argument)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startBLETX */
  /* Infinite loop */
  for(;;)
  {
    osDelay(2000);
 800528c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005290:	f00a f940 	bl	800f514 <osDelay>
 8005294:	e7fa      	b.n	800528c <startBLETX+0x8>

08005296 <startBLERX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBLERX */
void startBLERX(void *argument)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b082      	sub	sp, #8
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startBLERX */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 800529e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80052a2:	f00a f937 	bl	800f514 <osDelay>
 80052a6:	e7fa      	b.n	800529e <startBLERX+0x8>

080052a8 <startLEDTimer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startLEDTimer */
void startLEDTimer(void *argument)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  //wait until notified
	  ulTaskNotifyTake( pdTRUE, portMAX_DELAY);
 80052b0:	f04f 31ff 	mov.w	r1, #4294967295
 80052b4:	2001      	movs	r0, #1
 80052b6:	f00d fa95 	bl	80127e4 <ulTaskNotifyTake>

	  //pull time of delay before updating LED state
	  osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 80052ba:	4b1c      	ldr	r3, [pc, #112]	; (800532c <startLEDTimer+0x84>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f04f 31ff 	mov.w	r1, #4294967295
 80052c2:	4618      	mov	r0, r3
 80052c4:	f00a f9ee 	bl	800f6a4 <osMutexAcquire>
	  waitState = LedState;
 80052c8:	4a19      	ldr	r2, [pc, #100]	; (8005330 <startLEDTimer+0x88>)
 80052ca:	f107 0308 	add.w	r3, r7, #8
 80052ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80052d2:	e883 0003 	stmia.w	r3, {r0, r1}
	  LedState.modeTimeout = 0;
 80052d6:	4b16      	ldr	r3, [pc, #88]	; (8005330 <startLEDTimer+0x88>)
 80052d8:	2200      	movs	r2, #0
 80052da:	605a      	str	r2, [r3, #4]
	  osMutexRelease(ledStateMutexHandle);
 80052dc:	4b13      	ldr	r3, [pc, #76]	; (800532c <startLEDTimer+0x84>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f00a fa3d 	bl	800f760 <osMutexRelease>

	  //delay
	  osDelay(waitState.modeTimeout);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f00a f913 	bl	800f514 <osDelay>

	  //update LED state in LedState
	  osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 80052ee:	4b0f      	ldr	r3, [pc, #60]	; (800532c <startLEDTimer+0x84>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f04f 31ff 	mov.w	r1, #4294967295
 80052f6:	4618      	mov	r0, r3
 80052f8:	f00a f9d4 	bl	800f6a4 <osMutexAcquire>
	  //check that state values haven't changed since
	  //started waiting before updating state
	  if (waitState.currentMode == LedState.currentMode && waitState.nextMode == LedState.nextMode) {
 80052fc:	7a3a      	ldrb	r2, [r7, #8]
 80052fe:	4b0c      	ldr	r3, [pc, #48]	; (8005330 <startLEDTimer+0x88>)
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d10b      	bne.n	800531e <startLEDTimer+0x76>
 8005306:	7a7a      	ldrb	r2, [r7, #9]
 8005308:	4b09      	ldr	r3, [pc, #36]	; (8005330 <startLEDTimer+0x88>)
 800530a:	785b      	ldrb	r3, [r3, #1]
 800530c:	429a      	cmp	r2, r3
 800530e:	d106      	bne.n	800531e <startLEDTimer+0x76>
		  LedState.currentMode = LedState.nextMode;
 8005310:	4b07      	ldr	r3, [pc, #28]	; (8005330 <startLEDTimer+0x88>)
 8005312:	785a      	ldrb	r2, [r3, #1]
 8005314:	4b06      	ldr	r3, [pc, #24]	; (8005330 <startLEDTimer+0x88>)
 8005316:	701a      	strb	r2, [r3, #0]
		  LedState.nextMode = LED_NONE;
 8005318:	4b05      	ldr	r3, [pc, #20]	; (8005330 <startLEDTimer+0x88>)
 800531a:	2200      	movs	r2, #0
 800531c:	705a      	strb	r2, [r3, #1]
	  }
	  osMutexRelease(ledStateMutexHandle);
 800531e:	4b03      	ldr	r3, [pc, #12]	; (800532c <startLEDTimer+0x84>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f00a fa1c 	bl	800f760 <osMutexRelease>
	  ulTaskNotifyTake( pdTRUE, portMAX_DELAY);
 8005328:	e7c2      	b.n	80052b0 <startLEDTimer+0x8>
 800532a:	bf00      	nop
 800532c:	20004ac0 	.word	0x20004ac0
 8005330:	20004a84 	.word	0x20004a84

08005334 <startTouchRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTouchRead */
void startTouchRead(void *argument)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTouchRead */

  int16_t current_minute = -1;
 800533c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005340:	827b      	strh	r3, [r7, #18]
  uint8_t touch_end_count = 0;
 8005342:	2300      	movs	r3, #0
 8005344:	75fb      	strb	r3, [r7, #23]
  uint16_t last_minute = -1;
 8005346:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800534a:	82bb      	strh	r3, [r7, #20]
  #define TOUCH_END_TIMEOUT 6

  osDelay(3000); // give screen time to turn on.
 800534c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005350:	f00a f8e0 	bl	800f514 <osDelay>

  //init peripheral (not turbo mode, poll every 250ms, if touch sample at 40Hz until no touch)
  if (setup_iqs263() == HAL_ERROR) {
 8005354:	f7fe fdb8 	bl	8003ec8 <setup_iqs263>
 8005358:	4603      	mov	r3, r0
 800535a:	2b01      	cmp	r3, #1
 800535c:	d11b      	bne.n	8005396 <startTouchRead+0x62>

	  osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 800535e:	4b37      	ldr	r3, [pc, #220]	; (800543c <startTouchRead+0x108>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f04f 31ff 	mov.w	r1, #4294967295
 8005366:	4618      	mov	r0, r3
 8005368:	f00a f99c 	bl	800f6a4 <osMutexAcquire>
	  strncpy(ScreenState.screenText, "touch fail", sizeof("touch fail"));
 800536c:	4a34      	ldr	r2, [pc, #208]	; (8005440 <startTouchRead+0x10c>)
 800536e:	4b35      	ldr	r3, [pc, #212]	; (8005444 <startTouchRead+0x110>)
 8005370:	cb03      	ldmia	r3!, {r0, r1}
 8005372:	6010      	str	r0, [r2, #0]
 8005374:	6051      	str	r1, [r2, #4]
 8005376:	8819      	ldrh	r1, [r3, #0]
 8005378:	789b      	ldrb	r3, [r3, #2]
 800537a:	8111      	strh	r1, [r2, #8]
 800537c:	7293      	strb	r3, [r2, #10]
	  osMutexRelease(screenTextMutexHandle);
 800537e:	4b2f      	ldr	r3, [pc, #188]	; (800543c <startTouchRead+0x108>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4618      	mov	r0, r3
 8005384:	f00a f9ec 	bl	800f760 <osMutexRelease>
	  xTaskNotify(screenUpdateHandle, (uint32_t)SCREEN_TEXT, eSetValueWithOverwrite);
 8005388:	4b2f      	ldr	r3, [pc, #188]	; (8005448 <startTouchRead+0x114>)
 800538a:	6818      	ldr	r0, [r3, #0]
 800538c:	2300      	movs	r3, #0
 800538e:	2203      	movs	r2, #3
 8005390:	2103      	movs	r1, #3
 8005392:	f00d fac9 	bl	8012928 <xTaskGenericNotify>
  }

  /* Infinite loop */
  for(;;)
  {
   current_minute = iqs263_get_min_if_pressed(); //returns -1 if no press
 8005396:	f7fe fe35 	bl	8004004 <iqs263_get_min_if_pressed>
 800539a:	4603      	mov	r3, r0
 800539c:	827b      	strh	r3, [r7, #18]
   if (current_minute != -1) { //touch!
 800539e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80053a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a6:	d011      	beq.n	80053cc <startTouchRead+0x98>

	   touch_end_count = 1;
 80053a8:	2301      	movs	r3, #1
 80053aa:	75fb      	strb	r3, [r7, #23]

	   if (last_minute != current_minute) {
 80053ac:	8aba      	ldrh	r2, [r7, #20]
 80053ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d006      	beq.n	80053c4 <startTouchRead+0x90>
		   //update touch stuff!
		   last_minute = current_minute;
 80053b6:	8a7b      	ldrh	r3, [r7, #18]
 80053b8:	82bb      	strh	r3, [r7, #20]
	   	   er_oled_print_2digit(current_minute);
 80053ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fd fcb6 	bl	8002d30 <er_oled_print_2digit>
	   }

	   //optional
	   osDelay(25);
 80053c4:	2019      	movs	r0, #25
 80053c6:	f00a f8a5 	bl	800f514 <osDelay>
 80053ca:	e7e4      	b.n	8005396 <startTouchRead+0x62>
	   strncpy(ScreenState.screenText, str, sizeof(str));
	   osMutexRelease(screenTextMutexHandle);
	   xTaskNotify(screenUpdateHandle, (uint32_t)SCREEN_TEXT, eSetValueWithOverwrite);
	   */

   } else if (touch_end_count > 0){
 80053cc:	7dfb      	ldrb	r3, [r7, #23]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d02f      	beq.n	8005432 <startTouchRead+0xfe>

	   touch_end_count += 1;//increment touching_end_count
 80053d2:	7dfb      	ldrb	r3, [r7, #23]
 80053d4:	3301      	adds	r3, #1
 80053d6:	75fb      	strb	r3, [r7, #23]

	   if (touch_end_count >= TOUCH_END_TIMEOUT){  //if it hits this value, we're done
 80053d8:	7dfb      	ldrb	r3, [r7, #23]
 80053da:	2b05      	cmp	r3, #5
 80053dc:	d925      	bls.n	800542a <startTouchRead+0xf6>

		   touch_end_count = 0;
 80053de:	2300      	movs	r3, #0
 80053e0:	75fb      	strb	r3, [r7, #23]

		   //DO THINGS WITH CONFIRMED TOUCH == LAST_MINUTE
		   osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 80053e2:	4b16      	ldr	r3, [pc, #88]	; (800543c <startTouchRead+0x108>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f04f 31ff 	mov.w	r1, #4294967295
 80053ea:	4618      	mov	r0, r3
 80053ec:	f00a f95a 	bl	800f6a4 <osMutexAcquire>
		   char out_text[10];
		   sprintf(out_text, "FINAL: %d", last_minute);
 80053f0:	8aba      	ldrh	r2, [r7, #20]
 80053f2:	f107 0308 	add.w	r3, r7, #8
 80053f6:	4915      	ldr	r1, [pc, #84]	; (800544c <startTouchRead+0x118>)
 80053f8:	4618      	mov	r0, r3
 80053fa:	f00e fdd3 	bl	8013fa4 <siprintf>
		   strncpy(ScreenState.screenText, out_text, sizeof(out_text));
 80053fe:	f107 0308 	add.w	r3, r7, #8
 8005402:	220a      	movs	r2, #10
 8005404:	4619      	mov	r1, r3
 8005406:	480e      	ldr	r0, [pc, #56]	; (8005440 <startTouchRead+0x10c>)
 8005408:	f00e fdec 	bl	8013fe4 <strncpy>
		   osMutexRelease(screenTextMutexHandle);
 800540c:	4b0b      	ldr	r3, [pc, #44]	; (800543c <startTouchRead+0x108>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4618      	mov	r0, r3
 8005412:	f00a f9a5 	bl	800f760 <osMutexRelease>
		   xTaskNotify(screenUpdateHandle, (uint32_t)SCREEN_TEXT, eSetValueWithOverwrite);
 8005416:	4b0c      	ldr	r3, [pc, #48]	; (8005448 <startTouchRead+0x114>)
 8005418:	6818      	ldr	r0, [r3, #0]
 800541a:	2300      	movs	r3, #0
 800541c:	2203      	movs	r2, #3
 800541e:	2103      	movs	r1, #3
 8005420:	f00d fa82 	bl	8012928 <xTaskGenericNotify>

		   last_minute = -1;
 8005424:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005428:	82bb      	strh	r3, [r7, #20]

	   }

	   osDelay(25);
 800542a:	2019      	movs	r0, #25
 800542c:	f00a f872 	bl	800f514 <osDelay>
 8005430:	e7b1      	b.n	8005396 <startTouchRead+0x62>


   }else { //no touch, wait for a touch
    osDelay(250);
 8005432:	20fa      	movs	r0, #250	; 0xfa
 8005434:	f00a f86e 	bl	800f514 <osDelay>
   current_minute = iqs263_get_min_if_pressed(); //returns -1 if no press
 8005438:	e7ad      	b.n	8005396 <startTouchRead+0x62>
 800543a:	bf00      	nop
 800543c:	20004908 	.word	0x20004908
 8005440:	20004be0 	.word	0x20004be0
 8005444:	0801686c 	.word	0x0801686c
 8005448:	20004ab0 	.word	0x20004ab0
 800544c:	08016878 	.word	0x08016878

08005450 <PeriphClock_Config>:




void PeriphClock_Config(void)
{
 8005450:	b480      	push	{r7}
 8005452:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 8005454:	bf00      	nop
}
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b082      	sub	sp, #8
 8005462:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8005464:	2000      	movs	r0, #0
 8005466:	f009 f969 	bl	800e73c <OTP_Read>
 800546a:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d005      	beq.n	800547e <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	799b      	ldrb	r3, [r3, #6]
 8005476:	4618      	mov	r0, r3
 8005478:	f7fe fe06 	bl	8004088 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800547c:	bf00      	nop
 800547e:	bf00      	nop
}  
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <Reset_Device>:


static void Reset_Device( void )
{
 8005486:	b580      	push	{r7, lr}
 8005488:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
	Reset_BackupDomain();
 800548a:	f000 f827 	bl	80054dc <Reset_BackupDomain>

	Reset_IPCC();
 800548e:	f000 f803 	bl	8005498 <Reset_IPCC>
#endif

	return;
 8005492:	bf00      	nop
}
 8005494:	bd80      	pop	{r7, pc}
	...

08005498 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 800549c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80054a0:	f7fe fe87 	bl	80041b2 <LL_AHB3_GRP1_EnableClock>

	LL_C1_IPCC_ClearFlag_CHx(
 80054a4:	213f      	movs	r1, #63	; 0x3f
 80054a6:	480c      	ldr	r0, [pc, #48]	; (80054d8 <Reset_IPCC+0x40>)
 80054a8:	f7fe fee2 	bl	8004270 <LL_C1_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_ClearFlag_CHx(
 80054ac:	213f      	movs	r1, #63	; 0x3f
 80054ae:	480a      	ldr	r0, [pc, #40]	; (80054d8 <Reset_IPCC+0x40>)
 80054b0:	f7fe feec 	bl	800428c <LL_C2_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableTransmitChannel(
 80054b4:	213f      	movs	r1, #63	; 0x3f
 80054b6:	4808      	ldr	r0, [pc, #32]	; (80054d8 <Reset_IPCC+0x40>)
 80054b8:	f7fe fe94 	bl	80041e4 <LL_C1_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableTransmitChannel(
 80054bc:	213f      	movs	r1, #63	; 0x3f
 80054be:	4806      	ldr	r0, [pc, #24]	; (80054d8 <Reset_IPCC+0x40>)
 80054c0:	f7fe feb3 	bl	800422a <LL_C2_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableReceiveChannel(
 80054c4:	213f      	movs	r1, #63	; 0x3f
 80054c6:	4804      	ldr	r0, [pc, #16]	; (80054d8 <Reset_IPCC+0x40>)
 80054c8:	f7fe fe9e 	bl	8004208 <LL_C1_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableReceiveChannel(
 80054cc:	213f      	movs	r1, #63	; 0x3f
 80054ce:	4802      	ldr	r0, [pc, #8]	; (80054d8 <Reset_IPCC+0x40>)
 80054d0:	f7fe febd 	bl	800424e <LL_C2_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	return;
 80054d4:	bf00      	nop
}
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	58000c00 	.word	0x58000c00

080054dc <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80054e0:	f7fe fe28 	bl	8004134 <LL_RCC_IsActiveFlag_PINRST>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00d      	beq.n	8005506 <Reset_BackupDomain+0x2a>
 80054ea:	f7fe fe36 	bl	800415a <LL_RCC_IsActiveFlag_SFTRST>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d108      	bne.n	8005506 <Reset_BackupDomain+0x2a>
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80054f4:	f002 fa00 	bl	80078f8 <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 80054f8:	f002 f9fe 	bl	80078f8 <HAL_PWR_EnableBkUpAccess>

		__HAL_RCC_BACKUPRESET_FORCE();
 80054fc:	f7fe fdf8 	bl	80040f0 <LL_RCC_ForceBackupDomainReset>
		__HAL_RCC_BACKUPRESET_RELEASE();
 8005500:	f7fe fe07 	bl	8004112 <LL_RCC_ReleaseBackupDomainReset>
	}

	return;
 8005504:	bf00      	nop
 8005506:	bf00      	nop
}
 8005508:	bd80      	pop	{r7, pc}

0800550a <Init_Exti>:

static void Init_Exti( void )
{
 800550a:	b580      	push	{r7, lr}
 800550c:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 800550e:	f04f 30ff 	mov.w	r0, #4294967295
 8005512:	f7fe fd8d 	bl	8004030 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 8005516:	f06f 0050 	mvn.w	r0, #80	; 0x50
 800551a:	f7fe fd9f 	bl	800405c <LL_EXTI_DisableIT_32_63>

  return;
 800551e:	bf00      	nop
}
 8005520:	bd80      	pop	{r7, pc}

08005522 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b084      	sub	sp, #16
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800552a:	f000 fcf7 	bl	8005f1c <HAL_GetTick>
 800552e:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553a:	d00a      	beq.n	8005552 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800553c:	f000 fd06 	bl	8005f4c <HAL_GetTickFreq>
 8005540:	4603      	mov	r3, r0
 8005542:	461a      	mov	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4413      	add	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800554a:	e002      	b.n	8005552 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800554c:	f7fe feac 	bl	80042a8 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8005550:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8005552:	f000 fce3 	bl	8005f1c <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	429a      	cmp	r2, r3
 8005560:	d8f4      	bhi.n	800554c <HAL_Delay+0x2a>
  }
}
 8005562:	bf00      	nop
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
	...

0800556c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a04      	ldr	r2, [pc, #16]	; (800558c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d101      	bne.n	8005582 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800557e:	f000 fcb9 	bl	8005ef4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005582:	bf00      	nop
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	40014800 	.word	0x40014800

08005590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005590:	b480      	push	{r7}
 8005592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 
  /* USER CODE END Error_Handler_Debug */
}
 8005594:	bf00      	nop
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <LL_RCC_SetRTCClockSource>:
{
 800559e:	b480      	push	{r7}
 80055a0:	b083      	sub	sp, #12
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80055a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <LL_RCC_EnableRTC>:
{
 80055ca:	b480      	push	{r7}
 80055cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80055ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80055e2:	bf00      	nop
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <LL_AHB2_GRP1_EnableClock>:
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80055f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4313      	orrs	r3, r2
 8005602:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005608:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4013      	ands	r3, r2
 800560e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005610:	68fb      	ldr	r3, [r7, #12]
}
 8005612:	bf00      	nop
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <LL_AHB3_GRP1_EnableClock>:
{
 800561e:	b480      	push	{r7}
 8005620:	b085      	sub	sp, #20
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8005626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800562a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800562c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4313      	orrs	r3, r2
 8005634:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8005636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800563a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4013      	ands	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005642:	68fb      	ldr	r3, [r7, #12]
}
 8005644:	bf00      	nop
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <LL_APB1_GRP1_EnableClock>:
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800565c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800565e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4313      	orrs	r3, r2
 8005666:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800566c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4013      	ands	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005674:	68fb      	ldr	r3, [r7, #12]
}
 8005676:	bf00      	nop
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <LL_APB1_GRP2_EnableClock>:
{
 8005682:	b480      	push	{r7}
 8005684:	b085      	sub	sp, #20
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 800568a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800568e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005690:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4313      	orrs	r3, r2
 8005698:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800569a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800569e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4013      	ands	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80056a6:	68fb      	ldr	r3, [r7, #12]
}
 80056a8:	bf00      	nop
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <LL_APB2_GRP1_EnableClock>:
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80056bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80056c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80056cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4013      	ands	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80056d8:	68fb      	ldr	r3, [r7, #12]
}
 80056da:	bf00      	nop
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80056ea:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80056ee:	f7ff ff96 	bl	800561e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80056f2:	2200      	movs	r2, #0
 80056f4:	210f      	movs	r1, #15
 80056f6:	f06f 0001 	mvn.w	r0, #1
 80056fa:	f000 fd55 	bl	80061a8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 80056fe:	2200      	movs	r2, #0
 8005700:	2105      	movs	r1, #5
 8005702:	202e      	movs	r0, #46	; 0x2e
 8005704:	f000 fd50 	bl	80061a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8005708:	202e      	movs	r0, #46	; 0x2e
 800570a:	f000 fd67 	bl	80061dc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 6, 0);
 800570e:	2200      	movs	r2, #0
 8005710:	2106      	movs	r1, #6
 8005712:	202c      	movs	r0, #44	; 0x2c
 8005714:	f000 fd48 	bl	80061a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 6, 0);
 8005718:	2200      	movs	r2, #0
 800571a:	2106      	movs	r1, #6
 800571c:	202d      	movs	r0, #45	; 0x2d
 800571e:	f000 fd43 	bl	80061a8 <HAL_NVIC_SetPriority>

  /* USER CODE END MspInit 1 */
}
 8005722:	bf00      	nop
 8005724:	bd80      	pop	{r7, pc}
	...

08005728 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08c      	sub	sp, #48	; 0x30
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005730:	f107 031c 	add.w	r3, r7, #28
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	605a      	str	r2, [r3, #4]
 800573a:	609a      	str	r2, [r3, #8]
 800573c:	60da      	str	r2, [r3, #12]
 800573e:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  if(huart->Instance==LPUART1)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a6c      	ldr	r2, [pc, #432]	; (80058f8 <HAL_UART_MspInit+0x1d0>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d16f      	bne.n	800582a <HAL_UART_MspInit+0x102>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800574a:	2001      	movs	r0, #1
 800574c:	f7ff ff99 	bl	8005682 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005750:	2001      	movs	r0, #1
 8005752:	f7ff ff4b 	bl	80055ec <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    PA6     ------> LPUART1_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005756:	230c      	movs	r3, #12
 8005758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800575a:	2302      	movs	r3, #2
 800575c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800575e:	2300      	movs	r3, #0
 8005760:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005762:	2303      	movs	r3, #3
 8005764:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8005766:	2308      	movs	r3, #8
 8005768:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800576a:	f107 031c 	add.w	r3, r7, #28
 800576e:	4619      	mov	r1, r3
 8005770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005774:	f001 f87e 	bl	8006874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005778:	2340      	movs	r3, #64	; 0x40
 800577a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800577c:	2302      	movs	r3, #2
 800577e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005780:	2300      	movs	r3, #0
 8005782:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005784:	2300      	movs	r3, #0
 8005786:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8005788:	2308      	movs	r3, #8
 800578a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800578c:	f107 031c 	add.w	r3, r7, #28
 8005790:	4619      	mov	r1, r3
 8005792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005796:	f001 f86d 	bl	8006874 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 800579a:	4b58      	ldr	r3, [pc, #352]	; (80058fc <HAL_UART_MspInit+0x1d4>)
 800579c:	4a58      	ldr	r2, [pc, #352]	; (8005900 <HAL_UART_MspInit+0x1d8>)
 800579e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80057a0:	4b56      	ldr	r3, [pc, #344]	; (80058fc <HAL_UART_MspInit+0x1d4>)
 80057a2:	2211      	movs	r2, #17
 80057a4:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80057a6:	4b55      	ldr	r3, [pc, #340]	; (80058fc <HAL_UART_MspInit+0x1d4>)
 80057a8:	2210      	movs	r2, #16
 80057aa:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057ac:	4b53      	ldr	r3, [pc, #332]	; (80058fc <HAL_UART_MspInit+0x1d4>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80057b2:	4b52      	ldr	r3, [pc, #328]	; (80058fc <HAL_UART_MspInit+0x1d4>)
 80057b4:	2280      	movs	r2, #128	; 0x80
 80057b6:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80057b8:	4b50      	ldr	r3, [pc, #320]	; (80058fc <HAL_UART_MspInit+0x1d4>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80057be:	4b4f      	ldr	r3, [pc, #316]	; (80058fc <HAL_UART_MspInit+0x1d4>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80057c4:	4b4d      	ldr	r3, [pc, #308]	; (80058fc <HAL_UART_MspInit+0x1d4>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80057ca:	4b4c      	ldr	r3, [pc, #304]	; (80058fc <HAL_UART_MspInit+0x1d4>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80057d0:	484a      	ldr	r0, [pc, #296]	; (80058fc <HAL_UART_MspInit+0x1d4>)
 80057d2:	f000 fd3b 	bl	800624c <HAL_DMA_Init>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d001      	beq.n	80057e0 <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 80057dc:	f7ff fed8 	bl	8005590 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 80057e0:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 80057e4:	60fb      	str	r3, [r7, #12]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80057e6:	2300      	movs	r3, #0
 80057e8:	613b      	str	r3, [r7, #16]
    pSyncConfig.SyncEnable = DISABLE;
 80057ea:	2300      	movs	r3, #0
 80057ec:	753b      	strb	r3, [r7, #20]
    pSyncConfig.EventEnable = DISABLE;
 80057ee:	2300      	movs	r3, #0
 80057f0:	757b      	strb	r3, [r7, #21]
    pSyncConfig.RequestNumber = 1;
 80057f2:	2301      	movs	r3, #1
 80057f4:	61bb      	str	r3, [r7, #24]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 80057f6:	f107 030c 	add.w	r3, r7, #12
 80057fa:	4619      	mov	r1, r3
 80057fc:	483f      	ldr	r0, [pc, #252]	; (80058fc <HAL_UART_MspInit+0x1d4>)
 80057fe:	f000 fff9 	bl	80067f4 <HAL_DMAEx_ConfigMuxSync>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8005808:	f7ff fec2 	bl	8005590 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a3b      	ldr	r2, [pc, #236]	; (80058fc <HAL_UART_MspInit+0x1d4>)
 8005810:	675a      	str	r2, [r3, #116]	; 0x74
 8005812:	4a3a      	ldr	r2, [pc, #232]	; (80058fc <HAL_UART_MspInit+0x1d4>)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8005818:	2200      	movs	r2, #0
 800581a:	2105      	movs	r1, #5
 800581c:	2025      	movs	r0, #37	; 0x25
 800581e:	f000 fcc3 	bl	80061a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8005822:	2025      	movs	r0, #37	; 0x25
 8005824:	f000 fcda 	bl	80061dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005828:	e061      	b.n	80058ee <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==USART1)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a35      	ldr	r2, [pc, #212]	; (8005904 <HAL_UART_MspInit+0x1dc>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d15c      	bne.n	80058ee <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005834:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005838:	f7ff ff3c 	bl	80056b4 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800583c:	2001      	movs	r0, #1
 800583e:	f7ff fed5 	bl	80055ec <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005842:	2002      	movs	r0, #2
 8005844:	f7ff fed2 	bl	80055ec <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005848:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800584c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800584e:	2302      	movs	r3, #2
 8005850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005852:	2300      	movs	r3, #0
 8005854:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005856:	2300      	movs	r3, #0
 8005858:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800585a:	2307      	movs	r3, #7
 800585c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800585e:	f107 031c 	add.w	r3, r7, #28
 8005862:	4619      	mov	r1, r3
 8005864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005868:	f001 f804 	bl	8006874 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800586c:	23c0      	movs	r3, #192	; 0xc0
 800586e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005870:	2302      	movs	r3, #2
 8005872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005874:	2301      	movs	r3, #1
 8005876:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005878:	2303      	movs	r3, #3
 800587a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800587c:	2307      	movs	r3, #7
 800587e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005880:	f107 031c 	add.w	r3, r7, #28
 8005884:	4619      	mov	r1, r3
 8005886:	4820      	ldr	r0, [pc, #128]	; (8005908 <HAL_UART_MspInit+0x1e0>)
 8005888:	f000 fff4 	bl	8006874 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 800588c:	4b1f      	ldr	r3, [pc, #124]	; (800590c <HAL_UART_MspInit+0x1e4>)
 800588e:	4a20      	ldr	r2, [pc, #128]	; (8005910 <HAL_UART_MspInit+0x1e8>)
 8005890:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8005892:	4b1e      	ldr	r3, [pc, #120]	; (800590c <HAL_UART_MspInit+0x1e4>)
 8005894:	220f      	movs	r2, #15
 8005896:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005898:	4b1c      	ldr	r3, [pc, #112]	; (800590c <HAL_UART_MspInit+0x1e4>)
 800589a:	2210      	movs	r2, #16
 800589c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800589e:	4b1b      	ldr	r3, [pc, #108]	; (800590c <HAL_UART_MspInit+0x1e4>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80058a4:	4b19      	ldr	r3, [pc, #100]	; (800590c <HAL_UART_MspInit+0x1e4>)
 80058a6:	2280      	movs	r2, #128	; 0x80
 80058a8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80058aa:	4b18      	ldr	r3, [pc, #96]	; (800590c <HAL_UART_MspInit+0x1e4>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80058b0:	4b16      	ldr	r3, [pc, #88]	; (800590c <HAL_UART_MspInit+0x1e4>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80058b6:	4b15      	ldr	r3, [pc, #84]	; (800590c <HAL_UART_MspInit+0x1e4>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80058bc:	4b13      	ldr	r3, [pc, #76]	; (800590c <HAL_UART_MspInit+0x1e4>)
 80058be:	2200      	movs	r2, #0
 80058c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80058c2:	4812      	ldr	r0, [pc, #72]	; (800590c <HAL_UART_MspInit+0x1e4>)
 80058c4:	f000 fcc2 	bl	800624c <HAL_DMA_Init>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 80058ce:	f7ff fe5f 	bl	8005590 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a0d      	ldr	r2, [pc, #52]	; (800590c <HAL_UART_MspInit+0x1e4>)
 80058d6:	675a      	str	r2, [r3, #116]	; 0x74
 80058d8:	4a0c      	ldr	r2, [pc, #48]	; (800590c <HAL_UART_MspInit+0x1e4>)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80058de:	2200      	movs	r2, #0
 80058e0:	2105      	movs	r1, #5
 80058e2:	2024      	movs	r0, #36	; 0x24
 80058e4:	f000 fc60 	bl	80061a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80058e8:	2024      	movs	r0, #36	; 0x24
 80058ea:	f000 fc77 	bl	80061dc <HAL_NVIC_EnableIRQ>
}
 80058ee:	bf00      	nop
 80058f0:	3730      	adds	r7, #48	; 0x30
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	40008000 	.word	0x40008000
 80058fc:	20004b10 	.word	0x20004b10
 8005900:	40020044 	.word	0x40020044
 8005904:	40013800 	.word	0x40013800
 8005908:	48000400 	.word	0x48000400
 800590c:	20004998 	.word	0x20004998
 8005910:	40020444 	.word	0x40020444

08005914 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a0b      	ldr	r2, [pc, #44]	; (8005950 <HAL_RTC_MspInit+0x3c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d110      	bne.n	8005948 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8005926:	f001 ffe7 	bl	80078f8 <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 800592a:	f001 ffe5 	bl	80078f8 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 800592e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005932:	f7ff fe34 	bl	800559e <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005936:	f7ff fe48 	bl	80055ca <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800593a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800593e:	f7ff fe87 	bl	8005650 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f004 f940 	bl	8009bc8 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005948:	bf00      	nop
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	40002800 	.word	0x40002800

08005954 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800595c:	f107 030c 	add.w	r3, r7, #12
 8005960:	2200      	movs	r2, #0
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	605a      	str	r2, [r3, #4]
 8005966:	609a      	str	r2, [r3, #8]
 8005968:	60da      	str	r2, [r3, #12]
 800596a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a0f      	ldr	r2, [pc, #60]	; (80059b0 <HAL_I2C_MspInit+0x5c>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d117      	bne.n	80059a6 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005976:	2002      	movs	r0, #2
 8005978:	f7ff fe38 	bl	80055ec <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800597c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005980:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005982:	2312      	movs	r3, #18
 8005984:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005986:	2301      	movs	r3, #1
 8005988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800598a:	2300      	movs	r3, #0
 800598c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800598e:	2304      	movs	r3, #4
 8005990:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005992:	f107 030c 	add.w	r3, r7, #12
 8005996:	4619      	mov	r1, r3
 8005998:	4806      	ldr	r0, [pc, #24]	; (80059b4 <HAL_I2C_MspInit+0x60>)
 800599a:	f000 ff6b 	bl	8006874 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800599e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80059a2:	f7ff fe55 	bl	8005650 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80059a6:	bf00      	nop
 80059a8:	3720      	adds	r7, #32
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	40005400 	.word	0x40005400
 80059b4:	48000400 	.word	0x48000400

080059b8 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b088      	sub	sp, #32
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059c0:	f107 030c 	add.w	r3, r7, #12
 80059c4:	2200      	movs	r2, #0
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	605a      	str	r2, [r3, #4]
 80059ca:	609a      	str	r2, [r3, #8]
 80059cc:	60da      	str	r2, [r3, #12]
 80059ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a0f      	ldr	r2, [pc, #60]	; (8005a14 <HAL_SPI_MspInit+0x5c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d117      	bne.n	8005a0a <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80059da:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80059de:	f7ff fe69 	bl	80056b4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059e2:	2001      	movs	r0, #1
 80059e4:	f7ff fe02 	bl	80055ec <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 80059e8:	2382      	movs	r3, #130	; 0x82
 80059ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ec:	2302      	movs	r3, #2
 80059ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059f0:	2300      	movs	r3, #0
 80059f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059f4:	2300      	movs	r3, #0
 80059f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80059f8:	2305      	movs	r3, #5
 80059fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059fc:	f107 030c 	add.w	r3, r7, #12
 8005a00:	4619      	mov	r1, r3
 8005a02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a06:	f000 ff35 	bl	8006874 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005a0a:	bf00      	nop
 8005a0c:	3720      	adds	r7, #32
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	40013000 	.word	0x40013000

08005a18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a09      	ldr	r2, [pc, #36]	; (8005a4c <HAL_TIM_Base_MspInit+0x34>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d10b      	bne.n	8005a42 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005a2a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005a2e:	f7ff fe41 	bl	80056b4 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8005a32:	2200      	movs	r2, #0
 8005a34:	210f      	movs	r1, #15
 8005a36:	2019      	movs	r0, #25
 8005a38:	f000 fbb6 	bl	80061a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005a3c:	2019      	movs	r0, #25
 8005a3e:	f000 fbcd 	bl	80061dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8005a42:	bf00      	nop
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	40012c00 	.word	0x40012c00

08005a50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b088      	sub	sp, #32
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a58:	f107 030c 	add.w	r3, r7, #12
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	605a      	str	r2, [r3, #4]
 8005a62:	609a      	str	r2, [r3, #8]
 8005a64:	60da      	str	r2, [r3, #12]
 8005a66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a0d      	ldr	r2, [pc, #52]	; (8005aa4 <HAL_TIM_MspPostInit+0x54>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d114      	bne.n	8005a9c <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a72:	2001      	movs	r0, #1
 8005a74:	f7ff fdba 	bl	80055ec <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a7e:	2302      	movs	r3, #2
 8005a80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a82:	2300      	movs	r3, #0
 8005a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a86:	2300      	movs	r3, #0
 8005a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a8e:	f107 030c 	add.w	r3, r7, #12
 8005a92:	4619      	mov	r1, r3
 8005a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a98:	f000 feec 	bl	8006874 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005a9c:	bf00      	nop
 8005a9e:	3720      	adds	r7, #32
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	40012c00 	.word	0x40012c00

08005aa8 <LL_APB2_GRP1_EnableClock>:
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005ab6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ac4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4013      	ands	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005acc:	68fb      	ldr	r3, [r7, #12]
}
 8005ace:	bf00      	nop
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
	...

08005adc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b08c      	sub	sp, #48	; 0x30
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8005aec:	2200      	movs	r2, #0
 8005aee:	6879      	ldr	r1, [r7, #4]
 8005af0:	201a      	movs	r0, #26
 8005af2:	f000 fb59 	bl	80061a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8005af6:	201a      	movs	r0, #26
 8005af8:	f000 fb70 	bl	80061dc <HAL_NVIC_EnableIRQ>
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8005afc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8005b00:	f7ff ffd2 	bl	8005aa8 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005b04:	f107 0208 	add.w	r2, r7, #8
 8005b08:	f107 030c 	add.w	r3, r7, #12
 8005b0c:	4611      	mov	r1, r2
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f003 f808 	bl	8008b24 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005b14:	f002 fff0 	bl	8008af8 <HAL_RCC_GetPCLK2Freq>
 8005b18:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1c:	4a12      	ldr	r2, [pc, #72]	; (8005b68 <HAL_InitTick+0x8c>)
 8005b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b22:	0c9b      	lsrs	r3, r3, #18
 8005b24:	3b01      	subs	r3, #1
 8005b26:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8005b28:	4b10      	ldr	r3, [pc, #64]	; (8005b6c <HAL_InitTick+0x90>)
 8005b2a:	4a11      	ldr	r2, [pc, #68]	; (8005b70 <HAL_InitTick+0x94>)
 8005b2c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8005b2e:	4b0f      	ldr	r3, [pc, #60]	; (8005b6c <HAL_InitTick+0x90>)
 8005b30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005b34:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8005b36:	4a0d      	ldr	r2, [pc, #52]	; (8005b6c <HAL_InitTick+0x90>)
 8005b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3a:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8005b3c:	4b0b      	ldr	r3, [pc, #44]	; (8005b6c <HAL_InitTick+0x90>)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b42:	4b0a      	ldr	r3, [pc, #40]	; (8005b6c <HAL_InitTick+0x90>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8005b48:	4808      	ldr	r0, [pc, #32]	; (8005b6c <HAL_InitTick+0x90>)
 8005b4a:	f004 fbe1 	bl	800a310 <HAL_TIM_Base_Init>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d104      	bne.n	8005b5e <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8005b54:	4805      	ldr	r0, [pc, #20]	; (8005b6c <HAL_InitTick+0x90>)
 8005b56:	f004 fc33 	bl	800a3c0 <HAL_TIM_Base_Start_IT>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	e000      	b.n	8005b60 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3730      	adds	r7, #48	; 0x30
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	431bde83 	.word	0x431bde83
 8005b6c:	20004c64 	.word	0x20004c64
 8005b70:	40014800 	.word	0x40014800

08005b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b74:	b480      	push	{r7}
 8005b76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005b78:	bf00      	nop
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b82:	b480      	push	{r7}
 8005b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b86:	e7fe      	b.n	8005b86 <HardFault_Handler+0x4>

08005b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b8c:	e7fe      	b.n	8005b8c <MemManage_Handler+0x4>

08005b8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b92:	e7fe      	b.n	8005b92 <BusFault_Handler+0x4>

08005b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b94:	b480      	push	{r7}
 8005b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b98:	e7fe      	b.n	8005b98 <UsageFault_Handler+0x4>

08005b9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b9e:	bf00      	nop
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8005bac:	4802      	ldr	r0, [pc, #8]	; (8005bb8 <DMA1_Channel4_IRQHandler+0x10>)
 8005bae:	f000 fccf 	bl	8006550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005bb2:	bf00      	nop
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20004b10 	.word	0x20004b10

08005bbc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8005bc0:	4802      	ldr	r0, [pc, #8]	; (8005bcc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8005bc2:	f004 fe0f 	bl	800a7e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8005bc6:	bf00      	nop
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	20004c64 	.word	0x20004c64

08005bd0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005bd4:	4802      	ldr	r0, [pc, #8]	; (8005be0 <USART1_IRQHandler+0x10>)
 8005bd6:	f005 feb9 	bl	800b94c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005bda:	bf00      	nop
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	200049f8 	.word	0x200049f8

08005be4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8005be8:	4802      	ldr	r0, [pc, #8]	; (8005bf4 <LPUART1_IRQHandler+0x10>)
 8005bea:	f005 feaf 	bl	800b94c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8005bee:	bf00      	nop
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	2000490c 	.word	0x2000490c

08005bf8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8005bfc:	f000 fff2 	bl	8006be4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8005c00:	bf00      	nop
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005c08:	4802      	ldr	r0, [pc, #8]	; (8005c14 <DMA2_Channel4_IRQHandler+0x10>)
 8005c0a:	f000 fca1 	bl	8006550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8005c0e:	bf00      	nop
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	20004998 	.word	0x20004998

08005c18 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8005c1c:	2010      	movs	r0, #16
 8005c1e:	f000 ffc9 	bl	8006bb4 <HAL_GPIO_EXTI_IRQHandler>
}
 8005c22:	bf00      	nop
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8005c2a:	2001      	movs	r0, #1
 8005c2c:	f000 ffc2 	bl	8006bb4 <HAL_GPIO_EXTI_IRQHandler>
}
 8005c30:	bf00      	nop
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <EXTI1_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8005c38:	2002      	movs	r0, #2
 8005c3a:	f000 ffbb 	bl	8006bb4 <HAL_GPIO_EXTI_IRQHandler>
}
 8005c3e:	bf00      	nop
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <RTC_WKUP_IRQHandler>:

void RTC_WKUP_IRQHandler(void)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8005c46:	f7fd fc23 	bl	8003490 <HW_TS_RTC_Wakeup_Handler>
}
 8005c4a:	bf00      	nop
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <IPCC_C1_TX_IRQHandler>:

void IPCC_C1_TX_IRQHandler(void)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8005c52:	f7fc f805 	bl	8001c60 <HW_IPCC_Tx_Handler>

  return;
 8005c56:	bf00      	nop
}
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8005c5e:	f7fb ffc7 	bl	8001bf0 <HW_IPCC_Rx_Handler>
  return;
 8005c62:	bf00      	nop
}
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b086      	sub	sp, #24
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	60f8      	str	r0, [r7, #12]
 8005c6e:	60b9      	str	r1, [r7, #8]
 8005c70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c72:	2300      	movs	r3, #0
 8005c74:	617b      	str	r3, [r7, #20]
 8005c76:	e00a      	b.n	8005c8e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005c78:	f3af 8000 	nop.w
 8005c7c:	4601      	mov	r1, r0
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	1c5a      	adds	r2, r3, #1
 8005c82:	60ba      	str	r2, [r7, #8]
 8005c84:	b2ca      	uxtb	r2, r1
 8005c86:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	617b      	str	r3, [r7, #20]
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	dbf0      	blt.n	8005c78 <_read+0x12>
	}

return len;
 8005c96:	687b      	ldr	r3, [r7, #4]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <_close>:
	}
	return len;
}

int _close(int file)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
	return -1;
 8005ca8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005cc8:	605a      	str	r2, [r3, #4]
	return 0;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <_isatty>:

int _isatty(int file)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
	return 1;
 8005ce0:	2301      	movs	r3, #1
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b085      	sub	sp, #20
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	60f8      	str	r0, [r7, #12]
 8005cf6:	60b9      	str	r1, [r7, #8]
 8005cf8:	607a      	str	r2, [r7, #4]
	return 0;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005d10:	4b11      	ldr	r3, [pc, #68]	; (8005d58 <_sbrk+0x50>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d102      	bne.n	8005d1e <_sbrk+0x16>
		heap_end = &end;
 8005d18:	4b0f      	ldr	r3, [pc, #60]	; (8005d58 <_sbrk+0x50>)
 8005d1a:	4a10      	ldr	r2, [pc, #64]	; (8005d5c <_sbrk+0x54>)
 8005d1c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005d1e:	4b0e      	ldr	r3, [pc, #56]	; (8005d58 <_sbrk+0x50>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005d24:	4b0c      	ldr	r3, [pc, #48]	; (8005d58 <_sbrk+0x50>)
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	466a      	mov	r2, sp
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d907      	bls.n	8005d42 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005d32:	f00d fb61 	bl	80133f8 <__errno>
 8005d36:	4602      	mov	r2, r0
 8005d38:	230c      	movs	r3, #12
 8005d3a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d40:	e006      	b.n	8005d50 <_sbrk+0x48>
	}

	heap_end += incr;
 8005d42:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <_sbrk+0x50>)
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4413      	add	r3, r2
 8005d4a:	4a03      	ldr	r2, [pc, #12]	; (8005d58 <_sbrk+0x50>)
 8005d4c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	200003b4 	.word	0x200003b4
 8005d5c:	20004cf8 	.word	0x20004cf8

08005d60 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	4603      	mov	r3, r0
 8005d68:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8005d6a:	79fb      	ldrb	r3, [r7, #7]
 8005d6c:	4a07      	ldr	r2, [pc, #28]	; (8005d8c <BSP_LED_On+0x2c>)
 8005d6e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005d72:	79fb      	ldrb	r3, [r7, #7]
 8005d74:	4a06      	ldr	r2, [pc, #24]	; (8005d90 <BSP_LED_On+0x30>)
 8005d76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	f000 ff01 	bl	8006b84 <HAL_GPIO_WritePin>
}
 8005d82:	bf00      	nop
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	20000014 	.word	0x20000014
 8005d90:	08017c70 	.word	0x08017c70

08005d94 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8005d9e:	79fb      	ldrb	r3, [r7, #7]
 8005da0:	4a07      	ldr	r2, [pc, #28]	; (8005dc0 <BSP_LED_Off+0x2c>)
 8005da2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005da6:	79fb      	ldrb	r3, [r7, #7]
 8005da8:	4a06      	ldr	r2, [pc, #24]	; (8005dc4 <BSP_LED_Off+0x30>)
 8005daa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dae:	2200      	movs	r2, #0
 8005db0:	4619      	mov	r1, r3
 8005db2:	f000 fee7 	bl	8006b84 <HAL_GPIO_WritePin>
}
 8005db6:	bf00      	nop
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20000014 	.word	0x20000014
 8005dc4:	08017c70 	.word	0x08017c70

08005dc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8005dcc:	4b26      	ldr	r3, [pc, #152]	; (8005e68 <SystemInit+0xa0>)
 8005dce:	2200      	movs	r2, #0
 8005dd0:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8005dd2:	4b25      	ldr	r3, [pc, #148]	; (8005e68 <SystemInit+0xa0>)
 8005dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd8:	4a23      	ldr	r2, [pc, #140]	; (8005e68 <SystemInit+0xa0>)
 8005dda:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005dde:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dec:	f043 0301 	orr.w	r3, r3, #1
 8005df0:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8005df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005df6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8005dfa:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8005dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e06:	4b19      	ldr	r3, [pc, #100]	; (8005e6c <SystemInit+0xa4>)
 8005e08:	4013      	ands	r3, r2
 8005e0a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8005e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e18:	f023 0305 	bic.w	r3, r3, #5
 8005e1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8005e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e2c:	f023 0301 	bic.w	r3, r3, #1
 8005e30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8005e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e38:	4a0d      	ldr	r2, [pc, #52]	; (8005e70 <SystemInit+0xa8>)
 8005e3a:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8005e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e40:	4a0b      	ldr	r2, [pc, #44]	; (8005e70 <SystemInit+0xa8>)
 8005e42:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e58:	2200      	movs	r2, #0
 8005e5a:	619a      	str	r2, [r3, #24]
}
 8005e5c:	bf00      	nop
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	e000ed00 	.word	0xe000ed00
 8005e6c:	faf6fefb 	.word	0xfaf6fefb
 8005e70:	22041000 	.word	0x22041000

08005e74 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8005e74:	b480      	push	{r7}
 8005e76:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8005e78:	4b05      	ldr	r3, [pc, #20]	; (8005e90 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	4a04      	ldr	r2, [pc, #16]	; (8005e90 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8005e7e:	f043 0301 	orr.w	r3, r3, #1
 8005e82:	6053      	str	r3, [r2, #4]
}
 8005e84:	bf00      	nop
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	e0042000 	.word	0xe0042000

08005e94 <LL_DBGMCU_EnableDBGStopMode>:
{
 8005e94:	b480      	push	{r7}
 8005e96:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8005e98:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	4a04      	ldr	r2, [pc, #16]	; (8005eb0 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8005e9e:	f043 0302 	orr.w	r3, r3, #2
 8005ea2:	6053      	str	r3, [r2, #4]
}
 8005ea4:	bf00      	nop
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	e0042000 	.word	0xe0042000

08005eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ebe:	4b0c      	ldr	r3, [pc, #48]	; (8005ef0 <HAL_Init+0x3c>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a0b      	ldr	r2, [pc, #44]	; (8005ef0 <HAL_Init+0x3c>)
 8005ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ec8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005eca:	2003      	movs	r0, #3
 8005ecc:	f000 f961 	bl	8006192 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	f7ff fe03 	bl	8005adc <HAL_InitTick>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	71fb      	strb	r3, [r7, #7]
 8005ee0:	e001      	b.n	8005ee6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005ee2:	f7ff fc00 	bl	80056e6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005ee6:	79fb      	ldrb	r3, [r7, #7]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3708      	adds	r7, #8
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	58004000 	.word	0x58004000

08005ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005ef8:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <HAL_IncTick+0x20>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	461a      	mov	r2, r3
 8005efe:	4b06      	ldr	r3, [pc, #24]	; (8005f18 <HAL_IncTick+0x24>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4413      	add	r3, r2
 8005f04:	4a04      	ldr	r2, [pc, #16]	; (8005f18 <HAL_IncTick+0x24>)
 8005f06:	6013      	str	r3, [r2, #0]
}
 8005f08:	bf00      	nop
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	20000028 	.word	0x20000028
 8005f18:	20004cb0 	.word	0x20004cb0

08005f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8005f20:	4b03      	ldr	r3, [pc, #12]	; (8005f30 <HAL_GetTick+0x14>)
 8005f22:	681b      	ldr	r3, [r3, #0]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	20004cb0 	.word	0x20004cb0

08005f34 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8005f34:	b480      	push	{r7}
 8005f36:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8005f38:	4b03      	ldr	r3, [pc, #12]	; (8005f48 <HAL_GetTickPrio+0x14>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	20000024 	.word	0x20000024

08005f4c <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8005f50:	4b03      	ldr	r3, [pc, #12]	; (8005f60 <HAL_GetTickFreq+0x14>)
 8005f52:	781b      	ldrb	r3, [r3, #0]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	20000028 	.word	0x20000028

08005f64 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8005f68:	f7ff ff84 	bl	8005e74 <LL_DBGMCU_EnableDBGSleepMode>
}
 8005f6c:	bf00      	nop
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8005f74:	f7ff ff8e 	bl	8005e94 <LL_DBGMCU_EnableDBGStopMode>
}
 8005f78:	bf00      	nop
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f003 0307 	and.w	r3, r3, #7
 8005f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f8c:	4b0c      	ldr	r3, [pc, #48]	; (8005fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f98:	4013      	ands	r3, r2
 8005f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005fae:	4a04      	ldr	r2, [pc, #16]	; (8005fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	60d3      	str	r3, [r2, #12]
}
 8005fb4:	bf00      	nop
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr
 8005fc0:	e000ed00 	.word	0xe000ed00

08005fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005fc8:	4b04      	ldr	r3, [pc, #16]	; (8005fdc <__NVIC_GetPriorityGrouping+0x18>)
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	0a1b      	lsrs	r3, r3, #8
 8005fce:	f003 0307 	and.w	r3, r3, #7
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	e000ed00 	.word	0xe000ed00

08005fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	db0b      	blt.n	800600a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ff2:	79fb      	ldrb	r3, [r7, #7]
 8005ff4:	f003 021f 	and.w	r2, r3, #31
 8005ff8:	4907      	ldr	r1, [pc, #28]	; (8006018 <__NVIC_EnableIRQ+0x38>)
 8005ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ffe:	095b      	lsrs	r3, r3, #5
 8006000:	2001      	movs	r0, #1
 8006002:	fa00 f202 	lsl.w	r2, r0, r2
 8006006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800600a:	bf00      	nop
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	e000e100 	.word	0xe000e100

0800601c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	4603      	mov	r3, r0
 8006024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800602a:	2b00      	cmp	r3, #0
 800602c:	db10      	blt.n	8006050 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800602e:	79fb      	ldrb	r3, [r7, #7]
 8006030:	f003 021f 	and.w	r2, r3, #31
 8006034:	4909      	ldr	r1, [pc, #36]	; (800605c <__NVIC_DisableIRQ+0x40>)
 8006036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800603a:	095b      	lsrs	r3, r3, #5
 800603c:	2001      	movs	r0, #1
 800603e:	fa00 f202 	lsl.w	r2, r0, r2
 8006042:	3320      	adds	r3, #32
 8006044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006048:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800604c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr
 800605c:	e000e100 	.word	0xe000e100

08006060 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	4603      	mov	r3, r0
 8006068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800606a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800606e:	2b00      	cmp	r3, #0
 8006070:	db0c      	blt.n	800608c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006072:	79fb      	ldrb	r3, [r7, #7]
 8006074:	f003 021f 	and.w	r2, r3, #31
 8006078:	4907      	ldr	r1, [pc, #28]	; (8006098 <__NVIC_SetPendingIRQ+0x38>)
 800607a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800607e:	095b      	lsrs	r3, r3, #5
 8006080:	2001      	movs	r0, #1
 8006082:	fa00 f202 	lsl.w	r2, r0, r2
 8006086:	3340      	adds	r3, #64	; 0x40
 8006088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	e000e100 	.word	0xe000e100

0800609c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	4603      	mov	r3, r0
 80060a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	db0c      	blt.n	80060c8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060ae:	79fb      	ldrb	r3, [r7, #7]
 80060b0:	f003 021f 	and.w	r2, r3, #31
 80060b4:	4907      	ldr	r1, [pc, #28]	; (80060d4 <__NVIC_ClearPendingIRQ+0x38>)
 80060b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ba:	095b      	lsrs	r3, r3, #5
 80060bc:	2001      	movs	r0, #1
 80060be:	fa00 f202 	lsl.w	r2, r0, r2
 80060c2:	3360      	adds	r3, #96	; 0x60
 80060c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr
 80060d4:	e000e100 	.word	0xe000e100

080060d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	4603      	mov	r3, r0
 80060e0:	6039      	str	r1, [r7, #0]
 80060e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	db0a      	blt.n	8006102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	b2da      	uxtb	r2, r3
 80060f0:	490c      	ldr	r1, [pc, #48]	; (8006124 <__NVIC_SetPriority+0x4c>)
 80060f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060f6:	0112      	lsls	r2, r2, #4
 80060f8:	b2d2      	uxtb	r2, r2
 80060fa:	440b      	add	r3, r1
 80060fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006100:	e00a      	b.n	8006118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	b2da      	uxtb	r2, r3
 8006106:	4908      	ldr	r1, [pc, #32]	; (8006128 <__NVIC_SetPriority+0x50>)
 8006108:	79fb      	ldrb	r3, [r7, #7]
 800610a:	f003 030f 	and.w	r3, r3, #15
 800610e:	3b04      	subs	r3, #4
 8006110:	0112      	lsls	r2, r2, #4
 8006112:	b2d2      	uxtb	r2, r2
 8006114:	440b      	add	r3, r1
 8006116:	761a      	strb	r2, [r3, #24]
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	e000e100 	.word	0xe000e100
 8006128:	e000ed00 	.word	0xe000ed00

0800612c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800612c:	b480      	push	{r7}
 800612e:	b089      	sub	sp, #36	; 0x24
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f003 0307 	and.w	r3, r3, #7
 800613e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	f1c3 0307 	rsb	r3, r3, #7
 8006146:	2b04      	cmp	r3, #4
 8006148:	bf28      	it	cs
 800614a:	2304      	movcs	r3, #4
 800614c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	3304      	adds	r3, #4
 8006152:	2b06      	cmp	r3, #6
 8006154:	d902      	bls.n	800615c <NVIC_EncodePriority+0x30>
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	3b03      	subs	r3, #3
 800615a:	e000      	b.n	800615e <NVIC_EncodePriority+0x32>
 800615c:	2300      	movs	r3, #0
 800615e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006160:	f04f 32ff 	mov.w	r2, #4294967295
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	fa02 f303 	lsl.w	r3, r2, r3
 800616a:	43da      	mvns	r2, r3
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	401a      	ands	r2, r3
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006174:	f04f 31ff 	mov.w	r1, #4294967295
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	fa01 f303 	lsl.w	r3, r1, r3
 800617e:	43d9      	mvns	r1, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006184:	4313      	orrs	r3, r2
         );
}
 8006186:	4618      	mov	r0, r3
 8006188:	3724      	adds	r7, #36	; 0x24
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b082      	sub	sp, #8
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7ff feee 	bl	8005f7c <__NVIC_SetPriorityGrouping>
}
 80061a0:	bf00      	nop
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	4603      	mov	r3, r0
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
 80061b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80061b6:	f7ff ff05 	bl	8005fc4 <__NVIC_GetPriorityGrouping>
 80061ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	68b9      	ldr	r1, [r7, #8]
 80061c0:	6978      	ldr	r0, [r7, #20]
 80061c2:	f7ff ffb3 	bl	800612c <NVIC_EncodePriority>
 80061c6:	4602      	mov	r2, r0
 80061c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061cc:	4611      	mov	r1, r2
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7ff ff82 	bl	80060d8 <__NVIC_SetPriority>
}
 80061d4:	bf00      	nop
 80061d6:	3718      	adds	r7, #24
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	4603      	mov	r3, r0
 80061e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80061e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7ff fef8 	bl	8005fe0 <__NVIC_EnableIRQ>
}
 80061f0:	bf00      	nop
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	4603      	mov	r3, r0
 8006200:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006206:	4618      	mov	r0, r3
 8006208:	f7ff ff08 	bl	800601c <__NVIC_DisableIRQ>
}
 800620c:	bf00      	nop
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	4603      	mov	r3, r0
 800621c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800621e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006222:	4618      	mov	r0, r3
 8006224:	f7ff ff1c 	bl	8006060 <__NVIC_SetPendingIRQ>
}
 8006228:	bf00      	nop
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	4603      	mov	r3, r0
 8006238:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800623a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800623e:	4618      	mov	r0, r3
 8006240:	f7ff ff2c 	bl	800609c <__NVIC_ClearPendingIRQ>
}
 8006244:	bf00      	nop
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d101      	bne.n	800625e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e08e      	b.n	800637c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	461a      	mov	r2, r3
 8006264:	4b47      	ldr	r3, [pc, #284]	; (8006384 <HAL_DMA_Init+0x138>)
 8006266:	429a      	cmp	r2, r3
 8006268:	d80f      	bhi.n	800628a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	461a      	mov	r2, r3
 8006270:	4b45      	ldr	r3, [pc, #276]	; (8006388 <HAL_DMA_Init+0x13c>)
 8006272:	4413      	add	r3, r2
 8006274:	4a45      	ldr	r2, [pc, #276]	; (800638c <HAL_DMA_Init+0x140>)
 8006276:	fba2 2303 	umull	r2, r3, r2, r3
 800627a:	091b      	lsrs	r3, r3, #4
 800627c:	009a      	lsls	r2, r3, #2
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a42      	ldr	r2, [pc, #264]	; (8006390 <HAL_DMA_Init+0x144>)
 8006286:	641a      	str	r2, [r3, #64]	; 0x40
 8006288:	e00e      	b.n	80062a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	461a      	mov	r2, r3
 8006290:	4b40      	ldr	r3, [pc, #256]	; (8006394 <HAL_DMA_Init+0x148>)
 8006292:	4413      	add	r3, r2
 8006294:	4a3d      	ldr	r2, [pc, #244]	; (800638c <HAL_DMA_Init+0x140>)
 8006296:	fba2 2303 	umull	r2, r3, r2, r3
 800629a:	091b      	lsrs	r3, r3, #4
 800629c:	009a      	lsls	r2, r3, #2
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a3c      	ldr	r2, [pc, #240]	; (8006398 <HAL_DMA_Init+0x14c>)
 80062a6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2202      	movs	r2, #2
 80062ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80062be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80062cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fa16 	bl	800672c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006308:	d102      	bne.n	8006310 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006318:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800631c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006326:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d010      	beq.n	8006352 <HAL_DMA_Init+0x106>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	2b04      	cmp	r3, #4
 8006336:	d80c      	bhi.n	8006352 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fa35 	bl	80067a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006342:	2200      	movs	r2, #0
 8006344:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800634e:	605a      	str	r2, [r3, #4]
 8006350:	e008      	b.n	8006364 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	40020407 	.word	0x40020407
 8006388:	bffdfff8 	.word	0xbffdfff8
 800638c:	cccccccd 	.word	0xcccccccd
 8006390:	40020000 	.word	0x40020000
 8006394:	bffdfbf8 	.word	0xbffdfbf8
 8006398:	40020400 	.word	0x40020400

0800639c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
 80063a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d101      	bne.n	80063bc <HAL_DMA_Start_IT+0x20>
 80063b8:	2302      	movs	r3, #2
 80063ba:	e066      	b.n	800648a <HAL_DMA_Start_IT+0xee>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d155      	bne.n	800647c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2202      	movs	r2, #2
 80063d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 0201 	bic.w	r2, r2, #1
 80063ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	68b9      	ldr	r1, [r7, #8]
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f000 f95a 	bl	80066ae <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d008      	beq.n	8006414 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f042 020e 	orr.w	r2, r2, #14
 8006410:	601a      	str	r2, [r3, #0]
 8006412:	e00f      	b.n	8006434 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f022 0204 	bic.w	r2, r2, #4
 8006422:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f042 020a 	orr.w	r2, r2, #10
 8006432:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d007      	beq.n	8006452 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800644c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006450:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006456:	2b00      	cmp	r3, #0
 8006458:	d007      	beq.n	800646a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006468:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f042 0201 	orr.w	r2, r2, #1
 8006478:	601a      	str	r2, [r3, #0]
 800647a:	e005      	b.n	8006488 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006484:	2302      	movs	r3, #2
 8006486:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006488:	7dfb      	ldrb	r3, [r7, #23]
}
 800648a:	4618      	mov	r0, r3
 800648c:	3718      	adds	r7, #24
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d005      	beq.n	80064b6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2204      	movs	r2, #4
 80064ae:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	73fb      	strb	r3, [r7, #15]
 80064b4:	e047      	b.n	8006546 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 020e 	bic.w	r2, r2, #14
 80064c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 0201 	bic.w	r2, r2, #1
 80064d4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ea:	f003 021c 	and.w	r2, r3, #28
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	2101      	movs	r1, #1
 80064f4:	fa01 f202 	lsl.w	r2, r1, r2
 80064f8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006502:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00c      	beq.n	8006526 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006516:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800651a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006524:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653a:	2b00      	cmp	r3, #0
 800653c:	d003      	beq.n	8006546 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	4798      	blx	r3
    }
  }
  return status;
 8006546:	7bfb      	ldrb	r3, [r7, #15]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800656c:	f003 031c 	and.w	r3, r3, #28
 8006570:	2204      	movs	r2, #4
 8006572:	409a      	lsls	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4013      	ands	r3, r2
 8006578:	2b00      	cmp	r3, #0
 800657a:	d026      	beq.n	80065ca <HAL_DMA_IRQHandler+0x7a>
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	f003 0304 	and.w	r3, r3, #4
 8006582:	2b00      	cmp	r3, #0
 8006584:	d021      	beq.n	80065ca <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0320 	and.w	r3, r3, #32
 8006590:	2b00      	cmp	r3, #0
 8006592:	d107      	bne.n	80065a4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0204 	bic.w	r2, r2, #4
 80065a2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a8:	f003 021c 	and.w	r2, r3, #28
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b0:	2104      	movs	r1, #4
 80065b2:	fa01 f202 	lsl.w	r2, r1, r2
 80065b6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d071      	beq.n	80066a4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80065c8:	e06c      	b.n	80066a4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ce:	f003 031c 	and.w	r3, r3, #28
 80065d2:	2202      	movs	r2, #2
 80065d4:	409a      	lsls	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	4013      	ands	r3, r2
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d02e      	beq.n	800663c <HAL_DMA_IRQHandler+0xec>
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d029      	beq.n	800663c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0320 	and.w	r3, r3, #32
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10b      	bne.n	800660e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f022 020a 	bic.w	r2, r2, #10
 8006604:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006612:	f003 021c 	and.w	r2, r3, #28
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661a:	2102      	movs	r1, #2
 800661c:	fa01 f202 	lsl.w	r2, r1, r2
 8006620:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662e:	2b00      	cmp	r3, #0
 8006630:	d038      	beq.n	80066a4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800663a:	e033      	b.n	80066a4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006640:	f003 031c 	and.w	r3, r3, #28
 8006644:	2208      	movs	r2, #8
 8006646:	409a      	lsls	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4013      	ands	r3, r2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d02a      	beq.n	80066a6 <HAL_DMA_IRQHandler+0x156>
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f003 0308 	and.w	r3, r3, #8
 8006656:	2b00      	cmp	r3, #0
 8006658:	d025      	beq.n	80066a6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 020e 	bic.w	r2, r2, #14
 8006668:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800666e:	f003 021c 	and.w	r2, r3, #28
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006676:	2101      	movs	r1, #1
 8006678:	fa01 f202 	lsl.w	r2, r1, r2
 800667c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006698:	2b00      	cmp	r3, #0
 800669a:	d004      	beq.n	80066a6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80066a4:	bf00      	nop
 80066a6:	bf00      	nop
}
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b085      	sub	sp, #20
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	60f8      	str	r0, [r7, #12]
 80066b6:	60b9      	str	r1, [r7, #8]
 80066b8:	607a      	str	r2, [r7, #4]
 80066ba:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80066c4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d004      	beq.n	80066d8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80066d6:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066dc:	f003 021c 	and.w	r2, r3, #28
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e4:	2101      	movs	r1, #1
 80066e6:	fa01 f202 	lsl.w	r2, r1, r2
 80066ea:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	2b10      	cmp	r3, #16
 80066fa:	d108      	bne.n	800670e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800670c:	e007      	b.n	800671e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	60da      	str	r2, [r3, #12]
}
 800671e:	bf00      	nop
 8006720:	3714      	adds	r7, #20
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
	...

0800672c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	461a      	mov	r2, r3
 800673a:	4b17      	ldr	r3, [pc, #92]	; (8006798 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800673c:	429a      	cmp	r2, r3
 800673e:	d80a      	bhi.n	8006756 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006744:	089b      	lsrs	r3, r3, #2
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800674c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	6493      	str	r3, [r2, #72]	; 0x48
 8006754:	e007      	b.n	8006766 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800675a:	089b      	lsrs	r3, r3, #2
 800675c:	009a      	lsls	r2, r3, #2
 800675e:	4b0f      	ldr	r3, [pc, #60]	; (800679c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006760:	4413      	add	r3, r2
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	b2db      	uxtb	r3, r3
 800676c:	3b08      	subs	r3, #8
 800676e:	4a0c      	ldr	r2, [pc, #48]	; (80067a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006770:	fba2 2303 	umull	r2, r3, r2, r3
 8006774:	091b      	lsrs	r3, r3, #4
 8006776:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a0a      	ldr	r2, [pc, #40]	; (80067a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800677c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f003 031f 	and.w	r3, r3, #31
 8006784:	2201      	movs	r2, #1
 8006786:	409a      	lsls	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800678c:	bf00      	nop
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	40020407 	.word	0x40020407
 800679c:	4002081c 	.word	0x4002081c
 80067a0:	cccccccd 	.word	0xcccccccd
 80067a4:	40020880 	.word	0x40020880

080067a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067b8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	4b0b      	ldr	r3, [pc, #44]	; (80067ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80067be:	4413      	add	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	461a      	mov	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a09      	ldr	r2, [pc, #36]	; (80067f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80067cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3b01      	subs	r3, #1
 80067d2:	f003 0303 	and.w	r3, r3, #3
 80067d6:	2201      	movs	r2, #1
 80067d8:	409a      	lsls	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80067de:	bf00      	nop
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	1000823f 	.word	0x1000823f
 80067f0:	40020940 	.word	0x40020940

080067f4 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b01      	cmp	r3, #1
 8006808:	d12b      	bne.n	8006862 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006810:	2b01      	cmp	r3, #1
 8006812:	d101      	bne.n	8006818 <HAL_DMAEx_ConfigMuxSync+0x24>
 8006814:	2302      	movs	r3, #2
 8006816:	e025      	b.n	8006864 <HAL_DMAEx_ConfigMuxSync+0x70>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	4b12      	ldr	r3, [pc, #72]	; (8006870 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 8006828:	4013      	ands	r3, r2
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	6811      	ldr	r1, [r2, #0]
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	68d2      	ldr	r2, [r2, #12]
 8006832:	3a01      	subs	r2, #1
 8006834:	04d2      	lsls	r2, r2, #19
 8006836:	4311      	orrs	r1, r2
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	6852      	ldr	r2, [r2, #4]
 800683c:	4311      	orrs	r1, r2
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	7a12      	ldrb	r2, [r2, #8]
 8006842:	0412      	lsls	r2, r2, #16
 8006844:	4311      	orrs	r1, r2
 8006846:	683a      	ldr	r2, [r7, #0]
 8006848:	7a52      	ldrb	r2, [r2, #9]
 800684a:	0252      	lsls	r2, r2, #9
 800684c:	4311      	orrs	r1, r2
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006852:	430b      	orrs	r3, r1
 8006854:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 800685e:	2300      	movs	r3, #0
 8006860:	e000      	b.n	8006864 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
  }
}
 8006864:	4618      	mov	r0, r3
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	e000fdff 	.word	0xe000fdff

08006874 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006874:	b480      	push	{r7}
 8006876:	b087      	sub	sp, #28
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800687e:	2300      	movs	r3, #0
 8006880:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006882:	e14c      	b.n	8006b1e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	2101      	movs	r1, #1
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	fa01 f303 	lsl.w	r3, r1, r3
 8006890:	4013      	ands	r3, r2
 8006892:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 813e 	beq.w	8006b18 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d00b      	beq.n	80068bc <HAL_GPIO_Init+0x48>
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d007      	beq.n	80068bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80068b0:	2b11      	cmp	r3, #17
 80068b2:	d003      	beq.n	80068bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	2b12      	cmp	r3, #18
 80068ba:	d130      	bne.n	800691e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	005b      	lsls	r3, r3, #1
 80068c6:	2203      	movs	r2, #3
 80068c8:	fa02 f303 	lsl.w	r3, r2, r3
 80068cc:	43db      	mvns	r3, r3
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	4013      	ands	r3, r2
 80068d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	68da      	ldr	r2, [r3, #12]
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	005b      	lsls	r3, r3, #1
 80068dc:	fa02 f303 	lsl.w	r3, r2, r3
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80068f2:	2201      	movs	r2, #1
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	fa02 f303 	lsl.w	r3, r2, r3
 80068fa:	43db      	mvns	r3, r3
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	4013      	ands	r3, r2
 8006900:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	091b      	lsrs	r3, r3, #4
 8006908:	f003 0201 	and.w	r2, r3, #1
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	fa02 f303 	lsl.w	r3, r2, r3
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	4313      	orrs	r3, r2
 8006916:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	005b      	lsls	r3, r3, #1
 8006928:	2203      	movs	r2, #3
 800692a:	fa02 f303 	lsl.w	r3, r2, r3
 800692e:	43db      	mvns	r3, r3
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	4013      	ands	r3, r2
 8006934:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	689a      	ldr	r2, [r3, #8]
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	fa02 f303 	lsl.w	r3, r2, r3
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	4313      	orrs	r3, r2
 8006946:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	2b02      	cmp	r3, #2
 8006954:	d003      	beq.n	800695e <HAL_GPIO_Init+0xea>
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	2b12      	cmp	r3, #18
 800695c:	d123      	bne.n	80069a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	08da      	lsrs	r2, r3, #3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	3208      	adds	r2, #8
 8006966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800696a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	f003 0307 	and.w	r3, r3, #7
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	220f      	movs	r2, #15
 8006976:	fa02 f303 	lsl.w	r3, r2, r3
 800697a:	43db      	mvns	r3, r3
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	4013      	ands	r3, r2
 8006980:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	691a      	ldr	r2, [r3, #16]
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f003 0307 	and.w	r3, r3, #7
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	fa02 f303 	lsl.w	r3, r2, r3
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	4313      	orrs	r3, r2
 8006996:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	08da      	lsrs	r2, r3, #3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	3208      	adds	r2, #8
 80069a0:	6939      	ldr	r1, [r7, #16]
 80069a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	005b      	lsls	r3, r3, #1
 80069b0:	2203      	movs	r2, #3
 80069b2:	fa02 f303 	lsl.w	r3, r2, r3
 80069b6:	43db      	mvns	r3, r3
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	4013      	ands	r3, r2
 80069bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f003 0203 	and.w	r2, r3, #3
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	005b      	lsls	r3, r3, #1
 80069ca:	fa02 f303 	lsl.w	r3, r2, r3
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 8098 	beq.w	8006b18 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80069e8:	4a54      	ldr	r2, [pc, #336]	; (8006b3c <HAL_GPIO_Init+0x2c8>)
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	089b      	lsrs	r3, r3, #2
 80069ee:	3302      	adds	r3, #2
 80069f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f003 0303 	and.w	r3, r3, #3
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	220f      	movs	r2, #15
 8006a00:	fa02 f303 	lsl.w	r3, r2, r3
 8006a04:	43db      	mvns	r3, r3
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	4013      	ands	r3, r2
 8006a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006a12:	d019      	beq.n	8006a48 <HAL_GPIO_Init+0x1d4>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a4a      	ldr	r2, [pc, #296]	; (8006b40 <HAL_GPIO_Init+0x2cc>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d013      	beq.n	8006a44 <HAL_GPIO_Init+0x1d0>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a49      	ldr	r2, [pc, #292]	; (8006b44 <HAL_GPIO_Init+0x2d0>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d00d      	beq.n	8006a40 <HAL_GPIO_Init+0x1cc>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a48      	ldr	r2, [pc, #288]	; (8006b48 <HAL_GPIO_Init+0x2d4>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d007      	beq.n	8006a3c <HAL_GPIO_Init+0x1c8>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a47      	ldr	r2, [pc, #284]	; (8006b4c <HAL_GPIO_Init+0x2d8>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d101      	bne.n	8006a38 <HAL_GPIO_Init+0x1c4>
 8006a34:	2304      	movs	r3, #4
 8006a36:	e008      	b.n	8006a4a <HAL_GPIO_Init+0x1d6>
 8006a38:	2307      	movs	r3, #7
 8006a3a:	e006      	b.n	8006a4a <HAL_GPIO_Init+0x1d6>
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e004      	b.n	8006a4a <HAL_GPIO_Init+0x1d6>
 8006a40:	2302      	movs	r3, #2
 8006a42:	e002      	b.n	8006a4a <HAL_GPIO_Init+0x1d6>
 8006a44:	2301      	movs	r3, #1
 8006a46:	e000      	b.n	8006a4a <HAL_GPIO_Init+0x1d6>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	f002 0203 	and.w	r2, r2, #3
 8006a50:	0092      	lsls	r2, r2, #2
 8006a52:	4093      	lsls	r3, r2
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006a5a:	4938      	ldr	r1, [pc, #224]	; (8006b3c <HAL_GPIO_Init+0x2c8>)
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	089b      	lsrs	r3, r3, #2
 8006a60:	3302      	adds	r3, #2
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006a68:	4b39      	ldr	r3, [pc, #228]	; (8006b50 <HAL_GPIO_Init+0x2dc>)
 8006a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	43db      	mvns	r3, r3
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	4013      	ands	r3, r2
 8006a78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006a8e:	4a30      	ldr	r2, [pc, #192]	; (8006b50 <HAL_GPIO_Init+0x2dc>)
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8006a96:	4b2e      	ldr	r3, [pc, #184]	; (8006b50 <HAL_GPIO_Init+0x2dc>)
 8006a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	43db      	mvns	r3, r3
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d003      	beq.n	8006abc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006abc:	4a24      	ldr	r2, [pc, #144]	; (8006b50 <HAL_GPIO_Init+0x2dc>)
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006ac4:	4b22      	ldr	r3, [pc, #136]	; (8006b50 <HAL_GPIO_Init+0x2dc>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	43db      	mvns	r3, r3
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d003      	beq.n	8006ae8 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006ae8:	4a19      	ldr	r2, [pc, #100]	; (8006b50 <HAL_GPIO_Init+0x2dc>)
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006aee:	4b18      	ldr	r3, [pc, #96]	; (8006b50 <HAL_GPIO_Init+0x2dc>)
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	43db      	mvns	r3, r3
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	4013      	ands	r3, r2
 8006afc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006b0a:	693a      	ldr	r2, [r7, #16]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006b12:	4a0f      	ldr	r2, [pc, #60]	; (8006b50 <HAL_GPIO_Init+0x2dc>)
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	fa22 f303 	lsr.w	r3, r2, r3
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f47f aeab 	bne.w	8006884 <HAL_GPIO_Init+0x10>
  }
}
 8006b2e:	bf00      	nop
 8006b30:	371c      	adds	r7, #28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	40010000 	.word	0x40010000
 8006b40:	48000400 	.word	0x48000400
 8006b44:	48000800 	.word	0x48000800
 8006b48:	48000c00 	.word	0x48000c00
 8006b4c:	48001000 	.word	0x48001000
 8006b50:	58000800 	.word	0x58000800

08006b54 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	691a      	ldr	r2, [r3, #16]
 8006b64:	887b      	ldrh	r3, [r7, #2]
 8006b66:	4013      	ands	r3, r2
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d002      	beq.n	8006b72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	73fb      	strb	r3, [r7, #15]
 8006b70:	e001      	b.n	8006b76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006b72:	2300      	movs	r3, #0
 8006b74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	807b      	strh	r3, [r7, #2]
 8006b90:	4613      	mov	r3, r2
 8006b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006b94:	787b      	ldrb	r3, [r7, #1]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d003      	beq.n	8006ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006b9a:	887a      	ldrh	r2, [r7, #2]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006ba0:	e002      	b.n	8006ba8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006ba2:	887a      	ldrh	r2, [r7, #2]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	4603      	mov	r3, r0
 8006bbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006bbe:	4b08      	ldr	r3, [pc, #32]	; (8006be0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006bc0:	68da      	ldr	r2, [r3, #12]
 8006bc2:	88fb      	ldrh	r3, [r7, #6]
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d006      	beq.n	8006bd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006bca:	4a05      	ldr	r2, [pc, #20]	; (8006be0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006bcc:	88fb      	ldrh	r3, [r7, #6]
 8006bce:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006bd0:	88fb      	ldrh	r3, [r7, #6]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7fd fefa 	bl	80049cc <HAL_GPIO_EXTI_Callback>
  }
}
 8006bd8:	bf00      	nop
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	58000800 	.word	0x58000800

08006be4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8006bea:	4b0a      	ldr	r3, [pc, #40]	; (8006c14 <HAL_HSEM_IRQHandler+0x30>)
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8006bf0:	4b08      	ldr	r3, [pc, #32]	; (8006c14 <HAL_HSEM_IRQHandler+0x30>)
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	43db      	mvns	r3, r3
 8006bf8:	4906      	ldr	r1, [pc, #24]	; (8006c14 <HAL_HSEM_IRQHandler+0x30>)
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8006bfe:	4a05      	ldr	r2, [pc, #20]	; (8006c14 <HAL_HSEM_IRQHandler+0x30>)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 f807 	bl	8006c18 <HAL_HSEM_FreeCallback>
}
 8006c0a:	bf00      	nop
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	58001500 	.word	0x58001500

08006c18 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e081      	b.n	8006d42 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d106      	bne.n	8006c58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7fe fe7e 	bl	8005954 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2224      	movs	r2, #36	; 0x24
 8006c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f022 0201 	bic.w	r2, r2, #1
 8006c6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685a      	ldr	r2, [r3, #4]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	689a      	ldr	r2, [r3, #8]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d107      	bne.n	8006ca6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	689a      	ldr	r2, [r3, #8]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ca2:	609a      	str	r2, [r3, #8]
 8006ca4:	e006      	b.n	8006cb4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	689a      	ldr	r2, [r3, #8]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006cb2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d104      	bne.n	8006cc6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	6812      	ldr	r2, [r2, #0]
 8006cd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68da      	ldr	r2, [r3, #12]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ce8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	691a      	ldr	r2, [r3, #16]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	ea42 0103 	orr.w	r1, r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	021a      	lsls	r2, r3, #8
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	430a      	orrs	r2, r1
 8006d02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	69d9      	ldr	r1, [r3, #28]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a1a      	ldr	r2, [r3, #32]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	430a      	orrs	r2, r1
 8006d12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f042 0201 	orr.w	r2, r2, #1
 8006d22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2220      	movs	r2, #32
 8006d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
	...

08006d4c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b088      	sub	sp, #32
 8006d50:	af02      	add	r7, sp, #8
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	607a      	str	r2, [r7, #4]
 8006d56:	461a      	mov	r2, r3
 8006d58:	460b      	mov	r3, r1
 8006d5a:	817b      	strh	r3, [r7, #10]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b20      	cmp	r3, #32
 8006d6a:	f040 80da 	bne.w	8006f22 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d101      	bne.n	8006d7c <HAL_I2C_Master_Transmit+0x30>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	e0d3      	b.n	8006f24 <HAL_I2C_Master_Transmit+0x1d8>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006d84:	f7ff f8ca 	bl	8005f1c <HAL_GetTick>
 8006d88:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	2319      	movs	r3, #25
 8006d90:	2201      	movs	r2, #1
 8006d92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f000 fbc6 	bl	8007528 <I2C_WaitOnFlagUntilTimeout>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e0be      	b.n	8006f24 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2221      	movs	r2, #33	; 0x21
 8006daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2210      	movs	r2, #16
 8006db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	893a      	ldrh	r2, [r7, #8]
 8006dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	2bff      	cmp	r3, #255	; 0xff
 8006dd6:	d90e      	bls.n	8006df6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	22ff      	movs	r2, #255	; 0xff
 8006ddc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006de2:	b2da      	uxtb	r2, r3
 8006de4:	8979      	ldrh	r1, [r7, #10]
 8006de6:	4b51      	ldr	r3, [pc, #324]	; (8006f2c <HAL_I2C_Master_Transmit+0x1e0>)
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f000 fcbc 	bl	800776c <I2C_TransferConfig>
 8006df4:	e06c      	b.n	8006ed0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	8979      	ldrh	r1, [r7, #10]
 8006e08:	4b48      	ldr	r3, [pc, #288]	; (8006f2c <HAL_I2C_Master_Transmit+0x1e0>)
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f000 fcab 	bl	800776c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8006e16:	e05b      	b.n	8006ed0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	6a39      	ldr	r1, [r7, #32]
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f000 fbc3 	bl	80075a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d001      	beq.n	8006e2c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e07b      	b.n	8006f24 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e30:	781a      	ldrb	r2, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3c:	1c5a      	adds	r2, r3, #1
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e54:	3b01      	subs	r3, #1
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d034      	beq.n	8006ed0 <HAL_I2C_Master_Transmit+0x184>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d130      	bne.n	8006ed0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	6a3b      	ldr	r3, [r7, #32]
 8006e74:	2200      	movs	r2, #0
 8006e76:	2180      	movs	r1, #128	; 0x80
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f000 fb55 	bl	8007528 <I2C_WaitOnFlagUntilTimeout>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d001      	beq.n	8006e88 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e04d      	b.n	8006f24 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	2bff      	cmp	r3, #255	; 0xff
 8006e90:	d90e      	bls.n	8006eb0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	22ff      	movs	r2, #255	; 0xff
 8006e96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	8979      	ldrh	r1, [r7, #10]
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 fc5f 	bl	800776c <I2C_TransferConfig>
 8006eae:	e00f      	b.n	8006ed0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ebe:	b2da      	uxtb	r2, r3
 8006ec0:	8979      	ldrh	r1, [r7, #10]
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f000 fc4e 	bl	800776c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d19e      	bne.n	8006e18 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	6a39      	ldr	r1, [r7, #32]
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f000 fba2 	bl	8007628 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d001      	beq.n	8006eee <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e01a      	b.n	8006f24 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2220      	movs	r2, #32
 8006ef4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6859      	ldr	r1, [r3, #4]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	4b0b      	ldr	r3, [pc, #44]	; (8006f30 <HAL_I2C_Master_Transmit+0x1e4>)
 8006f02:	400b      	ands	r3, r1
 8006f04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	e000      	b.n	8006f24 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006f22:	2302      	movs	r3, #2
  }
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3718      	adds	r7, #24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	80002000 	.word	0x80002000
 8006f30:	fe00e800 	.word	0xfe00e800

08006f34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b088      	sub	sp, #32
 8006f38:	af02      	add	r7, sp, #8
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	4608      	mov	r0, r1
 8006f3e:	4611      	mov	r1, r2
 8006f40:	461a      	mov	r2, r3
 8006f42:	4603      	mov	r3, r0
 8006f44:	817b      	strh	r3, [r7, #10]
 8006f46:	460b      	mov	r3, r1
 8006f48:	813b      	strh	r3, [r7, #8]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b20      	cmp	r3, #32
 8006f58:	f040 80f9 	bne.w	800714e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d002      	beq.n	8006f68 <HAL_I2C_Mem_Write+0x34>
 8006f62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d105      	bne.n	8006f74 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f6e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e0ed      	b.n	8007150 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d101      	bne.n	8006f82 <HAL_I2C_Mem_Write+0x4e>
 8006f7e:	2302      	movs	r3, #2
 8006f80:	e0e6      	b.n	8007150 <HAL_I2C_Mem_Write+0x21c>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006f8a:	f7fe ffc7 	bl	8005f1c <HAL_GetTick>
 8006f8e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	2319      	movs	r3, #25
 8006f96:	2201      	movs	r2, #1
 8006f98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f000 fac3 	bl	8007528 <I2C_WaitOnFlagUntilTimeout>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d001      	beq.n	8006fac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e0d1      	b.n	8007150 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2221      	movs	r2, #33	; 0x21
 8006fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2240      	movs	r2, #64	; 0x40
 8006fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6a3a      	ldr	r2, [r7, #32]
 8006fc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006fcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006fd4:	88f8      	ldrh	r0, [r7, #6]
 8006fd6:	893a      	ldrh	r2, [r7, #8]
 8006fd8:	8979      	ldrh	r1, [r7, #10]
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	9301      	str	r3, [sp, #4]
 8006fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 f9d3 	bl	8007390 <I2C_RequestMemoryWrite>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d005      	beq.n	8006ffc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e0a9      	b.n	8007150 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007000:	b29b      	uxth	r3, r3
 8007002:	2bff      	cmp	r3, #255	; 0xff
 8007004:	d90e      	bls.n	8007024 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	22ff      	movs	r2, #255	; 0xff
 800700a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007010:	b2da      	uxtb	r2, r3
 8007012:	8979      	ldrh	r1, [r7, #10]
 8007014:	2300      	movs	r3, #0
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f000 fba5 	bl	800776c <I2C_TransferConfig>
 8007022:	e00f      	b.n	8007044 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007028:	b29a      	uxth	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007032:	b2da      	uxtb	r2, r3
 8007034:	8979      	ldrh	r1, [r7, #10]
 8007036:	2300      	movs	r3, #0
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 fb94 	bl	800776c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f000 faad 	bl	80075a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d001      	beq.n	8007058 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e07b      	b.n	8007150 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705c:	781a      	ldrb	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007072:	b29b      	uxth	r3, r3
 8007074:	3b01      	subs	r3, #1
 8007076:	b29a      	uxth	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007080:	3b01      	subs	r3, #1
 8007082:	b29a      	uxth	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800708c:	b29b      	uxth	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d034      	beq.n	80070fc <HAL_I2C_Mem_Write+0x1c8>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007096:	2b00      	cmp	r3, #0
 8007098:	d130      	bne.n	80070fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a0:	2200      	movs	r2, #0
 80070a2:	2180      	movs	r1, #128	; 0x80
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f000 fa3f 	bl	8007528 <I2C_WaitOnFlagUntilTimeout>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d001      	beq.n	80070b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e04d      	b.n	8007150 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	2bff      	cmp	r3, #255	; 0xff
 80070bc:	d90e      	bls.n	80070dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	22ff      	movs	r2, #255	; 0xff
 80070c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070c8:	b2da      	uxtb	r2, r3
 80070ca:	8979      	ldrh	r1, [r7, #10]
 80070cc:	2300      	movs	r3, #0
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f000 fb49 	bl	800776c <I2C_TransferConfig>
 80070da:	e00f      	b.n	80070fc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	8979      	ldrh	r1, [r7, #10]
 80070ee:	2300      	movs	r3, #0
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 fb38 	bl	800776c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007100:	b29b      	uxth	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	d19e      	bne.n	8007044 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f000 fa8c 	bl	8007628 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d001      	beq.n	800711a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e01a      	b.n	8007150 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2220      	movs	r2, #32
 8007120:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	6859      	ldr	r1, [r3, #4]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	4b0a      	ldr	r3, [pc, #40]	; (8007158 <HAL_I2C_Mem_Write+0x224>)
 800712e:	400b      	ands	r3, r1
 8007130:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2220      	movs	r2, #32
 8007136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800714a:	2300      	movs	r3, #0
 800714c:	e000      	b.n	8007150 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800714e:	2302      	movs	r3, #2
  }
}
 8007150:	4618      	mov	r0, r3
 8007152:	3718      	adds	r7, #24
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	fe00e800 	.word	0xfe00e800

0800715c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b088      	sub	sp, #32
 8007160:	af02      	add	r7, sp, #8
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	4608      	mov	r0, r1
 8007166:	4611      	mov	r1, r2
 8007168:	461a      	mov	r2, r3
 800716a:	4603      	mov	r3, r0
 800716c:	817b      	strh	r3, [r7, #10]
 800716e:	460b      	mov	r3, r1
 8007170:	813b      	strh	r3, [r7, #8]
 8007172:	4613      	mov	r3, r2
 8007174:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b20      	cmp	r3, #32
 8007180:	f040 80fd 	bne.w	800737e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007184:	6a3b      	ldr	r3, [r7, #32]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d002      	beq.n	8007190 <HAL_I2C_Mem_Read+0x34>
 800718a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800718c:	2b00      	cmp	r3, #0
 800718e:	d105      	bne.n	800719c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007196:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e0f1      	b.n	8007380 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d101      	bne.n	80071aa <HAL_I2C_Mem_Read+0x4e>
 80071a6:	2302      	movs	r3, #2
 80071a8:	e0ea      	b.n	8007380 <HAL_I2C_Mem_Read+0x224>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80071b2:	f7fe feb3 	bl	8005f1c <HAL_GetTick>
 80071b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	2319      	movs	r3, #25
 80071be:	2201      	movs	r2, #1
 80071c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f000 f9af 	bl	8007528 <I2C_WaitOnFlagUntilTimeout>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d001      	beq.n	80071d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e0d5      	b.n	8007380 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2222      	movs	r2, #34	; 0x22
 80071d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2240      	movs	r2, #64	; 0x40
 80071e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6a3a      	ldr	r2, [r7, #32]
 80071ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80071f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80071fc:	88f8      	ldrh	r0, [r7, #6]
 80071fe:	893a      	ldrh	r2, [r7, #8]
 8007200:	8979      	ldrh	r1, [r7, #10]
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	9301      	str	r3, [sp, #4]
 8007206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	4603      	mov	r3, r0
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f000 f913 	bl	8007438 <I2C_RequestMemoryRead>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d005      	beq.n	8007224 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e0ad      	b.n	8007380 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007228:	b29b      	uxth	r3, r3
 800722a:	2bff      	cmp	r3, #255	; 0xff
 800722c:	d90e      	bls.n	800724c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	22ff      	movs	r2, #255	; 0xff
 8007232:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007238:	b2da      	uxtb	r2, r3
 800723a:	8979      	ldrh	r1, [r7, #10]
 800723c:	4b52      	ldr	r3, [pc, #328]	; (8007388 <HAL_I2C_Mem_Read+0x22c>)
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f000 fa91 	bl	800776c <I2C_TransferConfig>
 800724a:	e00f      	b.n	800726c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007250:	b29a      	uxth	r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800725a:	b2da      	uxtb	r2, r3
 800725c:	8979      	ldrh	r1, [r7, #10]
 800725e:	4b4a      	ldr	r3, [pc, #296]	; (8007388 <HAL_I2C_Mem_Read+0x22c>)
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f000 fa80 	bl	800776c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007272:	2200      	movs	r2, #0
 8007274:	2104      	movs	r1, #4
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 f956 	bl	8007528 <I2C_WaitOnFlagUntilTimeout>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d001      	beq.n	8007286 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e07c      	b.n	8007380 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	b2d2      	uxtb	r2, r2
 8007292:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007298:	1c5a      	adds	r2, r3, #1
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072a2:	3b01      	subs	r3, #1
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	3b01      	subs	r3, #1
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072bc:	b29b      	uxth	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d034      	beq.n	800732c <HAL_I2C_Mem_Read+0x1d0>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d130      	bne.n	800732c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d0:	2200      	movs	r2, #0
 80072d2:	2180      	movs	r1, #128	; 0x80
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f000 f927 	bl	8007528 <I2C_WaitOnFlagUntilTimeout>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d001      	beq.n	80072e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e04d      	b.n	8007380 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	2bff      	cmp	r3, #255	; 0xff
 80072ec:	d90e      	bls.n	800730c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	22ff      	movs	r2, #255	; 0xff
 80072f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	8979      	ldrh	r1, [r7, #10]
 80072fc:	2300      	movs	r3, #0
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f000 fa31 	bl	800776c <I2C_TransferConfig>
 800730a:	e00f      	b.n	800732c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007310:	b29a      	uxth	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800731a:	b2da      	uxtb	r2, r3
 800731c:	8979      	ldrh	r1, [r7, #10]
 800731e:	2300      	movs	r3, #0
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f000 fa20 	bl	800776c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007330:	b29b      	uxth	r3, r3
 8007332:	2b00      	cmp	r3, #0
 8007334:	d19a      	bne.n	800726c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f000 f974 	bl	8007628 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e01a      	b.n	8007380 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2220      	movs	r2, #32
 8007350:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6859      	ldr	r1, [r3, #4]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	4b0b      	ldr	r3, [pc, #44]	; (800738c <HAL_I2C_Mem_Read+0x230>)
 800735e:	400b      	ands	r3, r1
 8007360:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2220      	movs	r2, #32
 8007366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800737a:	2300      	movs	r3, #0
 800737c:	e000      	b.n	8007380 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800737e:	2302      	movs	r3, #2
  }
}
 8007380:	4618      	mov	r0, r3
 8007382:	3718      	adds	r7, #24
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	80002400 	.word	0x80002400
 800738c:	fe00e800 	.word	0xfe00e800

08007390 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b086      	sub	sp, #24
 8007394:	af02      	add	r7, sp, #8
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	4608      	mov	r0, r1
 800739a:	4611      	mov	r1, r2
 800739c:	461a      	mov	r2, r3
 800739e:	4603      	mov	r3, r0
 80073a0:	817b      	strh	r3, [r7, #10]
 80073a2:	460b      	mov	r3, r1
 80073a4:	813b      	strh	r3, [r7, #8]
 80073a6:	4613      	mov	r3, r2
 80073a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80073aa:	88fb      	ldrh	r3, [r7, #6]
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	8979      	ldrh	r1, [r7, #10]
 80073b0:	4b20      	ldr	r3, [pc, #128]	; (8007434 <I2C_RequestMemoryWrite+0xa4>)
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f000 f9d7 	bl	800776c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073be:	69fa      	ldr	r2, [r7, #28]
 80073c0:	69b9      	ldr	r1, [r7, #24]
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f000 f8f0 	bl	80075a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e02c      	b.n	800742c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80073d2:	88fb      	ldrh	r3, [r7, #6]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d105      	bne.n	80073e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80073d8:	893b      	ldrh	r3, [r7, #8]
 80073da:	b2da      	uxtb	r2, r3
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	629a      	str	r2, [r3, #40]	; 0x28
 80073e2:	e015      	b.n	8007410 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80073e4:	893b      	ldrh	r3, [r7, #8]
 80073e6:	0a1b      	lsrs	r3, r3, #8
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	b2da      	uxtb	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073f2:	69fa      	ldr	r2, [r7, #28]
 80073f4:	69b9      	ldr	r1, [r7, #24]
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f000 f8d6 	bl	80075a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d001      	beq.n	8007406 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e012      	b.n	800742c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007406:	893b      	ldrh	r3, [r7, #8]
 8007408:	b2da      	uxtb	r2, r3
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	2200      	movs	r2, #0
 8007418:	2180      	movs	r1, #128	; 0x80
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 f884 	bl	8007528 <I2C_WaitOnFlagUntilTimeout>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d001      	beq.n	800742a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e000      	b.n	800742c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	80002000 	.word	0x80002000

08007438 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b086      	sub	sp, #24
 800743c:	af02      	add	r7, sp, #8
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	4608      	mov	r0, r1
 8007442:	4611      	mov	r1, r2
 8007444:	461a      	mov	r2, r3
 8007446:	4603      	mov	r3, r0
 8007448:	817b      	strh	r3, [r7, #10]
 800744a:	460b      	mov	r3, r1
 800744c:	813b      	strh	r3, [r7, #8]
 800744e:	4613      	mov	r3, r2
 8007450:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007452:	88fb      	ldrh	r3, [r7, #6]
 8007454:	b2da      	uxtb	r2, r3
 8007456:	8979      	ldrh	r1, [r7, #10]
 8007458:	4b20      	ldr	r3, [pc, #128]	; (80074dc <I2C_RequestMemoryRead+0xa4>)
 800745a:	9300      	str	r3, [sp, #0]
 800745c:	2300      	movs	r3, #0
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f000 f984 	bl	800776c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007464:	69fa      	ldr	r2, [r7, #28]
 8007466:	69b9      	ldr	r1, [r7, #24]
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f000 f89d 	bl	80075a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d001      	beq.n	8007478 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e02c      	b.n	80074d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007478:	88fb      	ldrh	r3, [r7, #6]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d105      	bne.n	800748a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800747e:	893b      	ldrh	r3, [r7, #8]
 8007480:	b2da      	uxtb	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	629a      	str	r2, [r3, #40]	; 0x28
 8007488:	e015      	b.n	80074b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800748a:	893b      	ldrh	r3, [r7, #8]
 800748c:	0a1b      	lsrs	r3, r3, #8
 800748e:	b29b      	uxth	r3, r3
 8007490:	b2da      	uxtb	r2, r3
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007498:	69fa      	ldr	r2, [r7, #28]
 800749a:	69b9      	ldr	r1, [r7, #24]
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f000 f883 	bl	80075a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e012      	b.n	80074d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80074ac:	893b      	ldrh	r3, [r7, #8]
 80074ae:	b2da      	uxtb	r2, r3
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	2200      	movs	r2, #0
 80074be:	2140      	movs	r1, #64	; 0x40
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f000 f831 	bl	8007528 <I2C_WaitOnFlagUntilTimeout>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d001      	beq.n	80074d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e000      	b.n	80074d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	80002000 	.word	0x80002000

080074e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	f003 0302 	and.w	r3, r3, #2
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d103      	bne.n	80074fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2200      	movs	r2, #0
 80074fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	f003 0301 	and.w	r3, r3, #1
 8007508:	2b01      	cmp	r3, #1
 800750a:	d007      	beq.n	800751c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	699a      	ldr	r2, [r3, #24]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f042 0201 	orr.w	r2, r2, #1
 800751a:	619a      	str	r2, [r3, #24]
  }
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	603b      	str	r3, [r7, #0]
 8007534:	4613      	mov	r3, r2
 8007536:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007538:	e022      	b.n	8007580 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007540:	d01e      	beq.n	8007580 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007542:	f7fe fceb 	bl	8005f1c <HAL_GetTick>
 8007546:	4602      	mov	r2, r0
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	683a      	ldr	r2, [r7, #0]
 800754e:	429a      	cmp	r2, r3
 8007550:	d302      	bcc.n	8007558 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d113      	bne.n	8007580 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800755c:	f043 0220 	orr.w	r2, r3, #32
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2220      	movs	r2, #32
 8007568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	e00f      	b.n	80075a0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	699a      	ldr	r2, [r3, #24]
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	4013      	ands	r3, r2
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	429a      	cmp	r2, r3
 800758e:	bf0c      	ite	eq
 8007590:	2301      	moveq	r3, #1
 8007592:	2300      	movne	r3, #0
 8007594:	b2db      	uxtb	r3, r3
 8007596:	461a      	mov	r2, r3
 8007598:	79fb      	ldrb	r3, [r7, #7]
 800759a:	429a      	cmp	r2, r3
 800759c:	d0cd      	beq.n	800753a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80075b4:	e02c      	b.n	8007610 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	68b9      	ldr	r1, [r7, #8]
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f000 f870 	bl	80076a0 <I2C_IsAcknowledgeFailed>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d001      	beq.n	80075ca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e02a      	b.n	8007620 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d0:	d01e      	beq.n	8007610 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075d2:	f7fe fca3 	bl	8005f1c <HAL_GetTick>
 80075d6:	4602      	mov	r2, r0
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d302      	bcc.n	80075e8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d113      	bne.n	8007610 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ec:	f043 0220 	orr.w	r2, r3, #32
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2220      	movs	r2, #32
 80075f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e007      	b.n	8007620 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	f003 0302 	and.w	r3, r3, #2
 800761a:	2b02      	cmp	r3, #2
 800761c:	d1cb      	bne.n	80075b6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007634:	e028      	b.n	8007688 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	68b9      	ldr	r1, [r7, #8]
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f000 f830 	bl	80076a0 <I2C_IsAcknowledgeFailed>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e026      	b.n	8007698 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800764a:	f7fe fc67 	bl	8005f1c <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	429a      	cmp	r2, r3
 8007658:	d302      	bcc.n	8007660 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d113      	bne.n	8007688 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007664:	f043 0220 	orr.w	r2, r3, #32
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2220      	movs	r2, #32
 8007670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e007      	b.n	8007698 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	f003 0320 	and.w	r3, r3, #32
 8007692:	2b20      	cmp	r3, #32
 8007694:	d1cf      	bne.n	8007636 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	f003 0310 	and.w	r3, r3, #16
 80076b6:	2b10      	cmp	r3, #16
 80076b8:	d151      	bne.n	800775e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80076ba:	e022      	b.n	8007702 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c2:	d01e      	beq.n	8007702 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076c4:	f7fe fc2a 	bl	8005f1c <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d302      	bcc.n	80076da <I2C_IsAcknowledgeFailed+0x3a>
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d113      	bne.n	8007702 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076de:	f043 0220 	orr.w	r2, r3, #32
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2220      	movs	r2, #32
 80076ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e02e      	b.n	8007760 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	f003 0320 	and.w	r3, r3, #32
 800770c:	2b20      	cmp	r3, #32
 800770e:	d1d5      	bne.n	80076bc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2210      	movs	r2, #16
 8007716:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2220      	movs	r2, #32
 800771e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f7ff fedd 	bl	80074e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	6859      	ldr	r1, [r3, #4]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	4b0d      	ldr	r3, [pc, #52]	; (8007768 <I2C_IsAcknowledgeFailed+0xc8>)
 8007732:	400b      	ands	r3, r1
 8007734:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800773a:	f043 0204 	orr.w	r2, r3, #4
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2220      	movs	r2, #32
 8007746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e000      	b.n	8007760 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3710      	adds	r7, #16
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	fe00e800 	.word	0xfe00e800

0800776c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	607b      	str	r3, [r7, #4]
 8007776:	460b      	mov	r3, r1
 8007778:	817b      	strh	r3, [r7, #10]
 800777a:	4613      	mov	r3, r2
 800777c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	685a      	ldr	r2, [r3, #4]
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	0d5b      	lsrs	r3, r3, #21
 8007788:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800778c:	4b0d      	ldr	r3, [pc, #52]	; (80077c4 <I2C_TransferConfig+0x58>)
 800778e:	430b      	orrs	r3, r1
 8007790:	43db      	mvns	r3, r3
 8007792:	ea02 0103 	and.w	r1, r2, r3
 8007796:	897b      	ldrh	r3, [r7, #10]
 8007798:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800779c:	7a7b      	ldrb	r3, [r7, #9]
 800779e:	041b      	lsls	r3, r3, #16
 80077a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80077a4:	431a      	orrs	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	431a      	orrs	r2, r3
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	431a      	orrs	r2, r3
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	430a      	orrs	r2, r1
 80077b4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80077b6:	bf00      	nop
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	03ff63ff 	.word	0x03ff63ff

080077c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b20      	cmp	r3, #32
 80077dc:	d138      	bne.n	8007850 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d101      	bne.n	80077ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80077e8:	2302      	movs	r3, #2
 80077ea:	e032      	b.n	8007852 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2224      	movs	r2, #36	; 0x24
 80077f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f022 0201 	bic.w	r2, r2, #1
 800780a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800781a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6819      	ldr	r1, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	430a      	orrs	r2, r1
 800782a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f042 0201 	orr.w	r2, r2, #1
 800783a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2220      	movs	r2, #32
 8007840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800784c:	2300      	movs	r3, #0
 800784e:	e000      	b.n	8007852 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007850:	2302      	movs	r3, #2
  }
}
 8007852:	4618      	mov	r0, r3
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800785e:	b480      	push	{r7}
 8007860:	b085      	sub	sp, #20
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b20      	cmp	r3, #32
 8007872:	d139      	bne.n	80078e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800787a:	2b01      	cmp	r3, #1
 800787c:	d101      	bne.n	8007882 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800787e:	2302      	movs	r3, #2
 8007880:	e033      	b.n	80078ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2201      	movs	r2, #1
 8007886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2224      	movs	r2, #36	; 0x24
 800788e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f022 0201 	bic.w	r2, r2, #1
 80078a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80078b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	021b      	lsls	r3, r3, #8
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f042 0201 	orr.w	r2, r2, #1
 80078d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2220      	movs	r2, #32
 80078d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	e000      	b.n	80078ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80078e8:	2302      	movs	r3, #2
  }
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
	...

080078f8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80078f8:	b480      	push	{r7}
 80078fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078fc:	4b05      	ldr	r3, [pc, #20]	; (8007914 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a04      	ldr	r2, [pc, #16]	; (8007914 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007906:	6013      	str	r3, [r2, #0]
}
 8007908:	bf00      	nop
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	58000400 	.word	0x58000400

08007918 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007918:	b480      	push	{r7}
 800791a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800791c:	4b04      	ldr	r3, [pc, #16]	; (8007930 <HAL_PWREx_GetVoltageRange+0x18>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8007924:	4618      	mov	r0, r3
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	58000400 	.word	0x58000400

08007934 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007934:	b480      	push	{r7}
 8007936:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007942:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007946:	d101      	bne.n	800794c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007948:	2301      	movs	r3, #1
 800794a:	e000      	b.n	800794e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <LL_RCC_HSE_Enable>:
{
 8007958:	b480      	push	{r7}
 800795a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800795c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800796a:	6013      	str	r3, [r2, #0]
}
 800796c:	bf00      	nop
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <LL_RCC_HSE_Disable>:
{
 8007976:	b480      	push	{r7}
 8007978:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800797a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007988:	6013      	str	r3, [r2, #0]
}
 800798a:	bf00      	nop
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <LL_RCC_HSE_IsReady>:
{
 8007994:	b480      	push	{r7}
 8007996:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079a6:	d101      	bne.n	80079ac <LL_RCC_HSE_IsReady+0x18>
 80079a8:	2301      	movs	r3, #1
 80079aa:	e000      	b.n	80079ae <LL_RCC_HSE_IsReady+0x1a>
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <LL_RCC_HSI_Enable>:
{
 80079b8:	b480      	push	{r7}
 80079ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80079bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079ca:	6013      	str	r3, [r2, #0]
}
 80079cc:	bf00      	nop
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <LL_RCC_HSI_Disable>:
{
 80079d6:	b480      	push	{r7}
 80079d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80079da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079e8:	6013      	str	r3, [r2, #0]
}
 80079ea:	bf00      	nop
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <LL_RCC_HSI_IsReady>:
{
 80079f4:	b480      	push	{r7}
 80079f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80079f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a06:	d101      	bne.n	8007a0c <LL_RCC_HSI_IsReady+0x18>
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e000      	b.n	8007a0e <LL_RCC_HSI_IsReady+0x1a>
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <LL_RCC_HSI_SetCalibTrimming>:
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	061b      	lsls	r3, r3, #24
 8007a2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a32:	4313      	orrs	r3, r2
 8007a34:	604b      	str	r3, [r1, #4]
}
 8007a36:	bf00      	nop
 8007a38:	370c      	adds	r7, #12
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <LL_RCC_HSI48_Enable>:
{
 8007a42:	b480      	push	{r7}
 8007a44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a52:	f043 0301 	orr.w	r3, r3, #1
 8007a56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8007a5a:	bf00      	nop
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <LL_RCC_HSI48_Disable>:
{
 8007a64:	b480      	push	{r7}
 8007a66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a74:	f023 0301 	bic.w	r3, r3, #1
 8007a78:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8007a7c:	bf00      	nop
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <LL_RCC_HSI48_IsReady>:
{
 8007a86:	b480      	push	{r7}
 8007a88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8007a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a92:	f003 0302 	and.w	r3, r3, #2
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d101      	bne.n	8007a9e <LL_RCC_HSI48_IsReady+0x18>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e000      	b.n	8007aa0 <LL_RCC_HSI48_IsReady+0x1a>
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr

08007aaa <LL_RCC_LSE_Enable>:
{
 8007aaa:	b480      	push	{r7}
 8007aac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ab6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007aba:	f043 0301 	orr.w	r3, r3, #1
 8007abe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007ac2:	bf00      	nop
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <LL_RCC_LSE_Disable>:
{
 8007acc:	b480      	push	{r7}
 8007ace:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ad8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007adc:	f023 0301 	bic.w	r3, r3, #1
 8007ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007ae4:	bf00      	nop
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <LL_RCC_LSE_EnableBypass>:
{
 8007aee:	b480      	push	{r7}
 8007af0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007afa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007afe:	f043 0304 	orr.w	r3, r3, #4
 8007b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007b06:	bf00      	nop
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <LL_RCC_LSE_DisableBypass>:
{
 8007b10:	b480      	push	{r7}
 8007b12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b20:	f023 0304 	bic.w	r3, r3, #4
 8007b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007b28:	bf00      	nop
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <LL_RCC_LSE_IsReady>:
{
 8007b32:	b480      	push	{r7}
 8007b34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b3e:	f003 0302 	and.w	r3, r3, #2
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d101      	bne.n	8007b4a <LL_RCC_LSE_IsReady+0x18>
 8007b46:	2301      	movs	r3, #1
 8007b48:	e000      	b.n	8007b4c <LL_RCC_LSE_IsReady+0x1a>
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr

08007b56 <LL_RCC_LSI1_Enable>:
{
 8007b56:	b480      	push	{r7}
 8007b58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8007b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b66:	f043 0301 	orr.w	r3, r3, #1
 8007b6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007b6e:	bf00      	nop
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <LL_RCC_LSI1_Disable>:
{
 8007b78:	b480      	push	{r7}
 8007b7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8007b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b88:	f023 0301 	bic.w	r3, r3, #1
 8007b8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007b90:	bf00      	nop
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <LL_RCC_LSI1_IsReady>:
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8007b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ba6:	f003 0302 	and.w	r3, r3, #2
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d101      	bne.n	8007bb2 <LL_RCC_LSI1_IsReady+0x18>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e000      	b.n	8007bb4 <LL_RCC_LSI1_IsReady+0x1a>
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr

08007bbe <LL_RCC_LSI2_Enable>:
{
 8007bbe:	b480      	push	{r7}
 8007bc0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007bce:	f043 0304 	orr.w	r3, r3, #4
 8007bd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007bd6:	bf00      	nop
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <LL_RCC_LSI2_Disable>:
{
 8007be0:	b480      	push	{r7}
 8007be2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007bf0:	f023 0304 	bic.w	r3, r3, #4
 8007bf4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007bf8:	bf00      	nop
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <LL_RCC_LSI2_IsReady>:
{
 8007c02:	b480      	push	{r7}
 8007c04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8007c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c0e:	f003 0308 	and.w	r3, r3, #8
 8007c12:	2b08      	cmp	r3, #8
 8007c14:	d101      	bne.n	8007c1a <LL_RCC_LSI2_IsReady+0x18>
 8007c16:	2301      	movs	r3, #1
 8007c18:	e000      	b.n	8007c1c <LL_RCC_LSI2_IsReady+0x1a>
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <LL_RCC_LSI2_SetTrimming>:
{
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8007c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c36:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	021b      	lsls	r3, r3, #8
 8007c3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c42:	4313      	orrs	r3, r2
 8007c44:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <LL_RCC_MSI_Enable>:
{
 8007c54:	b480      	push	{r7}
 8007c56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8007c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c62:	f043 0301 	orr.w	r3, r3, #1
 8007c66:	6013      	str	r3, [r2, #0]
}
 8007c68:	bf00      	nop
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <LL_RCC_MSI_Disable>:
{
 8007c72:	b480      	push	{r7}
 8007c74:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8007c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c80:	f023 0301 	bic.w	r3, r3, #1
 8007c84:	6013      	str	r3, [r2, #0]
}
 8007c86:	bf00      	nop
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <LL_RCC_MSI_IsReady>:
{
 8007c90:	b480      	push	{r7}
 8007c92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 0302 	and.w	r3, r3, #2
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d101      	bne.n	8007ca6 <LL_RCC_MSI_IsReady+0x16>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e000      	b.n	8007ca8 <LL_RCC_MSI_IsReady+0x18>
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <LL_RCC_MSI_SetRange>:
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b083      	sub	sp, #12
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8007cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007cc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	600b      	str	r3, [r1, #0]
}
 8007cce:	bf00      	nop
 8007cd0:	370c      	adds	r7, #12
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr

08007cda <LL_RCC_MSI_GetRange>:
{
 8007cda:	b480      	push	{r7}
 8007cdc:	b083      	sub	sp, #12
 8007cde:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8007ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007cea:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2bb0      	cmp	r3, #176	; 0xb0
 8007cf0:	d901      	bls.n	8007cf6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8007cf2:	23b0      	movs	r3, #176	; 0xb0
 8007cf4:	607b      	str	r3, [r7, #4]
  return msiRange;
 8007cf6:	687b      	ldr	r3, [r7, #4]
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <LL_RCC_MSI_SetCalibTrimming>:
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8007d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	021b      	lsls	r3, r3, #8
 8007d1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	604b      	str	r3, [r1, #4]
}
 8007d22:	bf00      	nop
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <LL_RCC_SetSysClkSource>:
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b083      	sub	sp, #12
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	f023 0203 	bic.w	r2, r3, #3
 8007d40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	608b      	str	r3, [r1, #8]
}
 8007d4a:	bf00      	nop
 8007d4c:	370c      	adds	r7, #12
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <LL_RCC_GetSysClkSource>:
{
 8007d56:	b480      	push	{r7}
 8007d58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	f003 030c 	and.w	r3, r3, #12
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <LL_RCC_SetAHBPrescaler>:
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	608b      	str	r3, [r1, #8]
}
 8007d8a:	bf00      	nop
 8007d8c:	370c      	adds	r7, #12
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <LL_C2_RCC_SetAHBPrescaler>:
{
 8007d96:	b480      	push	{r7}
 8007d98:	b083      	sub	sp, #12
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8007d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007da2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007da6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007daa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8007db6:	bf00      	nop
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <LL_RCC_SetAHB4Prescaler>:
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b083      	sub	sp, #12
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8007dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007dd2:	f023 020f 	bic.w	r2, r3, #15
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	091b      	lsrs	r3, r3, #4
 8007dda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007dde:	4313      	orrs	r3, r2
 8007de0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <LL_RCC_SetAPB1Prescaler>:
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	608b      	str	r3, [r1, #8]
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <LL_RCC_SetAPB2Prescaler>:
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007e2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	608b      	str	r3, [r1, #8]
}
 8007e34:	bf00      	nop
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <LL_RCC_GetAHBPrescaler>:
{
 8007e40:	b480      	push	{r7}
 8007e42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <LL_C2_RCC_GetAHBPrescaler>:
{
 8007e58:	b480      	push	{r7}
 8007e5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8007e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e60:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007e64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <LL_RCC_GetAHB4Prescaler>:
{
 8007e72:	b480      	push	{r7}
 8007e74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8007e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e7a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007e7e:	011b      	lsls	r3, r3, #4
 8007e80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr

08007e8e <LL_RCC_GetAPB1Prescaler>:
{
 8007e8e:	b480      	push	{r7}
 8007e90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr

08007ea6 <LL_RCC_GetAPB2Prescaler>:
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <LL_RCC_PLL_Enable>:
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ecc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ed0:	6013      	str	r3, [r2, #0]
}
 8007ed2:	bf00      	nop
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <LL_RCC_PLL_Disable>:
{
 8007edc:	b480      	push	{r7}
 8007ede:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8007ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007eea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007eee:	6013      	str	r3, [r2, #0]
}
 8007ef0:	bf00      	nop
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <LL_RCC_PLL_IsReady>:
{
 8007efa:	b480      	push	{r7}
 8007efc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8007efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f0c:	d101      	bne.n	8007f12 <LL_RCC_PLL_IsReady+0x18>
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e000      	b.n	8007f14 <LL_RCC_PLL_IsReady+0x1a>
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <LL_RCC_PLL_GetN>:
{
 8007f1e:	b480      	push	{r7}
 8007f20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	0a1b      	lsrs	r3, r3, #8
 8007f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <LL_RCC_PLL_GetR>:
{
 8007f38:	b480      	push	{r7}
 8007f3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <LL_RCC_PLL_GetDivider>:
{
 8007f50:	b480      	push	{r7}
 8007f52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <LL_RCC_PLL_GetMainSource>:
{
 8007f68:	b480      	push	{r7}
 8007f6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	f003 0303 	and.w	r3, r3, #3
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <LL_RCC_IsActiveFlag_HPRE>:
{
 8007f80:	b480      	push	{r7}
 8007f82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8007f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f92:	d101      	bne.n	8007f98 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8007f94:	2301      	movs	r3, #1
 8007f96:	e000      	b.n	8007f9a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8007fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fac:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fb8:	d101      	bne.n	8007fbe <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e000      	b.n	8007fc0 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8007fca:	b480      	push	{r7}
 8007fcc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8007fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fd2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fde:	d101      	bne.n	8007fe4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e000      	b.n	8007fe6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8007ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ffe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008002:	d101      	bne.n	8008008 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8008004:	2301      	movs	r3, #1
 8008006:	e000      	b.n	800800a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8008014:	b480      	push	{r7}
 8008016:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8008018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008022:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008026:	d101      	bne.n	800802c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8008028:	2301      	movs	r3, #1
 800802a:	e000      	b.n	800802e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008038:	b590      	push	{r4, r7, lr}
 800803a:	b08d      	sub	sp, #52	; 0x34
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d101      	bne.n	800804a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e37e      	b.n	8008748 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 0320 	and.w	r3, r3, #32
 8008052:	2b00      	cmp	r3, #0
 8008054:	f000 8092 	beq.w	800817c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008058:	f7ff fe7d 	bl	8007d56 <LL_RCC_GetSysClkSource>
 800805c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800805e:	f7ff ff83 	bl	8007f68 <LL_RCC_PLL_GetMainSource>
 8008062:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008066:	2b00      	cmp	r3, #0
 8008068:	d005      	beq.n	8008076 <HAL_RCC_OscConfig+0x3e>
 800806a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806c:	2b0c      	cmp	r3, #12
 800806e:	d14c      	bne.n	800810a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8008070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008072:	2b01      	cmp	r3, #1
 8008074:	d149      	bne.n	800810a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008076:	f7ff fe0b 	bl	8007c90 <LL_RCC_MSI_IsReady>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d005      	beq.n	800808c <HAL_RCC_OscConfig+0x54>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	69db      	ldr	r3, [r3, #28]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d101      	bne.n	800808c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	e35d      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008090:	f7ff fe23 	bl	8007cda <LL_RCC_MSI_GetRange>
 8008094:	4603      	mov	r3, r0
 8008096:	429c      	cmp	r4, r3
 8008098:	d914      	bls.n	80080c4 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 fd72 	bl	8008b88 <RCC_SetFlashLatencyFromMSIRange>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d001      	beq.n	80080ae <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e34c      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7ff fdfd 	bl	8007cb2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a1b      	ldr	r3, [r3, #32]
 80080bc:	4618      	mov	r0, r3
 80080be:	f7ff fe21 	bl	8007d04 <LL_RCC_MSI_SetCalibTrimming>
 80080c2:	e013      	b.n	80080ec <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7ff fdf2 	bl	8007cb2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7ff fe16 	bl	8007d04 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 fd53 	bl	8008b88 <RCC_SetFlashLatencyFromMSIRange>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e32d      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80080ec:	f000 fcda 	bl	8008aa4 <HAL_RCC_GetHCLKFreq>
 80080f0:	4602      	mov	r2, r0
 80080f2:	4bb3      	ldr	r3, [pc, #716]	; (80083c0 <HAL_RCC_OscConfig+0x388>)
 80080f4:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80080f6:	4bb3      	ldr	r3, [pc, #716]	; (80083c4 <HAL_RCC_OscConfig+0x38c>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7fd fcee 	bl	8005adc <HAL_InitTick>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d039      	beq.n	800817a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e31e      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	69db      	ldr	r3, [r3, #28]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d01e      	beq.n	8008150 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008112:	f7ff fd9f 	bl	8007c54 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008116:	f7fd ff01 	bl	8005f1c <HAL_GetTick>
 800811a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800811c:	e008      	b.n	8008130 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800811e:	f7fd fefd 	bl	8005f1c <HAL_GetTick>
 8008122:	4602      	mov	r2, r0
 8008124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008126:	1ad3      	subs	r3, r2, r3
 8008128:	2b02      	cmp	r3, #2
 800812a:	d901      	bls.n	8008130 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800812c:	2303      	movs	r3, #3
 800812e:	e30b      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8008130:	f7ff fdae 	bl	8007c90 <LL_RCC_MSI_IsReady>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d0f1      	beq.n	800811e <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813e:	4618      	mov	r0, r3
 8008140:	f7ff fdb7 	bl	8007cb2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a1b      	ldr	r3, [r3, #32]
 8008148:	4618      	mov	r0, r3
 800814a:	f7ff fddb 	bl	8007d04 <LL_RCC_MSI_SetCalibTrimming>
 800814e:	e015      	b.n	800817c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008150:	f7ff fd8f 	bl	8007c72 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008154:	f7fd fee2 	bl	8005f1c <HAL_GetTick>
 8008158:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800815a:	e008      	b.n	800816e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800815c:	f7fd fede 	bl	8005f1c <HAL_GetTick>
 8008160:	4602      	mov	r2, r0
 8008162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008164:	1ad3      	subs	r3, r2, r3
 8008166:	2b02      	cmp	r3, #2
 8008168:	d901      	bls.n	800816e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e2ec      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800816e:	f7ff fd8f 	bl	8007c90 <LL_RCC_MSI_IsReady>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d1f1      	bne.n	800815c <HAL_RCC_OscConfig+0x124>
 8008178:	e000      	b.n	800817c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800817a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 0301 	and.w	r3, r3, #1
 8008184:	2b00      	cmp	r3, #0
 8008186:	d04e      	beq.n	8008226 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008188:	f7ff fde5 	bl	8007d56 <LL_RCC_GetSysClkSource>
 800818c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800818e:	f7ff feeb 	bl	8007f68 <LL_RCC_PLL_GetMainSource>
 8008192:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008194:	6a3b      	ldr	r3, [r7, #32]
 8008196:	2b08      	cmp	r3, #8
 8008198:	d005      	beq.n	80081a6 <HAL_RCC_OscConfig+0x16e>
 800819a:	6a3b      	ldr	r3, [r7, #32]
 800819c:	2b0c      	cmp	r3, #12
 800819e:	d10d      	bne.n	80081bc <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	2b03      	cmp	r3, #3
 80081a4:	d10a      	bne.n	80081bc <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081a6:	f7ff fbf5 	bl	8007994 <LL_RCC_HSE_IsReady>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d039      	beq.n	8008224 <HAL_RCC_OscConfig+0x1ec>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d135      	bne.n	8008224 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e2c5      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081c4:	d102      	bne.n	80081cc <HAL_RCC_OscConfig+0x194>
 80081c6:	f7ff fbc7 	bl	8007958 <LL_RCC_HSE_Enable>
 80081ca:	e001      	b.n	80081d0 <HAL_RCC_OscConfig+0x198>
 80081cc:	f7ff fbd3 	bl	8007976 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d012      	beq.n	80081fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081d8:	f7fd fea0 	bl	8005f1c <HAL_GetTick>
 80081dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80081de:	e008      	b.n	80081f2 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80081e0:	f7fd fe9c 	bl	8005f1c <HAL_GetTick>
 80081e4:	4602      	mov	r2, r0
 80081e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	2b64      	cmp	r3, #100	; 0x64
 80081ec:	d901      	bls.n	80081f2 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80081ee:	2303      	movs	r3, #3
 80081f0:	e2aa      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80081f2:	f7ff fbcf 	bl	8007994 <LL_RCC_HSE_IsReady>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d0f1      	beq.n	80081e0 <HAL_RCC_OscConfig+0x1a8>
 80081fc:	e013      	b.n	8008226 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081fe:	f7fd fe8d 	bl	8005f1c <HAL_GetTick>
 8008202:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8008204:	e008      	b.n	8008218 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008206:	f7fd fe89 	bl	8005f1c <HAL_GetTick>
 800820a:	4602      	mov	r2, r0
 800820c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	2b64      	cmp	r3, #100	; 0x64
 8008212:	d901      	bls.n	8008218 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8008214:	2303      	movs	r3, #3
 8008216:	e297      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8008218:	f7ff fbbc 	bl	8007994 <LL_RCC_HSE_IsReady>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1f1      	bne.n	8008206 <HAL_RCC_OscConfig+0x1ce>
 8008222:	e000      	b.n	8008226 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 0302 	and.w	r3, r3, #2
 800822e:	2b00      	cmp	r3, #0
 8008230:	d051      	beq.n	80082d6 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008232:	f7ff fd90 	bl	8007d56 <LL_RCC_GetSysClkSource>
 8008236:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008238:	f7ff fe96 	bl	8007f68 <LL_RCC_PLL_GetMainSource>
 800823c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	2b04      	cmp	r3, #4
 8008242:	d005      	beq.n	8008250 <HAL_RCC_OscConfig+0x218>
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	2b0c      	cmp	r3, #12
 8008248:	d113      	bne.n	8008272 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	2b02      	cmp	r3, #2
 800824e:	d110      	bne.n	8008272 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008250:	f7ff fbd0 	bl	80079f4 <LL_RCC_HSI_IsReady>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d005      	beq.n	8008266 <HAL_RCC_OscConfig+0x22e>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d101      	bne.n	8008266 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e270      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	4618      	mov	r0, r3
 800826c:	f7ff fbd4 	bl	8007a18 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008270:	e031      	b.n	80082d6 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d019      	beq.n	80082ae <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800827a:	f7ff fb9d 	bl	80079b8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800827e:	f7fd fe4d 	bl	8005f1c <HAL_GetTick>
 8008282:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8008284:	e008      	b.n	8008298 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008286:	f7fd fe49 	bl	8005f1c <HAL_GetTick>
 800828a:	4602      	mov	r2, r0
 800828c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828e:	1ad3      	subs	r3, r2, r3
 8008290:	2b02      	cmp	r3, #2
 8008292:	d901      	bls.n	8008298 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8008294:	2303      	movs	r3, #3
 8008296:	e257      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8008298:	f7ff fbac 	bl	80079f4 <LL_RCC_HSI_IsReady>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d0f1      	beq.n	8008286 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7ff fbb6 	bl	8007a18 <LL_RCC_HSI_SetCalibTrimming>
 80082ac:	e013      	b.n	80082d6 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082ae:	f7ff fb92 	bl	80079d6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082b2:	f7fd fe33 	bl	8005f1c <HAL_GetTick>
 80082b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80082b8:	e008      	b.n	80082cc <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082ba:	f7fd fe2f 	bl	8005f1c <HAL_GetTick>
 80082be:	4602      	mov	r2, r0
 80082c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d901      	bls.n	80082cc <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e23d      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80082cc:	f7ff fb92 	bl	80079f4 <LL_RCC_HSI_IsReady>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1f1      	bne.n	80082ba <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 0308 	and.w	r3, r3, #8
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d106      	bne.n	80082f0 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f000 80a3 	beq.w	8008436 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	695b      	ldr	r3, [r3, #20]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d076      	beq.n	80083e6 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 0310 	and.w	r3, r3, #16
 8008300:	2b00      	cmp	r3, #0
 8008302:	d046      	beq.n	8008392 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8008304:	f7ff fc49 	bl	8007b9a <LL_RCC_LSI1_IsReady>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d113      	bne.n	8008336 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800830e:	f7ff fc22 	bl	8007b56 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008312:	f7fd fe03 	bl	8005f1c <HAL_GetTick>
 8008316:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008318:	e008      	b.n	800832c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800831a:	f7fd fdff 	bl	8005f1c <HAL_GetTick>
 800831e:	4602      	mov	r2, r0
 8008320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	2b02      	cmp	r3, #2
 8008326:	d901      	bls.n	800832c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8008328:	2303      	movs	r3, #3
 800832a:	e20d      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800832c:	f7ff fc35 	bl	8007b9a <LL_RCC_LSI1_IsReady>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d0f1      	beq.n	800831a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8008336:	f7ff fc42 	bl	8007bbe <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800833a:	f7fd fdef 	bl	8005f1c <HAL_GetTick>
 800833e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008340:	e008      	b.n	8008354 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008342:	f7fd fdeb 	bl	8005f1c <HAL_GetTick>
 8008346:	4602      	mov	r2, r0
 8008348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	2b03      	cmp	r3, #3
 800834e:	d901      	bls.n	8008354 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8008350:	2303      	movs	r3, #3
 8008352:	e1f9      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008354:	f7ff fc55 	bl	8007c02 <LL_RCC_LSI2_IsReady>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d0f1      	beq.n	8008342 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	4618      	mov	r0, r3
 8008364:	f7ff fc5f 	bl	8007c26 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8008368:	f7ff fc06 	bl	8007b78 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800836c:	f7fd fdd6 	bl	8005f1c <HAL_GetTick>
 8008370:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008372:	e008      	b.n	8008386 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008374:	f7fd fdd2 	bl	8005f1c <HAL_GetTick>
 8008378:	4602      	mov	r2, r0
 800837a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	2b02      	cmp	r3, #2
 8008380:	d901      	bls.n	8008386 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	e1e0      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008386:	f7ff fc08 	bl	8007b9a <LL_RCC_LSI1_IsReady>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d1f1      	bne.n	8008374 <HAL_RCC_OscConfig+0x33c>
 8008390:	e051      	b.n	8008436 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8008392:	f7ff fbe0 	bl	8007b56 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008396:	f7fd fdc1 	bl	8005f1c <HAL_GetTick>
 800839a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800839c:	e008      	b.n	80083b0 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800839e:	f7fd fdbd 	bl	8005f1c <HAL_GetTick>
 80083a2:	4602      	mov	r2, r0
 80083a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	d901      	bls.n	80083b0 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80083ac:	2303      	movs	r3, #3
 80083ae:	e1cb      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80083b0:	f7ff fbf3 	bl	8007b9a <LL_RCC_LSI1_IsReady>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d0f1      	beq.n	800839e <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80083ba:	f7ff fc11 	bl	8007be0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80083be:	e00c      	b.n	80083da <HAL_RCC_OscConfig+0x3a2>
 80083c0:	20000020 	.word	0x20000020
 80083c4:	20000024 	.word	0x20000024
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80083c8:	f7fd fda8 	bl	8005f1c <HAL_GetTick>
 80083cc:	4602      	mov	r2, r0
 80083ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	2b03      	cmp	r3, #3
 80083d4:	d901      	bls.n	80083da <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80083d6:	2303      	movs	r3, #3
 80083d8:	e1b6      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80083da:	f7ff fc12 	bl	8007c02 <LL_RCC_LSI2_IsReady>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1f1      	bne.n	80083c8 <HAL_RCC_OscConfig+0x390>
 80083e4:	e027      	b.n	8008436 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80083e6:	f7ff fbfb 	bl	8007be0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083ea:	f7fd fd97 	bl	8005f1c <HAL_GetTick>
 80083ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80083f0:	e008      	b.n	8008404 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80083f2:	f7fd fd93 	bl	8005f1c <HAL_GetTick>
 80083f6:	4602      	mov	r2, r0
 80083f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	2b03      	cmp	r3, #3
 80083fe:	d901      	bls.n	8008404 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	e1a1      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008404:	f7ff fbfd 	bl	8007c02 <LL_RCC_LSI2_IsReady>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1f1      	bne.n	80083f2 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800840e:	f7ff fbb3 	bl	8007b78 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008412:	f7fd fd83 	bl	8005f1c <HAL_GetTick>
 8008416:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008418:	e008      	b.n	800842c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800841a:	f7fd fd7f 	bl	8005f1c <HAL_GetTick>
 800841e:	4602      	mov	r2, r0
 8008420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008422:	1ad3      	subs	r3, r2, r3
 8008424:	2b02      	cmp	r3, #2
 8008426:	d901      	bls.n	800842c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8008428:	2303      	movs	r3, #3
 800842a:	e18d      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800842c:	f7ff fbb5 	bl	8007b9a <LL_RCC_LSI1_IsReady>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d1f1      	bne.n	800841a <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 0304 	and.w	r3, r3, #4
 800843e:	2b00      	cmp	r3, #0
 8008440:	d05b      	beq.n	80084fa <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008442:	4bb5      	ldr	r3, [pc, #724]	; (8008718 <HAL_RCC_OscConfig+0x6e0>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800844a:	2b00      	cmp	r3, #0
 800844c:	d114      	bne.n	8008478 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800844e:	f7ff fa53 	bl	80078f8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008452:	f7fd fd63 	bl	8005f1c <HAL_GetTick>
 8008456:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008458:	e008      	b.n	800846c <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800845a:	f7fd fd5f 	bl	8005f1c <HAL_GetTick>
 800845e:	4602      	mov	r2, r0
 8008460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	2b02      	cmp	r3, #2
 8008466:	d901      	bls.n	800846c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8008468:	2303      	movs	r3, #3
 800846a:	e16d      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800846c:	4baa      	ldr	r3, [pc, #680]	; (8008718 <HAL_RCC_OscConfig+0x6e0>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008474:	2b00      	cmp	r3, #0
 8008476:	d0f0      	beq.n	800845a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d102      	bne.n	8008486 <HAL_RCC_OscConfig+0x44e>
 8008480:	f7ff fb13 	bl	8007aaa <LL_RCC_LSE_Enable>
 8008484:	e00c      	b.n	80084a0 <HAL_RCC_OscConfig+0x468>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	2b05      	cmp	r3, #5
 800848c:	d104      	bne.n	8008498 <HAL_RCC_OscConfig+0x460>
 800848e:	f7ff fb2e 	bl	8007aee <LL_RCC_LSE_EnableBypass>
 8008492:	f7ff fb0a 	bl	8007aaa <LL_RCC_LSE_Enable>
 8008496:	e003      	b.n	80084a0 <HAL_RCC_OscConfig+0x468>
 8008498:	f7ff fb18 	bl	8007acc <LL_RCC_LSE_Disable>
 800849c:	f7ff fb38 	bl	8007b10 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d014      	beq.n	80084d2 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084a8:	f7fd fd38 	bl	8005f1c <HAL_GetTick>
 80084ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80084ae:	e00a      	b.n	80084c6 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084b0:	f7fd fd34 	bl	8005f1c <HAL_GetTick>
 80084b4:	4602      	mov	r2, r0
 80084b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80084be:	4293      	cmp	r3, r2
 80084c0:	d901      	bls.n	80084c6 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80084c2:	2303      	movs	r3, #3
 80084c4:	e140      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80084c6:	f7ff fb34 	bl	8007b32 <LL_RCC_LSE_IsReady>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d0ef      	beq.n	80084b0 <HAL_RCC_OscConfig+0x478>
 80084d0:	e013      	b.n	80084fa <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084d2:	f7fd fd23 	bl	8005f1c <HAL_GetTick>
 80084d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80084d8:	e00a      	b.n	80084f0 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084da:	f7fd fd1f 	bl	8005f1c <HAL_GetTick>
 80084de:	4602      	mov	r2, r0
 80084e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d901      	bls.n	80084f0 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80084ec:	2303      	movs	r3, #3
 80084ee:	e12b      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80084f0:	f7ff fb1f 	bl	8007b32 <LL_RCC_LSE_IsReady>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1ef      	bne.n	80084da <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008502:	2b00      	cmp	r3, #0
 8008504:	d02c      	beq.n	8008560 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800850a:	2b00      	cmp	r3, #0
 800850c:	d014      	beq.n	8008538 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800850e:	f7ff fa98 	bl	8007a42 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008512:	f7fd fd03 	bl	8005f1c <HAL_GetTick>
 8008516:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008518:	e008      	b.n	800852c <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800851a:	f7fd fcff 	bl	8005f1c <HAL_GetTick>
 800851e:	4602      	mov	r2, r0
 8008520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	2b02      	cmp	r3, #2
 8008526:	d901      	bls.n	800852c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8008528:	2303      	movs	r3, #3
 800852a:	e10d      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800852c:	f7ff faab 	bl	8007a86 <LL_RCC_HSI48_IsReady>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d0f1      	beq.n	800851a <HAL_RCC_OscConfig+0x4e2>
 8008536:	e013      	b.n	8008560 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008538:	f7ff fa94 	bl	8007a64 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800853c:	f7fd fcee 	bl	8005f1c <HAL_GetTick>
 8008540:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008542:	e008      	b.n	8008556 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008544:	f7fd fcea 	bl	8005f1c <HAL_GetTick>
 8008548:	4602      	mov	r2, r0
 800854a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	2b02      	cmp	r3, #2
 8008550:	d901      	bls.n	8008556 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8008552:	2303      	movs	r3, #3
 8008554:	e0f8      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008556:	f7ff fa96 	bl	8007a86 <LL_RCC_HSI48_IsReady>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d1f1      	bne.n	8008544 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008564:	2b00      	cmp	r3, #0
 8008566:	f000 80ee 	beq.w	8008746 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800856a:	f7ff fbf4 	bl	8007d56 <LL_RCC_GetSysClkSource>
 800856e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8008570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857c:	2b02      	cmp	r3, #2
 800857e:	f040 80af 	bne.w	80086e0 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f003 0203 	and.w	r2, r3, #3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800858c:	429a      	cmp	r2, r3
 800858e:	d123      	bne.n	80085d8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800859a:	429a      	cmp	r2, r3
 800859c:	d11c      	bne.n	80085d8 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	0a1b      	lsrs	r3, r3, #8
 80085a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d114      	bne.n	80085d8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d10d      	bne.n	80085d8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d106      	bne.n	80085d8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d05d      	beq.n	8008694 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	2b0c      	cmp	r3, #12
 80085dc:	d058      	beq.n	8008690 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80085de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d001      	beq.n	80085f0 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e0ab      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80085f0:	f7ff fc74 	bl	8007edc <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80085f4:	f7fd fc92 	bl	8005f1c <HAL_GetTick>
 80085f8:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80085fa:	e008      	b.n	800860e <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085fc:	f7fd fc8e 	bl	8005f1c <HAL_GetTick>
 8008600:	4602      	mov	r2, r0
 8008602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	2b02      	cmp	r3, #2
 8008608:	d901      	bls.n	800860e <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 800860a:	2303      	movs	r3, #3
 800860c:	e09c      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800860e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1ef      	bne.n	80085fc <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800861c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008620:	68da      	ldr	r2, [r3, #12]
 8008622:	4b3e      	ldr	r3, [pc, #248]	; (800871c <HAL_RCC_OscConfig+0x6e4>)
 8008624:	4013      	ands	r3, r2
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800862e:	4311      	orrs	r1, r2
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008634:	0212      	lsls	r2, r2, #8
 8008636:	4311      	orrs	r1, r2
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800863c:	4311      	orrs	r1, r2
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008642:	4311      	orrs	r1, r2
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008648:	430a      	orrs	r2, r1
 800864a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800864e:	4313      	orrs	r3, r2
 8008650:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008652:	f7ff fc34 	bl	8007ebe <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008664:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008666:	f7fd fc59 	bl	8005f1c <HAL_GetTick>
 800866a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800866c:	e008      	b.n	8008680 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800866e:	f7fd fc55 	bl	8005f1c <HAL_GetTick>
 8008672:	4602      	mov	r2, r0
 8008674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	2b02      	cmp	r3, #2
 800867a:	d901      	bls.n	8008680 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 800867c:	2303      	movs	r3, #3
 800867e:	e063      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800868a:	2b00      	cmp	r3, #0
 800868c:	d0ef      	beq.n	800866e <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800868e:	e05a      	b.n	8008746 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e059      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d151      	bne.n	8008746 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80086a2:	f7ff fc0c 	bl	8007ebe <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80086a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086b4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80086b6:	f7fd fc31 	bl	8005f1c <HAL_GetTick>
 80086ba:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80086bc:	e008      	b.n	80086d0 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086be:	f7fd fc2d 	bl	8005f1c <HAL_GetTick>
 80086c2:	4602      	mov	r2, r0
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d901      	bls.n	80086d0 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 80086cc:	2303      	movs	r3, #3
 80086ce:	e03b      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80086d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d0ef      	beq.n	80086be <HAL_RCC_OscConfig+0x686>
 80086de:	e032      	b.n	8008746 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	2b0c      	cmp	r3, #12
 80086e4:	d02d      	beq.n	8008742 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086e6:	f7ff fbf9 	bl	8007edc <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80086ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086f4:	f023 0303 	bic.w	r3, r3, #3
 80086f8:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80086fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008704:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8008708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800870c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800870e:	f7fd fc05 	bl	8005f1c <HAL_GetTick>
 8008712:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008714:	e00d      	b.n	8008732 <HAL_RCC_OscConfig+0x6fa>
 8008716:	bf00      	nop
 8008718:	58000400 	.word	0x58000400
 800871c:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008720:	f7fd fbfc 	bl	8005f1c <HAL_GetTick>
 8008724:	4602      	mov	r2, r0
 8008726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	2b02      	cmp	r3, #2
 800872c:	d901      	bls.n	8008732 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 800872e:	2303      	movs	r3, #3
 8008730:	e00a      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1ef      	bne.n	8008720 <HAL_RCC_OscConfig+0x6e8>
 8008740:	e001      	b.n	8008746 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	e000      	b.n	8008748 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	3734      	adds	r7, #52	; 0x34
 800874c:	46bd      	mov	sp, r7
 800874e:	bd90      	pop	{r4, r7, pc}

08008750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d101      	bne.n	8008764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	e12d      	b.n	80089c0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008764:	4b98      	ldr	r3, [pc, #608]	; (80089c8 <HAL_RCC_ClockConfig+0x278>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 0307 	and.w	r3, r3, #7
 800876c:	683a      	ldr	r2, [r7, #0]
 800876e:	429a      	cmp	r2, r3
 8008770:	d91b      	bls.n	80087aa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008772:	4b95      	ldr	r3, [pc, #596]	; (80089c8 <HAL_RCC_ClockConfig+0x278>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f023 0207 	bic.w	r2, r3, #7
 800877a:	4993      	ldr	r1, [pc, #588]	; (80089c8 <HAL_RCC_ClockConfig+0x278>)
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	4313      	orrs	r3, r2
 8008780:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008782:	f7fd fbcb 	bl	8005f1c <HAL_GetTick>
 8008786:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008788:	e008      	b.n	800879c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800878a:	f7fd fbc7 	bl	8005f1c <HAL_GetTick>
 800878e:	4602      	mov	r2, r0
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	2b02      	cmp	r3, #2
 8008796:	d901      	bls.n	800879c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e111      	b.n	80089c0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800879c:	4b8a      	ldr	r3, [pc, #552]	; (80089c8 <HAL_RCC_ClockConfig+0x278>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0307 	and.w	r3, r3, #7
 80087a4:	683a      	ldr	r2, [r7, #0]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d1ef      	bne.n	800878a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 0302 	and.w	r3, r3, #2
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d016      	beq.n	80087e4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7ff fad7 	bl	8007d6e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80087c0:	f7fd fbac 	bl	8005f1c <HAL_GetTick>
 80087c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80087c6:	e008      	b.n	80087da <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80087c8:	f7fd fba8 	bl	8005f1c <HAL_GetTick>
 80087cc:	4602      	mov	r2, r0
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	1ad3      	subs	r3, r2, r3
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d901      	bls.n	80087da <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80087d6:	2303      	movs	r3, #3
 80087d8:	e0f2      	b.n	80089c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80087da:	f7ff fbd1 	bl	8007f80 <LL_RCC_IsActiveFlag_HPRE>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d0f1      	beq.n	80087c8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 0320 	and.w	r3, r3, #32
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d016      	beq.n	800881e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	695b      	ldr	r3, [r3, #20]
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7ff face 	bl	8007d96 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80087fa:	f7fd fb8f 	bl	8005f1c <HAL_GetTick>
 80087fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008800:	e008      	b.n	8008814 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008802:	f7fd fb8b 	bl	8005f1c <HAL_GetTick>
 8008806:	4602      	mov	r2, r0
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	1ad3      	subs	r3, r2, r3
 800880c:	2b02      	cmp	r3, #2
 800880e:	d901      	bls.n	8008814 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008810:	2303      	movs	r3, #3
 8008812:	e0d5      	b.n	80089c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008814:	f7ff fbc6 	bl	8007fa4 <LL_RCC_IsActiveFlag_C2HPRE>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d0f1      	beq.n	8008802 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008826:	2b00      	cmp	r3, #0
 8008828:	d016      	beq.n	8008858 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	699b      	ldr	r3, [r3, #24]
 800882e:	4618      	mov	r0, r3
 8008830:	f7ff fac7 	bl	8007dc2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008834:	f7fd fb72 	bl	8005f1c <HAL_GetTick>
 8008838:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800883a:	e008      	b.n	800884e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800883c:	f7fd fb6e 	bl	8005f1c <HAL_GetTick>
 8008840:	4602      	mov	r2, r0
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	2b02      	cmp	r3, #2
 8008848:	d901      	bls.n	800884e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800884a:	2303      	movs	r3, #3
 800884c:	e0b8      	b.n	80089c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800884e:	f7ff fbbc 	bl	8007fca <LL_RCC_IsActiveFlag_SHDHPRE>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d0f1      	beq.n	800883c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 0304 	and.w	r3, r3, #4
 8008860:	2b00      	cmp	r3, #0
 8008862:	d016      	beq.n	8008892 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	4618      	mov	r0, r3
 800886a:	f7ff fac1 	bl	8007df0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800886e:	f7fd fb55 	bl	8005f1c <HAL_GetTick>
 8008872:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008874:	e008      	b.n	8008888 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008876:	f7fd fb51 	bl	8005f1c <HAL_GetTick>
 800887a:	4602      	mov	r2, r0
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	2b02      	cmp	r3, #2
 8008882:	d901      	bls.n	8008888 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8008884:	2303      	movs	r3, #3
 8008886:	e09b      	b.n	80089c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008888:	f7ff fbb2 	bl	8007ff0 <LL_RCC_IsActiveFlag_PPRE1>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d0f1      	beq.n	8008876 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 0308 	and.w	r3, r3, #8
 800889a:	2b00      	cmp	r3, #0
 800889c:	d017      	beq.n	80088ce <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	00db      	lsls	r3, r3, #3
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7ff fab7 	bl	8007e18 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80088aa:	f7fd fb37 	bl	8005f1c <HAL_GetTick>
 80088ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80088b0:	e008      	b.n	80088c4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80088b2:	f7fd fb33 	bl	8005f1c <HAL_GetTick>
 80088b6:	4602      	mov	r2, r0
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d901      	bls.n	80088c4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e07d      	b.n	80089c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80088c4:	f7ff fba6 	bl	8008014 <LL_RCC_IsActiveFlag_PPRE2>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d0f1      	beq.n	80088b2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 0301 	and.w	r3, r3, #1
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d043      	beq.n	8008962 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d106      	bne.n	80088f0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80088e2:	f7ff f857 	bl	8007994 <LL_RCC_HSE_IsReady>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d11e      	bne.n	800892a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e067      	b.n	80089c0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	2b03      	cmp	r3, #3
 80088f6:	d106      	bne.n	8008906 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80088f8:	f7ff faff 	bl	8007efa <LL_RCC_PLL_IsReady>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d113      	bne.n	800892a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e05c      	b.n	80089c0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d106      	bne.n	800891c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800890e:	f7ff f9bf 	bl	8007c90 <LL_RCC_MSI_IsReady>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d108      	bne.n	800892a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	e051      	b.n	80089c0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800891c:	f7ff f86a 	bl	80079f4 <LL_RCC_HSI_IsReady>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d101      	bne.n	800892a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e04a      	b.n	80089c0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	4618      	mov	r0, r3
 8008930:	f7ff f9fd 	bl	8007d2e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008934:	f7fd faf2 	bl	8005f1c <HAL_GetTick>
 8008938:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800893a:	e00a      	b.n	8008952 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800893c:	f7fd faee 	bl	8005f1c <HAL_GetTick>
 8008940:	4602      	mov	r2, r0
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	f241 3288 	movw	r2, #5000	; 0x1388
 800894a:	4293      	cmp	r3, r2
 800894c:	d901      	bls.n	8008952 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800894e:	2303      	movs	r3, #3
 8008950:	e036      	b.n	80089c0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008952:	f7ff fa00 	bl	8007d56 <LL_RCC_GetSysClkSource>
 8008956:	4602      	mov	r2, r0
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	429a      	cmp	r2, r3
 8008960:	d1ec      	bne.n	800893c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008962:	4b19      	ldr	r3, [pc, #100]	; (80089c8 <HAL_RCC_ClockConfig+0x278>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f003 0307 	and.w	r3, r3, #7
 800896a:	683a      	ldr	r2, [r7, #0]
 800896c:	429a      	cmp	r2, r3
 800896e:	d21b      	bcs.n	80089a8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008970:	4b15      	ldr	r3, [pc, #84]	; (80089c8 <HAL_RCC_ClockConfig+0x278>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f023 0207 	bic.w	r2, r3, #7
 8008978:	4913      	ldr	r1, [pc, #76]	; (80089c8 <HAL_RCC_ClockConfig+0x278>)
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	4313      	orrs	r3, r2
 800897e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008980:	f7fd facc 	bl	8005f1c <HAL_GetTick>
 8008984:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008986:	e008      	b.n	800899a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008988:	f7fd fac8 	bl	8005f1c <HAL_GetTick>
 800898c:	4602      	mov	r2, r0
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	2b02      	cmp	r3, #2
 8008994:	d901      	bls.n	800899a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e012      	b.n	80089c0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800899a:	4b0b      	ldr	r3, [pc, #44]	; (80089c8 <HAL_RCC_ClockConfig+0x278>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 0307 	and.w	r3, r3, #7
 80089a2:	683a      	ldr	r2, [r7, #0]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d1ef      	bne.n	8008988 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80089a8:	f000 f87c 	bl	8008aa4 <HAL_RCC_GetHCLKFreq>
 80089ac:	4602      	mov	r2, r0
 80089ae:	4b07      	ldr	r3, [pc, #28]	; (80089cc <HAL_RCC_ClockConfig+0x27c>)
 80089b0:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80089b2:	f7fd fabf 	bl	8005f34 <HAL_GetTickPrio>
 80089b6:	4603      	mov	r3, r0
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7fd f88f 	bl	8005adc <HAL_InitTick>
 80089be:	4603      	mov	r3, r0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	58004000 	.word	0x58004000
 80089cc:	20000020 	.word	0x20000020

080089d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80089d0:	b590      	push	{r4, r7, lr}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089d6:	f7ff f9be 	bl	8007d56 <LL_RCC_GetSysClkSource>
 80089da:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d10a      	bne.n	80089f8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80089e2:	f7ff f97a 	bl	8007cda <LL_RCC_MSI_GetRange>
 80089e6:	4603      	mov	r3, r0
 80089e8:	091b      	lsrs	r3, r3, #4
 80089ea:	f003 030f 	and.w	r3, r3, #15
 80089ee:	4a2a      	ldr	r2, [pc, #168]	; (8008a98 <HAL_RCC_GetSysClockFreq+0xc8>)
 80089f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089f4:	60fb      	str	r3, [r7, #12]
 80089f6:	e04a      	b.n	8008a8e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2b04      	cmp	r3, #4
 80089fc:	d102      	bne.n	8008a04 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80089fe:	4b27      	ldr	r3, [pc, #156]	; (8008a9c <HAL_RCC_GetSysClockFreq+0xcc>)
 8008a00:	60fb      	str	r3, [r7, #12]
 8008a02:	e044      	b.n	8008a8e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b08      	cmp	r3, #8
 8008a08:	d10a      	bne.n	8008a20 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008a0a:	f7fe ff93 	bl	8007934 <LL_RCC_HSE_IsEnabledDiv2>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d102      	bne.n	8008a1a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8008a14:	4b21      	ldr	r3, [pc, #132]	; (8008a9c <HAL_RCC_GetSysClockFreq+0xcc>)
 8008a16:	60fb      	str	r3, [r7, #12]
 8008a18:	e039      	b.n	8008a8e <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008a1a:	4b21      	ldr	r3, [pc, #132]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008a1c:	60fb      	str	r3, [r7, #12]
 8008a1e:	e036      	b.n	8008a8e <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008a20:	f7ff faa2 	bl	8007f68 <LL_RCC_PLL_GetMainSource>
 8008a24:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d002      	beq.n	8008a32 <HAL_RCC_GetSysClockFreq+0x62>
 8008a2c:	2b03      	cmp	r3, #3
 8008a2e:	d003      	beq.n	8008a38 <HAL_RCC_GetSysClockFreq+0x68>
 8008a30:	e00d      	b.n	8008a4e <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8008a32:	4b1a      	ldr	r3, [pc, #104]	; (8008a9c <HAL_RCC_GetSysClockFreq+0xcc>)
 8008a34:	60bb      	str	r3, [r7, #8]
        break;
 8008a36:	e015      	b.n	8008a64 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008a38:	f7fe ff7c 	bl	8007934 <LL_RCC_HSE_IsEnabledDiv2>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d102      	bne.n	8008a48 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8008a42:	4b16      	ldr	r3, [pc, #88]	; (8008a9c <HAL_RCC_GetSysClockFreq+0xcc>)
 8008a44:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8008a46:	e00d      	b.n	8008a64 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8008a48:	4b15      	ldr	r3, [pc, #84]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008a4a:	60bb      	str	r3, [r7, #8]
        break;
 8008a4c:	e00a      	b.n	8008a64 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008a4e:	f7ff f944 	bl	8007cda <LL_RCC_MSI_GetRange>
 8008a52:	4603      	mov	r3, r0
 8008a54:	091b      	lsrs	r3, r3, #4
 8008a56:	f003 030f 	and.w	r3, r3, #15
 8008a5a:	4a0f      	ldr	r2, [pc, #60]	; (8008a98 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a60:	60bb      	str	r3, [r7, #8]
        break;
 8008a62:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8008a64:	f7ff fa5b 	bl	8007f1e <LL_RCC_PLL_GetN>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	fb03 f402 	mul.w	r4, r3, r2
 8008a70:	f7ff fa6e 	bl	8007f50 <LL_RCC_PLL_GetDivider>
 8008a74:	4603      	mov	r3, r0
 8008a76:	091b      	lsrs	r3, r3, #4
 8008a78:	3301      	adds	r3, #1
 8008a7a:	fbb4 f4f3 	udiv	r4, r4, r3
 8008a7e:	f7ff fa5b 	bl	8007f38 <LL_RCC_PLL_GetR>
 8008a82:	4603      	mov	r3, r0
 8008a84:	0f5b      	lsrs	r3, r3, #29
 8008a86:	3301      	adds	r3, #1
 8008a88:	fbb4 f3f3 	udiv	r3, r4, r3
 8008a8c:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3714      	adds	r7, #20
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd90      	pop	{r4, r7, pc}
 8008a98:	08017cd8 	.word	0x08017cd8
 8008a9c:	00f42400 	.word	0x00f42400
 8008aa0:	01e84800 	.word	0x01e84800

08008aa4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008aa4:	b598      	push	{r3, r4, r7, lr}
 8008aa6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008aa8:	f7ff ff92 	bl	80089d0 <HAL_RCC_GetSysClockFreq>
 8008aac:	4604      	mov	r4, r0
 8008aae:	f7ff f9c7 	bl	8007e40 <LL_RCC_GetAHBPrescaler>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	091b      	lsrs	r3, r3, #4
 8008ab6:	f003 030f 	and.w	r3, r3, #15
 8008aba:	4a03      	ldr	r2, [pc, #12]	; (8008ac8 <HAL_RCC_GetHCLKFreq+0x24>)
 8008abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ac0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	bd98      	pop	{r3, r4, r7, pc}
 8008ac8:	08017c78 	.word	0x08017c78

08008acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008acc:	b598      	push	{r3, r4, r7, lr}
 8008ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008ad0:	f7ff ffe8 	bl	8008aa4 <HAL_RCC_GetHCLKFreq>
 8008ad4:	4604      	mov	r4, r0
 8008ad6:	f7ff f9da 	bl	8007e8e <LL_RCC_GetAPB1Prescaler>
 8008ada:	4603      	mov	r3, r0
 8008adc:	0a1b      	lsrs	r3, r3, #8
 8008ade:	f003 0307 	and.w	r3, r3, #7
 8008ae2:	4a04      	ldr	r2, [pc, #16]	; (8008af4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ae8:	f003 031f 	and.w	r3, r3, #31
 8008aec:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	bd98      	pop	{r3, r4, r7, pc}
 8008af4:	08017cb8 	.word	0x08017cb8

08008af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008af8:	b598      	push	{r3, r4, r7, lr}
 8008afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8008afc:	f7ff ffd2 	bl	8008aa4 <HAL_RCC_GetHCLKFreq>
 8008b00:	4604      	mov	r4, r0
 8008b02:	f7ff f9d0 	bl	8007ea6 <LL_RCC_GetAPB2Prescaler>
 8008b06:	4603      	mov	r3, r0
 8008b08:	0adb      	lsrs	r3, r3, #11
 8008b0a:	f003 0307 	and.w	r3, r3, #7
 8008b0e:	4a04      	ldr	r2, [pc, #16]	; (8008b20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b14:	f003 031f 	and.w	r3, r3, #31
 8008b18:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	bd98      	pop	{r3, r4, r7, pc}
 8008b20:	08017cb8 	.word	0x08017cb8

08008b24 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	226f      	movs	r2, #111	; 0x6f
 8008b32:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8008b34:	f7ff f90f 	bl	8007d56 <LL_RCC_GetSysClkSource>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8008b3e:	f7ff f97f 	bl	8007e40 <LL_RCC_GetAHBPrescaler>
 8008b42:	4602      	mov	r2, r0
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8008b48:	f7ff f9a1 	bl	8007e8e <LL_RCC_GetAPB1Prescaler>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8008b52:	f7ff f9a8 	bl	8007ea6 <LL_RCC_GetAPB2Prescaler>
 8008b56:	4602      	mov	r2, r0
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8008b5c:	f7ff f97c 	bl	8007e58 <LL_C2_RCC_GetAHBPrescaler>
 8008b60:	4602      	mov	r2, r0
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8008b66:	f7ff f984 	bl	8007e72 <LL_RCC_GetAHB4Prescaler>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008b70:	4b04      	ldr	r3, [pc, #16]	; (8008b84 <HAL_RCC_GetClockConfig+0x60>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 0207 	and.w	r2, r3, #7
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	601a      	str	r2, [r3, #0]
}
 8008b7c:	bf00      	nop
 8008b7e:	3708      	adds	r7, #8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	58004000 	.word	0x58004000

08008b88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008b88:	b590      	push	{r4, r7, lr}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2bb0      	cmp	r3, #176	; 0xb0
 8008b94:	d903      	bls.n	8008b9e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8008b96:	4b15      	ldr	r3, [pc, #84]	; (8008bec <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9a:	60fb      	str	r3, [r7, #12]
 8008b9c:	e007      	b.n	8008bae <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	091b      	lsrs	r3, r3, #4
 8008ba2:	f003 030f 	and.w	r3, r3, #15
 8008ba6:	4a11      	ldr	r2, [pc, #68]	; (8008bec <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bac:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8008bae:	f7ff f960 	bl	8007e72 <LL_RCC_GetAHB4Prescaler>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	091b      	lsrs	r3, r3, #4
 8008bb6:	f003 030f 	and.w	r3, r3, #15
 8008bba:	4a0d      	ldr	r2, [pc, #52]	; (8008bf0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8008bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bc6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	4a0a      	ldr	r2, [pc, #40]	; (8008bf4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8008bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8008bd0:	0c9c      	lsrs	r4, r3, #18
 8008bd2:	f7fe fea1 	bl	8007918 <HAL_PWREx_GetVoltageRange>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	4619      	mov	r1, r3
 8008bda:	4620      	mov	r0, r4
 8008bdc:	f000 f80c 	bl	8008bf8 <RCC_SetFlashLatency>
 8008be0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3714      	adds	r7, #20
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd90      	pop	{r4, r7, pc}
 8008bea:	bf00      	nop
 8008bec:	08017cd8 	.word	0x08017cd8
 8008bf0:	08017c78 	.word	0x08017c78
 8008bf4:	431bde83 	.word	0x431bde83

08008bf8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8008bf8:	b590      	push	{r4, r7, lr}
 8008bfa:	b093      	sub	sp, #76	; 0x4c
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8008c02:	4b39      	ldr	r3, [pc, #228]	; (8008ce8 <RCC_SetFlashLatency+0xf0>)
 8008c04:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8008c08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008c0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8008c0e:	4a37      	ldr	r2, [pc, #220]	; (8008cec <RCC_SetFlashLatency+0xf4>)
 8008c10:	f107 031c 	add.w	r3, r7, #28
 8008c14:	ca07      	ldmia	r2, {r0, r1, r2}
 8008c16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8008c1a:	4b35      	ldr	r3, [pc, #212]	; (8008cf0 <RCC_SetFlashLatency+0xf8>)
 8008c1c:	f107 040c 	add.w	r4, r7, #12
 8008c20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008c22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8008c26:	2300      	movs	r3, #0
 8008c28:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c30:	d11c      	bne.n	8008c6c <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008c32:	2300      	movs	r3, #0
 8008c34:	643b      	str	r3, [r7, #64]	; 0x40
 8008c36:	e015      	b.n	8008c64 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8008c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008c40:	4413      	add	r3, r2
 8008c42:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d808      	bhi.n	8008c5e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008c54:	4413      	add	r3, r2
 8008c56:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008c5a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8008c5c:	e022      	b.n	8008ca4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c60:	3301      	adds	r3, #1
 8008c62:	643b      	str	r3, [r7, #64]	; 0x40
 8008c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c66:	2b03      	cmp	r3, #3
 8008c68:	d9e6      	bls.n	8008c38 <RCC_SetFlashLatency+0x40>
 8008c6a:	e01b      	b.n	8008ca4 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c70:	e015      	b.n	8008c9e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8008c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008c7a:	4413      	add	r3, r2
 8008c7c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d808      	bhi.n	8008c98 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008c8e:	4413      	add	r3, r2
 8008c90:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008c94:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8008c96:	e005      	b.n	8008ca4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d9e6      	bls.n	8008c72 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8008ca4:	4b13      	ldr	r3, [pc, #76]	; (8008cf4 <RCC_SetFlashLatency+0xfc>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f023 0207 	bic.w	r2, r3, #7
 8008cac:	4911      	ldr	r1, [pc, #68]	; (8008cf4 <RCC_SetFlashLatency+0xfc>)
 8008cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008cb4:	f7fd f932 	bl	8005f1c <HAL_GetTick>
 8008cb8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008cba:	e008      	b.n	8008cce <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008cbc:	f7fd f92e 	bl	8005f1c <HAL_GetTick>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	d901      	bls.n	8008cce <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	e007      	b.n	8008cde <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008cce:	4b09      	ldr	r3, [pc, #36]	; (8008cf4 <RCC_SetFlashLatency+0xfc>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 0307 	and.w	r3, r3, #7
 8008cd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d1ef      	bne.n	8008cbc <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	374c      	adds	r7, #76	; 0x4c
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd90      	pop	{r4, r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	08016884 	.word	0x08016884
 8008cec:	08016894 	.word	0x08016894
 8008cf0:	080168a0 	.word	0x080168a0
 8008cf4:	58004000 	.word	0x58004000

08008cf8 <LL_RCC_LSE_IsEnabled>:
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8008cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d04:	f003 0301 	and.w	r3, r3, #1
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d101      	bne.n	8008d10 <LL_RCC_LSE_IsEnabled+0x18>
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e000      	b.n	8008d12 <LL_RCC_LSE_IsEnabled+0x1a>
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <LL_RCC_LSE_IsReady>:
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d28:	f003 0302 	and.w	r3, r3, #2
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d101      	bne.n	8008d34 <LL_RCC_LSE_IsReady+0x18>
 8008d30:	2301      	movs	r3, #1
 8008d32:	e000      	b.n	8008d36 <LL_RCC_LSE_IsReady+0x1a>
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <LL_RCC_SetRFWKPClockSource>:
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8008d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008d54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8008d60:	bf00      	nop
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <LL_RCC_SetSMPSClockSource>:
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8008d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7a:	f023 0203 	bic.w	r2, r3, #3
 8008d7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <LL_RCC_SetSMPSPrescaler>:
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8008d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008da6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4313      	orrs	r3, r2
 8008dae:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <LL_RCC_SetUSARTClockSource>:
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8008dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dcc:	f023 0203 	bic.w	r2, r3, #3
 8008dd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008ddc:	bf00      	nop
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <LL_RCC_SetLPUARTClockSource>:
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008df8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008dfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008e08:	bf00      	nop
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <LL_RCC_SetI2CClockSource>:
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e20:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	091b      	lsrs	r3, r3, #4
 8008e28:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008e2c:	43db      	mvns	r3, r3
 8008e2e:	401a      	ands	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	011b      	lsls	r3, r3, #4
 8008e34:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008e38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008e42:	bf00      	nop
 8008e44:	370c      	adds	r7, #12
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr

08008e4e <LL_RCC_SetLPTIMClockSource>:
{
 8008e4e:	b480      	push	{r7}
 8008e50:	b083      	sub	sp, #12
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8008e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	0c1b      	lsrs	r3, r3, #16
 8008e62:	041b      	lsls	r3, r3, #16
 8008e64:	43db      	mvns	r3, r3
 8008e66:	401a      	ands	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	041b      	lsls	r3, r3, #16
 8008e6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e70:	4313      	orrs	r3, r2
 8008e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008e76:	bf00      	nop
 8008e78:	370c      	adds	r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr

08008e82 <LL_RCC_SetSAIClockSource>:
{
 8008e82:	b480      	push	{r7}
 8008e84:	b083      	sub	sp, #12
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8008e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008e96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008ea2:	bf00      	nop
 8008ea4:	370c      	adds	r7, #12
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr

08008eae <LL_RCC_SetRNGClockSource>:
{
 8008eae:	b480      	push	{r7}
 8008eb0:	b083      	sub	sp, #12
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ebe:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008ec2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008ece:	bf00      	nop
 8008ed0:	370c      	adds	r7, #12
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr

08008eda <LL_RCC_SetCLK48ClockSource>:
{
 8008eda:	b480      	push	{r7}
 8008edc:	b083      	sub	sp, #12
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8008ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008eee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008efa:	bf00      	nop
 8008efc:	370c      	adds	r7, #12
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr

08008f06 <LL_RCC_SetUSBClockSource>:
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b082      	sub	sp, #8
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f7ff ffe3 	bl	8008eda <LL_RCC_SetCLK48ClockSource>
}
 8008f14:	bf00      	nop
 8008f16:	3708      	adds	r7, #8
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <LL_RCC_SetADCClockSource>:
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8008f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f2c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008f30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4313      	orrs	r3, r2
 8008f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <LL_RCC_SetRTCClockSource>:
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008f68:	bf00      	nop
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <LL_RCC_GetRTCClockSource>:
{
 8008f74:	b480      	push	{r7}
 8008f76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8008f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr

08008f8e <LL_RCC_ForceBackupDomainReset>:
{
 8008f8e:	b480      	push	{r7}
 8008f90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008fa6:	bf00      	nop
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <LL_RCC_ReleaseBackupDomainReset>:
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008fc8:	bf00      	nop
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr

08008fd2 <LL_RCC_PLLSAI1_Enable>:
{
 8008fd2:	b480      	push	{r7}
 8008fd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fe0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008fe4:	6013      	str	r3, [r2, #0]
}
 8008fe6:	bf00      	nop
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <LL_RCC_PLLSAI1_Disable>:
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ffe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009002:	6013      	str	r3, [r2, #0]
}
 8009004:	bf00      	nop
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr

0800900e <LL_RCC_PLLSAI1_IsReady>:
{
 800900e:	b480      	push	{r7}
 8009010:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8009012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800901c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009020:	d101      	bne.n	8009026 <LL_RCC_PLLSAI1_IsReady+0x18>
 8009022:	2301      	movs	r3, #1
 8009024:	e000      	b.n	8009028 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr

08009032 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b088      	sub	sp, #32
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800903a:	2300      	movs	r3, #0
 800903c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800903e:	2300      	movs	r3, #0
 8009040:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800904a:	2b00      	cmp	r3, #0
 800904c:	d033      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009052:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009056:	d00c      	beq.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8009058:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800905c:	d802      	bhi.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800905e:	2b00      	cmp	r3, #0
 8009060:	d010      	beq.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009062:	e017      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8009064:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009068:	d017      	beq.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x68>
 800906a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800906e:	d016      	beq.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8009070:	e010      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8009072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800907c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009080:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8009082:	e00d      	b.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	3304      	adds	r3, #4
 8009088:	4618      	mov	r0, r3
 800908a:	f000 f947 	bl	800931c <RCCEx_PLLSAI1_ConfigNP>
 800908e:	4603      	mov	r3, r0
 8009090:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009092:	e005      	b.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	77fb      	strb	r3, [r7, #31]
        break;
 8009098:	e002      	b.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800909a:	bf00      	nop
 800909c:	e000      	b.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800909e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090a0:	7ffb      	ldrb	r3, [r7, #31]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d105      	bne.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7ff fee9 	bl	8008e82 <LL_RCC_SetSAIClockSource>
 80090b0:	e001      	b.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090b2:	7ffb      	ldrb	r3, [r7, #31]
 80090b4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d046      	beq.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80090c2:	f7ff ff57 	bl	8008f74 <LL_RCC_GetRTCClockSource>
 80090c6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090cc:	69ba      	ldr	r2, [r7, #24]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d03c      	beq.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80090d2:	f7fe fc11 	bl	80078f8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d105      	bne.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7ff ff31 	bl	8008f48 <LL_RCC_SetRTCClockSource>
 80090e6:	e02e      	b.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80090e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090f0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80090f2:	f7ff ff4c 	bl	8008f8e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80090f6:	f7ff ff5b 	bl	8008fb0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009104:	4313      	orrs	r3, r2
 8009106:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8009108:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8009112:	f7ff fdf1 	bl	8008cf8 <LL_RCC_LSE_IsEnabled>
 8009116:	4603      	mov	r3, r0
 8009118:	2b01      	cmp	r3, #1
 800911a:	d114      	bne.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800911c:	f7fc fefe 	bl	8005f1c <HAL_GetTick>
 8009120:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8009122:	e00b      	b.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009124:	f7fc fefa 	bl	8005f1c <HAL_GetTick>
 8009128:	4602      	mov	r2, r0
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	1ad3      	subs	r3, r2, r3
 800912e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009132:	4293      	cmp	r3, r2
 8009134:	d902      	bls.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	77fb      	strb	r3, [r7, #31]
              break;
 800913a:	e004      	b.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 800913c:	f7ff fdee 	bl	8008d1c <LL_RCC_LSE_IsReady>
 8009140:	4603      	mov	r3, r0
 8009142:	2b01      	cmp	r3, #1
 8009144:	d1ee      	bne.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8009146:	7ffb      	ldrb	r3, [r7, #31]
 8009148:	77bb      	strb	r3, [r7, #30]
 800914a:	e001      	b.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800914c:	7ffb      	ldrb	r3, [r7, #31]
 800914e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f003 0301 	and.w	r3, r3, #1
 8009158:	2b00      	cmp	r3, #0
 800915a:	d004      	beq.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	699b      	ldr	r3, [r3, #24]
 8009160:	4618      	mov	r0, r3
 8009162:	f7ff fe2b 	bl	8008dbc <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f003 0302 	and.w	r3, r3, #2
 800916e:	2b00      	cmp	r3, #0
 8009170:	d004      	beq.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	69db      	ldr	r3, [r3, #28]
 8009176:	4618      	mov	r0, r3
 8009178:	f7ff fe36 	bl	8008de8 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 0310 	and.w	r3, r3, #16
 8009184:	2b00      	cmp	r3, #0
 8009186:	d004      	beq.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800918c:	4618      	mov	r0, r3
 800918e:	f7ff fe5e 	bl	8008e4e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 0320 	and.w	r3, r3, #32
 800919a:	2b00      	cmp	r3, #0
 800919c:	d004      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7ff fe53 	bl	8008e4e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 0304 	and.w	r3, r3, #4
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d004      	beq.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a1b      	ldr	r3, [r3, #32]
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7ff fe2b 	bl	8008e14 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 0308 	and.w	r3, r3, #8
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d004      	beq.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7ff fe20 	bl	8008e14 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d022      	beq.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7ff fe8e 	bl	8008f06 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091f2:	d107      	bne.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80091f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80091fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009202:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009208:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800920c:	d10b      	bne.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	3304      	adds	r3, #4
 8009212:	4618      	mov	r0, r3
 8009214:	f000 f8dd 	bl	80093d2 <RCCEx_PLLSAI1_ConfigNQ>
 8009218:	4603      	mov	r3, r0
 800921a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800921c:	7ffb      	ldrb	r3, [r7, #31]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d001      	beq.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8009222:	7ffb      	ldrb	r3, [r7, #31]
 8009224:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800922e:	2b00      	cmp	r3, #0
 8009230:	d02b      	beq.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800923a:	d008      	beq.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009240:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009244:	d003      	beq.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800924a:	2b00      	cmp	r3, #0
 800924c:	d105      	bne.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x228>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009252:	4618      	mov	r0, r3
 8009254:	f7ff fe2b 	bl	8008eae <LL_RCC_SetRNGClockSource>
 8009258:	e00a      	b.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800925e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009262:	60fb      	str	r3, [r7, #12]
 8009264:	2000      	movs	r0, #0
 8009266:	f7ff fe22 	bl	8008eae <LL_RCC_SetRNGClockSource>
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f7ff fe35 	bl	8008eda <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009274:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8009278:	d107      	bne.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800927a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009284:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009288:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009292:	2b00      	cmp	r3, #0
 8009294:	d022      	beq.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800929a:	4618      	mov	r0, r3
 800929c:	f7ff fe3e 	bl	8008f1c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092a8:	d107      	bne.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80092aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80092b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092b8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092c2:	d10b      	bne.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	3304      	adds	r3, #4
 80092c8:	4618      	mov	r0, r3
 80092ca:	f000 f8dd 	bl	8009488 <RCCEx_PLLSAI1_ConfigNR>
 80092ce:	4603      	mov	r3, r0
 80092d0:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80092d2:	7ffb      	ldrb	r3, [r7, #31]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d001      	beq.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 80092d8:	7ffb      	ldrb	r3, [r7, #31]
 80092da:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d004      	beq.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ec:	4618      	mov	r0, r3
 80092ee:	f7ff fd27 	bl	8008d40 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d009      	beq.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009302:	4618      	mov	r0, r3
 8009304:	f7ff fd46 	bl	8008d94 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800930c:	4618      	mov	r0, r3
 800930e:	f7ff fd2d 	bl	8008d6c <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8009312:	7fbb      	ldrb	r3, [r7, #30]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3720      	adds	r7, #32
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009324:	2300      	movs	r3, #0
 8009326:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009328:	f7ff fe62 	bl	8008ff0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800932c:	f7fc fdf6 	bl	8005f1c <HAL_GetTick>
 8009330:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009332:	e009      	b.n	8009348 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009334:	f7fc fdf2 	bl	8005f1c <HAL_GetTick>
 8009338:	4602      	mov	r2, r0
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	1ad3      	subs	r3, r2, r3
 800933e:	2b02      	cmp	r3, #2
 8009340:	d902      	bls.n	8009348 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8009342:	2303      	movs	r3, #3
 8009344:	73fb      	strb	r3, [r7, #15]
      break;
 8009346:	e004      	b.n	8009352 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009348:	f7ff fe61 	bl	800900e <LL_RCC_PLLSAI1_IsReady>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1f0      	bne.n	8009334 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8009352:	7bfb      	ldrb	r3, [r7, #15]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d137      	bne.n	80093c8 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	021b      	lsls	r3, r3, #8
 8009368:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800936c:	4313      	orrs	r3, r2
 800936e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8009370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009382:	4313      	orrs	r3, r2
 8009384:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009386:	f7ff fe24 	bl	8008fd2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800938a:	f7fc fdc7 	bl	8005f1c <HAL_GetTick>
 800938e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009390:	e009      	b.n	80093a6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009392:	f7fc fdc3 	bl	8005f1c <HAL_GetTick>
 8009396:	4602      	mov	r2, r0
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	2b02      	cmp	r3, #2
 800939e:	d902      	bls.n	80093a6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80093a0:	2303      	movs	r3, #3
 80093a2:	73fb      	strb	r3, [r7, #15]
        break;
 80093a4:	e004      	b.n	80093b0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80093a6:	f7ff fe32 	bl	800900e <LL_RCC_PLLSAI1_IsReady>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d1f0      	bne.n	8009392 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80093b0:	7bfb      	ldrb	r3, [r7, #15]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d108      	bne.n	80093c8 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80093b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093ba:	691a      	ldr	r2, [r3, #16]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	691b      	ldr	r3, [r3, #16]
 80093c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80093c4:	4313      	orrs	r3, r2
 80093c6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80093c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b084      	sub	sp, #16
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80093da:	2300      	movs	r3, #0
 80093dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80093de:	f7ff fe07 	bl	8008ff0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80093e2:	f7fc fd9b 	bl	8005f1c <HAL_GetTick>
 80093e6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80093e8:	e009      	b.n	80093fe <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80093ea:	f7fc fd97 	bl	8005f1c <HAL_GetTick>
 80093ee:	4602      	mov	r2, r0
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	1ad3      	subs	r3, r2, r3
 80093f4:	2b02      	cmp	r3, #2
 80093f6:	d902      	bls.n	80093fe <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80093f8:	2303      	movs	r3, #3
 80093fa:	73fb      	strb	r3, [r7, #15]
      break;
 80093fc:	e004      	b.n	8009408 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80093fe:	f7ff fe06 	bl	800900e <LL_RCC_PLLSAI1_IsReady>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d1f0      	bne.n	80093ea <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8009408:	7bfb      	ldrb	r3, [r7, #15]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d137      	bne.n	800947e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800940e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009412:	691b      	ldr	r3, [r3, #16]
 8009414:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	021b      	lsls	r3, r3, #8
 800941e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009422:	4313      	orrs	r3, r2
 8009424:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8009426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009438:	4313      	orrs	r3, r2
 800943a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800943c:	f7ff fdc9 	bl	8008fd2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009440:	f7fc fd6c 	bl	8005f1c <HAL_GetTick>
 8009444:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009446:	e009      	b.n	800945c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009448:	f7fc fd68 	bl	8005f1c <HAL_GetTick>
 800944c:	4602      	mov	r2, r0
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	1ad3      	subs	r3, r2, r3
 8009452:	2b02      	cmp	r3, #2
 8009454:	d902      	bls.n	800945c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8009456:	2303      	movs	r3, #3
 8009458:	73fb      	strb	r3, [r7, #15]
        break;
 800945a:	e004      	b.n	8009466 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800945c:	f7ff fdd7 	bl	800900e <LL_RCC_PLLSAI1_IsReady>
 8009460:	4603      	mov	r3, r0
 8009462:	2b01      	cmp	r3, #1
 8009464:	d1f0      	bne.n	8009448 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8009466:	7bfb      	ldrb	r3, [r7, #15]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d108      	bne.n	800947e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800946c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009470:	691a      	ldr	r2, [r3, #16]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800947a:	4313      	orrs	r3, r2
 800947c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800947e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009480:	4618      	mov	r0, r3
 8009482:	3710      	adds	r7, #16
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009490:	2300      	movs	r3, #0
 8009492:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009494:	f7ff fdac 	bl	8008ff0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009498:	f7fc fd40 	bl	8005f1c <HAL_GetTick>
 800949c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800949e:	e009      	b.n	80094b4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80094a0:	f7fc fd3c 	bl	8005f1c <HAL_GetTick>
 80094a4:	4602      	mov	r2, r0
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	1ad3      	subs	r3, r2, r3
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d902      	bls.n	80094b4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80094ae:	2303      	movs	r3, #3
 80094b0:	73fb      	strb	r3, [r7, #15]
      break;
 80094b2:	e004      	b.n	80094be <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80094b4:	f7ff fdab 	bl	800900e <LL_RCC_PLLSAI1_IsReady>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1f0      	bne.n	80094a0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80094be:	7bfb      	ldrb	r3, [r7, #15]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d137      	bne.n	8009534 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80094c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	021b      	lsls	r3, r3, #8
 80094d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094d8:	4313      	orrs	r3, r2
 80094da:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80094dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094ee:	4313      	orrs	r3, r2
 80094f0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80094f2:	f7ff fd6e 	bl	8008fd2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094f6:	f7fc fd11 	bl	8005f1c <HAL_GetTick>
 80094fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80094fc:	e009      	b.n	8009512 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80094fe:	f7fc fd0d 	bl	8005f1c <HAL_GetTick>
 8009502:	4602      	mov	r2, r0
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	1ad3      	subs	r3, r2, r3
 8009508:	2b02      	cmp	r3, #2
 800950a:	d902      	bls.n	8009512 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800950c:	2303      	movs	r3, #3
 800950e:	73fb      	strb	r3, [r7, #15]
        break;
 8009510:	e004      	b.n	800951c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009512:	f7ff fd7c 	bl	800900e <LL_RCC_PLLSAI1_IsReady>
 8009516:	4603      	mov	r3, r0
 8009518:	2b01      	cmp	r3, #1
 800951a:	d1f0      	bne.n	80094fe <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800951c:	7bfb      	ldrb	r3, [r7, #15]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d108      	bne.n	8009534 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009526:	691a      	ldr	r2, [r3, #16]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	691b      	ldr	r3, [r3, #16]
 800952c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009530:	4313      	orrs	r3, r2
 8009532:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009534:	7bfb      	ldrb	r3, [r7, #15]
}
 8009536:	4618      	mov	r0, r3
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800953e:	b580      	push	{r7, lr}
 8009540:	b082      	sub	sp, #8
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d101      	bne.n	8009550 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	e090      	b.n	8009672 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009556:	b2db      	uxtb	r3, r3
 8009558:	2b00      	cmp	r3, #0
 800955a:	d106      	bne.n	800956a <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f7fc f9d5 	bl	8005914 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2202      	movs	r2, #2
 800956e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	22ca      	movs	r2, #202	; 0xca
 8009578:	625a      	str	r2, [r3, #36]	; 0x24
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2253      	movs	r2, #83	; 0x53
 8009580:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 faba 	bl	8009afc <RTC_EnterInitMode>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d009      	beq.n	80095a2 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	22ff      	movs	r2, #255	; 0xff
 8009594:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2204      	movs	r2, #4
 800959a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	e067      	b.n	8009672 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	6812      	ldr	r2, [r2, #0]
 80095ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80095b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095b4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	6899      	ldr	r1, [r3, #8]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	685a      	ldr	r2, [r3, #4]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	431a      	orrs	r2, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	431a      	orrs	r2, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	430a      	orrs	r2, r1
 80095d2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	68d2      	ldr	r2, [r2, #12]
 80095dc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	6919      	ldr	r1, [r3, #16]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	041a      	lsls	r2, r3, #16
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	430a      	orrs	r2, r1
 80095f0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68da      	ldr	r2, [r3, #12]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009600:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f022 0203 	bic.w	r2, r2, #3
 8009610:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	69da      	ldr	r2, [r3, #28]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	695b      	ldr	r3, [r3, #20]
 8009620:	431a      	orrs	r2, r3
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	430a      	orrs	r2, r1
 8009628:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	f003 0320 	and.w	r3, r3, #32
 8009634:	2b00      	cmp	r3, #0
 8009636:	d113      	bne.n	8009660 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 fa39 	bl	8009ab0 <HAL_RTC_WaitForSynchro>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00d      	beq.n	8009660 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	22ff      	movs	r2, #255	; 0xff
 800964a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2204      	movs	r2, #4
 8009650:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	e008      	b.n	8009672 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	22ff      	movs	r2, #255	; 0xff
 8009666:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8009670:	2300      	movs	r3, #0
  }
}
 8009672:	4618      	mov	r0, r3
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800967a:	b590      	push	{r4, r7, lr}
 800967c:	b087      	sub	sp, #28
 800967e:	af00      	add	r7, sp, #0
 8009680:	60f8      	str	r0, [r7, #12]
 8009682:	60b9      	str	r1, [r7, #8]
 8009684:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f893 3020 	ldrb.w	r3, [r3, #32]
 800968c:	2b01      	cmp	r3, #1
 800968e:	d101      	bne.n	8009694 <HAL_RTC_SetTime+0x1a>
 8009690:	2302      	movs	r3, #2
 8009692:	e0b2      	b.n	80097fa <HAL_RTC_SetTime+0x180>
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2202      	movs	r2, #2
 80096a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d126      	bne.n	80096f8 <HAL_RTC_SetTime+0x7e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d102      	bne.n	80096be <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	2200      	movs	r2, #0
 80096bc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	4618      	mov	r0, r3
 80096c4:	f000 fa44 	bl	8009b50 <RTC_ByteToBcd2>
 80096c8:	4603      	mov	r3, r0
 80096ca:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	785b      	ldrb	r3, [r3, #1]
 80096d0:	4618      	mov	r0, r3
 80096d2:	f000 fa3d 	bl	8009b50 <RTC_ByteToBcd2>
 80096d6:	4603      	mov	r3, r0
 80096d8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80096da:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	789b      	ldrb	r3, [r3, #2]
 80096e0:	4618      	mov	r0, r3
 80096e2:	f000 fa35 	bl	8009b50 <RTC_ByteToBcd2>
 80096e6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80096e8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	78db      	ldrb	r3, [r3, #3]
 80096f0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80096f2:	4313      	orrs	r3, r2
 80096f4:	617b      	str	r3, [r7, #20]
 80096f6:	e018      	b.n	800972a <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009702:	2b00      	cmp	r3, #0
 8009704:	d102      	bne.n	800970c <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	2200      	movs	r2, #0
 800970a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	785b      	ldrb	r3, [r3, #1]
 8009716:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009718:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800971a:	68ba      	ldr	r2, [r7, #8]
 800971c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800971e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	78db      	ldrb	r3, [r3, #3]
 8009724:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009726:	4313      	orrs	r3, r2
 8009728:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	22ca      	movs	r2, #202	; 0xca
 8009730:	625a      	str	r2, [r3, #36]	; 0x24
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	2253      	movs	r2, #83	; 0x53
 8009738:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f000 f9de 	bl	8009afc <RTC_EnterInitMode>
 8009740:	4603      	mov	r3, r0
 8009742:	2b00      	cmp	r3, #0
 8009744:	d00d      	beq.n	8009762 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	22ff      	movs	r2, #255	; 0xff
 800974c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2204      	movs	r2, #4
 8009752:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2200      	movs	r2, #0
 800975a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	e04b      	b.n	80097fa <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800976c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009770:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	689a      	ldr	r2, [r3, #8]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009780:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	6899      	ldr	r1, [r3, #8]
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	68da      	ldr	r2, [r3, #12]
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	431a      	orrs	r2, r3
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	430a      	orrs	r2, r1
 8009798:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	68da      	ldr	r2, [r3, #12]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80097a8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	f003 0320 	and.w	r3, r3, #32
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d113      	bne.n	80097e0 <HAL_RTC_SetTime+0x166>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	f000 f979 	bl	8009ab0 <HAL_RTC_WaitForSynchro>
 80097be:	4603      	mov	r3, r0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d00d      	beq.n	80097e0 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	22ff      	movs	r2, #255	; 0xff
 80097ca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2204      	movs	r2, #4
 80097d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2200      	movs	r2, #0
 80097d8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	e00c      	b.n	80097fa <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	22ff      	movs	r2, #255	; 0xff
 80097e6:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 80097f8:	2300      	movs	r3, #0
  }
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	371c      	adds	r7, #28
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd90      	pop	{r4, r7, pc}

08009802 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b086      	sub	sp, #24
 8009806:	af00      	add	r7, sp, #0
 8009808:	60f8      	str	r0, [r7, #12]
 800980a:	60b9      	str	r1, [r7, #8]
 800980c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	691b      	ldr	r3, [r3, #16]
 800981e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009830:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009834:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	0c1b      	lsrs	r3, r3, #16
 800983a:	b2db      	uxtb	r3, r3
 800983c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009840:	b2da      	uxtb	r2, r3
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	0a1b      	lsrs	r3, r3, #8
 800984a:	b2db      	uxtb	r3, r3
 800984c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009850:	b2da      	uxtb	r2, r3
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	b2db      	uxtb	r3, r3
 800985a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800985e:	b2da      	uxtb	r2, r3
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	0c1b      	lsrs	r3, r3, #16
 8009868:	b2db      	uxtb	r3, r3
 800986a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800986e:	b2da      	uxtb	r2, r3
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d11a      	bne.n	80098b0 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	4618      	mov	r0, r3
 8009880:	f000 f986 	bl	8009b90 <RTC_Bcd2ToByte>
 8009884:	4603      	mov	r3, r0
 8009886:	461a      	mov	r2, r3
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	785b      	ldrb	r3, [r3, #1]
 8009890:	4618      	mov	r0, r3
 8009892:	f000 f97d 	bl	8009b90 <RTC_Bcd2ToByte>
 8009896:	4603      	mov	r3, r0
 8009898:	461a      	mov	r2, r3
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	789b      	ldrb	r3, [r3, #2]
 80098a2:	4618      	mov	r0, r3
 80098a4:	f000 f974 	bl	8009b90 <RTC_Bcd2ToByte>
 80098a8:	4603      	mov	r3, r0
 80098aa:	461a      	mov	r2, r3
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80098b0:	2300      	movs	r3, #0
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3718      	adds	r7, #24
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80098ba:	b590      	push	{r4, r7, lr}
 80098bc:	b087      	sub	sp, #28
 80098be:	af00      	add	r7, sp, #0
 80098c0:	60f8      	str	r0, [r7, #12]
 80098c2:	60b9      	str	r1, [r7, #8]
 80098c4:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d101      	bne.n	80098d4 <HAL_RTC_SetDate+0x1a>
 80098d0:	2302      	movs	r3, #2
 80098d2:	e09c      	b.n	8009a0e <HAL_RTC_SetDate+0x154>
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2201      	movs	r2, #1
 80098d8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2202      	movs	r2, #2
 80098e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d10e      	bne.n	8009908 <HAL_RTC_SetDate+0x4e>
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	785b      	ldrb	r3, [r3, #1]
 80098ee:	f003 0310 	and.w	r3, r3, #16
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d008      	beq.n	8009908 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	785b      	ldrb	r3, [r3, #1]
 80098fa:	f023 0310 	bic.w	r3, r3, #16
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	330a      	adds	r3, #10
 8009902:	b2da      	uxtb	r2, r3
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d11c      	bne.n	8009948 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	78db      	ldrb	r3, [r3, #3]
 8009912:	4618      	mov	r0, r3
 8009914:	f000 f91c 	bl	8009b50 <RTC_ByteToBcd2>
 8009918:	4603      	mov	r3, r0
 800991a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	785b      	ldrb	r3, [r3, #1]
 8009920:	4618      	mov	r0, r3
 8009922:	f000 f915 	bl	8009b50 <RTC_ByteToBcd2>
 8009926:	4603      	mov	r3, r0
 8009928:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800992a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	789b      	ldrb	r3, [r3, #2]
 8009930:	4618      	mov	r0, r3
 8009932:	f000 f90d 	bl	8009b50 <RTC_ByteToBcd2>
 8009936:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009938:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009942:	4313      	orrs	r3, r2
 8009944:	617b      	str	r3, [r7, #20]
 8009946:	e00e      	b.n	8009966 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	78db      	ldrb	r3, [r3, #3]
 800994c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	785b      	ldrb	r3, [r3, #1]
 8009952:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009954:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009956:	68ba      	ldr	r2, [r7, #8]
 8009958:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800995a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009962:	4313      	orrs	r3, r2
 8009964:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	22ca      	movs	r2, #202	; 0xca
 800996c:	625a      	str	r2, [r3, #36]	; 0x24
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	2253      	movs	r2, #83	; 0x53
 8009974:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	f000 f8c0 	bl	8009afc <RTC_EnterInitMode>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00d      	beq.n	800999e <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	22ff      	movs	r2, #255	; 0xff
 8009988:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2204      	movs	r2, #4
 800998e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2200      	movs	r2, #0
 8009996:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	e037      	b.n	8009a0e <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80099a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80099ac:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	68da      	ldr	r2, [r3, #12]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80099bc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	f003 0320 	and.w	r3, r3, #32
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d113      	bne.n	80099f4 <HAL_RTC_SetDate+0x13a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f000 f86f 	bl	8009ab0 <HAL_RTC_WaitForSynchro>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d00d      	beq.n	80099f4 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	22ff      	movs	r2, #255	; 0xff
 80099de:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2204      	movs	r2, #4
 80099e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2200      	movs	r2, #0
 80099ec:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	e00c      	b.n	8009a0e <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	22ff      	movs	r2, #255	; 0xff
 80099fa:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2201      	movs	r2, #1
 8009a00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2200      	movs	r2, #0
 8009a08:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8009a0c:	2300      	movs	r3, #0
  }
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	371c      	adds	r7, #28
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd90      	pop	{r4, r7, pc}

08009a16 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b086      	sub	sp, #24
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	60f8      	str	r0, [r7, #12]
 8009a1e:	60b9      	str	r1, [r7, #8]
 8009a20:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009a2c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009a30:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	0c1b      	lsrs	r3, r3, #16
 8009a36:	b2da      	uxtb	r2, r3
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	0a1b      	lsrs	r3, r3, #8
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	f003 031f 	and.w	r3, r3, #31
 8009a46:	b2da      	uxtb	r2, r3
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a54:	b2da      	uxtb	r2, r3
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	0b5b      	lsrs	r3, r3, #13
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	f003 0307 	and.w	r3, r3, #7
 8009a64:	b2da      	uxtb	r2, r3
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d11a      	bne.n	8009aa6 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	78db      	ldrb	r3, [r3, #3]
 8009a74:	4618      	mov	r0, r3
 8009a76:	f000 f88b 	bl	8009b90 <RTC_Bcd2ToByte>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	785b      	ldrb	r3, [r3, #1]
 8009a86:	4618      	mov	r0, r3
 8009a88:	f000 f882 	bl	8009b90 <RTC_Bcd2ToByte>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	461a      	mov	r2, r3
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	789b      	ldrb	r3, [r3, #2]
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f000 f879 	bl	8009b90 <RTC_Bcd2ToByte>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009aa6:	2300      	movs	r3, #0
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3718      	adds	r7, #24
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68da      	ldr	r2, [r3, #12]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009ac6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009ac8:	f7fc fa28 	bl	8005f1c <HAL_GetTick>
 8009acc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009ace:	e009      	b.n	8009ae4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009ad0:	f7fc fa24 	bl	8005f1c <HAL_GetTick>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	1ad3      	subs	r3, r2, r3
 8009ada:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ade:	d901      	bls.n	8009ae4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009ae0:	2303      	movs	r3, #3
 8009ae2:	e007      	b.n	8009af4 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	68db      	ldr	r3, [r3, #12]
 8009aea:	f003 0320 	and.w	r3, r3, #32
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d0ee      	beq.n	8009ad0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d119      	bne.n	8009b46 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f04f 32ff 	mov.w	r2, #4294967295
 8009b1a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009b1c:	f7fc f9fe 	bl	8005f1c <HAL_GetTick>
 8009b20:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009b22:	e009      	b.n	8009b38 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8009b24:	f7fc f9fa 	bl	8005f1c <HAL_GetTick>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	1ad3      	subs	r3, r2, r3
 8009b2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b32:	d901      	bls.n	8009b38 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8009b34:	2303      	movs	r3, #3
 8009b36:	e007      	b.n	8009b48 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d0ee      	beq.n	8009b24 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009b46:	2300      	movs	r3, #0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3710      	adds	r7, #16
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b085      	sub	sp, #20
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	4603      	mov	r3, r0
 8009b58:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8009b5e:	79fb      	ldrb	r3, [r7, #7]
 8009b60:	72fb      	strb	r3, [r7, #11]

  while(Param >= 10U)
 8009b62:	e005      	b.n	8009b70 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	3301      	adds	r3, #1
 8009b68:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8009b6a:	7afb      	ldrb	r3, [r7, #11]
 8009b6c:	3b0a      	subs	r3, #10
 8009b6e:	72fb      	strb	r3, [r7, #11]
  while(Param >= 10U)
 8009b70:	7afb      	ldrb	r3, [r7, #11]
 8009b72:	2b09      	cmp	r3, #9
 8009b74:	d8f6      	bhi.n	8009b64 <RTC_ByteToBcd2+0x14>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	011b      	lsls	r3, r3, #4
 8009b7c:	b2da      	uxtb	r2, r3
 8009b7e:	7afb      	ldrb	r3, [r7, #11]
 8009b80:	4313      	orrs	r3, r2
 8009b82:	b2db      	uxtb	r3, r3
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3714      	adds	r7, #20
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	4603      	mov	r3, r0
 8009b98:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8009b9a:	79fb      	ldrb	r3, [r7, #7]
 8009b9c:	091b      	lsrs	r3, r3, #4
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	4413      	add	r3, r2
 8009ba8:	005b      	lsls	r3, r3, #1
 8009baa:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	b2da      	uxtb	r2, r3
 8009bb0:	79fb      	ldrb	r3, [r7, #7]
 8009bb2:	f003 030f 	and.w	r3, r3, #15
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	4413      	add	r3, r2
 8009bba:	b2db      	uxtb	r3, r3
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3714      	adds	r7, #20
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d101      	bne.n	8009bde <HAL_RTCEx_EnableBypassShadow+0x16>
 8009bda:	2302      	movs	r3, #2
 8009bdc:	e024      	b.n	8009c28 <HAL_RTCEx_EnableBypassShadow+0x60>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2201      	movs	r2, #1
 8009be2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2202      	movs	r2, #2
 8009bea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	22ca      	movs	r2, #202	; 0xca
 8009bf4:	625a      	str	r2, [r3, #36]	; 0x24
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2253      	movs	r2, #83	; 0x53
 8009bfc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	689a      	ldr	r2, [r3, #8]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f042 0220 	orr.w	r2, r2, #32
 8009c0c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	22ff      	movs	r2, #255	; 0xff
 8009c14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009c26:	2300      	movs	r3, #0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d101      	bne.n	8009c46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	e095      	b.n	8009d72 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d108      	bne.n	8009c60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c56:	d009      	beq.n	8009c6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	61da      	str	r2, [r3, #28]
 8009c5e:	e005      	b.n	8009c6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d106      	bne.n	8009c8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f7fb fe96 	bl	80059b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2202      	movs	r2, #2
 8009c90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ca2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009cac:	d902      	bls.n	8009cb4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	60fb      	str	r3, [r7, #12]
 8009cb2:	e002      	b.n	8009cba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cb8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009cc2:	d007      	beq.n	8009cd4 <HAL_SPI_Init+0xa0>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009ccc:	d002      	beq.n	8009cd4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009ce4:	431a      	orrs	r2, r3
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	691b      	ldr	r3, [r3, #16]
 8009cea:	f003 0302 	and.w	r3, r3, #2
 8009cee:	431a      	orrs	r2, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	695b      	ldr	r3, [r3, #20]
 8009cf4:	f003 0301 	and.w	r3, r3, #1
 8009cf8:	431a      	orrs	r2, r3
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d02:	431a      	orrs	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	69db      	ldr	r3, [r3, #28]
 8009d08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d0c:	431a      	orrs	r2, r3
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a1b      	ldr	r3, [r3, #32]
 8009d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d16:	ea42 0103 	orr.w	r1, r2, r3
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d1e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	430a      	orrs	r2, r1
 8009d28:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	699b      	ldr	r3, [r3, #24]
 8009d2e:	0c1b      	lsrs	r3, r3, #16
 8009d30:	f003 0204 	and.w	r2, r3, #4
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d38:	f003 0310 	and.w	r3, r3, #16
 8009d3c:	431a      	orrs	r2, r3
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d42:	f003 0308 	and.w	r3, r3, #8
 8009d46:	431a      	orrs	r2, r3
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009d50:	ea42 0103 	orr.w	r1, r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	430a      	orrs	r2, r1
 8009d60:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009d70:	2300      	movs	r3, #0
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3710      	adds	r7, #16
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b088      	sub	sp, #32
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	60f8      	str	r0, [r7, #12]
 8009d82:	60b9      	str	r1, [r7, #8]
 8009d84:	603b      	str	r3, [r7, #0]
 8009d86:	4613      	mov	r3, r2
 8009d88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d101      	bne.n	8009d9c <HAL_SPI_Transmit+0x22>
 8009d98:	2302      	movs	r3, #2
 8009d9a:	e158      	b.n	800a04e <HAL_SPI_Transmit+0x2d4>
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009da4:	f7fc f8ba 	bl	8005f1c <HAL_GetTick>
 8009da8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009daa:	88fb      	ldrh	r3, [r7, #6]
 8009dac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d002      	beq.n	8009dc0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009dba:	2302      	movs	r3, #2
 8009dbc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009dbe:	e13d      	b.n	800a03c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d002      	beq.n	8009dcc <HAL_SPI_Transmit+0x52>
 8009dc6:	88fb      	ldrh	r3, [r7, #6]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d102      	bne.n	8009dd2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009dd0:	e134      	b.n	800a03c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2203      	movs	r2, #3
 8009dd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	68ba      	ldr	r2, [r7, #8]
 8009de4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	88fa      	ldrh	r2, [r7, #6]
 8009dea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	88fa      	ldrh	r2, [r7, #6]
 8009df0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2200      	movs	r2, #0
 8009df6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2200      	movs	r2, #0
 8009e12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e1c:	d10f      	bne.n	8009e3e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e48:	2b40      	cmp	r3, #64	; 0x40
 8009e4a:	d007      	beq.n	8009e5c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009e64:	d94b      	bls.n	8009efe <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d002      	beq.n	8009e74 <HAL_SPI_Transmit+0xfa>
 8009e6e:	8afb      	ldrh	r3, [r7, #22]
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d13e      	bne.n	8009ef2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e78:	881a      	ldrh	r2, [r3, #0]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e84:	1c9a      	adds	r2, r3, #2
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	3b01      	subs	r3, #1
 8009e92:	b29a      	uxth	r2, r3
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009e98:	e02b      	b.n	8009ef2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	f003 0302 	and.w	r3, r3, #2
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	d112      	bne.n	8009ece <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eac:	881a      	ldrh	r2, [r3, #0]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb8:	1c9a      	adds	r2, r3, #2
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	b29a      	uxth	r2, r3
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009ecc:	e011      	b.n	8009ef2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ece:	f7fc f825 	bl	8005f1c <HAL_GetTick>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	69bb      	ldr	r3, [r7, #24]
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	683a      	ldr	r2, [r7, #0]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d803      	bhi.n	8009ee6 <HAL_SPI_Transmit+0x16c>
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ee4:	d102      	bne.n	8009eec <HAL_SPI_Transmit+0x172>
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d102      	bne.n	8009ef2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8009eec:	2303      	movs	r3, #3
 8009eee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009ef0:	e0a4      	b.n	800a03c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d1ce      	bne.n	8009e9a <HAL_SPI_Transmit+0x120>
 8009efc:	e07c      	b.n	8009ff8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d002      	beq.n	8009f0c <HAL_SPI_Transmit+0x192>
 8009f06:	8afb      	ldrh	r3, [r7, #22]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d170      	bne.n	8009fee <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d912      	bls.n	8009f3c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1a:	881a      	ldrh	r2, [r3, #0]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f26:	1c9a      	adds	r2, r3, #2
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	3b02      	subs	r3, #2
 8009f34:	b29a      	uxth	r2, r3
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009f3a:	e058      	b.n	8009fee <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	330c      	adds	r3, #12
 8009f46:	7812      	ldrb	r2, [r2, #0]
 8009f48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f4e:	1c5a      	adds	r2, r3, #1
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	b29a      	uxth	r2, r3
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009f62:	e044      	b.n	8009fee <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	f003 0302 	and.w	r3, r3, #2
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	d12b      	bne.n	8009fca <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d912      	bls.n	8009fa2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f80:	881a      	ldrh	r2, [r3, #0]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f8c:	1c9a      	adds	r2, r3, #2
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	3b02      	subs	r3, #2
 8009f9a:	b29a      	uxth	r2, r3
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009fa0:	e025      	b.n	8009fee <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	330c      	adds	r3, #12
 8009fac:	7812      	ldrb	r2, [r2, #0]
 8009fae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb4:	1c5a      	adds	r2, r3, #1
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	b29a      	uxth	r2, r3
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009fc8:	e011      	b.n	8009fee <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009fca:	f7fb ffa7 	bl	8005f1c <HAL_GetTick>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	69bb      	ldr	r3, [r7, #24]
 8009fd2:	1ad3      	subs	r3, r2, r3
 8009fd4:	683a      	ldr	r2, [r7, #0]
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d803      	bhi.n	8009fe2 <HAL_SPI_Transmit+0x268>
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe0:	d102      	bne.n	8009fe8 <HAL_SPI_Transmit+0x26e>
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d102      	bne.n	8009fee <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8009fe8:	2303      	movs	r3, #3
 8009fea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009fec:	e026      	b.n	800a03c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d1b5      	bne.n	8009f64 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ff8:	69ba      	ldr	r2, [r7, #24]
 8009ffa:	6839      	ldr	r1, [r7, #0]
 8009ffc:	68f8      	ldr	r0, [r7, #12]
 8009ffe:	f000 f941 	bl	800a284 <SPI_EndRxTxTransaction>
 800a002:	4603      	mov	r3, r0
 800a004:	2b00      	cmp	r3, #0
 800a006:	d002      	beq.n	800a00e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2220      	movs	r2, #32
 800a00c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d10a      	bne.n	800a02c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a016:	2300      	movs	r3, #0
 800a018:	613b      	str	r3, [r7, #16]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	613b      	str	r3, [r7, #16]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	613b      	str	r3, [r7, #16]
 800a02a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a030:	2b00      	cmp	r3, #0
 800a032:	d002      	beq.n	800a03a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800a034:	2301      	movs	r3, #1
 800a036:	77fb      	strb	r3, [r7, #31]
 800a038:	e000      	b.n	800a03c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800a03a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2201      	movs	r2, #1
 800a040:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2200      	movs	r2, #0
 800a048:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a04c:	7ffb      	ldrb	r3, [r7, #31]
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3720      	adds	r7, #32
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
	...

0800a058 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b088      	sub	sp, #32
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	603b      	str	r3, [r7, #0]
 800a064:	4613      	mov	r3, r2
 800a066:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a068:	f7fb ff58 	bl	8005f1c <HAL_GetTick>
 800a06c:	4602      	mov	r2, r0
 800a06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a070:	1a9b      	subs	r3, r3, r2
 800a072:	683a      	ldr	r2, [r7, #0]
 800a074:	4413      	add	r3, r2
 800a076:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a078:	f7fb ff50 	bl	8005f1c <HAL_GetTick>
 800a07c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a07e:	4b39      	ldr	r3, [pc, #228]	; (800a164 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	015b      	lsls	r3, r3, #5
 800a084:	0d1b      	lsrs	r3, r3, #20
 800a086:	69fa      	ldr	r2, [r7, #28]
 800a088:	fb02 f303 	mul.w	r3, r2, r3
 800a08c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a08e:	e054      	b.n	800a13a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a096:	d050      	beq.n	800a13a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a098:	f7fb ff40 	bl	8005f1c <HAL_GetTick>
 800a09c:	4602      	mov	r2, r0
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	1ad3      	subs	r3, r2, r3
 800a0a2:	69fa      	ldr	r2, [r7, #28]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d902      	bls.n	800a0ae <SPI_WaitFlagStateUntilTimeout+0x56>
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d13d      	bne.n	800a12a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	685a      	ldr	r2, [r3, #4]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a0bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a0c6:	d111      	bne.n	800a0ec <SPI_WaitFlagStateUntilTimeout+0x94>
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0d0:	d004      	beq.n	800a0dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0da:	d107      	bne.n	800a0ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0f4:	d10f      	bne.n	800a116 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a104:	601a      	str	r2, [r3, #0]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a114:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2201      	movs	r2, #1
 800a11a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2200      	movs	r2, #0
 800a122:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a126:	2303      	movs	r3, #3
 800a128:	e017      	b.n	800a15a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d101      	bne.n	800a134 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a130:	2300      	movs	r3, #0
 800a132:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	3b01      	subs	r3, #1
 800a138:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	689a      	ldr	r2, [r3, #8]
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	4013      	ands	r3, r2
 800a144:	68ba      	ldr	r2, [r7, #8]
 800a146:	429a      	cmp	r2, r3
 800a148:	bf0c      	ite	eq
 800a14a:	2301      	moveq	r3, #1
 800a14c:	2300      	movne	r3, #0
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	461a      	mov	r2, r3
 800a152:	79fb      	ldrb	r3, [r7, #7]
 800a154:	429a      	cmp	r2, r3
 800a156:	d19b      	bne.n	800a090 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3720      	adds	r7, #32
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	20000020 	.word	0x20000020

0800a168 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b088      	sub	sp, #32
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	60f8      	str	r0, [r7, #12]
 800a170:	60b9      	str	r1, [r7, #8]
 800a172:	607a      	str	r2, [r7, #4]
 800a174:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a176:	f7fb fed1 	bl	8005f1c <HAL_GetTick>
 800a17a:	4602      	mov	r2, r0
 800a17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17e:	1a9b      	subs	r3, r3, r2
 800a180:	683a      	ldr	r2, [r7, #0]
 800a182:	4413      	add	r3, r2
 800a184:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a186:	f7fb fec9 	bl	8005f1c <HAL_GetTick>
 800a18a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a18c:	4b3c      	ldr	r3, [pc, #240]	; (800a280 <SPI_WaitFifoStateUntilTimeout+0x118>)
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	4613      	mov	r3, r2
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	4413      	add	r3, r2
 800a196:	00da      	lsls	r2, r3, #3
 800a198:	1ad3      	subs	r3, r2, r3
 800a19a:	0d1b      	lsrs	r3, r3, #20
 800a19c:	69fa      	ldr	r2, [r7, #28]
 800a19e:	fb02 f303 	mul.w	r3, r2, r3
 800a1a2:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800a1a4:	e05f      	b.n	800a266 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a1ac:	d106      	bne.n	800a1bc <SPI_WaitFifoStateUntilTimeout+0x54>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d103      	bne.n	800a1bc <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	330c      	adds	r3, #12
 800a1ba:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1c2:	d050      	beq.n	800a266 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a1c4:	f7fb feaa 	bl	8005f1c <HAL_GetTick>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	1ad3      	subs	r3, r2, r3
 800a1ce:	69fa      	ldr	r2, [r7, #28]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d902      	bls.n	800a1da <SPI_WaitFifoStateUntilTimeout+0x72>
 800a1d4:	69fb      	ldr	r3, [r7, #28]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d13d      	bne.n	800a256 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	685a      	ldr	r2, [r3, #4]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a1e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1f2:	d111      	bne.n	800a218 <SPI_WaitFifoStateUntilTimeout+0xb0>
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1fc:	d004      	beq.n	800a208 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a206:	d107      	bne.n	800a218 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a216:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a21c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a220:	d10f      	bne.n	800a242 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a230:	601a      	str	r2, [r3, #0]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a240:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2201      	movs	r2, #1
 800a246:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a252:	2303      	movs	r3, #3
 800a254:	e010      	b.n	800a278 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d101      	bne.n	800a260 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 800a25c:	2300      	movs	r3, #0
 800a25e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	3b01      	subs	r3, #1
 800a264:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	689a      	ldr	r2, [r3, #8]
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	4013      	ands	r3, r2
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	429a      	cmp	r2, r3
 800a274:	d197      	bne.n	800a1a6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800a276:	2300      	movs	r3, #0
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3720      	adds	r7, #32
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	20000020 	.word	0x20000020

0800a284 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b086      	sub	sp, #24
 800a288:	af02      	add	r7, sp, #8
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	9300      	str	r3, [sp, #0]
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	2200      	movs	r2, #0
 800a298:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f7ff ff63 	bl	800a168 <SPI_WaitFifoStateUntilTimeout>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d007      	beq.n	800a2b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2ac:	f043 0220 	orr.w	r2, r3, #32
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a2b4:	2303      	movs	r3, #3
 800a2b6:	e027      	b.n	800a308 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	9300      	str	r3, [sp, #0]
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	2180      	movs	r1, #128	; 0x80
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f7ff fec8 	bl	800a058 <SPI_WaitFlagStateUntilTimeout>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d007      	beq.n	800a2de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2d2:	f043 0220 	orr.w	r2, r3, #32
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a2da:	2303      	movs	r3, #3
 800a2dc:	e014      	b.n	800a308 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	9300      	str	r3, [sp, #0]
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f7ff ff3c 	bl	800a168 <SPI_WaitFifoStateUntilTimeout>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d007      	beq.n	800a306 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2fa:	f043 0220 	orr.w	r2, r3, #32
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a302:	2303      	movs	r3, #3
 800a304:	e000      	b.n	800a308 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a306:	2300      	movs	r3, #0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d101      	bne.n	800a322 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a31e:	2301      	movs	r3, #1
 800a320:	e049      	b.n	800a3b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d106      	bne.n	800a33c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f7fb fb6e 	bl	8005a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2202      	movs	r2, #2
 800a340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	3304      	adds	r3, #4
 800a34c:	4619      	mov	r1, r3
 800a34e:	4610      	mov	r0, r2
 800a350:	f000 fd5a 	bl	800ae08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2201      	movs	r2, #1
 800a358:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2201      	movs	r2, #1
 800a360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2201      	movs	r2, #1
 800a370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2201      	movs	r2, #1
 800a380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2201      	movs	r2, #1
 800a388:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2201      	movs	r2, #1
 800a390:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a3b4:	2300      	movs	r3, #0
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3708      	adds	r7, #8
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
	...

0800a3c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b085      	sub	sp, #20
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d001      	beq.n	800a3d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e036      	b.n	800a446 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2202      	movs	r2, #2
 800a3dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	68da      	ldr	r2, [r3, #12]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f042 0201 	orr.w	r2, r2, #1
 800a3ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a17      	ldr	r2, [pc, #92]	; (800a454 <HAL_TIM_Base_Start_IT+0x94>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d004      	beq.n	800a404 <HAL_TIM_Base_Start_IT+0x44>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a402:	d115      	bne.n	800a430 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	689a      	ldr	r2, [r3, #8]
 800a40a:	4b13      	ldr	r3, [pc, #76]	; (800a458 <HAL_TIM_Base_Start_IT+0x98>)
 800a40c:	4013      	ands	r3, r2
 800a40e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2b06      	cmp	r3, #6
 800a414:	d015      	beq.n	800a442 <HAL_TIM_Base_Start_IT+0x82>
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a41c:	d011      	beq.n	800a442 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	681a      	ldr	r2, [r3, #0]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f042 0201 	orr.w	r2, r2, #1
 800a42c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a42e:	e008      	b.n	800a442 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f042 0201 	orr.w	r2, r2, #1
 800a43e:	601a      	str	r2, [r3, #0]
 800a440:	e000      	b.n	800a444 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a442:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3714      	adds	r7, #20
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	40012c00 	.word	0x40012c00
 800a458:	00010007 	.word	0x00010007

0800a45c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d101      	bne.n	800a46e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	e049      	b.n	800a502 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a474:	b2db      	uxtb	r3, r3
 800a476:	2b00      	cmp	r3, #0
 800a478:	d106      	bne.n	800a488 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2200      	movs	r2, #0
 800a47e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 f841 	bl	800a50a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2202      	movs	r2, #2
 800a48c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	3304      	adds	r3, #4
 800a498:	4619      	mov	r1, r3
 800a49a:	4610      	mov	r0, r2
 800a49c:	f000 fcb4 	bl	800ae08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a500:	2300      	movs	r3, #0
}
 800a502:	4618      	mov	r0, r3
 800a504:	3708      	adds	r7, #8
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a50a:	b480      	push	{r7}
 800a50c:	b083      	sub	sp, #12
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a512:	bf00      	nop
 800a514:	370c      	adds	r7, #12
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr
	...

0800a520 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d109      	bne.n	800a544 <HAL_TIM_PWM_Start+0x24>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a536:	b2db      	uxtb	r3, r3
 800a538:	2b01      	cmp	r3, #1
 800a53a:	bf14      	ite	ne
 800a53c:	2301      	movne	r3, #1
 800a53e:	2300      	moveq	r3, #0
 800a540:	b2db      	uxtb	r3, r3
 800a542:	e03c      	b.n	800a5be <HAL_TIM_PWM_Start+0x9e>
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	2b04      	cmp	r3, #4
 800a548:	d109      	bne.n	800a55e <HAL_TIM_PWM_Start+0x3e>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a550:	b2db      	uxtb	r3, r3
 800a552:	2b01      	cmp	r3, #1
 800a554:	bf14      	ite	ne
 800a556:	2301      	movne	r3, #1
 800a558:	2300      	moveq	r3, #0
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	e02f      	b.n	800a5be <HAL_TIM_PWM_Start+0x9e>
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	2b08      	cmp	r3, #8
 800a562:	d109      	bne.n	800a578 <HAL_TIM_PWM_Start+0x58>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	bf14      	ite	ne
 800a570:	2301      	movne	r3, #1
 800a572:	2300      	moveq	r3, #0
 800a574:	b2db      	uxtb	r3, r3
 800a576:	e022      	b.n	800a5be <HAL_TIM_PWM_Start+0x9e>
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	2b0c      	cmp	r3, #12
 800a57c:	d109      	bne.n	800a592 <HAL_TIM_PWM_Start+0x72>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a584:	b2db      	uxtb	r3, r3
 800a586:	2b01      	cmp	r3, #1
 800a588:	bf14      	ite	ne
 800a58a:	2301      	movne	r3, #1
 800a58c:	2300      	moveq	r3, #0
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	e015      	b.n	800a5be <HAL_TIM_PWM_Start+0x9e>
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	2b10      	cmp	r3, #16
 800a596:	d109      	bne.n	800a5ac <HAL_TIM_PWM_Start+0x8c>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	bf14      	ite	ne
 800a5a4:	2301      	movne	r3, #1
 800a5a6:	2300      	moveq	r3, #0
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	e008      	b.n	800a5be <HAL_TIM_PWM_Start+0x9e>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	bf14      	ite	ne
 800a5b8:	2301      	movne	r3, #1
 800a5ba:	2300      	moveq	r3, #0
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d001      	beq.n	800a5c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e079      	b.n	800a6ba <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d104      	bne.n	800a5d6 <HAL_TIM_PWM_Start+0xb6>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2202      	movs	r2, #2
 800a5d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5d4:	e023      	b.n	800a61e <HAL_TIM_PWM_Start+0xfe>
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	2b04      	cmp	r3, #4
 800a5da:	d104      	bne.n	800a5e6 <HAL_TIM_PWM_Start+0xc6>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2202      	movs	r2, #2
 800a5e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5e4:	e01b      	b.n	800a61e <HAL_TIM_PWM_Start+0xfe>
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	2b08      	cmp	r3, #8
 800a5ea:	d104      	bne.n	800a5f6 <HAL_TIM_PWM_Start+0xd6>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2202      	movs	r2, #2
 800a5f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5f4:	e013      	b.n	800a61e <HAL_TIM_PWM_Start+0xfe>
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	2b0c      	cmp	r3, #12
 800a5fa:	d104      	bne.n	800a606 <HAL_TIM_PWM_Start+0xe6>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2202      	movs	r2, #2
 800a600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a604:	e00b      	b.n	800a61e <HAL_TIM_PWM_Start+0xfe>
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	2b10      	cmp	r3, #16
 800a60a:	d104      	bne.n	800a616 <HAL_TIM_PWM_Start+0xf6>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2202      	movs	r2, #2
 800a610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a614:	e003      	b.n	800a61e <HAL_TIM_PWM_Start+0xfe>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2202      	movs	r2, #2
 800a61a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	2201      	movs	r2, #1
 800a624:	6839      	ldr	r1, [r7, #0]
 800a626:	4618      	mov	r0, r3
 800a628:	f000 ff6c 	bl	800b504 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4a24      	ldr	r2, [pc, #144]	; (800a6c4 <HAL_TIM_PWM_Start+0x1a4>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d009      	beq.n	800a64a <HAL_TIM_PWM_Start+0x12a>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a23      	ldr	r2, [pc, #140]	; (800a6c8 <HAL_TIM_PWM_Start+0x1a8>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d004      	beq.n	800a64a <HAL_TIM_PWM_Start+0x12a>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a21      	ldr	r2, [pc, #132]	; (800a6cc <HAL_TIM_PWM_Start+0x1ac>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d101      	bne.n	800a64e <HAL_TIM_PWM_Start+0x12e>
 800a64a:	2301      	movs	r3, #1
 800a64c:	e000      	b.n	800a650 <HAL_TIM_PWM_Start+0x130>
 800a64e:	2300      	movs	r3, #0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d007      	beq.n	800a664 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a662:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a16      	ldr	r2, [pc, #88]	; (800a6c4 <HAL_TIM_PWM_Start+0x1a4>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d004      	beq.n	800a678 <HAL_TIM_PWM_Start+0x158>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a676:	d115      	bne.n	800a6a4 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	689a      	ldr	r2, [r3, #8]
 800a67e:	4b14      	ldr	r3, [pc, #80]	; (800a6d0 <HAL_TIM_PWM_Start+0x1b0>)
 800a680:	4013      	ands	r3, r2
 800a682:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2b06      	cmp	r3, #6
 800a688:	d015      	beq.n	800a6b6 <HAL_TIM_PWM_Start+0x196>
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a690:	d011      	beq.n	800a6b6 <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f042 0201 	orr.w	r2, r2, #1
 800a6a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6a2:	e008      	b.n	800a6b6 <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f042 0201 	orr.w	r2, r2, #1
 800a6b2:	601a      	str	r2, [r3, #0]
 800a6b4:	e000      	b.n	800a6b8 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a6b8:	2300      	movs	r3, #0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	40012c00 	.word	0x40012c00
 800a6c8:	40014400 	.word	0x40014400
 800a6cc:	40014800 	.word	0x40014800
 800a6d0:	00010007 	.word	0x00010007

0800a6d4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	6839      	ldr	r1, [r7, #0]
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f000 ff0c 	bl	800b504 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a39      	ldr	r2, [pc, #228]	; (800a7d8 <HAL_TIM_PWM_Stop+0x104>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d009      	beq.n	800a70a <HAL_TIM_PWM_Stop+0x36>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a38      	ldr	r2, [pc, #224]	; (800a7dc <HAL_TIM_PWM_Stop+0x108>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d004      	beq.n	800a70a <HAL_TIM_PWM_Stop+0x36>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a36      	ldr	r2, [pc, #216]	; (800a7e0 <HAL_TIM_PWM_Stop+0x10c>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d101      	bne.n	800a70e <HAL_TIM_PWM_Stop+0x3a>
 800a70a:	2301      	movs	r3, #1
 800a70c:	e000      	b.n	800a710 <HAL_TIM_PWM_Stop+0x3c>
 800a70e:	2300      	movs	r3, #0
 800a710:	2b00      	cmp	r3, #0
 800a712:	d017      	beq.n	800a744 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	6a1a      	ldr	r2, [r3, #32]
 800a71a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a71e:	4013      	ands	r3, r2
 800a720:	2b00      	cmp	r3, #0
 800a722:	d10f      	bne.n	800a744 <HAL_TIM_PWM_Stop+0x70>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	6a1a      	ldr	r2, [r3, #32]
 800a72a:	f240 4344 	movw	r3, #1092	; 0x444
 800a72e:	4013      	ands	r3, r2
 800a730:	2b00      	cmp	r3, #0
 800a732:	d107      	bne.n	800a744 <HAL_TIM_PWM_Stop+0x70>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a742:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	6a1a      	ldr	r2, [r3, #32]
 800a74a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a74e:	4013      	ands	r3, r2
 800a750:	2b00      	cmp	r3, #0
 800a752:	d10f      	bne.n	800a774 <HAL_TIM_PWM_Stop+0xa0>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	6a1a      	ldr	r2, [r3, #32]
 800a75a:	f240 4344 	movw	r3, #1092	; 0x444
 800a75e:	4013      	ands	r3, r2
 800a760:	2b00      	cmp	r3, #0
 800a762:	d107      	bne.n	800a774 <HAL_TIM_PWM_Stop+0xa0>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f022 0201 	bic.w	r2, r2, #1
 800a772:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d104      	bne.n	800a784 <HAL_TIM_PWM_Stop+0xb0>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2201      	movs	r2, #1
 800a77e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a782:	e023      	b.n	800a7cc <HAL_TIM_PWM_Stop+0xf8>
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	2b04      	cmp	r3, #4
 800a788:	d104      	bne.n	800a794 <HAL_TIM_PWM_Stop+0xc0>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2201      	movs	r2, #1
 800a78e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a792:	e01b      	b.n	800a7cc <HAL_TIM_PWM_Stop+0xf8>
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	2b08      	cmp	r3, #8
 800a798:	d104      	bne.n	800a7a4 <HAL_TIM_PWM_Stop+0xd0>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2201      	movs	r2, #1
 800a79e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7a2:	e013      	b.n	800a7cc <HAL_TIM_PWM_Stop+0xf8>
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	2b0c      	cmp	r3, #12
 800a7a8:	d104      	bne.n	800a7b4 <HAL_TIM_PWM_Stop+0xe0>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a7b2:	e00b      	b.n	800a7cc <HAL_TIM_PWM_Stop+0xf8>
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	2b10      	cmp	r3, #16
 800a7b8:	d104      	bne.n	800a7c4 <HAL_TIM_PWM_Stop+0xf0>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2201      	movs	r2, #1
 800a7be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7c2:	e003      	b.n	800a7cc <HAL_TIM_PWM_Stop+0xf8>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800a7cc:	2300      	movs	r3, #0
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3708      	adds	r7, #8
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	40012c00 	.word	0x40012c00
 800a7dc:	40014400 	.word	0x40014400
 800a7e0:	40014800 	.word	0x40014800

0800a7e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	691b      	ldr	r3, [r3, #16]
 800a7f2:	f003 0302 	and.w	r3, r3, #2
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	d122      	bne.n	800a840 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	f003 0302 	and.w	r3, r3, #2
 800a804:	2b02      	cmp	r3, #2
 800a806:	d11b      	bne.n	800a840 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f06f 0202 	mvn.w	r2, #2
 800a810:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2201      	movs	r2, #1
 800a816:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	699b      	ldr	r3, [r3, #24]
 800a81e:	f003 0303 	and.w	r3, r3, #3
 800a822:	2b00      	cmp	r3, #0
 800a824:	d003      	beq.n	800a82e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 facf 	bl	800adca <HAL_TIM_IC_CaptureCallback>
 800a82c:	e005      	b.n	800a83a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 fac1 	bl	800adb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 fad2 	bl	800adde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	691b      	ldr	r3, [r3, #16]
 800a846:	f003 0304 	and.w	r3, r3, #4
 800a84a:	2b04      	cmp	r3, #4
 800a84c:	d122      	bne.n	800a894 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	f003 0304 	and.w	r3, r3, #4
 800a858:	2b04      	cmp	r3, #4
 800a85a:	d11b      	bne.n	800a894 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f06f 0204 	mvn.w	r2, #4
 800a864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2202      	movs	r2, #2
 800a86a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	699b      	ldr	r3, [r3, #24]
 800a872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a876:	2b00      	cmp	r3, #0
 800a878:	d003      	beq.n	800a882 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 faa5 	bl	800adca <HAL_TIM_IC_CaptureCallback>
 800a880:	e005      	b.n	800a88e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 fa97 	bl	800adb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 faa8 	bl	800adde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	691b      	ldr	r3, [r3, #16]
 800a89a:	f003 0308 	and.w	r3, r3, #8
 800a89e:	2b08      	cmp	r3, #8
 800a8a0:	d122      	bne.n	800a8e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	f003 0308 	and.w	r3, r3, #8
 800a8ac:	2b08      	cmp	r3, #8
 800a8ae:	d11b      	bne.n	800a8e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f06f 0208 	mvn.w	r2, #8
 800a8b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2204      	movs	r2, #4
 800a8be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	69db      	ldr	r3, [r3, #28]
 800a8c6:	f003 0303 	and.w	r3, r3, #3
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d003      	beq.n	800a8d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 fa7b 	bl	800adca <HAL_TIM_IC_CaptureCallback>
 800a8d4:	e005      	b.n	800a8e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 fa6d 	bl	800adb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 fa7e 	bl	800adde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	f003 0310 	and.w	r3, r3, #16
 800a8f2:	2b10      	cmp	r3, #16
 800a8f4:	d122      	bne.n	800a93c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	f003 0310 	and.w	r3, r3, #16
 800a900:	2b10      	cmp	r3, #16
 800a902:	d11b      	bne.n	800a93c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f06f 0210 	mvn.w	r2, #16
 800a90c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2208      	movs	r2, #8
 800a912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	69db      	ldr	r3, [r3, #28]
 800a91a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d003      	beq.n	800a92a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 fa51 	bl	800adca <HAL_TIM_IC_CaptureCallback>
 800a928:	e005      	b.n	800a936 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 fa43 	bl	800adb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 fa54 	bl	800adde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	691b      	ldr	r3, [r3, #16]
 800a942:	f003 0301 	and.w	r3, r3, #1
 800a946:	2b01      	cmp	r3, #1
 800a948:	d10e      	bne.n	800a968 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	f003 0301 	and.w	r3, r3, #1
 800a954:	2b01      	cmp	r3, #1
 800a956:	d107      	bne.n	800a968 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f06f 0201 	mvn.w	r2, #1
 800a960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f7fa fe02 	bl	800556c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	691b      	ldr	r3, [r3, #16]
 800a96e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a972:	2b80      	cmp	r3, #128	; 0x80
 800a974:	d10e      	bne.n	800a994 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	68db      	ldr	r3, [r3, #12]
 800a97c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a980:	2b80      	cmp	r3, #128	; 0x80
 800a982:	d107      	bne.n	800a994 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a98c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 fed8 	bl	800b744 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	691b      	ldr	r3, [r3, #16]
 800a99a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a99e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9a2:	d10e      	bne.n	800a9c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9ae:	2b80      	cmp	r3, #128	; 0x80
 800a9b0:	d107      	bne.n	800a9c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a9ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 fecb 	bl	800b758 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	691b      	ldr	r3, [r3, #16]
 800a9c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9cc:	2b40      	cmp	r3, #64	; 0x40
 800a9ce:	d10e      	bne.n	800a9ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	68db      	ldr	r3, [r3, #12]
 800a9d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9da:	2b40      	cmp	r3, #64	; 0x40
 800a9dc:	d107      	bne.n	800a9ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a9e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 fa02 	bl	800adf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	691b      	ldr	r3, [r3, #16]
 800a9f4:	f003 0320 	and.w	r3, r3, #32
 800a9f8:	2b20      	cmp	r3, #32
 800a9fa:	d10e      	bne.n	800aa1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	68db      	ldr	r3, [r3, #12]
 800aa02:	f003 0320 	and.w	r3, r3, #32
 800aa06:	2b20      	cmp	r3, #32
 800aa08:	d107      	bne.n	800aa1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f06f 0220 	mvn.w	r2, #32
 800aa12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 fe8b 	bl	800b730 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa1a:	bf00      	nop
 800aa1c:	3708      	adds	r7, #8
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
	...

0800aa24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b084      	sub	sp, #16
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	60f8      	str	r0, [r7, #12]
 800aa2c:	60b9      	str	r1, [r7, #8]
 800aa2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d101      	bne.n	800aa3e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800aa3a:	2302      	movs	r3, #2
 800aa3c:	e0fd      	b.n	800ac3a <HAL_TIM_PWM_ConfigChannel+0x216>
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2201      	movs	r2, #1
 800aa42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2b14      	cmp	r3, #20
 800aa4a:	f200 80f0 	bhi.w	800ac2e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800aa4e:	a201      	add	r2, pc, #4	; (adr r2, 800aa54 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800aa50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa54:	0800aaa9 	.word	0x0800aaa9
 800aa58:	0800ac2f 	.word	0x0800ac2f
 800aa5c:	0800ac2f 	.word	0x0800ac2f
 800aa60:	0800ac2f 	.word	0x0800ac2f
 800aa64:	0800aae9 	.word	0x0800aae9
 800aa68:	0800ac2f 	.word	0x0800ac2f
 800aa6c:	0800ac2f 	.word	0x0800ac2f
 800aa70:	0800ac2f 	.word	0x0800ac2f
 800aa74:	0800ab2b 	.word	0x0800ab2b
 800aa78:	0800ac2f 	.word	0x0800ac2f
 800aa7c:	0800ac2f 	.word	0x0800ac2f
 800aa80:	0800ac2f 	.word	0x0800ac2f
 800aa84:	0800ab6b 	.word	0x0800ab6b
 800aa88:	0800ac2f 	.word	0x0800ac2f
 800aa8c:	0800ac2f 	.word	0x0800ac2f
 800aa90:	0800ac2f 	.word	0x0800ac2f
 800aa94:	0800abad 	.word	0x0800abad
 800aa98:	0800ac2f 	.word	0x0800ac2f
 800aa9c:	0800ac2f 	.word	0x0800ac2f
 800aaa0:	0800ac2f 	.word	0x0800ac2f
 800aaa4:	0800abed 	.word	0x0800abed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	68b9      	ldr	r1, [r7, #8]
 800aaae:	4618      	mov	r0, r3
 800aab0:	f000 fa0e 	bl	800aed0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	699a      	ldr	r2, [r3, #24]
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f042 0208 	orr.w	r2, r2, #8
 800aac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	699a      	ldr	r2, [r3, #24]
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f022 0204 	bic.w	r2, r2, #4
 800aad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	6999      	ldr	r1, [r3, #24]
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	691a      	ldr	r2, [r3, #16]
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	430a      	orrs	r2, r1
 800aae4:	619a      	str	r2, [r3, #24]
      break;
 800aae6:	e0a3      	b.n	800ac30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	68b9      	ldr	r1, [r7, #8]
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f000 fa6a 	bl	800afc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	699a      	ldr	r2, [r3, #24]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	699a      	ldr	r2, [r3, #24]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	6999      	ldr	r1, [r3, #24]
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	691b      	ldr	r3, [r3, #16]
 800ab1e:	021a      	lsls	r2, r3, #8
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	430a      	orrs	r2, r1
 800ab26:	619a      	str	r2, [r3, #24]
      break;
 800ab28:	e082      	b.n	800ac30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	68b9      	ldr	r1, [r7, #8]
 800ab30:	4618      	mov	r0, r3
 800ab32:	f000 fac3 	bl	800b0bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	69da      	ldr	r2, [r3, #28]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f042 0208 	orr.w	r2, r2, #8
 800ab44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	69da      	ldr	r2, [r3, #28]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f022 0204 	bic.w	r2, r2, #4
 800ab54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	69d9      	ldr	r1, [r3, #28]
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	691a      	ldr	r2, [r3, #16]
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	430a      	orrs	r2, r1
 800ab66:	61da      	str	r2, [r3, #28]
      break;
 800ab68:	e062      	b.n	800ac30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68b9      	ldr	r1, [r7, #8]
 800ab70:	4618      	mov	r0, r3
 800ab72:	f000 fb1b 	bl	800b1ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	69da      	ldr	r2, [r3, #28]
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	69da      	ldr	r2, [r3, #28]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	69d9      	ldr	r1, [r3, #28]
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	691b      	ldr	r3, [r3, #16]
 800aba0:	021a      	lsls	r2, r3, #8
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	430a      	orrs	r2, r1
 800aba8:	61da      	str	r2, [r3, #28]
      break;
 800abaa:	e041      	b.n	800ac30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	68b9      	ldr	r1, [r7, #8]
 800abb2:	4618      	mov	r0, r3
 800abb4:	f000 fb58 	bl	800b268 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f042 0208 	orr.w	r2, r2, #8
 800abc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f022 0204 	bic.w	r2, r2, #4
 800abd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	691a      	ldr	r2, [r3, #16]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	430a      	orrs	r2, r1
 800abe8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800abea:	e021      	b.n	800ac30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	68b9      	ldr	r1, [r7, #8]
 800abf2:	4618      	mov	r0, r3
 800abf4:	f000 fb90 	bl	800b318 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	691b      	ldr	r3, [r3, #16]
 800ac22:	021a      	lsls	r2, r3, #8
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	430a      	orrs	r2, r1
 800ac2a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ac2c:	e000      	b.n	800ac30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800ac2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2200      	movs	r2, #0
 800ac34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac38:	2300      	movs	r3, #0
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3710      	adds	r7, #16
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop

0800ac44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d101      	bne.n	800ac5c <HAL_TIM_ConfigClockSource+0x18>
 800ac58:	2302      	movs	r3, #2
 800ac5a:	e0a8      	b.n	800adae <HAL_TIM_ConfigClockSource+0x16a>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2201      	movs	r2, #1
 800ac60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2202      	movs	r2, #2
 800ac68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800ac7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ac7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	68fa      	ldr	r2, [r7, #12]
 800ac8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	2b40      	cmp	r3, #64	; 0x40
 800ac96:	d067      	beq.n	800ad68 <HAL_TIM_ConfigClockSource+0x124>
 800ac98:	2b40      	cmp	r3, #64	; 0x40
 800ac9a:	d80b      	bhi.n	800acb4 <HAL_TIM_ConfigClockSource+0x70>
 800ac9c:	2b10      	cmp	r3, #16
 800ac9e:	d073      	beq.n	800ad88 <HAL_TIM_ConfigClockSource+0x144>
 800aca0:	2b10      	cmp	r3, #16
 800aca2:	d802      	bhi.n	800acaa <HAL_TIM_ConfigClockSource+0x66>
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d06f      	beq.n	800ad88 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800aca8:	e078      	b.n	800ad9c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800acaa:	2b20      	cmp	r3, #32
 800acac:	d06c      	beq.n	800ad88 <HAL_TIM_ConfigClockSource+0x144>
 800acae:	2b30      	cmp	r3, #48	; 0x30
 800acb0:	d06a      	beq.n	800ad88 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800acb2:	e073      	b.n	800ad9c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800acb4:	2b70      	cmp	r3, #112	; 0x70
 800acb6:	d00d      	beq.n	800acd4 <HAL_TIM_ConfigClockSource+0x90>
 800acb8:	2b70      	cmp	r3, #112	; 0x70
 800acba:	d804      	bhi.n	800acc6 <HAL_TIM_ConfigClockSource+0x82>
 800acbc:	2b50      	cmp	r3, #80	; 0x50
 800acbe:	d033      	beq.n	800ad28 <HAL_TIM_ConfigClockSource+0xe4>
 800acc0:	2b60      	cmp	r3, #96	; 0x60
 800acc2:	d041      	beq.n	800ad48 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800acc4:	e06a      	b.n	800ad9c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800acc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acca:	d066      	beq.n	800ad9a <HAL_TIM_ConfigClockSource+0x156>
 800accc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acd0:	d017      	beq.n	800ad02 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800acd2:	e063      	b.n	800ad9c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6818      	ldr	r0, [r3, #0]
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	6899      	ldr	r1, [r3, #8]
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	685a      	ldr	r2, [r3, #4]
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	f000 fbee 	bl	800b4c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	689b      	ldr	r3, [r3, #8]
 800acee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800acf6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	609a      	str	r2, [r3, #8]
      break;
 800ad00:	e04c      	b.n	800ad9c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6818      	ldr	r0, [r3, #0]
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	6899      	ldr	r1, [r3, #8]
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	685a      	ldr	r2, [r3, #4]
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	68db      	ldr	r3, [r3, #12]
 800ad12:	f000 fbd7 	bl	800b4c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	689a      	ldr	r2, [r3, #8]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad24:	609a      	str	r2, [r3, #8]
      break;
 800ad26:	e039      	b.n	800ad9c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6818      	ldr	r0, [r3, #0]
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	6859      	ldr	r1, [r3, #4]
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	461a      	mov	r2, r3
 800ad36:	f000 fb49 	bl	800b3cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	2150      	movs	r1, #80	; 0x50
 800ad40:	4618      	mov	r0, r3
 800ad42:	f000 fba2 	bl	800b48a <TIM_ITRx_SetConfig>
      break;
 800ad46:	e029      	b.n	800ad9c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6818      	ldr	r0, [r3, #0]
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	6859      	ldr	r1, [r3, #4]
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	68db      	ldr	r3, [r3, #12]
 800ad54:	461a      	mov	r2, r3
 800ad56:	f000 fb68 	bl	800b42a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	2160      	movs	r1, #96	; 0x60
 800ad60:	4618      	mov	r0, r3
 800ad62:	f000 fb92 	bl	800b48a <TIM_ITRx_SetConfig>
      break;
 800ad66:	e019      	b.n	800ad9c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6818      	ldr	r0, [r3, #0]
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	6859      	ldr	r1, [r3, #4]
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	461a      	mov	r2, r3
 800ad76:	f000 fb29 	bl	800b3cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2140      	movs	r1, #64	; 0x40
 800ad80:	4618      	mov	r0, r3
 800ad82:	f000 fb82 	bl	800b48a <TIM_ITRx_SetConfig>
      break;
 800ad86:	e009      	b.n	800ad9c <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4619      	mov	r1, r3
 800ad92:	4610      	mov	r0, r2
 800ad94:	f000 fb79 	bl	800b48a <TIM_ITRx_SetConfig>
        break;
 800ad98:	e000      	b.n	800ad9c <HAL_TIM_ConfigClockSource+0x158>
      break;
 800ad9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2201      	movs	r2, #1
 800ada0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2200      	movs	r2, #0
 800ada8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800adac:	2300      	movs	r3, #0
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3710      	adds	r7, #16
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800adb6:	b480      	push	{r7}
 800adb8:	b083      	sub	sp, #12
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800adbe:	bf00      	nop
 800adc0:	370c      	adds	r7, #12
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr

0800adca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800adca:	b480      	push	{r7}
 800adcc:	b083      	sub	sp, #12
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800add2:	bf00      	nop
 800add4:	370c      	adds	r7, #12
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr

0800adde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800adde:	b480      	push	{r7}
 800ade0:	b083      	sub	sp, #12
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ade6:	bf00      	nop
 800ade8:	370c      	adds	r7, #12
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr

0800adf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800adf2:	b480      	push	{r7}
 800adf4:	b083      	sub	sp, #12
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800adfa:	bf00      	nop
 800adfc:	370c      	adds	r7, #12
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr
	...

0800ae08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	4a2a      	ldr	r2, [pc, #168]	; (800aec4 <TIM_Base_SetConfig+0xbc>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d003      	beq.n	800ae28 <TIM_Base_SetConfig+0x20>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae26:	d108      	bne.n	800ae3a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	4313      	orrs	r3, r2
 800ae38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	4a21      	ldr	r2, [pc, #132]	; (800aec4 <TIM_Base_SetConfig+0xbc>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d00b      	beq.n	800ae5a <TIM_Base_SetConfig+0x52>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae48:	d007      	beq.n	800ae5a <TIM_Base_SetConfig+0x52>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	4a1e      	ldr	r2, [pc, #120]	; (800aec8 <TIM_Base_SetConfig+0xc0>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d003      	beq.n	800ae5a <TIM_Base_SetConfig+0x52>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	4a1d      	ldr	r2, [pc, #116]	; (800aecc <TIM_Base_SetConfig+0xc4>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d108      	bne.n	800ae6c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	68db      	ldr	r3, [r3, #12]
 800ae66:	68fa      	ldr	r2, [r7, #12]
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	695b      	ldr	r3, [r3, #20]
 800ae76:	4313      	orrs	r3, r2
 800ae78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	68fa      	ldr	r2, [r7, #12]
 800ae7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	689a      	ldr	r2, [r3, #8]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	4a0c      	ldr	r2, [pc, #48]	; (800aec4 <TIM_Base_SetConfig+0xbc>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d007      	beq.n	800aea8 <TIM_Base_SetConfig+0xa0>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	4a0b      	ldr	r2, [pc, #44]	; (800aec8 <TIM_Base_SetConfig+0xc0>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d003      	beq.n	800aea8 <TIM_Base_SetConfig+0xa0>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	4a0a      	ldr	r2, [pc, #40]	; (800aecc <TIM_Base_SetConfig+0xc4>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d103      	bne.n	800aeb0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	691a      	ldr	r2, [r3, #16]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	615a      	str	r2, [r3, #20]
}
 800aeb6:	bf00      	nop
 800aeb8:	3714      	adds	r7, #20
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr
 800aec2:	bf00      	nop
 800aec4:	40012c00 	.word	0x40012c00
 800aec8:	40014400 	.word	0x40014400
 800aecc:	40014800 	.word	0x40014800

0800aed0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b087      	sub	sp, #28
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6a1b      	ldr	r3, [r3, #32]
 800aede:	f023 0201 	bic.w	r2, r3, #1
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6a1b      	ldr	r3, [r3, #32]
 800aeea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	699b      	ldr	r3, [r3, #24]
 800aef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aefe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f023 0303 	bic.w	r3, r3, #3
 800af0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	4313      	orrs	r3, r2
 800af14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	f023 0302 	bic.w	r3, r3, #2
 800af1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	689b      	ldr	r3, [r3, #8]
 800af22:	697a      	ldr	r2, [r7, #20]
 800af24:	4313      	orrs	r3, r2
 800af26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4a24      	ldr	r2, [pc, #144]	; (800afbc <TIM_OC1_SetConfig+0xec>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d007      	beq.n	800af40 <TIM_OC1_SetConfig+0x70>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	4a23      	ldr	r2, [pc, #140]	; (800afc0 <TIM_OC1_SetConfig+0xf0>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d003      	beq.n	800af40 <TIM_OC1_SetConfig+0x70>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4a22      	ldr	r2, [pc, #136]	; (800afc4 <TIM_OC1_SetConfig+0xf4>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d10c      	bne.n	800af5a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	f023 0308 	bic.w	r3, r3, #8
 800af46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	68db      	ldr	r3, [r3, #12]
 800af4c:	697a      	ldr	r2, [r7, #20]
 800af4e:	4313      	orrs	r3, r2
 800af50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	f023 0304 	bic.w	r3, r3, #4
 800af58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	4a17      	ldr	r2, [pc, #92]	; (800afbc <TIM_OC1_SetConfig+0xec>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d007      	beq.n	800af72 <TIM_OC1_SetConfig+0xa2>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	4a17      	ldr	r2, [pc, #92]	; (800afc4 <TIM_OC1_SetConfig+0xf4>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d003      	beq.n	800af72 <TIM_OC1_SetConfig+0xa2>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	4a14      	ldr	r2, [pc, #80]	; (800afc0 <TIM_OC1_SetConfig+0xf0>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d111      	bne.n	800af96 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800af80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	695b      	ldr	r3, [r3, #20]
 800af86:	693a      	ldr	r2, [r7, #16]
 800af88:	4313      	orrs	r3, r2
 800af8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	699b      	ldr	r3, [r3, #24]
 800af90:	693a      	ldr	r2, [r7, #16]
 800af92:	4313      	orrs	r3, r2
 800af94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	693a      	ldr	r2, [r7, #16]
 800af9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	68fa      	ldr	r2, [r7, #12]
 800afa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	685a      	ldr	r2, [r3, #4]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	697a      	ldr	r2, [r7, #20]
 800afae:	621a      	str	r2, [r3, #32]
}
 800afb0:	bf00      	nop
 800afb2:	371c      	adds	r7, #28
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr
 800afbc:	40012c00 	.word	0x40012c00
 800afc0:	40014800 	.word	0x40014800
 800afc4:	40014400 	.word	0x40014400

0800afc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800afc8:	b480      	push	{r7}
 800afca:	b087      	sub	sp, #28
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6a1b      	ldr	r3, [r3, #32]
 800afd6:	f023 0210 	bic.w	r2, r3, #16
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6a1b      	ldr	r3, [r3, #32]
 800afe2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	699b      	ldr	r3, [r3, #24]
 800afee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800affa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	021b      	lsls	r3, r3, #8
 800b00a:	68fa      	ldr	r2, [r7, #12]
 800b00c:	4313      	orrs	r3, r2
 800b00e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	f023 0320 	bic.w	r3, r3, #32
 800b016:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	689b      	ldr	r3, [r3, #8]
 800b01c:	011b      	lsls	r3, r3, #4
 800b01e:	697a      	ldr	r2, [r7, #20]
 800b020:	4313      	orrs	r3, r2
 800b022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	4a22      	ldr	r2, [pc, #136]	; (800b0b0 <TIM_OC2_SetConfig+0xe8>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d10d      	bne.n	800b048 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	011b      	lsls	r3, r3, #4
 800b03a:	697a      	ldr	r2, [r7, #20]
 800b03c:	4313      	orrs	r3, r2
 800b03e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b046:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	4a19      	ldr	r2, [pc, #100]	; (800b0b0 <TIM_OC2_SetConfig+0xe8>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d007      	beq.n	800b060 <TIM_OC2_SetConfig+0x98>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	4a18      	ldr	r2, [pc, #96]	; (800b0b4 <TIM_OC2_SetConfig+0xec>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d003      	beq.n	800b060 <TIM_OC2_SetConfig+0x98>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4a17      	ldr	r2, [pc, #92]	; (800b0b8 <TIM_OC2_SetConfig+0xf0>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d113      	bne.n	800b088 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b066:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b06e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	695b      	ldr	r3, [r3, #20]
 800b074:	009b      	lsls	r3, r3, #2
 800b076:	693a      	ldr	r2, [r7, #16]
 800b078:	4313      	orrs	r3, r2
 800b07a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	699b      	ldr	r3, [r3, #24]
 800b080:	009b      	lsls	r3, r3, #2
 800b082:	693a      	ldr	r2, [r7, #16]
 800b084:	4313      	orrs	r3, r2
 800b086:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	693a      	ldr	r2, [r7, #16]
 800b08c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	68fa      	ldr	r2, [r7, #12]
 800b092:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	685a      	ldr	r2, [r3, #4]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	697a      	ldr	r2, [r7, #20]
 800b0a0:	621a      	str	r2, [r3, #32]
}
 800b0a2:	bf00      	nop
 800b0a4:	371c      	adds	r7, #28
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop
 800b0b0:	40012c00 	.word	0x40012c00
 800b0b4:	40014400 	.word	0x40014400
 800b0b8:	40014800 	.word	0x40014800

0800b0bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b087      	sub	sp, #28
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6a1b      	ldr	r3, [r3, #32]
 800b0ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6a1b      	ldr	r3, [r3, #32]
 800b0d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	69db      	ldr	r3, [r3, #28]
 800b0e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b0ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f023 0303 	bic.w	r3, r3, #3
 800b0f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	68fa      	ldr	r2, [r7, #12]
 800b0fe:	4313      	orrs	r3, r2
 800b100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	689b      	ldr	r3, [r3, #8]
 800b10e:	021b      	lsls	r3, r3, #8
 800b110:	697a      	ldr	r2, [r7, #20]
 800b112:	4313      	orrs	r3, r2
 800b114:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	4a21      	ldr	r2, [pc, #132]	; (800b1a0 <TIM_OC3_SetConfig+0xe4>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d10d      	bne.n	800b13a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b124:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	68db      	ldr	r3, [r3, #12]
 800b12a:	021b      	lsls	r3, r3, #8
 800b12c:	697a      	ldr	r2, [r7, #20]
 800b12e:	4313      	orrs	r3, r2
 800b130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	4a18      	ldr	r2, [pc, #96]	; (800b1a0 <TIM_OC3_SetConfig+0xe4>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d007      	beq.n	800b152 <TIM_OC3_SetConfig+0x96>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	4a17      	ldr	r2, [pc, #92]	; (800b1a4 <TIM_OC3_SetConfig+0xe8>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d003      	beq.n	800b152 <TIM_OC3_SetConfig+0x96>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	4a16      	ldr	r2, [pc, #88]	; (800b1a8 <TIM_OC3_SetConfig+0xec>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d113      	bne.n	800b17a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b158:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b160:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	695b      	ldr	r3, [r3, #20]
 800b166:	011b      	lsls	r3, r3, #4
 800b168:	693a      	ldr	r2, [r7, #16]
 800b16a:	4313      	orrs	r3, r2
 800b16c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	699b      	ldr	r3, [r3, #24]
 800b172:	011b      	lsls	r3, r3, #4
 800b174:	693a      	ldr	r2, [r7, #16]
 800b176:	4313      	orrs	r3, r2
 800b178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	693a      	ldr	r2, [r7, #16]
 800b17e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	68fa      	ldr	r2, [r7, #12]
 800b184:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	685a      	ldr	r2, [r3, #4]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	697a      	ldr	r2, [r7, #20]
 800b192:	621a      	str	r2, [r3, #32]
}
 800b194:	bf00      	nop
 800b196:	371c      	adds	r7, #28
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr
 800b1a0:	40012c00 	.word	0x40012c00
 800b1a4:	40014400 	.word	0x40014400
 800b1a8:	40014800 	.word	0x40014800

0800b1ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b087      	sub	sp, #28
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6a1b      	ldr	r3, [r3, #32]
 800b1ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a1b      	ldr	r3, [r3, #32]
 800b1c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	69db      	ldr	r3, [r3, #28]
 800b1d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b1da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	021b      	lsls	r3, r3, #8
 800b1ee:	68fa      	ldr	r2, [r7, #12]
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b1fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	689b      	ldr	r3, [r3, #8]
 800b200:	031b      	lsls	r3, r3, #12
 800b202:	693a      	ldr	r2, [r7, #16]
 800b204:	4313      	orrs	r3, r2
 800b206:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	4a14      	ldr	r2, [pc, #80]	; (800b25c <TIM_OC4_SetConfig+0xb0>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d007      	beq.n	800b220 <TIM_OC4_SetConfig+0x74>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	4a13      	ldr	r2, [pc, #76]	; (800b260 <TIM_OC4_SetConfig+0xb4>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d003      	beq.n	800b220 <TIM_OC4_SetConfig+0x74>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	4a12      	ldr	r2, [pc, #72]	; (800b264 <TIM_OC4_SetConfig+0xb8>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d109      	bne.n	800b234 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b226:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	695b      	ldr	r3, [r3, #20]
 800b22c:	019b      	lsls	r3, r3, #6
 800b22e:	697a      	ldr	r2, [r7, #20]
 800b230:	4313      	orrs	r3, r2
 800b232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	697a      	ldr	r2, [r7, #20]
 800b238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	685a      	ldr	r2, [r3, #4]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	693a      	ldr	r2, [r7, #16]
 800b24c:	621a      	str	r2, [r3, #32]
}
 800b24e:	bf00      	nop
 800b250:	371c      	adds	r7, #28
 800b252:	46bd      	mov	sp, r7
 800b254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b258:	4770      	bx	lr
 800b25a:	bf00      	nop
 800b25c:	40012c00 	.word	0x40012c00
 800b260:	40014400 	.word	0x40014400
 800b264:	40014800 	.word	0x40014800

0800b268 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b268:	b480      	push	{r7}
 800b26a:	b087      	sub	sp, #28
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6a1b      	ldr	r3, [r3, #32]
 800b276:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6a1b      	ldr	r3, [r3, #32]
 800b282:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b28e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b29a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	68fa      	ldr	r2, [r7, #12]
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b2ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	689b      	ldr	r3, [r3, #8]
 800b2b2:	041b      	lsls	r3, r3, #16
 800b2b4:	693a      	ldr	r2, [r7, #16]
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4a13      	ldr	r2, [pc, #76]	; (800b30c <TIM_OC5_SetConfig+0xa4>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d007      	beq.n	800b2d2 <TIM_OC5_SetConfig+0x6a>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	4a12      	ldr	r2, [pc, #72]	; (800b310 <TIM_OC5_SetConfig+0xa8>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d003      	beq.n	800b2d2 <TIM_OC5_SetConfig+0x6a>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4a11      	ldr	r2, [pc, #68]	; (800b314 <TIM_OC5_SetConfig+0xac>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d109      	bne.n	800b2e6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b2d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	695b      	ldr	r3, [r3, #20]
 800b2de:	021b      	lsls	r3, r3, #8
 800b2e0:	697a      	ldr	r2, [r7, #20]
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	697a      	ldr	r2, [r7, #20]
 800b2ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	68fa      	ldr	r2, [r7, #12]
 800b2f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	685a      	ldr	r2, [r3, #4]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	693a      	ldr	r2, [r7, #16]
 800b2fe:	621a      	str	r2, [r3, #32]
}
 800b300:	bf00      	nop
 800b302:	371c      	adds	r7, #28
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr
 800b30c:	40012c00 	.word	0x40012c00
 800b310:	40014400 	.word	0x40014400
 800b314:	40014800 	.word	0x40014800

0800b318 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b318:	b480      	push	{r7}
 800b31a:	b087      	sub	sp, #28
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a1b      	ldr	r3, [r3, #32]
 800b326:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6a1b      	ldr	r3, [r3, #32]
 800b332:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b33e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b34a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	021b      	lsls	r3, r3, #8
 800b352:	68fa      	ldr	r2, [r7, #12]
 800b354:	4313      	orrs	r3, r2
 800b356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b35e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	051b      	lsls	r3, r3, #20
 800b366:	693a      	ldr	r2, [r7, #16]
 800b368:	4313      	orrs	r3, r2
 800b36a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4a14      	ldr	r2, [pc, #80]	; (800b3c0 <TIM_OC6_SetConfig+0xa8>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d007      	beq.n	800b384 <TIM_OC6_SetConfig+0x6c>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4a13      	ldr	r2, [pc, #76]	; (800b3c4 <TIM_OC6_SetConfig+0xac>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d003      	beq.n	800b384 <TIM_OC6_SetConfig+0x6c>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	4a12      	ldr	r2, [pc, #72]	; (800b3c8 <TIM_OC6_SetConfig+0xb0>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d109      	bne.n	800b398 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b38a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	695b      	ldr	r3, [r3, #20]
 800b390:	029b      	lsls	r3, r3, #10
 800b392:	697a      	ldr	r2, [r7, #20]
 800b394:	4313      	orrs	r3, r2
 800b396:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	697a      	ldr	r2, [r7, #20]
 800b39c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	68fa      	ldr	r2, [r7, #12]
 800b3a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	685a      	ldr	r2, [r3, #4]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	693a      	ldr	r2, [r7, #16]
 800b3b0:	621a      	str	r2, [r3, #32]
}
 800b3b2:	bf00      	nop
 800b3b4:	371c      	adds	r7, #28
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr
 800b3be:	bf00      	nop
 800b3c0:	40012c00 	.word	0x40012c00
 800b3c4:	40014400 	.word	0x40014400
 800b3c8:	40014800 	.word	0x40014800

0800b3cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b087      	sub	sp, #28
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	6a1b      	ldr	r3, [r3, #32]
 800b3dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	6a1b      	ldr	r3, [r3, #32]
 800b3e2:	f023 0201 	bic.w	r2, r3, #1
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	699b      	ldr	r3, [r3, #24]
 800b3ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b3f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	011b      	lsls	r3, r3, #4
 800b3fc:	693a      	ldr	r2, [r7, #16]
 800b3fe:	4313      	orrs	r3, r2
 800b400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	f023 030a 	bic.w	r3, r3, #10
 800b408:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b40a:	697a      	ldr	r2, [r7, #20]
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	4313      	orrs	r3, r2
 800b410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	693a      	ldr	r2, [r7, #16]
 800b416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	697a      	ldr	r2, [r7, #20]
 800b41c:	621a      	str	r2, [r3, #32]
}
 800b41e:	bf00      	nop
 800b420:	371c      	adds	r7, #28
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr

0800b42a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b42a:	b480      	push	{r7}
 800b42c:	b087      	sub	sp, #28
 800b42e:	af00      	add	r7, sp, #0
 800b430:	60f8      	str	r0, [r7, #12]
 800b432:	60b9      	str	r1, [r7, #8]
 800b434:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	6a1b      	ldr	r3, [r3, #32]
 800b43a:	f023 0210 	bic.w	r2, r3, #16
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	699b      	ldr	r3, [r3, #24]
 800b446:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	6a1b      	ldr	r3, [r3, #32]
 800b44c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b454:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	031b      	lsls	r3, r3, #12
 800b45a:	697a      	ldr	r2, [r7, #20]
 800b45c:	4313      	orrs	r3, r2
 800b45e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b466:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	011b      	lsls	r3, r3, #4
 800b46c:	693a      	ldr	r2, [r7, #16]
 800b46e:	4313      	orrs	r3, r2
 800b470:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	697a      	ldr	r2, [r7, #20]
 800b476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	693a      	ldr	r2, [r7, #16]
 800b47c:	621a      	str	r2, [r3, #32]
}
 800b47e:	bf00      	nop
 800b480:	371c      	adds	r7, #28
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr

0800b48a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b48a:	b480      	push	{r7}
 800b48c:	b085      	sub	sp, #20
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
 800b492:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b4a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b4a6:	683a      	ldr	r2, [r7, #0]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	f043 0307 	orr.w	r3, r3, #7
 800b4b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	609a      	str	r2, [r3, #8]
}
 800b4b8:	bf00      	nop
 800b4ba:	3714      	adds	r7, #20
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr

0800b4c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b087      	sub	sp, #28
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	607a      	str	r2, [r7, #4]
 800b4d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	689b      	ldr	r3, [r3, #8]
 800b4d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b4de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	021a      	lsls	r2, r3, #8
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	431a      	orrs	r2, r3
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	697a      	ldr	r2, [r7, #20]
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	697a      	ldr	r2, [r7, #20]
 800b4f6:	609a      	str	r2, [r3, #8]
}
 800b4f8:	bf00      	nop
 800b4fa:	371c      	adds	r7, #28
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr

0800b504 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b504:	b480      	push	{r7}
 800b506:	b087      	sub	sp, #28
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	f003 031f 	and.w	r3, r3, #31
 800b516:	2201      	movs	r2, #1
 800b518:	fa02 f303 	lsl.w	r3, r2, r3
 800b51c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	6a1a      	ldr	r2, [r3, #32]
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	43db      	mvns	r3, r3
 800b526:	401a      	ands	r2, r3
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	6a1a      	ldr	r2, [r3, #32]
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	f003 031f 	and.w	r3, r3, #31
 800b536:	6879      	ldr	r1, [r7, #4]
 800b538:	fa01 f303 	lsl.w	r3, r1, r3
 800b53c:	431a      	orrs	r2, r3
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	621a      	str	r2, [r3, #32]
}
 800b542:	bf00      	nop
 800b544:	371c      	adds	r7, #28
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr
	...

0800b550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b550:	b480      	push	{r7}
 800b552:	b085      	sub	sp, #20
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b560:	2b01      	cmp	r3, #1
 800b562:	d101      	bne.n	800b568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b564:	2302      	movs	r3, #2
 800b566:	e04a      	b.n	800b5fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2201      	movs	r2, #1
 800b56c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2202      	movs	r2, #2
 800b574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4a1f      	ldr	r2, [pc, #124]	; (800b60c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d108      	bne.n	800b5a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b598:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	68fa      	ldr	r2, [r7, #12]
 800b5a0:	4313      	orrs	r3, r2
 800b5a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	68fa      	ldr	r2, [r7, #12]
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	68fa      	ldr	r2, [r7, #12]
 800b5bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	4a12      	ldr	r2, [pc, #72]	; (800b60c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	d004      	beq.n	800b5d2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5d0:	d10c      	bne.n	800b5ec <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	68ba      	ldr	r2, [r7, #8]
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	68ba      	ldr	r2, [r7, #8]
 800b5ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b5fc:	2300      	movs	r3, #0
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3714      	adds	r7, #20
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr
 800b60a:	bf00      	nop
 800b60c:	40012c00 	.word	0x40012c00

0800b610 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b610:	b480      	push	{r7}
 800b612:	b085      	sub	sp, #20
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b61a:	2300      	movs	r3, #0
 800b61c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b624:	2b01      	cmp	r3, #1
 800b626:	d101      	bne.n	800b62c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b628:	2302      	movs	r3, #2
 800b62a:	e078      	b.n	800b71e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2201      	movs	r2, #1
 800b630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	4313      	orrs	r3, r2
 800b640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	689b      	ldr	r3, [r3, #8]
 800b64c:	4313      	orrs	r3, r2
 800b64e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	4313      	orrs	r3, r2
 800b65c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4313      	orrs	r3, r2
 800b66a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	691b      	ldr	r3, [r3, #16]
 800b676:	4313      	orrs	r3, r2
 800b678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	695b      	ldr	r3, [r3, #20]
 800b684:	4313      	orrs	r3, r2
 800b686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b692:	4313      	orrs	r3, r2
 800b694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	699b      	ldr	r3, [r3, #24]
 800b6a0:	041b      	lsls	r3, r3, #16
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4a20      	ldr	r2, [pc, #128]	; (800b72c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d106      	bne.n	800b6be <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	69db      	ldr	r3, [r3, #28]
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4a1a      	ldr	r2, [pc, #104]	; (800b72c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d121      	bne.n	800b70c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6d2:	051b      	lsls	r3, r3, #20
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	6a1b      	ldr	r3, [r3, #32]
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4a0c      	ldr	r2, [pc, #48]	; (800b72c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d106      	bne.n	800b70c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b708:	4313      	orrs	r3, r2
 800b70a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	68fa      	ldr	r2, [r7, #12]
 800b712:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2200      	movs	r2, #0
 800b718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b71c:	2300      	movs	r3, #0
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3714      	adds	r7, #20
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop
 800b72c:	40012c00 	.word	0x40012c00

0800b730 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b738:	bf00      	nop
 800b73a:	370c      	adds	r7, #12
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr

0800b744 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b74c:	bf00      	nop
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b758:	b480      	push	{r7}
 800b75a:	b083      	sub	sp, #12
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b760:	bf00      	nop
 800b762:	370c      	adds	r7, #12
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr

0800b76c <LL_RCC_GetUSARTClockSource>:
{
 800b76c:	b480      	push	{r7}
 800b76e:	b083      	sub	sp, #12
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800b774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b778:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	4013      	ands	r3, r2
}
 800b780:	4618      	mov	r0, r3
 800b782:	370c      	adds	r7, #12
 800b784:	46bd      	mov	sp, r7
 800b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78a:	4770      	bx	lr

0800b78c <LL_RCC_GetLPUARTClockSource>:
{
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800b794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b798:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	4013      	ands	r3, r2
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	370c      	adds	r7, #12
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr

0800b7ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b082      	sub	sp, #8
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d101      	bne.n	800b7be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	e042      	b.n	800b844 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d106      	bne.n	800b7d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f7f9 ffa9 	bl	8005728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2224      	movs	r2, #36	; 0x24
 800b7da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	681a      	ldr	r2, [r3, #0]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f022 0201 	bic.w	r2, r2, #1
 800b7ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 fa40 	bl	800bc74 <UART_SetConfig>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d101      	bne.n	800b7fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	e022      	b.n	800b844 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b802:	2b00      	cmp	r3, #0
 800b804:	d002      	beq.n	800b80c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 fc42 	bl	800c090 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	685a      	ldr	r2, [r3, #4]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b81a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	689a      	ldr	r2, [r3, #8]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b82a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	681a      	ldr	r2, [r3, #0]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f042 0201 	orr.w	r2, r2, #1
 800b83a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f000 fcc9 	bl	800c1d4 <UART_CheckIdleState>
 800b842:	4603      	mov	r3, r0
}
 800b844:	4618      	mov	r0, r3
 800b846:	3708      	adds	r7, #8
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	4613      	mov	r3, r2
 800b858:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b860:	2b20      	cmp	r3, #32
 800b862:	d168      	bne.n	800b936 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d002      	beq.n	800b870 <HAL_UART_Transmit_DMA+0x24>
 800b86a:	88fb      	ldrh	r3, [r7, #6]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d101      	bne.n	800b874 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b870:	2301      	movs	r3, #1
 800b872:	e061      	b.n	800b938 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	d101      	bne.n	800b882 <HAL_UART_Transmit_DMA+0x36>
 800b87e:	2302      	movs	r3, #2
 800b880:	e05a      	b.n	800b938 <HAL_UART_Transmit_DMA+0xec>
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2201      	movs	r2, #1
 800b886:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	68ba      	ldr	r2, [r7, #8]
 800b88e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	88fa      	ldrh	r2, [r7, #6]
 800b894:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	88fa      	ldrh	r2, [r7, #6]
 800b89c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2221      	movs	r2, #33	; 0x21
 800b8ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d02c      	beq.n	800b912 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8bc:	4a20      	ldr	r2, [pc, #128]	; (800b940 <HAL_UART_Transmit_DMA+0xf4>)
 800b8be:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8c4:	4a1f      	ldr	r2, [pc, #124]	; (800b944 <HAL_UART_Transmit_DMA+0xf8>)
 800b8c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8cc:	4a1e      	ldr	r2, [pc, #120]	; (800b948 <HAL_UART_Transmit_DMA+0xfc>)
 800b8ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	3328      	adds	r3, #40	; 0x28
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	88fb      	ldrh	r3, [r7, #6]
 800b8ec:	f7fa fd56 	bl	800639c <HAL_DMA_Start_IT>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d00d      	beq.n	800b912 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2210      	movs	r2, #16
 800b8fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2200      	movs	r2, #0
 800b902:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2220      	movs	r2, #32
 800b90a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800b90e:	2301      	movs	r3, #1
 800b910:	e012      	b.n	800b938 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	2240      	movs	r2, #64	; 0x40
 800b918:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2200      	movs	r2, #0
 800b91e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	689a      	ldr	r2, [r3, #8]
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b930:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800b932:	2300      	movs	r3, #0
 800b934:	e000      	b.n	800b938 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800b936:	2302      	movs	r3, #2
  }
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3710      	adds	r7, #16
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	0800c3e7 	.word	0x0800c3e7
 800b944:	0800c43b 	.word	0x0800c43b
 800b948:	0800c457 	.word	0x0800c457

0800b94c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b088      	sub	sp, #32
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	69db      	ldr	r3, [r3, #28]
 800b95a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	689b      	ldr	r3, [r3, #8]
 800b96a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b96c:	69fa      	ldr	r2, [r7, #28]
 800b96e:	f640 030f 	movw	r3, #2063	; 0x80f
 800b972:	4013      	ands	r3, r2
 800b974:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d118      	bne.n	800b9ae <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b97c:	69fb      	ldr	r3, [r7, #28]
 800b97e:	f003 0320 	and.w	r3, r3, #32
 800b982:	2b00      	cmp	r3, #0
 800b984:	d013      	beq.n	800b9ae <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b986:	69bb      	ldr	r3, [r7, #24]
 800b988:	f003 0320 	and.w	r3, r3, #32
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d104      	bne.n	800b99a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b996:	2b00      	cmp	r3, #0
 800b998:	d009      	beq.n	800b9ae <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	f000 8145 	beq.w	800bc2e <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	4798      	blx	r3
      }
      return;
 800b9ac:	e13f      	b.n	800bc2e <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	f000 80e8 	beq.w	800bb86 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b9b6:	697a      	ldr	r2, [r7, #20]
 800b9b8:	4ba1      	ldr	r3, [pc, #644]	; (800bc40 <HAL_UART_IRQHandler+0x2f4>)
 800b9ba:	4013      	ands	r3, r2
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d105      	bne.n	800b9cc <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b9c0:	69ba      	ldr	r2, [r7, #24]
 800b9c2:	4ba0      	ldr	r3, [pc, #640]	; (800bc44 <HAL_UART_IRQHandler+0x2f8>)
 800b9c4:	4013      	ands	r3, r2
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	f000 80dd 	beq.w	800bb86 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b9cc:	69fb      	ldr	r3, [r7, #28]
 800b9ce:	f003 0301 	and.w	r3, r3, #1
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d010      	beq.n	800b9f8 <HAL_UART_IRQHandler+0xac>
 800b9d6:	69bb      	ldr	r3, [r7, #24]
 800b9d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d00b      	beq.n	800b9f8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9ee:	f043 0201 	orr.w	r2, r3, #1
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b9f8:	69fb      	ldr	r3, [r7, #28]
 800b9fa:	f003 0302 	and.w	r3, r3, #2
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d010      	beq.n	800ba24 <HAL_UART_IRQHandler+0xd8>
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	f003 0301 	and.w	r3, r3, #1
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d00b      	beq.n	800ba24 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2202      	movs	r2, #2
 800ba12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba1a:	f043 0204 	orr.w	r2, r3, #4
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba24:	69fb      	ldr	r3, [r7, #28]
 800ba26:	f003 0304 	and.w	r3, r3, #4
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d010      	beq.n	800ba50 <HAL_UART_IRQHandler+0x104>
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	f003 0301 	and.w	r3, r3, #1
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d00b      	beq.n	800ba50 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2204      	movs	r2, #4
 800ba3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba46:	f043 0202 	orr.w	r2, r3, #2
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ba50:	69fb      	ldr	r3, [r7, #28]
 800ba52:	f003 0308 	and.w	r3, r3, #8
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d015      	beq.n	800ba86 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ba5a:	69bb      	ldr	r3, [r7, #24]
 800ba5c:	f003 0320 	and.w	r3, r3, #32
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d104      	bne.n	800ba6e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ba64:	697a      	ldr	r2, [r7, #20]
 800ba66:	4b76      	ldr	r3, [pc, #472]	; (800bc40 <HAL_UART_IRQHandler+0x2f4>)
 800ba68:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d00b      	beq.n	800ba86 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2208      	movs	r2, #8
 800ba74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba7c:	f043 0208 	orr.w	r2, r3, #8
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ba86:	69fb      	ldr	r3, [r7, #28]
 800ba88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d011      	beq.n	800bab4 <HAL_UART_IRQHandler+0x168>
 800ba90:	69bb      	ldr	r3, [r7, #24]
 800ba92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00c      	beq.n	800bab4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800baa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baaa:	f043 0220 	orr.w	r2, r3, #32
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baba:	2b00      	cmp	r3, #0
 800babc:	f000 80b9 	beq.w	800bc32 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bac0:	69fb      	ldr	r3, [r7, #28]
 800bac2:	f003 0320 	and.w	r3, r3, #32
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d011      	beq.n	800baee <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	f003 0320 	and.w	r3, r3, #32
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d104      	bne.n	800bade <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bada:	2b00      	cmp	r3, #0
 800badc:	d007      	beq.n	800baee <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d003      	beq.n	800baee <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baf4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb00:	2b40      	cmp	r3, #64	; 0x40
 800bb02:	d004      	beq.n	800bb0e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d031      	beq.n	800bb72 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 fc46 	bl	800c3a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	689b      	ldr	r3, [r3, #8]
 800bb1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb1e:	2b40      	cmp	r3, #64	; 0x40
 800bb20:	d123      	bne.n	800bb6a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	689a      	ldr	r2, [r3, #8]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb30:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d013      	beq.n	800bb62 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb3e:	4a42      	ldr	r2, [pc, #264]	; (800bc48 <HAL_UART_IRQHandler+0x2fc>)
 800bb40:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7fa fca3 	bl	8006492 <HAL_DMA_Abort_IT>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d017      	beq.n	800bb82 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800bb5c:	4610      	mov	r0, r2
 800bb5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb60:	e00f      	b.n	800bb82 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 f87c 	bl	800bc60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb68:	e00b      	b.n	800bb82 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 f878 	bl	800bc60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb70:	e007      	b.n	800bb82 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f000 f874 	bl	800bc60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800bb80:	e057      	b.n	800bc32 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb82:	bf00      	nop
    return;
 800bb84:	e055      	b.n	800bc32 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bb86:	69fb      	ldr	r3, [r7, #28]
 800bb88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d00d      	beq.n	800bbac <HAL_UART_IRQHandler+0x260>
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d008      	beq.n	800bbac <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bba2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f000 fcc6 	bl	800c536 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bbaa:	e045      	b.n	800bc38 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d012      	beq.n	800bbdc <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bbb6:	69bb      	ldr	r3, [r7, #24]
 800bbb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d104      	bne.n	800bbca <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d008      	beq.n	800bbdc <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d031      	beq.n	800bc36 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	4798      	blx	r3
    }
    return;
 800bbda:	e02c      	b.n	800bc36 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bbdc:	69fb      	ldr	r3, [r7, #28]
 800bbde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d008      	beq.n	800bbf8 <HAL_UART_IRQHandler+0x2ac>
 800bbe6:	69bb      	ldr	r3, [r7, #24]
 800bbe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d003      	beq.n	800bbf8 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 fc86 	bl	800c502 <UART_EndTransmit_IT>
    return;
 800bbf6:	e01f      	b.n	800bc38 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bbf8:	69fb      	ldr	r3, [r7, #28]
 800bbfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d008      	beq.n	800bc14 <HAL_UART_IRQHandler+0x2c8>
 800bc02:	69bb      	ldr	r3, [r7, #24]
 800bc04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d003      	beq.n	800bc14 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f000 fca6 	bl	800c55e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bc12:	e011      	b.n	800bc38 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bc14:	69fb      	ldr	r3, [r7, #28]
 800bc16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d00c      	beq.n	800bc38 <HAL_UART_IRQHandler+0x2ec>
 800bc1e:	69bb      	ldr	r3, [r7, #24]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	da09      	bge.n	800bc38 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f000 fc90 	bl	800c54a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bc2a:	bf00      	nop
 800bc2c:	e004      	b.n	800bc38 <HAL_UART_IRQHandler+0x2ec>
      return;
 800bc2e:	bf00      	nop
 800bc30:	e002      	b.n	800bc38 <HAL_UART_IRQHandler+0x2ec>
    return;
 800bc32:	bf00      	nop
 800bc34:	e000      	b.n	800bc38 <HAL_UART_IRQHandler+0x2ec>
    return;
 800bc36:	bf00      	nop
  }
}
 800bc38:	3720      	adds	r7, #32
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	10000001 	.word	0x10000001
 800bc44:	04000120 	.word	0x04000120
 800bc48:	0800c4d7 	.word	0x0800c4d7

0800bc4c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b083      	sub	sp, #12
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800bc54:	bf00      	nop
 800bc56:	370c      	adds	r7, #12
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr

0800bc60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bc68:	bf00      	nop
 800bc6a:	370c      	adds	r7, #12
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr

0800bc74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc74:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800bc78:	b088      	sub	sp, #32
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	689a      	ldr	r2, [r3, #8]
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	691b      	ldr	r3, [r3, #16]
 800bc8a:	431a      	orrs	r2, r3
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	695b      	ldr	r3, [r3, #20]
 800bc90:	431a      	orrs	r2, r3
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	69db      	ldr	r3, [r3, #28]
 800bc96:	4313      	orrs	r3, r2
 800bc98:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc9e:	69fa      	ldr	r2, [r7, #28]
 800bca0:	4313      	orrs	r3, r2
 800bca2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	4ba4      	ldr	r3, [pc, #656]	; (800bf3c <UART_SetConfig+0x2c8>)
 800bcac:	4013      	ands	r3, r2
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	6812      	ldr	r2, [r2, #0]
 800bcb2:	69f9      	ldr	r1, [r7, #28]
 800bcb4:	430b      	orrs	r3, r1
 800bcb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	68da      	ldr	r2, [r3, #12]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	430a      	orrs	r2, r1
 800bccc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	699b      	ldr	r3, [r3, #24]
 800bcd2:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a99      	ldr	r2, [pc, #612]	; (800bf40 <UART_SetConfig+0x2cc>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d004      	beq.n	800bce8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6a1b      	ldr	r3, [r3, #32]
 800bce2:	69fa      	ldr	r2, [r7, #28]
 800bce4:	4313      	orrs	r3, r2
 800bce6:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	689b      	ldr	r3, [r3, #8]
 800bcee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800bcf2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800bcf6:	687a      	ldr	r2, [r7, #4]
 800bcf8:	6812      	ldr	r2, [r2, #0]
 800bcfa:	69f9      	ldr	r1, [r7, #28]
 800bcfc:	430b      	orrs	r3, r1
 800bcfe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd06:	f023 010f 	bic.w	r1, r3, #15
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	430a      	orrs	r2, r1
 800bd14:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4a8a      	ldr	r2, [pc, #552]	; (800bf44 <UART_SetConfig+0x2d0>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d121      	bne.n	800bd64 <UART_SetConfig+0xf0>
 800bd20:	2003      	movs	r0, #3
 800bd22:	f7ff fd23 	bl	800b76c <LL_RCC_GetUSARTClockSource>
 800bd26:	4603      	mov	r3, r0
 800bd28:	2b03      	cmp	r3, #3
 800bd2a:	d817      	bhi.n	800bd5c <UART_SetConfig+0xe8>
 800bd2c:	a201      	add	r2, pc, #4	; (adr r2, 800bd34 <UART_SetConfig+0xc0>)
 800bd2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd32:	bf00      	nop
 800bd34:	0800bd45 	.word	0x0800bd45
 800bd38:	0800bd51 	.word	0x0800bd51
 800bd3c:	0800bd4b 	.word	0x0800bd4b
 800bd40:	0800bd57 	.word	0x0800bd57
 800bd44:	2301      	movs	r3, #1
 800bd46:	76fb      	strb	r3, [r7, #27]
 800bd48:	e038      	b.n	800bdbc <UART_SetConfig+0x148>
 800bd4a:	2302      	movs	r3, #2
 800bd4c:	76fb      	strb	r3, [r7, #27]
 800bd4e:	e035      	b.n	800bdbc <UART_SetConfig+0x148>
 800bd50:	2304      	movs	r3, #4
 800bd52:	76fb      	strb	r3, [r7, #27]
 800bd54:	e032      	b.n	800bdbc <UART_SetConfig+0x148>
 800bd56:	2308      	movs	r3, #8
 800bd58:	76fb      	strb	r3, [r7, #27]
 800bd5a:	e02f      	b.n	800bdbc <UART_SetConfig+0x148>
 800bd5c:	2310      	movs	r3, #16
 800bd5e:	76fb      	strb	r3, [r7, #27]
 800bd60:	bf00      	nop
 800bd62:	e02b      	b.n	800bdbc <UART_SetConfig+0x148>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	4a75      	ldr	r2, [pc, #468]	; (800bf40 <UART_SetConfig+0x2cc>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d124      	bne.n	800bdb8 <UART_SetConfig+0x144>
 800bd6e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800bd72:	f7ff fd0b 	bl	800b78c <LL_RCC_GetLPUARTClockSource>
 800bd76:	4603      	mov	r3, r0
 800bd78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd7c:	d012      	beq.n	800bda4 <UART_SetConfig+0x130>
 800bd7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd82:	d802      	bhi.n	800bd8a <UART_SetConfig+0x116>
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d007      	beq.n	800bd98 <UART_SetConfig+0x124>
 800bd88:	e012      	b.n	800bdb0 <UART_SetConfig+0x13c>
 800bd8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd8e:	d006      	beq.n	800bd9e <UART_SetConfig+0x12a>
 800bd90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd94:	d009      	beq.n	800bdaa <UART_SetConfig+0x136>
 800bd96:	e00b      	b.n	800bdb0 <UART_SetConfig+0x13c>
 800bd98:	2300      	movs	r3, #0
 800bd9a:	76fb      	strb	r3, [r7, #27]
 800bd9c:	e00e      	b.n	800bdbc <UART_SetConfig+0x148>
 800bd9e:	2302      	movs	r3, #2
 800bda0:	76fb      	strb	r3, [r7, #27]
 800bda2:	e00b      	b.n	800bdbc <UART_SetConfig+0x148>
 800bda4:	2304      	movs	r3, #4
 800bda6:	76fb      	strb	r3, [r7, #27]
 800bda8:	e008      	b.n	800bdbc <UART_SetConfig+0x148>
 800bdaa:	2308      	movs	r3, #8
 800bdac:	76fb      	strb	r3, [r7, #27]
 800bdae:	e005      	b.n	800bdbc <UART_SetConfig+0x148>
 800bdb0:	2310      	movs	r3, #16
 800bdb2:	76fb      	strb	r3, [r7, #27]
 800bdb4:	bf00      	nop
 800bdb6:	e001      	b.n	800bdbc <UART_SetConfig+0x148>
 800bdb8:	2310      	movs	r3, #16
 800bdba:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a5f      	ldr	r2, [pc, #380]	; (800bf40 <UART_SetConfig+0x2cc>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	f040 808e 	bne.w	800bee4 <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bdc8:	7efb      	ldrb	r3, [r7, #27]
 800bdca:	2b08      	cmp	r3, #8
 800bdcc:	d823      	bhi.n	800be16 <UART_SetConfig+0x1a2>
 800bdce:	a201      	add	r2, pc, #4	; (adr r2, 800bdd4 <UART_SetConfig+0x160>)
 800bdd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd4:	0800bdf9 	.word	0x0800bdf9
 800bdd8:	0800be17 	.word	0x0800be17
 800bddc:	0800be01 	.word	0x0800be01
 800bde0:	0800be17 	.word	0x0800be17
 800bde4:	0800be07 	.word	0x0800be07
 800bde8:	0800be17 	.word	0x0800be17
 800bdec:	0800be17 	.word	0x0800be17
 800bdf0:	0800be17 	.word	0x0800be17
 800bdf4:	0800be0f 	.word	0x0800be0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bdf8:	f7fc fe68 	bl	8008acc <HAL_RCC_GetPCLK1Freq>
 800bdfc:	6178      	str	r0, [r7, #20]
        break;
 800bdfe:	e00f      	b.n	800be20 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800be00:	4b51      	ldr	r3, [pc, #324]	; (800bf48 <UART_SetConfig+0x2d4>)
 800be02:	617b      	str	r3, [r7, #20]
        break;
 800be04:	e00c      	b.n	800be20 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800be06:	f7fc fde3 	bl	80089d0 <HAL_RCC_GetSysClockFreq>
 800be0a:	6178      	str	r0, [r7, #20]
        break;
 800be0c:	e008      	b.n	800be20 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be12:	617b      	str	r3, [r7, #20]
        break;
 800be14:	e004      	b.n	800be20 <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 800be16:	2300      	movs	r3, #0
 800be18:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800be1a:	2301      	movs	r3, #1
 800be1c:	76bb      	strb	r3, [r7, #26]
        break;
 800be1e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	2b00      	cmp	r3, #0
 800be24:	f000 811c 	beq.w	800c060 <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be2c:	4a47      	ldr	r2, [pc, #284]	; (800bf4c <UART_SetConfig+0x2d8>)
 800be2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be32:	461a      	mov	r2, r3
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	fbb3 f3f2 	udiv	r3, r3, r2
 800be3a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	685a      	ldr	r2, [r3, #4]
 800be40:	4613      	mov	r3, r2
 800be42:	005b      	lsls	r3, r3, #1
 800be44:	4413      	add	r3, r2
 800be46:	68ba      	ldr	r2, [r7, #8]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d305      	bcc.n	800be58 <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800be52:	68ba      	ldr	r2, [r7, #8]
 800be54:	429a      	cmp	r2, r3
 800be56:	d902      	bls.n	800be5e <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 800be58:	2301      	movs	r3, #1
 800be5a:	76bb      	strb	r3, [r7, #26]
 800be5c:	e100      	b.n	800c060 <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	4618      	mov	r0, r3
 800be62:	f04f 0100 	mov.w	r1, #0
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be6a:	4a38      	ldr	r2, [pc, #224]	; (800bf4c <UART_SetConfig+0x2d8>)
 800be6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be70:	b29b      	uxth	r3, r3
 800be72:	f04f 0400 	mov.w	r4, #0
 800be76:	461a      	mov	r2, r3
 800be78:	4623      	mov	r3, r4
 800be7a:	f7f4 fe6d 	bl	8000b58 <__aeabi_uldivmod>
 800be7e:	4603      	mov	r3, r0
 800be80:	460c      	mov	r4, r1
 800be82:	4619      	mov	r1, r3
 800be84:	4622      	mov	r2, r4
 800be86:	f04f 0300 	mov.w	r3, #0
 800be8a:	f04f 0400 	mov.w	r4, #0
 800be8e:	0214      	lsls	r4, r2, #8
 800be90:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800be94:	020b      	lsls	r3, r1, #8
 800be96:	687a      	ldr	r2, [r7, #4]
 800be98:	6852      	ldr	r2, [r2, #4]
 800be9a:	0852      	lsrs	r2, r2, #1
 800be9c:	4611      	mov	r1, r2
 800be9e:	f04f 0200 	mov.w	r2, #0
 800bea2:	eb13 0b01 	adds.w	fp, r3, r1
 800bea6:	eb44 0c02 	adc.w	ip, r4, r2
 800beaa:	4658      	mov	r0, fp
 800beac:	4661      	mov	r1, ip
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	685b      	ldr	r3, [r3, #4]
 800beb2:	f04f 0400 	mov.w	r4, #0
 800beb6:	461a      	mov	r2, r3
 800beb8:	4623      	mov	r3, r4
 800beba:	f7f4 fe4d 	bl	8000b58 <__aeabi_uldivmod>
 800bebe:	4603      	mov	r3, r0
 800bec0:	460c      	mov	r4, r1
 800bec2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800beca:	d308      	bcc.n	800bede <UART_SetConfig+0x26a>
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bed2:	d204      	bcs.n	800bede <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	693a      	ldr	r2, [r7, #16]
 800beda:	60da      	str	r2, [r3, #12]
 800bedc:	e0c0      	b.n	800c060 <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 800bede:	2301      	movs	r3, #1
 800bee0:	76bb      	strb	r3, [r7, #26]
 800bee2:	e0bd      	b.n	800c060 <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	69db      	ldr	r3, [r3, #28]
 800bee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800beec:	d169      	bne.n	800bfc2 <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800beee:	7efb      	ldrb	r3, [r7, #27]
 800bef0:	3b01      	subs	r3, #1
 800bef2:	2b07      	cmp	r3, #7
 800bef4:	d82c      	bhi.n	800bf50 <UART_SetConfig+0x2dc>
 800bef6:	a201      	add	r2, pc, #4	; (adr r2, 800befc <UART_SetConfig+0x288>)
 800bef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800befc:	0800bf1d 	.word	0x0800bf1d
 800bf00:	0800bf25 	.word	0x0800bf25
 800bf04:	0800bf51 	.word	0x0800bf51
 800bf08:	0800bf2b 	.word	0x0800bf2b
 800bf0c:	0800bf51 	.word	0x0800bf51
 800bf10:	0800bf51 	.word	0x0800bf51
 800bf14:	0800bf51 	.word	0x0800bf51
 800bf18:	0800bf33 	.word	0x0800bf33
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf1c:	f7fc fdec 	bl	8008af8 <HAL_RCC_GetPCLK2Freq>
 800bf20:	6178      	str	r0, [r7, #20]
        break;
 800bf22:	e01a      	b.n	800bf5a <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bf24:	4b08      	ldr	r3, [pc, #32]	; (800bf48 <UART_SetConfig+0x2d4>)
 800bf26:	617b      	str	r3, [r7, #20]
        break;
 800bf28:	e017      	b.n	800bf5a <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bf2a:	f7fc fd51 	bl	80089d0 <HAL_RCC_GetSysClockFreq>
 800bf2e:	6178      	str	r0, [r7, #20]
        break;
 800bf30:	e013      	b.n	800bf5a <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf36:	617b      	str	r3, [r7, #20]
        break;
 800bf38:	e00f      	b.n	800bf5a <UART_SetConfig+0x2e6>
 800bf3a:	bf00      	nop
 800bf3c:	cfff69f3 	.word	0xcfff69f3
 800bf40:	40008000 	.word	0x40008000
 800bf44:	40013800 	.word	0x40013800
 800bf48:	00f42400 	.word	0x00f42400
 800bf4c:	08017d18 	.word	0x08017d18
      default:
        pclk = 0U;
 800bf50:	2300      	movs	r3, #0
 800bf52:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800bf54:	2301      	movs	r3, #1
 800bf56:	76bb      	strb	r3, [r7, #26]
        break;
 800bf58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d07f      	beq.n	800c060 <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf64:	4a48      	ldr	r2, [pc, #288]	; (800c088 <UART_SetConfig+0x414>)
 800bf66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf6a:	461a      	mov	r2, r3
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf72:	005a      	lsls	r2, r3, #1
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	085b      	lsrs	r3, r3, #1
 800bf7a:	441a      	add	r2, r3
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf84:	b29b      	uxth	r3, r3
 800bf86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	2b0f      	cmp	r3, #15
 800bf8c:	d916      	bls.n	800bfbc <UART_SetConfig+0x348>
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf94:	d212      	bcs.n	800bfbc <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	f023 030f 	bic.w	r3, r3, #15
 800bf9e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	085b      	lsrs	r3, r3, #1
 800bfa4:	b29b      	uxth	r3, r3
 800bfa6:	f003 0307 	and.w	r3, r3, #7
 800bfaa:	b29a      	uxth	r2, r3
 800bfac:	89fb      	ldrh	r3, [r7, #14]
 800bfae:	4313      	orrs	r3, r2
 800bfb0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	89fa      	ldrh	r2, [r7, #14]
 800bfb8:	60da      	str	r2, [r3, #12]
 800bfba:	e051      	b.n	800c060 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	76bb      	strb	r3, [r7, #26]
 800bfc0:	e04e      	b.n	800c060 <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bfc2:	7efb      	ldrb	r3, [r7, #27]
 800bfc4:	3b01      	subs	r3, #1
 800bfc6:	2b07      	cmp	r3, #7
 800bfc8:	d821      	bhi.n	800c00e <UART_SetConfig+0x39a>
 800bfca:	a201      	add	r2, pc, #4	; (adr r2, 800bfd0 <UART_SetConfig+0x35c>)
 800bfcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfd0:	0800bff1 	.word	0x0800bff1
 800bfd4:	0800bff9 	.word	0x0800bff9
 800bfd8:	0800c00f 	.word	0x0800c00f
 800bfdc:	0800bfff 	.word	0x0800bfff
 800bfe0:	0800c00f 	.word	0x0800c00f
 800bfe4:	0800c00f 	.word	0x0800c00f
 800bfe8:	0800c00f 	.word	0x0800c00f
 800bfec:	0800c007 	.word	0x0800c007
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bff0:	f7fc fd82 	bl	8008af8 <HAL_RCC_GetPCLK2Freq>
 800bff4:	6178      	str	r0, [r7, #20]
        break;
 800bff6:	e00f      	b.n	800c018 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bff8:	4b24      	ldr	r3, [pc, #144]	; (800c08c <UART_SetConfig+0x418>)
 800bffa:	617b      	str	r3, [r7, #20]
        break;
 800bffc:	e00c      	b.n	800c018 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bffe:	f7fc fce7 	bl	80089d0 <HAL_RCC_GetSysClockFreq>
 800c002:	6178      	str	r0, [r7, #20]
        break;
 800c004:	e008      	b.n	800c018 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c00a:	617b      	str	r3, [r7, #20]
        break;
 800c00c:	e004      	b.n	800c018 <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 800c00e:	2300      	movs	r3, #0
 800c010:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c012:	2301      	movs	r3, #1
 800c014:	76bb      	strb	r3, [r7, #26]
        break;
 800c016:	bf00      	nop
    }

    if (pclk != 0U)
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d020      	beq.n	800c060 <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c022:	4a19      	ldr	r2, [pc, #100]	; (800c088 <UART_SetConfig+0x414>)
 800c024:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c028:	461a      	mov	r2, r3
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	fbb3 f2f2 	udiv	r2, r3, r2
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	085b      	lsrs	r3, r3, #1
 800c036:	441a      	add	r2, r3
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c040:	b29b      	uxth	r3, r3
 800c042:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	2b0f      	cmp	r3, #15
 800c048:	d908      	bls.n	800c05c <UART_SetConfig+0x3e8>
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c050:	d204      	bcs.n	800c05c <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	693a      	ldr	r2, [r7, #16]
 800c058:	60da      	str	r2, [r3, #12]
 800c05a:	e001      	b.n	800c060 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 800c05c:	2301      	movs	r3, #1
 800c05e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2201      	movs	r2, #1
 800c064:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2201      	movs	r2, #1
 800c06c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2200      	movs	r2, #0
 800c074:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2200      	movs	r2, #0
 800c07a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800c07c:	7ebb      	ldrb	r3, [r7, #26]
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3720      	adds	r7, #32
 800c082:	46bd      	mov	sp, r7
 800c084:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800c088:	08017d18 	.word	0x08017d18
 800c08c:	00f42400 	.word	0x00f42400

0800c090 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c090:	b480      	push	{r7}
 800c092:	b083      	sub	sp, #12
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c09c:	f003 0301 	and.w	r3, r3, #1
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d00a      	beq.n	800c0ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	430a      	orrs	r2, r1
 800c0b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0be:	f003 0302 	and.w	r3, r3, #2
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d00a      	beq.n	800c0dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	430a      	orrs	r2, r1
 800c0da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0e0:	f003 0304 	and.w	r3, r3, #4
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d00a      	beq.n	800c0fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	430a      	orrs	r2, r1
 800c0fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c102:	f003 0308 	and.w	r3, r3, #8
 800c106:	2b00      	cmp	r3, #0
 800c108:	d00a      	beq.n	800c120 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	430a      	orrs	r2, r1
 800c11e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c124:	f003 0310 	and.w	r3, r3, #16
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d00a      	beq.n	800c142 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	430a      	orrs	r2, r1
 800c140:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c146:	f003 0320 	and.w	r3, r3, #32
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d00a      	beq.n	800c164 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	689b      	ldr	r3, [r3, #8]
 800c154:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	430a      	orrs	r2, r1
 800c162:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d01a      	beq.n	800c1a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	430a      	orrs	r2, r1
 800c184:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c18a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c18e:	d10a      	bne.n	800c1a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	685b      	ldr	r3, [r3, #4]
 800c196:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	430a      	orrs	r2, r1
 800c1a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d00a      	beq.n	800c1c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	430a      	orrs	r2, r1
 800c1c6:	605a      	str	r2, [r3, #4]
  }
}
 800c1c8:	bf00      	nop
 800c1ca:	370c      	adds	r7, #12
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr

0800c1d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b086      	sub	sp, #24
 800c1d8:	af02      	add	r7, sp, #8
 800c1da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c1e4:	f7f9 fe9a 	bl	8005f1c <HAL_GetTick>
 800c1e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f003 0308 	and.w	r3, r3, #8
 800c1f4:	2b08      	cmp	r3, #8
 800c1f6:	d10e      	bne.n	800c216 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c1f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c1fc:	9300      	str	r3, [sp, #0]
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2200      	movs	r2, #0
 800c202:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 f82c 	bl	800c264 <UART_WaitOnFlagUntilTimeout>
 800c20c:	4603      	mov	r3, r0
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d001      	beq.n	800c216 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c212:	2303      	movs	r3, #3
 800c214:	e022      	b.n	800c25c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f003 0304 	and.w	r3, r3, #4
 800c220:	2b04      	cmp	r3, #4
 800c222:	d10e      	bne.n	800c242 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c224:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c228:	9300      	str	r3, [sp, #0]
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2200      	movs	r2, #0
 800c22e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 f816 	bl	800c264 <UART_WaitOnFlagUntilTimeout>
 800c238:	4603      	mov	r3, r0
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d001      	beq.n	800c242 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c23e:	2303      	movs	r3, #3
 800c240:	e00c      	b.n	800c25c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2220      	movs	r2, #32
 800c246:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2220      	movs	r2, #32
 800c24e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2200      	movs	r2, #0
 800c256:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c25a:	2300      	movs	r3, #0
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3710      	adds	r7, #16
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b084      	sub	sp, #16
 800c268:	af00      	add	r7, sp, #0
 800c26a:	60f8      	str	r0, [r7, #12]
 800c26c:	60b9      	str	r1, [r7, #8]
 800c26e:	603b      	str	r3, [r7, #0]
 800c270:	4613      	mov	r3, r2
 800c272:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c274:	e062      	b.n	800c33c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c276:	69bb      	ldr	r3, [r7, #24]
 800c278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c27c:	d05e      	beq.n	800c33c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c27e:	f7f9 fe4d 	bl	8005f1c <HAL_GetTick>
 800c282:	4602      	mov	r2, r0
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	1ad3      	subs	r3, r2, r3
 800c288:	69ba      	ldr	r2, [r7, #24]
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d302      	bcc.n	800c294 <UART_WaitOnFlagUntilTimeout+0x30>
 800c28e:	69bb      	ldr	r3, [r7, #24]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d11d      	bne.n	800c2d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	681a      	ldr	r2, [r3, #0]
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c2a2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	689a      	ldr	r2, [r3, #8]
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f022 0201 	bic.w	r2, r2, #1
 800c2b2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2220      	movs	r2, #32
 800c2b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2220      	movs	r2, #32
 800c2c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800c2cc:	2303      	movs	r3, #3
 800c2ce:	e045      	b.n	800c35c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f003 0304 	and.w	r3, r3, #4
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d02e      	beq.n	800c33c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	69db      	ldr	r3, [r3, #28]
 800c2e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c2e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2ec:	d126      	bne.n	800c33c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c2f6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	681a      	ldr	r2, [r3, #0]
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c306:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	689a      	ldr	r2, [r3, #8]
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f022 0201 	bic.w	r2, r2, #1
 800c316:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	2220      	movs	r2, #32
 800c31c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2220      	movs	r2, #32
 800c324:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2220      	movs	r2, #32
 800c32c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2200      	movs	r2, #0
 800c334:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800c338:	2303      	movs	r3, #3
 800c33a:	e00f      	b.n	800c35c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	69da      	ldr	r2, [r3, #28]
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	4013      	ands	r3, r2
 800c346:	68ba      	ldr	r2, [r7, #8]
 800c348:	429a      	cmp	r2, r3
 800c34a:	bf0c      	ite	eq
 800c34c:	2301      	moveq	r3, #1
 800c34e:	2300      	movne	r3, #0
 800c350:	b2db      	uxtb	r3, r3
 800c352:	461a      	mov	r2, r3
 800c354:	79fb      	ldrb	r3, [r7, #7]
 800c356:	429a      	cmp	r2, r3
 800c358:	d08d      	beq.n	800c276 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c35a:	2300      	movs	r3, #0
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3710      	adds	r7, #16
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c364:	b480      	push	{r7}
 800c366:	b083      	sub	sp, #12
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c37a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	689a      	ldr	r2, [r3, #8]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c38a:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2220      	movs	r2, #32
 800c390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800c394:	bf00      	nop
 800c396:	370c      	adds	r7, #12
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr

0800c3a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b083      	sub	sp, #12
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	681a      	ldr	r2, [r3, #0]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c3b6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	689b      	ldr	r3, [r3, #8]
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	6812      	ldr	r2, [r2, #0]
 800c3c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c3c6:	f023 0301 	bic.w	r3, r3, #1
 800c3ca:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2220      	movs	r2, #32
 800c3d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800c3da:	bf00      	nop
 800c3dc:	370c      	adds	r7, #12
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e4:	4770      	bx	lr

0800c3e6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b084      	sub	sp, #16
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3f2:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f003 0320 	and.w	r3, r3, #32
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d114      	bne.n	800c42c <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	2200      	movs	r2, #0
 800c406:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	689a      	ldr	r2, [r3, #8]
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c418:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	681a      	ldr	r2, [r3, #0]
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c428:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c42a:	e002      	b.n	800c432 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800c42c:	68f8      	ldr	r0, [r7, #12]
 800c42e:	f7f7 fbbf 	bl	8003bb0 <HAL_UART_TxCpltCallback>
}
 800c432:	bf00      	nop
 800c434:	3710      	adds	r7, #16
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c43a:	b580      	push	{r7, lr}
 800c43c:	b084      	sub	sp, #16
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c446:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c448:	68f8      	ldr	r0, [r7, #12]
 800c44a:	f7ff fbff 	bl	800bc4c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c44e:	bf00      	nop
 800c450:	3710      	adds	r7, #16
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}

0800c456 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c456:	b580      	push	{r7, lr}
 800c458:	b086      	sub	sp, #24
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c462:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c46a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c472:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	689b      	ldr	r3, [r3, #8]
 800c47a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c47e:	2b80      	cmp	r3, #128	; 0x80
 800c480:	d109      	bne.n	800c496 <UART_DMAError+0x40>
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	2b21      	cmp	r3, #33	; 0x21
 800c486:	d106      	bne.n	800c496 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	2200      	movs	r2, #0
 800c48c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c490:	6978      	ldr	r0, [r7, #20]
 800c492:	f7ff ff67 	bl	800c364 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	689b      	ldr	r3, [r3, #8]
 800c49c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4a0:	2b40      	cmp	r3, #64	; 0x40
 800c4a2:	d109      	bne.n	800c4b8 <UART_DMAError+0x62>
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	2b22      	cmp	r3, #34	; 0x22
 800c4a8:	d106      	bne.n	800c4b8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c4b2:	6978      	ldr	r0, [r7, #20]
 800c4b4:	f7ff ff74 	bl	800c3a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4be:	f043 0210 	orr.w	r2, r3, #16
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c4c8:	6978      	ldr	r0, [r7, #20]
 800c4ca:	f7ff fbc9 	bl	800bc60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4ce:	bf00      	nop
 800c4d0:	3718      	adds	r7, #24
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}

0800c4d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c4d6:	b580      	push	{r7, lr}
 800c4d8:	b084      	sub	sp, #16
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c4f4:	68f8      	ldr	r0, [r7, #12]
 800c4f6:	f7ff fbb3 	bl	800bc60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4fa:	bf00      	nop
 800c4fc:	3710      	adds	r7, #16
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b082      	sub	sp, #8
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	681a      	ldr	r2, [r3, #0]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c518:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2220      	movs	r2, #32
 800c51e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2200      	movs	r2, #0
 800c526:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f7f7 fb41 	bl	8003bb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c52e:	bf00      	nop
 800c530:	3708      	adds	r7, #8
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}

0800c536 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c536:	b480      	push	{r7}
 800c538:	b083      	sub	sp, #12
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c53e:	bf00      	nop
 800c540:	370c      	adds	r7, #12
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr

0800c54a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c54a:	b480      	push	{r7}
 800c54c:	b083      	sub	sp, #12
 800c54e:	af00      	add	r7, sp, #0
 800c550:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c552:	bf00      	nop
 800c554:	370c      	adds	r7, #12
 800c556:	46bd      	mov	sp, r7
 800c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55c:	4770      	bx	lr

0800c55e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c55e:	b480      	push	{r7}
 800c560:	b083      	sub	sp, #12
 800c562:	af00      	add	r7, sp, #0
 800c564:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c566:	bf00      	nop
 800c568:	370c      	adds	r7, #12
 800c56a:	46bd      	mov	sp, r7
 800c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c570:	4770      	bx	lr

0800c572 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c572:	b480      	push	{r7}
 800c574:	b085      	sub	sp, #20
 800c576:	af00      	add	r7, sp, #0
 800c578:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c580:	2b01      	cmp	r3, #1
 800c582:	d101      	bne.n	800c588 <HAL_UARTEx_DisableFifoMode+0x16>
 800c584:	2302      	movs	r3, #2
 800c586:	e027      	b.n	800c5d8 <HAL_UARTEx_DisableFifoMode+0x66>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2201      	movs	r2, #1
 800c58c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2224      	movs	r2, #36	; 0x24
 800c594:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	681a      	ldr	r2, [r3, #0]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f022 0201 	bic.w	r2, r2, #1
 800c5ae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c5b6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	68fa      	ldr	r2, [r7, #12]
 800c5c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2220      	movs	r2, #32
 800c5ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c5d6:	2300      	movs	r3, #0
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3714      	adds	r7, #20
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr

0800c5e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	d101      	bne.n	800c5fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c5f8:	2302      	movs	r3, #2
 800c5fa:	e02d      	b.n	800c658 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2201      	movs	r2, #1
 800c600:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2224      	movs	r2, #36	; 0x24
 800c608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f022 0201 	bic.w	r2, r2, #1
 800c622:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	683a      	ldr	r2, [r7, #0]
 800c634:	430a      	orrs	r2, r1
 800c636:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f000 f84f 	bl	800c6dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	68fa      	ldr	r2, [r7, #12]
 800c644:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2220      	movs	r2, #32
 800c64a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2200      	movs	r2, #0
 800c652:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c656:	2300      	movs	r3, #0
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3710      	adds	r7, #16
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b084      	sub	sp, #16
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c670:	2b01      	cmp	r3, #1
 800c672:	d101      	bne.n	800c678 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c674:	2302      	movs	r3, #2
 800c676:	e02d      	b.n	800c6d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2201      	movs	r2, #1
 800c67c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2224      	movs	r2, #36	; 0x24
 800c684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f022 0201 	bic.w	r2, r2, #1
 800c69e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	689b      	ldr	r3, [r3, #8]
 800c6a6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	683a      	ldr	r2, [r7, #0]
 800c6b0:	430a      	orrs	r2, r1
 800c6b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f000 f811 	bl	800c6dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	68fa      	ldr	r2, [r7, #12]
 800c6c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2220      	movs	r2, #32
 800c6c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c6d2:	2300      	movs	r3, #0
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3710      	adds	r7, #16
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b089      	sub	sp, #36	; 0x24
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800c6e4:	4a2f      	ldr	r2, [pc, #188]	; (800c7a4 <UARTEx_SetNbDataToProcess+0xc8>)
 800c6e6:	f107 0314 	add.w	r3, r7, #20
 800c6ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c6ee:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800c6f2:	4a2d      	ldr	r2, [pc, #180]	; (800c7a8 <UARTEx_SetNbDataToProcess+0xcc>)
 800c6f4:	f107 030c 	add.w	r3, r7, #12
 800c6f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c6fc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c704:	2b00      	cmp	r3, #0
 800c706:	d108      	bne.n	800c71a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2201      	movs	r2, #1
 800c70c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2201      	movs	r2, #1
 800c714:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c718:	e03d      	b.n	800c796 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c71a:	2308      	movs	r3, #8
 800c71c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c71e:	2308      	movs	r3, #8
 800c720:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	689b      	ldr	r3, [r3, #8]
 800c728:	0e5b      	lsrs	r3, r3, #25
 800c72a:	b2db      	uxtb	r3, r3
 800c72c:	f003 0307 	and.w	r3, r3, #7
 800c730:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	689b      	ldr	r3, [r3, #8]
 800c738:	0f5b      	lsrs	r3, r3, #29
 800c73a:	b2db      	uxtb	r3, r3
 800c73c:	f003 0307 	and.w	r3, r3, #7
 800c740:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800c742:	7fbb      	ldrb	r3, [r7, #30]
 800c744:	7f3a      	ldrb	r2, [r7, #28]
 800c746:	f107 0120 	add.w	r1, r7, #32
 800c74a:	440a      	add	r2, r1
 800c74c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c750:	fb02 f303 	mul.w	r3, r2, r3
 800c754:	7f3a      	ldrb	r2, [r7, #28]
 800c756:	f107 0120 	add.w	r1, r7, #32
 800c75a:	440a      	add	r2, r1
 800c75c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c760:	fb93 f3f2 	sdiv	r3, r3, r2
 800c764:	b29a      	uxth	r2, r3
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c76c:	7ffb      	ldrb	r3, [r7, #31]
 800c76e:	7f7a      	ldrb	r2, [r7, #29]
 800c770:	f107 0120 	add.w	r1, r7, #32
 800c774:	440a      	add	r2, r1
 800c776:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c77a:	fb02 f303 	mul.w	r3, r2, r3
 800c77e:	7f7a      	ldrb	r2, [r7, #29]
 800c780:	f107 0120 	add.w	r1, r7, #32
 800c784:	440a      	add	r2, r1
 800c786:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c78a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c78e:	b29a      	uxth	r2, r3
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c796:	bf00      	nop
 800c798:	3724      	adds	r7, #36	; 0x24
 800c79a:	46bd      	mov	sp, r7
 800c79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a0:	4770      	bx	lr
 800c7a2:	bf00      	nop
 800c7a4:	080168b0 	.word	0x080168b0
 800c7a8:	080168b8 	.word	0x080168b8

0800c7ac <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	af00      	add	r7, sp, #0
  return;
 800c7b0:	bf00      	nop
}
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b8:	4770      	bx	lr

0800c7ba <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800c7ba:	b480      	push	{r7}
 800c7bc:	af00      	add	r7, sp, #0
  return;
 800c7be:	bf00      	nop
}
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c6:	4770      	bx	lr

0800c7c8 <EDS_STM_Init>:
__weak void DIS_Init( void )
{
  return;
}
__weak void EDS_STM_Init( void )
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	af00      	add	r7, sp, #0
  return;
 800c7cc:	bf00      	nop
}
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d4:	4770      	bx	lr

0800c7d6 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800c7d6:	b480      	push	{r7}
 800c7d8:	af00      	add	r7, sp, #0
  return;
 800c7da:	bf00      	nop
}
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr

0800c7e4 <HTS_Init>:
__weak void HRS_Init( void )
{
  return;
}
__weak void HTS_Init( void )
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	af00      	add	r7, sp, #0
  return;
 800c7e8:	bf00      	nop
}
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr

0800c7f2 <IAS_Init>:
__weak void IAS_Init( void )
{
 800c7f2:	b480      	push	{r7}
 800c7f4:	af00      	add	r7, sp, #0
  return;
 800c7f6:	bf00      	nop
}
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr

0800c800 <LLS_Init>:
__weak void LLS_Init( void )
{
 800c800:	b480      	push	{r7}
 800c802:	af00      	add	r7, sp, #0
  return;
 800c804:	bf00      	nop
}
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr

0800c80e <TPS_Init>:
__weak void TPS_Init( void )
{
 800c80e:	b480      	push	{r7}
 800c810:	af00      	add	r7, sp, #0
  return;
 800c812:	bf00      	nop
}
 800c814:	46bd      	mov	sp, r7
 800c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81a:	4770      	bx	lr

0800c81c <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800c81c:	b480      	push	{r7}
 800c81e:	af00      	add	r7, sp, #0
  return;
 800c820:	bf00      	nop
}
 800c822:	46bd      	mov	sp, r7
 800c824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c828:	4770      	bx	lr

0800c82a <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800c82a:	b480      	push	{r7}
 800c82c:	af00      	add	r7, sp, #0
  return;
 800c82e:	bf00      	nop
}
 800c830:	46bd      	mov	sp, r7
 800c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c836:	4770      	bx	lr

0800c838 <MESH_Init>:
__weak void MESH_Init( void )
{
 800c838:	b480      	push	{r7}
 800c83a:	af00      	add	r7, sp, #0
  return;
 800c83c:	bf00      	nop
}
 800c83e:	46bd      	mov	sp, r7
 800c840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c844:	4770      	bx	lr

0800c846 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800c846:	b480      	push	{r7}
 800c848:	af00      	add	r7, sp, #0
  return;
 800c84a:	bf00      	nop
}
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr

0800c854 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 800c854:	b480      	push	{r7}
 800c856:	af00      	add	r7, sp, #0
  return;
 800c858:	bf00      	nop
}
 800c85a:	46bd      	mov	sp, r7
 800c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c860:	4770      	bx	lr
	...

0800c864 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800c864:	b580      	push	{r7, lr}
 800c866:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800c868:	4b04      	ldr	r3, [pc, #16]	; (800c87c <SVCCTL_Init+0x18>)
 800c86a:	2200      	movs	r2, #0
 800c86c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800c86e:	4b04      	ldr	r3, [pc, #16]	; (800c880 <SVCCTL_Init+0x1c>)
 800c870:	2200      	movs	r2, #0
 800c872:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800c874:	f000 f806 	bl	800c884 <SVCCTL_SvcInit>

  return;
 800c878:	bf00      	nop
}
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	2000032c 	.word	0x2000032c
 800c880:	2000034c 	.word	0x2000034c

0800c884 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	af00      	add	r7, sp, #0
  BLS_Init();
 800c888:	f7ff ff90 	bl	800c7ac <BLS_Init>

  CRS_STM_Init();
 800c88c:	f7ff ff95 	bl	800c7ba <CRS_STM_Init>

  //DIS_Init();

  EDS_STM_Init();
 800c890:	f7ff ff9a 	bl	800c7c8 <EDS_STM_Init>

  HIDS_Init();
 800c894:	f7ff ff9f 	bl	800c7d6 <HIDS_Init>

  //HRS_Init();

  HTS_Init();
 800c898:	f7ff ffa4 	bl	800c7e4 <HTS_Init>

  IAS_Init();
 800c89c:	f7ff ffa9 	bl	800c7f2 <IAS_Init>

  LLS_Init();
 800c8a0:	f7ff ffae 	bl	800c800 <LLS_Init>

  TPS_Init();
 800c8a4:	f7ff ffb3 	bl	800c80e <TPS_Init>

  MOTENV_STM_Init();
 800c8a8:	f7ff ffb8 	bl	800c81c <MOTENV_STM_Init>

  P2PS_STM_Init();
 800c8ac:	f001 fdd4 	bl	800e458 <P2PS_STM_Init>

  OTAS_STM_Init();
 800c8b0:	f7ff ffbb 	bl	800c82a <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800c8b4:	f7ff ffc7 	bl	800c846 <BVOPUS_STM_Init>

  MESH_Init();
 800c8b8:	f7ff ffbe 	bl	800c838 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800c8bc:	f7ff ffca 	bl	800c854 <SVCCTL_InitCustomSvc>
  
  return;
 800c8c0:	bf00      	nop
}
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b083      	sub	sp, #12
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800c8cc:	4b09      	ldr	r3, [pc, #36]	; (800c8f4 <SVCCTL_RegisterSvcHandler+0x30>)
 800c8ce:	7f1b      	ldrb	r3, [r3, #28]
 800c8d0:	4619      	mov	r1, r3
 800c8d2:	4a08      	ldr	r2, [pc, #32]	; (800c8f4 <SVCCTL_RegisterSvcHandler+0x30>)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800c8da:	4b06      	ldr	r3, [pc, #24]	; (800c8f4 <SVCCTL_RegisterSvcHandler+0x30>)
 800c8dc:	7f1b      	ldrb	r3, [r3, #28]
 800c8de:	3301      	adds	r3, #1
 800c8e0:	b2da      	uxtb	r2, r3
 800c8e2:	4b04      	ldr	r3, [pc, #16]	; (800c8f4 <SVCCTL_RegisterSvcHandler+0x30>)
 800c8e4:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800c8e6:	bf00      	nop
}
 800c8e8:	370c      	adds	r7, #12
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f0:	4770      	bx	lr
 800c8f2:	bf00      	nop
 800c8f4:	2000032c 	.word	0x2000032c

0800c8f8 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b086      	sub	sp, #24
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	3301      	adds	r3, #1
 800c904:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800c906:	2300      	movs	r3, #0
 800c908:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	2bff      	cmp	r3, #255	; 0xff
 800c910:	d000      	beq.n	800c914 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800c912:	e025      	b.n	800c960 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	3302      	adds	r3, #2
 800c918:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	881b      	ldrh	r3, [r3, #0]
 800c91e:	b29b      	uxth	r3, r3
 800c920:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c924:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c928:	d000      	beq.n	800c92c <SVCCTL_UserEvtRx+0x34>
          break;
 800c92a:	e018      	b.n	800c95e <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800c92c:	2300      	movs	r3, #0
 800c92e:	757b      	strb	r3, [r7, #21]
 800c930:	e00d      	b.n	800c94e <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800c932:	7d7b      	ldrb	r3, [r7, #21]
 800c934:	4a18      	ldr	r2, [pc, #96]	; (800c998 <SVCCTL_UserEvtRx+0xa0>)
 800c936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	4798      	blx	r3
 800c93e:	4603      	mov	r3, r0
 800c940:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800c942:	7dfb      	ldrb	r3, [r7, #23]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d108      	bne.n	800c95a <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800c948:	7d7b      	ldrb	r3, [r7, #21]
 800c94a:	3301      	adds	r3, #1
 800c94c:	757b      	strb	r3, [r7, #21]
 800c94e:	4b12      	ldr	r3, [pc, #72]	; (800c998 <SVCCTL_UserEvtRx+0xa0>)
 800c950:	7f1b      	ldrb	r3, [r3, #28]
 800c952:	7d7a      	ldrb	r2, [r7, #21]
 800c954:	429a      	cmp	r2, r3
 800c956:	d3ec      	bcc.n	800c932 <SVCCTL_UserEvtRx+0x3a>
          break;
 800c958:	e000      	b.n	800c95c <SVCCTL_UserEvtRx+0x64>
              break;
 800c95a:	bf00      	nop
          break;
 800c95c:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800c95e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800c960:	7dfb      	ldrb	r3, [r7, #23]
 800c962:	2b01      	cmp	r3, #1
 800c964:	d009      	beq.n	800c97a <SVCCTL_UserEvtRx+0x82>
 800c966:	2b02      	cmp	r3, #2
 800c968:	d00a      	beq.n	800c980 <SVCCTL_UserEvtRx+0x88>
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d10b      	bne.n	800c986 <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f7f4 fb0c 	bl	8000f8c <SVCCTL_App_Notification>
 800c974:	4603      	mov	r3, r0
 800c976:	75bb      	strb	r3, [r7, #22]
      break;
 800c978:	e008      	b.n	800c98c <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800c97a:	2301      	movs	r3, #1
 800c97c:	75bb      	strb	r3, [r7, #22]
      break;
 800c97e:	e005      	b.n	800c98c <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800c980:	2300      	movs	r3, #0
 800c982:	75bb      	strb	r3, [r7, #22]
      break;
 800c984:	e002      	b.n	800c98c <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800c986:	2301      	movs	r3, #1
 800c988:	75bb      	strb	r3, [r7, #22]
      break;
 800c98a:	bf00      	nop
  }

  return (return_status);
 800c98c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3718      	adds	r7, #24
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop
 800c998:	2000032c 	.word	0x2000032c

0800c99c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b088      	sub	sp, #32
 800c9a0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c9a6:	f107 0308 	add.w	r3, r7, #8
 800c9aa:	2218      	movs	r2, #24
 800c9ac:	2100      	movs	r1, #0
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f000 ff9c 	bl	800d8ec <Osal_MemSet>
  rq.ogf = 0x3f;
 800c9b4:	233f      	movs	r3, #63	; 0x3f
 800c9b6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800c9b8:	2381      	movs	r3, #129	; 0x81
 800c9ba:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c9bc:	1dfb      	adds	r3, r7, #7
 800c9be:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c9c4:	f107 0308 	add.w	r3, r7, #8
 800c9c8:	2100      	movs	r1, #0
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f001 f836 	bl	800da3c <hci_send_req>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	da01      	bge.n	800c9da <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800c9d6:	23ff      	movs	r3, #255	; 0xff
 800c9d8:	e000      	b.n	800c9dc <aci_gap_set_non_discoverable+0x40>
  return status;
 800c9da:	79fb      	ldrb	r3, [r7, #7]
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3720      	adds	r7, #32
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800c9e4:	b5b0      	push	{r4, r5, r7, lr}
 800c9e6:	b0ce      	sub	sp, #312	; 0x138
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	4605      	mov	r5, r0
 800c9ec:	460c      	mov	r4, r1
 800c9ee:	4610      	mov	r0, r2
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	1dfb      	adds	r3, r7, #7
 800c9f4:	462a      	mov	r2, r5
 800c9f6:	701a      	strb	r2, [r3, #0]
 800c9f8:	1d3b      	adds	r3, r7, #4
 800c9fa:	4622      	mov	r2, r4
 800c9fc:	801a      	strh	r2, [r3, #0]
 800c9fe:	1cbb      	adds	r3, r7, #2
 800ca00:	4602      	mov	r2, r0
 800ca02:	801a      	strh	r2, [r3, #0]
 800ca04:	1dbb      	adds	r3, r7, #6
 800ca06:	460a      	mov	r2, r1
 800ca08:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800ca0a:	f107 0310 	add.w	r3, r7, #16
 800ca0e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800ca12:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800ca16:	3308      	adds	r3, #8
 800ca18:	f107 0210 	add.w	r2, r7, #16
 800ca1c:	4413      	add	r3, r2
 800ca1e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800ca22:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800ca26:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800ca2a:	4413      	add	r3, r2
 800ca2c:	3309      	adds	r3, #9
 800ca2e:	f107 0210 	add.w	r2, r7, #16
 800ca32:	4413      	add	r3, r2
 800ca34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ca38:	f107 030f 	add.w	r3, r7, #15
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ca40:	2300      	movs	r3, #0
 800ca42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800ca46:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ca4a:	1dfa      	adds	r2, r7, #7
 800ca4c:	7812      	ldrb	r2, [r2, #0]
 800ca4e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ca50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca54:	3301      	adds	r3, #1
 800ca56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800ca5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ca5e:	1d3a      	adds	r2, r7, #4
 800ca60:	8812      	ldrh	r2, [r2, #0]
 800ca62:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800ca66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca6a:	3302      	adds	r3, #2
 800ca6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800ca70:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ca74:	1cba      	adds	r2, r7, #2
 800ca76:	8812      	ldrh	r2, [r2, #0]
 800ca78:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800ca7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca80:	3302      	adds	r3, #2
 800ca82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800ca86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ca8a:	1dba      	adds	r2, r7, #6
 800ca8c:	7812      	ldrb	r2, [r2, #0]
 800ca8e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ca90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca94:	3301      	adds	r3, #1
 800ca96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800ca9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ca9e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800caa2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800caa4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800caa8:	3301      	adds	r3, #1
 800caaa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800caae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cab2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800cab6:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800cab8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cabc:	3301      	adds	r3, #1
 800cabe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800cac2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cac6:	3308      	adds	r3, #8
 800cac8:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800cacc:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800cad0:	4618      	mov	r0, r3
 800cad2:	f000 fefb 	bl	800d8cc <Osal_MemCpy>
    index_input += Local_Name_Length;
 800cad6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800cada:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800cade:	4413      	add	r3, r2
 800cae0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800cae4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cae8:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800caec:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800caee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800caf2:	3301      	adds	r3, #1
 800caf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800caf8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cafc:	3301      	adds	r3, #1
 800cafe:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800cb02:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800cb06:	4618      	mov	r0, r3
 800cb08:	f000 fee0 	bl	800d8cc <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800cb0c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800cb10:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800cb14:	4413      	add	r3, r2
 800cb16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800cb1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb1e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800cb22:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800cb24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb28:	3302      	adds	r3, #2
 800cb2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800cb2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb32:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800cb36:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800cb38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb3c:	3302      	adds	r3, #2
 800cb3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cb42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cb46:	2218      	movs	r2, #24
 800cb48:	2100      	movs	r1, #0
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f000 fece 	bl	800d8ec <Osal_MemSet>
  rq.ogf = 0x3f;
 800cb50:	233f      	movs	r3, #63	; 0x3f
 800cb52:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800cb56:	2383      	movs	r3, #131	; 0x83
 800cb58:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800cb5c:	f107 0310 	add.w	r3, r7, #16
 800cb60:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cb64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800cb6c:	f107 030f 	add.w	r3, r7, #15
 800cb70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800cb74:	2301      	movs	r3, #1
 800cb76:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cb7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cb7e:	2100      	movs	r1, #0
 800cb80:	4618      	mov	r0, r3
 800cb82:	f000 ff5b 	bl	800da3c <hci_send_req>
 800cb86:	4603      	mov	r3, r0
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	da01      	bge.n	800cb90 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 800cb8c:	23ff      	movs	r3, #255	; 0xff
 800cb8e:	e002      	b.n	800cb96 <aci_gap_set_discoverable+0x1b2>
  return status;
 800cb90:	f107 030f 	add.w	r3, r7, #15
 800cb94:	781b      	ldrb	r3, [r3, #0]
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bdb0      	pop	{r4, r5, r7, pc}

0800cba0 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b0cc      	sub	sp, #304	; 0x130
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	4602      	mov	r2, r0
 800cba8:	1dfb      	adds	r3, r7, #7
 800cbaa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800cbac:	f107 0310 	add.w	r3, r7, #16
 800cbb0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800cbb4:	f107 030f 	add.w	r3, r7, #15
 800cbb8:	2200      	movs	r2, #0
 800cbba:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800cbc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cbc6:	1dfa      	adds	r2, r7, #7
 800cbc8:	7812      	ldrb	r2, [r2, #0]
 800cbca:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cbcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cbd6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cbda:	2218      	movs	r2, #24
 800cbdc:	2100      	movs	r1, #0
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f000 fe84 	bl	800d8ec <Osal_MemSet>
  rq.ogf = 0x3f;
 800cbe4:	233f      	movs	r3, #63	; 0x3f
 800cbe6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800cbea:	2385      	movs	r3, #133	; 0x85
 800cbec:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800cbf0:	f107 0310 	add.w	r3, r7, #16
 800cbf4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cbf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cbfc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800cc00:	f107 030f 	add.w	r3, r7, #15
 800cc04:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cc0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cc12:	2100      	movs	r1, #0
 800cc14:	4618      	mov	r0, r3
 800cc16:	f000 ff11 	bl	800da3c <hci_send_req>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	da01      	bge.n	800cc24 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800cc20:	23ff      	movs	r3, #255	; 0xff
 800cc22:	e002      	b.n	800cc2a <aci_gap_set_io_capability+0x8a>
  return status;
 800cc24:	f107 030f 	add.w	r3, r7, #15
 800cc28:	781b      	ldrb	r3, [r3, #0]
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}

0800cc34 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800cc34:	b5b0      	push	{r4, r5, r7, lr}
 800cc36:	b0cc      	sub	sp, #304	; 0x130
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	4605      	mov	r5, r0
 800cc3c:	460c      	mov	r4, r1
 800cc3e:	4610      	mov	r0, r2
 800cc40:	4619      	mov	r1, r3
 800cc42:	1dfb      	adds	r3, r7, #7
 800cc44:	462a      	mov	r2, r5
 800cc46:	701a      	strb	r2, [r3, #0]
 800cc48:	1dbb      	adds	r3, r7, #6
 800cc4a:	4622      	mov	r2, r4
 800cc4c:	701a      	strb	r2, [r3, #0]
 800cc4e:	1d7b      	adds	r3, r7, #5
 800cc50:	4602      	mov	r2, r0
 800cc52:	701a      	strb	r2, [r3, #0]
 800cc54:	1d3b      	adds	r3, r7, #4
 800cc56:	460a      	mov	r2, r1
 800cc58:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800cc5a:	f107 0310 	add.w	r3, r7, #16
 800cc5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800cc62:	f107 030f 	add.w	r3, r7, #15
 800cc66:	2200      	movs	r2, #0
 800cc68:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800cc70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cc74:	1dfa      	adds	r2, r7, #7
 800cc76:	7812      	ldrb	r2, [r2, #0]
 800cc78:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cc7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cc7e:	3301      	adds	r3, #1
 800cc80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800cc84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cc88:	1dba      	adds	r2, r7, #6
 800cc8a:	7812      	ldrb	r2, [r2, #0]
 800cc8c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800cc8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cc92:	3301      	adds	r3, #1
 800cc94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800cc98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cc9c:	1d7a      	adds	r2, r7, #5
 800cc9e:	7812      	ldrb	r2, [r2, #0]
 800cca0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800cca2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cca6:	3301      	adds	r3, #1
 800cca8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800ccac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ccb0:	1d3a      	adds	r2, r7, #4
 800ccb2:	7812      	ldrb	r2, [r2, #0]
 800ccb4:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800ccb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ccba:	3301      	adds	r3, #1
 800ccbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800ccc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ccc4:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800ccc8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800ccca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ccce:	3301      	adds	r3, #1
 800ccd0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800ccd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ccd8:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800ccdc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ccde:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cce2:	3301      	adds	r3, #1
 800cce4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800cce8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ccec:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800ccf0:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800ccf2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800ccfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cd00:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800cd04:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800cd08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cd0c:	3304      	adds	r3, #4
 800cd0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800cd12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cd16:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800cd1a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800cd1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cd20:	3301      	adds	r3, #1
 800cd22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cd26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cd2a:	2218      	movs	r2, #24
 800cd2c:	2100      	movs	r1, #0
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f000 fddc 	bl	800d8ec <Osal_MemSet>
  rq.ogf = 0x3f;
 800cd34:	233f      	movs	r3, #63	; 0x3f
 800cd36:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800cd3a:	2386      	movs	r3, #134	; 0x86
 800cd3c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800cd40:	f107 0310 	add.w	r3, r7, #16
 800cd44:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cd48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cd4c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800cd50:	f107 030f 	add.w	r3, r7, #15
 800cd54:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800cd58:	2301      	movs	r3, #1
 800cd5a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cd5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cd62:	2100      	movs	r1, #0
 800cd64:	4618      	mov	r0, r3
 800cd66:	f000 fe69 	bl	800da3c <hci_send_req>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	da01      	bge.n	800cd74 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800cd70:	23ff      	movs	r3, #255	; 0xff
 800cd72:	e002      	b.n	800cd7a <aci_gap_set_authentication_requirement+0x146>
  return status;
 800cd74:	f107 030f 	add.w	r3, r7, #15
 800cd78:	781b      	ldrb	r3, [r3, #0]
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bdb0      	pop	{r4, r5, r7, pc}

0800cd84 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800cd84:	b590      	push	{r4, r7, lr}
 800cd86:	b0cd      	sub	sp, #308	; 0x134
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	4604      	mov	r4, r0
 800cd8c:	4608      	mov	r0, r1
 800cd8e:	4611      	mov	r1, r2
 800cd90:	463a      	mov	r2, r7
 800cd92:	6013      	str	r3, [r2, #0]
 800cd94:	1dfb      	adds	r3, r7, #7
 800cd96:	4622      	mov	r2, r4
 800cd98:	701a      	strb	r2, [r3, #0]
 800cd9a:	1dbb      	adds	r3, r7, #6
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	701a      	strb	r2, [r3, #0]
 800cda0:	1d7b      	adds	r3, r7, #5
 800cda2:	460a      	mov	r2, r1
 800cda4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800cda6:	f107 0310 	add.w	r3, r7, #16
 800cdaa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800cdae:	f107 0308 	add.w	r3, r7, #8
 800cdb2:	2207      	movs	r2, #7
 800cdb4:	2100      	movs	r1, #0
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f000 fd98 	bl	800d8ec <Osal_MemSet>
  int index_input = 0;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800cdc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cdc6:	1dfa      	adds	r2, r7, #7
 800cdc8:	7812      	ldrb	r2, [r2, #0]
 800cdca:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cdcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800cdd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cdda:	1dba      	adds	r2, r7, #6
 800cddc:	7812      	ldrb	r2, [r2, #0]
 800cdde:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800cde0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cde4:	3301      	adds	r3, #1
 800cde6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800cdea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cdee:	1d7a      	adds	r2, r7, #5
 800cdf0:	7812      	ldrb	r2, [r2, #0]
 800cdf2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800cdf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cdf8:	3301      	adds	r3, #1
 800cdfa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cdfe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ce02:	2218      	movs	r2, #24
 800ce04:	2100      	movs	r1, #0
 800ce06:	4618      	mov	r0, r3
 800ce08:	f000 fd70 	bl	800d8ec <Osal_MemSet>
  rq.ogf = 0x3f;
 800ce0c:	233f      	movs	r3, #63	; 0x3f
 800ce0e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800ce12:	238a      	movs	r3, #138	; 0x8a
 800ce14:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ce18:	f107 0310 	add.w	r3, r7, #16
 800ce1c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ce20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ce24:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800ce28:	f107 0308 	add.w	r3, r7, #8
 800ce2c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800ce30:	2307      	movs	r3, #7
 800ce32:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ce36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ce3a:	2100      	movs	r1, #0
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f000 fdfd 	bl	800da3c <hci_send_req>
 800ce42:	4603      	mov	r3, r0
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	da01      	bge.n	800ce4c <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 800ce48:	23ff      	movs	r3, #255	; 0xff
 800ce4a:	e021      	b.n	800ce90 <aci_gap_init+0x10c>
  if ( resp.Status )
 800ce4c:	f107 0308 	add.w	r3, r7, #8
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d003      	beq.n	800ce5e <aci_gap_init+0xda>
    return resp.Status;
 800ce56:	f107 0308 	add.w	r3, r7, #8
 800ce5a:	781b      	ldrb	r3, [r3, #0]
 800ce5c:	e018      	b.n	800ce90 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 800ce5e:	f107 0308 	add.w	r3, r7, #8
 800ce62:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ce66:	b29a      	uxth	r2, r3
 800ce68:	463b      	mov	r3, r7
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800ce6e:	f107 0308 	add.w	r3, r7, #8
 800ce72:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800ce76:	b29a      	uxth	r2, r3
 800ce78:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800ce7c:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800ce7e:	f107 0308 	add.w	r3, r7, #8
 800ce82:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800ce86:	b29a      	uxth	r2, r3
 800ce88:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800ce8c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ce8e:	2300      	movs	r3, #0
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd90      	pop	{r4, r7, pc}

0800ce9a <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800ce9a:	b580      	push	{r7, lr}
 800ce9c:	b0cc      	sub	sp, #304	; 0x130
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	4602      	mov	r2, r0
 800cea2:	463b      	mov	r3, r7
 800cea4:	6019      	str	r1, [r3, #0]
 800cea6:	1dfb      	adds	r3, r7, #7
 800cea8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800ceaa:	f107 0310 	add.w	r3, r7, #16
 800ceae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ceb2:	f107 030f 	add.w	r3, r7, #15
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ceba:	2300      	movs	r3, #0
 800cebc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800cec0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cec4:	1dfa      	adds	r2, r7, #7
 800cec6:	7812      	ldrb	r2, [r2, #0]
 800cec8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ceca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cece:	3301      	adds	r3, #1
 800ced0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800ced4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ced8:	1c58      	adds	r0, r3, #1
 800ceda:	1dfb      	adds	r3, r7, #7
 800cedc:	781a      	ldrb	r2, [r3, #0]
 800cede:	463b      	mov	r3, r7
 800cee0:	6819      	ldr	r1, [r3, #0]
 800cee2:	f000 fcf3 	bl	800d8cc <Osal_MemCpy>
  index_input += AdvDataLen;
 800cee6:	1dfb      	adds	r3, r7, #7
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ceee:	4413      	add	r3, r2
 800cef0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cef4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cef8:	2218      	movs	r2, #24
 800cefa:	2100      	movs	r1, #0
 800cefc:	4618      	mov	r0, r3
 800cefe:	f000 fcf5 	bl	800d8ec <Osal_MemSet>
  rq.ogf = 0x3f;
 800cf02:	233f      	movs	r3, #63	; 0x3f
 800cf04:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800cf08:	238e      	movs	r3, #142	; 0x8e
 800cf0a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800cf0e:	f107 0310 	add.w	r3, r7, #16
 800cf12:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cf16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cf1a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800cf1e:	f107 030f 	add.w	r3, r7, #15
 800cf22:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800cf26:	2301      	movs	r3, #1
 800cf28:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cf2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cf30:	2100      	movs	r1, #0
 800cf32:	4618      	mov	r0, r3
 800cf34:	f000 fd82 	bl	800da3c <hci_send_req>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	da01      	bge.n	800cf42 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 800cf3e:	23ff      	movs	r3, #255	; 0xff
 800cf40:	e002      	b.n	800cf48 <aci_gap_update_adv_data+0xae>
  return status;
 800cf42:	f107 030f 	add.w	r3, r7, #15
 800cf46:	781b      	ldrb	r3, [r3, #0]
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}

0800cf52 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800cf52:	b580      	push	{r7, lr}
 800cf54:	b088      	sub	sp, #32
 800cf56:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cf5c:	f107 0308 	add.w	r3, r7, #8
 800cf60:	2218      	movs	r2, #24
 800cf62:	2100      	movs	r1, #0
 800cf64:	4618      	mov	r0, r3
 800cf66:	f000 fcc1 	bl	800d8ec <Osal_MemSet>
  rq.ogf = 0x3f;
 800cf6a:	233f      	movs	r3, #63	; 0x3f
 800cf6c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800cf6e:	2392      	movs	r3, #146	; 0x92
 800cf70:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800cf72:	1dfb      	adds	r3, r7, #7
 800cf74:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800cf76:	2301      	movs	r3, #1
 800cf78:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cf7a:	f107 0308 	add.w	r3, r7, #8
 800cf7e:	2100      	movs	r1, #0
 800cf80:	4618      	mov	r0, r3
 800cf82:	f000 fd5b 	bl	800da3c <hci_send_req>
 800cf86:	4603      	mov	r3, r0
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	da01      	bge.n	800cf90 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800cf8c:	23ff      	movs	r3, #255	; 0xff
 800cf8e:	e000      	b.n	800cf92 <aci_gap_configure_whitelist+0x40>
  return status;
 800cf90:	79fb      	ldrb	r3, [r7, #7]
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3720      	adds	r7, #32
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}

0800cf9a <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 800cf9a:	b580      	push	{r7, lr}
 800cf9c:	b0cc      	sub	sp, #304	; 0x130
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	4602      	mov	r2, r0
 800cfa2:	1dbb      	adds	r3, r7, #6
 800cfa4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 800cfa6:	f107 0310 	add.w	r3, r7, #16
 800cfaa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800cfae:	f107 030f 	add.w	r3, r7, #15
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800cfbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cfc0:	1dba      	adds	r2, r7, #6
 800cfc2:	8812      	ldrh	r2, [r2, #0]
 800cfc4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800cfc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cfca:	3302      	adds	r3, #2
 800cfcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cfd0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cfd4:	2218      	movs	r2, #24
 800cfd6:	2100      	movs	r1, #0
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f000 fc87 	bl	800d8ec <Osal_MemSet>
  rq.ogf = 0x3f;
 800cfde:	233f      	movs	r3, #63	; 0x3f
 800cfe0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 800cfe4:	2395      	movs	r3, #149	; 0x95
 800cfe6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800cfea:	f107 0310 	add.w	r3, r7, #16
 800cfee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cff2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cff6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800cffa:	f107 030f 	add.w	r3, r7, #15
 800cffe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d002:	2301      	movs	r3, #1
 800d004:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d008:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d00c:	2100      	movs	r1, #0
 800d00e:	4618      	mov	r0, r3
 800d010:	f000 fd14 	bl	800da3c <hci_send_req>
 800d014:	4603      	mov	r3, r0
 800d016:	2b00      	cmp	r3, #0
 800d018:	da01      	bge.n	800d01e <aci_gap_allow_rebond+0x84>
    return BLE_STATUS_TIMEOUT;
 800d01a:	23ff      	movs	r3, #255	; 0xff
 800d01c:	e002      	b.n	800d024 <aci_gap_allow_rebond+0x8a>
  return status;
 800d01e:	f107 030f 	add.w	r3, r7, #15
 800d022:	781b      	ldrb	r3, [r3, #0]
}
 800d024:	4618      	mov	r0, r3
 800d026:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}

0800d02e <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800d02e:	b580      	push	{r7, lr}
 800d030:	b0cc      	sub	sp, #304	; 0x130
 800d032:	af00      	add	r7, sp, #0
 800d034:	4602      	mov	r2, r0
 800d036:	1dbb      	adds	r3, r7, #6
 800d038:	801a      	strh	r2, [r3, #0]
 800d03a:	1d7b      	adds	r3, r7, #5
 800d03c:	460a      	mov	r2, r1
 800d03e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800d040:	f107 0310 	add.w	r3, r7, #16
 800d044:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d048:	f107 030f 	add.w	r3, r7, #15
 800d04c:	2200      	movs	r2, #0
 800d04e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d050:	2300      	movs	r3, #0
 800d052:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d056:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d05a:	1dba      	adds	r2, r7, #6
 800d05c:	8812      	ldrh	r2, [r2, #0]
 800d05e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d060:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d064:	3302      	adds	r3, #2
 800d066:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800d06a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d06e:	1d7a      	adds	r2, r7, #5
 800d070:	7812      	ldrb	r2, [r2, #0]
 800d072:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d074:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d078:	3301      	adds	r3, #1
 800d07a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d07e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d082:	2218      	movs	r2, #24
 800d084:	2100      	movs	r1, #0
 800d086:	4618      	mov	r0, r3
 800d088:	f000 fc30 	bl	800d8ec <Osal_MemSet>
  rq.ogf = 0x3f;
 800d08c:	233f      	movs	r3, #63	; 0x3f
 800d08e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800d092:	23a5      	movs	r3, #165	; 0xa5
 800d094:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d098:	f107 0310 	add.w	r3, r7, #16
 800d09c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d0a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d0a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d0a8:	f107 030f 	add.w	r3, r7, #15
 800d0ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d0b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d0ba:	2100      	movs	r1, #0
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f000 fcbd 	bl	800da3c <hci_send_req>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	da01      	bge.n	800d0cc <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 800d0c8:	23ff      	movs	r3, #255	; 0xff
 800d0ca:	e002      	b.n	800d0d2 <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 800d0cc:	f107 030f 	add.w	r3, r7, #15
 800d0d0:	781b      	ldrb	r3, [r3, #0]
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}

0800d0dc <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b088      	sub	sp, #32
 800d0e0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d0e6:	f107 0308 	add.w	r3, r7, #8
 800d0ea:	2218      	movs	r2, #24
 800d0ec:	2100      	movs	r1, #0
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f000 fbfc 	bl	800d8ec <Osal_MemSet>
  rq.ogf = 0x3f;
 800d0f4:	233f      	movs	r3, #63	; 0x3f
 800d0f6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800d0f8:	f240 1301 	movw	r3, #257	; 0x101
 800d0fc:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d0fe:	1dfb      	adds	r3, r7, #7
 800d100:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d102:	2301      	movs	r3, #1
 800d104:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d106:	f107 0308 	add.w	r3, r7, #8
 800d10a:	2100      	movs	r1, #0
 800d10c:	4618      	mov	r0, r3
 800d10e:	f000 fc95 	bl	800da3c <hci_send_req>
 800d112:	4603      	mov	r3, r0
 800d114:	2b00      	cmp	r3, #0
 800d116:	da01      	bge.n	800d11c <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800d118:	23ff      	movs	r3, #255	; 0xff
 800d11a:	e000      	b.n	800d11e <aci_gatt_init+0x42>
  return status;
 800d11c:	79fb      	ldrb	r3, [r7, #7]
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3720      	adds	r7, #32
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}

0800d126 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800d126:	b590      	push	{r4, r7, lr}
 800d128:	b0cf      	sub	sp, #316	; 0x13c
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	4604      	mov	r4, r0
 800d12e:	4638      	mov	r0, r7
 800d130:	6001      	str	r1, [r0, #0]
 800d132:	4610      	mov	r0, r2
 800d134:	4619      	mov	r1, r3
 800d136:	1dfb      	adds	r3, r7, #7
 800d138:	4622      	mov	r2, r4
 800d13a:	701a      	strb	r2, [r3, #0]
 800d13c:	1dbb      	adds	r3, r7, #6
 800d13e:	4602      	mov	r2, r0
 800d140:	701a      	strb	r2, [r3, #0]
 800d142:	1d7b      	adds	r3, r7, #5
 800d144:	460a      	mov	r2, r1
 800d146:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800d148:	f107 0310 	add.w	r3, r7, #16
 800d14c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800d150:	1dfb      	adds	r3, r7, #7
 800d152:	781b      	ldrb	r3, [r3, #0]
 800d154:	2b01      	cmp	r3, #1
 800d156:	d007      	beq.n	800d168 <aci_gatt_add_service+0x42>
 800d158:	1dfb      	adds	r3, r7, #7
 800d15a:	781b      	ldrb	r3, [r3, #0]
 800d15c:	2b02      	cmp	r3, #2
 800d15e:	d101      	bne.n	800d164 <aci_gatt_add_service+0x3e>
 800d160:	2311      	movs	r3, #17
 800d162:	e002      	b.n	800d16a <aci_gatt_add_service+0x44>
 800d164:	2301      	movs	r3, #1
 800d166:	e000      	b.n	800d16a <aci_gatt_add_service+0x44>
 800d168:	2303      	movs	r3, #3
 800d16a:	f107 0210 	add.w	r2, r7, #16
 800d16e:	4413      	add	r3, r2
 800d170:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d174:	f107 030c 	add.w	r3, r7, #12
 800d178:	2203      	movs	r2, #3
 800d17a:	2100      	movs	r1, #0
 800d17c:	4618      	mov	r0, r3
 800d17e:	f000 fbb5 	bl	800d8ec <Osal_MemSet>
  int index_input = 0;
 800d182:	2300      	movs	r3, #0
 800d184:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800d188:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d18c:	1dfa      	adds	r2, r7, #7
 800d18e:	7812      	ldrb	r2, [r2, #0]
 800d190:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d192:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d196:	3301      	adds	r3, #1
 800d198:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800d19c:	1dfb      	adds	r3, r7, #7
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d002      	beq.n	800d1aa <aci_gatt_add_service+0x84>
 800d1a4:	2b02      	cmp	r3, #2
 800d1a6:	d004      	beq.n	800d1b2 <aci_gatt_add_service+0x8c>
 800d1a8:	e007      	b.n	800d1ba <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 800d1aa:	2302      	movs	r3, #2
 800d1ac:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800d1b0:	e005      	b.n	800d1be <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800d1b2:	2310      	movs	r3, #16
 800d1b4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800d1b8:	e001      	b.n	800d1be <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800d1ba:	2347      	movs	r3, #71	; 0x47
 800d1bc:	e05d      	b.n	800d27a <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800d1be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d1c2:	1c58      	adds	r0, r3, #1
 800d1c4:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800d1c8:	463b      	mov	r3, r7
 800d1ca:	6819      	ldr	r1, [r3, #0]
 800d1cc:	f000 fb7e 	bl	800d8cc <Osal_MemCpy>
    index_input += size;
 800d1d0:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800d1d4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d1d8:	4413      	add	r3, r2
 800d1da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800d1de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d1e2:	1dba      	adds	r2, r7, #6
 800d1e4:	7812      	ldrb	r2, [r2, #0]
 800d1e6:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800d1e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800d1f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d1f6:	1d7a      	adds	r2, r7, #5
 800d1f8:	7812      	ldrb	r2, [r2, #0]
 800d1fa:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800d1fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d200:	3301      	adds	r3, #1
 800d202:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d206:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d20a:	2218      	movs	r2, #24
 800d20c:	2100      	movs	r1, #0
 800d20e:	4618      	mov	r0, r3
 800d210:	f000 fb6c 	bl	800d8ec <Osal_MemSet>
  rq.ogf = 0x3f;
 800d214:	233f      	movs	r3, #63	; 0x3f
 800d216:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800d21a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800d21e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d222:	f107 0310 	add.w	r3, r7, #16
 800d226:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d22a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d22e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800d232:	f107 030c 	add.w	r3, r7, #12
 800d236:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800d23a:	2303      	movs	r3, #3
 800d23c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d240:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d244:	2100      	movs	r1, #0
 800d246:	4618      	mov	r0, r3
 800d248:	f000 fbf8 	bl	800da3c <hci_send_req>
 800d24c:	4603      	mov	r3, r0
 800d24e:	2b00      	cmp	r3, #0
 800d250:	da01      	bge.n	800d256 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800d252:	23ff      	movs	r3, #255	; 0xff
 800d254:	e011      	b.n	800d27a <aci_gatt_add_service+0x154>
  if ( resp.Status )
 800d256:	f107 030c 	add.w	r3, r7, #12
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d003      	beq.n	800d268 <aci_gatt_add_service+0x142>
    return resp.Status;
 800d260:	f107 030c 	add.w	r3, r7, #12
 800d264:	781b      	ldrb	r3, [r3, #0]
 800d266:	e008      	b.n	800d27a <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 800d268:	f107 030c 	add.w	r3, r7, #12
 800d26c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d270:	b29a      	uxth	r2, r3
 800d272:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d276:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d278:	2300      	movs	r3, #0
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800d280:	46bd      	mov	sp, r7
 800d282:	bd90      	pop	{r4, r7, pc}

0800d284 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800d284:	b590      	push	{r4, r7, lr}
 800d286:	b0d1      	sub	sp, #324	; 0x144
 800d288:	af00      	add	r7, sp, #0
 800d28a:	4604      	mov	r4, r0
 800d28c:	4608      	mov	r0, r1
 800d28e:	f107 0108 	add.w	r1, r7, #8
 800d292:	600a      	str	r2, [r1, #0]
 800d294:	4619      	mov	r1, r3
 800d296:	f107 030e 	add.w	r3, r7, #14
 800d29a:	4622      	mov	r2, r4
 800d29c:	801a      	strh	r2, [r3, #0]
 800d29e:	f107 030d 	add.w	r3, r7, #13
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	701a      	strb	r2, [r3, #0]
 800d2a6:	1dbb      	adds	r3, r7, #6
 800d2a8:	460a      	mov	r2, r1
 800d2aa:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800d2ac:	f107 0318 	add.w	r3, r7, #24
 800d2b0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800d2b4:	f107 030d 	add.w	r3, r7, #13
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	2b01      	cmp	r3, #1
 800d2bc:	d008      	beq.n	800d2d0 <aci_gatt_add_char+0x4c>
 800d2be:	f107 030d 	add.w	r3, r7, #13
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	2b02      	cmp	r3, #2
 800d2c6:	d101      	bne.n	800d2cc <aci_gatt_add_char+0x48>
 800d2c8:	2313      	movs	r3, #19
 800d2ca:	e002      	b.n	800d2d2 <aci_gatt_add_char+0x4e>
 800d2cc:	2303      	movs	r3, #3
 800d2ce:	e000      	b.n	800d2d2 <aci_gatt_add_char+0x4e>
 800d2d0:	2305      	movs	r3, #5
 800d2d2:	f107 0218 	add.w	r2, r7, #24
 800d2d6:	4413      	add	r3, r2
 800d2d8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d2dc:	f107 0314 	add.w	r3, r7, #20
 800d2e0:	2203      	movs	r2, #3
 800d2e2:	2100      	movs	r1, #0
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f000 fb01 	bl	800d8ec <Osal_MemSet>
  int index_input = 0;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800d2f0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800d2f4:	f107 020e 	add.w	r2, r7, #14
 800d2f8:	8812      	ldrh	r2, [r2, #0]
 800d2fa:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d2fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d300:	3302      	adds	r3, #2
 800d302:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800d306:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800d30a:	f107 020d 	add.w	r2, r7, #13
 800d30e:	7812      	ldrb	r2, [r2, #0]
 800d310:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d312:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d316:	3301      	adds	r3, #1
 800d318:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800d31c:	f107 030d 	add.w	r3, r7, #13
 800d320:	781b      	ldrb	r3, [r3, #0]
 800d322:	2b01      	cmp	r3, #1
 800d324:	d002      	beq.n	800d32c <aci_gatt_add_char+0xa8>
 800d326:	2b02      	cmp	r3, #2
 800d328:	d004      	beq.n	800d334 <aci_gatt_add_char+0xb0>
 800d32a:	e007      	b.n	800d33c <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 800d32c:	2302      	movs	r3, #2
 800d32e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800d332:	e005      	b.n	800d340 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 800d334:	2310      	movs	r3, #16
 800d336:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800d33a:	e001      	b.n	800d340 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800d33c:	2347      	movs	r3, #71	; 0x47
 800d33e:	e086      	b.n	800d44e <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800d340:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800d344:	1cd8      	adds	r0, r3, #3
 800d346:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800d34a:	f107 0308 	add.w	r3, r7, #8
 800d34e:	6819      	ldr	r1, [r3, #0]
 800d350:	f000 fabc 	bl	800d8cc <Osal_MemCpy>
    index_input += size;
 800d354:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800d358:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800d35c:	4413      	add	r3, r2
 800d35e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800d362:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d366:	1dba      	adds	r2, r7, #6
 800d368:	8812      	ldrh	r2, [r2, #0]
 800d36a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800d36c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d370:	3302      	adds	r3, #2
 800d372:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800d376:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d37a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800d37e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800d380:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d384:	3301      	adds	r3, #1
 800d386:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800d38a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d38e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800d392:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800d394:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d398:	3301      	adds	r3, #1
 800d39a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800d39e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d3a2:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800d3a6:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800d3a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d3ac:	3301      	adds	r3, #1
 800d3ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800d3b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d3b6:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800d3ba:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800d3bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d3c0:	3301      	adds	r3, #1
 800d3c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800d3c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d3ca:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800d3ce:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800d3d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d3d4:	3301      	adds	r3, #1
 800d3d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d3da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d3de:	2218      	movs	r2, #24
 800d3e0:	2100      	movs	r1, #0
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f000 fa82 	bl	800d8ec <Osal_MemSet>
  rq.ogf = 0x3f;
 800d3e8:	233f      	movs	r3, #63	; 0x3f
 800d3ea:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800d3ee:	f44f 7382 	mov.w	r3, #260	; 0x104
 800d3f2:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800d3f6:	f107 0318 	add.w	r3, r7, #24
 800d3fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800d3fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d402:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800d406:	f107 0314 	add.w	r3, r7, #20
 800d40a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800d40e:	2303      	movs	r3, #3
 800d410:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d414:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d418:	2100      	movs	r1, #0
 800d41a:	4618      	mov	r0, r3
 800d41c:	f000 fb0e 	bl	800da3c <hci_send_req>
 800d420:	4603      	mov	r3, r0
 800d422:	2b00      	cmp	r3, #0
 800d424:	da01      	bge.n	800d42a <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 800d426:	23ff      	movs	r3, #255	; 0xff
 800d428:	e011      	b.n	800d44e <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 800d42a:	f107 0314 	add.w	r3, r7, #20
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d003      	beq.n	800d43c <aci_gatt_add_char+0x1b8>
    return resp.Status;
 800d434:	f107 0314 	add.w	r3, r7, #20
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	e008      	b.n	800d44e <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 800d43c:	f107 0314 	add.w	r3, r7, #20
 800d440:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d444:	b29a      	uxth	r2, r3
 800d446:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800d44a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d44c:	2300      	movs	r3, #0
}
 800d44e:	4618      	mov	r0, r3
 800d450:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800d454:	46bd      	mov	sp, r7
 800d456:	bd90      	pop	{r4, r7, pc}

0800d458 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800d458:	b5b0      	push	{r4, r5, r7, lr}
 800d45a:	b0cc      	sub	sp, #304	; 0x130
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	4605      	mov	r5, r0
 800d460:	460c      	mov	r4, r1
 800d462:	4610      	mov	r0, r2
 800d464:	4619      	mov	r1, r3
 800d466:	1dbb      	adds	r3, r7, #6
 800d468:	462a      	mov	r2, r5
 800d46a:	801a      	strh	r2, [r3, #0]
 800d46c:	1d3b      	adds	r3, r7, #4
 800d46e:	4622      	mov	r2, r4
 800d470:	801a      	strh	r2, [r3, #0]
 800d472:	1cfb      	adds	r3, r7, #3
 800d474:	4602      	mov	r2, r0
 800d476:	701a      	strb	r2, [r3, #0]
 800d478:	1cbb      	adds	r3, r7, #2
 800d47a:	460a      	mov	r2, r1
 800d47c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800d47e:	f107 0310 	add.w	r3, r7, #16
 800d482:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d486:	f107 030f 	add.w	r3, r7, #15
 800d48a:	2200      	movs	r2, #0
 800d48c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d48e:	2300      	movs	r3, #0
 800d490:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800d494:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d498:	1dba      	adds	r2, r7, #6
 800d49a:	8812      	ldrh	r2, [r2, #0]
 800d49c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d49e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d4a2:	3302      	adds	r3, #2
 800d4a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800d4a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d4ac:	1d3a      	adds	r2, r7, #4
 800d4ae:	8812      	ldrh	r2, [r2, #0]
 800d4b0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800d4b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d4b6:	3302      	adds	r3, #2
 800d4b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800d4bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d4c0:	1cfa      	adds	r2, r7, #3
 800d4c2:	7812      	ldrb	r2, [r2, #0]
 800d4c4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800d4c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d4ca:	3301      	adds	r3, #1
 800d4cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800d4d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d4d4:	1cba      	adds	r2, r7, #2
 800d4d6:	7812      	ldrb	r2, [r2, #0]
 800d4d8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d4da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d4de:	3301      	adds	r3, #1
 800d4e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800d4e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d4e8:	1d98      	adds	r0, r3, #6
 800d4ea:	1cbb      	adds	r3, r7, #2
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	461a      	mov	r2, r3
 800d4f0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800d4f4:	f000 f9ea 	bl	800d8cc <Osal_MemCpy>
  index_input += Char_Value_Length;
 800d4f8:	1cbb      	adds	r3, r7, #2
 800d4fa:	781b      	ldrb	r3, [r3, #0]
 800d4fc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d500:	4413      	add	r3, r2
 800d502:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d506:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d50a:	2218      	movs	r2, #24
 800d50c:	2100      	movs	r1, #0
 800d50e:	4618      	mov	r0, r3
 800d510:	f000 f9ec 	bl	800d8ec <Osal_MemSet>
  rq.ogf = 0x3f;
 800d514:	233f      	movs	r3, #63	; 0x3f
 800d516:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800d51a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800d51e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d522:	f107 0310 	add.w	r3, r7, #16
 800d526:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d52a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d52e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d532:	f107 030f 	add.w	r3, r7, #15
 800d536:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d53a:	2301      	movs	r3, #1
 800d53c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d540:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d544:	2100      	movs	r1, #0
 800d546:	4618      	mov	r0, r3
 800d548:	f000 fa78 	bl	800da3c <hci_send_req>
 800d54c:	4603      	mov	r3, r0
 800d54e:	2b00      	cmp	r3, #0
 800d550:	da01      	bge.n	800d556 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800d552:	23ff      	movs	r3, #255	; 0xff
 800d554:	e002      	b.n	800d55c <aci_gatt_update_char_value+0x104>
  return status;
 800d556:	f107 030f 	add.w	r3, r7, #15
 800d55a:	781b      	ldrb	r3, [r3, #0]
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d562:	46bd      	mov	sp, r7
 800d564:	bdb0      	pop	{r4, r5, r7, pc}

0800d566 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800d566:	b580      	push	{r7, lr}
 800d568:	b0cc      	sub	sp, #304	; 0x130
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	463b      	mov	r3, r7
 800d56e:	601a      	str	r2, [r3, #0]
 800d570:	1dfb      	adds	r3, r7, #7
 800d572:	4602      	mov	r2, r0
 800d574:	701a      	strb	r2, [r3, #0]
 800d576:	1dbb      	adds	r3, r7, #6
 800d578:	460a      	mov	r2, r1
 800d57a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800d57c:	f107 0310 	add.w	r3, r7, #16
 800d580:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d584:	f107 030f 	add.w	r3, r7, #15
 800d588:	2200      	movs	r2, #0
 800d58a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d58c:	2300      	movs	r3, #0
 800d58e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800d592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d596:	1dfa      	adds	r2, r7, #7
 800d598:	7812      	ldrb	r2, [r2, #0]
 800d59a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d59c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d5a0:	3301      	adds	r3, #1
 800d5a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800d5a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d5aa:	1dba      	adds	r2, r7, #6
 800d5ac:	7812      	ldrb	r2, [r2, #0]
 800d5ae:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d5b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d5b4:	3301      	adds	r3, #1
 800d5b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800d5ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d5be:	1c98      	adds	r0, r3, #2
 800d5c0:	1dbb      	adds	r3, r7, #6
 800d5c2:	781a      	ldrb	r2, [r3, #0]
 800d5c4:	463b      	mov	r3, r7
 800d5c6:	6819      	ldr	r1, [r3, #0]
 800d5c8:	f000 f980 	bl	800d8cc <Osal_MemCpy>
  index_input += Length;
 800d5cc:	1dbb      	adds	r3, r7, #6
 800d5ce:	781b      	ldrb	r3, [r3, #0]
 800d5d0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d5d4:	4413      	add	r3, r2
 800d5d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d5da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d5de:	2218      	movs	r2, #24
 800d5e0:	2100      	movs	r1, #0
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f000 f982 	bl	800d8ec <Osal_MemSet>
  rq.ogf = 0x3f;
 800d5e8:	233f      	movs	r3, #63	; 0x3f
 800d5ea:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800d5ee:	230c      	movs	r3, #12
 800d5f0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d5f4:	f107 0310 	add.w	r3, r7, #16
 800d5f8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d5fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d600:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d604:	f107 030f 	add.w	r3, r7, #15
 800d608:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d60c:	2301      	movs	r3, #1
 800d60e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d612:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d616:	2100      	movs	r1, #0
 800d618:	4618      	mov	r0, r3
 800d61a:	f000 fa0f 	bl	800da3c <hci_send_req>
 800d61e:	4603      	mov	r3, r0
 800d620:	2b00      	cmp	r3, #0
 800d622:	da01      	bge.n	800d628 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800d624:	23ff      	movs	r3, #255	; 0xff
 800d626:	e002      	b.n	800d62e <aci_hal_write_config_data+0xc8>
  return status;
 800d628:	f107 030f 	add.w	r3, r7, #15
 800d62c:	781b      	ldrb	r3, [r3, #0]
}
 800d62e:	4618      	mov	r0, r3
 800d630:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}

0800d638 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b0cc      	sub	sp, #304	; 0x130
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	4602      	mov	r2, r0
 800d640:	1dfb      	adds	r3, r7, #7
 800d642:	701a      	strb	r2, [r3, #0]
 800d644:	1dbb      	adds	r3, r7, #6
 800d646:	460a      	mov	r2, r1
 800d648:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800d64a:	f107 0310 	add.w	r3, r7, #16
 800d64e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d652:	f107 030f 	add.w	r3, r7, #15
 800d656:	2200      	movs	r2, #0
 800d658:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d65a:	2300      	movs	r3, #0
 800d65c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800d660:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d664:	1dfa      	adds	r2, r7, #7
 800d666:	7812      	ldrb	r2, [r2, #0]
 800d668:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d66a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d66e:	3301      	adds	r3, #1
 800d670:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800d674:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d678:	1dba      	adds	r2, r7, #6
 800d67a:	7812      	ldrb	r2, [r2, #0]
 800d67c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d67e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d682:	3301      	adds	r3, #1
 800d684:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d688:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d68c:	2218      	movs	r2, #24
 800d68e:	2100      	movs	r1, #0
 800d690:	4618      	mov	r0, r3
 800d692:	f000 f92b 	bl	800d8ec <Osal_MemSet>
  rq.ogf = 0x3f;
 800d696:	233f      	movs	r3, #63	; 0x3f
 800d698:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800d69c:	230f      	movs	r3, #15
 800d69e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d6a2:	f107 0310 	add.w	r3, r7, #16
 800d6a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d6aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d6ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d6b2:	f107 030f 	add.w	r3, r7, #15
 800d6b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d6c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d6c4:	2100      	movs	r1, #0
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f000 f9b8 	bl	800da3c <hci_send_req>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	da01      	bge.n	800d6d6 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800d6d2:	23ff      	movs	r3, #255	; 0xff
 800d6d4:	e002      	b.n	800d6dc <aci_hal_set_tx_power_level+0xa4>
  return status;
 800d6d6:	f107 030f 	add.w	r3, r7, #15
 800d6da:	781b      	ldrb	r3, [r3, #0]
}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}

0800d6e6 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800d6e6:	b580      	push	{r7, lr}
 800d6e8:	b088      	sub	sp, #32
 800d6ea:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d6f0:	f107 0308 	add.w	r3, r7, #8
 800d6f4:	2218      	movs	r2, #24
 800d6f6:	2100      	movs	r1, #0
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f000 f8f7 	bl	800d8ec <Osal_MemSet>
  rq.ogf = 0x03;
 800d6fe:	2303      	movs	r3, #3
 800d700:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800d702:	2303      	movs	r3, #3
 800d704:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d706:	1dfb      	adds	r3, r7, #7
 800d708:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d70a:	2301      	movs	r3, #1
 800d70c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d70e:	f107 0308 	add.w	r3, r7, #8
 800d712:	2100      	movs	r1, #0
 800d714:	4618      	mov	r0, r3
 800d716:	f000 f991 	bl	800da3c <hci_send_req>
 800d71a:	4603      	mov	r3, r0
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	da01      	bge.n	800d724 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800d720:	23ff      	movs	r3, #255	; 0xff
 800d722:	e000      	b.n	800d726 <hci_reset+0x40>
  return status;
 800d724:	79fb      	ldrb	r3, [r7, #7]
}
 800d726:	4618      	mov	r0, r3
 800d728:	3720      	adds	r7, #32
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}

0800d72e <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800d72e:	b580      	push	{r7, lr}
 800d730:	b0ce      	sub	sp, #312	; 0x138
 800d732:	af00      	add	r7, sp, #0
 800d734:	f107 0308 	add.w	r3, r7, #8
 800d738:	6019      	str	r1, [r3, #0]
 800d73a:	1d3b      	adds	r3, r7, #4
 800d73c:	601a      	str	r2, [r3, #0]
 800d73e:	f107 030e 	add.w	r3, r7, #14
 800d742:	4602      	mov	r2, r0
 800d744:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800d746:	f107 0318 	add.w	r3, r7, #24
 800d74a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d74e:	f107 0310 	add.w	r3, r7, #16
 800d752:	2205      	movs	r2, #5
 800d754:	2100      	movs	r1, #0
 800d756:	4618      	mov	r0, r3
 800d758:	f000 f8c8 	bl	800d8ec <Osal_MemSet>
  int index_input = 0;
 800d75c:	2300      	movs	r3, #0
 800d75e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800d762:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d766:	f107 020e 	add.w	r2, r7, #14
 800d76a:	8812      	ldrh	r2, [r2, #0]
 800d76c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d76e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d772:	3302      	adds	r3, #2
 800d774:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d778:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d77c:	2218      	movs	r2, #24
 800d77e:	2100      	movs	r1, #0
 800d780:	4618      	mov	r0, r3
 800d782:	f000 f8b3 	bl	800d8ec <Osal_MemSet>
  rq.ogf = 0x08;
 800d786:	2308      	movs	r3, #8
 800d788:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800d78c:	2330      	movs	r3, #48	; 0x30
 800d78e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800d792:	f107 0318 	add.w	r3, r7, #24
 800d796:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800d79a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d79e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800d7a2:	f107 0310 	add.w	r3, r7, #16
 800d7a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800d7aa:	2305      	movs	r3, #5
 800d7ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d7b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d7b4:	2100      	movs	r1, #0
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f000 f940 	bl	800da3c <hci_send_req>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	da01      	bge.n	800d7c6 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 800d7c2:	23ff      	movs	r3, #255	; 0xff
 800d7c4:	e016      	b.n	800d7f4 <hci_le_read_phy+0xc6>
  if ( resp.Status )
 800d7c6:	f107 0310 	add.w	r3, r7, #16
 800d7ca:	781b      	ldrb	r3, [r3, #0]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d003      	beq.n	800d7d8 <hci_le_read_phy+0xaa>
    return resp.Status;
 800d7d0:	f107 0310 	add.w	r3, r7, #16
 800d7d4:	781b      	ldrb	r3, [r3, #0]
 800d7d6:	e00d      	b.n	800d7f4 <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 800d7d8:	f107 0310 	add.w	r3, r7, #16
 800d7dc:	78da      	ldrb	r2, [r3, #3]
 800d7de:	f107 0308 	add.w	r3, r7, #8
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800d7e6:	f107 0310 	add.w	r3, r7, #16
 800d7ea:	791a      	ldrb	r2, [r3, #4]
 800d7ec:	1d3b      	adds	r3, r7, #4
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d7f2:	2300      	movs	r3, #0
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}

0800d7fe <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800d7fe:	b590      	push	{r4, r7, lr}
 800d800:	b0cd      	sub	sp, #308	; 0x134
 800d802:	af00      	add	r7, sp, #0
 800d804:	4604      	mov	r4, r0
 800d806:	4608      	mov	r0, r1
 800d808:	4611      	mov	r1, r2
 800d80a:	1dfb      	adds	r3, r7, #7
 800d80c:	4622      	mov	r2, r4
 800d80e:	701a      	strb	r2, [r3, #0]
 800d810:	1dbb      	adds	r3, r7, #6
 800d812:	4602      	mov	r2, r0
 800d814:	701a      	strb	r2, [r3, #0]
 800d816:	1d7b      	adds	r3, r7, #5
 800d818:	460a      	mov	r2, r1
 800d81a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800d81c:	f107 0310 	add.w	r3, r7, #16
 800d820:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d824:	f107 030f 	add.w	r3, r7, #15
 800d828:	2200      	movs	r2, #0
 800d82a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d82c:	2300      	movs	r3, #0
 800d82e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800d832:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d836:	1dfa      	adds	r2, r7, #7
 800d838:	7812      	ldrb	r2, [r2, #0]
 800d83a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d83c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d840:	3301      	adds	r3, #1
 800d842:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800d846:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d84a:	1dba      	adds	r2, r7, #6
 800d84c:	7812      	ldrb	r2, [r2, #0]
 800d84e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d850:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d854:	3301      	adds	r3, #1
 800d856:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800d85a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d85e:	1d7a      	adds	r2, r7, #5
 800d860:	7812      	ldrb	r2, [r2, #0]
 800d862:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d864:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d868:	3301      	adds	r3, #1
 800d86a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d86e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d872:	2218      	movs	r2, #24
 800d874:	2100      	movs	r1, #0
 800d876:	4618      	mov	r0, r3
 800d878:	f000 f838 	bl	800d8ec <Osal_MemSet>
  rq.ogf = 0x08;
 800d87c:	2308      	movs	r3, #8
 800d87e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800d882:	2331      	movs	r3, #49	; 0x31
 800d884:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d888:	f107 0310 	add.w	r3, r7, #16
 800d88c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d890:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d894:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d898:	f107 030f 	add.w	r3, r7, #15
 800d89c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d8a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d8aa:	2100      	movs	r1, #0
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f000 f8c5 	bl	800da3c <hci_send_req>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	da01      	bge.n	800d8bc <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 800d8b8:	23ff      	movs	r3, #255	; 0xff
 800d8ba:	e002      	b.n	800d8c2 <hci_le_set_default_phy+0xc4>
  return status;
 800d8bc:	f107 030f 	add.w	r3, r7, #15
 800d8c0:	781b      	ldrb	r3, [r3, #0]
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd90      	pop	{r4, r7, pc}

0800d8cc <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	60f8      	str	r0, [r7, #12]
 800d8d4:	60b9      	str	r1, [r7, #8]
 800d8d6:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800d8d8:	687a      	ldr	r2, [r7, #4]
 800d8da:	68b9      	ldr	r1, [r7, #8]
 800d8dc:	68f8      	ldr	r0, [r7, #12]
 800d8de:	f005 fdbd 	bl	801345c <memcpy>
 800d8e2:	4603      	mov	r3, r0
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3710      	adds	r7, #16
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}

0800d8ec <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b084      	sub	sp, #16
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	60f8      	str	r0, [r7, #12]
 800d8f4:	60b9      	str	r1, [r7, #8]
 800d8f6:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800d8f8:	687a      	ldr	r2, [r7, #4]
 800d8fa:	68b9      	ldr	r1, [r7, #8]
 800d8fc:	68f8      	ldr	r0, [r7, #12]
 800d8fe:	f005 fdb8 	bl	8013472 <memset>
 800d902:	4603      	mov	r3, r0
}
 800d904:	4618      	mov	r0, r3
 800d906:	3710      	adds	r7, #16
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b088      	sub	sp, #32
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800d914:	f107 030c 	add.w	r3, r7, #12
 800d918:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800d920:	69fb      	ldr	r3, [r7, #28]
 800d922:	2121      	movs	r1, #33	; 0x21
 800d924:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800d928:	f000 fa1e 	bl	800dd68 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800d92c:	69fb      	ldr	r3, [r7, #28]
 800d92e:	330b      	adds	r3, #11
 800d930:	78db      	ldrb	r3, [r3, #3]
}
 800d932:	4618      	mov	r0, r3
 800d934:	3720      	adds	r7, #32
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}

0800d93a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800d93a:	b580      	push	{r7, lr}
 800d93c:	b088      	sub	sp, #32
 800d93e:	af00      	add	r7, sp, #0
 800d940:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800d942:	f107 030c 	add.w	r3, r7, #12
 800d946:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800d94e:	69fb      	ldr	r3, [r7, #28]
 800d950:	210f      	movs	r1, #15
 800d952:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800d956:	f000 fa07 	bl	800dd68 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800d95a:	69fb      	ldr	r3, [r7, #28]
 800d95c:	330b      	adds	r3, #11
 800d95e:	78db      	ldrb	r3, [r3, #3]
}
 800d960:	4618      	mov	r0, r3
 800d962:	3720      	adds	r7, #32
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}

0800d968 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
 800d970:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	685b      	ldr	r3, [r3, #4]
 800d976:	4a08      	ldr	r2, [pc, #32]	; (800d998 <hci_init+0x30>)
 800d978:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800d97a:	4a08      	ldr	r2, [pc, #32]	; (800d99c <hci_init+0x34>)
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800d980:	4806      	ldr	r0, [pc, #24]	; (800d99c <hci_init+0x34>)
 800d982:	f000 f973 	bl	800dc6c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4618      	mov	r0, r3
 800d98c:	f000 f8d4 	bl	800db38 <TlInit>

  return;
 800d990:	bf00      	nop
}
 800d992:	3708      	adds	r7, #8
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}
 800d998:	200003e0 	.word	0x200003e0
 800d99c:	200003b8 	.word	0x200003b8

0800d9a0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b084      	sub	sp, #16
 800d9a4:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800d9a6:	4822      	ldr	r0, [pc, #136]	; (800da30 <hci_user_evt_proc+0x90>)
 800d9a8:	f000 ff00 	bl	800e7ac <LST_is_empty>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d12b      	bne.n	800da0a <hci_user_evt_proc+0x6a>
 800d9b2:	4b20      	ldr	r3, [pc, #128]	; (800da34 <hci_user_evt_proc+0x94>)
 800d9b4:	781b      	ldrb	r3, [r3, #0]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d027      	beq.n	800da0a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800d9ba:	f107 030c 	add.w	r3, r7, #12
 800d9be:	4619      	mov	r1, r3
 800d9c0:	481b      	ldr	r0, [pc, #108]	; (800da30 <hci_user_evt_proc+0x90>)
 800d9c2:	f000 ff7a 	bl	800e8ba <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800d9c6:	4b1c      	ldr	r3, [pc, #112]	; (800da38 <hci_user_evt_proc+0x98>)
 800d9c8:	69db      	ldr	r3, [r3, #28]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d00c      	beq.n	800d9e8 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800d9d6:	4b18      	ldr	r3, [pc, #96]	; (800da38 <hci_user_evt_proc+0x98>)
 800d9d8:	69db      	ldr	r3, [r3, #28]
 800d9da:	1d3a      	adds	r2, r7, #4
 800d9dc:	4610      	mov	r0, r2
 800d9de:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800d9e0:	793a      	ldrb	r2, [r7, #4]
 800d9e2:	4b14      	ldr	r3, [pc, #80]	; (800da34 <hci_user_evt_proc+0x94>)
 800d9e4:	701a      	strb	r2, [r3, #0]
 800d9e6:	e002      	b.n	800d9ee <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800d9e8:	4b12      	ldr	r3, [pc, #72]	; (800da34 <hci_user_evt_proc+0x94>)
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800d9ee:	4b11      	ldr	r3, [pc, #68]	; (800da34 <hci_user_evt_proc+0x94>)
 800d9f0:	781b      	ldrb	r3, [r3, #0]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d004      	beq.n	800da00 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f000 fc03 	bl	800e204 <TL_MM_EvtDone>
 800d9fe:	e004      	b.n	800da0a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	4619      	mov	r1, r3
 800da04:	480a      	ldr	r0, [pc, #40]	; (800da30 <hci_user_evt_proc+0x90>)
 800da06:	f000 fef1 	bl	800e7ec <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800da0a:	4809      	ldr	r0, [pc, #36]	; (800da30 <hci_user_evt_proc+0x90>)
 800da0c:	f000 fece 	bl	800e7ac <LST_is_empty>
 800da10:	4603      	mov	r3, r0
 800da12:	2b00      	cmp	r3, #0
 800da14:	d107      	bne.n	800da26 <hci_user_evt_proc+0x86>
 800da16:	4b07      	ldr	r3, [pc, #28]	; (800da34 <hci_user_evt_proc+0x94>)
 800da18:	781b      	ldrb	r3, [r3, #0]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d003      	beq.n	800da26 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800da1e:	4804      	ldr	r0, [pc, #16]	; (800da30 <hci_user_evt_proc+0x90>)
 800da20:	f7f3 fe68 	bl	80016f4 <hci_notify_asynch_evt>
  }


  return;
 800da24:	bf00      	nop
 800da26:	bf00      	nop
}
 800da28:	3710      	adds	r7, #16
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}
 800da2e:	bf00      	nop
 800da30:	20000354 	.word	0x20000354
 800da34:	20000360 	.word	0x20000360
 800da38:	200003b8 	.word	0x200003b8

0800da3c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b088      	sub	sp, #32
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	460b      	mov	r3, r1
 800da46:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800da48:	2000      	movs	r0, #0
 800da4a:	f000 f8cb 	bl	800dbe4 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800da4e:	2300      	movs	r3, #0
 800da50:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	885b      	ldrh	r3, [r3, #2]
 800da56:	b21b      	sxth	r3, r3
 800da58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800da5c:	b21a      	sxth	r2, r3
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	881b      	ldrh	r3, [r3, #0]
 800da62:	029b      	lsls	r3, r3, #10
 800da64:	b21b      	sxth	r3, r3
 800da66:	4313      	orrs	r3, r2
 800da68:	b21b      	sxth	r3, r3
 800da6a:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	68db      	ldr	r3, [r3, #12]
 800da70:	b2d9      	uxtb	r1, r3
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	689a      	ldr	r2, [r3, #8]
 800da76:	8bbb      	ldrh	r3, [r7, #28]
 800da78:	4618      	mov	r0, r3
 800da7a:	f000 f88d 	bl	800db98 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800da7e:	e04e      	b.n	800db1e <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800da80:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800da84:	f7f3 fe56 	bl	8001734 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800da88:	e043      	b.n	800db12 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800da8a:	f107 030c 	add.w	r3, r7, #12
 800da8e:	4619      	mov	r1, r3
 800da90:	4828      	ldr	r0, [pc, #160]	; (800db34 <hci_send_req+0xf8>)
 800da92:	f000 ff12 	bl	800e8ba <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	7a5b      	ldrb	r3, [r3, #9]
 800da9a:	2b0f      	cmp	r3, #15
 800da9c:	d114      	bne.n	800dac8 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	330b      	adds	r3, #11
 800daa2:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	885b      	ldrh	r3, [r3, #2]
 800daa8:	b29b      	uxth	r3, r3
 800daaa:	8bba      	ldrh	r2, [r7, #28]
 800daac:	429a      	cmp	r2, r3
 800daae:	d104      	bne.n	800daba <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	691b      	ldr	r3, [r3, #16]
 800dab4:	693a      	ldr	r2, [r7, #16]
 800dab6:	7812      	ldrb	r2, [r2, #0]
 800dab8:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	785b      	ldrb	r3, [r3, #1]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d027      	beq.n	800db12 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800dac2:	2301      	movs	r3, #1
 800dac4:	77fb      	strb	r3, [r7, #31]
 800dac6:	e024      	b.n	800db12 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	330b      	adds	r3, #11
 800dacc:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800dace:	69bb      	ldr	r3, [r7, #24]
 800dad0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800dad4:	b29b      	uxth	r3, r3
 800dad6:	8bba      	ldrh	r2, [r7, #28]
 800dad8:	429a      	cmp	r2, r3
 800dada:	d114      	bne.n	800db06 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	7a9b      	ldrb	r3, [r3, #10]
 800dae0:	3b03      	subs	r3, #3
 800dae2:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	695a      	ldr	r2, [r3, #20]
 800dae8:	7dfb      	ldrb	r3, [r7, #23]
 800daea:	429a      	cmp	r2, r3
 800daec:	bfa8      	it	ge
 800daee:	461a      	movge	r2, r3
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6918      	ldr	r0, [r3, #16]
 800daf8:	69bb      	ldr	r3, [r7, #24]
 800dafa:	1cd9      	adds	r1, r3, #3
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	695b      	ldr	r3, [r3, #20]
 800db00:	461a      	mov	r2, r3
 800db02:	f005 fcab 	bl	801345c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800db06:	69bb      	ldr	r3, [r7, #24]
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d001      	beq.n	800db12 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800db0e:	2301      	movs	r3, #1
 800db10:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800db12:	4808      	ldr	r0, [pc, #32]	; (800db34 <hci_send_req+0xf8>)
 800db14:	f000 fe4a 	bl	800e7ac <LST_is_empty>
 800db18:	4603      	mov	r3, r0
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d0b5      	beq.n	800da8a <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800db1e:	7ffb      	ldrb	r3, [r7, #31]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d0ad      	beq.n	800da80 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800db24:	2001      	movs	r0, #1
 800db26:	f000 f85d 	bl	800dbe4 <NotifyCmdStatus>

  return 0;
 800db2a:	2300      	movs	r3, #0
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3720      	adds	r7, #32
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}
 800db34:	200003d8 	.word	0x200003d8

0800db38 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b086      	sub	sp, #24
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800db40:	480f      	ldr	r0, [pc, #60]	; (800db80 <TlInit+0x48>)
 800db42:	f000 fe23 	bl	800e78c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800db46:	4a0f      	ldr	r2, [pc, #60]	; (800db84 <TlInit+0x4c>)
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800db4c:	480e      	ldr	r0, [pc, #56]	; (800db88 <TlInit+0x50>)
 800db4e:	f000 fe1d 	bl	800e78c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800db52:	4b0e      	ldr	r3, [pc, #56]	; (800db8c <TlInit+0x54>)
 800db54:	2201      	movs	r2, #1
 800db56:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800db58:	4b0d      	ldr	r3, [pc, #52]	; (800db90 <TlInit+0x58>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d00a      	beq.n	800db76 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800db64:	4b0b      	ldr	r3, [pc, #44]	; (800db94 <TlInit+0x5c>)
 800db66:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800db68:	4b09      	ldr	r3, [pc, #36]	; (800db90 <TlInit+0x58>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	f107 0208 	add.w	r2, r7, #8
 800db70:	4610      	mov	r0, r2
 800db72:	4798      	blx	r3
  }

  return;
 800db74:	bf00      	nop
 800db76:	bf00      	nop
}
 800db78:	3718      	adds	r7, #24
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
 800db7e:	bf00      	nop
 800db80:	200003d8 	.word	0x200003d8
 800db84:	2000035c 	.word	0x2000035c
 800db88:	20000354 	.word	0x20000354
 800db8c:	20000360 	.word	0x20000360
 800db90:	200003b8 	.word	0x200003b8
 800db94:	0800dc25 	.word	0x0800dc25

0800db98 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b082      	sub	sp, #8
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	4603      	mov	r3, r0
 800dba0:	603a      	str	r2, [r7, #0]
 800dba2:	80fb      	strh	r3, [r7, #6]
 800dba4:	460b      	mov	r3, r1
 800dba6:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800dba8:	4b0c      	ldr	r3, [pc, #48]	; (800dbdc <SendCmd+0x44>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	88fa      	ldrh	r2, [r7, #6]
 800dbae:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800dbb2:	4b0a      	ldr	r3, [pc, #40]	; (800dbdc <SendCmd+0x44>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	797a      	ldrb	r2, [r7, #5]
 800dbb8:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800dbba:	4b08      	ldr	r3, [pc, #32]	; (800dbdc <SendCmd+0x44>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	330c      	adds	r3, #12
 800dbc0:	797a      	ldrb	r2, [r7, #5]
 800dbc2:	6839      	ldr	r1, [r7, #0]
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f005 fc49 	bl	801345c <memcpy>

  hciContext.io.Send(0,0);
 800dbca:	4b05      	ldr	r3, [pc, #20]	; (800dbe0 <SendCmd+0x48>)
 800dbcc:	691b      	ldr	r3, [r3, #16]
 800dbce:	2100      	movs	r1, #0
 800dbd0:	2000      	movs	r0, #0
 800dbd2:	4798      	blx	r3

  return;
 800dbd4:	bf00      	nop
}
 800dbd6:	3708      	adds	r7, #8
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}
 800dbdc:	2000035c 	.word	0x2000035c
 800dbe0:	200003b8 	.word	0x200003b8

0800dbe4 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b082      	sub	sp, #8
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	4603      	mov	r3, r0
 800dbec:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800dbee:	79fb      	ldrb	r3, [r7, #7]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d108      	bne.n	800dc06 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800dbf4:	4b0a      	ldr	r3, [pc, #40]	; (800dc20 <NotifyCmdStatus+0x3c>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d00d      	beq.n	800dc18 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800dbfc:	4b08      	ldr	r3, [pc, #32]	; (800dc20 <NotifyCmdStatus+0x3c>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	2000      	movs	r0, #0
 800dc02:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800dc04:	e008      	b.n	800dc18 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800dc06:	4b06      	ldr	r3, [pc, #24]	; (800dc20 <NotifyCmdStatus+0x3c>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d004      	beq.n	800dc18 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800dc0e:	4b04      	ldr	r3, [pc, #16]	; (800dc20 <NotifyCmdStatus+0x3c>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	2001      	movs	r0, #1
 800dc14:	4798      	blx	r3
  return;
 800dc16:	bf00      	nop
 800dc18:	bf00      	nop
}
 800dc1a:	3708      	adds	r7, #8
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}
 800dc20:	200003e0 	.word	0x200003e0

0800dc24 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b082      	sub	sp, #8
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	7a5b      	ldrb	r3, [r3, #9]
 800dc30:	2b0f      	cmp	r3, #15
 800dc32:	d003      	beq.n	800dc3c <TlEvtReceived+0x18>
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	7a5b      	ldrb	r3, [r3, #9]
 800dc38:	2b0e      	cmp	r3, #14
 800dc3a:	d107      	bne.n	800dc4c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800dc3c:	6879      	ldr	r1, [r7, #4]
 800dc3e:	4809      	ldr	r0, [pc, #36]	; (800dc64 <TlEvtReceived+0x40>)
 800dc40:	f000 fdf8 	bl	800e834 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800dc44:	2000      	movs	r0, #0
 800dc46:	f7f3 fd65 	bl	8001714 <hci_cmd_resp_release>
 800dc4a:	e006      	b.n	800dc5a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800dc4c:	6879      	ldr	r1, [r7, #4]
 800dc4e:	4806      	ldr	r0, [pc, #24]	; (800dc68 <TlEvtReceived+0x44>)
 800dc50:	f000 fdf0 	bl	800e834 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800dc54:	4804      	ldr	r0, [pc, #16]	; (800dc68 <TlEvtReceived+0x44>)
 800dc56:	f7f3 fd4d 	bl	80016f4 <hci_notify_asynch_evt>
  }

  return;
 800dc5a:	bf00      	nop
}
 800dc5c:	3708      	adds	r7, #8
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
 800dc62:	bf00      	nop
 800dc64:	200003d8 	.word	0x200003d8
 800dc68:	20000354 	.word	0x20000354

0800dc6c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	b083      	sub	sp, #12
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	4a05      	ldr	r2, [pc, #20]	; (800dc8c <hci_register_io_bus+0x20>)
 800dc78:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	4a04      	ldr	r2, [pc, #16]	; (800dc90 <hci_register_io_bus+0x24>)
 800dc7e:	611a      	str	r2, [r3, #16]

  return;
 800dc80:	bf00      	nop
}
 800dc82:	370c      	adds	r7, #12
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr
 800dc8c:	0800df7d 	.word	0x0800df7d
 800dc90:	0800dfe5 	.word	0x0800dfe5

0800dc94 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b082      	sub	sp, #8
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	4a08      	ldr	r2, [pc, #32]	; (800dcc4 <shci_init+0x30>)
 800dca4:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800dca6:	4a08      	ldr	r2, [pc, #32]	; (800dcc8 <shci_init+0x34>)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800dcac:	4806      	ldr	r0, [pc, #24]	; (800dcc8 <shci_init+0x34>)
 800dcae:	f000 f911 	bl	800ded4 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f000 f894 	bl	800dde4 <TlInit>

  return;
 800dcbc:	bf00      	nop
}
 800dcbe:	3708      	adds	r7, #8
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}
 800dcc4:	20000404 	.word	0x20000404
 800dcc8:	200003e4 	.word	0x200003e4

0800dccc <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b084      	sub	sp, #16
 800dcd0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800dcd2:	4822      	ldr	r0, [pc, #136]	; (800dd5c <shci_user_evt_proc+0x90>)
 800dcd4:	f000 fd6a 	bl	800e7ac <LST_is_empty>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d12b      	bne.n	800dd36 <shci_user_evt_proc+0x6a>
 800dcde:	4b20      	ldr	r3, [pc, #128]	; (800dd60 <shci_user_evt_proc+0x94>)
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d027      	beq.n	800dd36 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800dce6:	f107 030c 	add.w	r3, r7, #12
 800dcea:	4619      	mov	r1, r3
 800dcec:	481b      	ldr	r0, [pc, #108]	; (800dd5c <shci_user_evt_proc+0x90>)
 800dcee:	f000 fde4 	bl	800e8ba <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800dcf2:	4b1c      	ldr	r3, [pc, #112]	; (800dd64 <shci_user_evt_proc+0x98>)
 800dcf4:	69db      	ldr	r3, [r3, #28]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d00c      	beq.n	800dd14 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800dcfe:	2301      	movs	r3, #1
 800dd00:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800dd02:	4b18      	ldr	r3, [pc, #96]	; (800dd64 <shci_user_evt_proc+0x98>)
 800dd04:	69db      	ldr	r3, [r3, #28]
 800dd06:	1d3a      	adds	r2, r7, #4
 800dd08:	4610      	mov	r0, r2
 800dd0a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800dd0c:	793a      	ldrb	r2, [r7, #4]
 800dd0e:	4b14      	ldr	r3, [pc, #80]	; (800dd60 <shci_user_evt_proc+0x94>)
 800dd10:	701a      	strb	r2, [r3, #0]
 800dd12:	e002      	b.n	800dd1a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800dd14:	4b12      	ldr	r3, [pc, #72]	; (800dd60 <shci_user_evt_proc+0x94>)
 800dd16:	2201      	movs	r2, #1
 800dd18:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800dd1a:	4b11      	ldr	r3, [pc, #68]	; (800dd60 <shci_user_evt_proc+0x94>)
 800dd1c:	781b      	ldrb	r3, [r3, #0]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d004      	beq.n	800dd2c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	4618      	mov	r0, r3
 800dd26:	f000 fa6d 	bl	800e204 <TL_MM_EvtDone>
 800dd2a:	e004      	b.n	800dd36 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	4619      	mov	r1, r3
 800dd30:	480a      	ldr	r0, [pc, #40]	; (800dd5c <shci_user_evt_proc+0x90>)
 800dd32:	f000 fd5b 	bl	800e7ec <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800dd36:	4809      	ldr	r0, [pc, #36]	; (800dd5c <shci_user_evt_proc+0x90>)
 800dd38:	f000 fd38 	bl	800e7ac <LST_is_empty>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d107      	bne.n	800dd52 <shci_user_evt_proc+0x86>
 800dd42:	4b07      	ldr	r3, [pc, #28]	; (800dd60 <shci_user_evt_proc+0x94>)
 800dd44:	781b      	ldrb	r3, [r3, #0]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d003      	beq.n	800dd52 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800dd4a:	4804      	ldr	r0, [pc, #16]	; (800dd5c <shci_user_evt_proc+0x90>)
 800dd4c:	f7f4 fafc 	bl	8002348 <shci_notify_asynch_evt>
  }


  return;
 800dd50:	bf00      	nop
 800dd52:	bf00      	nop
}
 800dd54:	3710      	adds	r7, #16
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
 800dd5a:	bf00      	nop
 800dd5c:	2000036c 	.word	0x2000036c
 800dd60:	2000037c 	.word	0x2000037c
 800dd64:	200003e4 	.word	0x200003e4

0800dd68 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b084      	sub	sp, #16
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	60ba      	str	r2, [r7, #8]
 800dd70:	607b      	str	r3, [r7, #4]
 800dd72:	4603      	mov	r3, r0
 800dd74:	81fb      	strh	r3, [r7, #14]
 800dd76:	460b      	mov	r3, r1
 800dd78:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800dd7a:	2000      	movs	r0, #0
 800dd7c:	f000 f864 	bl	800de48 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800dd80:	4b16      	ldr	r3, [pc, #88]	; (800dddc <shci_send+0x74>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	89fa      	ldrh	r2, [r7, #14]
 800dd86:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800dd8a:	4b14      	ldr	r3, [pc, #80]	; (800dddc <shci_send+0x74>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	7b7a      	ldrb	r2, [r7, #13]
 800dd90:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800dd92:	4b12      	ldr	r3, [pc, #72]	; (800dddc <shci_send+0x74>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	330c      	adds	r3, #12
 800dd98:	7b7a      	ldrb	r2, [r7, #13]
 800dd9a:	68b9      	ldr	r1, [r7, #8]
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f005 fb5d 	bl	801345c <memcpy>

  shciContext.io.Send(0,0);
 800dda2:	4b0f      	ldr	r3, [pc, #60]	; (800dde0 <shci_send+0x78>)
 800dda4:	691b      	ldr	r3, [r3, #16]
 800dda6:	2100      	movs	r1, #0
 800dda8:	2000      	movs	r0, #0
 800ddaa:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800ddac:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800ddb0:	f7f4 faea 	bl	8002388 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f103 0008 	add.w	r0, r3, #8
 800ddba:	4b08      	ldr	r3, [pc, #32]	; (800dddc <shci_send+0x74>)
 800ddbc:	6819      	ldr	r1, [r3, #0]
 800ddbe:	4b07      	ldr	r3, [pc, #28]	; (800dddc <shci_send+0x74>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	789b      	ldrb	r3, [r3, #2]
 800ddc4:	3303      	adds	r3, #3
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	f005 fb48 	bl	801345c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800ddcc:	2001      	movs	r0, #1
 800ddce:	f000 f83b 	bl	800de48 <Cmd_SetStatus>

  return;
 800ddd2:	bf00      	nop
}
 800ddd4:	3710      	adds	r7, #16
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}
 800ddda:	bf00      	nop
 800dddc:	20000378 	.word	0x20000378
 800dde0:	200003e4 	.word	0x200003e4

0800dde4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b086      	sub	sp, #24
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800ddec:	4a10      	ldr	r2, [pc, #64]	; (800de30 <TlInit+0x4c>)
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800ddf2:	4810      	ldr	r0, [pc, #64]	; (800de34 <TlInit+0x50>)
 800ddf4:	f000 fcca 	bl	800e78c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800ddf8:	2001      	movs	r0, #1
 800ddfa:	f000 f825 	bl	800de48 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800ddfe:	4b0e      	ldr	r3, [pc, #56]	; (800de38 <TlInit+0x54>)
 800de00:	2201      	movs	r2, #1
 800de02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800de04:	4b0d      	ldr	r3, [pc, #52]	; (800de3c <TlInit+0x58>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d00c      	beq.n	800de26 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800de10:	4b0b      	ldr	r3, [pc, #44]	; (800de40 <TlInit+0x5c>)
 800de12:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800de14:	4b0b      	ldr	r3, [pc, #44]	; (800de44 <TlInit+0x60>)
 800de16:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800de18:	4b08      	ldr	r3, [pc, #32]	; (800de3c <TlInit+0x58>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	f107 020c 	add.w	r2, r7, #12
 800de20:	4610      	mov	r0, r2
 800de22:	4798      	blx	r3
  }

  return;
 800de24:	bf00      	nop
 800de26:	bf00      	nop
}
 800de28:	3718      	adds	r7, #24
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}
 800de2e:	bf00      	nop
 800de30:	20000378 	.word	0x20000378
 800de34:	2000036c 	.word	0x2000036c
 800de38:	2000037c 	.word	0x2000037c
 800de3c:	200003e4 	.word	0x200003e4
 800de40:	0800de99 	.word	0x0800de99
 800de44:	0800deb1 	.word	0x0800deb1

0800de48 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b082      	sub	sp, #8
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	4603      	mov	r3, r0
 800de50:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800de52:	79fb      	ldrb	r3, [r7, #7]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d10b      	bne.n	800de70 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800de58:	4b0d      	ldr	r3, [pc, #52]	; (800de90 <Cmd_SetStatus+0x48>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d003      	beq.n	800de68 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800de60:	4b0b      	ldr	r3, [pc, #44]	; (800de90 <Cmd_SetStatus+0x48>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	2000      	movs	r0, #0
 800de66:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800de68:	4b0a      	ldr	r3, [pc, #40]	; (800de94 <Cmd_SetStatus+0x4c>)
 800de6a:	2200      	movs	r2, #0
 800de6c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800de6e:	e00b      	b.n	800de88 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800de70:	4b08      	ldr	r3, [pc, #32]	; (800de94 <Cmd_SetStatus+0x4c>)
 800de72:	2201      	movs	r2, #1
 800de74:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800de76:	4b06      	ldr	r3, [pc, #24]	; (800de90 <Cmd_SetStatus+0x48>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d004      	beq.n	800de88 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800de7e:	4b04      	ldr	r3, [pc, #16]	; (800de90 <Cmd_SetStatus+0x48>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2001      	movs	r0, #1
 800de84:	4798      	blx	r3
  return;
 800de86:	bf00      	nop
 800de88:	bf00      	nop
}
 800de8a:	3708      	adds	r7, #8
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	20000404 	.word	0x20000404
 800de94:	20000374 	.word	0x20000374

0800de98 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b082      	sub	sp, #8
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800dea0:	2000      	movs	r0, #0
 800dea2:	f7f4 fa61 	bl	8002368 <shci_cmd_resp_release>

  return;
 800dea6:	bf00      	nop
}
 800dea8:	3708      	adds	r7, #8
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}
	...

0800deb0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b082      	sub	sp, #8
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800deb8:	6879      	ldr	r1, [r7, #4]
 800deba:	4805      	ldr	r0, [pc, #20]	; (800ded0 <TlUserEvtReceived+0x20>)
 800debc:	f000 fcba 	bl	800e834 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800dec0:	4803      	ldr	r0, [pc, #12]	; (800ded0 <TlUserEvtReceived+0x20>)
 800dec2:	f7f4 fa41 	bl	8002348 <shci_notify_asynch_evt>

  return;
 800dec6:	bf00      	nop
}
 800dec8:	3708      	adds	r7, #8
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop
 800ded0:	2000036c 	.word	0x2000036c

0800ded4 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800ded4:	b480      	push	{r7}
 800ded6:	b083      	sub	sp, #12
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	4a05      	ldr	r2, [pc, #20]	; (800def4 <shci_register_io_bus+0x20>)
 800dee0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	4a04      	ldr	r2, [pc, #16]	; (800def8 <shci_register_io_bus+0x24>)
 800dee6:	611a      	str	r2, [r3, #16]

  return;
 800dee8:	bf00      	nop
}
 800deea:	370c      	adds	r7, #12
 800deec:	46bd      	mov	sp, r7
 800deee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def2:	4770      	bx	lr
 800def4:	0800e091 	.word	0x0800e091
 800def8:	0800e0e5 	.word	0x0800e0e5

0800defc <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800defc:	b580      	push	{r7, lr}
 800defe:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800df00:	f7f3 fef8 	bl	8001cf4 <HW_IPCC_Enable>

  return;
 800df04:	bf00      	nop
}
 800df06:	bd80      	pop	{r7, pc}

0800df08 <TL_Init>:


void TL_Init( void )
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800df0c:	4b10      	ldr	r3, [pc, #64]	; (800df50 <TL_Init+0x48>)
 800df0e:	4a11      	ldr	r2, [pc, #68]	; (800df54 <TL_Init+0x4c>)
 800df10:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800df12:	4b0f      	ldr	r3, [pc, #60]	; (800df50 <TL_Init+0x48>)
 800df14:	4a10      	ldr	r2, [pc, #64]	; (800df58 <TL_Init+0x50>)
 800df16:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800df18:	4b0d      	ldr	r3, [pc, #52]	; (800df50 <TL_Init+0x48>)
 800df1a:	4a10      	ldr	r2, [pc, #64]	; (800df5c <TL_Init+0x54>)
 800df1c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800df1e:	4b0c      	ldr	r3, [pc, #48]	; (800df50 <TL_Init+0x48>)
 800df20:	4a0f      	ldr	r2, [pc, #60]	; (800df60 <TL_Init+0x58>)
 800df22:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 800df24:	4b0a      	ldr	r3, [pc, #40]	; (800df50 <TL_Init+0x48>)
 800df26:	4a0f      	ldr	r2, [pc, #60]	; (800df64 <TL_Init+0x5c>)
 800df28:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800df2a:	4b09      	ldr	r3, [pc, #36]	; (800df50 <TL_Init+0x48>)
 800df2c:	4a0e      	ldr	r2, [pc, #56]	; (800df68 <TL_Init+0x60>)
 800df2e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800df30:	4b07      	ldr	r3, [pc, #28]	; (800df50 <TL_Init+0x48>)
 800df32:	4a0e      	ldr	r2, [pc, #56]	; (800df6c <TL_Init+0x64>)
 800df34:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800df36:	4b06      	ldr	r3, [pc, #24]	; (800df50 <TL_Init+0x48>)
 800df38:	4a0d      	ldr	r2, [pc, #52]	; (800df70 <TL_Init+0x68>)
 800df3a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800df3c:	4b04      	ldr	r3, [pc, #16]	; (800df50 <TL_Init+0x48>)
 800df3e:	4a0d      	ldr	r2, [pc, #52]	; (800df74 <TL_Init+0x6c>)
 800df40:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800df42:	4b03      	ldr	r3, [pc, #12]	; (800df50 <TL_Init+0x48>)
 800df44:	4a0c      	ldr	r2, [pc, #48]	; (800df78 <TL_Init+0x70>)
 800df46:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800df48:	f7f3 fee8 	bl	8001d1c <HW_IPCC_Init>

  return;
 800df4c:	bf00      	nop
}
 800df4e:	bd80      	pop	{r7, pc}
 800df50:	20030000 	.word	0x20030000
 800df54:	20030134 	.word	0x20030134
 800df58:	20030154 	.word	0x20030154
 800df5c:	20030164 	.word	0x20030164
 800df60:	20030170 	.word	0x20030170
 800df64:	20030178 	.word	0x20030178
 800df68:	20030180 	.word	0x20030180
 800df6c:	20030188 	.word	0x20030188
 800df70:	200301a4 	.word	0x200301a4
 800df74:	200301a8 	.word	0x200301a8
 800df78:	200301b4 	.word	0x200301b4

0800df7c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b084      	sub	sp, #16
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800df88:	4811      	ldr	r0, [pc, #68]	; (800dfd0 <TL_BLE_Init+0x54>)
 800df8a:	f000 fbff 	bl	800e78c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800df8e:	4b11      	ldr	r3, [pc, #68]	; (800dfd4 <TL_BLE_Init+0x58>)
 800df90:	685b      	ldr	r3, [r3, #4]
 800df92:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	689a      	ldr	r2, [r3, #8]
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	68da      	ldr	r2, [r3, #12]
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	4a0c      	ldr	r2, [pc, #48]	; (800dfd8 <TL_BLE_Init+0x5c>)
 800dfa8:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	4a08      	ldr	r2, [pc, #32]	; (800dfd0 <TL_BLE_Init+0x54>)
 800dfae:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800dfb0:	f7f3 feca 	bl	8001d48 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	4a08      	ldr	r2, [pc, #32]	; (800dfdc <TL_BLE_Init+0x60>)
 800dfba:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	685b      	ldr	r3, [r3, #4]
 800dfc0:	4a07      	ldr	r2, [pc, #28]	; (800dfe0 <TL_BLE_Init+0x64>)
 800dfc2:	6013      	str	r3, [r2, #0]

  return 0;
 800dfc4:	2300      	movs	r3, #0
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	3710      	adds	r7, #16
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}
 800dfce:	bf00      	nop
 800dfd0:	200301d0 	.word	0x200301d0
 800dfd4:	20030000 	.word	0x20030000
 800dfd8:	20030a48 	.word	0x20030a48
 800dfdc:	20000410 	.word	0x20000410
 800dfe0:	20000414 	.word	0x20000414

0800dfe4 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b082      	sub	sp, #8
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
 800dfec:	460b      	mov	r3, r1
 800dfee:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800dff0:	4b09      	ldr	r3, [pc, #36]	; (800e018 <TL_BLE_SendCmd+0x34>)
 800dff2:	685b      	ldr	r3, [r3, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	2201      	movs	r2, #1
 800dff8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800dffa:	4b07      	ldr	r3, [pc, #28]	; (800e018 <TL_BLE_SendCmd+0x34>)
 800dffc:	685b      	ldr	r3, [r3, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	4619      	mov	r1, r3
 800e002:	2001      	movs	r0, #1
 800e004:	f000 f96c 	bl	800e2e0 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800e008:	f7f3 fea8 	bl	8001d5c <HW_IPCC_BLE_SendCmd>

  return 0;
 800e00c:	2300      	movs	r3, #0
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3708      	adds	r7, #8
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}
 800e016:	bf00      	nop
 800e018:	20030000 	.word	0x20030000

0800e01c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b082      	sub	sp, #8
 800e020:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800e022:	e01c      	b.n	800e05e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800e024:	1d3b      	adds	r3, r7, #4
 800e026:	4619      	mov	r1, r3
 800e028:	4812      	ldr	r0, [pc, #72]	; (800e074 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e02a:	f000 fc46 	bl	800e8ba <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	7a5b      	ldrb	r3, [r3, #9]
 800e032:	2b0f      	cmp	r3, #15
 800e034:	d003      	beq.n	800e03e <HW_IPCC_BLE_RxEvtNot+0x22>
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	7a5b      	ldrb	r3, [r3, #9]
 800e03a:	2b0e      	cmp	r3, #14
 800e03c:	d105      	bne.n	800e04a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	4619      	mov	r1, r3
 800e042:	2002      	movs	r0, #2
 800e044:	f000 f94c 	bl	800e2e0 <OutputDbgTrace>
 800e048:	e004      	b.n	800e054 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	4619      	mov	r1, r3
 800e04e:	2003      	movs	r0, #3
 800e050:	f000 f946 	bl	800e2e0 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800e054:	4b08      	ldr	r3, [pc, #32]	; (800e078 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	687a      	ldr	r2, [r7, #4]
 800e05a:	4610      	mov	r0, r2
 800e05c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800e05e:	4805      	ldr	r0, [pc, #20]	; (800e074 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e060:	f000 fba4 	bl	800e7ac <LST_is_empty>
 800e064:	4603      	mov	r3, r0
 800e066:	2b00      	cmp	r3, #0
 800e068:	d0dc      	beq.n	800e024 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800e06a:	bf00      	nop
}
 800e06c:	3708      	adds	r7, #8
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}
 800e072:	bf00      	nop
 800e074:	200301d0 	.word	0x200301d0
 800e078:	20000410 	.word	0x20000410

0800e07c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800e080:	4b02      	ldr	r3, [pc, #8]	; (800e08c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	4798      	blx	r3

  return;
 800e086:	bf00      	nop
}
 800e088:	bd80      	pop	{r7, pc}
 800e08a:	bf00      	nop
 800e08c:	20000414 	.word	0x20000414

0800e090 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b084      	sub	sp, #16
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800e09c:	480d      	ldr	r0, [pc, #52]	; (800e0d4 <TL_SYS_Init+0x44>)
 800e09e:	f000 fb75 	bl	800e78c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800e0a2:	4b0d      	ldr	r3, [pc, #52]	; (800e0d8 <TL_SYS_Init+0x48>)
 800e0a4:	68db      	ldr	r3, [r3, #12]
 800e0a6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	689a      	ldr	r2, [r3, #8]
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	4a08      	ldr	r2, [pc, #32]	; (800e0d4 <TL_SYS_Init+0x44>)
 800e0b4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800e0b6:	f7f3 fe73 	bl	8001da0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	4a07      	ldr	r2, [pc, #28]	; (800e0dc <TL_SYS_Init+0x4c>)
 800e0c0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	685b      	ldr	r3, [r3, #4]
 800e0c6:	4a06      	ldr	r2, [pc, #24]	; (800e0e0 <TL_SYS_Init+0x50>)
 800e0c8:	6013      	str	r3, [r2, #0]

  return 0;
 800e0ca:	2300      	movs	r3, #0
}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	3710      	adds	r7, #16
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}
 800e0d4:	200301d8 	.word	0x200301d8
 800e0d8:	20030000 	.word	0x20030000
 800e0dc:	20000418 	.word	0x20000418
 800e0e0:	2000041c 	.word	0x2000041c

0800e0e4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b082      	sub	sp, #8
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	460b      	mov	r3, r1
 800e0ee:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800e0f0:	4b09      	ldr	r3, [pc, #36]	; (800e118 <TL_SYS_SendCmd+0x34>)
 800e0f2:	68db      	ldr	r3, [r3, #12]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	2210      	movs	r2, #16
 800e0f8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800e0fa:	4b07      	ldr	r3, [pc, #28]	; (800e118 <TL_SYS_SendCmd+0x34>)
 800e0fc:	68db      	ldr	r3, [r3, #12]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4619      	mov	r1, r3
 800e102:	2004      	movs	r0, #4
 800e104:	f000 f8ec 	bl	800e2e0 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800e108:	f7f3 fe54 	bl	8001db4 <HW_IPCC_SYS_SendCmd>

  return 0;
 800e10c:	2300      	movs	r3, #0
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3708      	adds	r7, #8
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}
 800e116:	bf00      	nop
 800e118:	20030000 	.word	0x20030000

0800e11c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800e120:	4b07      	ldr	r3, [pc, #28]	; (800e140 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800e122:	68db      	ldr	r3, [r3, #12]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	4619      	mov	r1, r3
 800e128:	2005      	movs	r0, #5
 800e12a:	f000 f8d9 	bl	800e2e0 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800e12e:	4b05      	ldr	r3, [pc, #20]	; (800e144 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	4a03      	ldr	r2, [pc, #12]	; (800e140 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800e134:	68d2      	ldr	r2, [r2, #12]
 800e136:	6812      	ldr	r2, [r2, #0]
 800e138:	4610      	mov	r0, r2
 800e13a:	4798      	blx	r3

  return;
 800e13c:	bf00      	nop
}
 800e13e:	bd80      	pop	{r7, pc}
 800e140:	20030000 	.word	0x20030000
 800e144:	20000418 	.word	0x20000418

0800e148 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b082      	sub	sp, #8
 800e14c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800e14e:	e00e      	b.n	800e16e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800e150:	1d3b      	adds	r3, r7, #4
 800e152:	4619      	mov	r1, r3
 800e154:	480b      	ldr	r0, [pc, #44]	; (800e184 <HW_IPCC_SYS_EvtNot+0x3c>)
 800e156:	f000 fbb0 	bl	800e8ba <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	4619      	mov	r1, r3
 800e15e:	2006      	movs	r0, #6
 800e160:	f000 f8be 	bl	800e2e0 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800e164:	4b08      	ldr	r3, [pc, #32]	; (800e188 <HW_IPCC_SYS_EvtNot+0x40>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	687a      	ldr	r2, [r7, #4]
 800e16a:	4610      	mov	r0, r2
 800e16c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800e16e:	4805      	ldr	r0, [pc, #20]	; (800e184 <HW_IPCC_SYS_EvtNot+0x3c>)
 800e170:	f000 fb1c 	bl	800e7ac <LST_is_empty>
 800e174:	4603      	mov	r3, r0
 800e176:	2b00      	cmp	r3, #0
 800e178:	d0ea      	beq.n	800e150 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800e17a:	bf00      	nop
}
 800e17c:	3708      	adds	r7, #8
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}
 800e182:	bf00      	nop
 800e184:	200301d8 	.word	0x200301d8
 800e188:	2000041c 	.word	0x2000041c

0800e18c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b082      	sub	sp, #8
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800e194:	4817      	ldr	r0, [pc, #92]	; (800e1f4 <TL_MM_Init+0x68>)
 800e196:	f000 faf9 	bl	800e78c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800e19a:	4817      	ldr	r0, [pc, #92]	; (800e1f8 <TL_MM_Init+0x6c>)
 800e19c:	f000 faf6 	bl	800e78c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800e1a0:	4b16      	ldr	r3, [pc, #88]	; (800e1fc <TL_MM_Init+0x70>)
 800e1a2:	691b      	ldr	r3, [r3, #16]
 800e1a4:	4a16      	ldr	r2, [pc, #88]	; (800e200 <TL_MM_Init+0x74>)
 800e1a6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800e1a8:	4b15      	ldr	r3, [pc, #84]	; (800e200 <TL_MM_Init+0x74>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	687a      	ldr	r2, [r7, #4]
 800e1ae:	6892      	ldr	r2, [r2, #8]
 800e1b0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800e1b2:	4b13      	ldr	r3, [pc, #76]	; (800e200 <TL_MM_Init+0x74>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	687a      	ldr	r2, [r7, #4]
 800e1b8:	68d2      	ldr	r2, [r2, #12]
 800e1ba:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800e1bc:	4b10      	ldr	r3, [pc, #64]	; (800e200 <TL_MM_Init+0x74>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	4a0c      	ldr	r2, [pc, #48]	; (800e1f4 <TL_MM_Init+0x68>)
 800e1c2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800e1c4:	4b0e      	ldr	r3, [pc, #56]	; (800e200 <TL_MM_Init+0x74>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	687a      	ldr	r2, [r7, #4]
 800e1ca:	6812      	ldr	r2, [r2, #0]
 800e1cc:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800e1ce:	4b0c      	ldr	r3, [pc, #48]	; (800e200 <TL_MM_Init+0x74>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	687a      	ldr	r2, [r7, #4]
 800e1d4:	6852      	ldr	r2, [r2, #4]
 800e1d6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800e1d8:	4b09      	ldr	r3, [pc, #36]	; (800e200 <TL_MM_Init+0x74>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	687a      	ldr	r2, [r7, #4]
 800e1de:	6912      	ldr	r2, [r2, #16]
 800e1e0:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800e1e2:	4b07      	ldr	r3, [pc, #28]	; (800e200 <TL_MM_Init+0x74>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	687a      	ldr	r2, [r7, #4]
 800e1e8:	6952      	ldr	r2, [r2, #20]
 800e1ea:	619a      	str	r2, [r3, #24]

  return;
 800e1ec:	bf00      	nop
}
 800e1ee:	3708      	adds	r7, #8
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}
 800e1f4:	200301c0 	.word	0x200301c0
 800e1f8:	20000408 	.word	0x20000408
 800e1fc:	20030000 	.word	0x20030000
 800e200:	20000420 	.word	0x20000420

0800e204 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b082      	sub	sp, #8
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800e20c:	6879      	ldr	r1, [r7, #4]
 800e20e:	4807      	ldr	r0, [pc, #28]	; (800e22c <TL_MM_EvtDone+0x28>)
 800e210:	f000 fb10 	bl	800e834 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800e214:	6879      	ldr	r1, [r7, #4]
 800e216:	2000      	movs	r0, #0
 800e218:	f000 f862 	bl	800e2e0 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800e21c:	4804      	ldr	r0, [pc, #16]	; (800e230 <TL_MM_EvtDone+0x2c>)
 800e21e:	f7f3 fdef 	bl	8001e00 <HW_IPCC_MM_SendFreeBuf>

  return;
 800e222:	bf00      	nop
}
 800e224:	3708      	adds	r7, #8
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}
 800e22a:	bf00      	nop
 800e22c:	20000408 	.word	0x20000408
 800e230:	0800e235 	.word	0x0800e235

0800e234 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b082      	sub	sp, #8
 800e238:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800e23a:	e00c      	b.n	800e256 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800e23c:	1d3b      	adds	r3, r7, #4
 800e23e:	4619      	mov	r1, r3
 800e240:	480a      	ldr	r0, [pc, #40]	; (800e26c <SendFreeBuf+0x38>)
 800e242:	f000 fb3a 	bl	800e8ba <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800e246:	4b0a      	ldr	r3, [pc, #40]	; (800e270 <SendFreeBuf+0x3c>)
 800e248:	691b      	ldr	r3, [r3, #16]
 800e24a:	691b      	ldr	r3, [r3, #16]
 800e24c:	687a      	ldr	r2, [r7, #4]
 800e24e:	4611      	mov	r1, r2
 800e250:	4618      	mov	r0, r3
 800e252:	f000 faef 	bl	800e834 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800e256:	4805      	ldr	r0, [pc, #20]	; (800e26c <SendFreeBuf+0x38>)
 800e258:	f000 faa8 	bl	800e7ac <LST_is_empty>
 800e25c:	4603      	mov	r3, r0
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d0ec      	beq.n	800e23c <SendFreeBuf+0x8>
  }

  return;
 800e262:	bf00      	nop
}
 800e264:	3708      	adds	r7, #8
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}
 800e26a:	bf00      	nop
 800e26c:	20000408 	.word	0x20000408
 800e270:	20030000 	.word	0x20030000

0800e274 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800e274:	b580      	push	{r7, lr}
 800e276:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800e278:	4805      	ldr	r0, [pc, #20]	; (800e290 <TL_TRACES_Init+0x1c>)
 800e27a:	f000 fa87 	bl	800e78c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800e27e:	4b05      	ldr	r3, [pc, #20]	; (800e294 <TL_TRACES_Init+0x20>)
 800e280:	695b      	ldr	r3, [r3, #20]
 800e282:	4a03      	ldr	r2, [pc, #12]	; (800e290 <TL_TRACES_Init+0x1c>)
 800e284:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800e286:	f7f3 fdf1 	bl	8001e6c <HW_IPCC_TRACES_Init>

  return;
 800e28a:	bf00      	nop
}
 800e28c:	bd80      	pop	{r7, pc}
 800e28e:	bf00      	nop
 800e290:	200301c8 	.word	0x200301c8
 800e294:	20030000 	.word	0x20030000

0800e298 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b082      	sub	sp, #8
 800e29c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800e29e:	e008      	b.n	800e2b2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800e2a0:	1d3b      	adds	r3, r7, #4
 800e2a2:	4619      	mov	r1, r3
 800e2a4:	4808      	ldr	r0, [pc, #32]	; (800e2c8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800e2a6:	f000 fb08 	bl	800e8ba <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f000 f80d 	bl	800e2cc <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800e2b2:	4805      	ldr	r0, [pc, #20]	; (800e2c8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800e2b4:	f000 fa7a 	bl	800e7ac <LST_is_empty>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d0f0      	beq.n	800e2a0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800e2be:	bf00      	nop
}
 800e2c0:	3708      	adds	r7, #8
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}
 800e2c6:	bf00      	nop
 800e2c8:	200301c8 	.word	0x200301c8

0800e2cc <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b083      	sub	sp, #12
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800e2d4:	bf00      	nop
 800e2d6:	370c      	adds	r7, #12
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2de:	4770      	bx	lr

0800e2e0 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800e2e0:	b480      	push	{r7}
 800e2e2:	b085      	sub	sp, #20
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	6039      	str	r1, [r7, #0]
 800e2ea:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800e2ec:	79fb      	ldrb	r3, [r7, #7]
 800e2ee:	2b06      	cmp	r3, #6
 800e2f0:	d849      	bhi.n	800e386 <OutputDbgTrace+0xa6>
 800e2f2:	a201      	add	r2, pc, #4	; (adr r2, 800e2f8 <OutputDbgTrace+0x18>)
 800e2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2f8:	0800e315 	.word	0x0800e315
 800e2fc:	0800e337 	.word	0x0800e337
 800e300:	0800e33d 	.word	0x0800e33d
 800e304:	0800e357 	.word	0x0800e357
 800e308:	0800e363 	.word	0x0800e363
 800e30c:	0800e369 	.word	0x0800e369
 800e310:	0800e37b 	.word	0x0800e37b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	7a5b      	ldrb	r3, [r3, #9]
 800e31c:	2b0f      	cmp	r3, #15
 800e31e:	d004      	beq.n	800e32a <OutputDbgTrace+0x4a>
 800e320:	2bff      	cmp	r3, #255	; 0xff
 800e322:	d004      	beq.n	800e32e <OutputDbgTrace+0x4e>
 800e324:	2b0e      	cmp	r3, #14
 800e326:	d004      	beq.n	800e332 <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800e328:	e004      	b.n	800e334 <OutputDbgTrace+0x54>
          break;
 800e32a:	bf00      	nop
 800e32c:	e02c      	b.n	800e388 <OutputDbgTrace+0xa8>
          break;
 800e32e:	bf00      	nop
 800e330:	e02a      	b.n	800e388 <OutputDbgTrace+0xa8>
          break;
 800e332:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800e334:	e028      	b.n	800e388 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800e33a:	e025      	b.n	800e388 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	7a5b      	ldrb	r3, [r3, #9]
 800e344:	2b0e      	cmp	r3, #14
 800e346:	d002      	beq.n	800e34e <OutputDbgTrace+0x6e>
 800e348:	2b0f      	cmp	r3, #15
 800e34a:	d002      	beq.n	800e352 <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800e34c:	e002      	b.n	800e354 <OutputDbgTrace+0x74>
          break;
 800e34e:	bf00      	nop
 800e350:	e01a      	b.n	800e388 <OutputDbgTrace+0xa8>
          break;
 800e352:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e354:	e018      	b.n	800e388 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	7a5b      	ldrb	r3, [r3, #9]
 800e35e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e360:	e012      	b.n	800e388 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800e366:	e00f      	b.n	800e388 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	7a5b      	ldrb	r3, [r3, #9]
 800e370:	2b0e      	cmp	r3, #14
 800e372:	d000      	beq.n	800e376 <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800e374:	e000      	b.n	800e378 <OutputDbgTrace+0x98>
          break;
 800e376:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e378:	e006      	b.n	800e388 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	7a5b      	ldrb	r3, [r3, #9]
 800e382:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e384:	e000      	b.n	800e388 <OutputDbgTrace+0xa8>

    default:
      break;
 800e386:	bf00      	nop
  }

  return;
 800e388:	bf00      	nop
}
 800e38a:	3714      	adds	r7, #20
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr

0800e394 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b08a      	sub	sp, #40	; 0x28
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800e39c:	2300      	movs	r3, #0
 800e39e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	3301      	adds	r3, #1
 800e3a6:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800e3a8:	6a3b      	ldr	r3, [r7, #32]
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	2bff      	cmp	r3, #255	; 0xff
 800e3ae:	d000      	beq.n	800e3b2 <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800e3b0:	e04a      	b.n	800e448 <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800e3b2:	6a3b      	ldr	r3, [r7, #32]
 800e3b4:	3302      	adds	r3, #2
 800e3b6:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 800e3b8:	69fb      	ldr	r3, [r7, #28]
 800e3ba:	881b      	ldrh	r3, [r3, #0]
 800e3bc:	b29b      	uxth	r3, r3
 800e3be:	461a      	mov	r2, r3
 800e3c0:	f640 4301 	movw	r3, #3073	; 0xc01
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d000      	beq.n	800e3ca <PeerToPeer_Event_Handler+0x36>
          break;
 800e3c8:	e03d      	b.n	800e446 <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800e3ca:	69fb      	ldr	r3, [r7, #28]
 800e3cc:	3302      	adds	r3, #2
 800e3ce:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800e3d0:	69bb      	ldr	r3, [r7, #24]
 800e3d2:	885b      	ldrh	r3, [r3, #2]
 800e3d4:	b29b      	uxth	r3, r3
 800e3d6:	461a      	mov	r2, r3
 800e3d8:	4b1e      	ldr	r3, [pc, #120]	; (800e454 <PeerToPeer_Event_Handler+0xc0>)
 800e3da:	889b      	ldrh	r3, [r3, #4]
 800e3dc:	3302      	adds	r3, #2
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	d118      	bne.n	800e414 <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 800e3e2:	2301      	movs	r3, #1
 800e3e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800e3e8:	69bb      	ldr	r3, [r7, #24]
 800e3ea:	7a1b      	ldrb	r3, [r3, #8]
 800e3ec:	f003 0301 	and.w	r3, r3, #1
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d007      	beq.n	800e404 <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800e3f8:	f107 0308 	add.w	r3, r7, #8
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f7f3 f9e7 	bl	80017d0 <P2PS_STM_App_Notification>
        break;
 800e402:	e01f      	b.n	800e444 <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800e404:	2301      	movs	r3, #1
 800e406:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800e408:	f107 0308 	add.w	r3, r7, #8
 800e40c:	4618      	mov	r0, r3
 800e40e:	f7f3 f9df 	bl	80017d0 <P2PS_STM_App_Notification>
        break;
 800e412:	e017      	b.n	800e444 <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800e414:	69bb      	ldr	r3, [r7, #24]
 800e416:	885b      	ldrh	r3, [r3, #2]
 800e418:	b29b      	uxth	r3, r3
 800e41a:	461a      	mov	r2, r3
 800e41c:	4b0d      	ldr	r3, [pc, #52]	; (800e454 <PeerToPeer_Event_Handler+0xc0>)
 800e41e:	885b      	ldrh	r3, [r3, #2]
 800e420:	3301      	adds	r3, #1
 800e422:	429a      	cmp	r2, r3
 800e424:	d10e      	bne.n	800e444 <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800e426:	2303      	movs	r3, #3
 800e428:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800e42a:	69bb      	ldr	r3, [r7, #24]
 800e42c:	88db      	ldrh	r3, [r3, #6]
 800e42e:	b29b      	uxth	r3, r3
 800e430:	b2db      	uxtb	r3, r3
 800e432:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800e434:	69bb      	ldr	r3, [r7, #24]
 800e436:	3308      	adds	r3, #8
 800e438:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);
 800e43a:	f107 0308 	add.w	r3, r7, #8
 800e43e:	4618      	mov	r0, r3
 800e440:	f7f3 f9c6 	bl	80017d0 <P2PS_STM_App_Notification>
        break;
 800e444:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800e446:	bf00      	nop
  }

  return(return_value);
 800e448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800e44c:	4618      	mov	r0, r3
 800e44e:	3728      	adds	r7, #40	; 0x28
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}
 800e454:	20000364 	.word	0x20000364

0800e458 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b08a      	sub	sp, #40	; 0x28
 800e45c:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800e45e:	484a      	ldr	r0, [pc, #296]	; (800e588 <P2PS_STM_Init+0x130>)
 800e460:	f7fe fa30 	bl	800c8c4 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800e464:	238f      	movs	r3, #143	; 0x8f
 800e466:	703b      	strb	r3, [r7, #0]
 800e468:	23e5      	movs	r3, #229	; 0xe5
 800e46a:	707b      	strb	r3, [r7, #1]
 800e46c:	23b3      	movs	r3, #179	; 0xb3
 800e46e:	70bb      	strb	r3, [r7, #2]
 800e470:	23d5      	movs	r3, #213	; 0xd5
 800e472:	70fb      	strb	r3, [r7, #3]
 800e474:	232e      	movs	r3, #46	; 0x2e
 800e476:	713b      	strb	r3, [r7, #4]
 800e478:	237f      	movs	r3, #127	; 0x7f
 800e47a:	717b      	strb	r3, [r7, #5]
 800e47c:	234a      	movs	r3, #74	; 0x4a
 800e47e:	71bb      	strb	r3, [r7, #6]
 800e480:	2398      	movs	r3, #152	; 0x98
 800e482:	71fb      	strb	r3, [r7, #7]
 800e484:	232a      	movs	r3, #42	; 0x2a
 800e486:	723b      	strb	r3, [r7, #8]
 800e488:	2348      	movs	r3, #72	; 0x48
 800e48a:	727b      	strb	r3, [r7, #9]
 800e48c:	237a      	movs	r3, #122	; 0x7a
 800e48e:	72bb      	strb	r3, [r7, #10]
 800e490:	23cc      	movs	r3, #204	; 0xcc
 800e492:	72fb      	strb	r3, [r7, #11]
 800e494:	2340      	movs	r3, #64	; 0x40
 800e496:	733b      	strb	r3, [r7, #12]
 800e498:	23fe      	movs	r3, #254	; 0xfe
 800e49a:	737b      	strb	r3, [r7, #13]
 800e49c:	2300      	movs	r3, #0
 800e49e:	73bb      	strb	r3, [r7, #14]
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800e4a4:	4639      	mov	r1, r7
 800e4a6:	4b39      	ldr	r3, [pc, #228]	; (800e58c <P2PS_STM_Init+0x134>)
 800e4a8:	9300      	str	r3, [sp, #0]
 800e4aa:	2308      	movs	r3, #8
 800e4ac:	2201      	movs	r2, #1
 800e4ae:	2002      	movs	r0, #2
 800e4b0:	f7fe fe39 	bl	800d126 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800e4b4:	2319      	movs	r3, #25
 800e4b6:	703b      	strb	r3, [r7, #0]
 800e4b8:	23ed      	movs	r3, #237	; 0xed
 800e4ba:	707b      	strb	r3, [r7, #1]
 800e4bc:	2382      	movs	r3, #130	; 0x82
 800e4be:	70bb      	strb	r3, [r7, #2]
 800e4c0:	23ae      	movs	r3, #174	; 0xae
 800e4c2:	70fb      	strb	r3, [r7, #3]
 800e4c4:	23ed      	movs	r3, #237	; 0xed
 800e4c6:	713b      	strb	r3, [r7, #4]
 800e4c8:	2321      	movs	r3, #33	; 0x21
 800e4ca:	717b      	strb	r3, [r7, #5]
 800e4cc:	234c      	movs	r3, #76	; 0x4c
 800e4ce:	71bb      	strb	r3, [r7, #6]
 800e4d0:	239d      	movs	r3, #157	; 0x9d
 800e4d2:	71fb      	strb	r3, [r7, #7]
 800e4d4:	2341      	movs	r3, #65	; 0x41
 800e4d6:	723b      	strb	r3, [r7, #8]
 800e4d8:	2345      	movs	r3, #69	; 0x45
 800e4da:	727b      	strb	r3, [r7, #9]
 800e4dc:	2322      	movs	r3, #34	; 0x22
 800e4de:	72bb      	strb	r3, [r7, #10]
 800e4e0:	238e      	movs	r3, #142	; 0x8e
 800e4e2:	72fb      	strb	r3, [r7, #11]
 800e4e4:	2341      	movs	r3, #65	; 0x41
 800e4e6:	733b      	strb	r3, [r7, #12]
 800e4e8:	23fe      	movs	r3, #254	; 0xfe
 800e4ea:	737b      	strb	r3, [r7, #13]
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	73bb      	strb	r3, [r7, #14]
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800e4f4:	4b25      	ldr	r3, [pc, #148]	; (800e58c <P2PS_STM_Init+0x134>)
 800e4f6:	8818      	ldrh	r0, [r3, #0]
 800e4f8:	463a      	mov	r2, r7
 800e4fa:	4b25      	ldr	r3, [pc, #148]	; (800e590 <P2PS_STM_Init+0x138>)
 800e4fc:	9305      	str	r3, [sp, #20]
 800e4fe:	2301      	movs	r3, #1
 800e500:	9304      	str	r3, [sp, #16]
 800e502:	230a      	movs	r3, #10
 800e504:	9303      	str	r3, [sp, #12]
 800e506:	2301      	movs	r3, #1
 800e508:	9302      	str	r3, [sp, #8]
 800e50a:	2300      	movs	r3, #0
 800e50c:	9301      	str	r3, [sp, #4]
 800e50e:	2306      	movs	r3, #6
 800e510:	9300      	str	r3, [sp, #0]
 800e512:	2302      	movs	r3, #2
 800e514:	2102      	movs	r1, #2
 800e516:	f7fe feb5 	bl	800d284 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800e51a:	2319      	movs	r3, #25
 800e51c:	703b      	strb	r3, [r7, #0]
 800e51e:	23ed      	movs	r3, #237	; 0xed
 800e520:	707b      	strb	r3, [r7, #1]
 800e522:	2382      	movs	r3, #130	; 0x82
 800e524:	70bb      	strb	r3, [r7, #2]
 800e526:	23ae      	movs	r3, #174	; 0xae
 800e528:	70fb      	strb	r3, [r7, #3]
 800e52a:	23ed      	movs	r3, #237	; 0xed
 800e52c:	713b      	strb	r3, [r7, #4]
 800e52e:	2321      	movs	r3, #33	; 0x21
 800e530:	717b      	strb	r3, [r7, #5]
 800e532:	234c      	movs	r3, #76	; 0x4c
 800e534:	71bb      	strb	r3, [r7, #6]
 800e536:	239d      	movs	r3, #157	; 0x9d
 800e538:	71fb      	strb	r3, [r7, #7]
 800e53a:	2341      	movs	r3, #65	; 0x41
 800e53c:	723b      	strb	r3, [r7, #8]
 800e53e:	2345      	movs	r3, #69	; 0x45
 800e540:	727b      	strb	r3, [r7, #9]
 800e542:	2322      	movs	r3, #34	; 0x22
 800e544:	72bb      	strb	r3, [r7, #10]
 800e546:	238e      	movs	r3, #142	; 0x8e
 800e548:	72fb      	strb	r3, [r7, #11]
 800e54a:	2342      	movs	r3, #66	; 0x42
 800e54c:	733b      	strb	r3, [r7, #12]
 800e54e:	23fe      	movs	r3, #254	; 0xfe
 800e550:	737b      	strb	r3, [r7, #13]
 800e552:	2300      	movs	r3, #0
 800e554:	73bb      	strb	r3, [r7, #14]
 800e556:	2300      	movs	r3, #0
 800e558:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800e55a:	4b0c      	ldr	r3, [pc, #48]	; (800e58c <P2PS_STM_Init+0x134>)
 800e55c:	8818      	ldrh	r0, [r3, #0]
 800e55e:	463a      	mov	r2, r7
 800e560:	4b0c      	ldr	r3, [pc, #48]	; (800e594 <P2PS_STM_Init+0x13c>)
 800e562:	9305      	str	r3, [sp, #20]
 800e564:	2301      	movs	r3, #1
 800e566:	9304      	str	r3, [sp, #16]
 800e568:	230a      	movs	r3, #10
 800e56a:	9303      	str	r3, [sp, #12]
 800e56c:	2301      	movs	r3, #1
 800e56e:	9302      	str	r3, [sp, #8]
 800e570:	2300      	movs	r3, #0
 800e572:	9301      	str	r3, [sp, #4]
 800e574:	2310      	movs	r3, #16
 800e576:	9300      	str	r3, [sp, #0]
 800e578:	2302      	movs	r3, #2
 800e57a:	2102      	movs	r1, #2
 800e57c:	f7fe fe82 	bl	800d284 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif


  return;
 800e580:	bf00      	nop
}
 800e582:	3710      	adds	r7, #16
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}
 800e588:	0800e395 	.word	0x0800e395
 800e58c:	20000364 	.word	0x20000364
 800e590:	20000366 	.word	0x20000366
 800e594:	20000368 	.word	0x20000368

0800e598 <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b086      	sub	sp, #24
 800e59c:	af02      	add	r7, sp, #8
 800e59e:	4603      	mov	r3, r0
 800e5a0:	6039      	str	r1, [r7, #0]
 800e5a2:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800e5a4:	2342      	movs	r3, #66	; 0x42
 800e5a6:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800e5a8:	88fb      	ldrh	r3, [r7, #6]
 800e5aa:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800e5ae:	4293      	cmp	r3, r2
 800e5b0:	d000      	beq.n	800e5b4 <P2PS_STM_App_Update_Char+0x1c>
                             (uint8_t *)  pPayload);

      break;

    default:
      break;
 800e5b2:	e00c      	b.n	800e5ce <P2PS_STM_App_Update_Char+0x36>
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800e5b4:	4b08      	ldr	r3, [pc, #32]	; (800e5d8 <P2PS_STM_App_Update_Char+0x40>)
 800e5b6:	8818      	ldrh	r0, [r3, #0]
 800e5b8:	4b07      	ldr	r3, [pc, #28]	; (800e5d8 <P2PS_STM_App_Update_Char+0x40>)
 800e5ba:	8899      	ldrh	r1, [r3, #4]
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	9300      	str	r3, [sp, #0]
 800e5c0:	2302      	movs	r3, #2
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	f7fe ff48 	bl	800d458 <aci_gatt_update_char_value>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	73fb      	strb	r3, [r7, #15]
      break;
 800e5cc:	bf00      	nop
  }

  return result;
 800e5ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3710      	adds	r7, #16
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}
 800e5d8:	20000364 	.word	0x20000364

0800e5dc <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b086      	sub	sp, #24
 800e5e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5e2:	f3ef 8310 	mrs	r3, PRIMASK
 800e5e6:	60fb      	str	r3, [r7, #12]
  return(result);
 800e5e8:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800e5ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e5ec:	b672      	cpsid	i

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800e5ee:	1cbb      	adds	r3, r7, #2
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	4812      	ldr	r0, [pc, #72]	; (800e63c <DbgTrace_TxCpltCallback+0x60>)
 800e5f4:	f000 fbd7 	bl	800eda6 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800e5f8:	1cbb      	adds	r3, r7, #2
 800e5fa:	4619      	mov	r1, r3
 800e5fc:	480f      	ldr	r0, [pc, #60]	; (800e63c <DbgTrace_TxCpltCallback+0x60>)
 800e5fe:	f000 fcc6 	bl	800ef8e <CircularQueue_Sense>
 800e602:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800e604:	693b      	ldr	r3, [r7, #16]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d00b      	beq.n	800e622 <DbgTrace_TxCpltCallback+0x46>
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800e614:	887b      	ldrh	r3, [r7, #2]
 800e616:	4a0a      	ldr	r2, [pc, #40]	; (800e640 <DbgTrace_TxCpltCallback+0x64>)
 800e618:	4619      	mov	r1, r3
 800e61a:	6938      	ldr	r0, [r7, #16]
 800e61c:	f7f3 fd99 	bl	8002152 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800e620:	e007      	b.n	800e632 <DbgTrace_TxCpltCallback+0x56>
    DbgTracePeripheralReady = SET;
 800e622:	4b08      	ldr	r3, [pc, #32]	; (800e644 <DbgTrace_TxCpltCallback+0x68>)
 800e624:	2201      	movs	r2, #1
 800e626:	701a      	strb	r2, [r3, #0]
 800e628:	697b      	ldr	r3, [r7, #20]
 800e62a:	607b      	str	r3, [r7, #4]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f383 8810 	msr	PRIMASK, r3
}
 800e632:	bf00      	nop
 800e634:	3718      	adds	r7, #24
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}
 800e63a:	bf00      	nop
 800e63c:	20000424 	.word	0x20000424
 800e640:	0800e5dd 	.word	0x0800e5dd
 800e644:	20000029 	.word	0x20000029

0800e648 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b082      	sub	sp, #8
 800e64c:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800e64e:	f7f3 fd7a 	bl	8002146 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800e652:	2302      	movs	r3, #2
 800e654:	9300      	str	r3, [sp, #0]
 800e656:	2300      	movs	r3, #0
 800e658:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e65c:	4903      	ldr	r1, [pc, #12]	; (800e66c <DbgTraceInit+0x24>)
 800e65e:	4804      	ldr	r0, [pc, #16]	; (800e670 <DbgTraceInit+0x28>)
 800e660:	f000 f948 	bl	800e8f4 <CircularQueue_Init>
#endif 
#endif
  return;
 800e664:	bf00      	nop
}
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}
 800e66a:	bf00      	nop
 800e66c:	20000444 	.word	0x20000444
 800e670:	20000424 	.word	0x20000424

0800e674 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b084      	sub	sp, #16
 800e678:	af00      	add	r7, sp, #0
 800e67a:	60f8      	str	r0, [r7, #12]
 800e67c:	60b9      	str	r1, [r7, #8]
 800e67e:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800e680:	687a      	ldr	r2, [r7, #4]
 800e682:	68b9      	ldr	r1, [r7, #8]
 800e684:	68f8      	ldr	r0, [r7, #12]
 800e686:	f000 f805 	bl	800e694 <DbgTraceWrite>
 800e68a:	4603      	mov	r3, r0
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3710      	adds	r7, #16
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}

0800e694 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b08a      	sub	sp, #40	; 0x28
 800e698:	af00      	add	r7, sp, #0
 800e69a:	60f8      	str	r0, [r7, #12]
 800e69c:	60b9      	str	r1, [r7, #8]
 800e69e:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6a4:	f3ef 8310 	mrs	r3, PRIMASK
 800e6a8:	61bb      	str	r3, [r7, #24]
  return(result);
 800e6aa:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800e6ac:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6b4:	d102      	bne.n	800e6bc <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	627b      	str	r3, [r7, #36]	; 0x24
 800e6ba:	e034      	b.n	800e726 <DbgTraceWrite+0x92>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	2b01      	cmp	r3, #1
 800e6c0:	d006      	beq.n	800e6d0 <DbgTraceWrite+0x3c>
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	2b02      	cmp	r3, #2
 800e6c6:	d003      	beq.n	800e6d0 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800e6c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e6cc:	627b      	str	r3, [r7, #36]	; 0x24
 800e6ce:	e02a      	b.n	800e726 <DbgTraceWrite+0x92>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d027      	beq.n	800e726 <DbgTraceWrite+0x92>
  {
    chars_written = bufSize;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800e6da:	b672      	cpsid	i
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	b29a      	uxth	r2, r3
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	68b9      	ldr	r1, [r7, #8]
 800e6e4:	4812      	ldr	r0, [pc, #72]	; (800e730 <DbgTraceWrite+0x9c>)
 800e6e6:	f000 f937 	bl	800e958 <CircularQueue_Add>
 800e6ea:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800e6ec:	69fb      	ldr	r3, [r7, #28]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d014      	beq.n	800e71c <DbgTraceWrite+0x88>
 800e6f2:	4b10      	ldr	r3, [pc, #64]	; (800e734 <DbgTraceWrite+0xa0>)
 800e6f4:	781b      	ldrb	r3, [r3, #0]
 800e6f6:	b2db      	uxtb	r3, r3
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d00f      	beq.n	800e71c <DbgTraceWrite+0x88>
    {
      DbgTracePeripheralReady = RESET;
 800e6fc:	4b0d      	ldr	r3, [pc, #52]	; (800e734 <DbgTraceWrite+0xa0>)
 800e6fe:	2200      	movs	r2, #0
 800e700:	701a      	strb	r2, [r3, #0]
 800e702:	6a3b      	ldr	r3, [r7, #32]
 800e704:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	f383 8810 	msr	PRIMASK, r3
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	b29b      	uxth	r3, r3
 800e710:	4a09      	ldr	r2, [pc, #36]	; (800e738 <DbgTraceWrite+0xa4>)
 800e712:	4619      	mov	r1, r3
 800e714:	69f8      	ldr	r0, [r7, #28]
 800e716:	f7f3 fd1c 	bl	8002152 <DbgOutputTraces>
 800e71a:	e004      	b.n	800e726 <DbgTraceWrite+0x92>
 800e71c:	6a3b      	ldr	r3, [r7, #32]
 800e71e:	613b      	str	r3, [r7, #16]
 800e720:	693b      	ldr	r3, [r7, #16]
 800e722:	f383 8810 	msr	PRIMASK, r3
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800e726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3728      	adds	r7, #40	; 0x28
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}
 800e730:	20000424 	.word	0x20000424
 800e734:	20000029 	.word	0x20000029
 800e738:	0800e5dd 	.word	0x0800e5dd

0800e73c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800e73c:	b480      	push	{r7}
 800e73e:	b085      	sub	sp, #20
 800e740:	af00      	add	r7, sp, #0
 800e742:	4603      	mov	r3, r0
 800e744:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800e746:	4b0f      	ldr	r3, [pc, #60]	; (800e784 <OTP_Read+0x48>)
 800e748:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800e74a:	e002      	b.n	800e752 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	3b08      	subs	r3, #8
 800e750:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	3307      	adds	r3, #7
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	79fa      	ldrb	r2, [r7, #7]
 800e75a:	429a      	cmp	r2, r3
 800e75c:	d003      	beq.n	800e766 <OTP_Read+0x2a>
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	4a09      	ldr	r2, [pc, #36]	; (800e788 <OTP_Read+0x4c>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d1f2      	bne.n	800e74c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	3307      	adds	r3, #7
 800e76a:	781b      	ldrb	r3, [r3, #0]
 800e76c:	79fa      	ldrb	r2, [r7, #7]
 800e76e:	429a      	cmp	r2, r3
 800e770:	d001      	beq.n	800e776 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800e772:	2300      	movs	r3, #0
 800e774:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800e776:	68fb      	ldr	r3, [r7, #12]
}
 800e778:	4618      	mov	r0, r3
 800e77a:	3714      	adds	r7, #20
 800e77c:	46bd      	mov	sp, r7
 800e77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e782:	4770      	bx	lr
 800e784:	1fff73f8 	.word	0x1fff73f8
 800e788:	1fff7000 	.word	0x1fff7000

0800e78c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800e78c:	b480      	push	{r7}
 800e78e:	b083      	sub	sp, #12
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	687a      	ldr	r2, [r7, #4]
 800e798:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	687a      	ldr	r2, [r7, #4]
 800e79e:	605a      	str	r2, [r3, #4]
}
 800e7a0:	bf00      	nop
 800e7a2:	370c      	adds	r7, #12
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7aa:	4770      	bx	lr

0800e7ac <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800e7ac:	b480      	push	{r7}
 800e7ae:	b087      	sub	sp, #28
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e7b4:	f3ef 8310 	mrs	r3, PRIMASK
 800e7b8:	60fb      	str	r3, [r7, #12]
  return(result);
 800e7ba:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e7bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800e7be:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	687a      	ldr	r2, [r7, #4]
 800e7c6:	429a      	cmp	r2, r3
 800e7c8:	d102      	bne.n	800e7d0 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	75fb      	strb	r3, [r7, #23]
 800e7ce:	e001      	b.n	800e7d4 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	75fb      	strb	r3, [r7, #23]
 800e7d4:	693b      	ldr	r3, [r7, #16]
 800e7d6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800e7de:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	371c      	adds	r7, #28
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ea:	4770      	bx	lr

0800e7ec <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b087      	sub	sp, #28
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
 800e7f4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e7f6:	f3ef 8310 	mrs	r3, PRIMASK
 800e7fa:	60fb      	str	r3, [r7, #12]
  return(result);
 800e7fc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e7fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e800:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681a      	ldr	r2, [r3, #0]
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	687a      	ldr	r2, [r7, #4]
 800e80e:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	683a      	ldr	r2, [r7, #0]
 800e814:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800e816:	683b      	ldr	r3, [r7, #0]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	683a      	ldr	r2, [r7, #0]
 800e81c:	605a      	str	r2, [r3, #4]
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e828:	bf00      	nop
 800e82a:	371c      	adds	r7, #28
 800e82c:	46bd      	mov	sp, r7
 800e82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e832:	4770      	bx	lr

0800e834 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800e834:	b480      	push	{r7}
 800e836:	b087      	sub	sp, #28
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
 800e83c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e83e:	f3ef 8310 	mrs	r3, PRIMASK
 800e842:	60fb      	str	r3, [r7, #12]
  return(result);
 800e844:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e846:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e848:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	687a      	ldr	r2, [r7, #4]
 800e84e:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	685a      	ldr	r2, [r3, #4]
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	683a      	ldr	r2, [r7, #0]
 800e85c:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	685b      	ldr	r3, [r3, #4]
 800e862:	683a      	ldr	r2, [r7, #0]
 800e864:	601a      	str	r2, [r3, #0]
 800e866:	697b      	ldr	r3, [r7, #20]
 800e868:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e870:	bf00      	nop
 800e872:	371c      	adds	r7, #28
 800e874:	46bd      	mov	sp, r7
 800e876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87a:	4770      	bx	lr

0800e87c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800e87c:	b480      	push	{r7}
 800e87e:	b087      	sub	sp, #28
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e884:	f3ef 8310 	mrs	r3, PRIMASK
 800e888:	60fb      	str	r3, [r7, #12]
  return(result);
 800e88a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e88c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e88e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	685b      	ldr	r3, [r3, #4]
 800e894:	687a      	ldr	r2, [r7, #4]
 800e896:	6812      	ldr	r2, [r2, #0]
 800e898:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	687a      	ldr	r2, [r7, #4]
 800e8a0:	6852      	ldr	r2, [r2, #4]
 800e8a2:	605a      	str	r2, [r3, #4]
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e8a8:	693b      	ldr	r3, [r7, #16]
 800e8aa:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e8ae:	bf00      	nop
 800e8b0:	371c      	adds	r7, #28
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b8:	4770      	bx	lr

0800e8ba <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800e8ba:	b580      	push	{r7, lr}
 800e8bc:	b086      	sub	sp, #24
 800e8be:	af00      	add	r7, sp, #0
 800e8c0:	6078      	str	r0, [r7, #4]
 800e8c2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8c4:	f3ef 8310 	mrs	r3, PRIMASK
 800e8c8:	60fb      	str	r3, [r7, #12]
  return(result);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e8cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e8ce:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681a      	ldr	r2, [r3, #0]
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f7ff ffcd 	bl	800e87c <LST_remove_node>
 800e8e2:	697b      	ldr	r3, [r7, #20]
 800e8e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e8ec:	bf00      	nop
 800e8ee:	3718      	adds	r7, #24
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b085      	sub	sp, #20
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	60f8      	str	r0, [r7, #12]
 800e8fc:	60b9      	str	r1, [r7, #8]
 800e8fe:	607a      	str	r2, [r7, #4]
 800e900:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	68ba      	ldr	r2, [r7, #8]
 800e906:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	2200      	movs	r2, #0
 800e90c:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	2200      	movs	r2, #0
 800e912:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	2200      	movs	r2, #0
 800e918:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	2200      	movs	r2, #0
 800e91e:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	687a      	ldr	r2, [r7, #4]
 800e924:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	887a      	ldrh	r2, [r7, #2]
 800e92a:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	7e3a      	ldrb	r2, [r7, #24]
 800e930:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800e932:	7e3b      	ldrb	r3, [r7, #24]
 800e934:	f003 0302 	and.w	r3, r3, #2
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d006      	beq.n	800e94a <CircularQueue_Init+0x56>
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	891b      	ldrh	r3, [r3, #8]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d002      	beq.n	800e94a <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800e944:	f04f 33ff 	mov.w	r3, #4294967295
 800e948:	e000      	b.n	800e94c <CircularQueue_Init+0x58>
  }
  return 0;
 800e94a:	2300      	movs	r3, #0
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	3714      	adds	r7, #20
 800e950:	46bd      	mov	sp, r7
 800e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e956:	4770      	bx	lr

0800e958 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b08e      	sub	sp, #56	; 0x38
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	60f8      	str	r0, [r7, #12]
 800e960:	60b9      	str	r1, [r7, #8]
 800e962:	603b      	str	r3, [r7, #0]
 800e964:	4613      	mov	r3, r2
 800e966:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800e968:	2300      	movs	r3, #0
 800e96a:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800e96c:	2300      	movs	r3, #0
 800e96e:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800e970:	2300      	movs	r3, #0
 800e972:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800e974:	2300      	movs	r3, #0
 800e976:	62bb      	str	r3, [r7, #40]	; 0x28
 800e978:	2300      	movs	r3, #0
 800e97a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800e97c:	2300      	movs	r3, #0
 800e97e:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800e980:	2300      	movs	r3, #0
 800e982:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	891b      	ldrh	r3, [r3, #8]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d101      	bne.n	800e990 <CircularQueue_Add+0x38>
 800e98c:	2302      	movs	r3, #2
 800e98e:	e000      	b.n	800e992 <CircularQueue_Add+0x3a>
 800e990:	2300      	movs	r3, #0
 800e992:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	695b      	ldr	r3, [r3, #20]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d02a      	beq.n	800e9f2 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	891b      	ldrh	r3, [r3, #8]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d123      	bne.n	800e9ec <CircularQueue_Add+0x94>
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	681a      	ldr	r2, [r3, #0]
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	691b      	ldr	r3, [r3, #16]
 800e9ac:	4413      	add	r3, r2
 800e9ae:	781b      	ldrb	r3, [r3, #0]
 800e9b0:	b29a      	uxth	r2, r3
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	6819      	ldr	r1, [r3, #0]
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	691b      	ldr	r3, [r3, #16]
 800e9ba:	1c58      	adds	r0, r3, #1
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	685b      	ldr	r3, [r3, #4]
 800e9c0:	4298      	cmp	r0, r3
 800e9c2:	d306      	bcc.n	800e9d2 <CircularQueue_Add+0x7a>
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	6918      	ldr	r0, [r3, #16]
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	685b      	ldr	r3, [r3, #4]
 800e9cc:	1ac3      	subs	r3, r0, r3
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	e002      	b.n	800e9d8 <CircularQueue_Add+0x80>
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	691b      	ldr	r3, [r3, #16]
 800e9d6:	3301      	adds	r3, #1
 800e9d8:	440b      	add	r3, r1
 800e9da:	781b      	ldrb	r3, [r3, #0]
 800e9dc:	b29b      	uxth	r3, r3
 800e9de:	021b      	lsls	r3, r3, #8
 800e9e0:	b29b      	uxth	r3, r3
 800e9e2:	4413      	add	r3, r2
 800e9e4:	b29b      	uxth	r3, r3
 800e9e6:	3302      	adds	r3, #2
 800e9e8:	b29b      	uxth	r3, r3
 800e9ea:	e001      	b.n	800e9f0 <CircularQueue_Add+0x98>
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	891b      	ldrh	r3, [r3, #8]
 800e9f0:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	891b      	ldrh	r3, [r3, #8]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d002      	beq.n	800ea00 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	891b      	ldrh	r3, [r3, #8]
 800e9fe:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	691a      	ldr	r2, [r3, #16]
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	68db      	ldr	r3, [r3, #12]
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d307      	bcc.n	800ea1c <CircularQueue_Add+0xc4>
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	685a      	ldr	r2, [r3, #4]
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	6919      	ldr	r1, [r3, #16]
 800ea14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ea16:	440b      	add	r3, r1
 800ea18:	1ad3      	subs	r3, r2, r3
 800ea1a:	e000      	b.n	800ea1e <CircularQueue_Add+0xc6>
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800ea20:	88fa      	ldrh	r2, [r7, #6]
 800ea22:	7ffb      	ldrb	r3, [r7, #31]
 800ea24:	4413      	add	r3, r2
 800ea26:	461a      	mov	r2, r3
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	fb03 f302 	mul.w	r3, r3, r2
 800ea2e:	69ba      	ldr	r2, [r7, #24]
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d80b      	bhi.n	800ea4c <CircularQueue_Add+0xf4>
 800ea34:	88fa      	ldrh	r2, [r7, #6]
 800ea36:	7ffb      	ldrb	r3, [r7, #31]
 800ea38:	4413      	add	r3, r2
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	69bb      	ldr	r3, [r7, #24]
 800ea3e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ea42:	fb02 f201 	mul.w	r2, r2, r1
 800ea46:	1a9b      	subs	r3, r3, r2
 800ea48:	b2db      	uxtb	r3, r3
 800ea4a:	e000      	b.n	800ea4e <CircularQueue_Add+0xf6>
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800ea50:	7dfa      	ldrb	r2, [r7, #23]
 800ea52:	7ffb      	ldrb	r3, [r7, #31]
 800ea54:	429a      	cmp	r2, r3
 800ea56:	bf8c      	ite	hi
 800ea58:	2301      	movhi	r3, #1
 800ea5a:	2300      	movls	r3, #0
 800ea5c:	b2db      	uxtb	r3, r3
 800ea5e:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800ea60:	7fbb      	ldrb	r3, [r7, #30]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d008      	beq.n	800ea78 <CircularQueue_Add+0x120>
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	7f1b      	ldrb	r3, [r3, #28]
 800ea6a:	f003 0301 	and.w	r3, r3, #1
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d002      	beq.n	800ea78 <CircularQueue_Add+0x120>
 800ea72:	7dfb      	ldrb	r3, [r7, #23]
 800ea74:	b29b      	uxth	r3, r3
 800ea76:	e000      	b.n	800ea7a <CircularQueue_Add+0x122>
 800ea78:	8bbb      	ldrh	r3, [r7, #28]
 800ea7a:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800ea7c:	7fbb      	ldrb	r3, [r7, #30]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d008      	beq.n	800ea94 <CircularQueue_Add+0x13c>
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	7f1b      	ldrb	r3, [r3, #28]
 800ea86:	f003 0302 	and.w	r3, r3, #2
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d002      	beq.n	800ea94 <CircularQueue_Add+0x13c>
 800ea8e:	7ffb      	ldrb	r3, [r7, #31]
 800ea90:	b29b      	uxth	r3, r3
 800ea92:	e000      	b.n	800ea96 <CircularQueue_Add+0x13e>
 800ea94:	8bbb      	ldrh	r3, [r7, #28]
 800ea96:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800ea98:	88fb      	ldrh	r3, [r7, #6]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	f000 817e 	beq.w	800ed9c <CircularQueue_Add+0x444>
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	695a      	ldr	r2, [r3, #20]
 800eaa4:	88f9      	ldrh	r1, [r7, #6]
 800eaa6:	7ffb      	ldrb	r3, [r7, #31]
 800eaa8:	440b      	add	r3, r1
 800eaaa:	4619      	mov	r1, r3
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	fb03 f301 	mul.w	r3, r3, r1
 800eab2:	441a      	add	r2, r3
 800eab4:	8bbb      	ldrh	r3, [r7, #28]
 800eab6:	441a      	add	r2, r3
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	685b      	ldr	r3, [r3, #4]
 800eabc:	429a      	cmp	r2, r3
 800eabe:	f200 816d 	bhi.w	800ed9c <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800eac2:	2300      	movs	r3, #0
 800eac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eac6:	e14a      	b.n	800ed5e <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	691a      	ldr	r2, [r3, #16]
 800eacc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eace:	441a      	add	r2, r3
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	685b      	ldr	r3, [r3, #4]
 800ead4:	429a      	cmp	r2, r3
 800ead6:	d307      	bcc.n	800eae8 <CircularQueue_Add+0x190>
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	691a      	ldr	r2, [r3, #16]
 800eadc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eade:	441a      	add	r2, r3
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	685b      	ldr	r3, [r3, #4]
 800eae4:	1ad3      	subs	r3, r2, r3
 800eae6:	e003      	b.n	800eaf0 <CircularQueue_Add+0x198>
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	691a      	ldr	r2, [r3, #16]
 800eaec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eaee:	4413      	add	r3, r2
 800eaf0:	68fa      	ldr	r2, [r7, #12]
 800eaf2:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	691b      	ldr	r3, [r3, #16]
 800eaf8:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	891b      	ldrh	r3, [r3, #8]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d130      	bne.n	800eb64 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	681a      	ldr	r2, [r3, #0]
 800eb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb08:	1c59      	adds	r1, r3, #1
 800eb0a:	6339      	str	r1, [r7, #48]	; 0x30
 800eb0c:	4413      	add	r3, r2
 800eb0e:	88fa      	ldrh	r2, [r7, #6]
 800eb10:	b2d2      	uxtb	r2, r2
 800eb12:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	685b      	ldr	r3, [r3, #4]
 800eb18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d304      	bcc.n	800eb28 <CircularQueue_Add+0x1d0>
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	685b      	ldr	r3, [r3, #4]
 800eb22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb24:	1ad3      	subs	r3, r2, r3
 800eb26:	e000      	b.n	800eb2a <CircularQueue_Add+0x1d2>
 800eb28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb2a:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800eb2c:	88fb      	ldrh	r3, [r7, #6]
 800eb2e:	0a1b      	lsrs	r3, r3, #8
 800eb30:	b298      	uxth	r0, r3
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	681a      	ldr	r2, [r3, #0]
 800eb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb38:	1c59      	adds	r1, r3, #1
 800eb3a:	6339      	str	r1, [r7, #48]	; 0x30
 800eb3c:	4413      	add	r3, r2
 800eb3e:	b2c2      	uxtb	r2, r0
 800eb40:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	685b      	ldr	r3, [r3, #4]
 800eb46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb48:	429a      	cmp	r2, r3
 800eb4a:	d304      	bcc.n	800eb56 <CircularQueue_Add+0x1fe>
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	685b      	ldr	r3, [r3, #4]
 800eb50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb52:	1ad3      	subs	r3, r2, r3
 800eb54:	e000      	b.n	800eb58 <CircularQueue_Add+0x200>
 800eb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb58:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	695b      	ldr	r3, [r3, #20]
 800eb5e:	1c9a      	adds	r2, r3, #2
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800eb64:	88fa      	ldrh	r2, [r7, #6]
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	6859      	ldr	r1, [r3, #4]
 800eb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb6c:	1acb      	subs	r3, r1, r3
 800eb6e:	4293      	cmp	r3, r2
 800eb70:	bf28      	it	cs
 800eb72:	4613      	movcs	r3, r2
 800eb74:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800eb76:	88fb      	ldrh	r3, [r7, #6]
 800eb78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d007      	beq.n	800eb8e <CircularQueue_Add+0x236>
 800eb7e:	88fb      	ldrh	r3, [r7, #6]
 800eb80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb82:	429a      	cmp	r2, r3
 800eb84:	d225      	bcs.n	800ebd2 <CircularQueue_Add+0x27a>
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	7f1b      	ldrb	r3, [r3, #28]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d121      	bne.n	800ebd2 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	681a      	ldr	r2, [r3, #0]
 800eb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb94:	18d0      	adds	r0, r2, r3
 800eb96:	88fb      	ldrh	r3, [r7, #6]
 800eb98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb9a:	fb02 f303 	mul.w	r3, r2, r3
 800eb9e:	68ba      	ldr	r2, [r7, #8]
 800eba0:	4413      	add	r3, r2
 800eba2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eba4:	4619      	mov	r1, r3
 800eba6:	f004 fc59 	bl	801345c <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	695a      	ldr	r2, [r3, #20]
 800ebae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb0:	441a      	add	r2, r3
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800ebba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebbc:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800ebbe:	88fa      	ldrh	r2, [r7, #6]
 800ebc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc2:	1ad3      	subs	r3, r2, r3
 800ebc4:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800ebc6:	7ffb      	ldrb	r3, [r7, #31]
 800ebc8:	b29a      	uxth	r2, r3
 800ebca:	88fb      	ldrh	r3, [r7, #6]
 800ebcc:	4413      	add	r3, r2
 800ebce:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ebd0:	e0a4      	b.n	800ed1c <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800ebd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	f000 80a1 	beq.w	800ed1c <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	7f1b      	ldrb	r3, [r3, #28]
 800ebde:	f003 0301 	and.w	r3, r3, #1
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d03a      	beq.n	800ec5c <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	891b      	ldrh	r3, [r3, #8]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d10d      	bne.n	800ec0a <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	681a      	ldr	r2, [r3, #0]
 800ebf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf4:	3b02      	subs	r3, #2
 800ebf6:	4413      	add	r3, r2
 800ebf8:	22ff      	movs	r2, #255	; 0xff
 800ebfa:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	681a      	ldr	r2, [r3, #0]
 800ec00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec02:	3b01      	subs	r3, #1
 800ec04:	4413      	add	r3, r2
 800ec06:	22ff      	movs	r2, #255	; 0xff
 800ec08:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	695a      	ldr	r2, [r3, #20]
 800ec0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec10:	441a      	add	r2, r3
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800ec16:	2300      	movs	r3, #0
 800ec18:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800ec1a:	88fb      	ldrh	r3, [r7, #6]
 800ec1c:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800ec1e:	2300      	movs	r3, #0
 800ec20:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	891b      	ldrh	r3, [r3, #8]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d16f      	bne.n	800ed0a <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681a      	ldr	r2, [r3, #0]
 800ec2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec30:	1c59      	adds	r1, r3, #1
 800ec32:	6339      	str	r1, [r7, #48]	; 0x30
 800ec34:	4413      	add	r3, r2
 800ec36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec38:	b2d2      	uxtb	r2, r2
 800ec3a:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800ec3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec3e:	0a18      	lsrs	r0, r3, #8
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	681a      	ldr	r2, [r3, #0]
 800ec44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec46:	1c59      	adds	r1, r3, #1
 800ec48:	6339      	str	r1, [r7, #48]	; 0x30
 800ec4a:	4413      	add	r3, r2
 800ec4c:	b2c2      	uxtb	r2, r0
 800ec4e:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	695b      	ldr	r3, [r3, #20]
 800ec54:	1c9a      	adds	r2, r3, #2
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	615a      	str	r2, [r3, #20]
 800ec5a:	e056      	b.n	800ed0a <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	7f1b      	ldrb	r3, [r3, #28]
 800ec60:	f003 0302 	and.w	r3, r3, #2
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d050      	beq.n	800ed0a <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	891b      	ldrh	r3, [r3, #8]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d14a      	bne.n	800ed06 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	681a      	ldr	r2, [r3, #0]
 800ec74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec76:	3b02      	subs	r3, #2
 800ec78:	4413      	add	r3, r2
 800ec7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec7c:	b2d2      	uxtb	r2, r2
 800ec7e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800ec80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec82:	0a19      	lsrs	r1, r3, #8
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	681a      	ldr	r2, [r3, #0]
 800ec88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec8a:	3b01      	subs	r3, #1
 800ec8c:	4413      	add	r3, r2
 800ec8e:	b2ca      	uxtb	r2, r1
 800ec90:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	681a      	ldr	r2, [r3, #0]
 800ec96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec98:	18d0      	adds	r0, r2, r3
 800ec9a:	88fb      	ldrh	r3, [r7, #6]
 800ec9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec9e:	fb02 f303 	mul.w	r3, r2, r3
 800eca2:	68ba      	ldr	r2, [r7, #8]
 800eca4:	4413      	add	r3, r2
 800eca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eca8:	4619      	mov	r1, r3
 800ecaa:	f004 fbd7 	bl	801345c <memcpy>
             q->byteCount += NbBytesToCopy; 
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	695a      	ldr	r2, [r3, #20]
 800ecb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecb4:	441a      	add	r2, r3
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800ecba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecbc:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800ecbe:	88fa      	ldrh	r2, [r7, #6]
 800ecc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc2:	1ad3      	subs	r3, r2, r3
 800ecc4:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	699b      	ldr	r3, [r3, #24]
 800ecca:	1c5a      	adds	r2, r3, #1
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	681a      	ldr	r2, [r3, #0]
 800ecd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecda:	1c59      	adds	r1, r3, #1
 800ecdc:	6339      	str	r1, [r7, #48]	; 0x30
 800ecde:	4413      	add	r3, r2
 800ece0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ece2:	b2d2      	uxtb	r2, r2
 800ece4:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800ece6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ece8:	0a18      	lsrs	r0, r3, #8
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	681a      	ldr	r2, [r3, #0]
 800ecee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf0:	1c59      	adds	r1, r3, #1
 800ecf2:	6339      	str	r1, [r7, #48]	; 0x30
 800ecf4:	4413      	add	r3, r2
 800ecf6:	b2c2      	uxtb	r2, r0
 800ecf8:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	695b      	ldr	r3, [r3, #20]
 800ecfe:	1c9a      	adds	r2, r3, #2
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	615a      	str	r2, [r3, #20]
 800ed04:	e001      	b.n	800ed0a <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800ed06:	2300      	movs	r3, #0
 800ed08:	e049      	b.n	800ed9e <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800ed0a:	7ffb      	ldrb	r3, [r7, #31]
 800ed0c:	b29a      	uxth	r2, r3
 800ed0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed10:	b29b      	uxth	r3, r3
 800ed12:	4413      	add	r3, r2
 800ed14:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	2200      	movs	r2, #0
 800ed1a:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800ed1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d015      	beq.n	800ed4e <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	681a      	ldr	r2, [r3, #0]
 800ed26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed28:	18d0      	adds	r0, r2, r3
 800ed2a:	88fb      	ldrh	r3, [r7, #6]
 800ed2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed2e:	fb02 f203 	mul.w	r2, r2, r3
 800ed32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed34:	4413      	add	r3, r2
 800ed36:	68ba      	ldr	r2, [r7, #8]
 800ed38:	4413      	add	r3, r2
 800ed3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed3c:	4619      	mov	r1, r3
 800ed3e:	f004 fb8d 	bl	801345c <memcpy>
        q->byteCount += NbBytesToCopy;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	695a      	ldr	r2, [r3, #20]
 800ed46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed48:	441a      	add	r2, r3
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	699b      	ldr	r3, [r3, #24]
 800ed52:	1c5a      	adds	r2, r3, #1
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800ed58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed5a:	3301      	adds	r3, #1
 800ed5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	429a      	cmp	r2, r3
 800ed64:	f4ff aeb0 	bcc.w	800eac8 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	681a      	ldr	r2, [r3, #0]
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	6919      	ldr	r1, [r3, #16]
 800ed70:	7ffb      	ldrb	r3, [r7, #31]
 800ed72:	4419      	add	r1, r3
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	685b      	ldr	r3, [r3, #4]
 800ed78:	4299      	cmp	r1, r3
 800ed7a:	d307      	bcc.n	800ed8c <CircularQueue_Add+0x434>
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	6919      	ldr	r1, [r3, #16]
 800ed80:	7ffb      	ldrb	r3, [r7, #31]
 800ed82:	4419      	add	r1, r3
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	685b      	ldr	r3, [r3, #4]
 800ed88:	1acb      	subs	r3, r1, r3
 800ed8a:	e003      	b.n	800ed94 <CircularQueue_Add+0x43c>
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	6919      	ldr	r1, [r3, #16]
 800ed90:	7ffb      	ldrb	r3, [r7, #31]
 800ed92:	440b      	add	r3, r1
 800ed94:	4413      	add	r3, r2
 800ed96:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800ed98:	6a3b      	ldr	r3, [r7, #32]
 800ed9a:	e000      	b.n	800ed9e <CircularQueue_Add+0x446>
    return NULL;
 800ed9c:	2300      	movs	r3, #0
}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	3738      	adds	r7, #56	; 0x38
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}

0800eda6 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed  
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800eda6:	b480      	push	{r7}
 800eda8:	b085      	sub	sp, #20
 800edaa:	af00      	add	r7, sp, #0
 800edac:	6078      	str	r0, [r7, #4]
 800edae:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800edb0:	2300      	movs	r3, #0
 800edb2:	72fb      	strb	r3, [r7, #11]
  uint8_t* ptr= NULL;
 800edb4:	2300      	movs	r3, #0
 800edb6:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	891b      	ldrh	r3, [r3, #8]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d101      	bne.n	800edc4 <CircularQueue_Remove+0x1e>
 800edc0:	2302      	movs	r3, #2
 800edc2:	e000      	b.n	800edc6 <CircularQueue_Remove+0x20>
 800edc4:	2300      	movs	r3, #0
 800edc6:	72fb      	strb	r3, [r7, #11]
  *elementSize = 0;
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	2200      	movs	r2, #0
 800edcc:	801a      	strh	r2, [r3, #0]
  if (q->byteCount > 0) 
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	695b      	ldr	r3, [r3, #20]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	f000 80d4 	beq.w	800ef80 <CircularQueue_Remove+0x1da>
  {
    /* retreive element Size */
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	891b      	ldrh	r3, [r3, #8]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d121      	bne.n	800ee24 <CircularQueue_Remove+0x7e>
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681a      	ldr	r2, [r3, #0]
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	68db      	ldr	r3, [r3, #12]
 800ede8:	4413      	add	r3, r2
 800edea:	781b      	ldrb	r3, [r3, #0]
 800edec:	b29a      	uxth	r2, r3
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6819      	ldr	r1, [r3, #0]
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	68db      	ldr	r3, [r3, #12]
 800edf6:	1c58      	adds	r0, r3, #1
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	685b      	ldr	r3, [r3, #4]
 800edfc:	4298      	cmp	r0, r3
 800edfe:	d306      	bcc.n	800ee0e <CircularQueue_Remove+0x68>
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	68d8      	ldr	r0, [r3, #12]
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	685b      	ldr	r3, [r3, #4]
 800ee08:	1ac3      	subs	r3, r0, r3
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	e002      	b.n	800ee14 <CircularQueue_Remove+0x6e>
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	68db      	ldr	r3, [r3, #12]
 800ee12:	3301      	adds	r3, #1
 800ee14:	440b      	add	r3, r1
 800ee16:	781b      	ldrb	r3, [r3, #0]
 800ee18:	b29b      	uxth	r3, r3
 800ee1a:	021b      	lsls	r3, r3, #8
 800ee1c:	b29b      	uxth	r3, r3
 800ee1e:	4413      	add	r3, r2
 800ee20:	b29b      	uxth	r3, r3
 800ee22:	e001      	b.n	800ee28 <CircularQueue_Remove+0x82>
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	891b      	ldrh	r3, [r3, #8]
 800ee28:	683a      	ldr	r2, [r7, #0]
 800ee2a:	8013      	strh	r3, [r2, #0]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	7f1b      	ldrb	r3, [r3, #28]
 800ee30:	f003 0301 	and.w	r3, r3, #1
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d059      	beq.n	800eeec <CircularQueue_Remove+0x146>
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	7f1b      	ldrb	r3, [r3, #28]
 800ee3c:	f003 0302 	and.w	r3, r3, #2
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d153      	bne.n	800eeec <CircularQueue_Remove+0x146>
     {
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800ee44:	683b      	ldr	r3, [r7, #0]
 800ee46:	881b      	ldrh	r3, [r3, #0]
 800ee48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee4c:	4293      	cmp	r3, r2
 800ee4e:	d103      	bne.n	800ee58 <CircularQueue_Remove+0xb2>
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	891b      	ldrh	r3, [r3, #8]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d012      	beq.n	800ee7e <CircularQueue_Remove+0xd8>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	68da      	ldr	r2, [r3, #12]
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	691b      	ldr	r3, [r3, #16]
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d943      	bls.n	800eeec <CircularQueue_Remove+0x146>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	891b      	ldrh	r3, [r3, #8]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d03f      	beq.n	800eeec <CircularQueue_Remove+0x146>
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	685a      	ldr	r2, [r3, #4]
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	68db      	ldr	r3, [r3, #12]
 800ee74:	1ad3      	subs	r3, r2, r3
 800ee76:	687a      	ldr	r2, [r7, #4]
 800ee78:	8912      	ldrh	r2, [r2, #8]
 800ee7a:	4293      	cmp	r3, r2
 800ee7c:	d236      	bcs.n	800eeec <CircularQueue_Remove+0x146>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	695a      	ldr	r2, [r3, #20]
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	68d9      	ldr	r1, [r3, #12]
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	685b      	ldr	r3, [r3, #4]
 800ee8a:	1acb      	subs	r3, r1, r3
 800ee8c:	441a      	add	r2, r3
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2200      	movs	r2, #0
 800ee96:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	891b      	ldrh	r3, [r3, #8]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d121      	bne.n	800eee4 <CircularQueue_Remove+0x13e>
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681a      	ldr	r2, [r3, #0]
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	68db      	ldr	r3, [r3, #12]
 800eea8:	4413      	add	r3, r2
 800eeaa:	781b      	ldrb	r3, [r3, #0]
 800eeac:	b29a      	uxth	r2, r3
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6819      	ldr	r1, [r3, #0]
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	68db      	ldr	r3, [r3, #12]
 800eeb6:	1c58      	adds	r0, r3, #1
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	685b      	ldr	r3, [r3, #4]
 800eebc:	4298      	cmp	r0, r3
 800eebe:	d306      	bcc.n	800eece <CircularQueue_Remove+0x128>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	68d8      	ldr	r0, [r3, #12]
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	685b      	ldr	r3, [r3, #4]
 800eec8:	1ac3      	subs	r3, r0, r3
 800eeca:	3301      	adds	r3, #1
 800eecc:	e002      	b.n	800eed4 <CircularQueue_Remove+0x12e>
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	68db      	ldr	r3, [r3, #12]
 800eed2:	3301      	adds	r3, #1
 800eed4:	440b      	add	r3, r1
 800eed6:	781b      	ldrb	r3, [r3, #0]
 800eed8:	b29b      	uxth	r3, r3
 800eeda:	021b      	lsls	r3, r3, #8
 800eedc:	b29b      	uxth	r3, r3
 800eede:	4413      	add	r3, r2
 800eee0:	b29b      	uxth	r3, r3
 800eee2:	e001      	b.n	800eee8 <CircularQueue_Remove+0x142>
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	891b      	ldrh	r3, [r3, #8]
 800eee8:	683a      	ldr	r2, [r7, #0]
 800eeea:	8013      	strh	r3, [r2, #0]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681a      	ldr	r2, [r3, #0]
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	68d9      	ldr	r1, [r3, #12]
 800eef4:	7afb      	ldrb	r3, [r7, #11]
 800eef6:	4419      	add	r1, r3
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	685b      	ldr	r3, [r3, #4]
 800eefc:	4299      	cmp	r1, r3
 800eefe:	d307      	bcc.n	800ef10 <CircularQueue_Remove+0x16a>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	68d9      	ldr	r1, [r3, #12]
 800ef04:	7afb      	ldrb	r3, [r7, #11]
 800ef06:	4419      	add	r1, r3
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	685b      	ldr	r3, [r3, #4]
 800ef0c:	1acb      	subs	r3, r1, r3
 800ef0e:	e003      	b.n	800ef18 <CircularQueue_Remove+0x172>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	68d9      	ldr	r1, [r3, #12]
 800ef14:	7afb      	ldrb	r3, [r7, #11]
 800ef16:	440b      	add	r3, r1
 800ef18:	4413      	add	r3, r2
 800ef1a:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	695b      	ldr	r3, [r3, #20]
 800ef20:	683a      	ldr	r2, [r7, #0]
 800ef22:	8812      	ldrh	r2, [r2, #0]
 800ef24:	4611      	mov	r1, r2
 800ef26:	7afa      	ldrb	r2, [r7, #11]
 800ef28:	440a      	add	r2, r1
 800ef2a:	1a9a      	subs	r2, r3, r2
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	695b      	ldr	r3, [r3, #20]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d01e      	beq.n	800ef76 <CircularQueue_Remove+0x1d0>
    {
      q->first = MOD((q->first+ *elementSize + elemSizeStorageRoom ), q->queueMaxSize);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	68db      	ldr	r3, [r3, #12]
 800ef3c:	683a      	ldr	r2, [r7, #0]
 800ef3e:	8812      	ldrh	r2, [r2, #0]
 800ef40:	441a      	add	r2, r3
 800ef42:	7afb      	ldrb	r3, [r7, #11]
 800ef44:	441a      	add	r2, r3
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	685b      	ldr	r3, [r3, #4]
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	d30a      	bcc.n	800ef64 <CircularQueue_Remove+0x1be>
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	68db      	ldr	r3, [r3, #12]
 800ef52:	683a      	ldr	r2, [r7, #0]
 800ef54:	8812      	ldrh	r2, [r2, #0]
 800ef56:	441a      	add	r2, r3
 800ef58:	7afb      	ldrb	r3, [r7, #11]
 800ef5a:	441a      	add	r2, r3
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	685b      	ldr	r3, [r3, #4]
 800ef60:	1ad3      	subs	r3, r2, r3
 800ef62:	e006      	b.n	800ef72 <CircularQueue_Remove+0x1cc>
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	68db      	ldr	r3, [r3, #12]
 800ef68:	683a      	ldr	r2, [r7, #0]
 800ef6a:	8812      	ldrh	r2, [r2, #0]
 800ef6c:	441a      	add	r2, r3
 800ef6e:	7afb      	ldrb	r3, [r7, #11]
 800ef70:	4413      	add	r3, r2
 800ef72:	687a      	ldr	r2, [r7, #4]
 800ef74:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	699b      	ldr	r3, [r3, #24]
 800ef7a:	1e5a      	subs	r2, r3, #1
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	619a      	str	r2, [r3, #24]
  }
  return ptr;
 800ef80:	68fb      	ldr	r3, [r7, #12]
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3714      	adds	r7, #20
 800ef86:	46bd      	mov	sp, r7
 800ef88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8c:	4770      	bx	lr

0800ef8e <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed  
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800ef8e:	b480      	push	{r7}
 800ef90:	b087      	sub	sp, #28
 800ef92:	af00      	add	r7, sp, #0
 800ef94:	6078      	str	r0, [r7, #4]
 800ef96:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800ef98:	2300      	movs	r3, #0
 800ef9a:	73fb      	strb	r3, [r7, #15]
  uint8_t* x= NULL;
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	891b      	ldrh	r3, [r3, #8]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d101      	bne.n	800efac <CircularQueue_Sense+0x1e>
 800efa8:	2302      	movs	r3, #2
 800efaa:	e000      	b.n	800efae <CircularQueue_Sense+0x20>
 800efac:	2300      	movs	r3, #0
 800efae:	73fb      	strb	r3, [r7, #15]
  *elementSize = 0;
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	2200      	movs	r2, #0
 800efb4:	801a      	strh	r2, [r3, #0]
  uint32_t FirstElemetPos = 0;
 800efb6:	2300      	movs	r3, #0
 800efb8:	613b      	str	r3, [r7, #16]
    
  if (q->byteCount > 0) 
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	695b      	ldr	r3, [r3, #20]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	f000 8093 	beq.w	800f0ea <CircularQueue_Sense+0x15c>
  {
    FirstElemetPos = q->first;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	68db      	ldr	r3, [r3, #12]
 800efc8:	613b      	str	r3, [r7, #16]
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	891b      	ldrh	r3, [r3, #8]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d121      	bne.n	800f016 <CircularQueue_Sense+0x88>
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681a      	ldr	r2, [r3, #0]
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	68db      	ldr	r3, [r3, #12]
 800efda:	4413      	add	r3, r2
 800efdc:	781b      	ldrb	r3, [r3, #0]
 800efde:	b29a      	uxth	r2, r3
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	6819      	ldr	r1, [r3, #0]
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	68db      	ldr	r3, [r3, #12]
 800efe8:	1c58      	adds	r0, r3, #1
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	685b      	ldr	r3, [r3, #4]
 800efee:	4298      	cmp	r0, r3
 800eff0:	d306      	bcc.n	800f000 <CircularQueue_Sense+0x72>
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	68d8      	ldr	r0, [r3, #12]
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	685b      	ldr	r3, [r3, #4]
 800effa:	1ac3      	subs	r3, r0, r3
 800effc:	3301      	adds	r3, #1
 800effe:	e002      	b.n	800f006 <CircularQueue_Sense+0x78>
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	68db      	ldr	r3, [r3, #12]
 800f004:	3301      	adds	r3, #1
 800f006:	440b      	add	r3, r1
 800f008:	781b      	ldrb	r3, [r3, #0]
 800f00a:	b29b      	uxth	r3, r3
 800f00c:	021b      	lsls	r3, r3, #8
 800f00e:	b29b      	uxth	r3, r3
 800f010:	4413      	add	r3, r2
 800f012:	b29b      	uxth	r3, r3
 800f014:	e001      	b.n	800f01a <CircularQueue_Sense+0x8c>
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	891b      	ldrh	r3, [r3, #8]
 800f01a:	683a      	ldr	r2, [r7, #0]
 800f01c:	8013      	strh	r3, [r2, #0]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	7f1b      	ldrb	r3, [r3, #28]
 800f022:	f003 0301 	and.w	r3, r3, #1
 800f026:	2b00      	cmp	r3, #0
 800f028:	d04a      	beq.n	800f0c0 <CircularQueue_Sense+0x132>
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	7f1b      	ldrb	r3, [r3, #28]
 800f02e:	f003 0302 	and.w	r3, r3, #2
 800f032:	2b00      	cmp	r3, #0
 800f034:	d144      	bne.n	800f0c0 <CircularQueue_Sense+0x132>
    { 
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800f036:	683b      	ldr	r3, [r7, #0]
 800f038:	881b      	ldrh	r3, [r3, #0]
 800f03a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f03e:	4293      	cmp	r3, r2
 800f040:	d103      	bne.n	800f04a <CircularQueue_Sense+0xbc>
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	891b      	ldrh	r3, [r3, #8]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d012      	beq.n	800f070 <CircularQueue_Sense+0xe2>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	68da      	ldr	r2, [r3, #12]
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	691b      	ldr	r3, [r3, #16]
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800f052:	429a      	cmp	r2, r3
 800f054:	d934      	bls.n	800f0c0 <CircularQueue_Sense+0x132>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	891b      	ldrh	r3, [r3, #8]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d030      	beq.n	800f0c0 <CircularQueue_Sense+0x132>
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	685a      	ldr	r2, [r3, #4]
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	68db      	ldr	r3, [r3, #12]
 800f066:	1ad3      	subs	r3, r2, r3
 800f068:	687a      	ldr	r2, [r7, #4]
 800f06a:	8912      	ldrh	r2, [r2, #8]
 800f06c:	4293      	cmp	r3, r2
 800f06e:	d227      	bcs.n	800f0c0 <CircularQueue_Sense+0x132>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800f070:	2300      	movs	r3, #0
 800f072:	613b      	str	r3, [r7, #16]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	891b      	ldrh	r3, [r3, #8]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d11d      	bne.n	800f0b8 <CircularQueue_Sense+0x12a>
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681a      	ldr	r2, [r3, #0]
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	4413      	add	r3, r2
 800f084:	781b      	ldrb	r3, [r3, #0]
 800f086:	b29a      	uxth	r2, r3
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	6819      	ldr	r1, [r3, #0]
 800f08c:	693b      	ldr	r3, [r7, #16]
 800f08e:	1c58      	adds	r0, r3, #1
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	685b      	ldr	r3, [r3, #4]
 800f094:	4298      	cmp	r0, r3
 800f096:	d305      	bcc.n	800f0a4 <CircularQueue_Sense+0x116>
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	685b      	ldr	r3, [r3, #4]
 800f09c:	6938      	ldr	r0, [r7, #16]
 800f09e:	1ac3      	subs	r3, r0, r3
 800f0a0:	3301      	adds	r3, #1
 800f0a2:	e001      	b.n	800f0a8 <CircularQueue_Sense+0x11a>
 800f0a4:	693b      	ldr	r3, [r7, #16]
 800f0a6:	3301      	adds	r3, #1
 800f0a8:	440b      	add	r3, r1
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	b29b      	uxth	r3, r3
 800f0ae:	021b      	lsls	r3, r3, #8
 800f0b0:	b29b      	uxth	r3, r3
 800f0b2:	4413      	add	r3, r2
 800f0b4:	b29b      	uxth	r3, r3
 800f0b6:	e001      	b.n	800f0bc <CircularQueue_Sense+0x12e>
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	891b      	ldrh	r3, [r3, #8]
 800f0bc:	683a      	ldr	r2, [r7, #0]
 800f0be:	8013      	strh	r3, [r2, #0]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681a      	ldr	r2, [r3, #0]
 800f0c4:	7bf9      	ldrb	r1, [r7, #15]
 800f0c6:	693b      	ldr	r3, [r7, #16]
 800f0c8:	4419      	add	r1, r3
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	685b      	ldr	r3, [r3, #4]
 800f0ce:	4299      	cmp	r1, r3
 800f0d0:	d306      	bcc.n	800f0e0 <CircularQueue_Sense+0x152>
 800f0d2:	7bf9      	ldrb	r1, [r7, #15]
 800f0d4:	693b      	ldr	r3, [r7, #16]
 800f0d6:	4419      	add	r1, r3
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	685b      	ldr	r3, [r3, #4]
 800f0dc:	1acb      	subs	r3, r1, r3
 800f0de:	e002      	b.n	800f0e6 <CircularQueue_Sense+0x158>
 800f0e0:	7bf9      	ldrb	r1, [r7, #15]
 800f0e2:	693b      	ldr	r3, [r7, #16]
 800f0e4:	440b      	add	r3, r1
 800f0e6:	4413      	add	r3, r2
 800f0e8:	617b      	str	r3, [r7, #20]
  }
  return x;
 800f0ea:	697b      	ldr	r3, [r7, #20]
}
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	371c      	adds	r7, #28
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f6:	4770      	bx	lr

0800f0f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f0f8:	b480      	push	{r7}
 800f0fa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800f0fc:	bf00      	nop
 800f0fe:	46bd      	mov	sp, r7
 800f100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f104:	4770      	bx	lr
	...

0800f108 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f108:	b480      	push	{r7}
 800f10a:	b085      	sub	sp, #20
 800f10c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f10e:	f3ef 8305 	mrs	r3, IPSR
 800f112:	60bb      	str	r3, [r7, #8]
  return(result);
 800f114:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f116:	2b00      	cmp	r3, #0
 800f118:	d10f      	bne.n	800f13a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f11a:	f3ef 8310 	mrs	r3, PRIMASK
 800f11e:	607b      	str	r3, [r7, #4]
  return(result);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d105      	bne.n	800f132 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f126:	f3ef 8311 	mrs	r3, BASEPRI
 800f12a:	603b      	str	r3, [r7, #0]
  return(result);
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d007      	beq.n	800f142 <osKernelInitialize+0x3a>
 800f132:	4b0e      	ldr	r3, [pc, #56]	; (800f16c <osKernelInitialize+0x64>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	2b02      	cmp	r3, #2
 800f138:	d103      	bne.n	800f142 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800f13a:	f06f 0305 	mvn.w	r3, #5
 800f13e:	60fb      	str	r3, [r7, #12]
 800f140:	e00c      	b.n	800f15c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f142:	4b0a      	ldr	r3, [pc, #40]	; (800f16c <osKernelInitialize+0x64>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d105      	bne.n	800f156 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f14a:	4b08      	ldr	r3, [pc, #32]	; (800f16c <osKernelInitialize+0x64>)
 800f14c:	2201      	movs	r2, #1
 800f14e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f150:	2300      	movs	r3, #0
 800f152:	60fb      	str	r3, [r7, #12]
 800f154:	e002      	b.n	800f15c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800f156:	f04f 33ff 	mov.w	r3, #4294967295
 800f15a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f15c:	68fb      	ldr	r3, [r7, #12]
}
 800f15e:	4618      	mov	r0, r3
 800f160:	3714      	adds	r7, #20
 800f162:	46bd      	mov	sp, r7
 800f164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f168:	4770      	bx	lr
 800f16a:	bf00      	nop
 800f16c:	20001444 	.word	0x20001444

0800f170 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f170:	b580      	push	{r7, lr}
 800f172:	b084      	sub	sp, #16
 800f174:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f176:	f3ef 8305 	mrs	r3, IPSR
 800f17a:	60bb      	str	r3, [r7, #8]
  return(result);
 800f17c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d10f      	bne.n	800f1a2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f182:	f3ef 8310 	mrs	r3, PRIMASK
 800f186:	607b      	str	r3, [r7, #4]
  return(result);
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d105      	bne.n	800f19a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f18e:	f3ef 8311 	mrs	r3, BASEPRI
 800f192:	603b      	str	r3, [r7, #0]
  return(result);
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d007      	beq.n	800f1aa <osKernelStart+0x3a>
 800f19a:	4b0f      	ldr	r3, [pc, #60]	; (800f1d8 <osKernelStart+0x68>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	2b02      	cmp	r3, #2
 800f1a0:	d103      	bne.n	800f1aa <osKernelStart+0x3a>
    stat = osErrorISR;
 800f1a2:	f06f 0305 	mvn.w	r3, #5
 800f1a6:	60fb      	str	r3, [r7, #12]
 800f1a8:	e010      	b.n	800f1cc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f1aa:	4b0b      	ldr	r3, [pc, #44]	; (800f1d8 <osKernelStart+0x68>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	2b01      	cmp	r3, #1
 800f1b0:	d109      	bne.n	800f1c6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f1b2:	f7ff ffa1 	bl	800f0f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f1b6:	4b08      	ldr	r3, [pc, #32]	; (800f1d8 <osKernelStart+0x68>)
 800f1b8:	2202      	movs	r2, #2
 800f1ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f1bc:	f002 fce6 	bl	8011b8c <vTaskStartScheduler>
      stat = osOK;
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	60fb      	str	r3, [r7, #12]
 800f1c4:	e002      	b.n	800f1cc <osKernelStart+0x5c>
    } else {
      stat = osError;
 800f1c6:	f04f 33ff 	mov.w	r3, #4294967295
 800f1ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f1cc:	68fb      	ldr	r3, [r7, #12]
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3710      	adds	r7, #16
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}
 800f1d6:	bf00      	nop
 800f1d8:	20001444 	.word	0x20001444

0800f1dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b090      	sub	sp, #64	; 0x40
 800f1e0:	af04      	add	r7, sp, #16
 800f1e2:	60f8      	str	r0, [r7, #12]
 800f1e4:	60b9      	str	r1, [r7, #8]
 800f1e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f1ec:	f3ef 8305 	mrs	r3, IPSR
 800f1f0:	61fb      	str	r3, [r7, #28]
  return(result);
 800f1f2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	f040 808f 	bne.w	800f318 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f1fa:	f3ef 8310 	mrs	r3, PRIMASK
 800f1fe:	61bb      	str	r3, [r7, #24]
  return(result);
 800f200:	69bb      	ldr	r3, [r7, #24]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d105      	bne.n	800f212 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f206:	f3ef 8311 	mrs	r3, BASEPRI
 800f20a:	617b      	str	r3, [r7, #20]
  return(result);
 800f20c:	697b      	ldr	r3, [r7, #20]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d003      	beq.n	800f21a <osThreadNew+0x3e>
 800f212:	4b44      	ldr	r3, [pc, #272]	; (800f324 <osThreadNew+0x148>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	2b02      	cmp	r3, #2
 800f218:	d07e      	beq.n	800f318 <osThreadNew+0x13c>
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d07b      	beq.n	800f318 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800f220:	2380      	movs	r3, #128	; 0x80
 800f222:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800f224:	2318      	movs	r3, #24
 800f226:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800f228:	2300      	movs	r3, #0
 800f22a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800f22c:	f04f 33ff 	mov.w	r3, #4294967295
 800f230:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d045      	beq.n	800f2c4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d002      	beq.n	800f246 <osThreadNew+0x6a>
        name = attr->name;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	699b      	ldr	r3, [r3, #24]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d002      	beq.n	800f254 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	699b      	ldr	r3, [r3, #24]
 800f252:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f256:	2b00      	cmp	r3, #0
 800f258:	d008      	beq.n	800f26c <osThreadNew+0x90>
 800f25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f25c:	2b38      	cmp	r3, #56	; 0x38
 800f25e:	d805      	bhi.n	800f26c <osThreadNew+0x90>
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	685b      	ldr	r3, [r3, #4]
 800f264:	f003 0301 	and.w	r3, r3, #1
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d001      	beq.n	800f270 <osThreadNew+0x94>
        return (NULL);
 800f26c:	2300      	movs	r3, #0
 800f26e:	e054      	b.n	800f31a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	695b      	ldr	r3, [r3, #20]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d003      	beq.n	800f280 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	695b      	ldr	r3, [r3, #20]
 800f27c:	089b      	lsrs	r3, r3, #2
 800f27e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	689b      	ldr	r3, [r3, #8]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d00e      	beq.n	800f2a6 <osThreadNew+0xca>
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	68db      	ldr	r3, [r3, #12]
 800f28c:	2b5b      	cmp	r3, #91	; 0x5b
 800f28e:	d90a      	bls.n	800f2a6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f294:	2b00      	cmp	r3, #0
 800f296:	d006      	beq.n	800f2a6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	695b      	ldr	r3, [r3, #20]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d002      	beq.n	800f2a6 <osThreadNew+0xca>
        mem = 1;
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	623b      	str	r3, [r7, #32]
 800f2a4:	e010      	b.n	800f2c8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	689b      	ldr	r3, [r3, #8]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d10c      	bne.n	800f2c8 <osThreadNew+0xec>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	68db      	ldr	r3, [r3, #12]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d108      	bne.n	800f2c8 <osThreadNew+0xec>
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	691b      	ldr	r3, [r3, #16]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d104      	bne.n	800f2c8 <osThreadNew+0xec>
          mem = 0;
 800f2be:	2300      	movs	r3, #0
 800f2c0:	623b      	str	r3, [r7, #32]
 800f2c2:	e001      	b.n	800f2c8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800f2c8:	6a3b      	ldr	r3, [r7, #32]
 800f2ca:	2b01      	cmp	r3, #1
 800f2cc:	d110      	bne.n	800f2f0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800f2d2:	687a      	ldr	r2, [r7, #4]
 800f2d4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f2d6:	9202      	str	r2, [sp, #8]
 800f2d8:	9301      	str	r3, [sp, #4]
 800f2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2dc:	9300      	str	r3, [sp, #0]
 800f2de:	68bb      	ldr	r3, [r7, #8]
 800f2e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f2e4:	68f8      	ldr	r0, [r7, #12]
 800f2e6:	f002 fa7f 	bl	80117e8 <xTaskCreateStatic>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	613b      	str	r3, [r7, #16]
 800f2ee:	e013      	b.n	800f318 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800f2f0:	6a3b      	ldr	r3, [r7, #32]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d110      	bne.n	800f318 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2f8:	b29a      	uxth	r2, r3
 800f2fa:	f107 0310 	add.w	r3, r7, #16
 800f2fe:	9301      	str	r3, [sp, #4]
 800f300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f302:	9300      	str	r3, [sp, #0]
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f308:	68f8      	ldr	r0, [r7, #12]
 800f30a:	f002 fac7 	bl	801189c <xTaskCreate>
 800f30e:	4603      	mov	r3, r0
 800f310:	2b01      	cmp	r3, #1
 800f312:	d001      	beq.n	800f318 <osThreadNew+0x13c>
          hTask = NULL;
 800f314:	2300      	movs	r3, #0
 800f316:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f318:	693b      	ldr	r3, [r7, #16]
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3730      	adds	r7, #48	; 0x30
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}
 800f322:	bf00      	nop
 800f324:	20001444 	.word	0x20001444

0800f328 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800f328:	b580      	push	{r7, lr}
 800f32a:	b08a      	sub	sp, #40	; 0x28
 800f32c:	af02      	add	r7, sp, #8
 800f32e:	6078      	str	r0, [r7, #4]
 800f330:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800f336:	69fb      	ldr	r3, [r7, #28]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d002      	beq.n	800f342 <osThreadFlagsSet+0x1a>
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	da03      	bge.n	800f34a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800f342:	f06f 0303 	mvn.w	r3, #3
 800f346:	60fb      	str	r3, [r7, #12]
 800f348:	e046      	b.n	800f3d8 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800f34a:	f04f 33ff 	mov.w	r3, #4294967295
 800f34e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f350:	f3ef 8305 	mrs	r3, IPSR
 800f354:	61bb      	str	r3, [r7, #24]
  return(result);
 800f356:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d10f      	bne.n	800f37c <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f35c:	f3ef 8310 	mrs	r3, PRIMASK
 800f360:	617b      	str	r3, [r7, #20]
  return(result);
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d105      	bne.n	800f374 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f368:	f3ef 8311 	mrs	r3, BASEPRI
 800f36c:	613b      	str	r3, [r7, #16]
  return(result);
 800f36e:	693b      	ldr	r3, [r7, #16]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d024      	beq.n	800f3be <osThreadFlagsSet+0x96>
 800f374:	4b1b      	ldr	r3, [pc, #108]	; (800f3e4 <osThreadFlagsSet+0xbc>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	2b02      	cmp	r3, #2
 800f37a:	d120      	bne.n	800f3be <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800f37c:	2300      	movs	r3, #0
 800f37e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800f380:	f107 0308 	add.w	r3, r7, #8
 800f384:	9300      	str	r3, [sp, #0]
 800f386:	2300      	movs	r3, #0
 800f388:	2201      	movs	r2, #1
 800f38a:	6839      	ldr	r1, [r7, #0]
 800f38c:	69f8      	ldr	r0, [r7, #28]
 800f38e:	f003 fb81 	bl	8012a94 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800f392:	f107 020c 	add.w	r2, r7, #12
 800f396:	2300      	movs	r3, #0
 800f398:	9300      	str	r3, [sp, #0]
 800f39a:	4613      	mov	r3, r2
 800f39c:	2200      	movs	r2, #0
 800f39e:	2100      	movs	r1, #0
 800f3a0:	69f8      	ldr	r0, [r7, #28]
 800f3a2:	f003 fb77 	bl	8012a94 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d015      	beq.n	800f3d8 <osThreadFlagsSet+0xb0>
 800f3ac:	4b0e      	ldr	r3, [pc, #56]	; (800f3e8 <osThreadFlagsSet+0xc0>)
 800f3ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3b2:	601a      	str	r2, [r3, #0]
 800f3b4:	f3bf 8f4f 	dsb	sy
 800f3b8:	f3bf 8f6f 	isb	sy
 800f3bc:	e00c      	b.n	800f3d8 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800f3be:	2300      	movs	r3, #0
 800f3c0:	2201      	movs	r2, #1
 800f3c2:	6839      	ldr	r1, [r7, #0]
 800f3c4:	69f8      	ldr	r0, [r7, #28]
 800f3c6:	f003 faaf 	bl	8012928 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800f3ca:	f107 030c 	add.w	r3, r7, #12
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	2100      	movs	r1, #0
 800f3d2:	69f8      	ldr	r0, [r7, #28]
 800f3d4:	f003 faa8 	bl	8012928 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800f3d8:	68fb      	ldr	r3, [r7, #12]
}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	3720      	adds	r7, #32
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}
 800f3e2:	bf00      	nop
 800f3e4:	20001444 	.word	0x20001444
 800f3e8:	e000ed04 	.word	0xe000ed04

0800f3ec <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b08e      	sub	sp, #56	; 0x38
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	60f8      	str	r0, [r7, #12]
 800f3f4:	60b9      	str	r1, [r7, #8]
 800f3f6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f3f8:	f3ef 8305 	mrs	r3, IPSR
 800f3fc:	61fb      	str	r3, [r7, #28]
  return(result);
 800f3fe:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800f400:	2b00      	cmp	r3, #0
 800f402:	d10f      	bne.n	800f424 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f404:	f3ef 8310 	mrs	r3, PRIMASK
 800f408:	61bb      	str	r3, [r7, #24]
  return(result);
 800f40a:	69bb      	ldr	r3, [r7, #24]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d105      	bne.n	800f41c <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f410:	f3ef 8311 	mrs	r3, BASEPRI
 800f414:	617b      	str	r3, [r7, #20]
  return(result);
 800f416:	697b      	ldr	r3, [r7, #20]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d007      	beq.n	800f42c <osThreadFlagsWait+0x40>
 800f41c:	4b3c      	ldr	r3, [pc, #240]	; (800f510 <osThreadFlagsWait+0x124>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	2b02      	cmp	r3, #2
 800f422:	d103      	bne.n	800f42c <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800f424:	f06f 0305 	mvn.w	r3, #5
 800f428:	637b      	str	r3, [r7, #52]	; 0x34
 800f42a:	e06b      	b.n	800f504 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	da03      	bge.n	800f43a <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800f432:	f06f 0303 	mvn.w	r3, #3
 800f436:	637b      	str	r3, [r7, #52]	; 0x34
 800f438:	e064      	b.n	800f504 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	f003 0302 	and.w	r3, r3, #2
 800f440:	2b00      	cmp	r3, #0
 800f442:	d002      	beq.n	800f44a <osThreadFlagsWait+0x5e>
      clear = 0U;
 800f444:	2300      	movs	r3, #0
 800f446:	633b      	str	r3, [r7, #48]	; 0x30
 800f448:	e001      	b.n	800f44e <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800f44e:	2300      	movs	r3, #0
 800f450:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800f456:	f002 fcdf 	bl	8011e18 <xTaskGetTickCount>
 800f45a:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800f45c:	f107 0210 	add.w	r2, r7, #16
 800f460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f462:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f464:	2000      	movs	r0, #0
 800f466:	f003 fa05 	bl	8012874 <xTaskNotifyWait>
 800f46a:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800f46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f46e:	2b01      	cmp	r3, #1
 800f470:	d137      	bne.n	800f4e2 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800f472:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	4013      	ands	r3, r2
 800f478:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800f47a:	693b      	ldr	r3, [r7, #16]
 800f47c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f47e:	4313      	orrs	r3, r2
 800f480:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	f003 0301 	and.w	r3, r3, #1
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d00c      	beq.n	800f4a6 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800f48c:	68fa      	ldr	r2, [r7, #12]
 800f48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f490:	4013      	ands	r3, r2
 800f492:	68fa      	ldr	r2, [r7, #12]
 800f494:	429a      	cmp	r2, r3
 800f496:	d032      	beq.n	800f4fe <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d10f      	bne.n	800f4be <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800f49e:	f06f 0302 	mvn.w	r3, #2
 800f4a2:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800f4a4:	e02e      	b.n	800f504 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800f4a6:	68fa      	ldr	r2, [r7, #12]
 800f4a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4aa:	4013      	ands	r3, r2
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d128      	bne.n	800f502 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d103      	bne.n	800f4be <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800f4b6:	f06f 0302 	mvn.w	r3, #2
 800f4ba:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800f4bc:	e022      	b.n	800f504 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800f4be:	f002 fcab 	bl	8011e18 <xTaskGetTickCount>
 800f4c2:	4602      	mov	r2, r0
 800f4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c6:	1ad3      	subs	r3, r2, r3
 800f4c8:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800f4ca:	6a3a      	ldr	r2, [r7, #32]
 800f4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ce:	429a      	cmp	r2, r3
 800f4d0:	d902      	bls.n	800f4d8 <osThreadFlagsWait+0xec>
          tout  = 0;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f4d6:	e00e      	b.n	800f4f6 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800f4d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4da:	6a3b      	ldr	r3, [r7, #32]
 800f4dc:	1ad3      	subs	r3, r2, r3
 800f4de:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f4e0:	e009      	b.n	800f4f6 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d103      	bne.n	800f4f0 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800f4e8:	f06f 0302 	mvn.w	r3, #2
 800f4ec:	637b      	str	r3, [r7, #52]	; 0x34
 800f4ee:	e002      	b.n	800f4f6 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800f4f0:	f06f 0301 	mvn.w	r3, #1
 800f4f4:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800f4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d1af      	bne.n	800f45c <osThreadFlagsWait+0x70>
 800f4fc:	e002      	b.n	800f504 <osThreadFlagsWait+0x118>
            break;
 800f4fe:	bf00      	nop
 800f500:	e000      	b.n	800f504 <osThreadFlagsWait+0x118>
            break;
 800f502:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800f504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f506:	4618      	mov	r0, r3
 800f508:	3738      	adds	r7, #56	; 0x38
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}
 800f50e:	bf00      	nop
 800f510:	20001444 	.word	0x20001444

0800f514 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800f514:	b580      	push	{r7, lr}
 800f516:	b086      	sub	sp, #24
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f51c:	f3ef 8305 	mrs	r3, IPSR
 800f520:	613b      	str	r3, [r7, #16]
  return(result);
 800f522:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f524:	2b00      	cmp	r3, #0
 800f526:	d10f      	bne.n	800f548 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f528:	f3ef 8310 	mrs	r3, PRIMASK
 800f52c:	60fb      	str	r3, [r7, #12]
  return(result);
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d105      	bne.n	800f540 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f534:	f3ef 8311 	mrs	r3, BASEPRI
 800f538:	60bb      	str	r3, [r7, #8]
  return(result);
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d007      	beq.n	800f550 <osDelay+0x3c>
 800f540:	4b0a      	ldr	r3, [pc, #40]	; (800f56c <osDelay+0x58>)
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	2b02      	cmp	r3, #2
 800f546:	d103      	bne.n	800f550 <osDelay+0x3c>
    stat = osErrorISR;
 800f548:	f06f 0305 	mvn.w	r3, #5
 800f54c:	617b      	str	r3, [r7, #20]
 800f54e:	e007      	b.n	800f560 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800f550:	2300      	movs	r3, #0
 800f552:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d002      	beq.n	800f560 <osDelay+0x4c>
      vTaskDelay(ticks);
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f002 fae2 	bl	8011b24 <vTaskDelay>
    }
  }

  return (stat);
 800f560:	697b      	ldr	r3, [r7, #20]
}
 800f562:	4618      	mov	r0, r3
 800f564:	3718      	adds	r7, #24
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}
 800f56a:	bf00      	nop
 800f56c:	20001444 	.word	0x20001444

0800f570 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800f570:	b580      	push	{r7, lr}
 800f572:	b08a      	sub	sp, #40	; 0x28
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800f578:	2300      	movs	r3, #0
 800f57a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f57c:	f3ef 8305 	mrs	r3, IPSR
 800f580:	613b      	str	r3, [r7, #16]
  return(result);
 800f582:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800f584:	2b00      	cmp	r3, #0
 800f586:	f040 8085 	bne.w	800f694 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f58a:	f3ef 8310 	mrs	r3, PRIMASK
 800f58e:	60fb      	str	r3, [r7, #12]
  return(result);
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d105      	bne.n	800f5a2 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f596:	f3ef 8311 	mrs	r3, BASEPRI
 800f59a:	60bb      	str	r3, [r7, #8]
  return(result);
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d003      	beq.n	800f5aa <osMutexNew+0x3a>
 800f5a2:	4b3f      	ldr	r3, [pc, #252]	; (800f6a0 <osMutexNew+0x130>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	2b02      	cmp	r3, #2
 800f5a8:	d074      	beq.n	800f694 <osMutexNew+0x124>
    if (attr != NULL) {
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d003      	beq.n	800f5b8 <osMutexNew+0x48>
      type = attr->attr_bits;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	685b      	ldr	r3, [r3, #4]
 800f5b4:	623b      	str	r3, [r7, #32]
 800f5b6:	e001      	b.n	800f5bc <osMutexNew+0x4c>
    } else {
      type = 0U;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800f5bc:	6a3b      	ldr	r3, [r7, #32]
 800f5be:	f003 0301 	and.w	r3, r3, #1
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d002      	beq.n	800f5cc <osMutexNew+0x5c>
      rmtx = 1U;
 800f5c6:	2301      	movs	r3, #1
 800f5c8:	61fb      	str	r3, [r7, #28]
 800f5ca:	e001      	b.n	800f5d0 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800f5d0:	6a3b      	ldr	r3, [r7, #32]
 800f5d2:	f003 0308 	and.w	r3, r3, #8
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d15c      	bne.n	800f694 <osMutexNew+0x124>
      mem = -1;
 800f5da:	f04f 33ff 	mov.w	r3, #4294967295
 800f5de:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d015      	beq.n	800f612 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	689b      	ldr	r3, [r3, #8]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d006      	beq.n	800f5fc <osMutexNew+0x8c>
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	68db      	ldr	r3, [r3, #12]
 800f5f2:	2b4f      	cmp	r3, #79	; 0x4f
 800f5f4:	d902      	bls.n	800f5fc <osMutexNew+0x8c>
          mem = 1;
 800f5f6:	2301      	movs	r3, #1
 800f5f8:	61bb      	str	r3, [r7, #24]
 800f5fa:	e00c      	b.n	800f616 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	689b      	ldr	r3, [r3, #8]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d108      	bne.n	800f616 <osMutexNew+0xa6>
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	68db      	ldr	r3, [r3, #12]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d104      	bne.n	800f616 <osMutexNew+0xa6>
            mem = 0;
 800f60c:	2300      	movs	r3, #0
 800f60e:	61bb      	str	r3, [r7, #24]
 800f610:	e001      	b.n	800f616 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800f612:	2300      	movs	r3, #0
 800f614:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800f616:	69bb      	ldr	r3, [r7, #24]
 800f618:	2b01      	cmp	r3, #1
 800f61a:	d112      	bne.n	800f642 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800f61c:	69fb      	ldr	r3, [r7, #28]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d007      	beq.n	800f632 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	689b      	ldr	r3, [r3, #8]
 800f626:	4619      	mov	r1, r3
 800f628:	2004      	movs	r0, #4
 800f62a:	f001 f9aa 	bl	8010982 <xQueueCreateMutexStatic>
 800f62e:	6278      	str	r0, [r7, #36]	; 0x24
 800f630:	e016      	b.n	800f660 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	689b      	ldr	r3, [r3, #8]
 800f636:	4619      	mov	r1, r3
 800f638:	2001      	movs	r0, #1
 800f63a:	f001 f9a2 	bl	8010982 <xQueueCreateMutexStatic>
 800f63e:	6278      	str	r0, [r7, #36]	; 0x24
 800f640:	e00e      	b.n	800f660 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800f642:	69bb      	ldr	r3, [r7, #24]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d10b      	bne.n	800f660 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800f648:	69fb      	ldr	r3, [r7, #28]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d004      	beq.n	800f658 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800f64e:	2004      	movs	r0, #4
 800f650:	f001 f97f 	bl	8010952 <xQueueCreateMutex>
 800f654:	6278      	str	r0, [r7, #36]	; 0x24
 800f656:	e003      	b.n	800f660 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800f658:	2001      	movs	r0, #1
 800f65a:	f001 f97a 	bl	8010952 <xQueueCreateMutex>
 800f65e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800f660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f662:	2b00      	cmp	r3, #0
 800f664:	d00c      	beq.n	800f680 <osMutexNew+0x110>
        if (attr != NULL) {
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d003      	beq.n	800f674 <osMutexNew+0x104>
          name = attr->name;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	617b      	str	r3, [r7, #20]
 800f672:	e001      	b.n	800f678 <osMutexNew+0x108>
        } else {
          name = NULL;
 800f674:	2300      	movs	r3, #0
 800f676:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800f678:	6979      	ldr	r1, [r7, #20]
 800f67a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f67c:	f002 f82e 	bl	80116dc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800f680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f682:	2b00      	cmp	r3, #0
 800f684:	d006      	beq.n	800f694 <osMutexNew+0x124>
 800f686:	69fb      	ldr	r3, [r7, #28]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d003      	beq.n	800f694 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800f68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f68e:	f043 0301 	orr.w	r3, r3, #1
 800f692:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800f694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f696:	4618      	mov	r0, r3
 800f698:	3728      	adds	r7, #40	; 0x28
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}
 800f69e:	bf00      	nop
 800f6a0:	20001444 	.word	0x20001444

0800f6a4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b088      	sub	sp, #32
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f023 0301 	bic.w	r3, r3, #1
 800f6b4:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f003 0301 	and.w	r3, r3, #1
 800f6bc:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f6c2:	f3ef 8305 	mrs	r3, IPSR
 800f6c6:	613b      	str	r3, [r7, #16]
  return(result);
 800f6c8:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d10f      	bne.n	800f6ee <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f6ce:	f3ef 8310 	mrs	r3, PRIMASK
 800f6d2:	60fb      	str	r3, [r7, #12]
  return(result);
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d105      	bne.n	800f6e6 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f6da:	f3ef 8311 	mrs	r3, BASEPRI
 800f6de:	60bb      	str	r3, [r7, #8]
  return(result);
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d007      	beq.n	800f6f6 <osMutexAcquire+0x52>
 800f6e6:	4b1d      	ldr	r3, [pc, #116]	; (800f75c <osMutexAcquire+0xb8>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	2b02      	cmp	r3, #2
 800f6ec:	d103      	bne.n	800f6f6 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800f6ee:	f06f 0305 	mvn.w	r3, #5
 800f6f2:	61fb      	str	r3, [r7, #28]
 800f6f4:	e02c      	b.n	800f750 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800f6f6:	69bb      	ldr	r3, [r7, #24]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d103      	bne.n	800f704 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800f6fc:	f06f 0303 	mvn.w	r3, #3
 800f700:	61fb      	str	r3, [r7, #28]
 800f702:	e025      	b.n	800f750 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800f704:	697b      	ldr	r3, [r7, #20]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d011      	beq.n	800f72e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800f70a:	6839      	ldr	r1, [r7, #0]
 800f70c:	69b8      	ldr	r0, [r7, #24]
 800f70e:	f001 f986 	bl	8010a1e <xQueueTakeMutexRecursive>
 800f712:	4603      	mov	r3, r0
 800f714:	2b01      	cmp	r3, #1
 800f716:	d01b      	beq.n	800f750 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d003      	beq.n	800f726 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800f71e:	f06f 0301 	mvn.w	r3, #1
 800f722:	61fb      	str	r3, [r7, #28]
 800f724:	e014      	b.n	800f750 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800f726:	f06f 0302 	mvn.w	r3, #2
 800f72a:	61fb      	str	r3, [r7, #28]
 800f72c:	e010      	b.n	800f750 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800f72e:	6839      	ldr	r1, [r7, #0]
 800f730:	69b8      	ldr	r0, [r7, #24]
 800f732:	f001 fd03 	bl	801113c <xQueueSemaphoreTake>
 800f736:	4603      	mov	r3, r0
 800f738:	2b01      	cmp	r3, #1
 800f73a:	d009      	beq.n	800f750 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d003      	beq.n	800f74a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800f742:	f06f 0301 	mvn.w	r3, #1
 800f746:	61fb      	str	r3, [r7, #28]
 800f748:	e002      	b.n	800f750 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800f74a:	f06f 0302 	mvn.w	r3, #2
 800f74e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f750:	69fb      	ldr	r3, [r7, #28]
}
 800f752:	4618      	mov	r0, r3
 800f754:	3720      	adds	r7, #32
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}
 800f75a:	bf00      	nop
 800f75c:	20001444 	.word	0x20001444

0800f760 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800f760:	b580      	push	{r7, lr}
 800f762:	b088      	sub	sp, #32
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f023 0301 	bic.w	r3, r3, #1
 800f76e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f003 0301 	and.w	r3, r3, #1
 800f776:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800f778:	2300      	movs	r3, #0
 800f77a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f77c:	f3ef 8305 	mrs	r3, IPSR
 800f780:	613b      	str	r3, [r7, #16]
  return(result);
 800f782:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800f784:	2b00      	cmp	r3, #0
 800f786:	d10f      	bne.n	800f7a8 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f788:	f3ef 8310 	mrs	r3, PRIMASK
 800f78c:	60fb      	str	r3, [r7, #12]
  return(result);
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d105      	bne.n	800f7a0 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f794:	f3ef 8311 	mrs	r3, BASEPRI
 800f798:	60bb      	str	r3, [r7, #8]
  return(result);
 800f79a:	68bb      	ldr	r3, [r7, #8]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d007      	beq.n	800f7b0 <osMutexRelease+0x50>
 800f7a0:	4b16      	ldr	r3, [pc, #88]	; (800f7fc <osMutexRelease+0x9c>)
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	2b02      	cmp	r3, #2
 800f7a6:	d103      	bne.n	800f7b0 <osMutexRelease+0x50>
    stat = osErrorISR;
 800f7a8:	f06f 0305 	mvn.w	r3, #5
 800f7ac:	61fb      	str	r3, [r7, #28]
 800f7ae:	e01f      	b.n	800f7f0 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800f7b0:	69bb      	ldr	r3, [r7, #24]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d103      	bne.n	800f7be <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800f7b6:	f06f 0303 	mvn.w	r3, #3
 800f7ba:	61fb      	str	r3, [r7, #28]
 800f7bc:	e018      	b.n	800f7f0 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800f7be:	697b      	ldr	r3, [r7, #20]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d009      	beq.n	800f7d8 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800f7c4:	69b8      	ldr	r0, [r7, #24]
 800f7c6:	f001 f8f7 	bl	80109b8 <xQueueGiveMutexRecursive>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	2b01      	cmp	r3, #1
 800f7ce:	d00f      	beq.n	800f7f0 <osMutexRelease+0x90>
        stat = osErrorResource;
 800f7d0:	f06f 0302 	mvn.w	r3, #2
 800f7d4:	61fb      	str	r3, [r7, #28]
 800f7d6:	e00b      	b.n	800f7f0 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800f7d8:	2300      	movs	r3, #0
 800f7da:	2200      	movs	r2, #0
 800f7dc:	2100      	movs	r1, #0
 800f7de:	69b8      	ldr	r0, [r7, #24]
 800f7e0:	f001 f9b8 	bl	8010b54 <xQueueGenericSend>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	2b01      	cmp	r3, #1
 800f7e8:	d002      	beq.n	800f7f0 <osMutexRelease+0x90>
        stat = osErrorResource;
 800f7ea:	f06f 0302 	mvn.w	r3, #2
 800f7ee:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800f7f0:	69fb      	ldr	r3, [r7, #28]
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3720      	adds	r7, #32
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
 800f7fa:	bf00      	nop
 800f7fc:	20001444 	.word	0x20001444

0800f800 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f800:	b580      	push	{r7, lr}
 800f802:	b08c      	sub	sp, #48	; 0x30
 800f804:	af02      	add	r7, sp, #8
 800f806:	60f8      	str	r0, [r7, #12]
 800f808:	60b9      	str	r1, [r7, #8]
 800f80a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f80c:	2300      	movs	r3, #0
 800f80e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f810:	f3ef 8305 	mrs	r3, IPSR
 800f814:	61bb      	str	r3, [r7, #24]
  return(result);
 800f816:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f818:	2b00      	cmp	r3, #0
 800f81a:	f040 8087 	bne.w	800f92c <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f81e:	f3ef 8310 	mrs	r3, PRIMASK
 800f822:	617b      	str	r3, [r7, #20]
  return(result);
 800f824:	697b      	ldr	r3, [r7, #20]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d105      	bne.n	800f836 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f82a:	f3ef 8311 	mrs	r3, BASEPRI
 800f82e:	613b      	str	r3, [r7, #16]
  return(result);
 800f830:	693b      	ldr	r3, [r7, #16]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d003      	beq.n	800f83e <osSemaphoreNew+0x3e>
 800f836:	4b40      	ldr	r3, [pc, #256]	; (800f938 <osSemaphoreNew+0x138>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	2b02      	cmp	r3, #2
 800f83c:	d076      	beq.n	800f92c <osSemaphoreNew+0x12c>
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d073      	beq.n	800f92c <osSemaphoreNew+0x12c>
 800f844:	68ba      	ldr	r2, [r7, #8]
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	429a      	cmp	r2, r3
 800f84a:	d86f      	bhi.n	800f92c <osSemaphoreNew+0x12c>
    mem = -1;
 800f84c:	f04f 33ff 	mov.w	r3, #4294967295
 800f850:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d015      	beq.n	800f884 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	689b      	ldr	r3, [r3, #8]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d006      	beq.n	800f86e <osSemaphoreNew+0x6e>
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	68db      	ldr	r3, [r3, #12]
 800f864:	2b4f      	cmp	r3, #79	; 0x4f
 800f866:	d902      	bls.n	800f86e <osSemaphoreNew+0x6e>
        mem = 1;
 800f868:	2301      	movs	r3, #1
 800f86a:	623b      	str	r3, [r7, #32]
 800f86c:	e00c      	b.n	800f888 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	689b      	ldr	r3, [r3, #8]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d108      	bne.n	800f888 <osSemaphoreNew+0x88>
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	68db      	ldr	r3, [r3, #12]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d104      	bne.n	800f888 <osSemaphoreNew+0x88>
          mem = 0;
 800f87e:	2300      	movs	r3, #0
 800f880:	623b      	str	r3, [r7, #32]
 800f882:	e001      	b.n	800f888 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800f884:	2300      	movs	r3, #0
 800f886:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800f888:	6a3b      	ldr	r3, [r7, #32]
 800f88a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f88e:	d04d      	beq.n	800f92c <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	2b01      	cmp	r3, #1
 800f894:	d129      	bne.n	800f8ea <osSemaphoreNew+0xea>
        if (mem == 1) {
 800f896:	6a3b      	ldr	r3, [r7, #32]
 800f898:	2b01      	cmp	r3, #1
 800f89a:	d10b      	bne.n	800f8b4 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	689a      	ldr	r2, [r3, #8]
 800f8a0:	2303      	movs	r3, #3
 800f8a2:	9300      	str	r3, [sp, #0]
 800f8a4:	4613      	mov	r3, r2
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	2100      	movs	r1, #0
 800f8aa:	2001      	movs	r0, #1
 800f8ac:	f000 ff62 	bl	8010774 <xQueueGenericCreateStatic>
 800f8b0:	6278      	str	r0, [r7, #36]	; 0x24
 800f8b2:	e005      	b.n	800f8c0 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800f8b4:	2203      	movs	r2, #3
 800f8b6:	2100      	movs	r1, #0
 800f8b8:	2001      	movs	r0, #1
 800f8ba:	f000 ffce 	bl	801085a <xQueueGenericCreate>
 800f8be:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d022      	beq.n	800f90c <osSemaphoreNew+0x10c>
 800f8c6:	68bb      	ldr	r3, [r7, #8]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d01f      	beq.n	800f90c <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	2100      	movs	r1, #0
 800f8d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f8d4:	f001 f93e 	bl	8010b54 <xQueueGenericSend>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	2b01      	cmp	r3, #1
 800f8dc:	d016      	beq.n	800f90c <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800f8de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f8e0:	f001 fdb1 	bl	8011446 <vQueueDelete>
            hSemaphore = NULL;
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	627b      	str	r3, [r7, #36]	; 0x24
 800f8e8:	e010      	b.n	800f90c <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800f8ea:	6a3b      	ldr	r3, [r7, #32]
 800f8ec:	2b01      	cmp	r3, #1
 800f8ee:	d108      	bne.n	800f902 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	689b      	ldr	r3, [r3, #8]
 800f8f4:	461a      	mov	r2, r3
 800f8f6:	68b9      	ldr	r1, [r7, #8]
 800f8f8:	68f8      	ldr	r0, [r7, #12]
 800f8fa:	f001 f8c5 	bl	8010a88 <xQueueCreateCountingSemaphoreStatic>
 800f8fe:	6278      	str	r0, [r7, #36]	; 0x24
 800f900:	e004      	b.n	800f90c <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f902:	68b9      	ldr	r1, [r7, #8]
 800f904:	68f8      	ldr	r0, [r7, #12]
 800f906:	f001 f8f4 	bl	8010af2 <xQueueCreateCountingSemaphore>
 800f90a:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d00c      	beq.n	800f92c <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d003      	beq.n	800f920 <osSemaphoreNew+0x120>
          name = attr->name;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	61fb      	str	r3, [r7, #28]
 800f91e:	e001      	b.n	800f924 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800f920:	2300      	movs	r3, #0
 800f922:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f924:	69f9      	ldr	r1, [r7, #28]
 800f926:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f928:	f001 fed8 	bl	80116dc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f92e:	4618      	mov	r0, r3
 800f930:	3728      	adds	r7, #40	; 0x28
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}
 800f936:	bf00      	nop
 800f938:	20001444 	.word	0x20001444

0800f93c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b088      	sub	sp, #32
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
 800f944:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f94a:	2300      	movs	r3, #0
 800f94c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800f94e:	69bb      	ldr	r3, [r7, #24]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d103      	bne.n	800f95c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f954:	f06f 0303 	mvn.w	r3, #3
 800f958:	61fb      	str	r3, [r7, #28]
 800f95a:	e04b      	b.n	800f9f4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f95c:	f3ef 8305 	mrs	r3, IPSR
 800f960:	617b      	str	r3, [r7, #20]
  return(result);
 800f962:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f964:	2b00      	cmp	r3, #0
 800f966:	d10f      	bne.n	800f988 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f968:	f3ef 8310 	mrs	r3, PRIMASK
 800f96c:	613b      	str	r3, [r7, #16]
  return(result);
 800f96e:	693b      	ldr	r3, [r7, #16]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d105      	bne.n	800f980 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f974:	f3ef 8311 	mrs	r3, BASEPRI
 800f978:	60fb      	str	r3, [r7, #12]
  return(result);
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d026      	beq.n	800f9ce <osSemaphoreAcquire+0x92>
 800f980:	4b1f      	ldr	r3, [pc, #124]	; (800fa00 <osSemaphoreAcquire+0xc4>)
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	2b02      	cmp	r3, #2
 800f986:	d122      	bne.n	800f9ce <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d003      	beq.n	800f996 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800f98e:	f06f 0303 	mvn.w	r3, #3
 800f992:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800f994:	e02d      	b.n	800f9f2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800f996:	2300      	movs	r3, #0
 800f998:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f99a:	f107 0308 	add.w	r3, r7, #8
 800f99e:	461a      	mov	r2, r3
 800f9a0:	2100      	movs	r1, #0
 800f9a2:	69b8      	ldr	r0, [r7, #24]
 800f9a4:	f001 fcd2 	bl	801134c <xQueueReceiveFromISR>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	2b01      	cmp	r3, #1
 800f9ac:	d003      	beq.n	800f9b6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800f9ae:	f06f 0302 	mvn.w	r3, #2
 800f9b2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800f9b4:	e01d      	b.n	800f9f2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d01a      	beq.n	800f9f2 <osSemaphoreAcquire+0xb6>
 800f9bc:	4b11      	ldr	r3, [pc, #68]	; (800fa04 <osSemaphoreAcquire+0xc8>)
 800f9be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9c2:	601a      	str	r2, [r3, #0]
 800f9c4:	f3bf 8f4f 	dsb	sy
 800f9c8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800f9cc:	e011      	b.n	800f9f2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f9ce:	6839      	ldr	r1, [r7, #0]
 800f9d0:	69b8      	ldr	r0, [r7, #24]
 800f9d2:	f001 fbb3 	bl	801113c <xQueueSemaphoreTake>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	2b01      	cmp	r3, #1
 800f9da:	d00b      	beq.n	800f9f4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d003      	beq.n	800f9ea <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800f9e2:	f06f 0301 	mvn.w	r3, #1
 800f9e6:	61fb      	str	r3, [r7, #28]
 800f9e8:	e004      	b.n	800f9f4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800f9ea:	f06f 0302 	mvn.w	r3, #2
 800f9ee:	61fb      	str	r3, [r7, #28]
 800f9f0:	e000      	b.n	800f9f4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800f9f2:	bf00      	nop
      }
    }
  }

  return (stat);
 800f9f4:	69fb      	ldr	r3, [r7, #28]
}
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	3720      	adds	r7, #32
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}
 800f9fe:	bf00      	nop
 800fa00:	20001444 	.word	0x20001444
 800fa04:	e000ed04 	.word	0xe000ed04

0800fa08 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b088      	sub	sp, #32
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800fa14:	2300      	movs	r3, #0
 800fa16:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800fa18:	69bb      	ldr	r3, [r7, #24]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d103      	bne.n	800fa26 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800fa1e:	f06f 0303 	mvn.w	r3, #3
 800fa22:	61fb      	str	r3, [r7, #28]
 800fa24:	e03e      	b.n	800faa4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa26:	f3ef 8305 	mrs	r3, IPSR
 800fa2a:	617b      	str	r3, [r7, #20]
  return(result);
 800fa2c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d10f      	bne.n	800fa52 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fa32:	f3ef 8310 	mrs	r3, PRIMASK
 800fa36:	613b      	str	r3, [r7, #16]
  return(result);
 800fa38:	693b      	ldr	r3, [r7, #16]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d105      	bne.n	800fa4a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fa3e:	f3ef 8311 	mrs	r3, BASEPRI
 800fa42:	60fb      	str	r3, [r7, #12]
  return(result);
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d01e      	beq.n	800fa88 <osSemaphoreRelease+0x80>
 800fa4a:	4b19      	ldr	r3, [pc, #100]	; (800fab0 <osSemaphoreRelease+0xa8>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	2b02      	cmp	r3, #2
 800fa50:	d11a      	bne.n	800fa88 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800fa52:	2300      	movs	r3, #0
 800fa54:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800fa56:	f107 0308 	add.w	r3, r7, #8
 800fa5a:	4619      	mov	r1, r3
 800fa5c:	69b8      	ldr	r0, [r7, #24]
 800fa5e:	f001 fa07 	bl	8010e70 <xQueueGiveFromISR>
 800fa62:	4603      	mov	r3, r0
 800fa64:	2b01      	cmp	r3, #1
 800fa66:	d003      	beq.n	800fa70 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800fa68:	f06f 0302 	mvn.w	r3, #2
 800fa6c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800fa6e:	e018      	b.n	800faa2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d015      	beq.n	800faa2 <osSemaphoreRelease+0x9a>
 800fa76:	4b0f      	ldr	r3, [pc, #60]	; (800fab4 <osSemaphoreRelease+0xac>)
 800fa78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa7c:	601a      	str	r2, [r3, #0]
 800fa7e:	f3bf 8f4f 	dsb	sy
 800fa82:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800fa86:	e00c      	b.n	800faa2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800fa88:	2300      	movs	r3, #0
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	2100      	movs	r1, #0
 800fa8e:	69b8      	ldr	r0, [r7, #24]
 800fa90:	f001 f860 	bl	8010b54 <xQueueGenericSend>
 800fa94:	4603      	mov	r3, r0
 800fa96:	2b01      	cmp	r3, #1
 800fa98:	d004      	beq.n	800faa4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800fa9a:	f06f 0302 	mvn.w	r3, #2
 800fa9e:	61fb      	str	r3, [r7, #28]
 800faa0:	e000      	b.n	800faa4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800faa2:	bf00      	nop
    }
  }

  return (stat);
 800faa4:	69fb      	ldr	r3, [r7, #28]
}
 800faa6:	4618      	mov	r0, r3
 800faa8:	3720      	adds	r7, #32
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}
 800faae:	bf00      	nop
 800fab0:	20001444 	.word	0x20001444
 800fab4:	e000ed04 	.word	0xe000ed04

0800fab8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800fab8:	b580      	push	{r7, lr}
 800faba:	b08c      	sub	sp, #48	; 0x30
 800fabc:	af02      	add	r7, sp, #8
 800fabe:	60f8      	str	r0, [r7, #12]
 800fac0:	60b9      	str	r1, [r7, #8]
 800fac2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800fac4:	2300      	movs	r3, #0
 800fac6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fac8:	f3ef 8305 	mrs	r3, IPSR
 800facc:	61bb      	str	r3, [r7, #24]
  return(result);
 800face:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d170      	bne.n	800fbb6 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fad4:	f3ef 8310 	mrs	r3, PRIMASK
 800fad8:	617b      	str	r3, [r7, #20]
  return(result);
 800fada:	697b      	ldr	r3, [r7, #20]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d105      	bne.n	800faec <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fae0:	f3ef 8311 	mrs	r3, BASEPRI
 800fae4:	613b      	str	r3, [r7, #16]
  return(result);
 800fae6:	693b      	ldr	r3, [r7, #16]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d003      	beq.n	800faf4 <osMessageQueueNew+0x3c>
 800faec:	4b34      	ldr	r3, [pc, #208]	; (800fbc0 <osMessageQueueNew+0x108>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	2b02      	cmp	r3, #2
 800faf2:	d060      	beq.n	800fbb6 <osMessageQueueNew+0xfe>
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d05d      	beq.n	800fbb6 <osMessageQueueNew+0xfe>
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d05a      	beq.n	800fbb6 <osMessageQueueNew+0xfe>
    mem = -1;
 800fb00:	f04f 33ff 	mov.w	r3, #4294967295
 800fb04:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d029      	beq.n	800fb60 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	689b      	ldr	r3, [r3, #8]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d012      	beq.n	800fb3a <osMessageQueueNew+0x82>
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	68db      	ldr	r3, [r3, #12]
 800fb18:	2b4f      	cmp	r3, #79	; 0x4f
 800fb1a:	d90e      	bls.n	800fb3a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d00a      	beq.n	800fb3a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	695a      	ldr	r2, [r3, #20]
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	68b9      	ldr	r1, [r7, #8]
 800fb2c:	fb01 f303 	mul.w	r3, r1, r3
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d302      	bcc.n	800fb3a <osMessageQueueNew+0x82>
        mem = 1;
 800fb34:	2301      	movs	r3, #1
 800fb36:	623b      	str	r3, [r7, #32]
 800fb38:	e014      	b.n	800fb64 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	689b      	ldr	r3, [r3, #8]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d110      	bne.n	800fb64 <osMessageQueueNew+0xac>
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	68db      	ldr	r3, [r3, #12]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d10c      	bne.n	800fb64 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d108      	bne.n	800fb64 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	695b      	ldr	r3, [r3, #20]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d104      	bne.n	800fb64 <osMessageQueueNew+0xac>
          mem = 0;
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	623b      	str	r3, [r7, #32]
 800fb5e:	e001      	b.n	800fb64 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800fb60:	2300      	movs	r3, #0
 800fb62:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800fb64:	6a3b      	ldr	r3, [r7, #32]
 800fb66:	2b01      	cmp	r3, #1
 800fb68:	d10c      	bne.n	800fb84 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	691a      	ldr	r2, [r3, #16]
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6899      	ldr	r1, [r3, #8]
 800fb72:	2300      	movs	r3, #0
 800fb74:	9300      	str	r3, [sp, #0]
 800fb76:	460b      	mov	r3, r1
 800fb78:	68b9      	ldr	r1, [r7, #8]
 800fb7a:	68f8      	ldr	r0, [r7, #12]
 800fb7c:	f000 fdfa 	bl	8010774 <xQueueGenericCreateStatic>
 800fb80:	6278      	str	r0, [r7, #36]	; 0x24
 800fb82:	e008      	b.n	800fb96 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800fb84:	6a3b      	ldr	r3, [r7, #32]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d105      	bne.n	800fb96 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	68b9      	ldr	r1, [r7, #8]
 800fb8e:	68f8      	ldr	r0, [r7, #12]
 800fb90:	f000 fe63 	bl	801085a <xQueueGenericCreate>
 800fb94:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800fb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d00c      	beq.n	800fbb6 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d003      	beq.n	800fbaa <osMessageQueueNew+0xf2>
        name = attr->name;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	61fb      	str	r3, [r7, #28]
 800fba8:	e001      	b.n	800fbae <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800fbae:	69f9      	ldr	r1, [r7, #28]
 800fbb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fbb2:	f001 fd93 	bl	80116dc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800fbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fbb8:	4618      	mov	r0, r3
 800fbba:	3728      	adds	r7, #40	; 0x28
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd80      	pop	{r7, pc}
 800fbc0:	20001444 	.word	0x20001444

0800fbc4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b08a      	sub	sp, #40	; 0x28
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	60f8      	str	r0, [r7, #12]
 800fbcc:	60b9      	str	r1, [r7, #8]
 800fbce:	603b      	str	r3, [r7, #0]
 800fbd0:	4613      	mov	r3, r2
 800fbd2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800fbd8:	2300      	movs	r3, #0
 800fbda:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fbdc:	f3ef 8305 	mrs	r3, IPSR
 800fbe0:	61fb      	str	r3, [r7, #28]
  return(result);
 800fbe2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d10f      	bne.n	800fc08 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fbe8:	f3ef 8310 	mrs	r3, PRIMASK
 800fbec:	61bb      	str	r3, [r7, #24]
  return(result);
 800fbee:	69bb      	ldr	r3, [r7, #24]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d105      	bne.n	800fc00 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fbf4:	f3ef 8311 	mrs	r3, BASEPRI
 800fbf8:	617b      	str	r3, [r7, #20]
  return(result);
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d02c      	beq.n	800fc5a <osMessageQueuePut+0x96>
 800fc00:	4b28      	ldr	r3, [pc, #160]	; (800fca4 <osMessageQueuePut+0xe0>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	2b02      	cmp	r3, #2
 800fc06:	d128      	bne.n	800fc5a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fc08:	6a3b      	ldr	r3, [r7, #32]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d005      	beq.n	800fc1a <osMessageQueuePut+0x56>
 800fc0e:	68bb      	ldr	r3, [r7, #8]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d002      	beq.n	800fc1a <osMessageQueuePut+0x56>
 800fc14:	683b      	ldr	r3, [r7, #0]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d003      	beq.n	800fc22 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800fc1a:	f06f 0303 	mvn.w	r3, #3
 800fc1e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fc20:	e039      	b.n	800fc96 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800fc22:	2300      	movs	r3, #0
 800fc24:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800fc26:	f107 0210 	add.w	r2, r7, #16
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	68b9      	ldr	r1, [r7, #8]
 800fc2e:	6a38      	ldr	r0, [r7, #32]
 800fc30:	f001 f88a 	bl	8010d48 <xQueueGenericSendFromISR>
 800fc34:	4603      	mov	r3, r0
 800fc36:	2b01      	cmp	r3, #1
 800fc38:	d003      	beq.n	800fc42 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800fc3a:	f06f 0302 	mvn.w	r3, #2
 800fc3e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fc40:	e029      	b.n	800fc96 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800fc42:	693b      	ldr	r3, [r7, #16]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d026      	beq.n	800fc96 <osMessageQueuePut+0xd2>
 800fc48:	4b17      	ldr	r3, [pc, #92]	; (800fca8 <osMessageQueuePut+0xe4>)
 800fc4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc4e:	601a      	str	r2, [r3, #0]
 800fc50:	f3bf 8f4f 	dsb	sy
 800fc54:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fc58:	e01d      	b.n	800fc96 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fc5a:	6a3b      	ldr	r3, [r7, #32]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d002      	beq.n	800fc66 <osMessageQueuePut+0xa2>
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d103      	bne.n	800fc6e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800fc66:	f06f 0303 	mvn.w	r3, #3
 800fc6a:	627b      	str	r3, [r7, #36]	; 0x24
 800fc6c:	e014      	b.n	800fc98 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fc6e:	2300      	movs	r3, #0
 800fc70:	683a      	ldr	r2, [r7, #0]
 800fc72:	68b9      	ldr	r1, [r7, #8]
 800fc74:	6a38      	ldr	r0, [r7, #32]
 800fc76:	f000 ff6d 	bl	8010b54 <xQueueGenericSend>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	2b01      	cmp	r3, #1
 800fc7e:	d00b      	beq.n	800fc98 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800fc80:	683b      	ldr	r3, [r7, #0]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d003      	beq.n	800fc8e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800fc86:	f06f 0301 	mvn.w	r3, #1
 800fc8a:	627b      	str	r3, [r7, #36]	; 0x24
 800fc8c:	e004      	b.n	800fc98 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800fc8e:	f06f 0302 	mvn.w	r3, #2
 800fc92:	627b      	str	r3, [r7, #36]	; 0x24
 800fc94:	e000      	b.n	800fc98 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fc96:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800fc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	3728      	adds	r7, #40	; 0x28
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}
 800fca2:	bf00      	nop
 800fca4:	20001444 	.word	0x20001444
 800fca8:	e000ed04 	.word	0xe000ed04

0800fcac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800fcac:	b480      	push	{r7}
 800fcae:	b085      	sub	sp, #20
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	60f8      	str	r0, [r7, #12]
 800fcb4:	60b9      	str	r1, [r7, #8]
 800fcb6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	4a07      	ldr	r2, [pc, #28]	; (800fcd8 <vApplicationGetIdleTaskMemory+0x2c>)
 800fcbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800fcbe:	68bb      	ldr	r3, [r7, #8]
 800fcc0:	4a06      	ldr	r2, [pc, #24]	; (800fcdc <vApplicationGetIdleTaskMemory+0x30>)
 800fcc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2280      	movs	r2, #128	; 0x80
 800fcc8:	601a      	str	r2, [r3, #0]
}
 800fcca:	bf00      	nop
 800fccc:	3714      	adds	r7, #20
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd4:	4770      	bx	lr
 800fcd6:	bf00      	nop
 800fcd8:	20001448 	.word	0x20001448
 800fcdc:	200014a4 	.word	0x200014a4

0800fce0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800fce0:	b480      	push	{r7}
 800fce2:	b085      	sub	sp, #20
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	60f8      	str	r0, [r7, #12]
 800fce8:	60b9      	str	r1, [r7, #8]
 800fcea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	4a07      	ldr	r2, [pc, #28]	; (800fd0c <vApplicationGetTimerTaskMemory+0x2c>)
 800fcf0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	4a06      	ldr	r2, [pc, #24]	; (800fd10 <vApplicationGetTimerTaskMemory+0x30>)
 800fcf6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fcfe:	601a      	str	r2, [r3, #0]
}
 800fd00:	bf00      	nop
 800fd02:	3714      	adds	r7, #20
 800fd04:	46bd      	mov	sp, r7
 800fd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0a:	4770      	bx	lr
 800fd0c:	200016a4 	.word	0x200016a4
 800fd10:	20001700 	.word	0x20001700

0800fd14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fd14:	b480      	push	{r7}
 800fd16:	b085      	sub	sp, #20
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	60f8      	str	r0, [r7, #12]
 800fd1c:	60b9      	str	r1, [r7, #8]
 800fd1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	3b04      	subs	r3, #4
 800fd24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fd2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	3b04      	subs	r3, #4
 800fd32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	f023 0201 	bic.w	r2, r3, #1
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	3b04      	subs	r3, #4
 800fd42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fd44:	4a0c      	ldr	r2, [pc, #48]	; (800fd78 <pxPortInitialiseStack+0x64>)
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	3b14      	subs	r3, #20
 800fd4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fd50:	687a      	ldr	r2, [r7, #4]
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	3b04      	subs	r3, #4
 800fd5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	f06f 0202 	mvn.w	r2, #2
 800fd62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	3b20      	subs	r3, #32
 800fd68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
}
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	3714      	adds	r7, #20
 800fd70:	46bd      	mov	sp, r7
 800fd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd76:	4770      	bx	lr
 800fd78:	0800fd7d 	.word	0x0800fd7d

0800fd7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fd7c:	b480      	push	{r7}
 800fd7e:	b085      	sub	sp, #20
 800fd80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fd82:	2300      	movs	r3, #0
 800fd84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fd86:	4b11      	ldr	r3, [pc, #68]	; (800fdcc <prvTaskExitError+0x50>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd8e:	d009      	beq.n	800fda4 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd94:	f383 8811 	msr	BASEPRI, r3
 800fd98:	f3bf 8f6f 	isb	sy
 800fd9c:	f3bf 8f4f 	dsb	sy
 800fda0:	60fb      	str	r3, [r7, #12]
 800fda2:	e7fe      	b.n	800fda2 <prvTaskExitError+0x26>
 800fda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda8:	f383 8811 	msr	BASEPRI, r3
 800fdac:	f3bf 8f6f 	isb	sy
 800fdb0:	f3bf 8f4f 	dsb	sy
 800fdb4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fdb6:	bf00      	nop
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d0fc      	beq.n	800fdb8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fdbe:	bf00      	nop
 800fdc0:	3714      	adds	r7, #20
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc8:	4770      	bx	lr
 800fdca:	bf00      	nop
 800fdcc:	2000002c 	.word	0x2000002c

0800fdd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fdd0:	4b07      	ldr	r3, [pc, #28]	; (800fdf0 <pxCurrentTCBConst2>)
 800fdd2:	6819      	ldr	r1, [r3, #0]
 800fdd4:	6808      	ldr	r0, [r1, #0]
 800fdd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdda:	f380 8809 	msr	PSP, r0
 800fdde:	f3bf 8f6f 	isb	sy
 800fde2:	f04f 0000 	mov.w	r0, #0
 800fde6:	f380 8811 	msr	BASEPRI, r0
 800fdea:	4770      	bx	lr
 800fdec:	f3af 8000 	nop.w

0800fdf0 <pxCurrentTCBConst2>:
 800fdf0:	20004230 	.word	0x20004230
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fdf4:	bf00      	nop
 800fdf6:	bf00      	nop

0800fdf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fdf8:	4808      	ldr	r0, [pc, #32]	; (800fe1c <prvPortStartFirstTask+0x24>)
 800fdfa:	6800      	ldr	r0, [r0, #0]
 800fdfc:	6800      	ldr	r0, [r0, #0]
 800fdfe:	f380 8808 	msr	MSP, r0
 800fe02:	f04f 0000 	mov.w	r0, #0
 800fe06:	f380 8814 	msr	CONTROL, r0
 800fe0a:	b662      	cpsie	i
 800fe0c:	b661      	cpsie	f
 800fe0e:	f3bf 8f4f 	dsb	sy
 800fe12:	f3bf 8f6f 	isb	sy
 800fe16:	df00      	svc	0
 800fe18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fe1a:	bf00      	nop
 800fe1c:	e000ed08 	.word	0xe000ed08

0800fe20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b086      	sub	sp, #24
 800fe24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fe26:	4b44      	ldr	r3, [pc, #272]	; (800ff38 <xPortStartScheduler+0x118>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	4a44      	ldr	r2, [pc, #272]	; (800ff3c <xPortStartScheduler+0x11c>)
 800fe2c:	4293      	cmp	r3, r2
 800fe2e:	d109      	bne.n	800fe44 <xPortStartScheduler+0x24>
 800fe30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe34:	f383 8811 	msr	BASEPRI, r3
 800fe38:	f3bf 8f6f 	isb	sy
 800fe3c:	f3bf 8f4f 	dsb	sy
 800fe40:	613b      	str	r3, [r7, #16]
 800fe42:	e7fe      	b.n	800fe42 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fe44:	4b3c      	ldr	r3, [pc, #240]	; (800ff38 <xPortStartScheduler+0x118>)
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	4a3d      	ldr	r2, [pc, #244]	; (800ff40 <xPortStartScheduler+0x120>)
 800fe4a:	4293      	cmp	r3, r2
 800fe4c:	d109      	bne.n	800fe62 <xPortStartScheduler+0x42>
 800fe4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe52:	f383 8811 	msr	BASEPRI, r3
 800fe56:	f3bf 8f6f 	isb	sy
 800fe5a:	f3bf 8f4f 	dsb	sy
 800fe5e:	60fb      	str	r3, [r7, #12]
 800fe60:	e7fe      	b.n	800fe60 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fe62:	4b38      	ldr	r3, [pc, #224]	; (800ff44 <xPortStartScheduler+0x124>)
 800fe64:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	781b      	ldrb	r3, [r3, #0]
 800fe6a:	b2db      	uxtb	r3, r3
 800fe6c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fe6e:	697b      	ldr	r3, [r7, #20]
 800fe70:	22ff      	movs	r2, #255	; 0xff
 800fe72:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fe74:	697b      	ldr	r3, [r7, #20]
 800fe76:	781b      	ldrb	r3, [r3, #0]
 800fe78:	b2db      	uxtb	r3, r3
 800fe7a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fe7c:	78fb      	ldrb	r3, [r7, #3]
 800fe7e:	b2db      	uxtb	r3, r3
 800fe80:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fe84:	b2da      	uxtb	r2, r3
 800fe86:	4b30      	ldr	r3, [pc, #192]	; (800ff48 <xPortStartScheduler+0x128>)
 800fe88:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fe8a:	4b30      	ldr	r3, [pc, #192]	; (800ff4c <xPortStartScheduler+0x12c>)
 800fe8c:	2207      	movs	r2, #7
 800fe8e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fe90:	e009      	b.n	800fea6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800fe92:	4b2e      	ldr	r3, [pc, #184]	; (800ff4c <xPortStartScheduler+0x12c>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	3b01      	subs	r3, #1
 800fe98:	4a2c      	ldr	r2, [pc, #176]	; (800ff4c <xPortStartScheduler+0x12c>)
 800fe9a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fe9c:	78fb      	ldrb	r3, [r7, #3]
 800fe9e:	b2db      	uxtb	r3, r3
 800fea0:	005b      	lsls	r3, r3, #1
 800fea2:	b2db      	uxtb	r3, r3
 800fea4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fea6:	78fb      	ldrb	r3, [r7, #3]
 800fea8:	b2db      	uxtb	r3, r3
 800feaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800feae:	2b80      	cmp	r3, #128	; 0x80
 800feb0:	d0ef      	beq.n	800fe92 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800feb2:	4b26      	ldr	r3, [pc, #152]	; (800ff4c <xPortStartScheduler+0x12c>)
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	f1c3 0307 	rsb	r3, r3, #7
 800feba:	2b04      	cmp	r3, #4
 800febc:	d009      	beq.n	800fed2 <xPortStartScheduler+0xb2>
 800febe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fec2:	f383 8811 	msr	BASEPRI, r3
 800fec6:	f3bf 8f6f 	isb	sy
 800feca:	f3bf 8f4f 	dsb	sy
 800fece:	60bb      	str	r3, [r7, #8]
 800fed0:	e7fe      	b.n	800fed0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fed2:	4b1e      	ldr	r3, [pc, #120]	; (800ff4c <xPortStartScheduler+0x12c>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	021b      	lsls	r3, r3, #8
 800fed8:	4a1c      	ldr	r2, [pc, #112]	; (800ff4c <xPortStartScheduler+0x12c>)
 800feda:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fedc:	4b1b      	ldr	r3, [pc, #108]	; (800ff4c <xPortStartScheduler+0x12c>)
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fee4:	4a19      	ldr	r2, [pc, #100]	; (800ff4c <xPortStartScheduler+0x12c>)
 800fee6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	b2da      	uxtb	r2, r3
 800feec:	697b      	ldr	r3, [r7, #20]
 800feee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fef0:	4b17      	ldr	r3, [pc, #92]	; (800ff50 <xPortStartScheduler+0x130>)
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	4a16      	ldr	r2, [pc, #88]	; (800ff50 <xPortStartScheduler+0x130>)
 800fef6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fefa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fefc:	4b14      	ldr	r3, [pc, #80]	; (800ff50 <xPortStartScheduler+0x130>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	4a13      	ldr	r2, [pc, #76]	; (800ff50 <xPortStartScheduler+0x130>)
 800ff02:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ff06:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ff08:	f000 f8d6 	bl	80100b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ff0c:	4b11      	ldr	r3, [pc, #68]	; (800ff54 <xPortStartScheduler+0x134>)
 800ff0e:	2200      	movs	r2, #0
 800ff10:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ff12:	f000 f8f5 	bl	8010100 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ff16:	4b10      	ldr	r3, [pc, #64]	; (800ff58 <xPortStartScheduler+0x138>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	4a0f      	ldr	r2, [pc, #60]	; (800ff58 <xPortStartScheduler+0x138>)
 800ff1c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ff20:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ff22:	f7ff ff69 	bl	800fdf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ff26:	f002 f83f 	bl	8011fa8 <vTaskSwitchContext>
	prvTaskExitError();
 800ff2a:	f7ff ff27 	bl	800fd7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ff2e:	2300      	movs	r3, #0
}
 800ff30:	4618      	mov	r0, r3
 800ff32:	3718      	adds	r7, #24
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}
 800ff38:	e000ed00 	.word	0xe000ed00
 800ff3c:	410fc271 	.word	0x410fc271
 800ff40:	410fc270 	.word	0x410fc270
 800ff44:	e000e400 	.word	0xe000e400
 800ff48:	20001b00 	.word	0x20001b00
 800ff4c:	20001b04 	.word	0x20001b04
 800ff50:	e000ed20 	.word	0xe000ed20
 800ff54:	2000002c 	.word	0x2000002c
 800ff58:	e000ef34 	.word	0xe000ef34

0800ff5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ff5c:	b480      	push	{r7}
 800ff5e:	b083      	sub	sp, #12
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff66:	f383 8811 	msr	BASEPRI, r3
 800ff6a:	f3bf 8f6f 	isb	sy
 800ff6e:	f3bf 8f4f 	dsb	sy
 800ff72:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ff74:	4b0e      	ldr	r3, [pc, #56]	; (800ffb0 <vPortEnterCritical+0x54>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	3301      	adds	r3, #1
 800ff7a:	4a0d      	ldr	r2, [pc, #52]	; (800ffb0 <vPortEnterCritical+0x54>)
 800ff7c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ff7e:	4b0c      	ldr	r3, [pc, #48]	; (800ffb0 <vPortEnterCritical+0x54>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	2b01      	cmp	r3, #1
 800ff84:	d10e      	bne.n	800ffa4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ff86:	4b0b      	ldr	r3, [pc, #44]	; (800ffb4 <vPortEnterCritical+0x58>)
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	b2db      	uxtb	r3, r3
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d009      	beq.n	800ffa4 <vPortEnterCritical+0x48>
 800ff90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff94:	f383 8811 	msr	BASEPRI, r3
 800ff98:	f3bf 8f6f 	isb	sy
 800ff9c:	f3bf 8f4f 	dsb	sy
 800ffa0:	603b      	str	r3, [r7, #0]
 800ffa2:	e7fe      	b.n	800ffa2 <vPortEnterCritical+0x46>
	}
}
 800ffa4:	bf00      	nop
 800ffa6:	370c      	adds	r7, #12
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffae:	4770      	bx	lr
 800ffb0:	2000002c 	.word	0x2000002c
 800ffb4:	e000ed04 	.word	0xe000ed04

0800ffb8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ffb8:	b480      	push	{r7}
 800ffba:	b083      	sub	sp, #12
 800ffbc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ffbe:	4b11      	ldr	r3, [pc, #68]	; (8010004 <vPortExitCritical+0x4c>)
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d109      	bne.n	800ffda <vPortExitCritical+0x22>
 800ffc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffca:	f383 8811 	msr	BASEPRI, r3
 800ffce:	f3bf 8f6f 	isb	sy
 800ffd2:	f3bf 8f4f 	dsb	sy
 800ffd6:	607b      	str	r3, [r7, #4]
 800ffd8:	e7fe      	b.n	800ffd8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800ffda:	4b0a      	ldr	r3, [pc, #40]	; (8010004 <vPortExitCritical+0x4c>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	3b01      	subs	r3, #1
 800ffe0:	4a08      	ldr	r2, [pc, #32]	; (8010004 <vPortExitCritical+0x4c>)
 800ffe2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ffe4:	4b07      	ldr	r3, [pc, #28]	; (8010004 <vPortExitCritical+0x4c>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d104      	bne.n	800fff6 <vPortExitCritical+0x3e>
 800ffec:	2300      	movs	r3, #0
 800ffee:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800fff6:	bf00      	nop
 800fff8:	370c      	adds	r7, #12
 800fffa:	46bd      	mov	sp, r7
 800fffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010000:	4770      	bx	lr
 8010002:	bf00      	nop
 8010004:	2000002c 	.word	0x2000002c
	...

08010010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010010:	f3ef 8009 	mrs	r0, PSP
 8010014:	f3bf 8f6f 	isb	sy
 8010018:	4b15      	ldr	r3, [pc, #84]	; (8010070 <pxCurrentTCBConst>)
 801001a:	681a      	ldr	r2, [r3, #0]
 801001c:	f01e 0f10 	tst.w	lr, #16
 8010020:	bf08      	it	eq
 8010022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801002a:	6010      	str	r0, [r2, #0]
 801002c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010030:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010034:	f380 8811 	msr	BASEPRI, r0
 8010038:	f3bf 8f4f 	dsb	sy
 801003c:	f3bf 8f6f 	isb	sy
 8010040:	f001 ffb2 	bl	8011fa8 <vTaskSwitchContext>
 8010044:	f04f 0000 	mov.w	r0, #0
 8010048:	f380 8811 	msr	BASEPRI, r0
 801004c:	bc09      	pop	{r0, r3}
 801004e:	6819      	ldr	r1, [r3, #0]
 8010050:	6808      	ldr	r0, [r1, #0]
 8010052:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010056:	f01e 0f10 	tst.w	lr, #16
 801005a:	bf08      	it	eq
 801005c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010060:	f380 8809 	msr	PSP, r0
 8010064:	f3bf 8f6f 	isb	sy
 8010068:	4770      	bx	lr
 801006a:	bf00      	nop
 801006c:	f3af 8000 	nop.w

08010070 <pxCurrentTCBConst>:
 8010070:	20004230 	.word	0x20004230
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010074:	bf00      	nop
 8010076:	bf00      	nop

08010078 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b082      	sub	sp, #8
 801007c:	af00      	add	r7, sp, #0
	__asm volatile
 801007e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010082:	f383 8811 	msr	BASEPRI, r3
 8010086:	f3bf 8f6f 	isb	sy
 801008a:	f3bf 8f4f 	dsb	sy
 801008e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010090:	f001 fed2 	bl	8011e38 <xTaskIncrementTick>
 8010094:	4603      	mov	r3, r0
 8010096:	2b00      	cmp	r3, #0
 8010098:	d003      	beq.n	80100a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801009a:	4b06      	ldr	r3, [pc, #24]	; (80100b4 <SysTick_Handler+0x3c>)
 801009c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100a0:	601a      	str	r2, [r3, #0]
 80100a2:	2300      	movs	r3, #0
 80100a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80100ac:	bf00      	nop
 80100ae:	3708      	adds	r7, #8
 80100b0:	46bd      	mov	sp, r7
 80100b2:	bd80      	pop	{r7, pc}
 80100b4:	e000ed04 	.word	0xe000ed04

080100b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80100b8:	b480      	push	{r7}
 80100ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80100bc:	4b0b      	ldr	r3, [pc, #44]	; (80100ec <vPortSetupTimerInterrupt+0x34>)
 80100be:	2200      	movs	r2, #0
 80100c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80100c2:	4b0b      	ldr	r3, [pc, #44]	; (80100f0 <vPortSetupTimerInterrupt+0x38>)
 80100c4:	2200      	movs	r2, #0
 80100c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80100c8:	4b0a      	ldr	r3, [pc, #40]	; (80100f4 <vPortSetupTimerInterrupt+0x3c>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	4a0a      	ldr	r2, [pc, #40]	; (80100f8 <vPortSetupTimerInterrupt+0x40>)
 80100ce:	fba2 2303 	umull	r2, r3, r2, r3
 80100d2:	099b      	lsrs	r3, r3, #6
 80100d4:	4a09      	ldr	r2, [pc, #36]	; (80100fc <vPortSetupTimerInterrupt+0x44>)
 80100d6:	3b01      	subs	r3, #1
 80100d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80100da:	4b04      	ldr	r3, [pc, #16]	; (80100ec <vPortSetupTimerInterrupt+0x34>)
 80100dc:	2207      	movs	r2, #7
 80100de:	601a      	str	r2, [r3, #0]
}
 80100e0:	bf00      	nop
 80100e2:	46bd      	mov	sp, r7
 80100e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e8:	4770      	bx	lr
 80100ea:	bf00      	nop
 80100ec:	e000e010 	.word	0xe000e010
 80100f0:	e000e018 	.word	0xe000e018
 80100f4:	20000020 	.word	0x20000020
 80100f8:	10624dd3 	.word	0x10624dd3
 80100fc:	e000e014 	.word	0xe000e014

08010100 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010100:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010110 <vPortEnableVFP+0x10>
 8010104:	6801      	ldr	r1, [r0, #0]
 8010106:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801010a:	6001      	str	r1, [r0, #0]
 801010c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801010e:	bf00      	nop
 8010110:	e000ed88 	.word	0xe000ed88

08010114 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010114:	b480      	push	{r7}
 8010116:	b085      	sub	sp, #20
 8010118:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801011a:	f3ef 8305 	mrs	r3, IPSR
 801011e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	2b0f      	cmp	r3, #15
 8010124:	d913      	bls.n	801014e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010126:	4a16      	ldr	r2, [pc, #88]	; (8010180 <vPortValidateInterruptPriority+0x6c>)
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	4413      	add	r3, r2
 801012c:	781b      	ldrb	r3, [r3, #0]
 801012e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010130:	4b14      	ldr	r3, [pc, #80]	; (8010184 <vPortValidateInterruptPriority+0x70>)
 8010132:	781b      	ldrb	r3, [r3, #0]
 8010134:	7afa      	ldrb	r2, [r7, #11]
 8010136:	429a      	cmp	r2, r3
 8010138:	d209      	bcs.n	801014e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801013a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801013e:	f383 8811 	msr	BASEPRI, r3
 8010142:	f3bf 8f6f 	isb	sy
 8010146:	f3bf 8f4f 	dsb	sy
 801014a:	607b      	str	r3, [r7, #4]
 801014c:	e7fe      	b.n	801014c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801014e:	4b0e      	ldr	r3, [pc, #56]	; (8010188 <vPortValidateInterruptPriority+0x74>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010156:	4b0d      	ldr	r3, [pc, #52]	; (801018c <vPortValidateInterruptPriority+0x78>)
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	429a      	cmp	r2, r3
 801015c:	d909      	bls.n	8010172 <vPortValidateInterruptPriority+0x5e>
 801015e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010162:	f383 8811 	msr	BASEPRI, r3
 8010166:	f3bf 8f6f 	isb	sy
 801016a:	f3bf 8f4f 	dsb	sy
 801016e:	603b      	str	r3, [r7, #0]
 8010170:	e7fe      	b.n	8010170 <vPortValidateInterruptPriority+0x5c>
	}
 8010172:	bf00      	nop
 8010174:	3714      	adds	r7, #20
 8010176:	46bd      	mov	sp, r7
 8010178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017c:	4770      	bx	lr
 801017e:	bf00      	nop
 8010180:	e000e3f0 	.word	0xe000e3f0
 8010184:	20001b00 	.word	0x20001b00
 8010188:	e000ed0c 	.word	0xe000ed0c
 801018c:	20001b04 	.word	0x20001b04

08010190 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b08a      	sub	sp, #40	; 0x28
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010198:	2300      	movs	r3, #0
 801019a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801019c:	f001 fd5a 	bl	8011c54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80101a0:	4b57      	ldr	r3, [pc, #348]	; (8010300 <pvPortMalloc+0x170>)
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d101      	bne.n	80101ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80101a8:	f000 f90c 	bl	80103c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80101ac:	4b55      	ldr	r3, [pc, #340]	; (8010304 <pvPortMalloc+0x174>)
 80101ae:	681a      	ldr	r2, [r3, #0]
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	4013      	ands	r3, r2
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	f040 808c 	bne.w	80102d2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d01c      	beq.n	80101fa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80101c0:	2208      	movs	r2, #8
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	4413      	add	r3, r2
 80101c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f003 0307 	and.w	r3, r3, #7
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d013      	beq.n	80101fa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	f023 0307 	bic.w	r3, r3, #7
 80101d8:	3308      	adds	r3, #8
 80101da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f003 0307 	and.w	r3, r3, #7
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d009      	beq.n	80101fa <pvPortMalloc+0x6a>
 80101e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101ea:	f383 8811 	msr	BASEPRI, r3
 80101ee:	f3bf 8f6f 	isb	sy
 80101f2:	f3bf 8f4f 	dsb	sy
 80101f6:	617b      	str	r3, [r7, #20]
 80101f8:	e7fe      	b.n	80101f8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d068      	beq.n	80102d2 <pvPortMalloc+0x142>
 8010200:	4b41      	ldr	r3, [pc, #260]	; (8010308 <pvPortMalloc+0x178>)
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	687a      	ldr	r2, [r7, #4]
 8010206:	429a      	cmp	r2, r3
 8010208:	d863      	bhi.n	80102d2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801020a:	4b40      	ldr	r3, [pc, #256]	; (801030c <pvPortMalloc+0x17c>)
 801020c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801020e:	4b3f      	ldr	r3, [pc, #252]	; (801030c <pvPortMalloc+0x17c>)
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010214:	e004      	b.n	8010220 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8010216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010218:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801021a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010222:	685b      	ldr	r3, [r3, #4]
 8010224:	687a      	ldr	r2, [r7, #4]
 8010226:	429a      	cmp	r2, r3
 8010228:	d903      	bls.n	8010232 <pvPortMalloc+0xa2>
 801022a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d1f1      	bne.n	8010216 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010232:	4b33      	ldr	r3, [pc, #204]	; (8010300 <pvPortMalloc+0x170>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010238:	429a      	cmp	r2, r3
 801023a:	d04a      	beq.n	80102d2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801023c:	6a3b      	ldr	r3, [r7, #32]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	2208      	movs	r2, #8
 8010242:	4413      	add	r3, r2
 8010244:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010248:	681a      	ldr	r2, [r3, #0]
 801024a:	6a3b      	ldr	r3, [r7, #32]
 801024c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801024e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010250:	685a      	ldr	r2, [r3, #4]
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	1ad2      	subs	r2, r2, r3
 8010256:	2308      	movs	r3, #8
 8010258:	005b      	lsls	r3, r3, #1
 801025a:	429a      	cmp	r2, r3
 801025c:	d91e      	bls.n	801029c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801025e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	4413      	add	r3, r2
 8010264:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010266:	69bb      	ldr	r3, [r7, #24]
 8010268:	f003 0307 	and.w	r3, r3, #7
 801026c:	2b00      	cmp	r3, #0
 801026e:	d009      	beq.n	8010284 <pvPortMalloc+0xf4>
 8010270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010274:	f383 8811 	msr	BASEPRI, r3
 8010278:	f3bf 8f6f 	isb	sy
 801027c:	f3bf 8f4f 	dsb	sy
 8010280:	613b      	str	r3, [r7, #16]
 8010282:	e7fe      	b.n	8010282 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010286:	685a      	ldr	r2, [r3, #4]
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	1ad2      	subs	r2, r2, r3
 801028c:	69bb      	ldr	r3, [r7, #24]
 801028e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010292:	687a      	ldr	r2, [r7, #4]
 8010294:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010296:	69b8      	ldr	r0, [r7, #24]
 8010298:	f000 f8f6 	bl	8010488 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801029c:	4b1a      	ldr	r3, [pc, #104]	; (8010308 <pvPortMalloc+0x178>)
 801029e:	681a      	ldr	r2, [r3, #0]
 80102a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a2:	685b      	ldr	r3, [r3, #4]
 80102a4:	1ad3      	subs	r3, r2, r3
 80102a6:	4a18      	ldr	r2, [pc, #96]	; (8010308 <pvPortMalloc+0x178>)
 80102a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80102aa:	4b17      	ldr	r3, [pc, #92]	; (8010308 <pvPortMalloc+0x178>)
 80102ac:	681a      	ldr	r2, [r3, #0]
 80102ae:	4b18      	ldr	r3, [pc, #96]	; (8010310 <pvPortMalloc+0x180>)
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	429a      	cmp	r2, r3
 80102b4:	d203      	bcs.n	80102be <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80102b6:	4b14      	ldr	r3, [pc, #80]	; (8010308 <pvPortMalloc+0x178>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	4a15      	ldr	r2, [pc, #84]	; (8010310 <pvPortMalloc+0x180>)
 80102bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80102be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102c0:	685a      	ldr	r2, [r3, #4]
 80102c2:	4b10      	ldr	r3, [pc, #64]	; (8010304 <pvPortMalloc+0x174>)
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	431a      	orrs	r2, r3
 80102c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80102cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ce:	2200      	movs	r2, #0
 80102d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80102d2:	f001 fd05 	bl	8011ce0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80102d6:	69fb      	ldr	r3, [r7, #28]
 80102d8:	f003 0307 	and.w	r3, r3, #7
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d009      	beq.n	80102f4 <pvPortMalloc+0x164>
 80102e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102e4:	f383 8811 	msr	BASEPRI, r3
 80102e8:	f3bf 8f6f 	isb	sy
 80102ec:	f3bf 8f4f 	dsb	sy
 80102f0:	60fb      	str	r3, [r7, #12]
 80102f2:	e7fe      	b.n	80102f2 <pvPortMalloc+0x162>
	return pvReturn;
 80102f4:	69fb      	ldr	r3, [r7, #28]
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	3728      	adds	r7, #40	; 0x28
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}
 80102fe:	bf00      	nop
 8010300:	20004220 	.word	0x20004220
 8010304:	2000422c 	.word	0x2000422c
 8010308:	20004224 	.word	0x20004224
 801030c:	20004218 	.word	0x20004218
 8010310:	20004228 	.word	0x20004228

08010314 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b086      	sub	sp, #24
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d046      	beq.n	80103b4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010326:	2308      	movs	r3, #8
 8010328:	425b      	negs	r3, r3
 801032a:	697a      	ldr	r2, [r7, #20]
 801032c:	4413      	add	r3, r2
 801032e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010330:	697b      	ldr	r3, [r7, #20]
 8010332:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010334:	693b      	ldr	r3, [r7, #16]
 8010336:	685a      	ldr	r2, [r3, #4]
 8010338:	4b20      	ldr	r3, [pc, #128]	; (80103bc <vPortFree+0xa8>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	4013      	ands	r3, r2
 801033e:	2b00      	cmp	r3, #0
 8010340:	d109      	bne.n	8010356 <vPortFree+0x42>
 8010342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010346:	f383 8811 	msr	BASEPRI, r3
 801034a:	f3bf 8f6f 	isb	sy
 801034e:	f3bf 8f4f 	dsb	sy
 8010352:	60fb      	str	r3, [r7, #12]
 8010354:	e7fe      	b.n	8010354 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010356:	693b      	ldr	r3, [r7, #16]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d009      	beq.n	8010372 <vPortFree+0x5e>
 801035e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010362:	f383 8811 	msr	BASEPRI, r3
 8010366:	f3bf 8f6f 	isb	sy
 801036a:	f3bf 8f4f 	dsb	sy
 801036e:	60bb      	str	r3, [r7, #8]
 8010370:	e7fe      	b.n	8010370 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010372:	693b      	ldr	r3, [r7, #16]
 8010374:	685a      	ldr	r2, [r3, #4]
 8010376:	4b11      	ldr	r3, [pc, #68]	; (80103bc <vPortFree+0xa8>)
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	4013      	ands	r3, r2
 801037c:	2b00      	cmp	r3, #0
 801037e:	d019      	beq.n	80103b4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010380:	693b      	ldr	r3, [r7, #16]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d115      	bne.n	80103b4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010388:	693b      	ldr	r3, [r7, #16]
 801038a:	685a      	ldr	r2, [r3, #4]
 801038c:	4b0b      	ldr	r3, [pc, #44]	; (80103bc <vPortFree+0xa8>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	43db      	mvns	r3, r3
 8010392:	401a      	ands	r2, r3
 8010394:	693b      	ldr	r3, [r7, #16]
 8010396:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010398:	f001 fc5c 	bl	8011c54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801039c:	693b      	ldr	r3, [r7, #16]
 801039e:	685a      	ldr	r2, [r3, #4]
 80103a0:	4b07      	ldr	r3, [pc, #28]	; (80103c0 <vPortFree+0xac>)
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	4413      	add	r3, r2
 80103a6:	4a06      	ldr	r2, [pc, #24]	; (80103c0 <vPortFree+0xac>)
 80103a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80103aa:	6938      	ldr	r0, [r7, #16]
 80103ac:	f000 f86c 	bl	8010488 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80103b0:	f001 fc96 	bl	8011ce0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80103b4:	bf00      	nop
 80103b6:	3718      	adds	r7, #24
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}
 80103bc:	2000422c 	.word	0x2000422c
 80103c0:	20004224 	.word	0x20004224

080103c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80103c4:	b480      	push	{r7}
 80103c6:	b085      	sub	sp, #20
 80103c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80103ca:	f242 7310 	movw	r3, #10000	; 0x2710
 80103ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80103d0:	4b27      	ldr	r3, [pc, #156]	; (8010470 <prvHeapInit+0xac>)
 80103d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	f003 0307 	and.w	r3, r3, #7
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d00c      	beq.n	80103f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	3307      	adds	r3, #7
 80103e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	f023 0307 	bic.w	r3, r3, #7
 80103ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80103ec:	68ba      	ldr	r2, [r7, #8]
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	1ad3      	subs	r3, r2, r3
 80103f2:	4a1f      	ldr	r2, [pc, #124]	; (8010470 <prvHeapInit+0xac>)
 80103f4:	4413      	add	r3, r2
 80103f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80103fc:	4a1d      	ldr	r2, [pc, #116]	; (8010474 <prvHeapInit+0xb0>)
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010402:	4b1c      	ldr	r3, [pc, #112]	; (8010474 <prvHeapInit+0xb0>)
 8010404:	2200      	movs	r2, #0
 8010406:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	68ba      	ldr	r2, [r7, #8]
 801040c:	4413      	add	r3, r2
 801040e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010410:	2208      	movs	r2, #8
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	1a9b      	subs	r3, r3, r2
 8010416:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	f023 0307 	bic.w	r3, r3, #7
 801041e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	4a15      	ldr	r2, [pc, #84]	; (8010478 <prvHeapInit+0xb4>)
 8010424:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010426:	4b14      	ldr	r3, [pc, #80]	; (8010478 <prvHeapInit+0xb4>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	2200      	movs	r2, #0
 801042c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801042e:	4b12      	ldr	r3, [pc, #72]	; (8010478 <prvHeapInit+0xb4>)
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	2200      	movs	r2, #0
 8010434:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	68fa      	ldr	r2, [r7, #12]
 801043e:	1ad2      	subs	r2, r2, r3
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010444:	4b0c      	ldr	r3, [pc, #48]	; (8010478 <prvHeapInit+0xb4>)
 8010446:	681a      	ldr	r2, [r3, #0]
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	685b      	ldr	r3, [r3, #4]
 8010450:	4a0a      	ldr	r2, [pc, #40]	; (801047c <prvHeapInit+0xb8>)
 8010452:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	685b      	ldr	r3, [r3, #4]
 8010458:	4a09      	ldr	r2, [pc, #36]	; (8010480 <prvHeapInit+0xbc>)
 801045a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801045c:	4b09      	ldr	r3, [pc, #36]	; (8010484 <prvHeapInit+0xc0>)
 801045e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010462:	601a      	str	r2, [r3, #0]
}
 8010464:	bf00      	nop
 8010466:	3714      	adds	r7, #20
 8010468:	46bd      	mov	sp, r7
 801046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046e:	4770      	bx	lr
 8010470:	20001b08 	.word	0x20001b08
 8010474:	20004218 	.word	0x20004218
 8010478:	20004220 	.word	0x20004220
 801047c:	20004228 	.word	0x20004228
 8010480:	20004224 	.word	0x20004224
 8010484:	2000422c 	.word	0x2000422c

08010488 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010488:	b480      	push	{r7}
 801048a:	b085      	sub	sp, #20
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010490:	4b28      	ldr	r3, [pc, #160]	; (8010534 <prvInsertBlockIntoFreeList+0xac>)
 8010492:	60fb      	str	r3, [r7, #12]
 8010494:	e002      	b.n	801049c <prvInsertBlockIntoFreeList+0x14>
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	60fb      	str	r3, [r7, #12]
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	687a      	ldr	r2, [r7, #4]
 80104a2:	429a      	cmp	r2, r3
 80104a4:	d8f7      	bhi.n	8010496 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	685b      	ldr	r3, [r3, #4]
 80104ae:	68ba      	ldr	r2, [r7, #8]
 80104b0:	4413      	add	r3, r2
 80104b2:	687a      	ldr	r2, [r7, #4]
 80104b4:	429a      	cmp	r2, r3
 80104b6:	d108      	bne.n	80104ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	685a      	ldr	r2, [r3, #4]
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	685b      	ldr	r3, [r3, #4]
 80104c0:	441a      	add	r2, r3
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	685b      	ldr	r3, [r3, #4]
 80104d2:	68ba      	ldr	r2, [r7, #8]
 80104d4:	441a      	add	r2, r3
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	429a      	cmp	r2, r3
 80104dc:	d118      	bne.n	8010510 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	681a      	ldr	r2, [r3, #0]
 80104e2:	4b15      	ldr	r3, [pc, #84]	; (8010538 <prvInsertBlockIntoFreeList+0xb0>)
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	429a      	cmp	r2, r3
 80104e8:	d00d      	beq.n	8010506 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	685a      	ldr	r2, [r3, #4]
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	685b      	ldr	r3, [r3, #4]
 80104f4:	441a      	add	r2, r3
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	681a      	ldr	r2, [r3, #0]
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	601a      	str	r2, [r3, #0]
 8010504:	e008      	b.n	8010518 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010506:	4b0c      	ldr	r3, [pc, #48]	; (8010538 <prvInsertBlockIntoFreeList+0xb0>)
 8010508:	681a      	ldr	r2, [r3, #0]
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	601a      	str	r2, [r3, #0]
 801050e:	e003      	b.n	8010518 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	681a      	ldr	r2, [r3, #0]
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010518:	68fa      	ldr	r2, [r7, #12]
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	429a      	cmp	r2, r3
 801051e:	d002      	beq.n	8010526 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	687a      	ldr	r2, [r7, #4]
 8010524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010526:	bf00      	nop
 8010528:	3714      	adds	r7, #20
 801052a:	46bd      	mov	sp, r7
 801052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010530:	4770      	bx	lr
 8010532:	bf00      	nop
 8010534:	20004218 	.word	0x20004218
 8010538:	20004220 	.word	0x20004220

0801053c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801053c:	b480      	push	{r7}
 801053e:	b083      	sub	sp, #12
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	f103 0208 	add.w	r2, r3, #8
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	f04f 32ff 	mov.w	r2, #4294967295
 8010554:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	f103 0208 	add.w	r2, r3, #8
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f103 0208 	add.w	r2, r3, #8
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	2200      	movs	r2, #0
 801056e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010570:	bf00      	nop
 8010572:	370c      	adds	r7, #12
 8010574:	46bd      	mov	sp, r7
 8010576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057a:	4770      	bx	lr

0801057c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801057c:	b480      	push	{r7}
 801057e:	b083      	sub	sp, #12
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2200      	movs	r2, #0
 8010588:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801058a:	bf00      	nop
 801058c:	370c      	adds	r7, #12
 801058e:	46bd      	mov	sp, r7
 8010590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010594:	4770      	bx	lr

08010596 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010596:	b480      	push	{r7}
 8010598:	b085      	sub	sp, #20
 801059a:	af00      	add	r7, sp, #0
 801059c:	6078      	str	r0, [r7, #4]
 801059e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	685b      	ldr	r3, [r3, #4]
 80105a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80105a6:	683b      	ldr	r3, [r7, #0]
 80105a8:	68fa      	ldr	r2, [r7, #12]
 80105aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	689a      	ldr	r2, [r3, #8]
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	689b      	ldr	r3, [r3, #8]
 80105b8:	683a      	ldr	r2, [r7, #0]
 80105ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	683a      	ldr	r2, [r7, #0]
 80105c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	687a      	ldr	r2, [r7, #4]
 80105c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	1c5a      	adds	r2, r3, #1
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	601a      	str	r2, [r3, #0]
}
 80105d2:	bf00      	nop
 80105d4:	3714      	adds	r7, #20
 80105d6:	46bd      	mov	sp, r7
 80105d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105dc:	4770      	bx	lr

080105de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80105de:	b480      	push	{r7}
 80105e0:	b085      	sub	sp, #20
 80105e2:	af00      	add	r7, sp, #0
 80105e4:	6078      	str	r0, [r7, #4]
 80105e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105f4:	d103      	bne.n	80105fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	691b      	ldr	r3, [r3, #16]
 80105fa:	60fb      	str	r3, [r7, #12]
 80105fc:	e00c      	b.n	8010618 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	3308      	adds	r3, #8
 8010602:	60fb      	str	r3, [r7, #12]
 8010604:	e002      	b.n	801060c <vListInsert+0x2e>
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	685b      	ldr	r3, [r3, #4]
 801060a:	60fb      	str	r3, [r7, #12]
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	685b      	ldr	r3, [r3, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	68ba      	ldr	r2, [r7, #8]
 8010614:	429a      	cmp	r2, r3
 8010616:	d2f6      	bcs.n	8010606 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	685a      	ldr	r2, [r3, #4]
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	685b      	ldr	r3, [r3, #4]
 8010624:	683a      	ldr	r2, [r7, #0]
 8010626:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010628:	683b      	ldr	r3, [r7, #0]
 801062a:	68fa      	ldr	r2, [r7, #12]
 801062c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	683a      	ldr	r2, [r7, #0]
 8010632:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	687a      	ldr	r2, [r7, #4]
 8010638:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	1c5a      	adds	r2, r3, #1
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	601a      	str	r2, [r3, #0]
}
 8010644:	bf00      	nop
 8010646:	3714      	adds	r7, #20
 8010648:	46bd      	mov	sp, r7
 801064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064e:	4770      	bx	lr

08010650 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010650:	b480      	push	{r7}
 8010652:	b085      	sub	sp, #20
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	691b      	ldr	r3, [r3, #16]
 801065c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	685b      	ldr	r3, [r3, #4]
 8010662:	687a      	ldr	r2, [r7, #4]
 8010664:	6892      	ldr	r2, [r2, #8]
 8010666:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	689b      	ldr	r3, [r3, #8]
 801066c:	687a      	ldr	r2, [r7, #4]
 801066e:	6852      	ldr	r2, [r2, #4]
 8010670:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	685b      	ldr	r3, [r3, #4]
 8010676:	687a      	ldr	r2, [r7, #4]
 8010678:	429a      	cmp	r2, r3
 801067a:	d103      	bne.n	8010684 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	689a      	ldr	r2, [r3, #8]
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	2200      	movs	r2, #0
 8010688:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	1e5a      	subs	r2, r3, #1
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	681b      	ldr	r3, [r3, #0]
}
 8010698:	4618      	mov	r0, r3
 801069a:	3714      	adds	r7, #20
 801069c:	46bd      	mov	sp, r7
 801069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a2:	4770      	bx	lr

080106a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b084      	sub	sp, #16
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
 80106ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d109      	bne.n	80106cc <xQueueGenericReset+0x28>
 80106b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106bc:	f383 8811 	msr	BASEPRI, r3
 80106c0:	f3bf 8f6f 	isb	sy
 80106c4:	f3bf 8f4f 	dsb	sy
 80106c8:	60bb      	str	r3, [r7, #8]
 80106ca:	e7fe      	b.n	80106ca <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80106cc:	f7ff fc46 	bl	800ff5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	681a      	ldr	r2, [r3, #0]
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106d8:	68f9      	ldr	r1, [r7, #12]
 80106da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80106dc:	fb01 f303 	mul.w	r3, r1, r3
 80106e0:	441a      	add	r2, r3
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	2200      	movs	r2, #0
 80106ea:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	681a      	ldr	r2, [r3, #0]
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	681a      	ldr	r2, [r3, #0]
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106fc:	3b01      	subs	r3, #1
 80106fe:	68f9      	ldr	r1, [r7, #12]
 8010700:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010702:	fb01 f303 	mul.w	r3, r1, r3
 8010706:	441a      	add	r2, r3
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	22ff      	movs	r2, #255	; 0xff
 8010710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	22ff      	movs	r2, #255	; 0xff
 8010718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d114      	bne.n	801074c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	691b      	ldr	r3, [r3, #16]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d01a      	beq.n	8010760 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	3310      	adds	r3, #16
 801072e:	4618      	mov	r0, r3
 8010730:	f001 fce4 	bl	80120fc <xTaskRemoveFromEventList>
 8010734:	4603      	mov	r3, r0
 8010736:	2b00      	cmp	r3, #0
 8010738:	d012      	beq.n	8010760 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801073a:	4b0d      	ldr	r3, [pc, #52]	; (8010770 <xQueueGenericReset+0xcc>)
 801073c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010740:	601a      	str	r2, [r3, #0]
 8010742:	f3bf 8f4f 	dsb	sy
 8010746:	f3bf 8f6f 	isb	sy
 801074a:	e009      	b.n	8010760 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	3310      	adds	r3, #16
 8010750:	4618      	mov	r0, r3
 8010752:	f7ff fef3 	bl	801053c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	3324      	adds	r3, #36	; 0x24
 801075a:	4618      	mov	r0, r3
 801075c:	f7ff feee 	bl	801053c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010760:	f7ff fc2a 	bl	800ffb8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010764:	2301      	movs	r3, #1
}
 8010766:	4618      	mov	r0, r3
 8010768:	3710      	adds	r7, #16
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}
 801076e:	bf00      	nop
 8010770:	e000ed04 	.word	0xe000ed04

08010774 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010774:	b580      	push	{r7, lr}
 8010776:	b08e      	sub	sp, #56	; 0x38
 8010778:	af02      	add	r7, sp, #8
 801077a:	60f8      	str	r0, [r7, #12]
 801077c:	60b9      	str	r1, [r7, #8]
 801077e:	607a      	str	r2, [r7, #4]
 8010780:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d109      	bne.n	801079c <xQueueGenericCreateStatic+0x28>
 8010788:	f04f 0350 	mov.w	r3, #80	; 0x50
 801078c:	f383 8811 	msr	BASEPRI, r3
 8010790:	f3bf 8f6f 	isb	sy
 8010794:	f3bf 8f4f 	dsb	sy
 8010798:	62bb      	str	r3, [r7, #40]	; 0x28
 801079a:	e7fe      	b.n	801079a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801079c:	683b      	ldr	r3, [r7, #0]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d109      	bne.n	80107b6 <xQueueGenericCreateStatic+0x42>
 80107a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107a6:	f383 8811 	msr	BASEPRI, r3
 80107aa:	f3bf 8f6f 	isb	sy
 80107ae:	f3bf 8f4f 	dsb	sy
 80107b2:	627b      	str	r3, [r7, #36]	; 0x24
 80107b4:	e7fe      	b.n	80107b4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d002      	beq.n	80107c2 <xQueueGenericCreateStatic+0x4e>
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d001      	beq.n	80107c6 <xQueueGenericCreateStatic+0x52>
 80107c2:	2301      	movs	r3, #1
 80107c4:	e000      	b.n	80107c8 <xQueueGenericCreateStatic+0x54>
 80107c6:	2300      	movs	r3, #0
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d109      	bne.n	80107e0 <xQueueGenericCreateStatic+0x6c>
 80107cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107d0:	f383 8811 	msr	BASEPRI, r3
 80107d4:	f3bf 8f6f 	isb	sy
 80107d8:	f3bf 8f4f 	dsb	sy
 80107dc:	623b      	str	r3, [r7, #32]
 80107de:	e7fe      	b.n	80107de <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d102      	bne.n	80107ec <xQueueGenericCreateStatic+0x78>
 80107e6:	68bb      	ldr	r3, [r7, #8]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d101      	bne.n	80107f0 <xQueueGenericCreateStatic+0x7c>
 80107ec:	2301      	movs	r3, #1
 80107ee:	e000      	b.n	80107f2 <xQueueGenericCreateStatic+0x7e>
 80107f0:	2300      	movs	r3, #0
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d109      	bne.n	801080a <xQueueGenericCreateStatic+0x96>
 80107f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107fa:	f383 8811 	msr	BASEPRI, r3
 80107fe:	f3bf 8f6f 	isb	sy
 8010802:	f3bf 8f4f 	dsb	sy
 8010806:	61fb      	str	r3, [r7, #28]
 8010808:	e7fe      	b.n	8010808 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801080a:	2350      	movs	r3, #80	; 0x50
 801080c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801080e:	697b      	ldr	r3, [r7, #20]
 8010810:	2b50      	cmp	r3, #80	; 0x50
 8010812:	d009      	beq.n	8010828 <xQueueGenericCreateStatic+0xb4>
 8010814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010818:	f383 8811 	msr	BASEPRI, r3
 801081c:	f3bf 8f6f 	isb	sy
 8010820:	f3bf 8f4f 	dsb	sy
 8010824:	61bb      	str	r3, [r7, #24]
 8010826:	e7fe      	b.n	8010826 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010828:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801082e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010830:	2b00      	cmp	r3, #0
 8010832:	d00d      	beq.n	8010850 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010836:	2201      	movs	r2, #1
 8010838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801083c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010842:	9300      	str	r3, [sp, #0]
 8010844:	4613      	mov	r3, r2
 8010846:	687a      	ldr	r2, [r7, #4]
 8010848:	68b9      	ldr	r1, [r7, #8]
 801084a:	68f8      	ldr	r0, [r7, #12]
 801084c:	f000 f844 	bl	80108d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010852:	4618      	mov	r0, r3
 8010854:	3730      	adds	r7, #48	; 0x30
 8010856:	46bd      	mov	sp, r7
 8010858:	bd80      	pop	{r7, pc}

0801085a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801085a:	b580      	push	{r7, lr}
 801085c:	b08a      	sub	sp, #40	; 0x28
 801085e:	af02      	add	r7, sp, #8
 8010860:	60f8      	str	r0, [r7, #12]
 8010862:	60b9      	str	r1, [r7, #8]
 8010864:	4613      	mov	r3, r2
 8010866:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d109      	bne.n	8010882 <xQueueGenericCreate+0x28>
 801086e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010872:	f383 8811 	msr	BASEPRI, r3
 8010876:	f3bf 8f6f 	isb	sy
 801087a:	f3bf 8f4f 	dsb	sy
 801087e:	613b      	str	r3, [r7, #16]
 8010880:	e7fe      	b.n	8010880 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010882:	68bb      	ldr	r3, [r7, #8]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d102      	bne.n	801088e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010888:	2300      	movs	r3, #0
 801088a:	61fb      	str	r3, [r7, #28]
 801088c:	e004      	b.n	8010898 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	68ba      	ldr	r2, [r7, #8]
 8010892:	fb02 f303 	mul.w	r3, r2, r3
 8010896:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010898:	69fb      	ldr	r3, [r7, #28]
 801089a:	3350      	adds	r3, #80	; 0x50
 801089c:	4618      	mov	r0, r3
 801089e:	f7ff fc77 	bl	8010190 <pvPortMalloc>
 80108a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80108a4:	69bb      	ldr	r3, [r7, #24]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d011      	beq.n	80108ce <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80108aa:	69bb      	ldr	r3, [r7, #24]
 80108ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80108ae:	697b      	ldr	r3, [r7, #20]
 80108b0:	3350      	adds	r3, #80	; 0x50
 80108b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80108b4:	69bb      	ldr	r3, [r7, #24]
 80108b6:	2200      	movs	r2, #0
 80108b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80108bc:	79fa      	ldrb	r2, [r7, #7]
 80108be:	69bb      	ldr	r3, [r7, #24]
 80108c0:	9300      	str	r3, [sp, #0]
 80108c2:	4613      	mov	r3, r2
 80108c4:	697a      	ldr	r2, [r7, #20]
 80108c6:	68b9      	ldr	r1, [r7, #8]
 80108c8:	68f8      	ldr	r0, [r7, #12]
 80108ca:	f000 f805 	bl	80108d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80108ce:	69bb      	ldr	r3, [r7, #24]
	}
 80108d0:	4618      	mov	r0, r3
 80108d2:	3720      	adds	r7, #32
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bd80      	pop	{r7, pc}

080108d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b084      	sub	sp, #16
 80108dc:	af00      	add	r7, sp, #0
 80108de:	60f8      	str	r0, [r7, #12]
 80108e0:	60b9      	str	r1, [r7, #8]
 80108e2:	607a      	str	r2, [r7, #4]
 80108e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80108e6:	68bb      	ldr	r3, [r7, #8]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d103      	bne.n	80108f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80108ec:	69bb      	ldr	r3, [r7, #24]
 80108ee:	69ba      	ldr	r2, [r7, #24]
 80108f0:	601a      	str	r2, [r3, #0]
 80108f2:	e002      	b.n	80108fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80108f4:	69bb      	ldr	r3, [r7, #24]
 80108f6:	687a      	ldr	r2, [r7, #4]
 80108f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80108fa:	69bb      	ldr	r3, [r7, #24]
 80108fc:	68fa      	ldr	r2, [r7, #12]
 80108fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010900:	69bb      	ldr	r3, [r7, #24]
 8010902:	68ba      	ldr	r2, [r7, #8]
 8010904:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010906:	2101      	movs	r1, #1
 8010908:	69b8      	ldr	r0, [r7, #24]
 801090a:	f7ff fecb 	bl	80106a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801090e:	69bb      	ldr	r3, [r7, #24]
 8010910:	78fa      	ldrb	r2, [r7, #3]
 8010912:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010916:	bf00      	nop
 8010918:	3710      	adds	r7, #16
 801091a:	46bd      	mov	sp, r7
 801091c:	bd80      	pop	{r7, pc}

0801091e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801091e:	b580      	push	{r7, lr}
 8010920:	b082      	sub	sp, #8
 8010922:	af00      	add	r7, sp, #0
 8010924:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d00e      	beq.n	801094a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	2200      	movs	r2, #0
 8010930:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	2200      	movs	r2, #0
 8010936:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2200      	movs	r2, #0
 801093c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801093e:	2300      	movs	r3, #0
 8010940:	2200      	movs	r2, #0
 8010942:	2100      	movs	r1, #0
 8010944:	6878      	ldr	r0, [r7, #4]
 8010946:	f000 f905 	bl	8010b54 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801094a:	bf00      	nop
 801094c:	3708      	adds	r7, #8
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}

08010952 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8010952:	b580      	push	{r7, lr}
 8010954:	b086      	sub	sp, #24
 8010956:	af00      	add	r7, sp, #0
 8010958:	4603      	mov	r3, r0
 801095a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801095c:	2301      	movs	r3, #1
 801095e:	617b      	str	r3, [r7, #20]
 8010960:	2300      	movs	r3, #0
 8010962:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010964:	79fb      	ldrb	r3, [r7, #7]
 8010966:	461a      	mov	r2, r3
 8010968:	6939      	ldr	r1, [r7, #16]
 801096a:	6978      	ldr	r0, [r7, #20]
 801096c:	f7ff ff75 	bl	801085a <xQueueGenericCreate>
 8010970:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010972:	68f8      	ldr	r0, [r7, #12]
 8010974:	f7ff ffd3 	bl	801091e <prvInitialiseMutex>

		return xNewQueue;
 8010978:	68fb      	ldr	r3, [r7, #12]
	}
 801097a:	4618      	mov	r0, r3
 801097c:	3718      	adds	r7, #24
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}

08010982 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8010982:	b580      	push	{r7, lr}
 8010984:	b088      	sub	sp, #32
 8010986:	af02      	add	r7, sp, #8
 8010988:	4603      	mov	r3, r0
 801098a:	6039      	str	r1, [r7, #0]
 801098c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801098e:	2301      	movs	r3, #1
 8010990:	617b      	str	r3, [r7, #20]
 8010992:	2300      	movs	r3, #0
 8010994:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8010996:	79fb      	ldrb	r3, [r7, #7]
 8010998:	9300      	str	r3, [sp, #0]
 801099a:	683b      	ldr	r3, [r7, #0]
 801099c:	2200      	movs	r2, #0
 801099e:	6939      	ldr	r1, [r7, #16]
 80109a0:	6978      	ldr	r0, [r7, #20]
 80109a2:	f7ff fee7 	bl	8010774 <xQueueGenericCreateStatic>
 80109a6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80109a8:	68f8      	ldr	r0, [r7, #12]
 80109aa:	f7ff ffb8 	bl	801091e <prvInitialiseMutex>

		return xNewQueue;
 80109ae:	68fb      	ldr	r3, [r7, #12]
	}
 80109b0:	4618      	mov	r0, r3
 80109b2:	3718      	adds	r7, #24
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bd80      	pop	{r7, pc}

080109b8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80109b8:	b590      	push	{r4, r7, lr}
 80109ba:	b087      	sub	sp, #28
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80109c4:	693b      	ldr	r3, [r7, #16]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d109      	bne.n	80109de <xQueueGiveMutexRecursive+0x26>
 80109ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ce:	f383 8811 	msr	BASEPRI, r3
 80109d2:	f3bf 8f6f 	isb	sy
 80109d6:	f3bf 8f4f 	dsb	sy
 80109da:	60fb      	str	r3, [r7, #12]
 80109dc:	e7fe      	b.n	80109dc <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80109de:	693b      	ldr	r3, [r7, #16]
 80109e0:	689c      	ldr	r4, [r3, #8]
 80109e2:	f001 fd69 	bl	80124b8 <xTaskGetCurrentTaskHandle>
 80109e6:	4603      	mov	r3, r0
 80109e8:	429c      	cmp	r4, r3
 80109ea:	d111      	bne.n	8010a10 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80109ec:	693b      	ldr	r3, [r7, #16]
 80109ee:	68db      	ldr	r3, [r3, #12]
 80109f0:	1e5a      	subs	r2, r3, #1
 80109f2:	693b      	ldr	r3, [r7, #16]
 80109f4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80109f6:	693b      	ldr	r3, [r7, #16]
 80109f8:	68db      	ldr	r3, [r3, #12]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d105      	bne.n	8010a0a <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80109fe:	2300      	movs	r3, #0
 8010a00:	2200      	movs	r2, #0
 8010a02:	2100      	movs	r1, #0
 8010a04:	6938      	ldr	r0, [r7, #16]
 8010a06:	f000 f8a5 	bl	8010b54 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8010a0a:	2301      	movs	r3, #1
 8010a0c:	617b      	str	r3, [r7, #20]
 8010a0e:	e001      	b.n	8010a14 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8010a10:	2300      	movs	r3, #0
 8010a12:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8010a14:	697b      	ldr	r3, [r7, #20]
	}
 8010a16:	4618      	mov	r0, r3
 8010a18:	371c      	adds	r7, #28
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	bd90      	pop	{r4, r7, pc}

08010a1e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8010a1e:	b590      	push	{r4, r7, lr}
 8010a20:	b087      	sub	sp, #28
 8010a22:	af00      	add	r7, sp, #0
 8010a24:	6078      	str	r0, [r7, #4]
 8010a26:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8010a2c:	693b      	ldr	r3, [r7, #16]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d109      	bne.n	8010a46 <xQueueTakeMutexRecursive+0x28>
 8010a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a36:	f383 8811 	msr	BASEPRI, r3
 8010a3a:	f3bf 8f6f 	isb	sy
 8010a3e:	f3bf 8f4f 	dsb	sy
 8010a42:	60fb      	str	r3, [r7, #12]
 8010a44:	e7fe      	b.n	8010a44 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8010a46:	693b      	ldr	r3, [r7, #16]
 8010a48:	689c      	ldr	r4, [r3, #8]
 8010a4a:	f001 fd35 	bl	80124b8 <xTaskGetCurrentTaskHandle>
 8010a4e:	4603      	mov	r3, r0
 8010a50:	429c      	cmp	r4, r3
 8010a52:	d107      	bne.n	8010a64 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010a54:	693b      	ldr	r3, [r7, #16]
 8010a56:	68db      	ldr	r3, [r3, #12]
 8010a58:	1c5a      	adds	r2, r3, #1
 8010a5a:	693b      	ldr	r3, [r7, #16]
 8010a5c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8010a5e:	2301      	movs	r3, #1
 8010a60:	617b      	str	r3, [r7, #20]
 8010a62:	e00c      	b.n	8010a7e <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8010a64:	6839      	ldr	r1, [r7, #0]
 8010a66:	6938      	ldr	r0, [r7, #16]
 8010a68:	f000 fb68 	bl	801113c <xQueueSemaphoreTake>
 8010a6c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8010a6e:	697b      	ldr	r3, [r7, #20]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d004      	beq.n	8010a7e <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010a74:	693b      	ldr	r3, [r7, #16]
 8010a76:	68db      	ldr	r3, [r3, #12]
 8010a78:	1c5a      	adds	r2, r3, #1
 8010a7a:	693b      	ldr	r3, [r7, #16]
 8010a7c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8010a7e:	697b      	ldr	r3, [r7, #20]
	}
 8010a80:	4618      	mov	r0, r3
 8010a82:	371c      	adds	r7, #28
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd90      	pop	{r4, r7, pc}

08010a88 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b08a      	sub	sp, #40	; 0x28
 8010a8c:	af02      	add	r7, sp, #8
 8010a8e:	60f8      	str	r0, [r7, #12]
 8010a90:	60b9      	str	r1, [r7, #8]
 8010a92:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d109      	bne.n	8010aae <xQueueCreateCountingSemaphoreStatic+0x26>
 8010a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a9e:	f383 8811 	msr	BASEPRI, r3
 8010aa2:	f3bf 8f6f 	isb	sy
 8010aa6:	f3bf 8f4f 	dsb	sy
 8010aaa:	61bb      	str	r3, [r7, #24]
 8010aac:	e7fe      	b.n	8010aac <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010aae:	68ba      	ldr	r2, [r7, #8]
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	429a      	cmp	r2, r3
 8010ab4:	d909      	bls.n	8010aca <xQueueCreateCountingSemaphoreStatic+0x42>
 8010ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aba:	f383 8811 	msr	BASEPRI, r3
 8010abe:	f3bf 8f6f 	isb	sy
 8010ac2:	f3bf 8f4f 	dsb	sy
 8010ac6:	617b      	str	r3, [r7, #20]
 8010ac8:	e7fe      	b.n	8010ac8 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010aca:	2302      	movs	r3, #2
 8010acc:	9300      	str	r3, [sp, #0]
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	2100      	movs	r1, #0
 8010ad4:	68f8      	ldr	r0, [r7, #12]
 8010ad6:	f7ff fe4d 	bl	8010774 <xQueueGenericCreateStatic>
 8010ada:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8010adc:	69fb      	ldr	r3, [r7, #28]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d002      	beq.n	8010ae8 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010ae2:	69fb      	ldr	r3, [r7, #28]
 8010ae4:	68ba      	ldr	r2, [r7, #8]
 8010ae6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010ae8:	69fb      	ldr	r3, [r7, #28]
	}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3720      	adds	r7, #32
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}

08010af2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8010af2:	b580      	push	{r7, lr}
 8010af4:	b086      	sub	sp, #24
 8010af6:	af00      	add	r7, sp, #0
 8010af8:	6078      	str	r0, [r7, #4]
 8010afa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d109      	bne.n	8010b16 <xQueueCreateCountingSemaphore+0x24>
 8010b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b06:	f383 8811 	msr	BASEPRI, r3
 8010b0a:	f3bf 8f6f 	isb	sy
 8010b0e:	f3bf 8f4f 	dsb	sy
 8010b12:	613b      	str	r3, [r7, #16]
 8010b14:	e7fe      	b.n	8010b14 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010b16:	683a      	ldr	r2, [r7, #0]
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	429a      	cmp	r2, r3
 8010b1c:	d909      	bls.n	8010b32 <xQueueCreateCountingSemaphore+0x40>
 8010b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b22:	f383 8811 	msr	BASEPRI, r3
 8010b26:	f3bf 8f6f 	isb	sy
 8010b2a:	f3bf 8f4f 	dsb	sy
 8010b2e:	60fb      	str	r3, [r7, #12]
 8010b30:	e7fe      	b.n	8010b30 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010b32:	2202      	movs	r2, #2
 8010b34:	2100      	movs	r1, #0
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	f7ff fe8f 	bl	801085a <xQueueGenericCreate>
 8010b3c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8010b3e:	697b      	ldr	r3, [r7, #20]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d002      	beq.n	8010b4a <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010b44:	697b      	ldr	r3, [r7, #20]
 8010b46:	683a      	ldr	r2, [r7, #0]
 8010b48:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010b4a:	697b      	ldr	r3, [r7, #20]
	}
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	3718      	adds	r7, #24
 8010b50:	46bd      	mov	sp, r7
 8010b52:	bd80      	pop	{r7, pc}

08010b54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b08e      	sub	sp, #56	; 0x38
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	60f8      	str	r0, [r7, #12]
 8010b5c:	60b9      	str	r1, [r7, #8]
 8010b5e:	607a      	str	r2, [r7, #4]
 8010b60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010b62:	2300      	movs	r3, #0
 8010b64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d109      	bne.n	8010b84 <xQueueGenericSend+0x30>
 8010b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b74:	f383 8811 	msr	BASEPRI, r3
 8010b78:	f3bf 8f6f 	isb	sy
 8010b7c:	f3bf 8f4f 	dsb	sy
 8010b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8010b82:	e7fe      	b.n	8010b82 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d103      	bne.n	8010b92 <xQueueGenericSend+0x3e>
 8010b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d101      	bne.n	8010b96 <xQueueGenericSend+0x42>
 8010b92:	2301      	movs	r3, #1
 8010b94:	e000      	b.n	8010b98 <xQueueGenericSend+0x44>
 8010b96:	2300      	movs	r3, #0
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d109      	bne.n	8010bb0 <xQueueGenericSend+0x5c>
 8010b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ba0:	f383 8811 	msr	BASEPRI, r3
 8010ba4:	f3bf 8f6f 	isb	sy
 8010ba8:	f3bf 8f4f 	dsb	sy
 8010bac:	627b      	str	r3, [r7, #36]	; 0x24
 8010bae:	e7fe      	b.n	8010bae <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	2b02      	cmp	r3, #2
 8010bb4:	d103      	bne.n	8010bbe <xQueueGenericSend+0x6a>
 8010bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bba:	2b01      	cmp	r3, #1
 8010bbc:	d101      	bne.n	8010bc2 <xQueueGenericSend+0x6e>
 8010bbe:	2301      	movs	r3, #1
 8010bc0:	e000      	b.n	8010bc4 <xQueueGenericSend+0x70>
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d109      	bne.n	8010bdc <xQueueGenericSend+0x88>
 8010bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bcc:	f383 8811 	msr	BASEPRI, r3
 8010bd0:	f3bf 8f6f 	isb	sy
 8010bd4:	f3bf 8f4f 	dsb	sy
 8010bd8:	623b      	str	r3, [r7, #32]
 8010bda:	e7fe      	b.n	8010bda <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010bdc:	f001 fc7c 	bl	80124d8 <xTaskGetSchedulerState>
 8010be0:	4603      	mov	r3, r0
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d102      	bne.n	8010bec <xQueueGenericSend+0x98>
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d101      	bne.n	8010bf0 <xQueueGenericSend+0x9c>
 8010bec:	2301      	movs	r3, #1
 8010bee:	e000      	b.n	8010bf2 <xQueueGenericSend+0x9e>
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d109      	bne.n	8010c0a <xQueueGenericSend+0xb6>
 8010bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bfa:	f383 8811 	msr	BASEPRI, r3
 8010bfe:	f3bf 8f6f 	isb	sy
 8010c02:	f3bf 8f4f 	dsb	sy
 8010c06:	61fb      	str	r3, [r7, #28]
 8010c08:	e7fe      	b.n	8010c08 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010c0a:	f7ff f9a7 	bl	800ff5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c16:	429a      	cmp	r2, r3
 8010c18:	d302      	bcc.n	8010c20 <xQueueGenericSend+0xcc>
 8010c1a:	683b      	ldr	r3, [r7, #0]
 8010c1c:	2b02      	cmp	r3, #2
 8010c1e:	d129      	bne.n	8010c74 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010c20:	683a      	ldr	r2, [r7, #0]
 8010c22:	68b9      	ldr	r1, [r7, #8]
 8010c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c26:	f000 fc48 	bl	80114ba <prvCopyDataToQueue>
 8010c2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d010      	beq.n	8010c56 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c36:	3324      	adds	r3, #36	; 0x24
 8010c38:	4618      	mov	r0, r3
 8010c3a:	f001 fa5f 	bl	80120fc <xTaskRemoveFromEventList>
 8010c3e:	4603      	mov	r3, r0
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d013      	beq.n	8010c6c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010c44:	4b3f      	ldr	r3, [pc, #252]	; (8010d44 <xQueueGenericSend+0x1f0>)
 8010c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c4a:	601a      	str	r2, [r3, #0]
 8010c4c:	f3bf 8f4f 	dsb	sy
 8010c50:	f3bf 8f6f 	isb	sy
 8010c54:	e00a      	b.n	8010c6c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d007      	beq.n	8010c6c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010c5c:	4b39      	ldr	r3, [pc, #228]	; (8010d44 <xQueueGenericSend+0x1f0>)
 8010c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c62:	601a      	str	r2, [r3, #0]
 8010c64:	f3bf 8f4f 	dsb	sy
 8010c68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010c6c:	f7ff f9a4 	bl	800ffb8 <vPortExitCritical>
				return pdPASS;
 8010c70:	2301      	movs	r3, #1
 8010c72:	e063      	b.n	8010d3c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d103      	bne.n	8010c82 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010c7a:	f7ff f99d 	bl	800ffb8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010c7e:	2300      	movs	r3, #0
 8010c80:	e05c      	b.n	8010d3c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d106      	bne.n	8010c96 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010c88:	f107 0314 	add.w	r3, r7, #20
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f001 fa99 	bl	80121c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010c92:	2301      	movs	r3, #1
 8010c94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010c96:	f7ff f98f 	bl	800ffb8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010c9a:	f000 ffdb 	bl	8011c54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010c9e:	f7ff f95d 	bl	800ff5c <vPortEnterCritical>
 8010ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ca4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010ca8:	b25b      	sxtb	r3, r3
 8010caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cae:	d103      	bne.n	8010cb8 <xQueueGenericSend+0x164>
 8010cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010cbe:	b25b      	sxtb	r3, r3
 8010cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cc4:	d103      	bne.n	8010cce <xQueueGenericSend+0x17a>
 8010cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc8:	2200      	movs	r2, #0
 8010cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010cce:	f7ff f973 	bl	800ffb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010cd2:	1d3a      	adds	r2, r7, #4
 8010cd4:	f107 0314 	add.w	r3, r7, #20
 8010cd8:	4611      	mov	r1, r2
 8010cda:	4618      	mov	r0, r3
 8010cdc:	f001 fa88 	bl	80121f0 <xTaskCheckForTimeOut>
 8010ce0:	4603      	mov	r3, r0
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d124      	bne.n	8010d30 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010ce6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ce8:	f000 fcdf 	bl	80116aa <prvIsQueueFull>
 8010cec:	4603      	mov	r3, r0
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d018      	beq.n	8010d24 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cf4:	3310      	adds	r3, #16
 8010cf6:	687a      	ldr	r2, [r7, #4]
 8010cf8:	4611      	mov	r1, r2
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f001 f9b0 	bl	8012060 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d02:	f000 fc6a 	bl	80115da <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010d06:	f000 ffeb 	bl	8011ce0 <xTaskResumeAll>
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	f47f af7c 	bne.w	8010c0a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8010d12:	4b0c      	ldr	r3, [pc, #48]	; (8010d44 <xQueueGenericSend+0x1f0>)
 8010d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d18:	601a      	str	r2, [r3, #0]
 8010d1a:	f3bf 8f4f 	dsb	sy
 8010d1e:	f3bf 8f6f 	isb	sy
 8010d22:	e772      	b.n	8010c0a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010d24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d26:	f000 fc58 	bl	80115da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010d2a:	f000 ffd9 	bl	8011ce0 <xTaskResumeAll>
 8010d2e:	e76c      	b.n	8010c0a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010d30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d32:	f000 fc52 	bl	80115da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010d36:	f000 ffd3 	bl	8011ce0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010d3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	3738      	adds	r7, #56	; 0x38
 8010d40:	46bd      	mov	sp, r7
 8010d42:	bd80      	pop	{r7, pc}
 8010d44:	e000ed04 	.word	0xe000ed04

08010d48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b08e      	sub	sp, #56	; 0x38
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	60f8      	str	r0, [r7, #12]
 8010d50:	60b9      	str	r1, [r7, #8]
 8010d52:	607a      	str	r2, [r7, #4]
 8010d54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d109      	bne.n	8010d74 <xQueueGenericSendFromISR+0x2c>
 8010d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d64:	f383 8811 	msr	BASEPRI, r3
 8010d68:	f3bf 8f6f 	isb	sy
 8010d6c:	f3bf 8f4f 	dsb	sy
 8010d70:	627b      	str	r3, [r7, #36]	; 0x24
 8010d72:	e7fe      	b.n	8010d72 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010d74:	68bb      	ldr	r3, [r7, #8]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d103      	bne.n	8010d82 <xQueueGenericSendFromISR+0x3a>
 8010d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d101      	bne.n	8010d86 <xQueueGenericSendFromISR+0x3e>
 8010d82:	2301      	movs	r3, #1
 8010d84:	e000      	b.n	8010d88 <xQueueGenericSendFromISR+0x40>
 8010d86:	2300      	movs	r3, #0
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d109      	bne.n	8010da0 <xQueueGenericSendFromISR+0x58>
 8010d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d90:	f383 8811 	msr	BASEPRI, r3
 8010d94:	f3bf 8f6f 	isb	sy
 8010d98:	f3bf 8f4f 	dsb	sy
 8010d9c:	623b      	str	r3, [r7, #32]
 8010d9e:	e7fe      	b.n	8010d9e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	2b02      	cmp	r3, #2
 8010da4:	d103      	bne.n	8010dae <xQueueGenericSendFromISR+0x66>
 8010da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010daa:	2b01      	cmp	r3, #1
 8010dac:	d101      	bne.n	8010db2 <xQueueGenericSendFromISR+0x6a>
 8010dae:	2301      	movs	r3, #1
 8010db0:	e000      	b.n	8010db4 <xQueueGenericSendFromISR+0x6c>
 8010db2:	2300      	movs	r3, #0
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d109      	bne.n	8010dcc <xQueueGenericSendFromISR+0x84>
 8010db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dbc:	f383 8811 	msr	BASEPRI, r3
 8010dc0:	f3bf 8f6f 	isb	sy
 8010dc4:	f3bf 8f4f 	dsb	sy
 8010dc8:	61fb      	str	r3, [r7, #28]
 8010dca:	e7fe      	b.n	8010dca <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010dcc:	f7ff f9a2 	bl	8010114 <vPortValidateInterruptPriority>
	__asm volatile
 8010dd0:	f3ef 8211 	mrs	r2, BASEPRI
 8010dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dd8:	f383 8811 	msr	BASEPRI, r3
 8010ddc:	f3bf 8f6f 	isb	sy
 8010de0:	f3bf 8f4f 	dsb	sy
 8010de4:	61ba      	str	r2, [r7, #24]
 8010de6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010de8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010dea:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010df4:	429a      	cmp	r2, r3
 8010df6:	d302      	bcc.n	8010dfe <xQueueGenericSendFromISR+0xb6>
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	2b02      	cmp	r3, #2
 8010dfc:	d12c      	bne.n	8010e58 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010e04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010e08:	683a      	ldr	r2, [r7, #0]
 8010e0a:	68b9      	ldr	r1, [r7, #8]
 8010e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e0e:	f000 fb54 	bl	80114ba <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010e12:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e1a:	d112      	bne.n	8010e42 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d016      	beq.n	8010e52 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e26:	3324      	adds	r3, #36	; 0x24
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f001 f967 	bl	80120fc <xTaskRemoveFromEventList>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d00e      	beq.n	8010e52 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d00b      	beq.n	8010e52 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	2201      	movs	r2, #1
 8010e3e:	601a      	str	r2, [r3, #0]
 8010e40:	e007      	b.n	8010e52 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010e42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010e46:	3301      	adds	r3, #1
 8010e48:	b2db      	uxtb	r3, r3
 8010e4a:	b25a      	sxtb	r2, r3
 8010e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010e52:	2301      	movs	r3, #1
 8010e54:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010e56:	e001      	b.n	8010e5c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010e58:	2300      	movs	r3, #0
 8010e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8010e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e5e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010e60:	693b      	ldr	r3, [r7, #16]
 8010e62:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010e68:	4618      	mov	r0, r3
 8010e6a:	3738      	adds	r7, #56	; 0x38
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	bd80      	pop	{r7, pc}

08010e70 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b08e      	sub	sp, #56	; 0x38
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
 8010e78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d109      	bne.n	8010e98 <xQueueGiveFromISR+0x28>
	__asm volatile
 8010e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e88:	f383 8811 	msr	BASEPRI, r3
 8010e8c:	f3bf 8f6f 	isb	sy
 8010e90:	f3bf 8f4f 	dsb	sy
 8010e94:	623b      	str	r3, [r7, #32]
 8010e96:	e7fe      	b.n	8010e96 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d009      	beq.n	8010eb4 <xQueueGiveFromISR+0x44>
 8010ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ea4:	f383 8811 	msr	BASEPRI, r3
 8010ea8:	f3bf 8f6f 	isb	sy
 8010eac:	f3bf 8f4f 	dsb	sy
 8010eb0:	61fb      	str	r3, [r7, #28]
 8010eb2:	e7fe      	b.n	8010eb2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d103      	bne.n	8010ec4 <xQueueGiveFromISR+0x54>
 8010ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ebe:	689b      	ldr	r3, [r3, #8]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d101      	bne.n	8010ec8 <xQueueGiveFromISR+0x58>
 8010ec4:	2301      	movs	r3, #1
 8010ec6:	e000      	b.n	8010eca <xQueueGiveFromISR+0x5a>
 8010ec8:	2300      	movs	r3, #0
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d109      	bne.n	8010ee2 <xQueueGiveFromISR+0x72>
 8010ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ed2:	f383 8811 	msr	BASEPRI, r3
 8010ed6:	f3bf 8f6f 	isb	sy
 8010eda:	f3bf 8f4f 	dsb	sy
 8010ede:	61bb      	str	r3, [r7, #24]
 8010ee0:	e7fe      	b.n	8010ee0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010ee2:	f7ff f917 	bl	8010114 <vPortValidateInterruptPriority>
	__asm volatile
 8010ee6:	f3ef 8211 	mrs	r2, BASEPRI
 8010eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eee:	f383 8811 	msr	BASEPRI, r3
 8010ef2:	f3bf 8f6f 	isb	sy
 8010ef6:	f3bf 8f4f 	dsb	sy
 8010efa:	617a      	str	r2, [r7, #20]
 8010efc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010efe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010f00:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f06:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f0e:	429a      	cmp	r2, r3
 8010f10:	d22b      	bcs.n	8010f6a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f1e:	1c5a      	adds	r2, r3, #1
 8010f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f22:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010f24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f2c:	d112      	bne.n	8010f54 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d016      	beq.n	8010f64 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f38:	3324      	adds	r3, #36	; 0x24
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	f001 f8de 	bl	80120fc <xTaskRemoveFromEventList>
 8010f40:	4603      	mov	r3, r0
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d00e      	beq.n	8010f64 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d00b      	beq.n	8010f64 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010f4c:	683b      	ldr	r3, [r7, #0]
 8010f4e:	2201      	movs	r2, #1
 8010f50:	601a      	str	r2, [r3, #0]
 8010f52:	e007      	b.n	8010f64 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010f54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f58:	3301      	adds	r3, #1
 8010f5a:	b2db      	uxtb	r3, r3
 8010f5c:	b25a      	sxtb	r2, r3
 8010f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010f64:	2301      	movs	r3, #1
 8010f66:	637b      	str	r3, [r7, #52]	; 0x34
 8010f68:	e001      	b.n	8010f6e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8010f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f70:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	3738      	adds	r7, #56	; 0x38
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	bd80      	pop	{r7, pc}
	...

08010f84 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b08c      	sub	sp, #48	; 0x30
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	60f8      	str	r0, [r7, #12]
 8010f8c:	60b9      	str	r1, [r7, #8]
 8010f8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010f90:	2300      	movs	r3, #0
 8010f92:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d109      	bne.n	8010fb2 <xQueueReceive+0x2e>
	__asm volatile
 8010f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fa2:	f383 8811 	msr	BASEPRI, r3
 8010fa6:	f3bf 8f6f 	isb	sy
 8010faa:	f3bf 8f4f 	dsb	sy
 8010fae:	623b      	str	r3, [r7, #32]
 8010fb0:	e7fe      	b.n	8010fb0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010fb2:	68bb      	ldr	r3, [r7, #8]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d103      	bne.n	8010fc0 <xQueueReceive+0x3c>
 8010fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d101      	bne.n	8010fc4 <xQueueReceive+0x40>
 8010fc0:	2301      	movs	r3, #1
 8010fc2:	e000      	b.n	8010fc6 <xQueueReceive+0x42>
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d109      	bne.n	8010fde <xQueueReceive+0x5a>
 8010fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fce:	f383 8811 	msr	BASEPRI, r3
 8010fd2:	f3bf 8f6f 	isb	sy
 8010fd6:	f3bf 8f4f 	dsb	sy
 8010fda:	61fb      	str	r3, [r7, #28]
 8010fdc:	e7fe      	b.n	8010fdc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010fde:	f001 fa7b 	bl	80124d8 <xTaskGetSchedulerState>
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d102      	bne.n	8010fee <xQueueReceive+0x6a>
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d101      	bne.n	8010ff2 <xQueueReceive+0x6e>
 8010fee:	2301      	movs	r3, #1
 8010ff0:	e000      	b.n	8010ff4 <xQueueReceive+0x70>
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d109      	bne.n	801100c <xQueueReceive+0x88>
 8010ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ffc:	f383 8811 	msr	BASEPRI, r3
 8011000:	f3bf 8f6f 	isb	sy
 8011004:	f3bf 8f4f 	dsb	sy
 8011008:	61bb      	str	r3, [r7, #24]
 801100a:	e7fe      	b.n	801100a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801100c:	f7fe ffa6 	bl	800ff5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011014:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011018:	2b00      	cmp	r3, #0
 801101a:	d01f      	beq.n	801105c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801101c:	68b9      	ldr	r1, [r7, #8]
 801101e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011020:	f000 fab5 	bl	801158e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011026:	1e5a      	subs	r2, r3, #1
 8011028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801102a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801102c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801102e:	691b      	ldr	r3, [r3, #16]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d00f      	beq.n	8011054 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011036:	3310      	adds	r3, #16
 8011038:	4618      	mov	r0, r3
 801103a:	f001 f85f 	bl	80120fc <xTaskRemoveFromEventList>
 801103e:	4603      	mov	r3, r0
 8011040:	2b00      	cmp	r3, #0
 8011042:	d007      	beq.n	8011054 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011044:	4b3c      	ldr	r3, [pc, #240]	; (8011138 <xQueueReceive+0x1b4>)
 8011046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801104a:	601a      	str	r2, [r3, #0]
 801104c:	f3bf 8f4f 	dsb	sy
 8011050:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011054:	f7fe ffb0 	bl	800ffb8 <vPortExitCritical>
				return pdPASS;
 8011058:	2301      	movs	r3, #1
 801105a:	e069      	b.n	8011130 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d103      	bne.n	801106a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011062:	f7fe ffa9 	bl	800ffb8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011066:	2300      	movs	r3, #0
 8011068:	e062      	b.n	8011130 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 801106a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801106c:	2b00      	cmp	r3, #0
 801106e:	d106      	bne.n	801107e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011070:	f107 0310 	add.w	r3, r7, #16
 8011074:	4618      	mov	r0, r3
 8011076:	f001 f8a5 	bl	80121c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801107a:	2301      	movs	r3, #1
 801107c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801107e:	f7fe ff9b 	bl	800ffb8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011082:	f000 fde7 	bl	8011c54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011086:	f7fe ff69 	bl	800ff5c <vPortEnterCritical>
 801108a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801108c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011090:	b25b      	sxtb	r3, r3
 8011092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011096:	d103      	bne.n	80110a0 <xQueueReceive+0x11c>
 8011098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801109a:	2200      	movs	r2, #0
 801109c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80110a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80110a6:	b25b      	sxtb	r3, r3
 80110a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110ac:	d103      	bne.n	80110b6 <xQueueReceive+0x132>
 80110ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110b0:	2200      	movs	r2, #0
 80110b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80110b6:	f7fe ff7f 	bl	800ffb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80110ba:	1d3a      	adds	r2, r7, #4
 80110bc:	f107 0310 	add.w	r3, r7, #16
 80110c0:	4611      	mov	r1, r2
 80110c2:	4618      	mov	r0, r3
 80110c4:	f001 f894 	bl	80121f0 <xTaskCheckForTimeOut>
 80110c8:	4603      	mov	r3, r0
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d123      	bne.n	8011116 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80110ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80110d0:	f000 fad5 	bl	801167e <prvIsQueueEmpty>
 80110d4:	4603      	mov	r3, r0
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d017      	beq.n	801110a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80110da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110dc:	3324      	adds	r3, #36	; 0x24
 80110de:	687a      	ldr	r2, [r7, #4]
 80110e0:	4611      	mov	r1, r2
 80110e2:	4618      	mov	r0, r3
 80110e4:	f000 ffbc 	bl	8012060 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80110e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80110ea:	f000 fa76 	bl	80115da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80110ee:	f000 fdf7 	bl	8011ce0 <xTaskResumeAll>
 80110f2:	4603      	mov	r3, r0
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d189      	bne.n	801100c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80110f8:	4b0f      	ldr	r3, [pc, #60]	; (8011138 <xQueueReceive+0x1b4>)
 80110fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110fe:	601a      	str	r2, [r3, #0]
 8011100:	f3bf 8f4f 	dsb	sy
 8011104:	f3bf 8f6f 	isb	sy
 8011108:	e780      	b.n	801100c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801110a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801110c:	f000 fa65 	bl	80115da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011110:	f000 fde6 	bl	8011ce0 <xTaskResumeAll>
 8011114:	e77a      	b.n	801100c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011118:	f000 fa5f 	bl	80115da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801111c:	f000 fde0 	bl	8011ce0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011122:	f000 faac 	bl	801167e <prvIsQueueEmpty>
 8011126:	4603      	mov	r3, r0
 8011128:	2b00      	cmp	r3, #0
 801112a:	f43f af6f 	beq.w	801100c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801112e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011130:	4618      	mov	r0, r3
 8011132:	3730      	adds	r7, #48	; 0x30
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}
 8011138:	e000ed04 	.word	0xe000ed04

0801113c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b08e      	sub	sp, #56	; 0x38
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
 8011144:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011146:	2300      	movs	r3, #0
 8011148:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801114e:	2300      	movs	r3, #0
 8011150:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011154:	2b00      	cmp	r3, #0
 8011156:	d109      	bne.n	801116c <xQueueSemaphoreTake+0x30>
 8011158:	f04f 0350 	mov.w	r3, #80	; 0x50
 801115c:	f383 8811 	msr	BASEPRI, r3
 8011160:	f3bf 8f6f 	isb	sy
 8011164:	f3bf 8f4f 	dsb	sy
 8011168:	623b      	str	r3, [r7, #32]
 801116a:	e7fe      	b.n	801116a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801116c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011170:	2b00      	cmp	r3, #0
 8011172:	d009      	beq.n	8011188 <xQueueSemaphoreTake+0x4c>
 8011174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011178:	f383 8811 	msr	BASEPRI, r3
 801117c:	f3bf 8f6f 	isb	sy
 8011180:	f3bf 8f4f 	dsb	sy
 8011184:	61fb      	str	r3, [r7, #28]
 8011186:	e7fe      	b.n	8011186 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011188:	f001 f9a6 	bl	80124d8 <xTaskGetSchedulerState>
 801118c:	4603      	mov	r3, r0
 801118e:	2b00      	cmp	r3, #0
 8011190:	d102      	bne.n	8011198 <xQueueSemaphoreTake+0x5c>
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d101      	bne.n	801119c <xQueueSemaphoreTake+0x60>
 8011198:	2301      	movs	r3, #1
 801119a:	e000      	b.n	801119e <xQueueSemaphoreTake+0x62>
 801119c:	2300      	movs	r3, #0
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d109      	bne.n	80111b6 <xQueueSemaphoreTake+0x7a>
 80111a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111a6:	f383 8811 	msr	BASEPRI, r3
 80111aa:	f3bf 8f6f 	isb	sy
 80111ae:	f3bf 8f4f 	dsb	sy
 80111b2:	61bb      	str	r3, [r7, #24]
 80111b4:	e7fe      	b.n	80111b4 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80111b6:	f7fe fed1 	bl	800ff5c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80111ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111be:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80111c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d024      	beq.n	8011210 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80111c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111c8:	1e5a      	subs	r2, r3, #1
 80111ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111cc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80111ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d104      	bne.n	80111e0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80111d6:	f001 faf1 	bl	80127bc <pvTaskIncrementMutexHeldCount>
 80111da:	4602      	mov	r2, r0
 80111dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111de:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80111e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e2:	691b      	ldr	r3, [r3, #16]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d00f      	beq.n	8011208 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80111e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ea:	3310      	adds	r3, #16
 80111ec:	4618      	mov	r0, r3
 80111ee:	f000 ff85 	bl	80120fc <xTaskRemoveFromEventList>
 80111f2:	4603      	mov	r3, r0
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d007      	beq.n	8011208 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80111f8:	4b53      	ldr	r3, [pc, #332]	; (8011348 <xQueueSemaphoreTake+0x20c>)
 80111fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111fe:	601a      	str	r2, [r3, #0]
 8011200:	f3bf 8f4f 	dsb	sy
 8011204:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011208:	f7fe fed6 	bl	800ffb8 <vPortExitCritical>
				return pdPASS;
 801120c:	2301      	movs	r3, #1
 801120e:	e096      	b.n	801133e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d110      	bne.n	8011238 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011218:	2b00      	cmp	r3, #0
 801121a:	d009      	beq.n	8011230 <xQueueSemaphoreTake+0xf4>
 801121c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011220:	f383 8811 	msr	BASEPRI, r3
 8011224:	f3bf 8f6f 	isb	sy
 8011228:	f3bf 8f4f 	dsb	sy
 801122c:	617b      	str	r3, [r7, #20]
 801122e:	e7fe      	b.n	801122e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011230:	f7fe fec2 	bl	800ffb8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011234:	2300      	movs	r3, #0
 8011236:	e082      	b.n	801133e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801123a:	2b00      	cmp	r3, #0
 801123c:	d106      	bne.n	801124c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801123e:	f107 030c 	add.w	r3, r7, #12
 8011242:	4618      	mov	r0, r3
 8011244:	f000 ffbe 	bl	80121c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011248:	2301      	movs	r3, #1
 801124a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801124c:	f7fe feb4 	bl	800ffb8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011250:	f000 fd00 	bl	8011c54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011254:	f7fe fe82 	bl	800ff5c <vPortEnterCritical>
 8011258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801125a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801125e:	b25b      	sxtb	r3, r3
 8011260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011264:	d103      	bne.n	801126e <xQueueSemaphoreTake+0x132>
 8011266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011268:	2200      	movs	r2, #0
 801126a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801126e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011270:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011274:	b25b      	sxtb	r3, r3
 8011276:	f1b3 3fff 	cmp.w	r3, #4294967295
 801127a:	d103      	bne.n	8011284 <xQueueSemaphoreTake+0x148>
 801127c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801127e:	2200      	movs	r2, #0
 8011280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011284:	f7fe fe98 	bl	800ffb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011288:	463a      	mov	r2, r7
 801128a:	f107 030c 	add.w	r3, r7, #12
 801128e:	4611      	mov	r1, r2
 8011290:	4618      	mov	r0, r3
 8011292:	f000 ffad 	bl	80121f0 <xTaskCheckForTimeOut>
 8011296:	4603      	mov	r3, r0
 8011298:	2b00      	cmp	r3, #0
 801129a:	d132      	bne.n	8011302 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801129c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801129e:	f000 f9ee 	bl	801167e <prvIsQueueEmpty>
 80112a2:	4603      	mov	r3, r0
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d026      	beq.n	80112f6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80112a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d109      	bne.n	80112c4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80112b0:	f7fe fe54 	bl	800ff5c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80112b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112b6:	689b      	ldr	r3, [r3, #8]
 80112b8:	4618      	mov	r0, r3
 80112ba:	f001 f92b 	bl	8012514 <xTaskPriorityInherit>
 80112be:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80112c0:	f7fe fe7a 	bl	800ffb8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80112c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112c6:	3324      	adds	r3, #36	; 0x24
 80112c8:	683a      	ldr	r2, [r7, #0]
 80112ca:	4611      	mov	r1, r2
 80112cc:	4618      	mov	r0, r3
 80112ce:	f000 fec7 	bl	8012060 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80112d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112d4:	f000 f981 	bl	80115da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80112d8:	f000 fd02 	bl	8011ce0 <xTaskResumeAll>
 80112dc:	4603      	mov	r3, r0
 80112de:	2b00      	cmp	r3, #0
 80112e0:	f47f af69 	bne.w	80111b6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80112e4:	4b18      	ldr	r3, [pc, #96]	; (8011348 <xQueueSemaphoreTake+0x20c>)
 80112e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112ea:	601a      	str	r2, [r3, #0]
 80112ec:	f3bf 8f4f 	dsb	sy
 80112f0:	f3bf 8f6f 	isb	sy
 80112f4:	e75f      	b.n	80111b6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80112f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112f8:	f000 f96f 	bl	80115da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80112fc:	f000 fcf0 	bl	8011ce0 <xTaskResumeAll>
 8011300:	e759      	b.n	80111b6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011302:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011304:	f000 f969 	bl	80115da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011308:	f000 fcea 	bl	8011ce0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801130c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801130e:	f000 f9b6 	bl	801167e <prvIsQueueEmpty>
 8011312:	4603      	mov	r3, r0
 8011314:	2b00      	cmp	r3, #0
 8011316:	f43f af4e 	beq.w	80111b6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801131a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801131c:	2b00      	cmp	r3, #0
 801131e:	d00d      	beq.n	801133c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8011320:	f7fe fe1c 	bl	800ff5c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011324:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011326:	f000 f8b0 	bl	801148a <prvGetDisinheritPriorityAfterTimeout>
 801132a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801132c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801132e:	689b      	ldr	r3, [r3, #8]
 8011330:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011332:	4618      	mov	r0, r3
 8011334:	f001 f9c2 	bl	80126bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011338:	f7fe fe3e 	bl	800ffb8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801133c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801133e:	4618      	mov	r0, r3
 8011340:	3738      	adds	r7, #56	; 0x38
 8011342:	46bd      	mov	sp, r7
 8011344:	bd80      	pop	{r7, pc}
 8011346:	bf00      	nop
 8011348:	e000ed04 	.word	0xe000ed04

0801134c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801134c:	b580      	push	{r7, lr}
 801134e:	b08e      	sub	sp, #56	; 0x38
 8011350:	af00      	add	r7, sp, #0
 8011352:	60f8      	str	r0, [r7, #12]
 8011354:	60b9      	str	r1, [r7, #8]
 8011356:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801135c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801135e:	2b00      	cmp	r3, #0
 8011360:	d109      	bne.n	8011376 <xQueueReceiveFromISR+0x2a>
 8011362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011366:	f383 8811 	msr	BASEPRI, r3
 801136a:	f3bf 8f6f 	isb	sy
 801136e:	f3bf 8f4f 	dsb	sy
 8011372:	623b      	str	r3, [r7, #32]
 8011374:	e7fe      	b.n	8011374 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d103      	bne.n	8011384 <xQueueReceiveFromISR+0x38>
 801137c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011380:	2b00      	cmp	r3, #0
 8011382:	d101      	bne.n	8011388 <xQueueReceiveFromISR+0x3c>
 8011384:	2301      	movs	r3, #1
 8011386:	e000      	b.n	801138a <xQueueReceiveFromISR+0x3e>
 8011388:	2300      	movs	r3, #0
 801138a:	2b00      	cmp	r3, #0
 801138c:	d109      	bne.n	80113a2 <xQueueReceiveFromISR+0x56>
 801138e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011392:	f383 8811 	msr	BASEPRI, r3
 8011396:	f3bf 8f6f 	isb	sy
 801139a:	f3bf 8f4f 	dsb	sy
 801139e:	61fb      	str	r3, [r7, #28]
 80113a0:	e7fe      	b.n	80113a0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80113a2:	f7fe feb7 	bl	8010114 <vPortValidateInterruptPriority>
	__asm volatile
 80113a6:	f3ef 8211 	mrs	r2, BASEPRI
 80113aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113ae:	f383 8811 	msr	BASEPRI, r3
 80113b2:	f3bf 8f6f 	isb	sy
 80113b6:	f3bf 8f4f 	dsb	sy
 80113ba:	61ba      	str	r2, [r7, #24]
 80113bc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80113be:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80113c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80113c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80113c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d02f      	beq.n	801142e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80113ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80113d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80113d8:	68b9      	ldr	r1, [r7, #8]
 80113da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80113dc:	f000 f8d7 	bl	801158e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80113e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e2:	1e5a      	subs	r2, r3, #1
 80113e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113e6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80113e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80113ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113f0:	d112      	bne.n	8011418 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80113f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113f4:	691b      	ldr	r3, [r3, #16]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d016      	beq.n	8011428 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80113fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113fc:	3310      	adds	r3, #16
 80113fe:	4618      	mov	r0, r3
 8011400:	f000 fe7c 	bl	80120fc <xTaskRemoveFromEventList>
 8011404:	4603      	mov	r3, r0
 8011406:	2b00      	cmp	r3, #0
 8011408:	d00e      	beq.n	8011428 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d00b      	beq.n	8011428 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	2201      	movs	r2, #1
 8011414:	601a      	str	r2, [r3, #0]
 8011416:	e007      	b.n	8011428 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801141c:	3301      	adds	r3, #1
 801141e:	b2db      	uxtb	r3, r3
 8011420:	b25a      	sxtb	r2, r3
 8011422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011428:	2301      	movs	r3, #1
 801142a:	637b      	str	r3, [r7, #52]	; 0x34
 801142c:	e001      	b.n	8011432 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 801142e:	2300      	movs	r3, #0
 8011430:	637b      	str	r3, [r7, #52]	; 0x34
 8011432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011434:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011436:	693b      	ldr	r3, [r7, #16]
 8011438:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801143c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801143e:	4618      	mov	r0, r3
 8011440:	3738      	adds	r7, #56	; 0x38
 8011442:	46bd      	mov	sp, r7
 8011444:	bd80      	pop	{r7, pc}

08011446 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011446:	b580      	push	{r7, lr}
 8011448:	b084      	sub	sp, #16
 801144a:	af00      	add	r7, sp, #0
 801144c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d109      	bne.n	801146c <vQueueDelete+0x26>
	__asm volatile
 8011458:	f04f 0350 	mov.w	r3, #80	; 0x50
 801145c:	f383 8811 	msr	BASEPRI, r3
 8011460:	f3bf 8f6f 	isb	sy
 8011464:	f3bf 8f4f 	dsb	sy
 8011468:	60bb      	str	r3, [r7, #8]
 801146a:	e7fe      	b.n	801146a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801146c:	68f8      	ldr	r0, [r7, #12]
 801146e:	f000 f95d 	bl	801172c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8011478:	2b00      	cmp	r3, #0
 801147a:	d102      	bne.n	8011482 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 801147c:	68f8      	ldr	r0, [r7, #12]
 801147e:	f7fe ff49 	bl	8010314 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011482:	bf00      	nop
 8011484:	3710      	adds	r7, #16
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}

0801148a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801148a:	b480      	push	{r7}
 801148c:	b085      	sub	sp, #20
 801148e:	af00      	add	r7, sp, #0
 8011490:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011496:	2b00      	cmp	r3, #0
 8011498:	d006      	beq.n	80114a8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80114a4:	60fb      	str	r3, [r7, #12]
 80114a6:	e001      	b.n	80114ac <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80114a8:	2300      	movs	r3, #0
 80114aa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80114ac:	68fb      	ldr	r3, [r7, #12]
	}
 80114ae:	4618      	mov	r0, r3
 80114b0:	3714      	adds	r7, #20
 80114b2:	46bd      	mov	sp, r7
 80114b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b8:	4770      	bx	lr

080114ba <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80114ba:	b580      	push	{r7, lr}
 80114bc:	b086      	sub	sp, #24
 80114be:	af00      	add	r7, sp, #0
 80114c0:	60f8      	str	r0, [r7, #12]
 80114c2:	60b9      	str	r1, [r7, #8]
 80114c4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80114c6:	2300      	movs	r3, #0
 80114c8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114ce:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d10d      	bne.n	80114f4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d14d      	bne.n	801157c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	689b      	ldr	r3, [r3, #8]
 80114e4:	4618      	mov	r0, r3
 80114e6:	f001 f87d 	bl	80125e4 <xTaskPriorityDisinherit>
 80114ea:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	2200      	movs	r2, #0
 80114f0:	609a      	str	r2, [r3, #8]
 80114f2:	e043      	b.n	801157c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d119      	bne.n	801152e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	6858      	ldr	r0, [r3, #4]
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011502:	461a      	mov	r2, r3
 8011504:	68b9      	ldr	r1, [r7, #8]
 8011506:	f001 ffa9 	bl	801345c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	685a      	ldr	r2, [r3, #4]
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011512:	441a      	add	r2, r3
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	685a      	ldr	r2, [r3, #4]
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	689b      	ldr	r3, [r3, #8]
 8011520:	429a      	cmp	r2, r3
 8011522:	d32b      	bcc.n	801157c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	681a      	ldr	r2, [r3, #0]
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	605a      	str	r2, [r3, #4]
 801152c:	e026      	b.n	801157c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	68d8      	ldr	r0, [r3, #12]
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011536:	461a      	mov	r2, r3
 8011538:	68b9      	ldr	r1, [r7, #8]
 801153a:	f001 ff8f 	bl	801345c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	68da      	ldr	r2, [r3, #12]
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011546:	425b      	negs	r3, r3
 8011548:	441a      	add	r2, r3
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	68da      	ldr	r2, [r3, #12]
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	429a      	cmp	r2, r3
 8011558:	d207      	bcs.n	801156a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	689a      	ldr	r2, [r3, #8]
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011562:	425b      	negs	r3, r3
 8011564:	441a      	add	r2, r3
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	2b02      	cmp	r3, #2
 801156e:	d105      	bne.n	801157c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011570:	693b      	ldr	r3, [r7, #16]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d002      	beq.n	801157c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011576:	693b      	ldr	r3, [r7, #16]
 8011578:	3b01      	subs	r3, #1
 801157a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801157c:	693b      	ldr	r3, [r7, #16]
 801157e:	1c5a      	adds	r2, r3, #1
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011584:	697b      	ldr	r3, [r7, #20]
}
 8011586:	4618      	mov	r0, r3
 8011588:	3718      	adds	r7, #24
 801158a:	46bd      	mov	sp, r7
 801158c:	bd80      	pop	{r7, pc}

0801158e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801158e:	b580      	push	{r7, lr}
 8011590:	b082      	sub	sp, #8
 8011592:	af00      	add	r7, sp, #0
 8011594:	6078      	str	r0, [r7, #4]
 8011596:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801159c:	2b00      	cmp	r3, #0
 801159e:	d018      	beq.n	80115d2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	68da      	ldr	r2, [r3, #12]
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115a8:	441a      	add	r2, r3
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	68da      	ldr	r2, [r3, #12]
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	689b      	ldr	r3, [r3, #8]
 80115b6:	429a      	cmp	r2, r3
 80115b8:	d303      	bcc.n	80115c2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	681a      	ldr	r2, [r3, #0]
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	68d9      	ldr	r1, [r3, #12]
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115ca:	461a      	mov	r2, r3
 80115cc:	6838      	ldr	r0, [r7, #0]
 80115ce:	f001 ff45 	bl	801345c <memcpy>
	}
}
 80115d2:	bf00      	nop
 80115d4:	3708      	adds	r7, #8
 80115d6:	46bd      	mov	sp, r7
 80115d8:	bd80      	pop	{r7, pc}

080115da <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80115da:	b580      	push	{r7, lr}
 80115dc:	b084      	sub	sp, #16
 80115de:	af00      	add	r7, sp, #0
 80115e0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80115e2:	f7fe fcbb 	bl	800ff5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80115ec:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80115ee:	e011      	b.n	8011614 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d012      	beq.n	801161e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	3324      	adds	r3, #36	; 0x24
 80115fc:	4618      	mov	r0, r3
 80115fe:	f000 fd7d 	bl	80120fc <xTaskRemoveFromEventList>
 8011602:	4603      	mov	r3, r0
 8011604:	2b00      	cmp	r3, #0
 8011606:	d001      	beq.n	801160c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011608:	f000 fe52 	bl	80122b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801160c:	7bfb      	ldrb	r3, [r7, #15]
 801160e:	3b01      	subs	r3, #1
 8011610:	b2db      	uxtb	r3, r3
 8011612:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011618:	2b00      	cmp	r3, #0
 801161a:	dce9      	bgt.n	80115f0 <prvUnlockQueue+0x16>
 801161c:	e000      	b.n	8011620 <prvUnlockQueue+0x46>
					break;
 801161e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	22ff      	movs	r2, #255	; 0xff
 8011624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011628:	f7fe fcc6 	bl	800ffb8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801162c:	f7fe fc96 	bl	800ff5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011636:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011638:	e011      	b.n	801165e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	691b      	ldr	r3, [r3, #16]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d012      	beq.n	8011668 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	3310      	adds	r3, #16
 8011646:	4618      	mov	r0, r3
 8011648:	f000 fd58 	bl	80120fc <xTaskRemoveFromEventList>
 801164c:	4603      	mov	r3, r0
 801164e:	2b00      	cmp	r3, #0
 8011650:	d001      	beq.n	8011656 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011652:	f000 fe2d 	bl	80122b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011656:	7bbb      	ldrb	r3, [r7, #14]
 8011658:	3b01      	subs	r3, #1
 801165a:	b2db      	uxtb	r3, r3
 801165c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801165e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011662:	2b00      	cmp	r3, #0
 8011664:	dce9      	bgt.n	801163a <prvUnlockQueue+0x60>
 8011666:	e000      	b.n	801166a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011668:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	22ff      	movs	r2, #255	; 0xff
 801166e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011672:	f7fe fca1 	bl	800ffb8 <vPortExitCritical>
}
 8011676:	bf00      	nop
 8011678:	3710      	adds	r7, #16
 801167a:	46bd      	mov	sp, r7
 801167c:	bd80      	pop	{r7, pc}

0801167e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801167e:	b580      	push	{r7, lr}
 8011680:	b084      	sub	sp, #16
 8011682:	af00      	add	r7, sp, #0
 8011684:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011686:	f7fe fc69 	bl	800ff5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801168e:	2b00      	cmp	r3, #0
 8011690:	d102      	bne.n	8011698 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011692:	2301      	movs	r3, #1
 8011694:	60fb      	str	r3, [r7, #12]
 8011696:	e001      	b.n	801169c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011698:	2300      	movs	r3, #0
 801169a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801169c:	f7fe fc8c 	bl	800ffb8 <vPortExitCritical>

	return xReturn;
 80116a0:	68fb      	ldr	r3, [r7, #12]
}
 80116a2:	4618      	mov	r0, r3
 80116a4:	3710      	adds	r7, #16
 80116a6:	46bd      	mov	sp, r7
 80116a8:	bd80      	pop	{r7, pc}

080116aa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80116aa:	b580      	push	{r7, lr}
 80116ac:	b084      	sub	sp, #16
 80116ae:	af00      	add	r7, sp, #0
 80116b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80116b2:	f7fe fc53 	bl	800ff5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116be:	429a      	cmp	r2, r3
 80116c0:	d102      	bne.n	80116c8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80116c2:	2301      	movs	r3, #1
 80116c4:	60fb      	str	r3, [r7, #12]
 80116c6:	e001      	b.n	80116cc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80116c8:	2300      	movs	r3, #0
 80116ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80116cc:	f7fe fc74 	bl	800ffb8 <vPortExitCritical>

	return xReturn;
 80116d0:	68fb      	ldr	r3, [r7, #12]
}
 80116d2:	4618      	mov	r0, r3
 80116d4:	3710      	adds	r7, #16
 80116d6:	46bd      	mov	sp, r7
 80116d8:	bd80      	pop	{r7, pc}
	...

080116dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80116dc:	b480      	push	{r7}
 80116de:	b085      	sub	sp, #20
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]
 80116e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80116e6:	2300      	movs	r3, #0
 80116e8:	60fb      	str	r3, [r7, #12]
 80116ea:	e014      	b.n	8011716 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80116ec:	4a0e      	ldr	r2, [pc, #56]	; (8011728 <vQueueAddToRegistry+0x4c>)
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d10b      	bne.n	8011710 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80116f8:	490b      	ldr	r1, [pc, #44]	; (8011728 <vQueueAddToRegistry+0x4c>)
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	683a      	ldr	r2, [r7, #0]
 80116fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011702:	4a09      	ldr	r2, [pc, #36]	; (8011728 <vQueueAddToRegistry+0x4c>)
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	00db      	lsls	r3, r3, #3
 8011708:	4413      	add	r3, r2
 801170a:	687a      	ldr	r2, [r7, #4]
 801170c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801170e:	e005      	b.n	801171c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	3301      	adds	r3, #1
 8011714:	60fb      	str	r3, [r7, #12]
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	2b07      	cmp	r3, #7
 801171a:	d9e7      	bls.n	80116ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801171c:	bf00      	nop
 801171e:	3714      	adds	r7, #20
 8011720:	46bd      	mov	sp, r7
 8011722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011726:	4770      	bx	lr
 8011728:	20004cb4 	.word	0x20004cb4

0801172c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801172c:	b480      	push	{r7}
 801172e:	b085      	sub	sp, #20
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011734:	2300      	movs	r3, #0
 8011736:	60fb      	str	r3, [r7, #12]
 8011738:	e016      	b.n	8011768 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801173a:	4a10      	ldr	r2, [pc, #64]	; (801177c <vQueueUnregisterQueue+0x50>)
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	00db      	lsls	r3, r3, #3
 8011740:	4413      	add	r3, r2
 8011742:	685b      	ldr	r3, [r3, #4]
 8011744:	687a      	ldr	r2, [r7, #4]
 8011746:	429a      	cmp	r2, r3
 8011748:	d10b      	bne.n	8011762 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801174a:	4a0c      	ldr	r2, [pc, #48]	; (801177c <vQueueUnregisterQueue+0x50>)
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	2100      	movs	r1, #0
 8011750:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011754:	4a09      	ldr	r2, [pc, #36]	; (801177c <vQueueUnregisterQueue+0x50>)
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	00db      	lsls	r3, r3, #3
 801175a:	4413      	add	r3, r2
 801175c:	2200      	movs	r2, #0
 801175e:	605a      	str	r2, [r3, #4]
				break;
 8011760:	e005      	b.n	801176e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	3301      	adds	r3, #1
 8011766:	60fb      	str	r3, [r7, #12]
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	2b07      	cmp	r3, #7
 801176c:	d9e5      	bls.n	801173a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801176e:	bf00      	nop
 8011770:	3714      	adds	r7, #20
 8011772:	46bd      	mov	sp, r7
 8011774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011778:	4770      	bx	lr
 801177a:	bf00      	nop
 801177c:	20004cb4 	.word	0x20004cb4

08011780 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011780:	b580      	push	{r7, lr}
 8011782:	b086      	sub	sp, #24
 8011784:	af00      	add	r7, sp, #0
 8011786:	60f8      	str	r0, [r7, #12]
 8011788:	60b9      	str	r1, [r7, #8]
 801178a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011790:	f7fe fbe4 	bl	800ff5c <vPortEnterCritical>
 8011794:	697b      	ldr	r3, [r7, #20]
 8011796:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801179a:	b25b      	sxtb	r3, r3
 801179c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117a0:	d103      	bne.n	80117aa <vQueueWaitForMessageRestricted+0x2a>
 80117a2:	697b      	ldr	r3, [r7, #20]
 80117a4:	2200      	movs	r2, #0
 80117a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80117aa:	697b      	ldr	r3, [r7, #20]
 80117ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80117b0:	b25b      	sxtb	r3, r3
 80117b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117b6:	d103      	bne.n	80117c0 <vQueueWaitForMessageRestricted+0x40>
 80117b8:	697b      	ldr	r3, [r7, #20]
 80117ba:	2200      	movs	r2, #0
 80117bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80117c0:	f7fe fbfa 	bl	800ffb8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80117c4:	697b      	ldr	r3, [r7, #20]
 80117c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d106      	bne.n	80117da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80117cc:	697b      	ldr	r3, [r7, #20]
 80117ce:	3324      	adds	r3, #36	; 0x24
 80117d0:	687a      	ldr	r2, [r7, #4]
 80117d2:	68b9      	ldr	r1, [r7, #8]
 80117d4:	4618      	mov	r0, r3
 80117d6:	f000 fc67 	bl	80120a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80117da:	6978      	ldr	r0, [r7, #20]
 80117dc:	f7ff fefd 	bl	80115da <prvUnlockQueue>
	}
 80117e0:	bf00      	nop
 80117e2:	3718      	adds	r7, #24
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bd80      	pop	{r7, pc}

080117e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b08e      	sub	sp, #56	; 0x38
 80117ec:	af04      	add	r7, sp, #16
 80117ee:	60f8      	str	r0, [r7, #12]
 80117f0:	60b9      	str	r1, [r7, #8]
 80117f2:	607a      	str	r2, [r7, #4]
 80117f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80117f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d109      	bne.n	8011810 <xTaskCreateStatic+0x28>
 80117fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011800:	f383 8811 	msr	BASEPRI, r3
 8011804:	f3bf 8f6f 	isb	sy
 8011808:	f3bf 8f4f 	dsb	sy
 801180c:	623b      	str	r3, [r7, #32]
 801180e:	e7fe      	b.n	801180e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8011810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011812:	2b00      	cmp	r3, #0
 8011814:	d109      	bne.n	801182a <xTaskCreateStatic+0x42>
 8011816:	f04f 0350 	mov.w	r3, #80	; 0x50
 801181a:	f383 8811 	msr	BASEPRI, r3
 801181e:	f3bf 8f6f 	isb	sy
 8011822:	f3bf 8f4f 	dsb	sy
 8011826:	61fb      	str	r3, [r7, #28]
 8011828:	e7fe      	b.n	8011828 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801182a:	235c      	movs	r3, #92	; 0x5c
 801182c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801182e:	693b      	ldr	r3, [r7, #16]
 8011830:	2b5c      	cmp	r3, #92	; 0x5c
 8011832:	d009      	beq.n	8011848 <xTaskCreateStatic+0x60>
 8011834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011838:	f383 8811 	msr	BASEPRI, r3
 801183c:	f3bf 8f6f 	isb	sy
 8011840:	f3bf 8f4f 	dsb	sy
 8011844:	61bb      	str	r3, [r7, #24]
 8011846:	e7fe      	b.n	8011846 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011848:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801184a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801184c:	2b00      	cmp	r3, #0
 801184e:	d01e      	beq.n	801188e <xTaskCreateStatic+0xa6>
 8011850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011852:	2b00      	cmp	r3, #0
 8011854:	d01b      	beq.n	801188e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011858:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801185c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801185e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011862:	2202      	movs	r2, #2
 8011864:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011868:	2300      	movs	r3, #0
 801186a:	9303      	str	r3, [sp, #12]
 801186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801186e:	9302      	str	r3, [sp, #8]
 8011870:	f107 0314 	add.w	r3, r7, #20
 8011874:	9301      	str	r3, [sp, #4]
 8011876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011878:	9300      	str	r3, [sp, #0]
 801187a:	683b      	ldr	r3, [r7, #0]
 801187c:	687a      	ldr	r2, [r7, #4]
 801187e:	68b9      	ldr	r1, [r7, #8]
 8011880:	68f8      	ldr	r0, [r7, #12]
 8011882:	f000 f850 	bl	8011926 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011886:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011888:	f000 f8dc 	bl	8011a44 <prvAddNewTaskToReadyList>
 801188c:	e001      	b.n	8011892 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 801188e:	2300      	movs	r3, #0
 8011890:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011892:	697b      	ldr	r3, [r7, #20]
	}
 8011894:	4618      	mov	r0, r3
 8011896:	3728      	adds	r7, #40	; 0x28
 8011898:	46bd      	mov	sp, r7
 801189a:	bd80      	pop	{r7, pc}

0801189c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801189c:	b580      	push	{r7, lr}
 801189e:	b08c      	sub	sp, #48	; 0x30
 80118a0:	af04      	add	r7, sp, #16
 80118a2:	60f8      	str	r0, [r7, #12]
 80118a4:	60b9      	str	r1, [r7, #8]
 80118a6:	603b      	str	r3, [r7, #0]
 80118a8:	4613      	mov	r3, r2
 80118aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80118ac:	88fb      	ldrh	r3, [r7, #6]
 80118ae:	009b      	lsls	r3, r3, #2
 80118b0:	4618      	mov	r0, r3
 80118b2:	f7fe fc6d 	bl	8010190 <pvPortMalloc>
 80118b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80118b8:	697b      	ldr	r3, [r7, #20]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d00e      	beq.n	80118dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80118be:	205c      	movs	r0, #92	; 0x5c
 80118c0:	f7fe fc66 	bl	8010190 <pvPortMalloc>
 80118c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80118c6:	69fb      	ldr	r3, [r7, #28]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d003      	beq.n	80118d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80118cc:	69fb      	ldr	r3, [r7, #28]
 80118ce:	697a      	ldr	r2, [r7, #20]
 80118d0:	631a      	str	r2, [r3, #48]	; 0x30
 80118d2:	e005      	b.n	80118e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80118d4:	6978      	ldr	r0, [r7, #20]
 80118d6:	f7fe fd1d 	bl	8010314 <vPortFree>
 80118da:	e001      	b.n	80118e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80118dc:	2300      	movs	r3, #0
 80118de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80118e0:	69fb      	ldr	r3, [r7, #28]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d017      	beq.n	8011916 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80118e6:	69fb      	ldr	r3, [r7, #28]
 80118e8:	2200      	movs	r2, #0
 80118ea:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80118ee:	88fa      	ldrh	r2, [r7, #6]
 80118f0:	2300      	movs	r3, #0
 80118f2:	9303      	str	r3, [sp, #12]
 80118f4:	69fb      	ldr	r3, [r7, #28]
 80118f6:	9302      	str	r3, [sp, #8]
 80118f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118fa:	9301      	str	r3, [sp, #4]
 80118fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118fe:	9300      	str	r3, [sp, #0]
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	68b9      	ldr	r1, [r7, #8]
 8011904:	68f8      	ldr	r0, [r7, #12]
 8011906:	f000 f80e 	bl	8011926 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801190a:	69f8      	ldr	r0, [r7, #28]
 801190c:	f000 f89a 	bl	8011a44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011910:	2301      	movs	r3, #1
 8011912:	61bb      	str	r3, [r7, #24]
 8011914:	e002      	b.n	801191c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011916:	f04f 33ff 	mov.w	r3, #4294967295
 801191a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801191c:	69bb      	ldr	r3, [r7, #24]
	}
 801191e:	4618      	mov	r0, r3
 8011920:	3720      	adds	r7, #32
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}

08011926 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011926:	b580      	push	{r7, lr}
 8011928:	b088      	sub	sp, #32
 801192a:	af00      	add	r7, sp, #0
 801192c:	60f8      	str	r0, [r7, #12]
 801192e:	60b9      	str	r1, [r7, #8]
 8011930:	607a      	str	r2, [r7, #4]
 8011932:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011936:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	009b      	lsls	r3, r3, #2
 801193c:	461a      	mov	r2, r3
 801193e:	21a5      	movs	r1, #165	; 0xa5
 8011940:	f001 fd97 	bl	8013472 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011946:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801194e:	3b01      	subs	r3, #1
 8011950:	009b      	lsls	r3, r3, #2
 8011952:	4413      	add	r3, r2
 8011954:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011956:	69bb      	ldr	r3, [r7, #24]
 8011958:	f023 0307 	bic.w	r3, r3, #7
 801195c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801195e:	69bb      	ldr	r3, [r7, #24]
 8011960:	f003 0307 	and.w	r3, r3, #7
 8011964:	2b00      	cmp	r3, #0
 8011966:	d009      	beq.n	801197c <prvInitialiseNewTask+0x56>
 8011968:	f04f 0350 	mov.w	r3, #80	; 0x50
 801196c:	f383 8811 	msr	BASEPRI, r3
 8011970:	f3bf 8f6f 	isb	sy
 8011974:	f3bf 8f4f 	dsb	sy
 8011978:	617b      	str	r3, [r7, #20]
 801197a:	e7fe      	b.n	801197a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801197c:	68bb      	ldr	r3, [r7, #8]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d01f      	beq.n	80119c2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011982:	2300      	movs	r3, #0
 8011984:	61fb      	str	r3, [r7, #28]
 8011986:	e012      	b.n	80119ae <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011988:	68ba      	ldr	r2, [r7, #8]
 801198a:	69fb      	ldr	r3, [r7, #28]
 801198c:	4413      	add	r3, r2
 801198e:	7819      	ldrb	r1, [r3, #0]
 8011990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011992:	69fb      	ldr	r3, [r7, #28]
 8011994:	4413      	add	r3, r2
 8011996:	3334      	adds	r3, #52	; 0x34
 8011998:	460a      	mov	r2, r1
 801199a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801199c:	68ba      	ldr	r2, [r7, #8]
 801199e:	69fb      	ldr	r3, [r7, #28]
 80119a0:	4413      	add	r3, r2
 80119a2:	781b      	ldrb	r3, [r3, #0]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d006      	beq.n	80119b6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80119a8:	69fb      	ldr	r3, [r7, #28]
 80119aa:	3301      	adds	r3, #1
 80119ac:	61fb      	str	r3, [r7, #28]
 80119ae:	69fb      	ldr	r3, [r7, #28]
 80119b0:	2b0f      	cmp	r3, #15
 80119b2:	d9e9      	bls.n	8011988 <prvInitialiseNewTask+0x62>
 80119b4:	e000      	b.n	80119b8 <prvInitialiseNewTask+0x92>
			{
				break;
 80119b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80119b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119ba:	2200      	movs	r2, #0
 80119bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80119c0:	e003      	b.n	80119ca <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80119c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119c4:	2200      	movs	r2, #0
 80119c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80119ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119cc:	2b37      	cmp	r3, #55	; 0x37
 80119ce:	d901      	bls.n	80119d4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80119d0:	2337      	movs	r3, #55	; 0x37
 80119d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80119d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80119d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80119da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80119de:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80119e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119e2:	2200      	movs	r2, #0
 80119e4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80119e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119e8:	3304      	adds	r3, #4
 80119ea:	4618      	mov	r0, r3
 80119ec:	f7fe fdc6 	bl	801057c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80119f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119f2:	3318      	adds	r3, #24
 80119f4:	4618      	mov	r0, r3
 80119f6:	f7fe fdc1 	bl	801057c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80119fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80119fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a12:	2200      	movs	r2, #0
 8011a14:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a18:	2200      	movs	r2, #0
 8011a1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011a1e:	683a      	ldr	r2, [r7, #0]
 8011a20:	68f9      	ldr	r1, [r7, #12]
 8011a22:	69b8      	ldr	r0, [r7, #24]
 8011a24:	f7fe f976 	bl	800fd14 <pxPortInitialiseStack>
 8011a28:	4602      	mov	r2, r0
 8011a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a2c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d002      	beq.n	8011a3a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011a3a:	bf00      	nop
 8011a3c:	3720      	adds	r7, #32
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	bd80      	pop	{r7, pc}
	...

08011a44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b082      	sub	sp, #8
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011a4c:	f7fe fa86 	bl	800ff5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011a50:	4b2d      	ldr	r3, [pc, #180]	; (8011b08 <prvAddNewTaskToReadyList+0xc4>)
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	3301      	adds	r3, #1
 8011a56:	4a2c      	ldr	r2, [pc, #176]	; (8011b08 <prvAddNewTaskToReadyList+0xc4>)
 8011a58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011a5a:	4b2c      	ldr	r3, [pc, #176]	; (8011b0c <prvAddNewTaskToReadyList+0xc8>)
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d109      	bne.n	8011a76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011a62:	4a2a      	ldr	r2, [pc, #168]	; (8011b0c <prvAddNewTaskToReadyList+0xc8>)
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011a68:	4b27      	ldr	r3, [pc, #156]	; (8011b08 <prvAddNewTaskToReadyList+0xc4>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	2b01      	cmp	r3, #1
 8011a6e:	d110      	bne.n	8011a92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011a70:	f000 fc68 	bl	8012344 <prvInitialiseTaskLists>
 8011a74:	e00d      	b.n	8011a92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011a76:	4b26      	ldr	r3, [pc, #152]	; (8011b10 <prvAddNewTaskToReadyList+0xcc>)
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d109      	bne.n	8011a92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011a7e:	4b23      	ldr	r3, [pc, #140]	; (8011b0c <prvAddNewTaskToReadyList+0xc8>)
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a88:	429a      	cmp	r2, r3
 8011a8a:	d802      	bhi.n	8011a92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011a8c:	4a1f      	ldr	r2, [pc, #124]	; (8011b0c <prvAddNewTaskToReadyList+0xc8>)
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011a92:	4b20      	ldr	r3, [pc, #128]	; (8011b14 <prvAddNewTaskToReadyList+0xd0>)
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	3301      	adds	r3, #1
 8011a98:	4a1e      	ldr	r2, [pc, #120]	; (8011b14 <prvAddNewTaskToReadyList+0xd0>)
 8011a9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011a9c:	4b1d      	ldr	r3, [pc, #116]	; (8011b14 <prvAddNewTaskToReadyList+0xd0>)
 8011a9e:	681a      	ldr	r2, [r3, #0]
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011aa8:	4b1b      	ldr	r3, [pc, #108]	; (8011b18 <prvAddNewTaskToReadyList+0xd4>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	429a      	cmp	r2, r3
 8011aae:	d903      	bls.n	8011ab8 <prvAddNewTaskToReadyList+0x74>
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ab4:	4a18      	ldr	r2, [pc, #96]	; (8011b18 <prvAddNewTaskToReadyList+0xd4>)
 8011ab6:	6013      	str	r3, [r2, #0]
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011abc:	4613      	mov	r3, r2
 8011abe:	009b      	lsls	r3, r3, #2
 8011ac0:	4413      	add	r3, r2
 8011ac2:	009b      	lsls	r3, r3, #2
 8011ac4:	4a15      	ldr	r2, [pc, #84]	; (8011b1c <prvAddNewTaskToReadyList+0xd8>)
 8011ac6:	441a      	add	r2, r3
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	3304      	adds	r3, #4
 8011acc:	4619      	mov	r1, r3
 8011ace:	4610      	mov	r0, r2
 8011ad0:	f7fe fd61 	bl	8010596 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011ad4:	f7fe fa70 	bl	800ffb8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011ad8:	4b0d      	ldr	r3, [pc, #52]	; (8011b10 <prvAddNewTaskToReadyList+0xcc>)
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d00e      	beq.n	8011afe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011ae0:	4b0a      	ldr	r3, [pc, #40]	; (8011b0c <prvAddNewTaskToReadyList+0xc8>)
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aea:	429a      	cmp	r2, r3
 8011aec:	d207      	bcs.n	8011afe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011aee:	4b0c      	ldr	r3, [pc, #48]	; (8011b20 <prvAddNewTaskToReadyList+0xdc>)
 8011af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011af4:	601a      	str	r2, [r3, #0]
 8011af6:	f3bf 8f4f 	dsb	sy
 8011afa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011afe:	bf00      	nop
 8011b00:	3708      	adds	r7, #8
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}
 8011b06:	bf00      	nop
 8011b08:	20004704 	.word	0x20004704
 8011b0c:	20004230 	.word	0x20004230
 8011b10:	20004710 	.word	0x20004710
 8011b14:	20004720 	.word	0x20004720
 8011b18:	2000470c 	.word	0x2000470c
 8011b1c:	20004234 	.word	0x20004234
 8011b20:	e000ed04 	.word	0xe000ed04

08011b24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b084      	sub	sp, #16
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d016      	beq.n	8011b64 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011b36:	4b13      	ldr	r3, [pc, #76]	; (8011b84 <vTaskDelay+0x60>)
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d009      	beq.n	8011b52 <vTaskDelay+0x2e>
 8011b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b42:	f383 8811 	msr	BASEPRI, r3
 8011b46:	f3bf 8f6f 	isb	sy
 8011b4a:	f3bf 8f4f 	dsb	sy
 8011b4e:	60bb      	str	r3, [r7, #8]
 8011b50:	e7fe      	b.n	8011b50 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8011b52:	f000 f87f 	bl	8011c54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011b56:	2100      	movs	r1, #0
 8011b58:	6878      	ldr	r0, [r7, #4]
 8011b5a:	f001 f873 	bl	8012c44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011b5e:	f000 f8bf 	bl	8011ce0 <xTaskResumeAll>
 8011b62:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d107      	bne.n	8011b7a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8011b6a:	4b07      	ldr	r3, [pc, #28]	; (8011b88 <vTaskDelay+0x64>)
 8011b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b70:	601a      	str	r2, [r3, #0]
 8011b72:	f3bf 8f4f 	dsb	sy
 8011b76:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011b7a:	bf00      	nop
 8011b7c:	3710      	adds	r7, #16
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	bd80      	pop	{r7, pc}
 8011b82:	bf00      	nop
 8011b84:	2000472c 	.word	0x2000472c
 8011b88:	e000ed04 	.word	0xe000ed04

08011b8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b08a      	sub	sp, #40	; 0x28
 8011b90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011b92:	2300      	movs	r3, #0
 8011b94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011b96:	2300      	movs	r3, #0
 8011b98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011b9a:	463a      	mov	r2, r7
 8011b9c:	1d39      	adds	r1, r7, #4
 8011b9e:	f107 0308 	add.w	r3, r7, #8
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f7fe f882 	bl	800fcac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011ba8:	6839      	ldr	r1, [r7, #0]
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	68ba      	ldr	r2, [r7, #8]
 8011bae:	9202      	str	r2, [sp, #8]
 8011bb0:	9301      	str	r3, [sp, #4]
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	9300      	str	r3, [sp, #0]
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	460a      	mov	r2, r1
 8011bba:	4920      	ldr	r1, [pc, #128]	; (8011c3c <vTaskStartScheduler+0xb0>)
 8011bbc:	4820      	ldr	r0, [pc, #128]	; (8011c40 <vTaskStartScheduler+0xb4>)
 8011bbe:	f7ff fe13 	bl	80117e8 <xTaskCreateStatic>
 8011bc2:	4602      	mov	r2, r0
 8011bc4:	4b1f      	ldr	r3, [pc, #124]	; (8011c44 <vTaskStartScheduler+0xb8>)
 8011bc6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011bc8:	4b1e      	ldr	r3, [pc, #120]	; (8011c44 <vTaskStartScheduler+0xb8>)
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d002      	beq.n	8011bd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011bd0:	2301      	movs	r3, #1
 8011bd2:	617b      	str	r3, [r7, #20]
 8011bd4:	e001      	b.n	8011bda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011bda:	697b      	ldr	r3, [r7, #20]
 8011bdc:	2b01      	cmp	r3, #1
 8011bde:	d102      	bne.n	8011be6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011be0:	f001 f884 	bl	8012cec <xTimerCreateTimerTask>
 8011be4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011be6:	697b      	ldr	r3, [r7, #20]
 8011be8:	2b01      	cmp	r3, #1
 8011bea:	d115      	bne.n	8011c18 <vTaskStartScheduler+0x8c>
 8011bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bf0:	f383 8811 	msr	BASEPRI, r3
 8011bf4:	f3bf 8f6f 	isb	sy
 8011bf8:	f3bf 8f4f 	dsb	sy
 8011bfc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011bfe:	4b12      	ldr	r3, [pc, #72]	; (8011c48 <vTaskStartScheduler+0xbc>)
 8011c00:	f04f 32ff 	mov.w	r2, #4294967295
 8011c04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011c06:	4b11      	ldr	r3, [pc, #68]	; (8011c4c <vTaskStartScheduler+0xc0>)
 8011c08:	2201      	movs	r2, #1
 8011c0a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011c0c:	4b10      	ldr	r3, [pc, #64]	; (8011c50 <vTaskStartScheduler+0xc4>)
 8011c0e:	2200      	movs	r2, #0
 8011c10:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011c12:	f7fe f905 	bl	800fe20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011c16:	e00d      	b.n	8011c34 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011c18:	697b      	ldr	r3, [r7, #20]
 8011c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c1e:	d109      	bne.n	8011c34 <vTaskStartScheduler+0xa8>
 8011c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c24:	f383 8811 	msr	BASEPRI, r3
 8011c28:	f3bf 8f6f 	isb	sy
 8011c2c:	f3bf 8f4f 	dsb	sy
 8011c30:	60fb      	str	r3, [r7, #12]
 8011c32:	e7fe      	b.n	8011c32 <vTaskStartScheduler+0xa6>
}
 8011c34:	bf00      	nop
 8011c36:	3718      	adds	r7, #24
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	bd80      	pop	{r7, pc}
 8011c3c:	080168c0 	.word	0x080168c0
 8011c40:	080122c9 	.word	0x080122c9
 8011c44:	20004728 	.word	0x20004728
 8011c48:	20004724 	.word	0x20004724
 8011c4c:	20004710 	.word	0x20004710
 8011c50:	20004708 	.word	0x20004708

08011c54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011c54:	b480      	push	{r7}
 8011c56:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011c58:	4b04      	ldr	r3, [pc, #16]	; (8011c6c <vTaskSuspendAll+0x18>)
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	3301      	adds	r3, #1
 8011c5e:	4a03      	ldr	r2, [pc, #12]	; (8011c6c <vTaskSuspendAll+0x18>)
 8011c60:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8011c62:	bf00      	nop
 8011c64:	46bd      	mov	sp, r7
 8011c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c6a:	4770      	bx	lr
 8011c6c:	2000472c 	.word	0x2000472c

08011c70 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8011c70:	b480      	push	{r7}
 8011c72:	b083      	sub	sp, #12
 8011c74:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8011c76:	2300      	movs	r3, #0
 8011c78:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8011c7a:	4b14      	ldr	r3, [pc, #80]	; (8011ccc <prvGetExpectedIdleTime+0x5c>)
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d001      	beq.n	8011c86 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8011c82:	2301      	movs	r3, #1
 8011c84:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8011c86:	4b12      	ldr	r3, [pc, #72]	; (8011cd0 <prvGetExpectedIdleTime+0x60>)
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d002      	beq.n	8011c96 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8011c90:	2300      	movs	r3, #0
 8011c92:	607b      	str	r3, [r7, #4]
 8011c94:	e012      	b.n	8011cbc <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8011c96:	4b0f      	ldr	r3, [pc, #60]	; (8011cd4 <prvGetExpectedIdleTime+0x64>)
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	2b01      	cmp	r3, #1
 8011c9c:	d902      	bls.n	8011ca4 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	607b      	str	r3, [r7, #4]
 8011ca2:	e00b      	b.n	8011cbc <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d002      	beq.n	8011cb0 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8011caa:	2300      	movs	r3, #0
 8011cac:	607b      	str	r3, [r7, #4]
 8011cae:	e005      	b.n	8011cbc <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8011cb0:	4b09      	ldr	r3, [pc, #36]	; (8011cd8 <prvGetExpectedIdleTime+0x68>)
 8011cb2:	681a      	ldr	r2, [r3, #0]
 8011cb4:	4b09      	ldr	r3, [pc, #36]	; (8011cdc <prvGetExpectedIdleTime+0x6c>)
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	1ad3      	subs	r3, r2, r3
 8011cba:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8011cbc:	687b      	ldr	r3, [r7, #4]
	}
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	370c      	adds	r7, #12
 8011cc2:	46bd      	mov	sp, r7
 8011cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc8:	4770      	bx	lr
 8011cca:	bf00      	nop
 8011ccc:	2000470c 	.word	0x2000470c
 8011cd0:	20004230 	.word	0x20004230
 8011cd4:	20004234 	.word	0x20004234
 8011cd8:	20004724 	.word	0x20004724
 8011cdc:	20004708 	.word	0x20004708

08011ce0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b084      	sub	sp, #16
 8011ce4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011cea:	2300      	movs	r3, #0
 8011cec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011cee:	4b41      	ldr	r3, [pc, #260]	; (8011df4 <xTaskResumeAll+0x114>)
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d109      	bne.n	8011d0a <xTaskResumeAll+0x2a>
 8011cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cfa:	f383 8811 	msr	BASEPRI, r3
 8011cfe:	f3bf 8f6f 	isb	sy
 8011d02:	f3bf 8f4f 	dsb	sy
 8011d06:	603b      	str	r3, [r7, #0]
 8011d08:	e7fe      	b.n	8011d08 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011d0a:	f7fe f927 	bl	800ff5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011d0e:	4b39      	ldr	r3, [pc, #228]	; (8011df4 <xTaskResumeAll+0x114>)
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	3b01      	subs	r3, #1
 8011d14:	4a37      	ldr	r2, [pc, #220]	; (8011df4 <xTaskResumeAll+0x114>)
 8011d16:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011d18:	4b36      	ldr	r3, [pc, #216]	; (8011df4 <xTaskResumeAll+0x114>)
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d162      	bne.n	8011de6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011d20:	4b35      	ldr	r3, [pc, #212]	; (8011df8 <xTaskResumeAll+0x118>)
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d05e      	beq.n	8011de6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011d28:	e02f      	b.n	8011d8a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d2a:	4b34      	ldr	r3, [pc, #208]	; (8011dfc <xTaskResumeAll+0x11c>)
 8011d2c:	68db      	ldr	r3, [r3, #12]
 8011d2e:	68db      	ldr	r3, [r3, #12]
 8011d30:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	3318      	adds	r3, #24
 8011d36:	4618      	mov	r0, r3
 8011d38:	f7fe fc8a 	bl	8010650 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	3304      	adds	r3, #4
 8011d40:	4618      	mov	r0, r3
 8011d42:	f7fe fc85 	bl	8010650 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d4a:	4b2d      	ldr	r3, [pc, #180]	; (8011e00 <xTaskResumeAll+0x120>)
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d903      	bls.n	8011d5a <xTaskResumeAll+0x7a>
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d56:	4a2a      	ldr	r2, [pc, #168]	; (8011e00 <xTaskResumeAll+0x120>)
 8011d58:	6013      	str	r3, [r2, #0]
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d5e:	4613      	mov	r3, r2
 8011d60:	009b      	lsls	r3, r3, #2
 8011d62:	4413      	add	r3, r2
 8011d64:	009b      	lsls	r3, r3, #2
 8011d66:	4a27      	ldr	r2, [pc, #156]	; (8011e04 <xTaskResumeAll+0x124>)
 8011d68:	441a      	add	r2, r3
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	3304      	adds	r3, #4
 8011d6e:	4619      	mov	r1, r3
 8011d70:	4610      	mov	r0, r2
 8011d72:	f7fe fc10 	bl	8010596 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d7a:	4b23      	ldr	r3, [pc, #140]	; (8011e08 <xTaskResumeAll+0x128>)
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d80:	429a      	cmp	r2, r3
 8011d82:	d302      	bcc.n	8011d8a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8011d84:	4b21      	ldr	r3, [pc, #132]	; (8011e0c <xTaskResumeAll+0x12c>)
 8011d86:	2201      	movs	r2, #1
 8011d88:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011d8a:	4b1c      	ldr	r3, [pc, #112]	; (8011dfc <xTaskResumeAll+0x11c>)
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d1cb      	bne.n	8011d2a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d001      	beq.n	8011d9c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011d98:	f000 fb6e 	bl	8012478 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011d9c:	4b1c      	ldr	r3, [pc, #112]	; (8011e10 <xTaskResumeAll+0x130>)
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d010      	beq.n	8011dca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011da8:	f000 f846 	bl	8011e38 <xTaskIncrementTick>
 8011dac:	4603      	mov	r3, r0
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d002      	beq.n	8011db8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8011db2:	4b16      	ldr	r3, [pc, #88]	; (8011e0c <xTaskResumeAll+0x12c>)
 8011db4:	2201      	movs	r2, #1
 8011db6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	3b01      	subs	r3, #1
 8011dbc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d1f1      	bne.n	8011da8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8011dc4:	4b12      	ldr	r3, [pc, #72]	; (8011e10 <xTaskResumeAll+0x130>)
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011dca:	4b10      	ldr	r3, [pc, #64]	; (8011e0c <xTaskResumeAll+0x12c>)
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d009      	beq.n	8011de6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011dd2:	2301      	movs	r3, #1
 8011dd4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011dd6:	4b0f      	ldr	r3, [pc, #60]	; (8011e14 <xTaskResumeAll+0x134>)
 8011dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ddc:	601a      	str	r2, [r3, #0]
 8011dde:	f3bf 8f4f 	dsb	sy
 8011de2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011de6:	f7fe f8e7 	bl	800ffb8 <vPortExitCritical>

	return xAlreadyYielded;
 8011dea:	68bb      	ldr	r3, [r7, #8]
}
 8011dec:	4618      	mov	r0, r3
 8011dee:	3710      	adds	r7, #16
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bd80      	pop	{r7, pc}
 8011df4:	2000472c 	.word	0x2000472c
 8011df8:	20004704 	.word	0x20004704
 8011dfc:	200046c4 	.word	0x200046c4
 8011e00:	2000470c 	.word	0x2000470c
 8011e04:	20004234 	.word	0x20004234
 8011e08:	20004230 	.word	0x20004230
 8011e0c:	20004718 	.word	0x20004718
 8011e10:	20004714 	.word	0x20004714
 8011e14:	e000ed04 	.word	0xe000ed04

08011e18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011e18:	b480      	push	{r7}
 8011e1a:	b083      	sub	sp, #12
 8011e1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011e1e:	4b05      	ldr	r3, [pc, #20]	; (8011e34 <xTaskGetTickCount+0x1c>)
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011e24:	687b      	ldr	r3, [r7, #4]
}
 8011e26:	4618      	mov	r0, r3
 8011e28:	370c      	adds	r7, #12
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e30:	4770      	bx	lr
 8011e32:	bf00      	nop
 8011e34:	20004708 	.word	0x20004708

08011e38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b086      	sub	sp, #24
 8011e3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011e3e:	2300      	movs	r3, #0
 8011e40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011e42:	4b4e      	ldr	r3, [pc, #312]	; (8011f7c <xTaskIncrementTick+0x144>)
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	f040 8088 	bne.w	8011f5c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011e4c:	4b4c      	ldr	r3, [pc, #304]	; (8011f80 <xTaskIncrementTick+0x148>)
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	3301      	adds	r3, #1
 8011e52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011e54:	4a4a      	ldr	r2, [pc, #296]	; (8011f80 <xTaskIncrementTick+0x148>)
 8011e56:	693b      	ldr	r3, [r7, #16]
 8011e58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011e5a:	693b      	ldr	r3, [r7, #16]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d11f      	bne.n	8011ea0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8011e60:	4b48      	ldr	r3, [pc, #288]	; (8011f84 <xTaskIncrementTick+0x14c>)
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d009      	beq.n	8011e7e <xTaskIncrementTick+0x46>
 8011e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e6e:	f383 8811 	msr	BASEPRI, r3
 8011e72:	f3bf 8f6f 	isb	sy
 8011e76:	f3bf 8f4f 	dsb	sy
 8011e7a:	603b      	str	r3, [r7, #0]
 8011e7c:	e7fe      	b.n	8011e7c <xTaskIncrementTick+0x44>
 8011e7e:	4b41      	ldr	r3, [pc, #260]	; (8011f84 <xTaskIncrementTick+0x14c>)
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	60fb      	str	r3, [r7, #12]
 8011e84:	4b40      	ldr	r3, [pc, #256]	; (8011f88 <xTaskIncrementTick+0x150>)
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	4a3e      	ldr	r2, [pc, #248]	; (8011f84 <xTaskIncrementTick+0x14c>)
 8011e8a:	6013      	str	r3, [r2, #0]
 8011e8c:	4a3e      	ldr	r2, [pc, #248]	; (8011f88 <xTaskIncrementTick+0x150>)
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	6013      	str	r3, [r2, #0]
 8011e92:	4b3e      	ldr	r3, [pc, #248]	; (8011f8c <xTaskIncrementTick+0x154>)
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	3301      	adds	r3, #1
 8011e98:	4a3c      	ldr	r2, [pc, #240]	; (8011f8c <xTaskIncrementTick+0x154>)
 8011e9a:	6013      	str	r3, [r2, #0]
 8011e9c:	f000 faec 	bl	8012478 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011ea0:	4b3b      	ldr	r3, [pc, #236]	; (8011f90 <xTaskIncrementTick+0x158>)
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	693a      	ldr	r2, [r7, #16]
 8011ea6:	429a      	cmp	r2, r3
 8011ea8:	d349      	bcc.n	8011f3e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011eaa:	4b36      	ldr	r3, [pc, #216]	; (8011f84 <xTaskIncrementTick+0x14c>)
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d104      	bne.n	8011ebe <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011eb4:	4b36      	ldr	r3, [pc, #216]	; (8011f90 <xTaskIncrementTick+0x158>)
 8011eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8011eba:	601a      	str	r2, [r3, #0]
					break;
 8011ebc:	e03f      	b.n	8011f3e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ebe:	4b31      	ldr	r3, [pc, #196]	; (8011f84 <xTaskIncrementTick+0x14c>)
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	68db      	ldr	r3, [r3, #12]
 8011ec4:	68db      	ldr	r3, [r3, #12]
 8011ec6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011ec8:	68bb      	ldr	r3, [r7, #8]
 8011eca:	685b      	ldr	r3, [r3, #4]
 8011ecc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011ece:	693a      	ldr	r2, [r7, #16]
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	429a      	cmp	r2, r3
 8011ed4:	d203      	bcs.n	8011ede <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011ed6:	4a2e      	ldr	r2, [pc, #184]	; (8011f90 <xTaskIncrementTick+0x158>)
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011edc:	e02f      	b.n	8011f3e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011ede:	68bb      	ldr	r3, [r7, #8]
 8011ee0:	3304      	adds	r3, #4
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f7fe fbb4 	bl	8010650 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011ee8:	68bb      	ldr	r3, [r7, #8]
 8011eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d004      	beq.n	8011efa <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011ef0:	68bb      	ldr	r3, [r7, #8]
 8011ef2:	3318      	adds	r3, #24
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	f7fe fbab 	bl	8010650 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011efa:	68bb      	ldr	r3, [r7, #8]
 8011efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011efe:	4b25      	ldr	r3, [pc, #148]	; (8011f94 <xTaskIncrementTick+0x15c>)
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	429a      	cmp	r2, r3
 8011f04:	d903      	bls.n	8011f0e <xTaskIncrementTick+0xd6>
 8011f06:	68bb      	ldr	r3, [r7, #8]
 8011f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f0a:	4a22      	ldr	r2, [pc, #136]	; (8011f94 <xTaskIncrementTick+0x15c>)
 8011f0c:	6013      	str	r3, [r2, #0]
 8011f0e:	68bb      	ldr	r3, [r7, #8]
 8011f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f12:	4613      	mov	r3, r2
 8011f14:	009b      	lsls	r3, r3, #2
 8011f16:	4413      	add	r3, r2
 8011f18:	009b      	lsls	r3, r3, #2
 8011f1a:	4a1f      	ldr	r2, [pc, #124]	; (8011f98 <xTaskIncrementTick+0x160>)
 8011f1c:	441a      	add	r2, r3
 8011f1e:	68bb      	ldr	r3, [r7, #8]
 8011f20:	3304      	adds	r3, #4
 8011f22:	4619      	mov	r1, r3
 8011f24:	4610      	mov	r0, r2
 8011f26:	f7fe fb36 	bl	8010596 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011f2a:	68bb      	ldr	r3, [r7, #8]
 8011f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f2e:	4b1b      	ldr	r3, [pc, #108]	; (8011f9c <xTaskIncrementTick+0x164>)
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f34:	429a      	cmp	r2, r3
 8011f36:	d3b8      	bcc.n	8011eaa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8011f38:	2301      	movs	r3, #1
 8011f3a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011f3c:	e7b5      	b.n	8011eaa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011f3e:	4b17      	ldr	r3, [pc, #92]	; (8011f9c <xTaskIncrementTick+0x164>)
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f44:	4914      	ldr	r1, [pc, #80]	; (8011f98 <xTaskIncrementTick+0x160>)
 8011f46:	4613      	mov	r3, r2
 8011f48:	009b      	lsls	r3, r3, #2
 8011f4a:	4413      	add	r3, r2
 8011f4c:	009b      	lsls	r3, r3, #2
 8011f4e:	440b      	add	r3, r1
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	2b01      	cmp	r3, #1
 8011f54:	d907      	bls.n	8011f66 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8011f56:	2301      	movs	r3, #1
 8011f58:	617b      	str	r3, [r7, #20]
 8011f5a:	e004      	b.n	8011f66 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011f5c:	4b10      	ldr	r3, [pc, #64]	; (8011fa0 <xTaskIncrementTick+0x168>)
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	3301      	adds	r3, #1
 8011f62:	4a0f      	ldr	r2, [pc, #60]	; (8011fa0 <xTaskIncrementTick+0x168>)
 8011f64:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011f66:	4b0f      	ldr	r3, [pc, #60]	; (8011fa4 <xTaskIncrementTick+0x16c>)
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d001      	beq.n	8011f72 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8011f6e:	2301      	movs	r3, #1
 8011f70:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011f72:	697b      	ldr	r3, [r7, #20]
}
 8011f74:	4618      	mov	r0, r3
 8011f76:	3718      	adds	r7, #24
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bd80      	pop	{r7, pc}
 8011f7c:	2000472c 	.word	0x2000472c
 8011f80:	20004708 	.word	0x20004708
 8011f84:	200046bc 	.word	0x200046bc
 8011f88:	200046c0 	.word	0x200046c0
 8011f8c:	2000471c 	.word	0x2000471c
 8011f90:	20004724 	.word	0x20004724
 8011f94:	2000470c 	.word	0x2000470c
 8011f98:	20004234 	.word	0x20004234
 8011f9c:	20004230 	.word	0x20004230
 8011fa0:	20004714 	.word	0x20004714
 8011fa4:	20004718 	.word	0x20004718

08011fa8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011fa8:	b480      	push	{r7}
 8011faa:	b085      	sub	sp, #20
 8011fac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011fae:	4b27      	ldr	r3, [pc, #156]	; (801204c <vTaskSwitchContext+0xa4>)
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d003      	beq.n	8011fbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011fb6:	4b26      	ldr	r3, [pc, #152]	; (8012050 <vTaskSwitchContext+0xa8>)
 8011fb8:	2201      	movs	r2, #1
 8011fba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011fbc:	e040      	b.n	8012040 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8011fbe:	4b24      	ldr	r3, [pc, #144]	; (8012050 <vTaskSwitchContext+0xa8>)
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011fc4:	4b23      	ldr	r3, [pc, #140]	; (8012054 <vTaskSwitchContext+0xac>)
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	60fb      	str	r3, [r7, #12]
 8011fca:	e00f      	b.n	8011fec <vTaskSwitchContext+0x44>
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d109      	bne.n	8011fe6 <vTaskSwitchContext+0x3e>
 8011fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fd6:	f383 8811 	msr	BASEPRI, r3
 8011fda:	f3bf 8f6f 	isb	sy
 8011fde:	f3bf 8f4f 	dsb	sy
 8011fe2:	607b      	str	r3, [r7, #4]
 8011fe4:	e7fe      	b.n	8011fe4 <vTaskSwitchContext+0x3c>
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	3b01      	subs	r3, #1
 8011fea:	60fb      	str	r3, [r7, #12]
 8011fec:	491a      	ldr	r1, [pc, #104]	; (8012058 <vTaskSwitchContext+0xb0>)
 8011fee:	68fa      	ldr	r2, [r7, #12]
 8011ff0:	4613      	mov	r3, r2
 8011ff2:	009b      	lsls	r3, r3, #2
 8011ff4:	4413      	add	r3, r2
 8011ff6:	009b      	lsls	r3, r3, #2
 8011ff8:	440b      	add	r3, r1
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d0e5      	beq.n	8011fcc <vTaskSwitchContext+0x24>
 8012000:	68fa      	ldr	r2, [r7, #12]
 8012002:	4613      	mov	r3, r2
 8012004:	009b      	lsls	r3, r3, #2
 8012006:	4413      	add	r3, r2
 8012008:	009b      	lsls	r3, r3, #2
 801200a:	4a13      	ldr	r2, [pc, #76]	; (8012058 <vTaskSwitchContext+0xb0>)
 801200c:	4413      	add	r3, r2
 801200e:	60bb      	str	r3, [r7, #8]
 8012010:	68bb      	ldr	r3, [r7, #8]
 8012012:	685b      	ldr	r3, [r3, #4]
 8012014:	685a      	ldr	r2, [r3, #4]
 8012016:	68bb      	ldr	r3, [r7, #8]
 8012018:	605a      	str	r2, [r3, #4]
 801201a:	68bb      	ldr	r3, [r7, #8]
 801201c:	685a      	ldr	r2, [r3, #4]
 801201e:	68bb      	ldr	r3, [r7, #8]
 8012020:	3308      	adds	r3, #8
 8012022:	429a      	cmp	r2, r3
 8012024:	d104      	bne.n	8012030 <vTaskSwitchContext+0x88>
 8012026:	68bb      	ldr	r3, [r7, #8]
 8012028:	685b      	ldr	r3, [r3, #4]
 801202a:	685a      	ldr	r2, [r3, #4]
 801202c:	68bb      	ldr	r3, [r7, #8]
 801202e:	605a      	str	r2, [r3, #4]
 8012030:	68bb      	ldr	r3, [r7, #8]
 8012032:	685b      	ldr	r3, [r3, #4]
 8012034:	68db      	ldr	r3, [r3, #12]
 8012036:	4a09      	ldr	r2, [pc, #36]	; (801205c <vTaskSwitchContext+0xb4>)
 8012038:	6013      	str	r3, [r2, #0]
 801203a:	4a06      	ldr	r2, [pc, #24]	; (8012054 <vTaskSwitchContext+0xac>)
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	6013      	str	r3, [r2, #0]
}
 8012040:	bf00      	nop
 8012042:	3714      	adds	r7, #20
 8012044:	46bd      	mov	sp, r7
 8012046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204a:	4770      	bx	lr
 801204c:	2000472c 	.word	0x2000472c
 8012050:	20004718 	.word	0x20004718
 8012054:	2000470c 	.word	0x2000470c
 8012058:	20004234 	.word	0x20004234
 801205c:	20004230 	.word	0x20004230

08012060 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b084      	sub	sp, #16
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
 8012068:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d109      	bne.n	8012084 <vTaskPlaceOnEventList+0x24>
 8012070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012074:	f383 8811 	msr	BASEPRI, r3
 8012078:	f3bf 8f6f 	isb	sy
 801207c:	f3bf 8f4f 	dsb	sy
 8012080:	60fb      	str	r3, [r7, #12]
 8012082:	e7fe      	b.n	8012082 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012084:	4b07      	ldr	r3, [pc, #28]	; (80120a4 <vTaskPlaceOnEventList+0x44>)
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	3318      	adds	r3, #24
 801208a:	4619      	mov	r1, r3
 801208c:	6878      	ldr	r0, [r7, #4]
 801208e:	f7fe faa6 	bl	80105de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012092:	2101      	movs	r1, #1
 8012094:	6838      	ldr	r0, [r7, #0]
 8012096:	f000 fdd5 	bl	8012c44 <prvAddCurrentTaskToDelayedList>
}
 801209a:	bf00      	nop
 801209c:	3710      	adds	r7, #16
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}
 80120a2:	bf00      	nop
 80120a4:	20004230 	.word	0x20004230

080120a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b086      	sub	sp, #24
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	60f8      	str	r0, [r7, #12]
 80120b0:	60b9      	str	r1, [r7, #8]
 80120b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d109      	bne.n	80120ce <vTaskPlaceOnEventListRestricted+0x26>
 80120ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120be:	f383 8811 	msr	BASEPRI, r3
 80120c2:	f3bf 8f6f 	isb	sy
 80120c6:	f3bf 8f4f 	dsb	sy
 80120ca:	617b      	str	r3, [r7, #20]
 80120cc:	e7fe      	b.n	80120cc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80120ce:	4b0a      	ldr	r3, [pc, #40]	; (80120f8 <vTaskPlaceOnEventListRestricted+0x50>)
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	3318      	adds	r3, #24
 80120d4:	4619      	mov	r1, r3
 80120d6:	68f8      	ldr	r0, [r7, #12]
 80120d8:	f7fe fa5d 	bl	8010596 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d002      	beq.n	80120e8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80120e2:	f04f 33ff 	mov.w	r3, #4294967295
 80120e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80120e8:	6879      	ldr	r1, [r7, #4]
 80120ea:	68b8      	ldr	r0, [r7, #8]
 80120ec:	f000 fdaa 	bl	8012c44 <prvAddCurrentTaskToDelayedList>
	}
 80120f0:	bf00      	nop
 80120f2:	3718      	adds	r7, #24
 80120f4:	46bd      	mov	sp, r7
 80120f6:	bd80      	pop	{r7, pc}
 80120f8:	20004230 	.word	0x20004230

080120fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b086      	sub	sp, #24
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	68db      	ldr	r3, [r3, #12]
 8012108:	68db      	ldr	r3, [r3, #12]
 801210a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801210c:	693b      	ldr	r3, [r7, #16]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d109      	bne.n	8012126 <xTaskRemoveFromEventList+0x2a>
 8012112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012116:	f383 8811 	msr	BASEPRI, r3
 801211a:	f3bf 8f6f 	isb	sy
 801211e:	f3bf 8f4f 	dsb	sy
 8012122:	60fb      	str	r3, [r7, #12]
 8012124:	e7fe      	b.n	8012124 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012126:	693b      	ldr	r3, [r7, #16]
 8012128:	3318      	adds	r3, #24
 801212a:	4618      	mov	r0, r3
 801212c:	f7fe fa90 	bl	8010650 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012130:	4b1e      	ldr	r3, [pc, #120]	; (80121ac <xTaskRemoveFromEventList+0xb0>)
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d11f      	bne.n	8012178 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012138:	693b      	ldr	r3, [r7, #16]
 801213a:	3304      	adds	r3, #4
 801213c:	4618      	mov	r0, r3
 801213e:	f7fe fa87 	bl	8010650 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012142:	693b      	ldr	r3, [r7, #16]
 8012144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012146:	4b1a      	ldr	r3, [pc, #104]	; (80121b0 <xTaskRemoveFromEventList+0xb4>)
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	429a      	cmp	r2, r3
 801214c:	d903      	bls.n	8012156 <xTaskRemoveFromEventList+0x5a>
 801214e:	693b      	ldr	r3, [r7, #16]
 8012150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012152:	4a17      	ldr	r2, [pc, #92]	; (80121b0 <xTaskRemoveFromEventList+0xb4>)
 8012154:	6013      	str	r3, [r2, #0]
 8012156:	693b      	ldr	r3, [r7, #16]
 8012158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801215a:	4613      	mov	r3, r2
 801215c:	009b      	lsls	r3, r3, #2
 801215e:	4413      	add	r3, r2
 8012160:	009b      	lsls	r3, r3, #2
 8012162:	4a14      	ldr	r2, [pc, #80]	; (80121b4 <xTaskRemoveFromEventList+0xb8>)
 8012164:	441a      	add	r2, r3
 8012166:	693b      	ldr	r3, [r7, #16]
 8012168:	3304      	adds	r3, #4
 801216a:	4619      	mov	r1, r3
 801216c:	4610      	mov	r0, r2
 801216e:	f7fe fa12 	bl	8010596 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8012172:	f000 f981 	bl	8012478 <prvResetNextTaskUnblockTime>
 8012176:	e005      	b.n	8012184 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012178:	693b      	ldr	r3, [r7, #16]
 801217a:	3318      	adds	r3, #24
 801217c:	4619      	mov	r1, r3
 801217e:	480e      	ldr	r0, [pc, #56]	; (80121b8 <xTaskRemoveFromEventList+0xbc>)
 8012180:	f7fe fa09 	bl	8010596 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012184:	693b      	ldr	r3, [r7, #16]
 8012186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012188:	4b0c      	ldr	r3, [pc, #48]	; (80121bc <xTaskRemoveFromEventList+0xc0>)
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801218e:	429a      	cmp	r2, r3
 8012190:	d905      	bls.n	801219e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012192:	2301      	movs	r3, #1
 8012194:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012196:	4b0a      	ldr	r3, [pc, #40]	; (80121c0 <xTaskRemoveFromEventList+0xc4>)
 8012198:	2201      	movs	r2, #1
 801219a:	601a      	str	r2, [r3, #0]
 801219c:	e001      	b.n	80121a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801219e:	2300      	movs	r3, #0
 80121a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80121a2:	697b      	ldr	r3, [r7, #20]
}
 80121a4:	4618      	mov	r0, r3
 80121a6:	3718      	adds	r7, #24
 80121a8:	46bd      	mov	sp, r7
 80121aa:	bd80      	pop	{r7, pc}
 80121ac:	2000472c 	.word	0x2000472c
 80121b0:	2000470c 	.word	0x2000470c
 80121b4:	20004234 	.word	0x20004234
 80121b8:	200046c4 	.word	0x200046c4
 80121bc:	20004230 	.word	0x20004230
 80121c0:	20004718 	.word	0x20004718

080121c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80121c4:	b480      	push	{r7}
 80121c6:	b083      	sub	sp, #12
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80121cc:	4b06      	ldr	r3, [pc, #24]	; (80121e8 <vTaskInternalSetTimeOutState+0x24>)
 80121ce:	681a      	ldr	r2, [r3, #0]
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80121d4:	4b05      	ldr	r3, [pc, #20]	; (80121ec <vTaskInternalSetTimeOutState+0x28>)
 80121d6:	681a      	ldr	r2, [r3, #0]
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	605a      	str	r2, [r3, #4]
}
 80121dc:	bf00      	nop
 80121de:	370c      	adds	r7, #12
 80121e0:	46bd      	mov	sp, r7
 80121e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e6:	4770      	bx	lr
 80121e8:	2000471c 	.word	0x2000471c
 80121ec:	20004708 	.word	0x20004708

080121f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b088      	sub	sp, #32
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
 80121f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d109      	bne.n	8012214 <xTaskCheckForTimeOut+0x24>
 8012200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012204:	f383 8811 	msr	BASEPRI, r3
 8012208:	f3bf 8f6f 	isb	sy
 801220c:	f3bf 8f4f 	dsb	sy
 8012210:	613b      	str	r3, [r7, #16]
 8012212:	e7fe      	b.n	8012212 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8012214:	683b      	ldr	r3, [r7, #0]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d109      	bne.n	801222e <xTaskCheckForTimeOut+0x3e>
 801221a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801221e:	f383 8811 	msr	BASEPRI, r3
 8012222:	f3bf 8f6f 	isb	sy
 8012226:	f3bf 8f4f 	dsb	sy
 801222a:	60fb      	str	r3, [r7, #12]
 801222c:	e7fe      	b.n	801222c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 801222e:	f7fd fe95 	bl	800ff5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012232:	4b1d      	ldr	r3, [pc, #116]	; (80122a8 <xTaskCheckForTimeOut+0xb8>)
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	685b      	ldr	r3, [r3, #4]
 801223c:	69ba      	ldr	r2, [r7, #24]
 801223e:	1ad3      	subs	r3, r2, r3
 8012240:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	f1b3 3fff 	cmp.w	r3, #4294967295
 801224a:	d102      	bne.n	8012252 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801224c:	2300      	movs	r3, #0
 801224e:	61fb      	str	r3, [r7, #28]
 8012250:	e023      	b.n	801229a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	681a      	ldr	r2, [r3, #0]
 8012256:	4b15      	ldr	r3, [pc, #84]	; (80122ac <xTaskCheckForTimeOut+0xbc>)
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	429a      	cmp	r2, r3
 801225c:	d007      	beq.n	801226e <xTaskCheckForTimeOut+0x7e>
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	685b      	ldr	r3, [r3, #4]
 8012262:	69ba      	ldr	r2, [r7, #24]
 8012264:	429a      	cmp	r2, r3
 8012266:	d302      	bcc.n	801226e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012268:	2301      	movs	r3, #1
 801226a:	61fb      	str	r3, [r7, #28]
 801226c:	e015      	b.n	801229a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801226e:	683b      	ldr	r3, [r7, #0]
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	697a      	ldr	r2, [r7, #20]
 8012274:	429a      	cmp	r2, r3
 8012276:	d20b      	bcs.n	8012290 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012278:	683b      	ldr	r3, [r7, #0]
 801227a:	681a      	ldr	r2, [r3, #0]
 801227c:	697b      	ldr	r3, [r7, #20]
 801227e:	1ad2      	subs	r2, r2, r3
 8012280:	683b      	ldr	r3, [r7, #0]
 8012282:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012284:	6878      	ldr	r0, [r7, #4]
 8012286:	f7ff ff9d 	bl	80121c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801228a:	2300      	movs	r3, #0
 801228c:	61fb      	str	r3, [r7, #28]
 801228e:	e004      	b.n	801229a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	2200      	movs	r2, #0
 8012294:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012296:	2301      	movs	r3, #1
 8012298:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801229a:	f7fd fe8d 	bl	800ffb8 <vPortExitCritical>

	return xReturn;
 801229e:	69fb      	ldr	r3, [r7, #28]
}
 80122a0:	4618      	mov	r0, r3
 80122a2:	3720      	adds	r7, #32
 80122a4:	46bd      	mov	sp, r7
 80122a6:	bd80      	pop	{r7, pc}
 80122a8:	20004708 	.word	0x20004708
 80122ac:	2000471c 	.word	0x2000471c

080122b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80122b0:	b480      	push	{r7}
 80122b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80122b4:	4b03      	ldr	r3, [pc, #12]	; (80122c4 <vTaskMissedYield+0x14>)
 80122b6:	2201      	movs	r2, #1
 80122b8:	601a      	str	r2, [r3, #0]
}
 80122ba:	bf00      	nop
 80122bc:	46bd      	mov	sp, r7
 80122be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c2:	4770      	bx	lr
 80122c4:	20004718 	.word	0x20004718

080122c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b084      	sub	sp, #16
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80122d0:	f000 f878 	bl	80123c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80122d4:	4b17      	ldr	r3, [pc, #92]	; (8012334 <prvIdleTask+0x6c>)
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	2b01      	cmp	r3, #1
 80122da:	d907      	bls.n	80122ec <prvIdleTask+0x24>
			{
				taskYIELD();
 80122dc:	4b16      	ldr	r3, [pc, #88]	; (8012338 <prvIdleTask+0x70>)
 80122de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122e2:	601a      	str	r2, [r3, #0]
 80122e4:	f3bf 8f4f 	dsb	sy
 80122e8:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 80122ec:	f7ff fcc0 	bl	8011c70 <prvGetExpectedIdleTime>
 80122f0:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	2b01      	cmp	r3, #1
 80122f6:	d9eb      	bls.n	80122d0 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 80122f8:	f7ff fcac 	bl	8011c54 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 80122fc:	4b0f      	ldr	r3, [pc, #60]	; (801233c <prvIdleTask+0x74>)
 80122fe:	681a      	ldr	r2, [r3, #0]
 8012300:	4b0f      	ldr	r3, [pc, #60]	; (8012340 <prvIdleTask+0x78>)
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	429a      	cmp	r2, r3
 8012306:	d209      	bcs.n	801231c <prvIdleTask+0x54>
 8012308:	f04f 0350 	mov.w	r3, #80	; 0x50
 801230c:	f383 8811 	msr	BASEPRI, r3
 8012310:	f3bf 8f6f 	isb	sy
 8012314:	f3bf 8f4f 	dsb	sy
 8012318:	60bb      	str	r3, [r7, #8]
 801231a:	e7fe      	b.n	801231a <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 801231c:	f7ff fca8 	bl	8011c70 <prvGetExpectedIdleTime>
 8012320:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	2b01      	cmp	r3, #1
 8012326:	d902      	bls.n	801232e <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8012328:	68f8      	ldr	r0, [r7, #12]
 801232a:	f7f0 fd51 	bl	8002dd0 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 801232e:	f7ff fcd7 	bl	8011ce0 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8012332:	e7cd      	b.n	80122d0 <prvIdleTask+0x8>
 8012334:	20004234 	.word	0x20004234
 8012338:	e000ed04 	.word	0xe000ed04
 801233c:	20004724 	.word	0x20004724
 8012340:	20004708 	.word	0x20004708

08012344 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b082      	sub	sp, #8
 8012348:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801234a:	2300      	movs	r3, #0
 801234c:	607b      	str	r3, [r7, #4]
 801234e:	e00c      	b.n	801236a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012350:	687a      	ldr	r2, [r7, #4]
 8012352:	4613      	mov	r3, r2
 8012354:	009b      	lsls	r3, r3, #2
 8012356:	4413      	add	r3, r2
 8012358:	009b      	lsls	r3, r3, #2
 801235a:	4a12      	ldr	r2, [pc, #72]	; (80123a4 <prvInitialiseTaskLists+0x60>)
 801235c:	4413      	add	r3, r2
 801235e:	4618      	mov	r0, r3
 8012360:	f7fe f8ec 	bl	801053c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	3301      	adds	r3, #1
 8012368:	607b      	str	r3, [r7, #4]
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	2b37      	cmp	r3, #55	; 0x37
 801236e:	d9ef      	bls.n	8012350 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012370:	480d      	ldr	r0, [pc, #52]	; (80123a8 <prvInitialiseTaskLists+0x64>)
 8012372:	f7fe f8e3 	bl	801053c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012376:	480d      	ldr	r0, [pc, #52]	; (80123ac <prvInitialiseTaskLists+0x68>)
 8012378:	f7fe f8e0 	bl	801053c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801237c:	480c      	ldr	r0, [pc, #48]	; (80123b0 <prvInitialiseTaskLists+0x6c>)
 801237e:	f7fe f8dd 	bl	801053c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012382:	480c      	ldr	r0, [pc, #48]	; (80123b4 <prvInitialiseTaskLists+0x70>)
 8012384:	f7fe f8da 	bl	801053c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012388:	480b      	ldr	r0, [pc, #44]	; (80123b8 <prvInitialiseTaskLists+0x74>)
 801238a:	f7fe f8d7 	bl	801053c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801238e:	4b0b      	ldr	r3, [pc, #44]	; (80123bc <prvInitialiseTaskLists+0x78>)
 8012390:	4a05      	ldr	r2, [pc, #20]	; (80123a8 <prvInitialiseTaskLists+0x64>)
 8012392:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012394:	4b0a      	ldr	r3, [pc, #40]	; (80123c0 <prvInitialiseTaskLists+0x7c>)
 8012396:	4a05      	ldr	r2, [pc, #20]	; (80123ac <prvInitialiseTaskLists+0x68>)
 8012398:	601a      	str	r2, [r3, #0]
}
 801239a:	bf00      	nop
 801239c:	3708      	adds	r7, #8
 801239e:	46bd      	mov	sp, r7
 80123a0:	bd80      	pop	{r7, pc}
 80123a2:	bf00      	nop
 80123a4:	20004234 	.word	0x20004234
 80123a8:	20004694 	.word	0x20004694
 80123ac:	200046a8 	.word	0x200046a8
 80123b0:	200046c4 	.word	0x200046c4
 80123b4:	200046d8 	.word	0x200046d8
 80123b8:	200046f0 	.word	0x200046f0
 80123bc:	200046bc 	.word	0x200046bc
 80123c0:	200046c0 	.word	0x200046c0

080123c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80123c4:	b580      	push	{r7, lr}
 80123c6:	b082      	sub	sp, #8
 80123c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80123ca:	e019      	b.n	8012400 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80123cc:	f7fd fdc6 	bl	800ff5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80123d0:	4b0f      	ldr	r3, [pc, #60]	; (8012410 <prvCheckTasksWaitingTermination+0x4c>)
 80123d2:	68db      	ldr	r3, [r3, #12]
 80123d4:	68db      	ldr	r3, [r3, #12]
 80123d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	3304      	adds	r3, #4
 80123dc:	4618      	mov	r0, r3
 80123de:	f7fe f937 	bl	8010650 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80123e2:	4b0c      	ldr	r3, [pc, #48]	; (8012414 <prvCheckTasksWaitingTermination+0x50>)
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	3b01      	subs	r3, #1
 80123e8:	4a0a      	ldr	r2, [pc, #40]	; (8012414 <prvCheckTasksWaitingTermination+0x50>)
 80123ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80123ec:	4b0a      	ldr	r3, [pc, #40]	; (8012418 <prvCheckTasksWaitingTermination+0x54>)
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	3b01      	subs	r3, #1
 80123f2:	4a09      	ldr	r2, [pc, #36]	; (8012418 <prvCheckTasksWaitingTermination+0x54>)
 80123f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80123f6:	f7fd fddf 	bl	800ffb8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	f000 f80e 	bl	801241c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012400:	4b05      	ldr	r3, [pc, #20]	; (8012418 <prvCheckTasksWaitingTermination+0x54>)
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d1e1      	bne.n	80123cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012408:	bf00      	nop
 801240a:	3708      	adds	r7, #8
 801240c:	46bd      	mov	sp, r7
 801240e:	bd80      	pop	{r7, pc}
 8012410:	200046d8 	.word	0x200046d8
 8012414:	20004704 	.word	0x20004704
 8012418:	200046ec 	.word	0x200046ec

0801241c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801241c:	b580      	push	{r7, lr}
 801241e:	b084      	sub	sp, #16
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801242a:	2b00      	cmp	r3, #0
 801242c:	d108      	bne.n	8012440 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012432:	4618      	mov	r0, r3
 8012434:	f7fd ff6e 	bl	8010314 <vPortFree>
				vPortFree( pxTCB );
 8012438:	6878      	ldr	r0, [r7, #4]
 801243a:	f7fd ff6b 	bl	8010314 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801243e:	e017      	b.n	8012470 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012446:	2b01      	cmp	r3, #1
 8012448:	d103      	bne.n	8012452 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801244a:	6878      	ldr	r0, [r7, #4]
 801244c:	f7fd ff62 	bl	8010314 <vPortFree>
	}
 8012450:	e00e      	b.n	8012470 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012458:	2b02      	cmp	r3, #2
 801245a:	d009      	beq.n	8012470 <prvDeleteTCB+0x54>
 801245c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012460:	f383 8811 	msr	BASEPRI, r3
 8012464:	f3bf 8f6f 	isb	sy
 8012468:	f3bf 8f4f 	dsb	sy
 801246c:	60fb      	str	r3, [r7, #12]
 801246e:	e7fe      	b.n	801246e <prvDeleteTCB+0x52>
	}
 8012470:	bf00      	nop
 8012472:	3710      	adds	r7, #16
 8012474:	46bd      	mov	sp, r7
 8012476:	bd80      	pop	{r7, pc}

08012478 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012478:	b480      	push	{r7}
 801247a:	b083      	sub	sp, #12
 801247c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801247e:	4b0c      	ldr	r3, [pc, #48]	; (80124b0 <prvResetNextTaskUnblockTime+0x38>)
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d104      	bne.n	8012492 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012488:	4b0a      	ldr	r3, [pc, #40]	; (80124b4 <prvResetNextTaskUnblockTime+0x3c>)
 801248a:	f04f 32ff 	mov.w	r2, #4294967295
 801248e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012490:	e008      	b.n	80124a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012492:	4b07      	ldr	r3, [pc, #28]	; (80124b0 <prvResetNextTaskUnblockTime+0x38>)
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	68db      	ldr	r3, [r3, #12]
 8012498:	68db      	ldr	r3, [r3, #12]
 801249a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	685b      	ldr	r3, [r3, #4]
 80124a0:	4a04      	ldr	r2, [pc, #16]	; (80124b4 <prvResetNextTaskUnblockTime+0x3c>)
 80124a2:	6013      	str	r3, [r2, #0]
}
 80124a4:	bf00      	nop
 80124a6:	370c      	adds	r7, #12
 80124a8:	46bd      	mov	sp, r7
 80124aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ae:	4770      	bx	lr
 80124b0:	200046bc 	.word	0x200046bc
 80124b4:	20004724 	.word	0x20004724

080124b8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80124b8:	b480      	push	{r7}
 80124ba:	b083      	sub	sp, #12
 80124bc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80124be:	4b05      	ldr	r3, [pc, #20]	; (80124d4 <xTaskGetCurrentTaskHandle+0x1c>)
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80124c4:	687b      	ldr	r3, [r7, #4]
	}
 80124c6:	4618      	mov	r0, r3
 80124c8:	370c      	adds	r7, #12
 80124ca:	46bd      	mov	sp, r7
 80124cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d0:	4770      	bx	lr
 80124d2:	bf00      	nop
 80124d4:	20004230 	.word	0x20004230

080124d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80124d8:	b480      	push	{r7}
 80124da:	b083      	sub	sp, #12
 80124dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80124de:	4b0b      	ldr	r3, [pc, #44]	; (801250c <xTaskGetSchedulerState+0x34>)
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d102      	bne.n	80124ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80124e6:	2301      	movs	r3, #1
 80124e8:	607b      	str	r3, [r7, #4]
 80124ea:	e008      	b.n	80124fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80124ec:	4b08      	ldr	r3, [pc, #32]	; (8012510 <xTaskGetSchedulerState+0x38>)
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d102      	bne.n	80124fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80124f4:	2302      	movs	r3, #2
 80124f6:	607b      	str	r3, [r7, #4]
 80124f8:	e001      	b.n	80124fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80124fa:	2300      	movs	r3, #0
 80124fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80124fe:	687b      	ldr	r3, [r7, #4]
	}
 8012500:	4618      	mov	r0, r3
 8012502:	370c      	adds	r7, #12
 8012504:	46bd      	mov	sp, r7
 8012506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250a:	4770      	bx	lr
 801250c:	20004710 	.word	0x20004710
 8012510:	2000472c 	.word	0x2000472c

08012514 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012514:	b580      	push	{r7, lr}
 8012516:	b084      	sub	sp, #16
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012520:	2300      	movs	r3, #0
 8012522:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d051      	beq.n	80125ce <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801252a:	68bb      	ldr	r3, [r7, #8]
 801252c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801252e:	4b2a      	ldr	r3, [pc, #168]	; (80125d8 <xTaskPriorityInherit+0xc4>)
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012534:	429a      	cmp	r2, r3
 8012536:	d241      	bcs.n	80125bc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012538:	68bb      	ldr	r3, [r7, #8]
 801253a:	699b      	ldr	r3, [r3, #24]
 801253c:	2b00      	cmp	r3, #0
 801253e:	db06      	blt.n	801254e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012540:	4b25      	ldr	r3, [pc, #148]	; (80125d8 <xTaskPriorityInherit+0xc4>)
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012546:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801254a:	68bb      	ldr	r3, [r7, #8]
 801254c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801254e:	68bb      	ldr	r3, [r7, #8]
 8012550:	6959      	ldr	r1, [r3, #20]
 8012552:	68bb      	ldr	r3, [r7, #8]
 8012554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012556:	4613      	mov	r3, r2
 8012558:	009b      	lsls	r3, r3, #2
 801255a:	4413      	add	r3, r2
 801255c:	009b      	lsls	r3, r3, #2
 801255e:	4a1f      	ldr	r2, [pc, #124]	; (80125dc <xTaskPriorityInherit+0xc8>)
 8012560:	4413      	add	r3, r2
 8012562:	4299      	cmp	r1, r3
 8012564:	d122      	bne.n	80125ac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012566:	68bb      	ldr	r3, [r7, #8]
 8012568:	3304      	adds	r3, #4
 801256a:	4618      	mov	r0, r3
 801256c:	f7fe f870 	bl	8010650 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012570:	4b19      	ldr	r3, [pc, #100]	; (80125d8 <xTaskPriorityInherit+0xc4>)
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012576:	68bb      	ldr	r3, [r7, #8]
 8012578:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801257a:	68bb      	ldr	r3, [r7, #8]
 801257c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801257e:	4b18      	ldr	r3, [pc, #96]	; (80125e0 <xTaskPriorityInherit+0xcc>)
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	429a      	cmp	r2, r3
 8012584:	d903      	bls.n	801258e <xTaskPriorityInherit+0x7a>
 8012586:	68bb      	ldr	r3, [r7, #8]
 8012588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801258a:	4a15      	ldr	r2, [pc, #84]	; (80125e0 <xTaskPriorityInherit+0xcc>)
 801258c:	6013      	str	r3, [r2, #0]
 801258e:	68bb      	ldr	r3, [r7, #8]
 8012590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012592:	4613      	mov	r3, r2
 8012594:	009b      	lsls	r3, r3, #2
 8012596:	4413      	add	r3, r2
 8012598:	009b      	lsls	r3, r3, #2
 801259a:	4a10      	ldr	r2, [pc, #64]	; (80125dc <xTaskPriorityInherit+0xc8>)
 801259c:	441a      	add	r2, r3
 801259e:	68bb      	ldr	r3, [r7, #8]
 80125a0:	3304      	adds	r3, #4
 80125a2:	4619      	mov	r1, r3
 80125a4:	4610      	mov	r0, r2
 80125a6:	f7fd fff6 	bl	8010596 <vListInsertEnd>
 80125aa:	e004      	b.n	80125b6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80125ac:	4b0a      	ldr	r3, [pc, #40]	; (80125d8 <xTaskPriorityInherit+0xc4>)
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125b2:	68bb      	ldr	r3, [r7, #8]
 80125b4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80125b6:	2301      	movs	r3, #1
 80125b8:	60fb      	str	r3, [r7, #12]
 80125ba:	e008      	b.n	80125ce <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80125bc:	68bb      	ldr	r3, [r7, #8]
 80125be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80125c0:	4b05      	ldr	r3, [pc, #20]	; (80125d8 <xTaskPriorityInherit+0xc4>)
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125c6:	429a      	cmp	r2, r3
 80125c8:	d201      	bcs.n	80125ce <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80125ca:	2301      	movs	r3, #1
 80125cc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80125ce:	68fb      	ldr	r3, [r7, #12]
	}
 80125d0:	4618      	mov	r0, r3
 80125d2:	3710      	adds	r7, #16
 80125d4:	46bd      	mov	sp, r7
 80125d6:	bd80      	pop	{r7, pc}
 80125d8:	20004230 	.word	0x20004230
 80125dc:	20004234 	.word	0x20004234
 80125e0:	2000470c 	.word	0x2000470c

080125e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b086      	sub	sp, #24
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80125f0:	2300      	movs	r3, #0
 80125f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d054      	beq.n	80126a4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80125fa:	4b2d      	ldr	r3, [pc, #180]	; (80126b0 <xTaskPriorityDisinherit+0xcc>)
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	693a      	ldr	r2, [r7, #16]
 8012600:	429a      	cmp	r2, r3
 8012602:	d009      	beq.n	8012618 <xTaskPriorityDisinherit+0x34>
 8012604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012608:	f383 8811 	msr	BASEPRI, r3
 801260c:	f3bf 8f6f 	isb	sy
 8012610:	f3bf 8f4f 	dsb	sy
 8012614:	60fb      	str	r3, [r7, #12]
 8012616:	e7fe      	b.n	8012616 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8012618:	693b      	ldr	r3, [r7, #16]
 801261a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801261c:	2b00      	cmp	r3, #0
 801261e:	d109      	bne.n	8012634 <xTaskPriorityDisinherit+0x50>
 8012620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012624:	f383 8811 	msr	BASEPRI, r3
 8012628:	f3bf 8f6f 	isb	sy
 801262c:	f3bf 8f4f 	dsb	sy
 8012630:	60bb      	str	r3, [r7, #8]
 8012632:	e7fe      	b.n	8012632 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8012634:	693b      	ldr	r3, [r7, #16]
 8012636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012638:	1e5a      	subs	r2, r3, #1
 801263a:	693b      	ldr	r3, [r7, #16]
 801263c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801263e:	693b      	ldr	r3, [r7, #16]
 8012640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012642:	693b      	ldr	r3, [r7, #16]
 8012644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012646:	429a      	cmp	r2, r3
 8012648:	d02c      	beq.n	80126a4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801264a:	693b      	ldr	r3, [r7, #16]
 801264c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801264e:	2b00      	cmp	r3, #0
 8012650:	d128      	bne.n	80126a4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012652:	693b      	ldr	r3, [r7, #16]
 8012654:	3304      	adds	r3, #4
 8012656:	4618      	mov	r0, r3
 8012658:	f7fd fffa 	bl	8010650 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801265c:	693b      	ldr	r3, [r7, #16]
 801265e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012660:	693b      	ldr	r3, [r7, #16]
 8012662:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012664:	693b      	ldr	r3, [r7, #16]
 8012666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012668:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801266c:	693b      	ldr	r3, [r7, #16]
 801266e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012670:	693b      	ldr	r3, [r7, #16]
 8012672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012674:	4b0f      	ldr	r3, [pc, #60]	; (80126b4 <xTaskPriorityDisinherit+0xd0>)
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	429a      	cmp	r2, r3
 801267a:	d903      	bls.n	8012684 <xTaskPriorityDisinherit+0xa0>
 801267c:	693b      	ldr	r3, [r7, #16]
 801267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012680:	4a0c      	ldr	r2, [pc, #48]	; (80126b4 <xTaskPriorityDisinherit+0xd0>)
 8012682:	6013      	str	r3, [r2, #0]
 8012684:	693b      	ldr	r3, [r7, #16]
 8012686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012688:	4613      	mov	r3, r2
 801268a:	009b      	lsls	r3, r3, #2
 801268c:	4413      	add	r3, r2
 801268e:	009b      	lsls	r3, r3, #2
 8012690:	4a09      	ldr	r2, [pc, #36]	; (80126b8 <xTaskPriorityDisinherit+0xd4>)
 8012692:	441a      	add	r2, r3
 8012694:	693b      	ldr	r3, [r7, #16]
 8012696:	3304      	adds	r3, #4
 8012698:	4619      	mov	r1, r3
 801269a:	4610      	mov	r0, r2
 801269c:	f7fd ff7b 	bl	8010596 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80126a0:	2301      	movs	r3, #1
 80126a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80126a4:	697b      	ldr	r3, [r7, #20]
	}
 80126a6:	4618      	mov	r0, r3
 80126a8:	3718      	adds	r7, #24
 80126aa:	46bd      	mov	sp, r7
 80126ac:	bd80      	pop	{r7, pc}
 80126ae:	bf00      	nop
 80126b0:	20004230 	.word	0x20004230
 80126b4:	2000470c 	.word	0x2000470c
 80126b8:	20004234 	.word	0x20004234

080126bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b088      	sub	sp, #32
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
 80126c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80126ca:	2301      	movs	r3, #1
 80126cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d068      	beq.n	80127a6 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80126d4:	69bb      	ldr	r3, [r7, #24]
 80126d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d109      	bne.n	80126f0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80126dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126e0:	f383 8811 	msr	BASEPRI, r3
 80126e4:	f3bf 8f6f 	isb	sy
 80126e8:	f3bf 8f4f 	dsb	sy
 80126ec:	60fb      	str	r3, [r7, #12]
 80126ee:	e7fe      	b.n	80126ee <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80126f0:	69bb      	ldr	r3, [r7, #24]
 80126f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80126f4:	683a      	ldr	r2, [r7, #0]
 80126f6:	429a      	cmp	r2, r3
 80126f8:	d902      	bls.n	8012700 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80126fa:	683b      	ldr	r3, [r7, #0]
 80126fc:	61fb      	str	r3, [r7, #28]
 80126fe:	e002      	b.n	8012706 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012700:	69bb      	ldr	r3, [r7, #24]
 8012702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012704:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012706:	69bb      	ldr	r3, [r7, #24]
 8012708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801270a:	69fa      	ldr	r2, [r7, #28]
 801270c:	429a      	cmp	r2, r3
 801270e:	d04a      	beq.n	80127a6 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012710:	69bb      	ldr	r3, [r7, #24]
 8012712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012714:	697a      	ldr	r2, [r7, #20]
 8012716:	429a      	cmp	r2, r3
 8012718:	d145      	bne.n	80127a6 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801271a:	4b25      	ldr	r3, [pc, #148]	; (80127b0 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	69ba      	ldr	r2, [r7, #24]
 8012720:	429a      	cmp	r2, r3
 8012722:	d109      	bne.n	8012738 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8012724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012728:	f383 8811 	msr	BASEPRI, r3
 801272c:	f3bf 8f6f 	isb	sy
 8012730:	f3bf 8f4f 	dsb	sy
 8012734:	60bb      	str	r3, [r7, #8]
 8012736:	e7fe      	b.n	8012736 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012738:	69bb      	ldr	r3, [r7, #24]
 801273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801273c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801273e:	69bb      	ldr	r3, [r7, #24]
 8012740:	69fa      	ldr	r2, [r7, #28]
 8012742:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012744:	69bb      	ldr	r3, [r7, #24]
 8012746:	699b      	ldr	r3, [r3, #24]
 8012748:	2b00      	cmp	r3, #0
 801274a:	db04      	blt.n	8012756 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801274c:	69fb      	ldr	r3, [r7, #28]
 801274e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012752:	69bb      	ldr	r3, [r7, #24]
 8012754:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012756:	69bb      	ldr	r3, [r7, #24]
 8012758:	6959      	ldr	r1, [r3, #20]
 801275a:	693a      	ldr	r2, [r7, #16]
 801275c:	4613      	mov	r3, r2
 801275e:	009b      	lsls	r3, r3, #2
 8012760:	4413      	add	r3, r2
 8012762:	009b      	lsls	r3, r3, #2
 8012764:	4a13      	ldr	r2, [pc, #76]	; (80127b4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012766:	4413      	add	r3, r2
 8012768:	4299      	cmp	r1, r3
 801276a:	d11c      	bne.n	80127a6 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801276c:	69bb      	ldr	r3, [r7, #24]
 801276e:	3304      	adds	r3, #4
 8012770:	4618      	mov	r0, r3
 8012772:	f7fd ff6d 	bl	8010650 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012776:	69bb      	ldr	r3, [r7, #24]
 8012778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801277a:	4b0f      	ldr	r3, [pc, #60]	; (80127b8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	429a      	cmp	r2, r3
 8012780:	d903      	bls.n	801278a <vTaskPriorityDisinheritAfterTimeout+0xce>
 8012782:	69bb      	ldr	r3, [r7, #24]
 8012784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012786:	4a0c      	ldr	r2, [pc, #48]	; (80127b8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012788:	6013      	str	r3, [r2, #0]
 801278a:	69bb      	ldr	r3, [r7, #24]
 801278c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801278e:	4613      	mov	r3, r2
 8012790:	009b      	lsls	r3, r3, #2
 8012792:	4413      	add	r3, r2
 8012794:	009b      	lsls	r3, r3, #2
 8012796:	4a07      	ldr	r2, [pc, #28]	; (80127b4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012798:	441a      	add	r2, r3
 801279a:	69bb      	ldr	r3, [r7, #24]
 801279c:	3304      	adds	r3, #4
 801279e:	4619      	mov	r1, r3
 80127a0:	4610      	mov	r0, r2
 80127a2:	f7fd fef8 	bl	8010596 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80127a6:	bf00      	nop
 80127a8:	3720      	adds	r7, #32
 80127aa:	46bd      	mov	sp, r7
 80127ac:	bd80      	pop	{r7, pc}
 80127ae:	bf00      	nop
 80127b0:	20004230 	.word	0x20004230
 80127b4:	20004234 	.word	0x20004234
 80127b8:	2000470c 	.word	0x2000470c

080127bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80127bc:	b480      	push	{r7}
 80127be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80127c0:	4b07      	ldr	r3, [pc, #28]	; (80127e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d004      	beq.n	80127d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80127c8:	4b05      	ldr	r3, [pc, #20]	; (80127e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80127ce:	3201      	adds	r2, #1
 80127d0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80127d2:	4b03      	ldr	r3, [pc, #12]	; (80127e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80127d4:	681b      	ldr	r3, [r3, #0]
	}
 80127d6:	4618      	mov	r0, r3
 80127d8:	46bd      	mov	sp, r7
 80127da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127de:	4770      	bx	lr
 80127e0:	20004230 	.word	0x20004230

080127e4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b084      	sub	sp, #16
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
 80127ec:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80127ee:	f7fd fbb5 	bl	800ff5c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80127f2:	4b1e      	ldr	r3, [pc, #120]	; (801286c <ulTaskNotifyTake+0x88>)
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d113      	bne.n	8012824 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80127fc:	4b1b      	ldr	r3, [pc, #108]	; (801286c <ulTaskNotifyTake+0x88>)
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	2201      	movs	r2, #1
 8012802:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8012806:	683b      	ldr	r3, [r7, #0]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d00b      	beq.n	8012824 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801280c:	2101      	movs	r1, #1
 801280e:	6838      	ldr	r0, [r7, #0]
 8012810:	f000 fa18 	bl	8012c44 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8012814:	4b16      	ldr	r3, [pc, #88]	; (8012870 <ulTaskNotifyTake+0x8c>)
 8012816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801281a:	601a      	str	r2, [r3, #0]
 801281c:	f3bf 8f4f 	dsb	sy
 8012820:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012824:	f7fd fbc8 	bl	800ffb8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8012828:	f7fd fb98 	bl	800ff5c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801282c:	4b0f      	ldr	r3, [pc, #60]	; (801286c <ulTaskNotifyTake+0x88>)
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012832:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d00c      	beq.n	8012854 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d004      	beq.n	801284a <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8012840:	4b0a      	ldr	r3, [pc, #40]	; (801286c <ulTaskNotifyTake+0x88>)
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	2200      	movs	r2, #0
 8012846:	655a      	str	r2, [r3, #84]	; 0x54
 8012848:	e004      	b.n	8012854 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 801284a:	4b08      	ldr	r3, [pc, #32]	; (801286c <ulTaskNotifyTake+0x88>)
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	68fa      	ldr	r2, [r7, #12]
 8012850:	3a01      	subs	r2, #1
 8012852:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012854:	4b05      	ldr	r3, [pc, #20]	; (801286c <ulTaskNotifyTake+0x88>)
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	2200      	movs	r2, #0
 801285a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 801285e:	f7fd fbab 	bl	800ffb8 <vPortExitCritical>

		return ulReturn;
 8012862:	68fb      	ldr	r3, [r7, #12]
	}
 8012864:	4618      	mov	r0, r3
 8012866:	3710      	adds	r7, #16
 8012868:	46bd      	mov	sp, r7
 801286a:	bd80      	pop	{r7, pc}
 801286c:	20004230 	.word	0x20004230
 8012870:	e000ed04 	.word	0xe000ed04

08012874 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8012874:	b580      	push	{r7, lr}
 8012876:	b086      	sub	sp, #24
 8012878:	af00      	add	r7, sp, #0
 801287a:	60f8      	str	r0, [r7, #12]
 801287c:	60b9      	str	r1, [r7, #8]
 801287e:	607a      	str	r2, [r7, #4]
 8012880:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8012882:	f7fd fb6b 	bl	800ff5c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8012886:	4b26      	ldr	r3, [pc, #152]	; (8012920 <xTaskNotifyWait+0xac>)
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801288e:	b2db      	uxtb	r3, r3
 8012890:	2b02      	cmp	r3, #2
 8012892:	d01a      	beq.n	80128ca <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8012894:	4b22      	ldr	r3, [pc, #136]	; (8012920 <xTaskNotifyWait+0xac>)
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801289a:	68fa      	ldr	r2, [r7, #12]
 801289c:	43d2      	mvns	r2, r2
 801289e:	400a      	ands	r2, r1
 80128a0:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80128a2:	4b1f      	ldr	r3, [pc, #124]	; (8012920 <xTaskNotifyWait+0xac>)
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	2201      	movs	r2, #1
 80128a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80128ac:	683b      	ldr	r3, [r7, #0]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d00b      	beq.n	80128ca <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80128b2:	2101      	movs	r1, #1
 80128b4:	6838      	ldr	r0, [r7, #0]
 80128b6:	f000 f9c5 	bl	8012c44 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80128ba:	4b1a      	ldr	r3, [pc, #104]	; (8012924 <xTaskNotifyWait+0xb0>)
 80128bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128c0:	601a      	str	r2, [r3, #0]
 80128c2:	f3bf 8f4f 	dsb	sy
 80128c6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80128ca:	f7fd fb75 	bl	800ffb8 <vPortExitCritical>

		taskENTER_CRITICAL();
 80128ce:	f7fd fb45 	bl	800ff5c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d004      	beq.n	80128e2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80128d8:	4b11      	ldr	r3, [pc, #68]	; (8012920 <xTaskNotifyWait+0xac>)
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80128e2:	4b0f      	ldr	r3, [pc, #60]	; (8012920 <xTaskNotifyWait+0xac>)
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80128ea:	b2db      	uxtb	r3, r3
 80128ec:	2b02      	cmp	r3, #2
 80128ee:	d002      	beq.n	80128f6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80128f0:	2300      	movs	r3, #0
 80128f2:	617b      	str	r3, [r7, #20]
 80128f4:	e008      	b.n	8012908 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80128f6:	4b0a      	ldr	r3, [pc, #40]	; (8012920 <xTaskNotifyWait+0xac>)
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80128fc:	68ba      	ldr	r2, [r7, #8]
 80128fe:	43d2      	mvns	r2, r2
 8012900:	400a      	ands	r2, r1
 8012902:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8012904:	2301      	movs	r3, #1
 8012906:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012908:	4b05      	ldr	r3, [pc, #20]	; (8012920 <xTaskNotifyWait+0xac>)
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	2200      	movs	r2, #0
 801290e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8012912:	f7fd fb51 	bl	800ffb8 <vPortExitCritical>

		return xReturn;
 8012916:	697b      	ldr	r3, [r7, #20]
	}
 8012918:	4618      	mov	r0, r3
 801291a:	3718      	adds	r7, #24
 801291c:	46bd      	mov	sp, r7
 801291e:	bd80      	pop	{r7, pc}
 8012920:	20004230 	.word	0x20004230
 8012924:	e000ed04 	.word	0xe000ed04

08012928 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8012928:	b580      	push	{r7, lr}
 801292a:	b08a      	sub	sp, #40	; 0x28
 801292c:	af00      	add	r7, sp, #0
 801292e:	60f8      	str	r0, [r7, #12]
 8012930:	60b9      	str	r1, [r7, #8]
 8012932:	603b      	str	r3, [r7, #0]
 8012934:	4613      	mov	r3, r2
 8012936:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8012938:	2301      	movs	r3, #1
 801293a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d109      	bne.n	8012956 <xTaskGenericNotify+0x2e>
 8012942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012946:	f383 8811 	msr	BASEPRI, r3
 801294a:	f3bf 8f6f 	isb	sy
 801294e:	f3bf 8f4f 	dsb	sy
 8012952:	61bb      	str	r3, [r7, #24]
 8012954:	e7fe      	b.n	8012954 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801295a:	f7fd faff 	bl	800ff5c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801295e:	683b      	ldr	r3, [r7, #0]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d003      	beq.n	801296c <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8012964:	6a3b      	ldr	r3, [r7, #32]
 8012966:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012968:	683b      	ldr	r3, [r7, #0]
 801296a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801296c:	6a3b      	ldr	r3, [r7, #32]
 801296e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012972:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8012974:	6a3b      	ldr	r3, [r7, #32]
 8012976:	2202      	movs	r2, #2
 8012978:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 801297c:	79fb      	ldrb	r3, [r7, #7]
 801297e:	2b04      	cmp	r3, #4
 8012980:	d827      	bhi.n	80129d2 <xTaskGenericNotify+0xaa>
 8012982:	a201      	add	r2, pc, #4	; (adr r2, 8012988 <xTaskGenericNotify+0x60>)
 8012984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012988:	080129f1 	.word	0x080129f1
 801298c:	0801299d 	.word	0x0801299d
 8012990:	080129ab 	.word	0x080129ab
 8012994:	080129b7 	.word	0x080129b7
 8012998:	080129bf 	.word	0x080129bf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801299c:	6a3b      	ldr	r3, [r7, #32]
 801299e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80129a0:	68bb      	ldr	r3, [r7, #8]
 80129a2:	431a      	orrs	r2, r3
 80129a4:	6a3b      	ldr	r3, [r7, #32]
 80129a6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80129a8:	e025      	b.n	80129f6 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80129aa:	6a3b      	ldr	r3, [r7, #32]
 80129ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80129ae:	1c5a      	adds	r2, r3, #1
 80129b0:	6a3b      	ldr	r3, [r7, #32]
 80129b2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80129b4:	e01f      	b.n	80129f6 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80129b6:	6a3b      	ldr	r3, [r7, #32]
 80129b8:	68ba      	ldr	r2, [r7, #8]
 80129ba:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80129bc:	e01b      	b.n	80129f6 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80129be:	7ffb      	ldrb	r3, [r7, #31]
 80129c0:	2b02      	cmp	r3, #2
 80129c2:	d003      	beq.n	80129cc <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80129c4:	6a3b      	ldr	r3, [r7, #32]
 80129c6:	68ba      	ldr	r2, [r7, #8]
 80129c8:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80129ca:	e014      	b.n	80129f6 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 80129cc:	2300      	movs	r3, #0
 80129ce:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80129d0:	e011      	b.n	80129f6 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80129d2:	6a3b      	ldr	r3, [r7, #32]
 80129d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80129d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129da:	d00b      	beq.n	80129f4 <xTaskGenericNotify+0xcc>
 80129dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129e0:	f383 8811 	msr	BASEPRI, r3
 80129e4:	f3bf 8f6f 	isb	sy
 80129e8:	f3bf 8f4f 	dsb	sy
 80129ec:	617b      	str	r3, [r7, #20]
 80129ee:	e7fe      	b.n	80129ee <xTaskGenericNotify+0xc6>
					break;
 80129f0:	bf00      	nop
 80129f2:	e000      	b.n	80129f6 <xTaskGenericNotify+0xce>

					break;
 80129f4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80129f6:	7ffb      	ldrb	r3, [r7, #31]
 80129f8:	2b01      	cmp	r3, #1
 80129fa:	d13b      	bne.n	8012a74 <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80129fc:	6a3b      	ldr	r3, [r7, #32]
 80129fe:	3304      	adds	r3, #4
 8012a00:	4618      	mov	r0, r3
 8012a02:	f7fd fe25 	bl	8010650 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8012a06:	6a3b      	ldr	r3, [r7, #32]
 8012a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a0a:	4b1e      	ldr	r3, [pc, #120]	; (8012a84 <xTaskGenericNotify+0x15c>)
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	429a      	cmp	r2, r3
 8012a10:	d903      	bls.n	8012a1a <xTaskGenericNotify+0xf2>
 8012a12:	6a3b      	ldr	r3, [r7, #32]
 8012a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a16:	4a1b      	ldr	r2, [pc, #108]	; (8012a84 <xTaskGenericNotify+0x15c>)
 8012a18:	6013      	str	r3, [r2, #0]
 8012a1a:	6a3b      	ldr	r3, [r7, #32]
 8012a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a1e:	4613      	mov	r3, r2
 8012a20:	009b      	lsls	r3, r3, #2
 8012a22:	4413      	add	r3, r2
 8012a24:	009b      	lsls	r3, r3, #2
 8012a26:	4a18      	ldr	r2, [pc, #96]	; (8012a88 <xTaskGenericNotify+0x160>)
 8012a28:	441a      	add	r2, r3
 8012a2a:	6a3b      	ldr	r3, [r7, #32]
 8012a2c:	3304      	adds	r3, #4
 8012a2e:	4619      	mov	r1, r3
 8012a30:	4610      	mov	r0, r2
 8012a32:	f7fd fdb0 	bl	8010596 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8012a36:	6a3b      	ldr	r3, [r7, #32]
 8012a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d009      	beq.n	8012a52 <xTaskGenericNotify+0x12a>
 8012a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a42:	f383 8811 	msr	BASEPRI, r3
 8012a46:	f3bf 8f6f 	isb	sy
 8012a4a:	f3bf 8f4f 	dsb	sy
 8012a4e:	613b      	str	r3, [r7, #16]
 8012a50:	e7fe      	b.n	8012a50 <xTaskGenericNotify+0x128>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 8012a52:	f7ff fd11 	bl	8012478 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012a56:	6a3b      	ldr	r3, [r7, #32]
 8012a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a5a:	4b0c      	ldr	r3, [pc, #48]	; (8012a8c <xTaskGenericNotify+0x164>)
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a60:	429a      	cmp	r2, r3
 8012a62:	d907      	bls.n	8012a74 <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8012a64:	4b0a      	ldr	r3, [pc, #40]	; (8012a90 <xTaskGenericNotify+0x168>)
 8012a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a6a:	601a      	str	r2, [r3, #0]
 8012a6c:	f3bf 8f4f 	dsb	sy
 8012a70:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012a74:	f7fd faa0 	bl	800ffb8 <vPortExitCritical>

		return xReturn;
 8012a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	3728      	adds	r7, #40	; 0x28
 8012a7e:	46bd      	mov	sp, r7
 8012a80:	bd80      	pop	{r7, pc}
 8012a82:	bf00      	nop
 8012a84:	2000470c 	.word	0x2000470c
 8012a88:	20004234 	.word	0x20004234
 8012a8c:	20004230 	.word	0x20004230
 8012a90:	e000ed04 	.word	0xe000ed04

08012a94 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012a94:	b580      	push	{r7, lr}
 8012a96:	b08e      	sub	sp, #56	; 0x38
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	60f8      	str	r0, [r7, #12]
 8012a9c:	60b9      	str	r1, [r7, #8]
 8012a9e:	603b      	str	r3, [r7, #0]
 8012aa0:	4613      	mov	r3, r2
 8012aa2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8012aa4:	2301      	movs	r3, #1
 8012aa6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d109      	bne.n	8012ac2 <xTaskGenericNotifyFromISR+0x2e>
 8012aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ab2:	f383 8811 	msr	BASEPRI, r3
 8012ab6:	f3bf 8f6f 	isb	sy
 8012aba:	f3bf 8f4f 	dsb	sy
 8012abe:	627b      	str	r3, [r7, #36]	; 0x24
 8012ac0:	e7fe      	b.n	8012ac0 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012ac2:	f7fd fb27 	bl	8010114 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8012aca:	f3ef 8211 	mrs	r2, BASEPRI
 8012ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ad2:	f383 8811 	msr	BASEPRI, r3
 8012ad6:	f3bf 8f6f 	isb	sy
 8012ada:	f3bf 8f4f 	dsb	sy
 8012ade:	623a      	str	r2, [r7, #32]
 8012ae0:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8012ae2:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8012ae6:	683b      	ldr	r3, [r7, #0]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d003      	beq.n	8012af4 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8012aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012af0:	683b      	ldr	r3, [r7, #0]
 8012af2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012af6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8012afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b00:	2202      	movs	r2, #2
 8012b02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8012b06:	79fb      	ldrb	r3, [r7, #7]
 8012b08:	2b04      	cmp	r3, #4
 8012b0a:	d829      	bhi.n	8012b60 <xTaskGenericNotifyFromISR+0xcc>
 8012b0c:	a201      	add	r2, pc, #4	; (adr r2, 8012b14 <xTaskGenericNotifyFromISR+0x80>)
 8012b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b12:	bf00      	nop
 8012b14:	08012b7f 	.word	0x08012b7f
 8012b18:	08012b29 	.word	0x08012b29
 8012b1c:	08012b37 	.word	0x08012b37
 8012b20:	08012b43 	.word	0x08012b43
 8012b24:	08012b4b 	.word	0x08012b4b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8012b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012b2c:	68bb      	ldr	r3, [r7, #8]
 8012b2e:	431a      	orrs	r2, r3
 8012b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b32:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012b34:	e026      	b.n	8012b84 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8012b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b3a:	1c5a      	adds	r2, r3, #1
 8012b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b3e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012b40:	e020      	b.n	8012b84 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8012b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b44:	68ba      	ldr	r2, [r7, #8]
 8012b46:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012b48:	e01c      	b.n	8012b84 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8012b4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012b4e:	2b02      	cmp	r3, #2
 8012b50:	d003      	beq.n	8012b5a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8012b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b54:	68ba      	ldr	r2, [r7, #8]
 8012b56:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8012b58:	e014      	b.n	8012b84 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8012b5e:	e011      	b.n	8012b84 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8012b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b68:	d00b      	beq.n	8012b82 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 8012b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b6e:	f383 8811 	msr	BASEPRI, r3
 8012b72:	f3bf 8f6f 	isb	sy
 8012b76:	f3bf 8f4f 	dsb	sy
 8012b7a:	61bb      	str	r3, [r7, #24]
 8012b7c:	e7fe      	b.n	8012b7c <xTaskGenericNotifyFromISR+0xe8>
					break;
 8012b7e:	bf00      	nop
 8012b80:	e000      	b.n	8012b84 <xTaskGenericNotifyFromISR+0xf0>
					break;
 8012b82:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8012b84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012b88:	2b01      	cmp	r3, #1
 8012b8a:	d145      	bne.n	8012c18 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8012b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d009      	beq.n	8012ba8 <xTaskGenericNotifyFromISR+0x114>
 8012b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b98:	f383 8811 	msr	BASEPRI, r3
 8012b9c:	f3bf 8f6f 	isb	sy
 8012ba0:	f3bf 8f4f 	dsb	sy
 8012ba4:	617b      	str	r3, [r7, #20]
 8012ba6:	e7fe      	b.n	8012ba6 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012ba8:	4b20      	ldr	r3, [pc, #128]	; (8012c2c <xTaskGenericNotifyFromISR+0x198>)
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d11d      	bne.n	8012bec <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bb2:	3304      	adds	r3, #4
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	f7fd fd4b 	bl	8010650 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bbe:	4b1c      	ldr	r3, [pc, #112]	; (8012c30 <xTaskGenericNotifyFromISR+0x19c>)
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	429a      	cmp	r2, r3
 8012bc4:	d903      	bls.n	8012bce <xTaskGenericNotifyFromISR+0x13a>
 8012bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bca:	4a19      	ldr	r2, [pc, #100]	; (8012c30 <xTaskGenericNotifyFromISR+0x19c>)
 8012bcc:	6013      	str	r3, [r2, #0]
 8012bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bd2:	4613      	mov	r3, r2
 8012bd4:	009b      	lsls	r3, r3, #2
 8012bd6:	4413      	add	r3, r2
 8012bd8:	009b      	lsls	r3, r3, #2
 8012bda:	4a16      	ldr	r2, [pc, #88]	; (8012c34 <xTaskGenericNotifyFromISR+0x1a0>)
 8012bdc:	441a      	add	r2, r3
 8012bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012be0:	3304      	adds	r3, #4
 8012be2:	4619      	mov	r1, r3
 8012be4:	4610      	mov	r0, r2
 8012be6:	f7fd fcd6 	bl	8010596 <vListInsertEnd>
 8012bea:	e005      	b.n	8012bf8 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8012bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bee:	3318      	adds	r3, #24
 8012bf0:	4619      	mov	r1, r3
 8012bf2:	4811      	ldr	r0, [pc, #68]	; (8012c38 <xTaskGenericNotifyFromISR+0x1a4>)
 8012bf4:	f7fd fccf 	bl	8010596 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bfc:	4b0f      	ldr	r3, [pc, #60]	; (8012c3c <xTaskGenericNotifyFromISR+0x1a8>)
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c02:	429a      	cmp	r2, r3
 8012c04:	d908      	bls.n	8012c18 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8012c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d002      	beq.n	8012c12 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8012c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c0e:	2201      	movs	r2, #1
 8012c10:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8012c12:	4b0b      	ldr	r3, [pc, #44]	; (8012c40 <xTaskGenericNotifyFromISR+0x1ac>)
 8012c14:	2201      	movs	r2, #1
 8012c16:	601a      	str	r2, [r3, #0]
 8012c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c1a:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012c1c:	693b      	ldr	r3, [r7, #16]
 8012c1e:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8012c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8012c24:	4618      	mov	r0, r3
 8012c26:	3738      	adds	r7, #56	; 0x38
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	bd80      	pop	{r7, pc}
 8012c2c:	2000472c 	.word	0x2000472c
 8012c30:	2000470c 	.word	0x2000470c
 8012c34:	20004234 	.word	0x20004234
 8012c38:	200046c4 	.word	0x200046c4
 8012c3c:	20004230 	.word	0x20004230
 8012c40:	20004718 	.word	0x20004718

08012c44 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b084      	sub	sp, #16
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
 8012c4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012c4e:	4b21      	ldr	r3, [pc, #132]	; (8012cd4 <prvAddCurrentTaskToDelayedList+0x90>)
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012c54:	4b20      	ldr	r3, [pc, #128]	; (8012cd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	3304      	adds	r3, #4
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	f7fd fcf8 	bl	8010650 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c66:	d10a      	bne.n	8012c7e <prvAddCurrentTaskToDelayedList+0x3a>
 8012c68:	683b      	ldr	r3, [r7, #0]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d007      	beq.n	8012c7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c6e:	4b1a      	ldr	r3, [pc, #104]	; (8012cd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	3304      	adds	r3, #4
 8012c74:	4619      	mov	r1, r3
 8012c76:	4819      	ldr	r0, [pc, #100]	; (8012cdc <prvAddCurrentTaskToDelayedList+0x98>)
 8012c78:	f7fd fc8d 	bl	8010596 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012c7c:	e026      	b.n	8012ccc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012c7e:	68fa      	ldr	r2, [r7, #12]
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	4413      	add	r3, r2
 8012c84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012c86:	4b14      	ldr	r3, [pc, #80]	; (8012cd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	68ba      	ldr	r2, [r7, #8]
 8012c8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012c8e:	68ba      	ldr	r2, [r7, #8]
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	429a      	cmp	r2, r3
 8012c94:	d209      	bcs.n	8012caa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c96:	4b12      	ldr	r3, [pc, #72]	; (8012ce0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012c98:	681a      	ldr	r2, [r3, #0]
 8012c9a:	4b0f      	ldr	r3, [pc, #60]	; (8012cd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	3304      	adds	r3, #4
 8012ca0:	4619      	mov	r1, r3
 8012ca2:	4610      	mov	r0, r2
 8012ca4:	f7fd fc9b 	bl	80105de <vListInsert>
}
 8012ca8:	e010      	b.n	8012ccc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012caa:	4b0e      	ldr	r3, [pc, #56]	; (8012ce4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012cac:	681a      	ldr	r2, [r3, #0]
 8012cae:	4b0a      	ldr	r3, [pc, #40]	; (8012cd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	3304      	adds	r3, #4
 8012cb4:	4619      	mov	r1, r3
 8012cb6:	4610      	mov	r0, r2
 8012cb8:	f7fd fc91 	bl	80105de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012cbc:	4b0a      	ldr	r3, [pc, #40]	; (8012ce8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	68ba      	ldr	r2, [r7, #8]
 8012cc2:	429a      	cmp	r2, r3
 8012cc4:	d202      	bcs.n	8012ccc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012cc6:	4a08      	ldr	r2, [pc, #32]	; (8012ce8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012cc8:	68bb      	ldr	r3, [r7, #8]
 8012cca:	6013      	str	r3, [r2, #0]
}
 8012ccc:	bf00      	nop
 8012cce:	3710      	adds	r7, #16
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	bd80      	pop	{r7, pc}
 8012cd4:	20004708 	.word	0x20004708
 8012cd8:	20004230 	.word	0x20004230
 8012cdc:	200046f0 	.word	0x200046f0
 8012ce0:	200046c0 	.word	0x200046c0
 8012ce4:	200046bc 	.word	0x200046bc
 8012ce8:	20004724 	.word	0x20004724

08012cec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b08a      	sub	sp, #40	; 0x28
 8012cf0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012cf6:	f000 faff 	bl	80132f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012cfa:	4b1c      	ldr	r3, [pc, #112]	; (8012d6c <xTimerCreateTimerTask+0x80>)
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d021      	beq.n	8012d46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012d02:	2300      	movs	r3, #0
 8012d04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012d06:	2300      	movs	r3, #0
 8012d08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012d0a:	1d3a      	adds	r2, r7, #4
 8012d0c:	f107 0108 	add.w	r1, r7, #8
 8012d10:	f107 030c 	add.w	r3, r7, #12
 8012d14:	4618      	mov	r0, r3
 8012d16:	f7fc ffe3 	bl	800fce0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012d1a:	6879      	ldr	r1, [r7, #4]
 8012d1c:	68bb      	ldr	r3, [r7, #8]
 8012d1e:	68fa      	ldr	r2, [r7, #12]
 8012d20:	9202      	str	r2, [sp, #8]
 8012d22:	9301      	str	r3, [sp, #4]
 8012d24:	2302      	movs	r3, #2
 8012d26:	9300      	str	r3, [sp, #0]
 8012d28:	2300      	movs	r3, #0
 8012d2a:	460a      	mov	r2, r1
 8012d2c:	4910      	ldr	r1, [pc, #64]	; (8012d70 <xTimerCreateTimerTask+0x84>)
 8012d2e:	4811      	ldr	r0, [pc, #68]	; (8012d74 <xTimerCreateTimerTask+0x88>)
 8012d30:	f7fe fd5a 	bl	80117e8 <xTaskCreateStatic>
 8012d34:	4602      	mov	r2, r0
 8012d36:	4b10      	ldr	r3, [pc, #64]	; (8012d78 <xTimerCreateTimerTask+0x8c>)
 8012d38:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012d3a:	4b0f      	ldr	r3, [pc, #60]	; (8012d78 <xTimerCreateTimerTask+0x8c>)
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d001      	beq.n	8012d46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012d42:	2301      	movs	r3, #1
 8012d44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012d46:	697b      	ldr	r3, [r7, #20]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d109      	bne.n	8012d60 <xTimerCreateTimerTask+0x74>
	__asm volatile
 8012d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d50:	f383 8811 	msr	BASEPRI, r3
 8012d54:	f3bf 8f6f 	isb	sy
 8012d58:	f3bf 8f4f 	dsb	sy
 8012d5c:	613b      	str	r3, [r7, #16]
 8012d5e:	e7fe      	b.n	8012d5e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8012d60:	697b      	ldr	r3, [r7, #20]
}
 8012d62:	4618      	mov	r0, r3
 8012d64:	3718      	adds	r7, #24
 8012d66:	46bd      	mov	sp, r7
 8012d68:	bd80      	pop	{r7, pc}
 8012d6a:	bf00      	nop
 8012d6c:	20004760 	.word	0x20004760
 8012d70:	080168c8 	.word	0x080168c8
 8012d74:	08012ead 	.word	0x08012ead
 8012d78:	20004764 	.word	0x20004764

08012d7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b08a      	sub	sp, #40	; 0x28
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	60f8      	str	r0, [r7, #12]
 8012d84:	60b9      	str	r1, [r7, #8]
 8012d86:	607a      	str	r2, [r7, #4]
 8012d88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d109      	bne.n	8012da8 <xTimerGenericCommand+0x2c>
 8012d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d98:	f383 8811 	msr	BASEPRI, r3
 8012d9c:	f3bf 8f6f 	isb	sy
 8012da0:	f3bf 8f4f 	dsb	sy
 8012da4:	623b      	str	r3, [r7, #32]
 8012da6:	e7fe      	b.n	8012da6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012da8:	4b19      	ldr	r3, [pc, #100]	; (8012e10 <xTimerGenericCommand+0x94>)
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d02a      	beq.n	8012e06 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012db0:	68bb      	ldr	r3, [r7, #8]
 8012db2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012dbc:	68bb      	ldr	r3, [r7, #8]
 8012dbe:	2b05      	cmp	r3, #5
 8012dc0:	dc18      	bgt.n	8012df4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012dc2:	f7ff fb89 	bl	80124d8 <xTaskGetSchedulerState>
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	2b02      	cmp	r3, #2
 8012dca:	d109      	bne.n	8012de0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012dcc:	4b10      	ldr	r3, [pc, #64]	; (8012e10 <xTimerGenericCommand+0x94>)
 8012dce:	6818      	ldr	r0, [r3, #0]
 8012dd0:	f107 0110 	add.w	r1, r7, #16
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012dd8:	f7fd febc 	bl	8010b54 <xQueueGenericSend>
 8012ddc:	6278      	str	r0, [r7, #36]	; 0x24
 8012dde:	e012      	b.n	8012e06 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012de0:	4b0b      	ldr	r3, [pc, #44]	; (8012e10 <xTimerGenericCommand+0x94>)
 8012de2:	6818      	ldr	r0, [r3, #0]
 8012de4:	f107 0110 	add.w	r1, r7, #16
 8012de8:	2300      	movs	r3, #0
 8012dea:	2200      	movs	r2, #0
 8012dec:	f7fd feb2 	bl	8010b54 <xQueueGenericSend>
 8012df0:	6278      	str	r0, [r7, #36]	; 0x24
 8012df2:	e008      	b.n	8012e06 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012df4:	4b06      	ldr	r3, [pc, #24]	; (8012e10 <xTimerGenericCommand+0x94>)
 8012df6:	6818      	ldr	r0, [r3, #0]
 8012df8:	f107 0110 	add.w	r1, r7, #16
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	683a      	ldr	r2, [r7, #0]
 8012e00:	f7fd ffa2 	bl	8010d48 <xQueueGenericSendFromISR>
 8012e04:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012e08:	4618      	mov	r0, r3
 8012e0a:	3728      	adds	r7, #40	; 0x28
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	bd80      	pop	{r7, pc}
 8012e10:	20004760 	.word	0x20004760

08012e14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b088      	sub	sp, #32
 8012e18:	af02      	add	r7, sp, #8
 8012e1a:	6078      	str	r0, [r7, #4]
 8012e1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e1e:	4b22      	ldr	r3, [pc, #136]	; (8012ea8 <prvProcessExpiredTimer+0x94>)
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	68db      	ldr	r3, [r3, #12]
 8012e24:	68db      	ldr	r3, [r3, #12]
 8012e26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012e28:	697b      	ldr	r3, [r7, #20]
 8012e2a:	3304      	adds	r3, #4
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f7fd fc0f 	bl	8010650 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012e32:	697b      	ldr	r3, [r7, #20]
 8012e34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e38:	f003 0304 	and.w	r3, r3, #4
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d021      	beq.n	8012e84 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012e40:	697b      	ldr	r3, [r7, #20]
 8012e42:	699a      	ldr	r2, [r3, #24]
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	18d1      	adds	r1, r2, r3
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	683a      	ldr	r2, [r7, #0]
 8012e4c:	6978      	ldr	r0, [r7, #20]
 8012e4e:	f000 f8d1 	bl	8012ff4 <prvInsertTimerInActiveList>
 8012e52:	4603      	mov	r3, r0
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d01e      	beq.n	8012e96 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012e58:	2300      	movs	r3, #0
 8012e5a:	9300      	str	r3, [sp, #0]
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	687a      	ldr	r2, [r7, #4]
 8012e60:	2100      	movs	r1, #0
 8012e62:	6978      	ldr	r0, [r7, #20]
 8012e64:	f7ff ff8a 	bl	8012d7c <xTimerGenericCommand>
 8012e68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012e6a:	693b      	ldr	r3, [r7, #16]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d112      	bne.n	8012e96 <prvProcessExpiredTimer+0x82>
 8012e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e74:	f383 8811 	msr	BASEPRI, r3
 8012e78:	f3bf 8f6f 	isb	sy
 8012e7c:	f3bf 8f4f 	dsb	sy
 8012e80:	60fb      	str	r3, [r7, #12]
 8012e82:	e7fe      	b.n	8012e82 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012e84:	697b      	ldr	r3, [r7, #20]
 8012e86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e8a:	f023 0301 	bic.w	r3, r3, #1
 8012e8e:	b2da      	uxtb	r2, r3
 8012e90:	697b      	ldr	r3, [r7, #20]
 8012e92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012e96:	697b      	ldr	r3, [r7, #20]
 8012e98:	6a1b      	ldr	r3, [r3, #32]
 8012e9a:	6978      	ldr	r0, [r7, #20]
 8012e9c:	4798      	blx	r3
}
 8012e9e:	bf00      	nop
 8012ea0:	3718      	adds	r7, #24
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	bd80      	pop	{r7, pc}
 8012ea6:	bf00      	nop
 8012ea8:	20004758 	.word	0x20004758

08012eac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b084      	sub	sp, #16
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012eb4:	f107 0308 	add.w	r3, r7, #8
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f000 f857 	bl	8012f6c <prvGetNextExpireTime>
 8012ebe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012ec0:	68bb      	ldr	r3, [r7, #8]
 8012ec2:	4619      	mov	r1, r3
 8012ec4:	68f8      	ldr	r0, [r7, #12]
 8012ec6:	f000 f803 	bl	8012ed0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012eca:	f000 f8d5 	bl	8013078 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012ece:	e7f1      	b.n	8012eb4 <prvTimerTask+0x8>

08012ed0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	b084      	sub	sp, #16
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
 8012ed8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012eda:	f7fe febb 	bl	8011c54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012ede:	f107 0308 	add.w	r3, r7, #8
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f000 f866 	bl	8012fb4 <prvSampleTimeNow>
 8012ee8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012eea:	68bb      	ldr	r3, [r7, #8]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d130      	bne.n	8012f52 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012ef0:	683b      	ldr	r3, [r7, #0]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d10a      	bne.n	8012f0c <prvProcessTimerOrBlockTask+0x3c>
 8012ef6:	687a      	ldr	r2, [r7, #4]
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	429a      	cmp	r2, r3
 8012efc:	d806      	bhi.n	8012f0c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012efe:	f7fe feef 	bl	8011ce0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012f02:	68f9      	ldr	r1, [r7, #12]
 8012f04:	6878      	ldr	r0, [r7, #4]
 8012f06:	f7ff ff85 	bl	8012e14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012f0a:	e024      	b.n	8012f56 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012f0c:	683b      	ldr	r3, [r7, #0]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d008      	beq.n	8012f24 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012f12:	4b13      	ldr	r3, [pc, #76]	; (8012f60 <prvProcessTimerOrBlockTask+0x90>)
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d101      	bne.n	8012f20 <prvProcessTimerOrBlockTask+0x50>
 8012f1c:	2301      	movs	r3, #1
 8012f1e:	e000      	b.n	8012f22 <prvProcessTimerOrBlockTask+0x52>
 8012f20:	2300      	movs	r3, #0
 8012f22:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012f24:	4b0f      	ldr	r3, [pc, #60]	; (8012f64 <prvProcessTimerOrBlockTask+0x94>)
 8012f26:	6818      	ldr	r0, [r3, #0]
 8012f28:	687a      	ldr	r2, [r7, #4]
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	1ad3      	subs	r3, r2, r3
 8012f2e:	683a      	ldr	r2, [r7, #0]
 8012f30:	4619      	mov	r1, r3
 8012f32:	f7fe fc25 	bl	8011780 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012f36:	f7fe fed3 	bl	8011ce0 <xTaskResumeAll>
 8012f3a:	4603      	mov	r3, r0
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d10a      	bne.n	8012f56 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012f40:	4b09      	ldr	r3, [pc, #36]	; (8012f68 <prvProcessTimerOrBlockTask+0x98>)
 8012f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f46:	601a      	str	r2, [r3, #0]
 8012f48:	f3bf 8f4f 	dsb	sy
 8012f4c:	f3bf 8f6f 	isb	sy
}
 8012f50:	e001      	b.n	8012f56 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012f52:	f7fe fec5 	bl	8011ce0 <xTaskResumeAll>
}
 8012f56:	bf00      	nop
 8012f58:	3710      	adds	r7, #16
 8012f5a:	46bd      	mov	sp, r7
 8012f5c:	bd80      	pop	{r7, pc}
 8012f5e:	bf00      	nop
 8012f60:	2000475c 	.word	0x2000475c
 8012f64:	20004760 	.word	0x20004760
 8012f68:	e000ed04 	.word	0xe000ed04

08012f6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012f6c:	b480      	push	{r7}
 8012f6e:	b085      	sub	sp, #20
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012f74:	4b0e      	ldr	r3, [pc, #56]	; (8012fb0 <prvGetNextExpireTime+0x44>)
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d101      	bne.n	8012f82 <prvGetNextExpireTime+0x16>
 8012f7e:	2201      	movs	r2, #1
 8012f80:	e000      	b.n	8012f84 <prvGetNextExpireTime+0x18>
 8012f82:	2200      	movs	r2, #0
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d105      	bne.n	8012f9c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012f90:	4b07      	ldr	r3, [pc, #28]	; (8012fb0 <prvGetNextExpireTime+0x44>)
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	68db      	ldr	r3, [r3, #12]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	60fb      	str	r3, [r7, #12]
 8012f9a:	e001      	b.n	8012fa0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012fa0:	68fb      	ldr	r3, [r7, #12]
}
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	3714      	adds	r7, #20
 8012fa6:	46bd      	mov	sp, r7
 8012fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fac:	4770      	bx	lr
 8012fae:	bf00      	nop
 8012fb0:	20004758 	.word	0x20004758

08012fb4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b084      	sub	sp, #16
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012fbc:	f7fe ff2c 	bl	8011e18 <xTaskGetTickCount>
 8012fc0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012fc2:	4b0b      	ldr	r3, [pc, #44]	; (8012ff0 <prvSampleTimeNow+0x3c>)
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	68fa      	ldr	r2, [r7, #12]
 8012fc8:	429a      	cmp	r2, r3
 8012fca:	d205      	bcs.n	8012fd8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012fcc:	f000 f930 	bl	8013230 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	2201      	movs	r2, #1
 8012fd4:	601a      	str	r2, [r3, #0]
 8012fd6:	e002      	b.n	8012fde <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	2200      	movs	r2, #0
 8012fdc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012fde:	4a04      	ldr	r2, [pc, #16]	; (8012ff0 <prvSampleTimeNow+0x3c>)
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012fe4:	68fb      	ldr	r3, [r7, #12]
}
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	3710      	adds	r7, #16
 8012fea:	46bd      	mov	sp, r7
 8012fec:	bd80      	pop	{r7, pc}
 8012fee:	bf00      	nop
 8012ff0:	20004768 	.word	0x20004768

08012ff4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b086      	sub	sp, #24
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	60f8      	str	r0, [r7, #12]
 8012ffc:	60b9      	str	r1, [r7, #8]
 8012ffe:	607a      	str	r2, [r7, #4]
 8013000:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013002:	2300      	movs	r3, #0
 8013004:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	68ba      	ldr	r2, [r7, #8]
 801300a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	68fa      	ldr	r2, [r7, #12]
 8013010:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013012:	68ba      	ldr	r2, [r7, #8]
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	429a      	cmp	r2, r3
 8013018:	d812      	bhi.n	8013040 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801301a:	687a      	ldr	r2, [r7, #4]
 801301c:	683b      	ldr	r3, [r7, #0]
 801301e:	1ad2      	subs	r2, r2, r3
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	699b      	ldr	r3, [r3, #24]
 8013024:	429a      	cmp	r2, r3
 8013026:	d302      	bcc.n	801302e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013028:	2301      	movs	r3, #1
 801302a:	617b      	str	r3, [r7, #20]
 801302c:	e01b      	b.n	8013066 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801302e:	4b10      	ldr	r3, [pc, #64]	; (8013070 <prvInsertTimerInActiveList+0x7c>)
 8013030:	681a      	ldr	r2, [r3, #0]
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	3304      	adds	r3, #4
 8013036:	4619      	mov	r1, r3
 8013038:	4610      	mov	r0, r2
 801303a:	f7fd fad0 	bl	80105de <vListInsert>
 801303e:	e012      	b.n	8013066 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013040:	687a      	ldr	r2, [r7, #4]
 8013042:	683b      	ldr	r3, [r7, #0]
 8013044:	429a      	cmp	r2, r3
 8013046:	d206      	bcs.n	8013056 <prvInsertTimerInActiveList+0x62>
 8013048:	68ba      	ldr	r2, [r7, #8]
 801304a:	683b      	ldr	r3, [r7, #0]
 801304c:	429a      	cmp	r2, r3
 801304e:	d302      	bcc.n	8013056 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013050:	2301      	movs	r3, #1
 8013052:	617b      	str	r3, [r7, #20]
 8013054:	e007      	b.n	8013066 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013056:	4b07      	ldr	r3, [pc, #28]	; (8013074 <prvInsertTimerInActiveList+0x80>)
 8013058:	681a      	ldr	r2, [r3, #0]
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	3304      	adds	r3, #4
 801305e:	4619      	mov	r1, r3
 8013060:	4610      	mov	r0, r2
 8013062:	f7fd fabc 	bl	80105de <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013066:	697b      	ldr	r3, [r7, #20]
}
 8013068:	4618      	mov	r0, r3
 801306a:	3718      	adds	r7, #24
 801306c:	46bd      	mov	sp, r7
 801306e:	bd80      	pop	{r7, pc}
 8013070:	2000475c 	.word	0x2000475c
 8013074:	20004758 	.word	0x20004758

08013078 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013078:	b580      	push	{r7, lr}
 801307a:	b08e      	sub	sp, #56	; 0x38
 801307c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801307e:	e0c6      	b.n	801320e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	2b00      	cmp	r3, #0
 8013084:	da17      	bge.n	80130b6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013086:	1d3b      	adds	r3, r7, #4
 8013088:	3304      	adds	r3, #4
 801308a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801308c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801308e:	2b00      	cmp	r3, #0
 8013090:	d109      	bne.n	80130a6 <prvProcessReceivedCommands+0x2e>
 8013092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013096:	f383 8811 	msr	BASEPRI, r3
 801309a:	f3bf 8f6f 	isb	sy
 801309e:	f3bf 8f4f 	dsb	sy
 80130a2:	61fb      	str	r3, [r7, #28]
 80130a4:	e7fe      	b.n	80130a4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80130a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80130ac:	6850      	ldr	r0, [r2, #4]
 80130ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80130b0:	6892      	ldr	r2, [r2, #8]
 80130b2:	4611      	mov	r1, r2
 80130b4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	f2c0 80a7 	blt.w	801320c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80130c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130c4:	695b      	ldr	r3, [r3, #20]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d004      	beq.n	80130d4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80130ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130cc:	3304      	adds	r3, #4
 80130ce:	4618      	mov	r0, r3
 80130d0:	f7fd fabe 	bl	8010650 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80130d4:	463b      	mov	r3, r7
 80130d6:	4618      	mov	r0, r3
 80130d8:	f7ff ff6c 	bl	8012fb4 <prvSampleTimeNow>
 80130dc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	2b09      	cmp	r3, #9
 80130e2:	f200 8094 	bhi.w	801320e <prvProcessReceivedCommands+0x196>
 80130e6:	a201      	add	r2, pc, #4	; (adr r2, 80130ec <prvProcessReceivedCommands+0x74>)
 80130e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130ec:	08013115 	.word	0x08013115
 80130f0:	08013115 	.word	0x08013115
 80130f4:	08013115 	.word	0x08013115
 80130f8:	08013187 	.word	0x08013187
 80130fc:	0801319b 	.word	0x0801319b
 8013100:	080131e3 	.word	0x080131e3
 8013104:	08013115 	.word	0x08013115
 8013108:	08013115 	.word	0x08013115
 801310c:	08013187 	.word	0x08013187
 8013110:	0801319b 	.word	0x0801319b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013116:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801311a:	f043 0301 	orr.w	r3, r3, #1
 801311e:	b2da      	uxtb	r2, r3
 8013120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013122:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013126:	68ba      	ldr	r2, [r7, #8]
 8013128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801312a:	699b      	ldr	r3, [r3, #24]
 801312c:	18d1      	adds	r1, r2, r3
 801312e:	68bb      	ldr	r3, [r7, #8]
 8013130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013134:	f7ff ff5e 	bl	8012ff4 <prvInsertTimerInActiveList>
 8013138:	4603      	mov	r3, r0
 801313a:	2b00      	cmp	r3, #0
 801313c:	d067      	beq.n	801320e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801313e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013140:	6a1b      	ldr	r3, [r3, #32]
 8013142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013144:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801314c:	f003 0304 	and.w	r3, r3, #4
 8013150:	2b00      	cmp	r3, #0
 8013152:	d05c      	beq.n	801320e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013154:	68ba      	ldr	r2, [r7, #8]
 8013156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013158:	699b      	ldr	r3, [r3, #24]
 801315a:	441a      	add	r2, r3
 801315c:	2300      	movs	r3, #0
 801315e:	9300      	str	r3, [sp, #0]
 8013160:	2300      	movs	r3, #0
 8013162:	2100      	movs	r1, #0
 8013164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013166:	f7ff fe09 	bl	8012d7c <xTimerGenericCommand>
 801316a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801316c:	6a3b      	ldr	r3, [r7, #32]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d14d      	bne.n	801320e <prvProcessReceivedCommands+0x196>
 8013172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013176:	f383 8811 	msr	BASEPRI, r3
 801317a:	f3bf 8f6f 	isb	sy
 801317e:	f3bf 8f4f 	dsb	sy
 8013182:	61bb      	str	r3, [r7, #24]
 8013184:	e7fe      	b.n	8013184 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801318c:	f023 0301 	bic.w	r3, r3, #1
 8013190:	b2da      	uxtb	r2, r3
 8013192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013194:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013198:	e039      	b.n	801320e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801319c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131a0:	f043 0301 	orr.w	r3, r3, #1
 80131a4:	b2da      	uxtb	r2, r3
 80131a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80131ac:	68ba      	ldr	r2, [r7, #8]
 80131ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80131b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131b4:	699b      	ldr	r3, [r3, #24]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d109      	bne.n	80131ce <prvProcessReceivedCommands+0x156>
 80131ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131be:	f383 8811 	msr	BASEPRI, r3
 80131c2:	f3bf 8f6f 	isb	sy
 80131c6:	f3bf 8f4f 	dsb	sy
 80131ca:	617b      	str	r3, [r7, #20]
 80131cc:	e7fe      	b.n	80131cc <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80131ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131d0:	699a      	ldr	r2, [r3, #24]
 80131d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131d4:	18d1      	adds	r1, r2, r3
 80131d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80131dc:	f7ff ff0a 	bl	8012ff4 <prvInsertTimerInActiveList>
					break;
 80131e0:	e015      	b.n	801320e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80131e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131e8:	f003 0302 	and.w	r3, r3, #2
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d103      	bne.n	80131f8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80131f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80131f2:	f7fd f88f 	bl	8010314 <vPortFree>
 80131f6:	e00a      	b.n	801320e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80131f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131fe:	f023 0301 	bic.w	r3, r3, #1
 8013202:	b2da      	uxtb	r2, r3
 8013204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013206:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801320a:	e000      	b.n	801320e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801320c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801320e:	4b07      	ldr	r3, [pc, #28]	; (801322c <prvProcessReceivedCommands+0x1b4>)
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	1d39      	adds	r1, r7, #4
 8013214:	2200      	movs	r2, #0
 8013216:	4618      	mov	r0, r3
 8013218:	f7fd feb4 	bl	8010f84 <xQueueReceive>
 801321c:	4603      	mov	r3, r0
 801321e:	2b00      	cmp	r3, #0
 8013220:	f47f af2e 	bne.w	8013080 <prvProcessReceivedCommands+0x8>
	}
}
 8013224:	bf00      	nop
 8013226:	3730      	adds	r7, #48	; 0x30
 8013228:	46bd      	mov	sp, r7
 801322a:	bd80      	pop	{r7, pc}
 801322c:	20004760 	.word	0x20004760

08013230 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b088      	sub	sp, #32
 8013234:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013236:	e047      	b.n	80132c8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013238:	4b2d      	ldr	r3, [pc, #180]	; (80132f0 <prvSwitchTimerLists+0xc0>)
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	68db      	ldr	r3, [r3, #12]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013242:	4b2b      	ldr	r3, [pc, #172]	; (80132f0 <prvSwitchTimerLists+0xc0>)
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	68db      	ldr	r3, [r3, #12]
 8013248:	68db      	ldr	r3, [r3, #12]
 801324a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	3304      	adds	r3, #4
 8013250:	4618      	mov	r0, r3
 8013252:	f7fd f9fd 	bl	8010650 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	6a1b      	ldr	r3, [r3, #32]
 801325a:	68f8      	ldr	r0, [r7, #12]
 801325c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013264:	f003 0304 	and.w	r3, r3, #4
 8013268:	2b00      	cmp	r3, #0
 801326a:	d02d      	beq.n	80132c8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	699b      	ldr	r3, [r3, #24]
 8013270:	693a      	ldr	r2, [r7, #16]
 8013272:	4413      	add	r3, r2
 8013274:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013276:	68ba      	ldr	r2, [r7, #8]
 8013278:	693b      	ldr	r3, [r7, #16]
 801327a:	429a      	cmp	r2, r3
 801327c:	d90e      	bls.n	801329c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	68ba      	ldr	r2, [r7, #8]
 8013282:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	68fa      	ldr	r2, [r7, #12]
 8013288:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801328a:	4b19      	ldr	r3, [pc, #100]	; (80132f0 <prvSwitchTimerLists+0xc0>)
 801328c:	681a      	ldr	r2, [r3, #0]
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	3304      	adds	r3, #4
 8013292:	4619      	mov	r1, r3
 8013294:	4610      	mov	r0, r2
 8013296:	f7fd f9a2 	bl	80105de <vListInsert>
 801329a:	e015      	b.n	80132c8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801329c:	2300      	movs	r3, #0
 801329e:	9300      	str	r3, [sp, #0]
 80132a0:	2300      	movs	r3, #0
 80132a2:	693a      	ldr	r2, [r7, #16]
 80132a4:	2100      	movs	r1, #0
 80132a6:	68f8      	ldr	r0, [r7, #12]
 80132a8:	f7ff fd68 	bl	8012d7c <xTimerGenericCommand>
 80132ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d109      	bne.n	80132c8 <prvSwitchTimerLists+0x98>
 80132b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132b8:	f383 8811 	msr	BASEPRI, r3
 80132bc:	f3bf 8f6f 	isb	sy
 80132c0:	f3bf 8f4f 	dsb	sy
 80132c4:	603b      	str	r3, [r7, #0]
 80132c6:	e7fe      	b.n	80132c6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80132c8:	4b09      	ldr	r3, [pc, #36]	; (80132f0 <prvSwitchTimerLists+0xc0>)
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d1b2      	bne.n	8013238 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80132d2:	4b07      	ldr	r3, [pc, #28]	; (80132f0 <prvSwitchTimerLists+0xc0>)
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80132d8:	4b06      	ldr	r3, [pc, #24]	; (80132f4 <prvSwitchTimerLists+0xc4>)
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	4a04      	ldr	r2, [pc, #16]	; (80132f0 <prvSwitchTimerLists+0xc0>)
 80132de:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80132e0:	4a04      	ldr	r2, [pc, #16]	; (80132f4 <prvSwitchTimerLists+0xc4>)
 80132e2:	697b      	ldr	r3, [r7, #20]
 80132e4:	6013      	str	r3, [r2, #0]
}
 80132e6:	bf00      	nop
 80132e8:	3718      	adds	r7, #24
 80132ea:	46bd      	mov	sp, r7
 80132ec:	bd80      	pop	{r7, pc}
 80132ee:	bf00      	nop
 80132f0:	20004758 	.word	0x20004758
 80132f4:	2000475c 	.word	0x2000475c

080132f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b082      	sub	sp, #8
 80132fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80132fe:	f7fc fe2d 	bl	800ff5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013302:	4b15      	ldr	r3, [pc, #84]	; (8013358 <prvCheckForValidListAndQueue+0x60>)
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d120      	bne.n	801334c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801330a:	4814      	ldr	r0, [pc, #80]	; (801335c <prvCheckForValidListAndQueue+0x64>)
 801330c:	f7fd f916 	bl	801053c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013310:	4813      	ldr	r0, [pc, #76]	; (8013360 <prvCheckForValidListAndQueue+0x68>)
 8013312:	f7fd f913 	bl	801053c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013316:	4b13      	ldr	r3, [pc, #76]	; (8013364 <prvCheckForValidListAndQueue+0x6c>)
 8013318:	4a10      	ldr	r2, [pc, #64]	; (801335c <prvCheckForValidListAndQueue+0x64>)
 801331a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801331c:	4b12      	ldr	r3, [pc, #72]	; (8013368 <prvCheckForValidListAndQueue+0x70>)
 801331e:	4a10      	ldr	r2, [pc, #64]	; (8013360 <prvCheckForValidListAndQueue+0x68>)
 8013320:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013322:	2300      	movs	r3, #0
 8013324:	9300      	str	r3, [sp, #0]
 8013326:	4b11      	ldr	r3, [pc, #68]	; (801336c <prvCheckForValidListAndQueue+0x74>)
 8013328:	4a11      	ldr	r2, [pc, #68]	; (8013370 <prvCheckForValidListAndQueue+0x78>)
 801332a:	2110      	movs	r1, #16
 801332c:	200a      	movs	r0, #10
 801332e:	f7fd fa21 	bl	8010774 <xQueueGenericCreateStatic>
 8013332:	4602      	mov	r2, r0
 8013334:	4b08      	ldr	r3, [pc, #32]	; (8013358 <prvCheckForValidListAndQueue+0x60>)
 8013336:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013338:	4b07      	ldr	r3, [pc, #28]	; (8013358 <prvCheckForValidListAndQueue+0x60>)
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d005      	beq.n	801334c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013340:	4b05      	ldr	r3, [pc, #20]	; (8013358 <prvCheckForValidListAndQueue+0x60>)
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	490b      	ldr	r1, [pc, #44]	; (8013374 <prvCheckForValidListAndQueue+0x7c>)
 8013346:	4618      	mov	r0, r3
 8013348:	f7fe f9c8 	bl	80116dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801334c:	f7fc fe34 	bl	800ffb8 <vPortExitCritical>
}
 8013350:	bf00      	nop
 8013352:	46bd      	mov	sp, r7
 8013354:	bd80      	pop	{r7, pc}
 8013356:	bf00      	nop
 8013358:	20004760 	.word	0x20004760
 801335c:	20004730 	.word	0x20004730
 8013360:	20004744 	.word	0x20004744
 8013364:	20004758 	.word	0x20004758
 8013368:	2000475c 	.word	0x2000475c
 801336c:	2000480c 	.word	0x2000480c
 8013370:	2000476c 	.word	0x2000476c
 8013374:	080168d0 	.word	0x080168d0

08013378 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8013378:	b480      	push	{r7}
 801337a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801337c:	4b05      	ldr	r3, [pc, #20]	; (8013394 <UTIL_LPM_Init+0x1c>)
 801337e:	2200      	movs	r2, #0
 8013380:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8013382:	4b05      	ldr	r3, [pc, #20]	; (8013398 <UTIL_LPM_Init+0x20>)
 8013384:	2200      	movs	r2, #0
 8013386:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8013388:	bf00      	nop
 801338a:	46bd      	mov	sp, r7
 801338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013390:	4770      	bx	lr
 8013392:	bf00      	nop
 8013394:	2000485c 	.word	0x2000485c
 8013398:	20004860 	.word	0x20004860

0801339c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801339c:	b480      	push	{r7}
 801339e:	b087      	sub	sp, #28
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
 80133a4:	460b      	mov	r3, r1
 80133a6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80133a8:	f3ef 8310 	mrs	r3, PRIMASK
 80133ac:	613b      	str	r3, [r7, #16]
  return(result);
 80133ae:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80133b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80133b2:	b672      	cpsid	i
  
  switch(state)
 80133b4:	78fb      	ldrb	r3, [r7, #3]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d009      	beq.n	80133ce <UTIL_LPM_SetOffMode+0x32>
 80133ba:	2b01      	cmp	r3, #1
 80133bc:	d000      	beq.n	80133c0 <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 80133be:	e00e      	b.n	80133de <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 80133c0:	4b0c      	ldr	r3, [pc, #48]	; (80133f4 <UTIL_LPM_SetOffMode+0x58>)
 80133c2:	681a      	ldr	r2, [r3, #0]
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	4313      	orrs	r3, r2
 80133c8:	4a0a      	ldr	r2, [pc, #40]	; (80133f4 <UTIL_LPM_SetOffMode+0x58>)
 80133ca:	6013      	str	r3, [r2, #0]
      break;
 80133cc:	e007      	b.n	80133de <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	43da      	mvns	r2, r3
 80133d2:	4b08      	ldr	r3, [pc, #32]	; (80133f4 <UTIL_LPM_SetOffMode+0x58>)
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	4013      	ands	r3, r2
 80133d8:	4a06      	ldr	r2, [pc, #24]	; (80133f4 <UTIL_LPM_SetOffMode+0x58>)
 80133da:	6013      	str	r3, [r2, #0]
      break;
 80133dc:	bf00      	nop
 80133de:	697b      	ldr	r3, [r7, #20]
 80133e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80133e8:	bf00      	nop
 80133ea:	371c      	adds	r7, #28
 80133ec:	46bd      	mov	sp, r7
 80133ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f2:	4770      	bx	lr
 80133f4:	20004860 	.word	0x20004860

080133f8 <__errno>:
 80133f8:	4b01      	ldr	r3, [pc, #4]	; (8013400 <__errno+0x8>)
 80133fa:	6818      	ldr	r0, [r3, #0]
 80133fc:	4770      	bx	lr
 80133fe:	bf00      	nop
 8013400:	20000030 	.word	0x20000030

08013404 <__libc_init_array>:
 8013404:	b570      	push	{r4, r5, r6, lr}
 8013406:	4e0d      	ldr	r6, [pc, #52]	; (801343c <__libc_init_array+0x38>)
 8013408:	4c0d      	ldr	r4, [pc, #52]	; (8013440 <__libc_init_array+0x3c>)
 801340a:	1ba4      	subs	r4, r4, r6
 801340c:	10a4      	asrs	r4, r4, #2
 801340e:	2500      	movs	r5, #0
 8013410:	42a5      	cmp	r5, r4
 8013412:	d109      	bne.n	8013428 <__libc_init_array+0x24>
 8013414:	4e0b      	ldr	r6, [pc, #44]	; (8013444 <__libc_init_array+0x40>)
 8013416:	4c0c      	ldr	r4, [pc, #48]	; (8013448 <__libc_init_array+0x44>)
 8013418:	f002 fdc6 	bl	8015fa8 <_init>
 801341c:	1ba4      	subs	r4, r4, r6
 801341e:	10a4      	asrs	r4, r4, #2
 8013420:	2500      	movs	r5, #0
 8013422:	42a5      	cmp	r5, r4
 8013424:	d105      	bne.n	8013432 <__libc_init_array+0x2e>
 8013426:	bd70      	pop	{r4, r5, r6, pc}
 8013428:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801342c:	4798      	blx	r3
 801342e:	3501      	adds	r5, #1
 8013430:	e7ee      	b.n	8013410 <__libc_init_array+0xc>
 8013432:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013436:	4798      	blx	r3
 8013438:	3501      	adds	r5, #1
 801343a:	e7f2      	b.n	8013422 <__libc_init_array+0x1e>
 801343c:	08017ff8 	.word	0x08017ff8
 8013440:	08017ff8 	.word	0x08017ff8
 8013444:	08017ff8 	.word	0x08017ff8
 8013448:	08017ffc 	.word	0x08017ffc

0801344c <malloc>:
 801344c:	4b02      	ldr	r3, [pc, #8]	; (8013458 <malloc+0xc>)
 801344e:	4601      	mov	r1, r0
 8013450:	6818      	ldr	r0, [r3, #0]
 8013452:	f000 b865 	b.w	8013520 <_malloc_r>
 8013456:	bf00      	nop
 8013458:	20000030 	.word	0x20000030

0801345c <memcpy>:
 801345c:	b510      	push	{r4, lr}
 801345e:	1e43      	subs	r3, r0, #1
 8013460:	440a      	add	r2, r1
 8013462:	4291      	cmp	r1, r2
 8013464:	d100      	bne.n	8013468 <memcpy+0xc>
 8013466:	bd10      	pop	{r4, pc}
 8013468:	f811 4b01 	ldrb.w	r4, [r1], #1
 801346c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013470:	e7f7      	b.n	8013462 <memcpy+0x6>

08013472 <memset>:
 8013472:	4402      	add	r2, r0
 8013474:	4603      	mov	r3, r0
 8013476:	4293      	cmp	r3, r2
 8013478:	d100      	bne.n	801347c <memset+0xa>
 801347a:	4770      	bx	lr
 801347c:	f803 1b01 	strb.w	r1, [r3], #1
 8013480:	e7f9      	b.n	8013476 <memset+0x4>
	...

08013484 <_free_r>:
 8013484:	b538      	push	{r3, r4, r5, lr}
 8013486:	4605      	mov	r5, r0
 8013488:	2900      	cmp	r1, #0
 801348a:	d045      	beq.n	8013518 <_free_r+0x94>
 801348c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013490:	1f0c      	subs	r4, r1, #4
 8013492:	2b00      	cmp	r3, #0
 8013494:	bfb8      	it	lt
 8013496:	18e4      	addlt	r4, r4, r3
 8013498:	f001 feaa 	bl	80151f0 <__malloc_lock>
 801349c:	4a1f      	ldr	r2, [pc, #124]	; (801351c <_free_r+0x98>)
 801349e:	6813      	ldr	r3, [r2, #0]
 80134a0:	4610      	mov	r0, r2
 80134a2:	b933      	cbnz	r3, 80134b2 <_free_r+0x2e>
 80134a4:	6063      	str	r3, [r4, #4]
 80134a6:	6014      	str	r4, [r2, #0]
 80134a8:	4628      	mov	r0, r5
 80134aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80134ae:	f001 bea0 	b.w	80151f2 <__malloc_unlock>
 80134b2:	42a3      	cmp	r3, r4
 80134b4:	d90c      	bls.n	80134d0 <_free_r+0x4c>
 80134b6:	6821      	ldr	r1, [r4, #0]
 80134b8:	1862      	adds	r2, r4, r1
 80134ba:	4293      	cmp	r3, r2
 80134bc:	bf04      	itt	eq
 80134be:	681a      	ldreq	r2, [r3, #0]
 80134c0:	685b      	ldreq	r3, [r3, #4]
 80134c2:	6063      	str	r3, [r4, #4]
 80134c4:	bf04      	itt	eq
 80134c6:	1852      	addeq	r2, r2, r1
 80134c8:	6022      	streq	r2, [r4, #0]
 80134ca:	6004      	str	r4, [r0, #0]
 80134cc:	e7ec      	b.n	80134a8 <_free_r+0x24>
 80134ce:	4613      	mov	r3, r2
 80134d0:	685a      	ldr	r2, [r3, #4]
 80134d2:	b10a      	cbz	r2, 80134d8 <_free_r+0x54>
 80134d4:	42a2      	cmp	r2, r4
 80134d6:	d9fa      	bls.n	80134ce <_free_r+0x4a>
 80134d8:	6819      	ldr	r1, [r3, #0]
 80134da:	1858      	adds	r0, r3, r1
 80134dc:	42a0      	cmp	r0, r4
 80134de:	d10b      	bne.n	80134f8 <_free_r+0x74>
 80134e0:	6820      	ldr	r0, [r4, #0]
 80134e2:	4401      	add	r1, r0
 80134e4:	1858      	adds	r0, r3, r1
 80134e6:	4282      	cmp	r2, r0
 80134e8:	6019      	str	r1, [r3, #0]
 80134ea:	d1dd      	bne.n	80134a8 <_free_r+0x24>
 80134ec:	6810      	ldr	r0, [r2, #0]
 80134ee:	6852      	ldr	r2, [r2, #4]
 80134f0:	605a      	str	r2, [r3, #4]
 80134f2:	4401      	add	r1, r0
 80134f4:	6019      	str	r1, [r3, #0]
 80134f6:	e7d7      	b.n	80134a8 <_free_r+0x24>
 80134f8:	d902      	bls.n	8013500 <_free_r+0x7c>
 80134fa:	230c      	movs	r3, #12
 80134fc:	602b      	str	r3, [r5, #0]
 80134fe:	e7d3      	b.n	80134a8 <_free_r+0x24>
 8013500:	6820      	ldr	r0, [r4, #0]
 8013502:	1821      	adds	r1, r4, r0
 8013504:	428a      	cmp	r2, r1
 8013506:	bf04      	itt	eq
 8013508:	6811      	ldreq	r1, [r2, #0]
 801350a:	6852      	ldreq	r2, [r2, #4]
 801350c:	6062      	str	r2, [r4, #4]
 801350e:	bf04      	itt	eq
 8013510:	1809      	addeq	r1, r1, r0
 8013512:	6021      	streq	r1, [r4, #0]
 8013514:	605c      	str	r4, [r3, #4]
 8013516:	e7c7      	b.n	80134a8 <_free_r+0x24>
 8013518:	bd38      	pop	{r3, r4, r5, pc}
 801351a:	bf00      	nop
 801351c:	20004864 	.word	0x20004864

08013520 <_malloc_r>:
 8013520:	b570      	push	{r4, r5, r6, lr}
 8013522:	1ccd      	adds	r5, r1, #3
 8013524:	f025 0503 	bic.w	r5, r5, #3
 8013528:	3508      	adds	r5, #8
 801352a:	2d0c      	cmp	r5, #12
 801352c:	bf38      	it	cc
 801352e:	250c      	movcc	r5, #12
 8013530:	2d00      	cmp	r5, #0
 8013532:	4606      	mov	r6, r0
 8013534:	db01      	blt.n	801353a <_malloc_r+0x1a>
 8013536:	42a9      	cmp	r1, r5
 8013538:	d903      	bls.n	8013542 <_malloc_r+0x22>
 801353a:	230c      	movs	r3, #12
 801353c:	6033      	str	r3, [r6, #0]
 801353e:	2000      	movs	r0, #0
 8013540:	bd70      	pop	{r4, r5, r6, pc}
 8013542:	f001 fe55 	bl	80151f0 <__malloc_lock>
 8013546:	4a21      	ldr	r2, [pc, #132]	; (80135cc <_malloc_r+0xac>)
 8013548:	6814      	ldr	r4, [r2, #0]
 801354a:	4621      	mov	r1, r4
 801354c:	b991      	cbnz	r1, 8013574 <_malloc_r+0x54>
 801354e:	4c20      	ldr	r4, [pc, #128]	; (80135d0 <_malloc_r+0xb0>)
 8013550:	6823      	ldr	r3, [r4, #0]
 8013552:	b91b      	cbnz	r3, 801355c <_malloc_r+0x3c>
 8013554:	4630      	mov	r0, r6
 8013556:	f000 fd15 	bl	8013f84 <_sbrk_r>
 801355a:	6020      	str	r0, [r4, #0]
 801355c:	4629      	mov	r1, r5
 801355e:	4630      	mov	r0, r6
 8013560:	f000 fd10 	bl	8013f84 <_sbrk_r>
 8013564:	1c43      	adds	r3, r0, #1
 8013566:	d124      	bne.n	80135b2 <_malloc_r+0x92>
 8013568:	230c      	movs	r3, #12
 801356a:	6033      	str	r3, [r6, #0]
 801356c:	4630      	mov	r0, r6
 801356e:	f001 fe40 	bl	80151f2 <__malloc_unlock>
 8013572:	e7e4      	b.n	801353e <_malloc_r+0x1e>
 8013574:	680b      	ldr	r3, [r1, #0]
 8013576:	1b5b      	subs	r3, r3, r5
 8013578:	d418      	bmi.n	80135ac <_malloc_r+0x8c>
 801357a:	2b0b      	cmp	r3, #11
 801357c:	d90f      	bls.n	801359e <_malloc_r+0x7e>
 801357e:	600b      	str	r3, [r1, #0]
 8013580:	50cd      	str	r5, [r1, r3]
 8013582:	18cc      	adds	r4, r1, r3
 8013584:	4630      	mov	r0, r6
 8013586:	f001 fe34 	bl	80151f2 <__malloc_unlock>
 801358a:	f104 000b 	add.w	r0, r4, #11
 801358e:	1d23      	adds	r3, r4, #4
 8013590:	f020 0007 	bic.w	r0, r0, #7
 8013594:	1ac3      	subs	r3, r0, r3
 8013596:	d0d3      	beq.n	8013540 <_malloc_r+0x20>
 8013598:	425a      	negs	r2, r3
 801359a:	50e2      	str	r2, [r4, r3]
 801359c:	e7d0      	b.n	8013540 <_malloc_r+0x20>
 801359e:	428c      	cmp	r4, r1
 80135a0:	684b      	ldr	r3, [r1, #4]
 80135a2:	bf16      	itet	ne
 80135a4:	6063      	strne	r3, [r4, #4]
 80135a6:	6013      	streq	r3, [r2, #0]
 80135a8:	460c      	movne	r4, r1
 80135aa:	e7eb      	b.n	8013584 <_malloc_r+0x64>
 80135ac:	460c      	mov	r4, r1
 80135ae:	6849      	ldr	r1, [r1, #4]
 80135b0:	e7cc      	b.n	801354c <_malloc_r+0x2c>
 80135b2:	1cc4      	adds	r4, r0, #3
 80135b4:	f024 0403 	bic.w	r4, r4, #3
 80135b8:	42a0      	cmp	r0, r4
 80135ba:	d005      	beq.n	80135c8 <_malloc_r+0xa8>
 80135bc:	1a21      	subs	r1, r4, r0
 80135be:	4630      	mov	r0, r6
 80135c0:	f000 fce0 	bl	8013f84 <_sbrk_r>
 80135c4:	3001      	adds	r0, #1
 80135c6:	d0cf      	beq.n	8013568 <_malloc_r+0x48>
 80135c8:	6025      	str	r5, [r4, #0]
 80135ca:	e7db      	b.n	8013584 <_malloc_r+0x64>
 80135cc:	20004864 	.word	0x20004864
 80135d0:	20004868 	.word	0x20004868

080135d4 <__cvt>:
 80135d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80135d8:	ec55 4b10 	vmov	r4, r5, d0
 80135dc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80135de:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80135e2:	2d00      	cmp	r5, #0
 80135e4:	460e      	mov	r6, r1
 80135e6:	4691      	mov	r9, r2
 80135e8:	4619      	mov	r1, r3
 80135ea:	bfb8      	it	lt
 80135ec:	4622      	movlt	r2, r4
 80135ee:	462b      	mov	r3, r5
 80135f0:	f027 0720 	bic.w	r7, r7, #32
 80135f4:	bfbb      	ittet	lt
 80135f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80135fa:	461d      	movlt	r5, r3
 80135fc:	2300      	movge	r3, #0
 80135fe:	232d      	movlt	r3, #45	; 0x2d
 8013600:	bfb8      	it	lt
 8013602:	4614      	movlt	r4, r2
 8013604:	2f46      	cmp	r7, #70	; 0x46
 8013606:	700b      	strb	r3, [r1, #0]
 8013608:	d004      	beq.n	8013614 <__cvt+0x40>
 801360a:	2f45      	cmp	r7, #69	; 0x45
 801360c:	d100      	bne.n	8013610 <__cvt+0x3c>
 801360e:	3601      	adds	r6, #1
 8013610:	2102      	movs	r1, #2
 8013612:	e000      	b.n	8013616 <__cvt+0x42>
 8013614:	2103      	movs	r1, #3
 8013616:	ab03      	add	r3, sp, #12
 8013618:	9301      	str	r3, [sp, #4]
 801361a:	ab02      	add	r3, sp, #8
 801361c:	9300      	str	r3, [sp, #0]
 801361e:	4632      	mov	r2, r6
 8013620:	4653      	mov	r3, sl
 8013622:	ec45 4b10 	vmov	d0, r4, r5
 8013626:	f000 fe3f 	bl	80142a8 <_dtoa_r>
 801362a:	2f47      	cmp	r7, #71	; 0x47
 801362c:	4680      	mov	r8, r0
 801362e:	d102      	bne.n	8013636 <__cvt+0x62>
 8013630:	f019 0f01 	tst.w	r9, #1
 8013634:	d026      	beq.n	8013684 <__cvt+0xb0>
 8013636:	2f46      	cmp	r7, #70	; 0x46
 8013638:	eb08 0906 	add.w	r9, r8, r6
 801363c:	d111      	bne.n	8013662 <__cvt+0x8e>
 801363e:	f898 3000 	ldrb.w	r3, [r8]
 8013642:	2b30      	cmp	r3, #48	; 0x30
 8013644:	d10a      	bne.n	801365c <__cvt+0x88>
 8013646:	2200      	movs	r2, #0
 8013648:	2300      	movs	r3, #0
 801364a:	4620      	mov	r0, r4
 801364c:	4629      	mov	r1, r5
 801364e:	f7ed fa13 	bl	8000a78 <__aeabi_dcmpeq>
 8013652:	b918      	cbnz	r0, 801365c <__cvt+0x88>
 8013654:	f1c6 0601 	rsb	r6, r6, #1
 8013658:	f8ca 6000 	str.w	r6, [sl]
 801365c:	f8da 3000 	ldr.w	r3, [sl]
 8013660:	4499      	add	r9, r3
 8013662:	2200      	movs	r2, #0
 8013664:	2300      	movs	r3, #0
 8013666:	4620      	mov	r0, r4
 8013668:	4629      	mov	r1, r5
 801366a:	f7ed fa05 	bl	8000a78 <__aeabi_dcmpeq>
 801366e:	b938      	cbnz	r0, 8013680 <__cvt+0xac>
 8013670:	2230      	movs	r2, #48	; 0x30
 8013672:	9b03      	ldr	r3, [sp, #12]
 8013674:	454b      	cmp	r3, r9
 8013676:	d205      	bcs.n	8013684 <__cvt+0xb0>
 8013678:	1c59      	adds	r1, r3, #1
 801367a:	9103      	str	r1, [sp, #12]
 801367c:	701a      	strb	r2, [r3, #0]
 801367e:	e7f8      	b.n	8013672 <__cvt+0x9e>
 8013680:	f8cd 900c 	str.w	r9, [sp, #12]
 8013684:	9b03      	ldr	r3, [sp, #12]
 8013686:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013688:	eba3 0308 	sub.w	r3, r3, r8
 801368c:	4640      	mov	r0, r8
 801368e:	6013      	str	r3, [r2, #0]
 8013690:	b004      	add	sp, #16
 8013692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013696 <__exponent>:
 8013696:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013698:	2900      	cmp	r1, #0
 801369a:	4604      	mov	r4, r0
 801369c:	bfba      	itte	lt
 801369e:	4249      	neglt	r1, r1
 80136a0:	232d      	movlt	r3, #45	; 0x2d
 80136a2:	232b      	movge	r3, #43	; 0x2b
 80136a4:	2909      	cmp	r1, #9
 80136a6:	f804 2b02 	strb.w	r2, [r4], #2
 80136aa:	7043      	strb	r3, [r0, #1]
 80136ac:	dd20      	ble.n	80136f0 <__exponent+0x5a>
 80136ae:	f10d 0307 	add.w	r3, sp, #7
 80136b2:	461f      	mov	r7, r3
 80136b4:	260a      	movs	r6, #10
 80136b6:	fb91 f5f6 	sdiv	r5, r1, r6
 80136ba:	fb06 1115 	mls	r1, r6, r5, r1
 80136be:	3130      	adds	r1, #48	; 0x30
 80136c0:	2d09      	cmp	r5, #9
 80136c2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80136c6:	f103 32ff 	add.w	r2, r3, #4294967295
 80136ca:	4629      	mov	r1, r5
 80136cc:	dc09      	bgt.n	80136e2 <__exponent+0x4c>
 80136ce:	3130      	adds	r1, #48	; 0x30
 80136d0:	3b02      	subs	r3, #2
 80136d2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80136d6:	42bb      	cmp	r3, r7
 80136d8:	4622      	mov	r2, r4
 80136da:	d304      	bcc.n	80136e6 <__exponent+0x50>
 80136dc:	1a10      	subs	r0, r2, r0
 80136de:	b003      	add	sp, #12
 80136e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136e2:	4613      	mov	r3, r2
 80136e4:	e7e7      	b.n	80136b6 <__exponent+0x20>
 80136e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136ea:	f804 2b01 	strb.w	r2, [r4], #1
 80136ee:	e7f2      	b.n	80136d6 <__exponent+0x40>
 80136f0:	2330      	movs	r3, #48	; 0x30
 80136f2:	4419      	add	r1, r3
 80136f4:	7083      	strb	r3, [r0, #2]
 80136f6:	1d02      	adds	r2, r0, #4
 80136f8:	70c1      	strb	r1, [r0, #3]
 80136fa:	e7ef      	b.n	80136dc <__exponent+0x46>

080136fc <_printf_float>:
 80136fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013700:	b08d      	sub	sp, #52	; 0x34
 8013702:	460c      	mov	r4, r1
 8013704:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8013708:	4616      	mov	r6, r2
 801370a:	461f      	mov	r7, r3
 801370c:	4605      	mov	r5, r0
 801370e:	f001 fcfd 	bl	801510c <_localeconv_r>
 8013712:	6803      	ldr	r3, [r0, #0]
 8013714:	9304      	str	r3, [sp, #16]
 8013716:	4618      	mov	r0, r3
 8013718:	f7ec fd32 	bl	8000180 <strlen>
 801371c:	2300      	movs	r3, #0
 801371e:	930a      	str	r3, [sp, #40]	; 0x28
 8013720:	f8d8 3000 	ldr.w	r3, [r8]
 8013724:	9005      	str	r0, [sp, #20]
 8013726:	3307      	adds	r3, #7
 8013728:	f023 0307 	bic.w	r3, r3, #7
 801372c:	f103 0208 	add.w	r2, r3, #8
 8013730:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013734:	f8d4 b000 	ldr.w	fp, [r4]
 8013738:	f8c8 2000 	str.w	r2, [r8]
 801373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013740:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013744:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013748:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801374c:	9307      	str	r3, [sp, #28]
 801374e:	f8cd 8018 	str.w	r8, [sp, #24]
 8013752:	f04f 32ff 	mov.w	r2, #4294967295
 8013756:	4ba7      	ldr	r3, [pc, #668]	; (80139f4 <_printf_float+0x2f8>)
 8013758:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801375c:	f7ed f9be 	bl	8000adc <__aeabi_dcmpun>
 8013760:	bb70      	cbnz	r0, 80137c0 <_printf_float+0xc4>
 8013762:	f04f 32ff 	mov.w	r2, #4294967295
 8013766:	4ba3      	ldr	r3, [pc, #652]	; (80139f4 <_printf_float+0x2f8>)
 8013768:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801376c:	f7ed f998 	bl	8000aa0 <__aeabi_dcmple>
 8013770:	bb30      	cbnz	r0, 80137c0 <_printf_float+0xc4>
 8013772:	2200      	movs	r2, #0
 8013774:	2300      	movs	r3, #0
 8013776:	4640      	mov	r0, r8
 8013778:	4649      	mov	r1, r9
 801377a:	f7ed f987 	bl	8000a8c <__aeabi_dcmplt>
 801377e:	b110      	cbz	r0, 8013786 <_printf_float+0x8a>
 8013780:	232d      	movs	r3, #45	; 0x2d
 8013782:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013786:	4a9c      	ldr	r2, [pc, #624]	; (80139f8 <_printf_float+0x2fc>)
 8013788:	4b9c      	ldr	r3, [pc, #624]	; (80139fc <_printf_float+0x300>)
 801378a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801378e:	bf8c      	ite	hi
 8013790:	4690      	movhi	r8, r2
 8013792:	4698      	movls	r8, r3
 8013794:	2303      	movs	r3, #3
 8013796:	f02b 0204 	bic.w	r2, fp, #4
 801379a:	6123      	str	r3, [r4, #16]
 801379c:	6022      	str	r2, [r4, #0]
 801379e:	f04f 0900 	mov.w	r9, #0
 80137a2:	9700      	str	r7, [sp, #0]
 80137a4:	4633      	mov	r3, r6
 80137a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80137a8:	4621      	mov	r1, r4
 80137aa:	4628      	mov	r0, r5
 80137ac:	f000 f9e6 	bl	8013b7c <_printf_common>
 80137b0:	3001      	adds	r0, #1
 80137b2:	f040 808d 	bne.w	80138d0 <_printf_float+0x1d4>
 80137b6:	f04f 30ff 	mov.w	r0, #4294967295
 80137ba:	b00d      	add	sp, #52	; 0x34
 80137bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137c0:	4642      	mov	r2, r8
 80137c2:	464b      	mov	r3, r9
 80137c4:	4640      	mov	r0, r8
 80137c6:	4649      	mov	r1, r9
 80137c8:	f7ed f988 	bl	8000adc <__aeabi_dcmpun>
 80137cc:	b110      	cbz	r0, 80137d4 <_printf_float+0xd8>
 80137ce:	4a8c      	ldr	r2, [pc, #560]	; (8013a00 <_printf_float+0x304>)
 80137d0:	4b8c      	ldr	r3, [pc, #560]	; (8013a04 <_printf_float+0x308>)
 80137d2:	e7da      	b.n	801378a <_printf_float+0x8e>
 80137d4:	6861      	ldr	r1, [r4, #4]
 80137d6:	1c4b      	adds	r3, r1, #1
 80137d8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80137dc:	a80a      	add	r0, sp, #40	; 0x28
 80137de:	d13e      	bne.n	801385e <_printf_float+0x162>
 80137e0:	2306      	movs	r3, #6
 80137e2:	6063      	str	r3, [r4, #4]
 80137e4:	2300      	movs	r3, #0
 80137e6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80137ea:	ab09      	add	r3, sp, #36	; 0x24
 80137ec:	9300      	str	r3, [sp, #0]
 80137ee:	ec49 8b10 	vmov	d0, r8, r9
 80137f2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80137f6:	6022      	str	r2, [r4, #0]
 80137f8:	f8cd a004 	str.w	sl, [sp, #4]
 80137fc:	6861      	ldr	r1, [r4, #4]
 80137fe:	4628      	mov	r0, r5
 8013800:	f7ff fee8 	bl	80135d4 <__cvt>
 8013804:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8013808:	2b47      	cmp	r3, #71	; 0x47
 801380a:	4680      	mov	r8, r0
 801380c:	d109      	bne.n	8013822 <_printf_float+0x126>
 801380e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013810:	1cd8      	adds	r0, r3, #3
 8013812:	db02      	blt.n	801381a <_printf_float+0x11e>
 8013814:	6862      	ldr	r2, [r4, #4]
 8013816:	4293      	cmp	r3, r2
 8013818:	dd47      	ble.n	80138aa <_printf_float+0x1ae>
 801381a:	f1aa 0a02 	sub.w	sl, sl, #2
 801381e:	fa5f fa8a 	uxtb.w	sl, sl
 8013822:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8013826:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013828:	d824      	bhi.n	8013874 <_printf_float+0x178>
 801382a:	3901      	subs	r1, #1
 801382c:	4652      	mov	r2, sl
 801382e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013832:	9109      	str	r1, [sp, #36]	; 0x24
 8013834:	f7ff ff2f 	bl	8013696 <__exponent>
 8013838:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801383a:	1813      	adds	r3, r2, r0
 801383c:	2a01      	cmp	r2, #1
 801383e:	4681      	mov	r9, r0
 8013840:	6123      	str	r3, [r4, #16]
 8013842:	dc02      	bgt.n	801384a <_printf_float+0x14e>
 8013844:	6822      	ldr	r2, [r4, #0]
 8013846:	07d1      	lsls	r1, r2, #31
 8013848:	d501      	bpl.n	801384e <_printf_float+0x152>
 801384a:	3301      	adds	r3, #1
 801384c:	6123      	str	r3, [r4, #16]
 801384e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013852:	2b00      	cmp	r3, #0
 8013854:	d0a5      	beq.n	80137a2 <_printf_float+0xa6>
 8013856:	232d      	movs	r3, #45	; 0x2d
 8013858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801385c:	e7a1      	b.n	80137a2 <_printf_float+0xa6>
 801385e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8013862:	f000 8177 	beq.w	8013b54 <_printf_float+0x458>
 8013866:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801386a:	d1bb      	bne.n	80137e4 <_printf_float+0xe8>
 801386c:	2900      	cmp	r1, #0
 801386e:	d1b9      	bne.n	80137e4 <_printf_float+0xe8>
 8013870:	2301      	movs	r3, #1
 8013872:	e7b6      	b.n	80137e2 <_printf_float+0xe6>
 8013874:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8013878:	d119      	bne.n	80138ae <_printf_float+0x1b2>
 801387a:	2900      	cmp	r1, #0
 801387c:	6863      	ldr	r3, [r4, #4]
 801387e:	dd0c      	ble.n	801389a <_printf_float+0x19e>
 8013880:	6121      	str	r1, [r4, #16]
 8013882:	b913      	cbnz	r3, 801388a <_printf_float+0x18e>
 8013884:	6822      	ldr	r2, [r4, #0]
 8013886:	07d2      	lsls	r2, r2, #31
 8013888:	d502      	bpl.n	8013890 <_printf_float+0x194>
 801388a:	3301      	adds	r3, #1
 801388c:	440b      	add	r3, r1
 801388e:	6123      	str	r3, [r4, #16]
 8013890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013892:	65a3      	str	r3, [r4, #88]	; 0x58
 8013894:	f04f 0900 	mov.w	r9, #0
 8013898:	e7d9      	b.n	801384e <_printf_float+0x152>
 801389a:	b913      	cbnz	r3, 80138a2 <_printf_float+0x1a6>
 801389c:	6822      	ldr	r2, [r4, #0]
 801389e:	07d0      	lsls	r0, r2, #31
 80138a0:	d501      	bpl.n	80138a6 <_printf_float+0x1aa>
 80138a2:	3302      	adds	r3, #2
 80138a4:	e7f3      	b.n	801388e <_printf_float+0x192>
 80138a6:	2301      	movs	r3, #1
 80138a8:	e7f1      	b.n	801388e <_printf_float+0x192>
 80138aa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80138ae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80138b2:	4293      	cmp	r3, r2
 80138b4:	db05      	blt.n	80138c2 <_printf_float+0x1c6>
 80138b6:	6822      	ldr	r2, [r4, #0]
 80138b8:	6123      	str	r3, [r4, #16]
 80138ba:	07d1      	lsls	r1, r2, #31
 80138bc:	d5e8      	bpl.n	8013890 <_printf_float+0x194>
 80138be:	3301      	adds	r3, #1
 80138c0:	e7e5      	b.n	801388e <_printf_float+0x192>
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	bfd4      	ite	le
 80138c6:	f1c3 0302 	rsble	r3, r3, #2
 80138ca:	2301      	movgt	r3, #1
 80138cc:	4413      	add	r3, r2
 80138ce:	e7de      	b.n	801388e <_printf_float+0x192>
 80138d0:	6823      	ldr	r3, [r4, #0]
 80138d2:	055a      	lsls	r2, r3, #21
 80138d4:	d407      	bmi.n	80138e6 <_printf_float+0x1ea>
 80138d6:	6923      	ldr	r3, [r4, #16]
 80138d8:	4642      	mov	r2, r8
 80138da:	4631      	mov	r1, r6
 80138dc:	4628      	mov	r0, r5
 80138de:	47b8      	blx	r7
 80138e0:	3001      	adds	r0, #1
 80138e2:	d12b      	bne.n	801393c <_printf_float+0x240>
 80138e4:	e767      	b.n	80137b6 <_printf_float+0xba>
 80138e6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80138ea:	f240 80dc 	bls.w	8013aa6 <_printf_float+0x3aa>
 80138ee:	2200      	movs	r2, #0
 80138f0:	2300      	movs	r3, #0
 80138f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80138f6:	f7ed f8bf 	bl	8000a78 <__aeabi_dcmpeq>
 80138fa:	2800      	cmp	r0, #0
 80138fc:	d033      	beq.n	8013966 <_printf_float+0x26a>
 80138fe:	2301      	movs	r3, #1
 8013900:	4a41      	ldr	r2, [pc, #260]	; (8013a08 <_printf_float+0x30c>)
 8013902:	4631      	mov	r1, r6
 8013904:	4628      	mov	r0, r5
 8013906:	47b8      	blx	r7
 8013908:	3001      	adds	r0, #1
 801390a:	f43f af54 	beq.w	80137b6 <_printf_float+0xba>
 801390e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013912:	429a      	cmp	r2, r3
 8013914:	db02      	blt.n	801391c <_printf_float+0x220>
 8013916:	6823      	ldr	r3, [r4, #0]
 8013918:	07d8      	lsls	r0, r3, #31
 801391a:	d50f      	bpl.n	801393c <_printf_float+0x240>
 801391c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013920:	4631      	mov	r1, r6
 8013922:	4628      	mov	r0, r5
 8013924:	47b8      	blx	r7
 8013926:	3001      	adds	r0, #1
 8013928:	f43f af45 	beq.w	80137b6 <_printf_float+0xba>
 801392c:	f04f 0800 	mov.w	r8, #0
 8013930:	f104 091a 	add.w	r9, r4, #26
 8013934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013936:	3b01      	subs	r3, #1
 8013938:	4543      	cmp	r3, r8
 801393a:	dc09      	bgt.n	8013950 <_printf_float+0x254>
 801393c:	6823      	ldr	r3, [r4, #0]
 801393e:	079b      	lsls	r3, r3, #30
 8013940:	f100 8103 	bmi.w	8013b4a <_printf_float+0x44e>
 8013944:	68e0      	ldr	r0, [r4, #12]
 8013946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013948:	4298      	cmp	r0, r3
 801394a:	bfb8      	it	lt
 801394c:	4618      	movlt	r0, r3
 801394e:	e734      	b.n	80137ba <_printf_float+0xbe>
 8013950:	2301      	movs	r3, #1
 8013952:	464a      	mov	r2, r9
 8013954:	4631      	mov	r1, r6
 8013956:	4628      	mov	r0, r5
 8013958:	47b8      	blx	r7
 801395a:	3001      	adds	r0, #1
 801395c:	f43f af2b 	beq.w	80137b6 <_printf_float+0xba>
 8013960:	f108 0801 	add.w	r8, r8, #1
 8013964:	e7e6      	b.n	8013934 <_printf_float+0x238>
 8013966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013968:	2b00      	cmp	r3, #0
 801396a:	dc2b      	bgt.n	80139c4 <_printf_float+0x2c8>
 801396c:	2301      	movs	r3, #1
 801396e:	4a26      	ldr	r2, [pc, #152]	; (8013a08 <_printf_float+0x30c>)
 8013970:	4631      	mov	r1, r6
 8013972:	4628      	mov	r0, r5
 8013974:	47b8      	blx	r7
 8013976:	3001      	adds	r0, #1
 8013978:	f43f af1d 	beq.w	80137b6 <_printf_float+0xba>
 801397c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801397e:	b923      	cbnz	r3, 801398a <_printf_float+0x28e>
 8013980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013982:	b913      	cbnz	r3, 801398a <_printf_float+0x28e>
 8013984:	6823      	ldr	r3, [r4, #0]
 8013986:	07d9      	lsls	r1, r3, #31
 8013988:	d5d8      	bpl.n	801393c <_printf_float+0x240>
 801398a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801398e:	4631      	mov	r1, r6
 8013990:	4628      	mov	r0, r5
 8013992:	47b8      	blx	r7
 8013994:	3001      	adds	r0, #1
 8013996:	f43f af0e 	beq.w	80137b6 <_printf_float+0xba>
 801399a:	f04f 0900 	mov.w	r9, #0
 801399e:	f104 0a1a 	add.w	sl, r4, #26
 80139a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139a4:	425b      	negs	r3, r3
 80139a6:	454b      	cmp	r3, r9
 80139a8:	dc01      	bgt.n	80139ae <_printf_float+0x2b2>
 80139aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139ac:	e794      	b.n	80138d8 <_printf_float+0x1dc>
 80139ae:	2301      	movs	r3, #1
 80139b0:	4652      	mov	r2, sl
 80139b2:	4631      	mov	r1, r6
 80139b4:	4628      	mov	r0, r5
 80139b6:	47b8      	blx	r7
 80139b8:	3001      	adds	r0, #1
 80139ba:	f43f aefc 	beq.w	80137b6 <_printf_float+0xba>
 80139be:	f109 0901 	add.w	r9, r9, #1
 80139c2:	e7ee      	b.n	80139a2 <_printf_float+0x2a6>
 80139c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80139c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80139c8:	429a      	cmp	r2, r3
 80139ca:	bfa8      	it	ge
 80139cc:	461a      	movge	r2, r3
 80139ce:	2a00      	cmp	r2, #0
 80139d0:	4691      	mov	r9, r2
 80139d2:	dd07      	ble.n	80139e4 <_printf_float+0x2e8>
 80139d4:	4613      	mov	r3, r2
 80139d6:	4631      	mov	r1, r6
 80139d8:	4642      	mov	r2, r8
 80139da:	4628      	mov	r0, r5
 80139dc:	47b8      	blx	r7
 80139de:	3001      	adds	r0, #1
 80139e0:	f43f aee9 	beq.w	80137b6 <_printf_float+0xba>
 80139e4:	f104 031a 	add.w	r3, r4, #26
 80139e8:	f04f 0b00 	mov.w	fp, #0
 80139ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80139f0:	9306      	str	r3, [sp, #24]
 80139f2:	e015      	b.n	8013a20 <_printf_float+0x324>
 80139f4:	7fefffff 	.word	0x7fefffff
 80139f8:	08017d38 	.word	0x08017d38
 80139fc:	08017d34 	.word	0x08017d34
 8013a00:	08017d40 	.word	0x08017d40
 8013a04:	08017d3c 	.word	0x08017d3c
 8013a08:	08017d44 	.word	0x08017d44
 8013a0c:	2301      	movs	r3, #1
 8013a0e:	9a06      	ldr	r2, [sp, #24]
 8013a10:	4631      	mov	r1, r6
 8013a12:	4628      	mov	r0, r5
 8013a14:	47b8      	blx	r7
 8013a16:	3001      	adds	r0, #1
 8013a18:	f43f aecd 	beq.w	80137b6 <_printf_float+0xba>
 8013a1c:	f10b 0b01 	add.w	fp, fp, #1
 8013a20:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8013a24:	ebaa 0309 	sub.w	r3, sl, r9
 8013a28:	455b      	cmp	r3, fp
 8013a2a:	dcef      	bgt.n	8013a0c <_printf_float+0x310>
 8013a2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013a30:	429a      	cmp	r2, r3
 8013a32:	44d0      	add	r8, sl
 8013a34:	db15      	blt.n	8013a62 <_printf_float+0x366>
 8013a36:	6823      	ldr	r3, [r4, #0]
 8013a38:	07da      	lsls	r2, r3, #31
 8013a3a:	d412      	bmi.n	8013a62 <_printf_float+0x366>
 8013a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013a40:	eba3 020a 	sub.w	r2, r3, sl
 8013a44:	eba3 0a01 	sub.w	sl, r3, r1
 8013a48:	4592      	cmp	sl, r2
 8013a4a:	bfa8      	it	ge
 8013a4c:	4692      	movge	sl, r2
 8013a4e:	f1ba 0f00 	cmp.w	sl, #0
 8013a52:	dc0e      	bgt.n	8013a72 <_printf_float+0x376>
 8013a54:	f04f 0800 	mov.w	r8, #0
 8013a58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013a5c:	f104 091a 	add.w	r9, r4, #26
 8013a60:	e019      	b.n	8013a96 <_printf_float+0x39a>
 8013a62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013a66:	4631      	mov	r1, r6
 8013a68:	4628      	mov	r0, r5
 8013a6a:	47b8      	blx	r7
 8013a6c:	3001      	adds	r0, #1
 8013a6e:	d1e5      	bne.n	8013a3c <_printf_float+0x340>
 8013a70:	e6a1      	b.n	80137b6 <_printf_float+0xba>
 8013a72:	4653      	mov	r3, sl
 8013a74:	4642      	mov	r2, r8
 8013a76:	4631      	mov	r1, r6
 8013a78:	4628      	mov	r0, r5
 8013a7a:	47b8      	blx	r7
 8013a7c:	3001      	adds	r0, #1
 8013a7e:	d1e9      	bne.n	8013a54 <_printf_float+0x358>
 8013a80:	e699      	b.n	80137b6 <_printf_float+0xba>
 8013a82:	2301      	movs	r3, #1
 8013a84:	464a      	mov	r2, r9
 8013a86:	4631      	mov	r1, r6
 8013a88:	4628      	mov	r0, r5
 8013a8a:	47b8      	blx	r7
 8013a8c:	3001      	adds	r0, #1
 8013a8e:	f43f ae92 	beq.w	80137b6 <_printf_float+0xba>
 8013a92:	f108 0801 	add.w	r8, r8, #1
 8013a96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013a9a:	1a9b      	subs	r3, r3, r2
 8013a9c:	eba3 030a 	sub.w	r3, r3, sl
 8013aa0:	4543      	cmp	r3, r8
 8013aa2:	dcee      	bgt.n	8013a82 <_printf_float+0x386>
 8013aa4:	e74a      	b.n	801393c <_printf_float+0x240>
 8013aa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013aa8:	2a01      	cmp	r2, #1
 8013aaa:	dc01      	bgt.n	8013ab0 <_printf_float+0x3b4>
 8013aac:	07db      	lsls	r3, r3, #31
 8013aae:	d53a      	bpl.n	8013b26 <_printf_float+0x42a>
 8013ab0:	2301      	movs	r3, #1
 8013ab2:	4642      	mov	r2, r8
 8013ab4:	4631      	mov	r1, r6
 8013ab6:	4628      	mov	r0, r5
 8013ab8:	47b8      	blx	r7
 8013aba:	3001      	adds	r0, #1
 8013abc:	f43f ae7b 	beq.w	80137b6 <_printf_float+0xba>
 8013ac0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013ac4:	4631      	mov	r1, r6
 8013ac6:	4628      	mov	r0, r5
 8013ac8:	47b8      	blx	r7
 8013aca:	3001      	adds	r0, #1
 8013acc:	f108 0801 	add.w	r8, r8, #1
 8013ad0:	f43f ae71 	beq.w	80137b6 <_printf_float+0xba>
 8013ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	f103 3aff 	add.w	sl, r3, #4294967295
 8013adc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	f7ec ffc9 	bl	8000a78 <__aeabi_dcmpeq>
 8013ae6:	b9c8      	cbnz	r0, 8013b1c <_printf_float+0x420>
 8013ae8:	4653      	mov	r3, sl
 8013aea:	4642      	mov	r2, r8
 8013aec:	4631      	mov	r1, r6
 8013aee:	4628      	mov	r0, r5
 8013af0:	47b8      	blx	r7
 8013af2:	3001      	adds	r0, #1
 8013af4:	d10e      	bne.n	8013b14 <_printf_float+0x418>
 8013af6:	e65e      	b.n	80137b6 <_printf_float+0xba>
 8013af8:	2301      	movs	r3, #1
 8013afa:	4652      	mov	r2, sl
 8013afc:	4631      	mov	r1, r6
 8013afe:	4628      	mov	r0, r5
 8013b00:	47b8      	blx	r7
 8013b02:	3001      	adds	r0, #1
 8013b04:	f43f ae57 	beq.w	80137b6 <_printf_float+0xba>
 8013b08:	f108 0801 	add.w	r8, r8, #1
 8013b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b0e:	3b01      	subs	r3, #1
 8013b10:	4543      	cmp	r3, r8
 8013b12:	dcf1      	bgt.n	8013af8 <_printf_float+0x3fc>
 8013b14:	464b      	mov	r3, r9
 8013b16:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013b1a:	e6de      	b.n	80138da <_printf_float+0x1de>
 8013b1c:	f04f 0800 	mov.w	r8, #0
 8013b20:	f104 0a1a 	add.w	sl, r4, #26
 8013b24:	e7f2      	b.n	8013b0c <_printf_float+0x410>
 8013b26:	2301      	movs	r3, #1
 8013b28:	e7df      	b.n	8013aea <_printf_float+0x3ee>
 8013b2a:	2301      	movs	r3, #1
 8013b2c:	464a      	mov	r2, r9
 8013b2e:	4631      	mov	r1, r6
 8013b30:	4628      	mov	r0, r5
 8013b32:	47b8      	blx	r7
 8013b34:	3001      	adds	r0, #1
 8013b36:	f43f ae3e 	beq.w	80137b6 <_printf_float+0xba>
 8013b3a:	f108 0801 	add.w	r8, r8, #1
 8013b3e:	68e3      	ldr	r3, [r4, #12]
 8013b40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013b42:	1a9b      	subs	r3, r3, r2
 8013b44:	4543      	cmp	r3, r8
 8013b46:	dcf0      	bgt.n	8013b2a <_printf_float+0x42e>
 8013b48:	e6fc      	b.n	8013944 <_printf_float+0x248>
 8013b4a:	f04f 0800 	mov.w	r8, #0
 8013b4e:	f104 0919 	add.w	r9, r4, #25
 8013b52:	e7f4      	b.n	8013b3e <_printf_float+0x442>
 8013b54:	2900      	cmp	r1, #0
 8013b56:	f43f ae8b 	beq.w	8013870 <_printf_float+0x174>
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8013b60:	ab09      	add	r3, sp, #36	; 0x24
 8013b62:	9300      	str	r3, [sp, #0]
 8013b64:	ec49 8b10 	vmov	d0, r8, r9
 8013b68:	6022      	str	r2, [r4, #0]
 8013b6a:	f8cd a004 	str.w	sl, [sp, #4]
 8013b6e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013b72:	4628      	mov	r0, r5
 8013b74:	f7ff fd2e 	bl	80135d4 <__cvt>
 8013b78:	4680      	mov	r8, r0
 8013b7a:	e648      	b.n	801380e <_printf_float+0x112>

08013b7c <_printf_common>:
 8013b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b80:	4691      	mov	r9, r2
 8013b82:	461f      	mov	r7, r3
 8013b84:	688a      	ldr	r2, [r1, #8]
 8013b86:	690b      	ldr	r3, [r1, #16]
 8013b88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013b8c:	4293      	cmp	r3, r2
 8013b8e:	bfb8      	it	lt
 8013b90:	4613      	movlt	r3, r2
 8013b92:	f8c9 3000 	str.w	r3, [r9]
 8013b96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013b9a:	4606      	mov	r6, r0
 8013b9c:	460c      	mov	r4, r1
 8013b9e:	b112      	cbz	r2, 8013ba6 <_printf_common+0x2a>
 8013ba0:	3301      	adds	r3, #1
 8013ba2:	f8c9 3000 	str.w	r3, [r9]
 8013ba6:	6823      	ldr	r3, [r4, #0]
 8013ba8:	0699      	lsls	r1, r3, #26
 8013baa:	bf42      	ittt	mi
 8013bac:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013bb0:	3302      	addmi	r3, #2
 8013bb2:	f8c9 3000 	strmi.w	r3, [r9]
 8013bb6:	6825      	ldr	r5, [r4, #0]
 8013bb8:	f015 0506 	ands.w	r5, r5, #6
 8013bbc:	d107      	bne.n	8013bce <_printf_common+0x52>
 8013bbe:	f104 0a19 	add.w	sl, r4, #25
 8013bc2:	68e3      	ldr	r3, [r4, #12]
 8013bc4:	f8d9 2000 	ldr.w	r2, [r9]
 8013bc8:	1a9b      	subs	r3, r3, r2
 8013bca:	42ab      	cmp	r3, r5
 8013bcc:	dc28      	bgt.n	8013c20 <_printf_common+0xa4>
 8013bce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013bd2:	6822      	ldr	r2, [r4, #0]
 8013bd4:	3300      	adds	r3, #0
 8013bd6:	bf18      	it	ne
 8013bd8:	2301      	movne	r3, #1
 8013bda:	0692      	lsls	r2, r2, #26
 8013bdc:	d42d      	bmi.n	8013c3a <_printf_common+0xbe>
 8013bde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013be2:	4639      	mov	r1, r7
 8013be4:	4630      	mov	r0, r6
 8013be6:	47c0      	blx	r8
 8013be8:	3001      	adds	r0, #1
 8013bea:	d020      	beq.n	8013c2e <_printf_common+0xb2>
 8013bec:	6823      	ldr	r3, [r4, #0]
 8013bee:	68e5      	ldr	r5, [r4, #12]
 8013bf0:	f8d9 2000 	ldr.w	r2, [r9]
 8013bf4:	f003 0306 	and.w	r3, r3, #6
 8013bf8:	2b04      	cmp	r3, #4
 8013bfa:	bf08      	it	eq
 8013bfc:	1aad      	subeq	r5, r5, r2
 8013bfe:	68a3      	ldr	r3, [r4, #8]
 8013c00:	6922      	ldr	r2, [r4, #16]
 8013c02:	bf0c      	ite	eq
 8013c04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013c08:	2500      	movne	r5, #0
 8013c0a:	4293      	cmp	r3, r2
 8013c0c:	bfc4      	itt	gt
 8013c0e:	1a9b      	subgt	r3, r3, r2
 8013c10:	18ed      	addgt	r5, r5, r3
 8013c12:	f04f 0900 	mov.w	r9, #0
 8013c16:	341a      	adds	r4, #26
 8013c18:	454d      	cmp	r5, r9
 8013c1a:	d11a      	bne.n	8013c52 <_printf_common+0xd6>
 8013c1c:	2000      	movs	r0, #0
 8013c1e:	e008      	b.n	8013c32 <_printf_common+0xb6>
 8013c20:	2301      	movs	r3, #1
 8013c22:	4652      	mov	r2, sl
 8013c24:	4639      	mov	r1, r7
 8013c26:	4630      	mov	r0, r6
 8013c28:	47c0      	blx	r8
 8013c2a:	3001      	adds	r0, #1
 8013c2c:	d103      	bne.n	8013c36 <_printf_common+0xba>
 8013c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8013c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c36:	3501      	adds	r5, #1
 8013c38:	e7c3      	b.n	8013bc2 <_printf_common+0x46>
 8013c3a:	18e1      	adds	r1, r4, r3
 8013c3c:	1c5a      	adds	r2, r3, #1
 8013c3e:	2030      	movs	r0, #48	; 0x30
 8013c40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013c44:	4422      	add	r2, r4
 8013c46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013c4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013c4e:	3302      	adds	r3, #2
 8013c50:	e7c5      	b.n	8013bde <_printf_common+0x62>
 8013c52:	2301      	movs	r3, #1
 8013c54:	4622      	mov	r2, r4
 8013c56:	4639      	mov	r1, r7
 8013c58:	4630      	mov	r0, r6
 8013c5a:	47c0      	blx	r8
 8013c5c:	3001      	adds	r0, #1
 8013c5e:	d0e6      	beq.n	8013c2e <_printf_common+0xb2>
 8013c60:	f109 0901 	add.w	r9, r9, #1
 8013c64:	e7d8      	b.n	8013c18 <_printf_common+0x9c>
	...

08013c68 <_printf_i>:
 8013c68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013c6c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013c70:	460c      	mov	r4, r1
 8013c72:	7e09      	ldrb	r1, [r1, #24]
 8013c74:	b085      	sub	sp, #20
 8013c76:	296e      	cmp	r1, #110	; 0x6e
 8013c78:	4617      	mov	r7, r2
 8013c7a:	4606      	mov	r6, r0
 8013c7c:	4698      	mov	r8, r3
 8013c7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013c80:	f000 80b3 	beq.w	8013dea <_printf_i+0x182>
 8013c84:	d822      	bhi.n	8013ccc <_printf_i+0x64>
 8013c86:	2963      	cmp	r1, #99	; 0x63
 8013c88:	d036      	beq.n	8013cf8 <_printf_i+0x90>
 8013c8a:	d80a      	bhi.n	8013ca2 <_printf_i+0x3a>
 8013c8c:	2900      	cmp	r1, #0
 8013c8e:	f000 80b9 	beq.w	8013e04 <_printf_i+0x19c>
 8013c92:	2958      	cmp	r1, #88	; 0x58
 8013c94:	f000 8083 	beq.w	8013d9e <_printf_i+0x136>
 8013c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013c9c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013ca0:	e032      	b.n	8013d08 <_printf_i+0xa0>
 8013ca2:	2964      	cmp	r1, #100	; 0x64
 8013ca4:	d001      	beq.n	8013caa <_printf_i+0x42>
 8013ca6:	2969      	cmp	r1, #105	; 0x69
 8013ca8:	d1f6      	bne.n	8013c98 <_printf_i+0x30>
 8013caa:	6820      	ldr	r0, [r4, #0]
 8013cac:	6813      	ldr	r3, [r2, #0]
 8013cae:	0605      	lsls	r5, r0, #24
 8013cb0:	f103 0104 	add.w	r1, r3, #4
 8013cb4:	d52a      	bpl.n	8013d0c <_printf_i+0xa4>
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	6011      	str	r1, [r2, #0]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	da03      	bge.n	8013cc6 <_printf_i+0x5e>
 8013cbe:	222d      	movs	r2, #45	; 0x2d
 8013cc0:	425b      	negs	r3, r3
 8013cc2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013cc6:	486f      	ldr	r0, [pc, #444]	; (8013e84 <_printf_i+0x21c>)
 8013cc8:	220a      	movs	r2, #10
 8013cca:	e039      	b.n	8013d40 <_printf_i+0xd8>
 8013ccc:	2973      	cmp	r1, #115	; 0x73
 8013cce:	f000 809d 	beq.w	8013e0c <_printf_i+0x1a4>
 8013cd2:	d808      	bhi.n	8013ce6 <_printf_i+0x7e>
 8013cd4:	296f      	cmp	r1, #111	; 0x6f
 8013cd6:	d020      	beq.n	8013d1a <_printf_i+0xb2>
 8013cd8:	2970      	cmp	r1, #112	; 0x70
 8013cda:	d1dd      	bne.n	8013c98 <_printf_i+0x30>
 8013cdc:	6823      	ldr	r3, [r4, #0]
 8013cde:	f043 0320 	orr.w	r3, r3, #32
 8013ce2:	6023      	str	r3, [r4, #0]
 8013ce4:	e003      	b.n	8013cee <_printf_i+0x86>
 8013ce6:	2975      	cmp	r1, #117	; 0x75
 8013ce8:	d017      	beq.n	8013d1a <_printf_i+0xb2>
 8013cea:	2978      	cmp	r1, #120	; 0x78
 8013cec:	d1d4      	bne.n	8013c98 <_printf_i+0x30>
 8013cee:	2378      	movs	r3, #120	; 0x78
 8013cf0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013cf4:	4864      	ldr	r0, [pc, #400]	; (8013e88 <_printf_i+0x220>)
 8013cf6:	e055      	b.n	8013da4 <_printf_i+0x13c>
 8013cf8:	6813      	ldr	r3, [r2, #0]
 8013cfa:	1d19      	adds	r1, r3, #4
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	6011      	str	r1, [r2, #0]
 8013d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013d08:	2301      	movs	r3, #1
 8013d0a:	e08c      	b.n	8013e26 <_printf_i+0x1be>
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	6011      	str	r1, [r2, #0]
 8013d10:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013d14:	bf18      	it	ne
 8013d16:	b21b      	sxthne	r3, r3
 8013d18:	e7cf      	b.n	8013cba <_printf_i+0x52>
 8013d1a:	6813      	ldr	r3, [r2, #0]
 8013d1c:	6825      	ldr	r5, [r4, #0]
 8013d1e:	1d18      	adds	r0, r3, #4
 8013d20:	6010      	str	r0, [r2, #0]
 8013d22:	0628      	lsls	r0, r5, #24
 8013d24:	d501      	bpl.n	8013d2a <_printf_i+0xc2>
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	e002      	b.n	8013d30 <_printf_i+0xc8>
 8013d2a:	0668      	lsls	r0, r5, #25
 8013d2c:	d5fb      	bpl.n	8013d26 <_printf_i+0xbe>
 8013d2e:	881b      	ldrh	r3, [r3, #0]
 8013d30:	4854      	ldr	r0, [pc, #336]	; (8013e84 <_printf_i+0x21c>)
 8013d32:	296f      	cmp	r1, #111	; 0x6f
 8013d34:	bf14      	ite	ne
 8013d36:	220a      	movne	r2, #10
 8013d38:	2208      	moveq	r2, #8
 8013d3a:	2100      	movs	r1, #0
 8013d3c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013d40:	6865      	ldr	r5, [r4, #4]
 8013d42:	60a5      	str	r5, [r4, #8]
 8013d44:	2d00      	cmp	r5, #0
 8013d46:	f2c0 8095 	blt.w	8013e74 <_printf_i+0x20c>
 8013d4a:	6821      	ldr	r1, [r4, #0]
 8013d4c:	f021 0104 	bic.w	r1, r1, #4
 8013d50:	6021      	str	r1, [r4, #0]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d13d      	bne.n	8013dd2 <_printf_i+0x16a>
 8013d56:	2d00      	cmp	r5, #0
 8013d58:	f040 808e 	bne.w	8013e78 <_printf_i+0x210>
 8013d5c:	4665      	mov	r5, ip
 8013d5e:	2a08      	cmp	r2, #8
 8013d60:	d10b      	bne.n	8013d7a <_printf_i+0x112>
 8013d62:	6823      	ldr	r3, [r4, #0]
 8013d64:	07db      	lsls	r3, r3, #31
 8013d66:	d508      	bpl.n	8013d7a <_printf_i+0x112>
 8013d68:	6923      	ldr	r3, [r4, #16]
 8013d6a:	6862      	ldr	r2, [r4, #4]
 8013d6c:	429a      	cmp	r2, r3
 8013d6e:	bfde      	ittt	le
 8013d70:	2330      	movle	r3, #48	; 0x30
 8013d72:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013d76:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013d7a:	ebac 0305 	sub.w	r3, ip, r5
 8013d7e:	6123      	str	r3, [r4, #16]
 8013d80:	f8cd 8000 	str.w	r8, [sp]
 8013d84:	463b      	mov	r3, r7
 8013d86:	aa03      	add	r2, sp, #12
 8013d88:	4621      	mov	r1, r4
 8013d8a:	4630      	mov	r0, r6
 8013d8c:	f7ff fef6 	bl	8013b7c <_printf_common>
 8013d90:	3001      	adds	r0, #1
 8013d92:	d14d      	bne.n	8013e30 <_printf_i+0x1c8>
 8013d94:	f04f 30ff 	mov.w	r0, #4294967295
 8013d98:	b005      	add	sp, #20
 8013d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d9e:	4839      	ldr	r0, [pc, #228]	; (8013e84 <_printf_i+0x21c>)
 8013da0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013da4:	6813      	ldr	r3, [r2, #0]
 8013da6:	6821      	ldr	r1, [r4, #0]
 8013da8:	1d1d      	adds	r5, r3, #4
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	6015      	str	r5, [r2, #0]
 8013dae:	060a      	lsls	r2, r1, #24
 8013db0:	d50b      	bpl.n	8013dca <_printf_i+0x162>
 8013db2:	07ca      	lsls	r2, r1, #31
 8013db4:	bf44      	itt	mi
 8013db6:	f041 0120 	orrmi.w	r1, r1, #32
 8013dba:	6021      	strmi	r1, [r4, #0]
 8013dbc:	b91b      	cbnz	r3, 8013dc6 <_printf_i+0x15e>
 8013dbe:	6822      	ldr	r2, [r4, #0]
 8013dc0:	f022 0220 	bic.w	r2, r2, #32
 8013dc4:	6022      	str	r2, [r4, #0]
 8013dc6:	2210      	movs	r2, #16
 8013dc8:	e7b7      	b.n	8013d3a <_printf_i+0xd2>
 8013dca:	064d      	lsls	r5, r1, #25
 8013dcc:	bf48      	it	mi
 8013dce:	b29b      	uxthmi	r3, r3
 8013dd0:	e7ef      	b.n	8013db2 <_printf_i+0x14a>
 8013dd2:	4665      	mov	r5, ip
 8013dd4:	fbb3 f1f2 	udiv	r1, r3, r2
 8013dd8:	fb02 3311 	mls	r3, r2, r1, r3
 8013ddc:	5cc3      	ldrb	r3, [r0, r3]
 8013dde:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013de2:	460b      	mov	r3, r1
 8013de4:	2900      	cmp	r1, #0
 8013de6:	d1f5      	bne.n	8013dd4 <_printf_i+0x16c>
 8013de8:	e7b9      	b.n	8013d5e <_printf_i+0xf6>
 8013dea:	6813      	ldr	r3, [r2, #0]
 8013dec:	6825      	ldr	r5, [r4, #0]
 8013dee:	6961      	ldr	r1, [r4, #20]
 8013df0:	1d18      	adds	r0, r3, #4
 8013df2:	6010      	str	r0, [r2, #0]
 8013df4:	0628      	lsls	r0, r5, #24
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	d501      	bpl.n	8013dfe <_printf_i+0x196>
 8013dfa:	6019      	str	r1, [r3, #0]
 8013dfc:	e002      	b.n	8013e04 <_printf_i+0x19c>
 8013dfe:	066a      	lsls	r2, r5, #25
 8013e00:	d5fb      	bpl.n	8013dfa <_printf_i+0x192>
 8013e02:	8019      	strh	r1, [r3, #0]
 8013e04:	2300      	movs	r3, #0
 8013e06:	6123      	str	r3, [r4, #16]
 8013e08:	4665      	mov	r5, ip
 8013e0a:	e7b9      	b.n	8013d80 <_printf_i+0x118>
 8013e0c:	6813      	ldr	r3, [r2, #0]
 8013e0e:	1d19      	adds	r1, r3, #4
 8013e10:	6011      	str	r1, [r2, #0]
 8013e12:	681d      	ldr	r5, [r3, #0]
 8013e14:	6862      	ldr	r2, [r4, #4]
 8013e16:	2100      	movs	r1, #0
 8013e18:	4628      	mov	r0, r5
 8013e1a:	f7ec f9b9 	bl	8000190 <memchr>
 8013e1e:	b108      	cbz	r0, 8013e24 <_printf_i+0x1bc>
 8013e20:	1b40      	subs	r0, r0, r5
 8013e22:	6060      	str	r0, [r4, #4]
 8013e24:	6863      	ldr	r3, [r4, #4]
 8013e26:	6123      	str	r3, [r4, #16]
 8013e28:	2300      	movs	r3, #0
 8013e2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013e2e:	e7a7      	b.n	8013d80 <_printf_i+0x118>
 8013e30:	6923      	ldr	r3, [r4, #16]
 8013e32:	462a      	mov	r2, r5
 8013e34:	4639      	mov	r1, r7
 8013e36:	4630      	mov	r0, r6
 8013e38:	47c0      	blx	r8
 8013e3a:	3001      	adds	r0, #1
 8013e3c:	d0aa      	beq.n	8013d94 <_printf_i+0x12c>
 8013e3e:	6823      	ldr	r3, [r4, #0]
 8013e40:	079b      	lsls	r3, r3, #30
 8013e42:	d413      	bmi.n	8013e6c <_printf_i+0x204>
 8013e44:	68e0      	ldr	r0, [r4, #12]
 8013e46:	9b03      	ldr	r3, [sp, #12]
 8013e48:	4298      	cmp	r0, r3
 8013e4a:	bfb8      	it	lt
 8013e4c:	4618      	movlt	r0, r3
 8013e4e:	e7a3      	b.n	8013d98 <_printf_i+0x130>
 8013e50:	2301      	movs	r3, #1
 8013e52:	464a      	mov	r2, r9
 8013e54:	4639      	mov	r1, r7
 8013e56:	4630      	mov	r0, r6
 8013e58:	47c0      	blx	r8
 8013e5a:	3001      	adds	r0, #1
 8013e5c:	d09a      	beq.n	8013d94 <_printf_i+0x12c>
 8013e5e:	3501      	adds	r5, #1
 8013e60:	68e3      	ldr	r3, [r4, #12]
 8013e62:	9a03      	ldr	r2, [sp, #12]
 8013e64:	1a9b      	subs	r3, r3, r2
 8013e66:	42ab      	cmp	r3, r5
 8013e68:	dcf2      	bgt.n	8013e50 <_printf_i+0x1e8>
 8013e6a:	e7eb      	b.n	8013e44 <_printf_i+0x1dc>
 8013e6c:	2500      	movs	r5, #0
 8013e6e:	f104 0919 	add.w	r9, r4, #25
 8013e72:	e7f5      	b.n	8013e60 <_printf_i+0x1f8>
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d1ac      	bne.n	8013dd2 <_printf_i+0x16a>
 8013e78:	7803      	ldrb	r3, [r0, #0]
 8013e7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013e7e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013e82:	e76c      	b.n	8013d5e <_printf_i+0xf6>
 8013e84:	08017d46 	.word	0x08017d46
 8013e88:	08017d57 	.word	0x08017d57

08013e8c <iprintf>:
 8013e8c:	b40f      	push	{r0, r1, r2, r3}
 8013e8e:	4b0a      	ldr	r3, [pc, #40]	; (8013eb8 <iprintf+0x2c>)
 8013e90:	b513      	push	{r0, r1, r4, lr}
 8013e92:	681c      	ldr	r4, [r3, #0]
 8013e94:	b124      	cbz	r4, 8013ea0 <iprintf+0x14>
 8013e96:	69a3      	ldr	r3, [r4, #24]
 8013e98:	b913      	cbnz	r3, 8013ea0 <iprintf+0x14>
 8013e9a:	4620      	mov	r0, r4
 8013e9c:	f001 f8ac 	bl	8014ff8 <__sinit>
 8013ea0:	ab05      	add	r3, sp, #20
 8013ea2:	9a04      	ldr	r2, [sp, #16]
 8013ea4:	68a1      	ldr	r1, [r4, #8]
 8013ea6:	9301      	str	r3, [sp, #4]
 8013ea8:	4620      	mov	r0, r4
 8013eaa:	f001 fe09 	bl	8015ac0 <_vfiprintf_r>
 8013eae:	b002      	add	sp, #8
 8013eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013eb4:	b004      	add	sp, #16
 8013eb6:	4770      	bx	lr
 8013eb8:	20000030 	.word	0x20000030

08013ebc <_puts_r>:
 8013ebc:	b570      	push	{r4, r5, r6, lr}
 8013ebe:	460e      	mov	r6, r1
 8013ec0:	4605      	mov	r5, r0
 8013ec2:	b118      	cbz	r0, 8013ecc <_puts_r+0x10>
 8013ec4:	6983      	ldr	r3, [r0, #24]
 8013ec6:	b90b      	cbnz	r3, 8013ecc <_puts_r+0x10>
 8013ec8:	f001 f896 	bl	8014ff8 <__sinit>
 8013ecc:	69ab      	ldr	r3, [r5, #24]
 8013ece:	68ac      	ldr	r4, [r5, #8]
 8013ed0:	b913      	cbnz	r3, 8013ed8 <_puts_r+0x1c>
 8013ed2:	4628      	mov	r0, r5
 8013ed4:	f001 f890 	bl	8014ff8 <__sinit>
 8013ed8:	4b23      	ldr	r3, [pc, #140]	; (8013f68 <_puts_r+0xac>)
 8013eda:	429c      	cmp	r4, r3
 8013edc:	d117      	bne.n	8013f0e <_puts_r+0x52>
 8013ede:	686c      	ldr	r4, [r5, #4]
 8013ee0:	89a3      	ldrh	r3, [r4, #12]
 8013ee2:	071b      	lsls	r3, r3, #28
 8013ee4:	d51d      	bpl.n	8013f22 <_puts_r+0x66>
 8013ee6:	6923      	ldr	r3, [r4, #16]
 8013ee8:	b1db      	cbz	r3, 8013f22 <_puts_r+0x66>
 8013eea:	3e01      	subs	r6, #1
 8013eec:	68a3      	ldr	r3, [r4, #8]
 8013eee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013ef2:	3b01      	subs	r3, #1
 8013ef4:	60a3      	str	r3, [r4, #8]
 8013ef6:	b9e9      	cbnz	r1, 8013f34 <_puts_r+0x78>
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	da2e      	bge.n	8013f5a <_puts_r+0x9e>
 8013efc:	4622      	mov	r2, r4
 8013efe:	210a      	movs	r1, #10
 8013f00:	4628      	mov	r0, r5
 8013f02:	f000 f885 	bl	8014010 <__swbuf_r>
 8013f06:	3001      	adds	r0, #1
 8013f08:	d011      	beq.n	8013f2e <_puts_r+0x72>
 8013f0a:	200a      	movs	r0, #10
 8013f0c:	e011      	b.n	8013f32 <_puts_r+0x76>
 8013f0e:	4b17      	ldr	r3, [pc, #92]	; (8013f6c <_puts_r+0xb0>)
 8013f10:	429c      	cmp	r4, r3
 8013f12:	d101      	bne.n	8013f18 <_puts_r+0x5c>
 8013f14:	68ac      	ldr	r4, [r5, #8]
 8013f16:	e7e3      	b.n	8013ee0 <_puts_r+0x24>
 8013f18:	4b15      	ldr	r3, [pc, #84]	; (8013f70 <_puts_r+0xb4>)
 8013f1a:	429c      	cmp	r4, r3
 8013f1c:	bf08      	it	eq
 8013f1e:	68ec      	ldreq	r4, [r5, #12]
 8013f20:	e7de      	b.n	8013ee0 <_puts_r+0x24>
 8013f22:	4621      	mov	r1, r4
 8013f24:	4628      	mov	r0, r5
 8013f26:	f000 f8c5 	bl	80140b4 <__swsetup_r>
 8013f2a:	2800      	cmp	r0, #0
 8013f2c:	d0dd      	beq.n	8013eea <_puts_r+0x2e>
 8013f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8013f32:	bd70      	pop	{r4, r5, r6, pc}
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	da04      	bge.n	8013f42 <_puts_r+0x86>
 8013f38:	69a2      	ldr	r2, [r4, #24]
 8013f3a:	429a      	cmp	r2, r3
 8013f3c:	dc06      	bgt.n	8013f4c <_puts_r+0x90>
 8013f3e:	290a      	cmp	r1, #10
 8013f40:	d004      	beq.n	8013f4c <_puts_r+0x90>
 8013f42:	6823      	ldr	r3, [r4, #0]
 8013f44:	1c5a      	adds	r2, r3, #1
 8013f46:	6022      	str	r2, [r4, #0]
 8013f48:	7019      	strb	r1, [r3, #0]
 8013f4a:	e7cf      	b.n	8013eec <_puts_r+0x30>
 8013f4c:	4622      	mov	r2, r4
 8013f4e:	4628      	mov	r0, r5
 8013f50:	f000 f85e 	bl	8014010 <__swbuf_r>
 8013f54:	3001      	adds	r0, #1
 8013f56:	d1c9      	bne.n	8013eec <_puts_r+0x30>
 8013f58:	e7e9      	b.n	8013f2e <_puts_r+0x72>
 8013f5a:	6823      	ldr	r3, [r4, #0]
 8013f5c:	200a      	movs	r0, #10
 8013f5e:	1c5a      	adds	r2, r3, #1
 8013f60:	6022      	str	r2, [r4, #0]
 8013f62:	7018      	strb	r0, [r3, #0]
 8013f64:	e7e5      	b.n	8013f32 <_puts_r+0x76>
 8013f66:	bf00      	nop
 8013f68:	08017d98 	.word	0x08017d98
 8013f6c:	08017db8 	.word	0x08017db8
 8013f70:	08017d78 	.word	0x08017d78

08013f74 <puts>:
 8013f74:	4b02      	ldr	r3, [pc, #8]	; (8013f80 <puts+0xc>)
 8013f76:	4601      	mov	r1, r0
 8013f78:	6818      	ldr	r0, [r3, #0]
 8013f7a:	f7ff bf9f 	b.w	8013ebc <_puts_r>
 8013f7e:	bf00      	nop
 8013f80:	20000030 	.word	0x20000030

08013f84 <_sbrk_r>:
 8013f84:	b538      	push	{r3, r4, r5, lr}
 8013f86:	4c06      	ldr	r4, [pc, #24]	; (8013fa0 <_sbrk_r+0x1c>)
 8013f88:	2300      	movs	r3, #0
 8013f8a:	4605      	mov	r5, r0
 8013f8c:	4608      	mov	r0, r1
 8013f8e:	6023      	str	r3, [r4, #0]
 8013f90:	f7f1 feba 	bl	8005d08 <_sbrk>
 8013f94:	1c43      	adds	r3, r0, #1
 8013f96:	d102      	bne.n	8013f9e <_sbrk_r+0x1a>
 8013f98:	6823      	ldr	r3, [r4, #0]
 8013f9a:	b103      	cbz	r3, 8013f9e <_sbrk_r+0x1a>
 8013f9c:	602b      	str	r3, [r5, #0]
 8013f9e:	bd38      	pop	{r3, r4, r5, pc}
 8013fa0:	20004cf4 	.word	0x20004cf4

08013fa4 <siprintf>:
 8013fa4:	b40e      	push	{r1, r2, r3}
 8013fa6:	b500      	push	{lr}
 8013fa8:	b09c      	sub	sp, #112	; 0x70
 8013faa:	ab1d      	add	r3, sp, #116	; 0x74
 8013fac:	9002      	str	r0, [sp, #8]
 8013fae:	9006      	str	r0, [sp, #24]
 8013fb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013fb4:	4809      	ldr	r0, [pc, #36]	; (8013fdc <siprintf+0x38>)
 8013fb6:	9107      	str	r1, [sp, #28]
 8013fb8:	9104      	str	r1, [sp, #16]
 8013fba:	4909      	ldr	r1, [pc, #36]	; (8013fe0 <siprintf+0x3c>)
 8013fbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8013fc0:	9105      	str	r1, [sp, #20]
 8013fc2:	6800      	ldr	r0, [r0, #0]
 8013fc4:	9301      	str	r3, [sp, #4]
 8013fc6:	a902      	add	r1, sp, #8
 8013fc8:	f001 fc58 	bl	801587c <_svfiprintf_r>
 8013fcc:	9b02      	ldr	r3, [sp, #8]
 8013fce:	2200      	movs	r2, #0
 8013fd0:	701a      	strb	r2, [r3, #0]
 8013fd2:	b01c      	add	sp, #112	; 0x70
 8013fd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8013fd8:	b003      	add	sp, #12
 8013fda:	4770      	bx	lr
 8013fdc:	20000030 	.word	0x20000030
 8013fe0:	ffff0208 	.word	0xffff0208

08013fe4 <strncpy>:
 8013fe4:	b570      	push	{r4, r5, r6, lr}
 8013fe6:	3901      	subs	r1, #1
 8013fe8:	4604      	mov	r4, r0
 8013fea:	b902      	cbnz	r2, 8013fee <strncpy+0xa>
 8013fec:	bd70      	pop	{r4, r5, r6, pc}
 8013fee:	4623      	mov	r3, r4
 8013ff0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8013ff4:	f803 5b01 	strb.w	r5, [r3], #1
 8013ff8:	1e56      	subs	r6, r2, #1
 8013ffa:	b92d      	cbnz	r5, 8014008 <strncpy+0x24>
 8013ffc:	4414      	add	r4, r2
 8013ffe:	42a3      	cmp	r3, r4
 8014000:	d0f4      	beq.n	8013fec <strncpy+0x8>
 8014002:	f803 5b01 	strb.w	r5, [r3], #1
 8014006:	e7fa      	b.n	8013ffe <strncpy+0x1a>
 8014008:	461c      	mov	r4, r3
 801400a:	4632      	mov	r2, r6
 801400c:	e7ed      	b.n	8013fea <strncpy+0x6>
	...

08014010 <__swbuf_r>:
 8014010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014012:	460e      	mov	r6, r1
 8014014:	4614      	mov	r4, r2
 8014016:	4605      	mov	r5, r0
 8014018:	b118      	cbz	r0, 8014022 <__swbuf_r+0x12>
 801401a:	6983      	ldr	r3, [r0, #24]
 801401c:	b90b      	cbnz	r3, 8014022 <__swbuf_r+0x12>
 801401e:	f000 ffeb 	bl	8014ff8 <__sinit>
 8014022:	4b21      	ldr	r3, [pc, #132]	; (80140a8 <__swbuf_r+0x98>)
 8014024:	429c      	cmp	r4, r3
 8014026:	d12a      	bne.n	801407e <__swbuf_r+0x6e>
 8014028:	686c      	ldr	r4, [r5, #4]
 801402a:	69a3      	ldr	r3, [r4, #24]
 801402c:	60a3      	str	r3, [r4, #8]
 801402e:	89a3      	ldrh	r3, [r4, #12]
 8014030:	071a      	lsls	r2, r3, #28
 8014032:	d52e      	bpl.n	8014092 <__swbuf_r+0x82>
 8014034:	6923      	ldr	r3, [r4, #16]
 8014036:	b363      	cbz	r3, 8014092 <__swbuf_r+0x82>
 8014038:	6923      	ldr	r3, [r4, #16]
 801403a:	6820      	ldr	r0, [r4, #0]
 801403c:	1ac0      	subs	r0, r0, r3
 801403e:	6963      	ldr	r3, [r4, #20]
 8014040:	b2f6      	uxtb	r6, r6
 8014042:	4283      	cmp	r3, r0
 8014044:	4637      	mov	r7, r6
 8014046:	dc04      	bgt.n	8014052 <__swbuf_r+0x42>
 8014048:	4621      	mov	r1, r4
 801404a:	4628      	mov	r0, r5
 801404c:	f000 ff6a 	bl	8014f24 <_fflush_r>
 8014050:	bb28      	cbnz	r0, 801409e <__swbuf_r+0x8e>
 8014052:	68a3      	ldr	r3, [r4, #8]
 8014054:	3b01      	subs	r3, #1
 8014056:	60a3      	str	r3, [r4, #8]
 8014058:	6823      	ldr	r3, [r4, #0]
 801405a:	1c5a      	adds	r2, r3, #1
 801405c:	6022      	str	r2, [r4, #0]
 801405e:	701e      	strb	r6, [r3, #0]
 8014060:	6963      	ldr	r3, [r4, #20]
 8014062:	3001      	adds	r0, #1
 8014064:	4283      	cmp	r3, r0
 8014066:	d004      	beq.n	8014072 <__swbuf_r+0x62>
 8014068:	89a3      	ldrh	r3, [r4, #12]
 801406a:	07db      	lsls	r3, r3, #31
 801406c:	d519      	bpl.n	80140a2 <__swbuf_r+0x92>
 801406e:	2e0a      	cmp	r6, #10
 8014070:	d117      	bne.n	80140a2 <__swbuf_r+0x92>
 8014072:	4621      	mov	r1, r4
 8014074:	4628      	mov	r0, r5
 8014076:	f000 ff55 	bl	8014f24 <_fflush_r>
 801407a:	b190      	cbz	r0, 80140a2 <__swbuf_r+0x92>
 801407c:	e00f      	b.n	801409e <__swbuf_r+0x8e>
 801407e:	4b0b      	ldr	r3, [pc, #44]	; (80140ac <__swbuf_r+0x9c>)
 8014080:	429c      	cmp	r4, r3
 8014082:	d101      	bne.n	8014088 <__swbuf_r+0x78>
 8014084:	68ac      	ldr	r4, [r5, #8]
 8014086:	e7d0      	b.n	801402a <__swbuf_r+0x1a>
 8014088:	4b09      	ldr	r3, [pc, #36]	; (80140b0 <__swbuf_r+0xa0>)
 801408a:	429c      	cmp	r4, r3
 801408c:	bf08      	it	eq
 801408e:	68ec      	ldreq	r4, [r5, #12]
 8014090:	e7cb      	b.n	801402a <__swbuf_r+0x1a>
 8014092:	4621      	mov	r1, r4
 8014094:	4628      	mov	r0, r5
 8014096:	f000 f80d 	bl	80140b4 <__swsetup_r>
 801409a:	2800      	cmp	r0, #0
 801409c:	d0cc      	beq.n	8014038 <__swbuf_r+0x28>
 801409e:	f04f 37ff 	mov.w	r7, #4294967295
 80140a2:	4638      	mov	r0, r7
 80140a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140a6:	bf00      	nop
 80140a8:	08017d98 	.word	0x08017d98
 80140ac:	08017db8 	.word	0x08017db8
 80140b0:	08017d78 	.word	0x08017d78

080140b4 <__swsetup_r>:
 80140b4:	4b32      	ldr	r3, [pc, #200]	; (8014180 <__swsetup_r+0xcc>)
 80140b6:	b570      	push	{r4, r5, r6, lr}
 80140b8:	681d      	ldr	r5, [r3, #0]
 80140ba:	4606      	mov	r6, r0
 80140bc:	460c      	mov	r4, r1
 80140be:	b125      	cbz	r5, 80140ca <__swsetup_r+0x16>
 80140c0:	69ab      	ldr	r3, [r5, #24]
 80140c2:	b913      	cbnz	r3, 80140ca <__swsetup_r+0x16>
 80140c4:	4628      	mov	r0, r5
 80140c6:	f000 ff97 	bl	8014ff8 <__sinit>
 80140ca:	4b2e      	ldr	r3, [pc, #184]	; (8014184 <__swsetup_r+0xd0>)
 80140cc:	429c      	cmp	r4, r3
 80140ce:	d10f      	bne.n	80140f0 <__swsetup_r+0x3c>
 80140d0:	686c      	ldr	r4, [r5, #4]
 80140d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80140d6:	b29a      	uxth	r2, r3
 80140d8:	0715      	lsls	r5, r2, #28
 80140da:	d42c      	bmi.n	8014136 <__swsetup_r+0x82>
 80140dc:	06d0      	lsls	r0, r2, #27
 80140de:	d411      	bmi.n	8014104 <__swsetup_r+0x50>
 80140e0:	2209      	movs	r2, #9
 80140e2:	6032      	str	r2, [r6, #0]
 80140e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80140e8:	81a3      	strh	r3, [r4, #12]
 80140ea:	f04f 30ff 	mov.w	r0, #4294967295
 80140ee:	e03e      	b.n	801416e <__swsetup_r+0xba>
 80140f0:	4b25      	ldr	r3, [pc, #148]	; (8014188 <__swsetup_r+0xd4>)
 80140f2:	429c      	cmp	r4, r3
 80140f4:	d101      	bne.n	80140fa <__swsetup_r+0x46>
 80140f6:	68ac      	ldr	r4, [r5, #8]
 80140f8:	e7eb      	b.n	80140d2 <__swsetup_r+0x1e>
 80140fa:	4b24      	ldr	r3, [pc, #144]	; (801418c <__swsetup_r+0xd8>)
 80140fc:	429c      	cmp	r4, r3
 80140fe:	bf08      	it	eq
 8014100:	68ec      	ldreq	r4, [r5, #12]
 8014102:	e7e6      	b.n	80140d2 <__swsetup_r+0x1e>
 8014104:	0751      	lsls	r1, r2, #29
 8014106:	d512      	bpl.n	801412e <__swsetup_r+0x7a>
 8014108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801410a:	b141      	cbz	r1, 801411e <__swsetup_r+0x6a>
 801410c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014110:	4299      	cmp	r1, r3
 8014112:	d002      	beq.n	801411a <__swsetup_r+0x66>
 8014114:	4630      	mov	r0, r6
 8014116:	f7ff f9b5 	bl	8013484 <_free_r>
 801411a:	2300      	movs	r3, #0
 801411c:	6363      	str	r3, [r4, #52]	; 0x34
 801411e:	89a3      	ldrh	r3, [r4, #12]
 8014120:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014124:	81a3      	strh	r3, [r4, #12]
 8014126:	2300      	movs	r3, #0
 8014128:	6063      	str	r3, [r4, #4]
 801412a:	6923      	ldr	r3, [r4, #16]
 801412c:	6023      	str	r3, [r4, #0]
 801412e:	89a3      	ldrh	r3, [r4, #12]
 8014130:	f043 0308 	orr.w	r3, r3, #8
 8014134:	81a3      	strh	r3, [r4, #12]
 8014136:	6923      	ldr	r3, [r4, #16]
 8014138:	b94b      	cbnz	r3, 801414e <__swsetup_r+0x9a>
 801413a:	89a3      	ldrh	r3, [r4, #12]
 801413c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014144:	d003      	beq.n	801414e <__swsetup_r+0x9a>
 8014146:	4621      	mov	r1, r4
 8014148:	4630      	mov	r0, r6
 801414a:	f001 f811 	bl	8015170 <__smakebuf_r>
 801414e:	89a2      	ldrh	r2, [r4, #12]
 8014150:	f012 0301 	ands.w	r3, r2, #1
 8014154:	d00c      	beq.n	8014170 <__swsetup_r+0xbc>
 8014156:	2300      	movs	r3, #0
 8014158:	60a3      	str	r3, [r4, #8]
 801415a:	6963      	ldr	r3, [r4, #20]
 801415c:	425b      	negs	r3, r3
 801415e:	61a3      	str	r3, [r4, #24]
 8014160:	6923      	ldr	r3, [r4, #16]
 8014162:	b953      	cbnz	r3, 801417a <__swsetup_r+0xc6>
 8014164:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014168:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801416c:	d1ba      	bne.n	80140e4 <__swsetup_r+0x30>
 801416e:	bd70      	pop	{r4, r5, r6, pc}
 8014170:	0792      	lsls	r2, r2, #30
 8014172:	bf58      	it	pl
 8014174:	6963      	ldrpl	r3, [r4, #20]
 8014176:	60a3      	str	r3, [r4, #8]
 8014178:	e7f2      	b.n	8014160 <__swsetup_r+0xac>
 801417a:	2000      	movs	r0, #0
 801417c:	e7f7      	b.n	801416e <__swsetup_r+0xba>
 801417e:	bf00      	nop
 8014180:	20000030 	.word	0x20000030
 8014184:	08017d98 	.word	0x08017d98
 8014188:	08017db8 	.word	0x08017db8
 801418c:	08017d78 	.word	0x08017d78

08014190 <quorem>:
 8014190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014194:	6903      	ldr	r3, [r0, #16]
 8014196:	690c      	ldr	r4, [r1, #16]
 8014198:	42a3      	cmp	r3, r4
 801419a:	4680      	mov	r8, r0
 801419c:	f2c0 8082 	blt.w	80142a4 <quorem+0x114>
 80141a0:	3c01      	subs	r4, #1
 80141a2:	f101 0714 	add.w	r7, r1, #20
 80141a6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80141aa:	f100 0614 	add.w	r6, r0, #20
 80141ae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80141b2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80141b6:	eb06 030c 	add.w	r3, r6, ip
 80141ba:	3501      	adds	r5, #1
 80141bc:	eb07 090c 	add.w	r9, r7, ip
 80141c0:	9301      	str	r3, [sp, #4]
 80141c2:	fbb0 f5f5 	udiv	r5, r0, r5
 80141c6:	b395      	cbz	r5, 801422e <quorem+0x9e>
 80141c8:	f04f 0a00 	mov.w	sl, #0
 80141cc:	4638      	mov	r0, r7
 80141ce:	46b6      	mov	lr, r6
 80141d0:	46d3      	mov	fp, sl
 80141d2:	f850 2b04 	ldr.w	r2, [r0], #4
 80141d6:	b293      	uxth	r3, r2
 80141d8:	fb05 a303 	mla	r3, r5, r3, sl
 80141dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80141e0:	b29b      	uxth	r3, r3
 80141e2:	ebab 0303 	sub.w	r3, fp, r3
 80141e6:	0c12      	lsrs	r2, r2, #16
 80141e8:	f8de b000 	ldr.w	fp, [lr]
 80141ec:	fb05 a202 	mla	r2, r5, r2, sl
 80141f0:	fa13 f38b 	uxtah	r3, r3, fp
 80141f4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80141f8:	fa1f fb82 	uxth.w	fp, r2
 80141fc:	f8de 2000 	ldr.w	r2, [lr]
 8014200:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014204:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014208:	b29b      	uxth	r3, r3
 801420a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801420e:	4581      	cmp	r9, r0
 8014210:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014214:	f84e 3b04 	str.w	r3, [lr], #4
 8014218:	d2db      	bcs.n	80141d2 <quorem+0x42>
 801421a:	f856 300c 	ldr.w	r3, [r6, ip]
 801421e:	b933      	cbnz	r3, 801422e <quorem+0x9e>
 8014220:	9b01      	ldr	r3, [sp, #4]
 8014222:	3b04      	subs	r3, #4
 8014224:	429e      	cmp	r6, r3
 8014226:	461a      	mov	r2, r3
 8014228:	d330      	bcc.n	801428c <quorem+0xfc>
 801422a:	f8c8 4010 	str.w	r4, [r8, #16]
 801422e:	4640      	mov	r0, r8
 8014230:	f001 f9f6 	bl	8015620 <__mcmp>
 8014234:	2800      	cmp	r0, #0
 8014236:	db25      	blt.n	8014284 <quorem+0xf4>
 8014238:	3501      	adds	r5, #1
 801423a:	4630      	mov	r0, r6
 801423c:	f04f 0c00 	mov.w	ip, #0
 8014240:	f857 2b04 	ldr.w	r2, [r7], #4
 8014244:	f8d0 e000 	ldr.w	lr, [r0]
 8014248:	b293      	uxth	r3, r2
 801424a:	ebac 0303 	sub.w	r3, ip, r3
 801424e:	0c12      	lsrs	r2, r2, #16
 8014250:	fa13 f38e 	uxtah	r3, r3, lr
 8014254:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014258:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801425c:	b29b      	uxth	r3, r3
 801425e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014262:	45b9      	cmp	r9, r7
 8014264:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014268:	f840 3b04 	str.w	r3, [r0], #4
 801426c:	d2e8      	bcs.n	8014240 <quorem+0xb0>
 801426e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014272:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014276:	b92a      	cbnz	r2, 8014284 <quorem+0xf4>
 8014278:	3b04      	subs	r3, #4
 801427a:	429e      	cmp	r6, r3
 801427c:	461a      	mov	r2, r3
 801427e:	d30b      	bcc.n	8014298 <quorem+0x108>
 8014280:	f8c8 4010 	str.w	r4, [r8, #16]
 8014284:	4628      	mov	r0, r5
 8014286:	b003      	add	sp, #12
 8014288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801428c:	6812      	ldr	r2, [r2, #0]
 801428e:	3b04      	subs	r3, #4
 8014290:	2a00      	cmp	r2, #0
 8014292:	d1ca      	bne.n	801422a <quorem+0x9a>
 8014294:	3c01      	subs	r4, #1
 8014296:	e7c5      	b.n	8014224 <quorem+0x94>
 8014298:	6812      	ldr	r2, [r2, #0]
 801429a:	3b04      	subs	r3, #4
 801429c:	2a00      	cmp	r2, #0
 801429e:	d1ef      	bne.n	8014280 <quorem+0xf0>
 80142a0:	3c01      	subs	r4, #1
 80142a2:	e7ea      	b.n	801427a <quorem+0xea>
 80142a4:	2000      	movs	r0, #0
 80142a6:	e7ee      	b.n	8014286 <quorem+0xf6>

080142a8 <_dtoa_r>:
 80142a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142ac:	ec57 6b10 	vmov	r6, r7, d0
 80142b0:	b097      	sub	sp, #92	; 0x5c
 80142b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80142b4:	9106      	str	r1, [sp, #24]
 80142b6:	4604      	mov	r4, r0
 80142b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80142ba:	9312      	str	r3, [sp, #72]	; 0x48
 80142bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80142c0:	e9cd 6700 	strd	r6, r7, [sp]
 80142c4:	b93d      	cbnz	r5, 80142d6 <_dtoa_r+0x2e>
 80142c6:	2010      	movs	r0, #16
 80142c8:	f7ff f8c0 	bl	801344c <malloc>
 80142cc:	6260      	str	r0, [r4, #36]	; 0x24
 80142ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80142d2:	6005      	str	r5, [r0, #0]
 80142d4:	60c5      	str	r5, [r0, #12]
 80142d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80142d8:	6819      	ldr	r1, [r3, #0]
 80142da:	b151      	cbz	r1, 80142f2 <_dtoa_r+0x4a>
 80142dc:	685a      	ldr	r2, [r3, #4]
 80142de:	604a      	str	r2, [r1, #4]
 80142e0:	2301      	movs	r3, #1
 80142e2:	4093      	lsls	r3, r2
 80142e4:	608b      	str	r3, [r1, #8]
 80142e6:	4620      	mov	r0, r4
 80142e8:	f000 ffb8 	bl	801525c <_Bfree>
 80142ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80142ee:	2200      	movs	r2, #0
 80142f0:	601a      	str	r2, [r3, #0]
 80142f2:	1e3b      	subs	r3, r7, #0
 80142f4:	bfbb      	ittet	lt
 80142f6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80142fa:	9301      	strlt	r3, [sp, #4]
 80142fc:	2300      	movge	r3, #0
 80142fe:	2201      	movlt	r2, #1
 8014300:	bfac      	ite	ge
 8014302:	f8c8 3000 	strge.w	r3, [r8]
 8014306:	f8c8 2000 	strlt.w	r2, [r8]
 801430a:	4baf      	ldr	r3, [pc, #700]	; (80145c8 <_dtoa_r+0x320>)
 801430c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014310:	ea33 0308 	bics.w	r3, r3, r8
 8014314:	d114      	bne.n	8014340 <_dtoa_r+0x98>
 8014316:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014318:	f242 730f 	movw	r3, #9999	; 0x270f
 801431c:	6013      	str	r3, [r2, #0]
 801431e:	9b00      	ldr	r3, [sp, #0]
 8014320:	b923      	cbnz	r3, 801432c <_dtoa_r+0x84>
 8014322:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8014326:	2800      	cmp	r0, #0
 8014328:	f000 8542 	beq.w	8014db0 <_dtoa_r+0xb08>
 801432c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801432e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80145dc <_dtoa_r+0x334>
 8014332:	2b00      	cmp	r3, #0
 8014334:	f000 8544 	beq.w	8014dc0 <_dtoa_r+0xb18>
 8014338:	f10b 0303 	add.w	r3, fp, #3
 801433c:	f000 bd3e 	b.w	8014dbc <_dtoa_r+0xb14>
 8014340:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014344:	2200      	movs	r2, #0
 8014346:	2300      	movs	r3, #0
 8014348:	4630      	mov	r0, r6
 801434a:	4639      	mov	r1, r7
 801434c:	f7ec fb94 	bl	8000a78 <__aeabi_dcmpeq>
 8014350:	4681      	mov	r9, r0
 8014352:	b168      	cbz	r0, 8014370 <_dtoa_r+0xc8>
 8014354:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014356:	2301      	movs	r3, #1
 8014358:	6013      	str	r3, [r2, #0]
 801435a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801435c:	2b00      	cmp	r3, #0
 801435e:	f000 8524 	beq.w	8014daa <_dtoa_r+0xb02>
 8014362:	4b9a      	ldr	r3, [pc, #616]	; (80145cc <_dtoa_r+0x324>)
 8014364:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014366:	f103 3bff 	add.w	fp, r3, #4294967295
 801436a:	6013      	str	r3, [r2, #0]
 801436c:	f000 bd28 	b.w	8014dc0 <_dtoa_r+0xb18>
 8014370:	aa14      	add	r2, sp, #80	; 0x50
 8014372:	a915      	add	r1, sp, #84	; 0x54
 8014374:	ec47 6b10 	vmov	d0, r6, r7
 8014378:	4620      	mov	r0, r4
 801437a:	f001 f9c8 	bl	801570e <__d2b>
 801437e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014382:	9004      	str	r0, [sp, #16]
 8014384:	2d00      	cmp	r5, #0
 8014386:	d07c      	beq.n	8014482 <_dtoa_r+0x1da>
 8014388:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801438c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014390:	46b2      	mov	sl, r6
 8014392:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8014396:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801439a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801439e:	2200      	movs	r2, #0
 80143a0:	4b8b      	ldr	r3, [pc, #556]	; (80145d0 <_dtoa_r+0x328>)
 80143a2:	4650      	mov	r0, sl
 80143a4:	4659      	mov	r1, fp
 80143a6:	f7eb ff47 	bl	8000238 <__aeabi_dsub>
 80143aa:	a381      	add	r3, pc, #516	; (adr r3, 80145b0 <_dtoa_r+0x308>)
 80143ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143b0:	f7ec f8fa 	bl	80005a8 <__aeabi_dmul>
 80143b4:	a380      	add	r3, pc, #512	; (adr r3, 80145b8 <_dtoa_r+0x310>)
 80143b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143ba:	f7eb ff3f 	bl	800023c <__adddf3>
 80143be:	4606      	mov	r6, r0
 80143c0:	4628      	mov	r0, r5
 80143c2:	460f      	mov	r7, r1
 80143c4:	f7ec f886 	bl	80004d4 <__aeabi_i2d>
 80143c8:	a37d      	add	r3, pc, #500	; (adr r3, 80145c0 <_dtoa_r+0x318>)
 80143ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143ce:	f7ec f8eb 	bl	80005a8 <__aeabi_dmul>
 80143d2:	4602      	mov	r2, r0
 80143d4:	460b      	mov	r3, r1
 80143d6:	4630      	mov	r0, r6
 80143d8:	4639      	mov	r1, r7
 80143da:	f7eb ff2f 	bl	800023c <__adddf3>
 80143de:	4606      	mov	r6, r0
 80143e0:	460f      	mov	r7, r1
 80143e2:	f7ec fb91 	bl	8000b08 <__aeabi_d2iz>
 80143e6:	2200      	movs	r2, #0
 80143e8:	4682      	mov	sl, r0
 80143ea:	2300      	movs	r3, #0
 80143ec:	4630      	mov	r0, r6
 80143ee:	4639      	mov	r1, r7
 80143f0:	f7ec fb4c 	bl	8000a8c <__aeabi_dcmplt>
 80143f4:	b148      	cbz	r0, 801440a <_dtoa_r+0x162>
 80143f6:	4650      	mov	r0, sl
 80143f8:	f7ec f86c 	bl	80004d4 <__aeabi_i2d>
 80143fc:	4632      	mov	r2, r6
 80143fe:	463b      	mov	r3, r7
 8014400:	f7ec fb3a 	bl	8000a78 <__aeabi_dcmpeq>
 8014404:	b908      	cbnz	r0, 801440a <_dtoa_r+0x162>
 8014406:	f10a 3aff 	add.w	sl, sl, #4294967295
 801440a:	f1ba 0f16 	cmp.w	sl, #22
 801440e:	d859      	bhi.n	80144c4 <_dtoa_r+0x21c>
 8014410:	4970      	ldr	r1, [pc, #448]	; (80145d4 <_dtoa_r+0x32c>)
 8014412:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014416:	e9dd 2300 	ldrd	r2, r3, [sp]
 801441a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801441e:	f7ec fb53 	bl	8000ac8 <__aeabi_dcmpgt>
 8014422:	2800      	cmp	r0, #0
 8014424:	d050      	beq.n	80144c8 <_dtoa_r+0x220>
 8014426:	f10a 3aff 	add.w	sl, sl, #4294967295
 801442a:	2300      	movs	r3, #0
 801442c:	930f      	str	r3, [sp, #60]	; 0x3c
 801442e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014430:	1b5d      	subs	r5, r3, r5
 8014432:	f1b5 0801 	subs.w	r8, r5, #1
 8014436:	bf49      	itett	mi
 8014438:	f1c5 0301 	rsbmi	r3, r5, #1
 801443c:	2300      	movpl	r3, #0
 801443e:	9305      	strmi	r3, [sp, #20]
 8014440:	f04f 0800 	movmi.w	r8, #0
 8014444:	bf58      	it	pl
 8014446:	9305      	strpl	r3, [sp, #20]
 8014448:	f1ba 0f00 	cmp.w	sl, #0
 801444c:	db3e      	blt.n	80144cc <_dtoa_r+0x224>
 801444e:	2300      	movs	r3, #0
 8014450:	44d0      	add	r8, sl
 8014452:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8014456:	9307      	str	r3, [sp, #28]
 8014458:	9b06      	ldr	r3, [sp, #24]
 801445a:	2b09      	cmp	r3, #9
 801445c:	f200 8090 	bhi.w	8014580 <_dtoa_r+0x2d8>
 8014460:	2b05      	cmp	r3, #5
 8014462:	bfc4      	itt	gt
 8014464:	3b04      	subgt	r3, #4
 8014466:	9306      	strgt	r3, [sp, #24]
 8014468:	9b06      	ldr	r3, [sp, #24]
 801446a:	f1a3 0302 	sub.w	r3, r3, #2
 801446e:	bfcc      	ite	gt
 8014470:	2500      	movgt	r5, #0
 8014472:	2501      	movle	r5, #1
 8014474:	2b03      	cmp	r3, #3
 8014476:	f200 808f 	bhi.w	8014598 <_dtoa_r+0x2f0>
 801447a:	e8df f003 	tbb	[pc, r3]
 801447e:	7f7d      	.short	0x7f7d
 8014480:	7131      	.short	0x7131
 8014482:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8014486:	441d      	add	r5, r3
 8014488:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801448c:	2820      	cmp	r0, #32
 801448e:	dd13      	ble.n	80144b8 <_dtoa_r+0x210>
 8014490:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8014494:	9b00      	ldr	r3, [sp, #0]
 8014496:	fa08 f800 	lsl.w	r8, r8, r0
 801449a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801449e:	fa23 f000 	lsr.w	r0, r3, r0
 80144a2:	ea48 0000 	orr.w	r0, r8, r0
 80144a6:	f7ec f805 	bl	80004b4 <__aeabi_ui2d>
 80144aa:	2301      	movs	r3, #1
 80144ac:	4682      	mov	sl, r0
 80144ae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80144b2:	3d01      	subs	r5, #1
 80144b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80144b6:	e772      	b.n	801439e <_dtoa_r+0xf6>
 80144b8:	9b00      	ldr	r3, [sp, #0]
 80144ba:	f1c0 0020 	rsb	r0, r0, #32
 80144be:	fa03 f000 	lsl.w	r0, r3, r0
 80144c2:	e7f0      	b.n	80144a6 <_dtoa_r+0x1fe>
 80144c4:	2301      	movs	r3, #1
 80144c6:	e7b1      	b.n	801442c <_dtoa_r+0x184>
 80144c8:	900f      	str	r0, [sp, #60]	; 0x3c
 80144ca:	e7b0      	b.n	801442e <_dtoa_r+0x186>
 80144cc:	9b05      	ldr	r3, [sp, #20]
 80144ce:	eba3 030a 	sub.w	r3, r3, sl
 80144d2:	9305      	str	r3, [sp, #20]
 80144d4:	f1ca 0300 	rsb	r3, sl, #0
 80144d8:	9307      	str	r3, [sp, #28]
 80144da:	2300      	movs	r3, #0
 80144dc:	930e      	str	r3, [sp, #56]	; 0x38
 80144de:	e7bb      	b.n	8014458 <_dtoa_r+0x1b0>
 80144e0:	2301      	movs	r3, #1
 80144e2:	930a      	str	r3, [sp, #40]	; 0x28
 80144e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	dd59      	ble.n	801459e <_dtoa_r+0x2f6>
 80144ea:	9302      	str	r3, [sp, #8]
 80144ec:	4699      	mov	r9, r3
 80144ee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80144f0:	2200      	movs	r2, #0
 80144f2:	6072      	str	r2, [r6, #4]
 80144f4:	2204      	movs	r2, #4
 80144f6:	f102 0014 	add.w	r0, r2, #20
 80144fa:	4298      	cmp	r0, r3
 80144fc:	6871      	ldr	r1, [r6, #4]
 80144fe:	d953      	bls.n	80145a8 <_dtoa_r+0x300>
 8014500:	4620      	mov	r0, r4
 8014502:	f000 fe77 	bl	80151f4 <_Balloc>
 8014506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014508:	6030      	str	r0, [r6, #0]
 801450a:	f1b9 0f0e 	cmp.w	r9, #14
 801450e:	f8d3 b000 	ldr.w	fp, [r3]
 8014512:	f200 80e6 	bhi.w	80146e2 <_dtoa_r+0x43a>
 8014516:	2d00      	cmp	r5, #0
 8014518:	f000 80e3 	beq.w	80146e2 <_dtoa_r+0x43a>
 801451c:	ed9d 7b00 	vldr	d7, [sp]
 8014520:	f1ba 0f00 	cmp.w	sl, #0
 8014524:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8014528:	dd74      	ble.n	8014614 <_dtoa_r+0x36c>
 801452a:	4a2a      	ldr	r2, [pc, #168]	; (80145d4 <_dtoa_r+0x32c>)
 801452c:	f00a 030f 	and.w	r3, sl, #15
 8014530:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014534:	ed93 7b00 	vldr	d7, [r3]
 8014538:	ea4f 162a 	mov.w	r6, sl, asr #4
 801453c:	06f0      	lsls	r0, r6, #27
 801453e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014542:	d565      	bpl.n	8014610 <_dtoa_r+0x368>
 8014544:	4b24      	ldr	r3, [pc, #144]	; (80145d8 <_dtoa_r+0x330>)
 8014546:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801454a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801454e:	f7ec f955 	bl	80007fc <__aeabi_ddiv>
 8014552:	e9cd 0100 	strd	r0, r1, [sp]
 8014556:	f006 060f 	and.w	r6, r6, #15
 801455a:	2503      	movs	r5, #3
 801455c:	4f1e      	ldr	r7, [pc, #120]	; (80145d8 <_dtoa_r+0x330>)
 801455e:	e04c      	b.n	80145fa <_dtoa_r+0x352>
 8014560:	2301      	movs	r3, #1
 8014562:	930a      	str	r3, [sp, #40]	; 0x28
 8014564:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014566:	4453      	add	r3, sl
 8014568:	f103 0901 	add.w	r9, r3, #1
 801456c:	9302      	str	r3, [sp, #8]
 801456e:	464b      	mov	r3, r9
 8014570:	2b01      	cmp	r3, #1
 8014572:	bfb8      	it	lt
 8014574:	2301      	movlt	r3, #1
 8014576:	e7ba      	b.n	80144ee <_dtoa_r+0x246>
 8014578:	2300      	movs	r3, #0
 801457a:	e7b2      	b.n	80144e2 <_dtoa_r+0x23a>
 801457c:	2300      	movs	r3, #0
 801457e:	e7f0      	b.n	8014562 <_dtoa_r+0x2ba>
 8014580:	2501      	movs	r5, #1
 8014582:	2300      	movs	r3, #0
 8014584:	9306      	str	r3, [sp, #24]
 8014586:	950a      	str	r5, [sp, #40]	; 0x28
 8014588:	f04f 33ff 	mov.w	r3, #4294967295
 801458c:	9302      	str	r3, [sp, #8]
 801458e:	4699      	mov	r9, r3
 8014590:	2200      	movs	r2, #0
 8014592:	2312      	movs	r3, #18
 8014594:	920b      	str	r2, [sp, #44]	; 0x2c
 8014596:	e7aa      	b.n	80144ee <_dtoa_r+0x246>
 8014598:	2301      	movs	r3, #1
 801459a:	930a      	str	r3, [sp, #40]	; 0x28
 801459c:	e7f4      	b.n	8014588 <_dtoa_r+0x2e0>
 801459e:	2301      	movs	r3, #1
 80145a0:	9302      	str	r3, [sp, #8]
 80145a2:	4699      	mov	r9, r3
 80145a4:	461a      	mov	r2, r3
 80145a6:	e7f5      	b.n	8014594 <_dtoa_r+0x2ec>
 80145a8:	3101      	adds	r1, #1
 80145aa:	6071      	str	r1, [r6, #4]
 80145ac:	0052      	lsls	r2, r2, #1
 80145ae:	e7a2      	b.n	80144f6 <_dtoa_r+0x24e>
 80145b0:	636f4361 	.word	0x636f4361
 80145b4:	3fd287a7 	.word	0x3fd287a7
 80145b8:	8b60c8b3 	.word	0x8b60c8b3
 80145bc:	3fc68a28 	.word	0x3fc68a28
 80145c0:	509f79fb 	.word	0x509f79fb
 80145c4:	3fd34413 	.word	0x3fd34413
 80145c8:	7ff00000 	.word	0x7ff00000
 80145cc:	08017d45 	.word	0x08017d45
 80145d0:	3ff80000 	.word	0x3ff80000
 80145d4:	08017e00 	.word	0x08017e00
 80145d8:	08017dd8 	.word	0x08017dd8
 80145dc:	08017d71 	.word	0x08017d71
 80145e0:	07f1      	lsls	r1, r6, #31
 80145e2:	d508      	bpl.n	80145f6 <_dtoa_r+0x34e>
 80145e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80145e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80145ec:	f7eb ffdc 	bl	80005a8 <__aeabi_dmul>
 80145f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80145f4:	3501      	adds	r5, #1
 80145f6:	1076      	asrs	r6, r6, #1
 80145f8:	3708      	adds	r7, #8
 80145fa:	2e00      	cmp	r6, #0
 80145fc:	d1f0      	bne.n	80145e0 <_dtoa_r+0x338>
 80145fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014602:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014606:	f7ec f8f9 	bl	80007fc <__aeabi_ddiv>
 801460a:	e9cd 0100 	strd	r0, r1, [sp]
 801460e:	e01a      	b.n	8014646 <_dtoa_r+0x39e>
 8014610:	2502      	movs	r5, #2
 8014612:	e7a3      	b.n	801455c <_dtoa_r+0x2b4>
 8014614:	f000 80a0 	beq.w	8014758 <_dtoa_r+0x4b0>
 8014618:	f1ca 0600 	rsb	r6, sl, #0
 801461c:	4b9f      	ldr	r3, [pc, #636]	; (801489c <_dtoa_r+0x5f4>)
 801461e:	4fa0      	ldr	r7, [pc, #640]	; (80148a0 <_dtoa_r+0x5f8>)
 8014620:	f006 020f 	and.w	r2, r6, #15
 8014624:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801462c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014630:	f7eb ffba 	bl	80005a8 <__aeabi_dmul>
 8014634:	e9cd 0100 	strd	r0, r1, [sp]
 8014638:	1136      	asrs	r6, r6, #4
 801463a:	2300      	movs	r3, #0
 801463c:	2502      	movs	r5, #2
 801463e:	2e00      	cmp	r6, #0
 8014640:	d17f      	bne.n	8014742 <_dtoa_r+0x49a>
 8014642:	2b00      	cmp	r3, #0
 8014644:	d1e1      	bne.n	801460a <_dtoa_r+0x362>
 8014646:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014648:	2b00      	cmp	r3, #0
 801464a:	f000 8087 	beq.w	801475c <_dtoa_r+0x4b4>
 801464e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014652:	2200      	movs	r2, #0
 8014654:	4b93      	ldr	r3, [pc, #588]	; (80148a4 <_dtoa_r+0x5fc>)
 8014656:	4630      	mov	r0, r6
 8014658:	4639      	mov	r1, r7
 801465a:	f7ec fa17 	bl	8000a8c <__aeabi_dcmplt>
 801465e:	2800      	cmp	r0, #0
 8014660:	d07c      	beq.n	801475c <_dtoa_r+0x4b4>
 8014662:	f1b9 0f00 	cmp.w	r9, #0
 8014666:	d079      	beq.n	801475c <_dtoa_r+0x4b4>
 8014668:	9b02      	ldr	r3, [sp, #8]
 801466a:	2b00      	cmp	r3, #0
 801466c:	dd35      	ble.n	80146da <_dtoa_r+0x432>
 801466e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014672:	9308      	str	r3, [sp, #32]
 8014674:	4639      	mov	r1, r7
 8014676:	2200      	movs	r2, #0
 8014678:	4b8b      	ldr	r3, [pc, #556]	; (80148a8 <_dtoa_r+0x600>)
 801467a:	4630      	mov	r0, r6
 801467c:	f7eb ff94 	bl	80005a8 <__aeabi_dmul>
 8014680:	e9cd 0100 	strd	r0, r1, [sp]
 8014684:	9f02      	ldr	r7, [sp, #8]
 8014686:	3501      	adds	r5, #1
 8014688:	4628      	mov	r0, r5
 801468a:	f7eb ff23 	bl	80004d4 <__aeabi_i2d>
 801468e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014692:	f7eb ff89 	bl	80005a8 <__aeabi_dmul>
 8014696:	2200      	movs	r2, #0
 8014698:	4b84      	ldr	r3, [pc, #528]	; (80148ac <_dtoa_r+0x604>)
 801469a:	f7eb fdcf 	bl	800023c <__adddf3>
 801469e:	4605      	mov	r5, r0
 80146a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80146a4:	2f00      	cmp	r7, #0
 80146a6:	d15d      	bne.n	8014764 <_dtoa_r+0x4bc>
 80146a8:	2200      	movs	r2, #0
 80146aa:	4b81      	ldr	r3, [pc, #516]	; (80148b0 <_dtoa_r+0x608>)
 80146ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80146b0:	f7eb fdc2 	bl	8000238 <__aeabi_dsub>
 80146b4:	462a      	mov	r2, r5
 80146b6:	4633      	mov	r3, r6
 80146b8:	e9cd 0100 	strd	r0, r1, [sp]
 80146bc:	f7ec fa04 	bl	8000ac8 <__aeabi_dcmpgt>
 80146c0:	2800      	cmp	r0, #0
 80146c2:	f040 8288 	bne.w	8014bd6 <_dtoa_r+0x92e>
 80146c6:	462a      	mov	r2, r5
 80146c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80146cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80146d0:	f7ec f9dc 	bl	8000a8c <__aeabi_dcmplt>
 80146d4:	2800      	cmp	r0, #0
 80146d6:	f040 827c 	bne.w	8014bd2 <_dtoa_r+0x92a>
 80146da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80146de:	e9cd 2300 	strd	r2, r3, [sp]
 80146e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	f2c0 8150 	blt.w	801498a <_dtoa_r+0x6e2>
 80146ea:	f1ba 0f0e 	cmp.w	sl, #14
 80146ee:	f300 814c 	bgt.w	801498a <_dtoa_r+0x6e2>
 80146f2:	4b6a      	ldr	r3, [pc, #424]	; (801489c <_dtoa_r+0x5f4>)
 80146f4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80146f8:	ed93 7b00 	vldr	d7, [r3]
 80146fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80146fe:	2b00      	cmp	r3, #0
 8014700:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014704:	f280 80d8 	bge.w	80148b8 <_dtoa_r+0x610>
 8014708:	f1b9 0f00 	cmp.w	r9, #0
 801470c:	f300 80d4 	bgt.w	80148b8 <_dtoa_r+0x610>
 8014710:	f040 825e 	bne.w	8014bd0 <_dtoa_r+0x928>
 8014714:	2200      	movs	r2, #0
 8014716:	4b66      	ldr	r3, [pc, #408]	; (80148b0 <_dtoa_r+0x608>)
 8014718:	ec51 0b17 	vmov	r0, r1, d7
 801471c:	f7eb ff44 	bl	80005a8 <__aeabi_dmul>
 8014720:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014724:	f7ec f9c6 	bl	8000ab4 <__aeabi_dcmpge>
 8014728:	464f      	mov	r7, r9
 801472a:	464e      	mov	r6, r9
 801472c:	2800      	cmp	r0, #0
 801472e:	f040 8234 	bne.w	8014b9a <_dtoa_r+0x8f2>
 8014732:	2331      	movs	r3, #49	; 0x31
 8014734:	f10b 0501 	add.w	r5, fp, #1
 8014738:	f88b 3000 	strb.w	r3, [fp]
 801473c:	f10a 0a01 	add.w	sl, sl, #1
 8014740:	e22f      	b.n	8014ba2 <_dtoa_r+0x8fa>
 8014742:	07f2      	lsls	r2, r6, #31
 8014744:	d505      	bpl.n	8014752 <_dtoa_r+0x4aa>
 8014746:	e9d7 2300 	ldrd	r2, r3, [r7]
 801474a:	f7eb ff2d 	bl	80005a8 <__aeabi_dmul>
 801474e:	3501      	adds	r5, #1
 8014750:	2301      	movs	r3, #1
 8014752:	1076      	asrs	r6, r6, #1
 8014754:	3708      	adds	r7, #8
 8014756:	e772      	b.n	801463e <_dtoa_r+0x396>
 8014758:	2502      	movs	r5, #2
 801475a:	e774      	b.n	8014646 <_dtoa_r+0x39e>
 801475c:	f8cd a020 	str.w	sl, [sp, #32]
 8014760:	464f      	mov	r7, r9
 8014762:	e791      	b.n	8014688 <_dtoa_r+0x3e0>
 8014764:	4b4d      	ldr	r3, [pc, #308]	; (801489c <_dtoa_r+0x5f4>)
 8014766:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801476a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801476e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014770:	2b00      	cmp	r3, #0
 8014772:	d047      	beq.n	8014804 <_dtoa_r+0x55c>
 8014774:	4602      	mov	r2, r0
 8014776:	460b      	mov	r3, r1
 8014778:	2000      	movs	r0, #0
 801477a:	494e      	ldr	r1, [pc, #312]	; (80148b4 <_dtoa_r+0x60c>)
 801477c:	f7ec f83e 	bl	80007fc <__aeabi_ddiv>
 8014780:	462a      	mov	r2, r5
 8014782:	4633      	mov	r3, r6
 8014784:	f7eb fd58 	bl	8000238 <__aeabi_dsub>
 8014788:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801478c:	465d      	mov	r5, fp
 801478e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014792:	f7ec f9b9 	bl	8000b08 <__aeabi_d2iz>
 8014796:	4606      	mov	r6, r0
 8014798:	f7eb fe9c 	bl	80004d4 <__aeabi_i2d>
 801479c:	4602      	mov	r2, r0
 801479e:	460b      	mov	r3, r1
 80147a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80147a4:	f7eb fd48 	bl	8000238 <__aeabi_dsub>
 80147a8:	3630      	adds	r6, #48	; 0x30
 80147aa:	f805 6b01 	strb.w	r6, [r5], #1
 80147ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80147b2:	e9cd 0100 	strd	r0, r1, [sp]
 80147b6:	f7ec f969 	bl	8000a8c <__aeabi_dcmplt>
 80147ba:	2800      	cmp	r0, #0
 80147bc:	d163      	bne.n	8014886 <_dtoa_r+0x5de>
 80147be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80147c2:	2000      	movs	r0, #0
 80147c4:	4937      	ldr	r1, [pc, #220]	; (80148a4 <_dtoa_r+0x5fc>)
 80147c6:	f7eb fd37 	bl	8000238 <__aeabi_dsub>
 80147ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80147ce:	f7ec f95d 	bl	8000a8c <__aeabi_dcmplt>
 80147d2:	2800      	cmp	r0, #0
 80147d4:	f040 80b7 	bne.w	8014946 <_dtoa_r+0x69e>
 80147d8:	eba5 030b 	sub.w	r3, r5, fp
 80147dc:	429f      	cmp	r7, r3
 80147de:	f77f af7c 	ble.w	80146da <_dtoa_r+0x432>
 80147e2:	2200      	movs	r2, #0
 80147e4:	4b30      	ldr	r3, [pc, #192]	; (80148a8 <_dtoa_r+0x600>)
 80147e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80147ea:	f7eb fedd 	bl	80005a8 <__aeabi_dmul>
 80147ee:	2200      	movs	r2, #0
 80147f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80147f4:	4b2c      	ldr	r3, [pc, #176]	; (80148a8 <_dtoa_r+0x600>)
 80147f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80147fa:	f7eb fed5 	bl	80005a8 <__aeabi_dmul>
 80147fe:	e9cd 0100 	strd	r0, r1, [sp]
 8014802:	e7c4      	b.n	801478e <_dtoa_r+0x4e6>
 8014804:	462a      	mov	r2, r5
 8014806:	4633      	mov	r3, r6
 8014808:	f7eb fece 	bl	80005a8 <__aeabi_dmul>
 801480c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014810:	eb0b 0507 	add.w	r5, fp, r7
 8014814:	465e      	mov	r6, fp
 8014816:	e9dd 0100 	ldrd	r0, r1, [sp]
 801481a:	f7ec f975 	bl	8000b08 <__aeabi_d2iz>
 801481e:	4607      	mov	r7, r0
 8014820:	f7eb fe58 	bl	80004d4 <__aeabi_i2d>
 8014824:	3730      	adds	r7, #48	; 0x30
 8014826:	4602      	mov	r2, r0
 8014828:	460b      	mov	r3, r1
 801482a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801482e:	f7eb fd03 	bl	8000238 <__aeabi_dsub>
 8014832:	f806 7b01 	strb.w	r7, [r6], #1
 8014836:	42ae      	cmp	r6, r5
 8014838:	e9cd 0100 	strd	r0, r1, [sp]
 801483c:	f04f 0200 	mov.w	r2, #0
 8014840:	d126      	bne.n	8014890 <_dtoa_r+0x5e8>
 8014842:	4b1c      	ldr	r3, [pc, #112]	; (80148b4 <_dtoa_r+0x60c>)
 8014844:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014848:	f7eb fcf8 	bl	800023c <__adddf3>
 801484c:	4602      	mov	r2, r0
 801484e:	460b      	mov	r3, r1
 8014850:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014854:	f7ec f938 	bl	8000ac8 <__aeabi_dcmpgt>
 8014858:	2800      	cmp	r0, #0
 801485a:	d174      	bne.n	8014946 <_dtoa_r+0x69e>
 801485c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014860:	2000      	movs	r0, #0
 8014862:	4914      	ldr	r1, [pc, #80]	; (80148b4 <_dtoa_r+0x60c>)
 8014864:	f7eb fce8 	bl	8000238 <__aeabi_dsub>
 8014868:	4602      	mov	r2, r0
 801486a:	460b      	mov	r3, r1
 801486c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014870:	f7ec f90c 	bl	8000a8c <__aeabi_dcmplt>
 8014874:	2800      	cmp	r0, #0
 8014876:	f43f af30 	beq.w	80146da <_dtoa_r+0x432>
 801487a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801487e:	2b30      	cmp	r3, #48	; 0x30
 8014880:	f105 32ff 	add.w	r2, r5, #4294967295
 8014884:	d002      	beq.n	801488c <_dtoa_r+0x5e4>
 8014886:	f8dd a020 	ldr.w	sl, [sp, #32]
 801488a:	e04a      	b.n	8014922 <_dtoa_r+0x67a>
 801488c:	4615      	mov	r5, r2
 801488e:	e7f4      	b.n	801487a <_dtoa_r+0x5d2>
 8014890:	4b05      	ldr	r3, [pc, #20]	; (80148a8 <_dtoa_r+0x600>)
 8014892:	f7eb fe89 	bl	80005a8 <__aeabi_dmul>
 8014896:	e9cd 0100 	strd	r0, r1, [sp]
 801489a:	e7bc      	b.n	8014816 <_dtoa_r+0x56e>
 801489c:	08017e00 	.word	0x08017e00
 80148a0:	08017dd8 	.word	0x08017dd8
 80148a4:	3ff00000 	.word	0x3ff00000
 80148a8:	40240000 	.word	0x40240000
 80148ac:	401c0000 	.word	0x401c0000
 80148b0:	40140000 	.word	0x40140000
 80148b4:	3fe00000 	.word	0x3fe00000
 80148b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80148bc:	465d      	mov	r5, fp
 80148be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80148c2:	4630      	mov	r0, r6
 80148c4:	4639      	mov	r1, r7
 80148c6:	f7eb ff99 	bl	80007fc <__aeabi_ddiv>
 80148ca:	f7ec f91d 	bl	8000b08 <__aeabi_d2iz>
 80148ce:	4680      	mov	r8, r0
 80148d0:	f7eb fe00 	bl	80004d4 <__aeabi_i2d>
 80148d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80148d8:	f7eb fe66 	bl	80005a8 <__aeabi_dmul>
 80148dc:	4602      	mov	r2, r0
 80148de:	460b      	mov	r3, r1
 80148e0:	4630      	mov	r0, r6
 80148e2:	4639      	mov	r1, r7
 80148e4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80148e8:	f7eb fca6 	bl	8000238 <__aeabi_dsub>
 80148ec:	f805 6b01 	strb.w	r6, [r5], #1
 80148f0:	eba5 060b 	sub.w	r6, r5, fp
 80148f4:	45b1      	cmp	r9, r6
 80148f6:	4602      	mov	r2, r0
 80148f8:	460b      	mov	r3, r1
 80148fa:	d139      	bne.n	8014970 <_dtoa_r+0x6c8>
 80148fc:	f7eb fc9e 	bl	800023c <__adddf3>
 8014900:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014904:	4606      	mov	r6, r0
 8014906:	460f      	mov	r7, r1
 8014908:	f7ec f8de 	bl	8000ac8 <__aeabi_dcmpgt>
 801490c:	b9c8      	cbnz	r0, 8014942 <_dtoa_r+0x69a>
 801490e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014912:	4630      	mov	r0, r6
 8014914:	4639      	mov	r1, r7
 8014916:	f7ec f8af 	bl	8000a78 <__aeabi_dcmpeq>
 801491a:	b110      	cbz	r0, 8014922 <_dtoa_r+0x67a>
 801491c:	f018 0f01 	tst.w	r8, #1
 8014920:	d10f      	bne.n	8014942 <_dtoa_r+0x69a>
 8014922:	9904      	ldr	r1, [sp, #16]
 8014924:	4620      	mov	r0, r4
 8014926:	f000 fc99 	bl	801525c <_Bfree>
 801492a:	2300      	movs	r3, #0
 801492c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801492e:	702b      	strb	r3, [r5, #0]
 8014930:	f10a 0301 	add.w	r3, sl, #1
 8014934:	6013      	str	r3, [r2, #0]
 8014936:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014938:	2b00      	cmp	r3, #0
 801493a:	f000 8241 	beq.w	8014dc0 <_dtoa_r+0xb18>
 801493e:	601d      	str	r5, [r3, #0]
 8014940:	e23e      	b.n	8014dc0 <_dtoa_r+0xb18>
 8014942:	f8cd a020 	str.w	sl, [sp, #32]
 8014946:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801494a:	2a39      	cmp	r2, #57	; 0x39
 801494c:	f105 33ff 	add.w	r3, r5, #4294967295
 8014950:	d108      	bne.n	8014964 <_dtoa_r+0x6bc>
 8014952:	459b      	cmp	fp, r3
 8014954:	d10a      	bne.n	801496c <_dtoa_r+0x6c4>
 8014956:	9b08      	ldr	r3, [sp, #32]
 8014958:	3301      	adds	r3, #1
 801495a:	9308      	str	r3, [sp, #32]
 801495c:	2330      	movs	r3, #48	; 0x30
 801495e:	f88b 3000 	strb.w	r3, [fp]
 8014962:	465b      	mov	r3, fp
 8014964:	781a      	ldrb	r2, [r3, #0]
 8014966:	3201      	adds	r2, #1
 8014968:	701a      	strb	r2, [r3, #0]
 801496a:	e78c      	b.n	8014886 <_dtoa_r+0x5de>
 801496c:	461d      	mov	r5, r3
 801496e:	e7ea      	b.n	8014946 <_dtoa_r+0x69e>
 8014970:	2200      	movs	r2, #0
 8014972:	4b9b      	ldr	r3, [pc, #620]	; (8014be0 <_dtoa_r+0x938>)
 8014974:	f7eb fe18 	bl	80005a8 <__aeabi_dmul>
 8014978:	2200      	movs	r2, #0
 801497a:	2300      	movs	r3, #0
 801497c:	4606      	mov	r6, r0
 801497e:	460f      	mov	r7, r1
 8014980:	f7ec f87a 	bl	8000a78 <__aeabi_dcmpeq>
 8014984:	2800      	cmp	r0, #0
 8014986:	d09a      	beq.n	80148be <_dtoa_r+0x616>
 8014988:	e7cb      	b.n	8014922 <_dtoa_r+0x67a>
 801498a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801498c:	2a00      	cmp	r2, #0
 801498e:	f000 808b 	beq.w	8014aa8 <_dtoa_r+0x800>
 8014992:	9a06      	ldr	r2, [sp, #24]
 8014994:	2a01      	cmp	r2, #1
 8014996:	dc6e      	bgt.n	8014a76 <_dtoa_r+0x7ce>
 8014998:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801499a:	2a00      	cmp	r2, #0
 801499c:	d067      	beq.n	8014a6e <_dtoa_r+0x7c6>
 801499e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80149a2:	9f07      	ldr	r7, [sp, #28]
 80149a4:	9d05      	ldr	r5, [sp, #20]
 80149a6:	9a05      	ldr	r2, [sp, #20]
 80149a8:	2101      	movs	r1, #1
 80149aa:	441a      	add	r2, r3
 80149ac:	4620      	mov	r0, r4
 80149ae:	9205      	str	r2, [sp, #20]
 80149b0:	4498      	add	r8, r3
 80149b2:	f000 fcf3 	bl	801539c <__i2b>
 80149b6:	4606      	mov	r6, r0
 80149b8:	2d00      	cmp	r5, #0
 80149ba:	dd0c      	ble.n	80149d6 <_dtoa_r+0x72e>
 80149bc:	f1b8 0f00 	cmp.w	r8, #0
 80149c0:	dd09      	ble.n	80149d6 <_dtoa_r+0x72e>
 80149c2:	4545      	cmp	r5, r8
 80149c4:	9a05      	ldr	r2, [sp, #20]
 80149c6:	462b      	mov	r3, r5
 80149c8:	bfa8      	it	ge
 80149ca:	4643      	movge	r3, r8
 80149cc:	1ad2      	subs	r2, r2, r3
 80149ce:	9205      	str	r2, [sp, #20]
 80149d0:	1aed      	subs	r5, r5, r3
 80149d2:	eba8 0803 	sub.w	r8, r8, r3
 80149d6:	9b07      	ldr	r3, [sp, #28]
 80149d8:	b1eb      	cbz	r3, 8014a16 <_dtoa_r+0x76e>
 80149da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d067      	beq.n	8014ab0 <_dtoa_r+0x808>
 80149e0:	b18f      	cbz	r7, 8014a06 <_dtoa_r+0x75e>
 80149e2:	4631      	mov	r1, r6
 80149e4:	463a      	mov	r2, r7
 80149e6:	4620      	mov	r0, r4
 80149e8:	f000 fd78 	bl	80154dc <__pow5mult>
 80149ec:	9a04      	ldr	r2, [sp, #16]
 80149ee:	4601      	mov	r1, r0
 80149f0:	4606      	mov	r6, r0
 80149f2:	4620      	mov	r0, r4
 80149f4:	f000 fcdb 	bl	80153ae <__multiply>
 80149f8:	9904      	ldr	r1, [sp, #16]
 80149fa:	9008      	str	r0, [sp, #32]
 80149fc:	4620      	mov	r0, r4
 80149fe:	f000 fc2d 	bl	801525c <_Bfree>
 8014a02:	9b08      	ldr	r3, [sp, #32]
 8014a04:	9304      	str	r3, [sp, #16]
 8014a06:	9b07      	ldr	r3, [sp, #28]
 8014a08:	1bda      	subs	r2, r3, r7
 8014a0a:	d004      	beq.n	8014a16 <_dtoa_r+0x76e>
 8014a0c:	9904      	ldr	r1, [sp, #16]
 8014a0e:	4620      	mov	r0, r4
 8014a10:	f000 fd64 	bl	80154dc <__pow5mult>
 8014a14:	9004      	str	r0, [sp, #16]
 8014a16:	2101      	movs	r1, #1
 8014a18:	4620      	mov	r0, r4
 8014a1a:	f000 fcbf 	bl	801539c <__i2b>
 8014a1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014a20:	4607      	mov	r7, r0
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	f000 81d0 	beq.w	8014dc8 <_dtoa_r+0xb20>
 8014a28:	461a      	mov	r2, r3
 8014a2a:	4601      	mov	r1, r0
 8014a2c:	4620      	mov	r0, r4
 8014a2e:	f000 fd55 	bl	80154dc <__pow5mult>
 8014a32:	9b06      	ldr	r3, [sp, #24]
 8014a34:	2b01      	cmp	r3, #1
 8014a36:	4607      	mov	r7, r0
 8014a38:	dc40      	bgt.n	8014abc <_dtoa_r+0x814>
 8014a3a:	9b00      	ldr	r3, [sp, #0]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d139      	bne.n	8014ab4 <_dtoa_r+0x80c>
 8014a40:	9b01      	ldr	r3, [sp, #4]
 8014a42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d136      	bne.n	8014ab8 <_dtoa_r+0x810>
 8014a4a:	9b01      	ldr	r3, [sp, #4]
 8014a4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014a50:	0d1b      	lsrs	r3, r3, #20
 8014a52:	051b      	lsls	r3, r3, #20
 8014a54:	b12b      	cbz	r3, 8014a62 <_dtoa_r+0x7ba>
 8014a56:	9b05      	ldr	r3, [sp, #20]
 8014a58:	3301      	adds	r3, #1
 8014a5a:	9305      	str	r3, [sp, #20]
 8014a5c:	f108 0801 	add.w	r8, r8, #1
 8014a60:	2301      	movs	r3, #1
 8014a62:	9307      	str	r3, [sp, #28]
 8014a64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d12a      	bne.n	8014ac0 <_dtoa_r+0x818>
 8014a6a:	2001      	movs	r0, #1
 8014a6c:	e030      	b.n	8014ad0 <_dtoa_r+0x828>
 8014a6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014a70:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014a74:	e795      	b.n	80149a2 <_dtoa_r+0x6fa>
 8014a76:	9b07      	ldr	r3, [sp, #28]
 8014a78:	f109 37ff 	add.w	r7, r9, #4294967295
 8014a7c:	42bb      	cmp	r3, r7
 8014a7e:	bfbf      	itttt	lt
 8014a80:	9b07      	ldrlt	r3, [sp, #28]
 8014a82:	9707      	strlt	r7, [sp, #28]
 8014a84:	1afa      	sublt	r2, r7, r3
 8014a86:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8014a88:	bfbb      	ittet	lt
 8014a8a:	189b      	addlt	r3, r3, r2
 8014a8c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014a8e:	1bdf      	subge	r7, r3, r7
 8014a90:	2700      	movlt	r7, #0
 8014a92:	f1b9 0f00 	cmp.w	r9, #0
 8014a96:	bfb5      	itete	lt
 8014a98:	9b05      	ldrlt	r3, [sp, #20]
 8014a9a:	9d05      	ldrge	r5, [sp, #20]
 8014a9c:	eba3 0509 	sublt.w	r5, r3, r9
 8014aa0:	464b      	movge	r3, r9
 8014aa2:	bfb8      	it	lt
 8014aa4:	2300      	movlt	r3, #0
 8014aa6:	e77e      	b.n	80149a6 <_dtoa_r+0x6fe>
 8014aa8:	9f07      	ldr	r7, [sp, #28]
 8014aaa:	9d05      	ldr	r5, [sp, #20]
 8014aac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8014aae:	e783      	b.n	80149b8 <_dtoa_r+0x710>
 8014ab0:	9a07      	ldr	r2, [sp, #28]
 8014ab2:	e7ab      	b.n	8014a0c <_dtoa_r+0x764>
 8014ab4:	2300      	movs	r3, #0
 8014ab6:	e7d4      	b.n	8014a62 <_dtoa_r+0x7ba>
 8014ab8:	9b00      	ldr	r3, [sp, #0]
 8014aba:	e7d2      	b.n	8014a62 <_dtoa_r+0x7ba>
 8014abc:	2300      	movs	r3, #0
 8014abe:	9307      	str	r3, [sp, #28]
 8014ac0:	693b      	ldr	r3, [r7, #16]
 8014ac2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014ac6:	6918      	ldr	r0, [r3, #16]
 8014ac8:	f000 fc1a 	bl	8015300 <__hi0bits>
 8014acc:	f1c0 0020 	rsb	r0, r0, #32
 8014ad0:	4440      	add	r0, r8
 8014ad2:	f010 001f 	ands.w	r0, r0, #31
 8014ad6:	d047      	beq.n	8014b68 <_dtoa_r+0x8c0>
 8014ad8:	f1c0 0320 	rsb	r3, r0, #32
 8014adc:	2b04      	cmp	r3, #4
 8014ade:	dd3b      	ble.n	8014b58 <_dtoa_r+0x8b0>
 8014ae0:	9b05      	ldr	r3, [sp, #20]
 8014ae2:	f1c0 001c 	rsb	r0, r0, #28
 8014ae6:	4403      	add	r3, r0
 8014ae8:	9305      	str	r3, [sp, #20]
 8014aea:	4405      	add	r5, r0
 8014aec:	4480      	add	r8, r0
 8014aee:	9b05      	ldr	r3, [sp, #20]
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	dd05      	ble.n	8014b00 <_dtoa_r+0x858>
 8014af4:	461a      	mov	r2, r3
 8014af6:	9904      	ldr	r1, [sp, #16]
 8014af8:	4620      	mov	r0, r4
 8014afa:	f000 fd3d 	bl	8015578 <__lshift>
 8014afe:	9004      	str	r0, [sp, #16]
 8014b00:	f1b8 0f00 	cmp.w	r8, #0
 8014b04:	dd05      	ble.n	8014b12 <_dtoa_r+0x86a>
 8014b06:	4639      	mov	r1, r7
 8014b08:	4642      	mov	r2, r8
 8014b0a:	4620      	mov	r0, r4
 8014b0c:	f000 fd34 	bl	8015578 <__lshift>
 8014b10:	4607      	mov	r7, r0
 8014b12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b14:	b353      	cbz	r3, 8014b6c <_dtoa_r+0x8c4>
 8014b16:	4639      	mov	r1, r7
 8014b18:	9804      	ldr	r0, [sp, #16]
 8014b1a:	f000 fd81 	bl	8015620 <__mcmp>
 8014b1e:	2800      	cmp	r0, #0
 8014b20:	da24      	bge.n	8014b6c <_dtoa_r+0x8c4>
 8014b22:	2300      	movs	r3, #0
 8014b24:	220a      	movs	r2, #10
 8014b26:	9904      	ldr	r1, [sp, #16]
 8014b28:	4620      	mov	r0, r4
 8014b2a:	f000 fbae 	bl	801528a <__multadd>
 8014b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b30:	9004      	str	r0, [sp, #16]
 8014b32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	f000 814d 	beq.w	8014dd6 <_dtoa_r+0xb2e>
 8014b3c:	2300      	movs	r3, #0
 8014b3e:	4631      	mov	r1, r6
 8014b40:	220a      	movs	r2, #10
 8014b42:	4620      	mov	r0, r4
 8014b44:	f000 fba1 	bl	801528a <__multadd>
 8014b48:	9b02      	ldr	r3, [sp, #8]
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	4606      	mov	r6, r0
 8014b4e:	dc4f      	bgt.n	8014bf0 <_dtoa_r+0x948>
 8014b50:	9b06      	ldr	r3, [sp, #24]
 8014b52:	2b02      	cmp	r3, #2
 8014b54:	dd4c      	ble.n	8014bf0 <_dtoa_r+0x948>
 8014b56:	e011      	b.n	8014b7c <_dtoa_r+0x8d4>
 8014b58:	d0c9      	beq.n	8014aee <_dtoa_r+0x846>
 8014b5a:	9a05      	ldr	r2, [sp, #20]
 8014b5c:	331c      	adds	r3, #28
 8014b5e:	441a      	add	r2, r3
 8014b60:	9205      	str	r2, [sp, #20]
 8014b62:	441d      	add	r5, r3
 8014b64:	4498      	add	r8, r3
 8014b66:	e7c2      	b.n	8014aee <_dtoa_r+0x846>
 8014b68:	4603      	mov	r3, r0
 8014b6a:	e7f6      	b.n	8014b5a <_dtoa_r+0x8b2>
 8014b6c:	f1b9 0f00 	cmp.w	r9, #0
 8014b70:	dc38      	bgt.n	8014be4 <_dtoa_r+0x93c>
 8014b72:	9b06      	ldr	r3, [sp, #24]
 8014b74:	2b02      	cmp	r3, #2
 8014b76:	dd35      	ble.n	8014be4 <_dtoa_r+0x93c>
 8014b78:	f8cd 9008 	str.w	r9, [sp, #8]
 8014b7c:	9b02      	ldr	r3, [sp, #8]
 8014b7e:	b963      	cbnz	r3, 8014b9a <_dtoa_r+0x8f2>
 8014b80:	4639      	mov	r1, r7
 8014b82:	2205      	movs	r2, #5
 8014b84:	4620      	mov	r0, r4
 8014b86:	f000 fb80 	bl	801528a <__multadd>
 8014b8a:	4601      	mov	r1, r0
 8014b8c:	4607      	mov	r7, r0
 8014b8e:	9804      	ldr	r0, [sp, #16]
 8014b90:	f000 fd46 	bl	8015620 <__mcmp>
 8014b94:	2800      	cmp	r0, #0
 8014b96:	f73f adcc 	bgt.w	8014732 <_dtoa_r+0x48a>
 8014b9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b9c:	465d      	mov	r5, fp
 8014b9e:	ea6f 0a03 	mvn.w	sl, r3
 8014ba2:	f04f 0900 	mov.w	r9, #0
 8014ba6:	4639      	mov	r1, r7
 8014ba8:	4620      	mov	r0, r4
 8014baa:	f000 fb57 	bl	801525c <_Bfree>
 8014bae:	2e00      	cmp	r6, #0
 8014bb0:	f43f aeb7 	beq.w	8014922 <_dtoa_r+0x67a>
 8014bb4:	f1b9 0f00 	cmp.w	r9, #0
 8014bb8:	d005      	beq.n	8014bc6 <_dtoa_r+0x91e>
 8014bba:	45b1      	cmp	r9, r6
 8014bbc:	d003      	beq.n	8014bc6 <_dtoa_r+0x91e>
 8014bbe:	4649      	mov	r1, r9
 8014bc0:	4620      	mov	r0, r4
 8014bc2:	f000 fb4b 	bl	801525c <_Bfree>
 8014bc6:	4631      	mov	r1, r6
 8014bc8:	4620      	mov	r0, r4
 8014bca:	f000 fb47 	bl	801525c <_Bfree>
 8014bce:	e6a8      	b.n	8014922 <_dtoa_r+0x67a>
 8014bd0:	2700      	movs	r7, #0
 8014bd2:	463e      	mov	r6, r7
 8014bd4:	e7e1      	b.n	8014b9a <_dtoa_r+0x8f2>
 8014bd6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014bda:	463e      	mov	r6, r7
 8014bdc:	e5a9      	b.n	8014732 <_dtoa_r+0x48a>
 8014bde:	bf00      	nop
 8014be0:	40240000 	.word	0x40240000
 8014be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014be6:	f8cd 9008 	str.w	r9, [sp, #8]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	f000 80fa 	beq.w	8014de4 <_dtoa_r+0xb3c>
 8014bf0:	2d00      	cmp	r5, #0
 8014bf2:	dd05      	ble.n	8014c00 <_dtoa_r+0x958>
 8014bf4:	4631      	mov	r1, r6
 8014bf6:	462a      	mov	r2, r5
 8014bf8:	4620      	mov	r0, r4
 8014bfa:	f000 fcbd 	bl	8015578 <__lshift>
 8014bfe:	4606      	mov	r6, r0
 8014c00:	9b07      	ldr	r3, [sp, #28]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d04c      	beq.n	8014ca0 <_dtoa_r+0x9f8>
 8014c06:	6871      	ldr	r1, [r6, #4]
 8014c08:	4620      	mov	r0, r4
 8014c0a:	f000 faf3 	bl	80151f4 <_Balloc>
 8014c0e:	6932      	ldr	r2, [r6, #16]
 8014c10:	3202      	adds	r2, #2
 8014c12:	4605      	mov	r5, r0
 8014c14:	0092      	lsls	r2, r2, #2
 8014c16:	f106 010c 	add.w	r1, r6, #12
 8014c1a:	300c      	adds	r0, #12
 8014c1c:	f7fe fc1e 	bl	801345c <memcpy>
 8014c20:	2201      	movs	r2, #1
 8014c22:	4629      	mov	r1, r5
 8014c24:	4620      	mov	r0, r4
 8014c26:	f000 fca7 	bl	8015578 <__lshift>
 8014c2a:	9b00      	ldr	r3, [sp, #0]
 8014c2c:	f8cd b014 	str.w	fp, [sp, #20]
 8014c30:	f003 0301 	and.w	r3, r3, #1
 8014c34:	46b1      	mov	r9, r6
 8014c36:	9307      	str	r3, [sp, #28]
 8014c38:	4606      	mov	r6, r0
 8014c3a:	4639      	mov	r1, r7
 8014c3c:	9804      	ldr	r0, [sp, #16]
 8014c3e:	f7ff faa7 	bl	8014190 <quorem>
 8014c42:	4649      	mov	r1, r9
 8014c44:	4605      	mov	r5, r0
 8014c46:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014c4a:	9804      	ldr	r0, [sp, #16]
 8014c4c:	f000 fce8 	bl	8015620 <__mcmp>
 8014c50:	4632      	mov	r2, r6
 8014c52:	9000      	str	r0, [sp, #0]
 8014c54:	4639      	mov	r1, r7
 8014c56:	4620      	mov	r0, r4
 8014c58:	f000 fcfc 	bl	8015654 <__mdiff>
 8014c5c:	68c3      	ldr	r3, [r0, #12]
 8014c5e:	4602      	mov	r2, r0
 8014c60:	bb03      	cbnz	r3, 8014ca4 <_dtoa_r+0x9fc>
 8014c62:	4601      	mov	r1, r0
 8014c64:	9008      	str	r0, [sp, #32]
 8014c66:	9804      	ldr	r0, [sp, #16]
 8014c68:	f000 fcda 	bl	8015620 <__mcmp>
 8014c6c:	9a08      	ldr	r2, [sp, #32]
 8014c6e:	4603      	mov	r3, r0
 8014c70:	4611      	mov	r1, r2
 8014c72:	4620      	mov	r0, r4
 8014c74:	9308      	str	r3, [sp, #32]
 8014c76:	f000 faf1 	bl	801525c <_Bfree>
 8014c7a:	9b08      	ldr	r3, [sp, #32]
 8014c7c:	b9a3      	cbnz	r3, 8014ca8 <_dtoa_r+0xa00>
 8014c7e:	9a06      	ldr	r2, [sp, #24]
 8014c80:	b992      	cbnz	r2, 8014ca8 <_dtoa_r+0xa00>
 8014c82:	9a07      	ldr	r2, [sp, #28]
 8014c84:	b982      	cbnz	r2, 8014ca8 <_dtoa_r+0xa00>
 8014c86:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014c8a:	d029      	beq.n	8014ce0 <_dtoa_r+0xa38>
 8014c8c:	9b00      	ldr	r3, [sp, #0]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	dd01      	ble.n	8014c96 <_dtoa_r+0x9ee>
 8014c92:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8014c96:	9b05      	ldr	r3, [sp, #20]
 8014c98:	1c5d      	adds	r5, r3, #1
 8014c9a:	f883 8000 	strb.w	r8, [r3]
 8014c9e:	e782      	b.n	8014ba6 <_dtoa_r+0x8fe>
 8014ca0:	4630      	mov	r0, r6
 8014ca2:	e7c2      	b.n	8014c2a <_dtoa_r+0x982>
 8014ca4:	2301      	movs	r3, #1
 8014ca6:	e7e3      	b.n	8014c70 <_dtoa_r+0x9c8>
 8014ca8:	9a00      	ldr	r2, [sp, #0]
 8014caa:	2a00      	cmp	r2, #0
 8014cac:	db04      	blt.n	8014cb8 <_dtoa_r+0xa10>
 8014cae:	d125      	bne.n	8014cfc <_dtoa_r+0xa54>
 8014cb0:	9a06      	ldr	r2, [sp, #24]
 8014cb2:	bb1a      	cbnz	r2, 8014cfc <_dtoa_r+0xa54>
 8014cb4:	9a07      	ldr	r2, [sp, #28]
 8014cb6:	bb0a      	cbnz	r2, 8014cfc <_dtoa_r+0xa54>
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	ddec      	ble.n	8014c96 <_dtoa_r+0x9ee>
 8014cbc:	2201      	movs	r2, #1
 8014cbe:	9904      	ldr	r1, [sp, #16]
 8014cc0:	4620      	mov	r0, r4
 8014cc2:	f000 fc59 	bl	8015578 <__lshift>
 8014cc6:	4639      	mov	r1, r7
 8014cc8:	9004      	str	r0, [sp, #16]
 8014cca:	f000 fca9 	bl	8015620 <__mcmp>
 8014cce:	2800      	cmp	r0, #0
 8014cd0:	dc03      	bgt.n	8014cda <_dtoa_r+0xa32>
 8014cd2:	d1e0      	bne.n	8014c96 <_dtoa_r+0x9ee>
 8014cd4:	f018 0f01 	tst.w	r8, #1
 8014cd8:	d0dd      	beq.n	8014c96 <_dtoa_r+0x9ee>
 8014cda:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014cde:	d1d8      	bne.n	8014c92 <_dtoa_r+0x9ea>
 8014ce0:	9b05      	ldr	r3, [sp, #20]
 8014ce2:	9a05      	ldr	r2, [sp, #20]
 8014ce4:	1c5d      	adds	r5, r3, #1
 8014ce6:	2339      	movs	r3, #57	; 0x39
 8014ce8:	7013      	strb	r3, [r2, #0]
 8014cea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014cee:	2b39      	cmp	r3, #57	; 0x39
 8014cf0:	f105 32ff 	add.w	r2, r5, #4294967295
 8014cf4:	d04f      	beq.n	8014d96 <_dtoa_r+0xaee>
 8014cf6:	3301      	adds	r3, #1
 8014cf8:	7013      	strb	r3, [r2, #0]
 8014cfa:	e754      	b.n	8014ba6 <_dtoa_r+0x8fe>
 8014cfc:	9a05      	ldr	r2, [sp, #20]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	f102 0501 	add.w	r5, r2, #1
 8014d04:	dd06      	ble.n	8014d14 <_dtoa_r+0xa6c>
 8014d06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014d0a:	d0e9      	beq.n	8014ce0 <_dtoa_r+0xa38>
 8014d0c:	f108 0801 	add.w	r8, r8, #1
 8014d10:	9b05      	ldr	r3, [sp, #20]
 8014d12:	e7c2      	b.n	8014c9a <_dtoa_r+0x9f2>
 8014d14:	9a02      	ldr	r2, [sp, #8]
 8014d16:	f805 8c01 	strb.w	r8, [r5, #-1]
 8014d1a:	eba5 030b 	sub.w	r3, r5, fp
 8014d1e:	4293      	cmp	r3, r2
 8014d20:	d021      	beq.n	8014d66 <_dtoa_r+0xabe>
 8014d22:	2300      	movs	r3, #0
 8014d24:	220a      	movs	r2, #10
 8014d26:	9904      	ldr	r1, [sp, #16]
 8014d28:	4620      	mov	r0, r4
 8014d2a:	f000 faae 	bl	801528a <__multadd>
 8014d2e:	45b1      	cmp	r9, r6
 8014d30:	9004      	str	r0, [sp, #16]
 8014d32:	f04f 0300 	mov.w	r3, #0
 8014d36:	f04f 020a 	mov.w	r2, #10
 8014d3a:	4649      	mov	r1, r9
 8014d3c:	4620      	mov	r0, r4
 8014d3e:	d105      	bne.n	8014d4c <_dtoa_r+0xaa4>
 8014d40:	f000 faa3 	bl	801528a <__multadd>
 8014d44:	4681      	mov	r9, r0
 8014d46:	4606      	mov	r6, r0
 8014d48:	9505      	str	r5, [sp, #20]
 8014d4a:	e776      	b.n	8014c3a <_dtoa_r+0x992>
 8014d4c:	f000 fa9d 	bl	801528a <__multadd>
 8014d50:	4631      	mov	r1, r6
 8014d52:	4681      	mov	r9, r0
 8014d54:	2300      	movs	r3, #0
 8014d56:	220a      	movs	r2, #10
 8014d58:	4620      	mov	r0, r4
 8014d5a:	f000 fa96 	bl	801528a <__multadd>
 8014d5e:	4606      	mov	r6, r0
 8014d60:	e7f2      	b.n	8014d48 <_dtoa_r+0xaa0>
 8014d62:	f04f 0900 	mov.w	r9, #0
 8014d66:	2201      	movs	r2, #1
 8014d68:	9904      	ldr	r1, [sp, #16]
 8014d6a:	4620      	mov	r0, r4
 8014d6c:	f000 fc04 	bl	8015578 <__lshift>
 8014d70:	4639      	mov	r1, r7
 8014d72:	9004      	str	r0, [sp, #16]
 8014d74:	f000 fc54 	bl	8015620 <__mcmp>
 8014d78:	2800      	cmp	r0, #0
 8014d7a:	dcb6      	bgt.n	8014cea <_dtoa_r+0xa42>
 8014d7c:	d102      	bne.n	8014d84 <_dtoa_r+0xadc>
 8014d7e:	f018 0f01 	tst.w	r8, #1
 8014d82:	d1b2      	bne.n	8014cea <_dtoa_r+0xa42>
 8014d84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014d88:	2b30      	cmp	r3, #48	; 0x30
 8014d8a:	f105 32ff 	add.w	r2, r5, #4294967295
 8014d8e:	f47f af0a 	bne.w	8014ba6 <_dtoa_r+0x8fe>
 8014d92:	4615      	mov	r5, r2
 8014d94:	e7f6      	b.n	8014d84 <_dtoa_r+0xadc>
 8014d96:	4593      	cmp	fp, r2
 8014d98:	d105      	bne.n	8014da6 <_dtoa_r+0xafe>
 8014d9a:	2331      	movs	r3, #49	; 0x31
 8014d9c:	f10a 0a01 	add.w	sl, sl, #1
 8014da0:	f88b 3000 	strb.w	r3, [fp]
 8014da4:	e6ff      	b.n	8014ba6 <_dtoa_r+0x8fe>
 8014da6:	4615      	mov	r5, r2
 8014da8:	e79f      	b.n	8014cea <_dtoa_r+0xa42>
 8014daa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8014e10 <_dtoa_r+0xb68>
 8014dae:	e007      	b.n	8014dc0 <_dtoa_r+0xb18>
 8014db0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014db2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8014e14 <_dtoa_r+0xb6c>
 8014db6:	b11b      	cbz	r3, 8014dc0 <_dtoa_r+0xb18>
 8014db8:	f10b 0308 	add.w	r3, fp, #8
 8014dbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014dbe:	6013      	str	r3, [r2, #0]
 8014dc0:	4658      	mov	r0, fp
 8014dc2:	b017      	add	sp, #92	; 0x5c
 8014dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dc8:	9b06      	ldr	r3, [sp, #24]
 8014dca:	2b01      	cmp	r3, #1
 8014dcc:	f77f ae35 	ble.w	8014a3a <_dtoa_r+0x792>
 8014dd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014dd2:	9307      	str	r3, [sp, #28]
 8014dd4:	e649      	b.n	8014a6a <_dtoa_r+0x7c2>
 8014dd6:	9b02      	ldr	r3, [sp, #8]
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	dc03      	bgt.n	8014de4 <_dtoa_r+0xb3c>
 8014ddc:	9b06      	ldr	r3, [sp, #24]
 8014dde:	2b02      	cmp	r3, #2
 8014de0:	f73f aecc 	bgt.w	8014b7c <_dtoa_r+0x8d4>
 8014de4:	465d      	mov	r5, fp
 8014de6:	4639      	mov	r1, r7
 8014de8:	9804      	ldr	r0, [sp, #16]
 8014dea:	f7ff f9d1 	bl	8014190 <quorem>
 8014dee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014df2:	f805 8b01 	strb.w	r8, [r5], #1
 8014df6:	9a02      	ldr	r2, [sp, #8]
 8014df8:	eba5 030b 	sub.w	r3, r5, fp
 8014dfc:	429a      	cmp	r2, r3
 8014dfe:	ddb0      	ble.n	8014d62 <_dtoa_r+0xaba>
 8014e00:	2300      	movs	r3, #0
 8014e02:	220a      	movs	r2, #10
 8014e04:	9904      	ldr	r1, [sp, #16]
 8014e06:	4620      	mov	r0, r4
 8014e08:	f000 fa3f 	bl	801528a <__multadd>
 8014e0c:	9004      	str	r0, [sp, #16]
 8014e0e:	e7ea      	b.n	8014de6 <_dtoa_r+0xb3e>
 8014e10:	08017d44 	.word	0x08017d44
 8014e14:	08017d68 	.word	0x08017d68

08014e18 <__sflush_r>:
 8014e18:	898a      	ldrh	r2, [r1, #12]
 8014e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e1e:	4605      	mov	r5, r0
 8014e20:	0710      	lsls	r0, r2, #28
 8014e22:	460c      	mov	r4, r1
 8014e24:	d458      	bmi.n	8014ed8 <__sflush_r+0xc0>
 8014e26:	684b      	ldr	r3, [r1, #4]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	dc05      	bgt.n	8014e38 <__sflush_r+0x20>
 8014e2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	dc02      	bgt.n	8014e38 <__sflush_r+0x20>
 8014e32:	2000      	movs	r0, #0
 8014e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014e3a:	2e00      	cmp	r6, #0
 8014e3c:	d0f9      	beq.n	8014e32 <__sflush_r+0x1a>
 8014e3e:	2300      	movs	r3, #0
 8014e40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014e44:	682f      	ldr	r7, [r5, #0]
 8014e46:	6a21      	ldr	r1, [r4, #32]
 8014e48:	602b      	str	r3, [r5, #0]
 8014e4a:	d032      	beq.n	8014eb2 <__sflush_r+0x9a>
 8014e4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014e4e:	89a3      	ldrh	r3, [r4, #12]
 8014e50:	075a      	lsls	r2, r3, #29
 8014e52:	d505      	bpl.n	8014e60 <__sflush_r+0x48>
 8014e54:	6863      	ldr	r3, [r4, #4]
 8014e56:	1ac0      	subs	r0, r0, r3
 8014e58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014e5a:	b10b      	cbz	r3, 8014e60 <__sflush_r+0x48>
 8014e5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014e5e:	1ac0      	subs	r0, r0, r3
 8014e60:	2300      	movs	r3, #0
 8014e62:	4602      	mov	r2, r0
 8014e64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014e66:	6a21      	ldr	r1, [r4, #32]
 8014e68:	4628      	mov	r0, r5
 8014e6a:	47b0      	blx	r6
 8014e6c:	1c43      	adds	r3, r0, #1
 8014e6e:	89a3      	ldrh	r3, [r4, #12]
 8014e70:	d106      	bne.n	8014e80 <__sflush_r+0x68>
 8014e72:	6829      	ldr	r1, [r5, #0]
 8014e74:	291d      	cmp	r1, #29
 8014e76:	d848      	bhi.n	8014f0a <__sflush_r+0xf2>
 8014e78:	4a29      	ldr	r2, [pc, #164]	; (8014f20 <__sflush_r+0x108>)
 8014e7a:	40ca      	lsrs	r2, r1
 8014e7c:	07d6      	lsls	r6, r2, #31
 8014e7e:	d544      	bpl.n	8014f0a <__sflush_r+0xf2>
 8014e80:	2200      	movs	r2, #0
 8014e82:	6062      	str	r2, [r4, #4]
 8014e84:	04d9      	lsls	r1, r3, #19
 8014e86:	6922      	ldr	r2, [r4, #16]
 8014e88:	6022      	str	r2, [r4, #0]
 8014e8a:	d504      	bpl.n	8014e96 <__sflush_r+0x7e>
 8014e8c:	1c42      	adds	r2, r0, #1
 8014e8e:	d101      	bne.n	8014e94 <__sflush_r+0x7c>
 8014e90:	682b      	ldr	r3, [r5, #0]
 8014e92:	b903      	cbnz	r3, 8014e96 <__sflush_r+0x7e>
 8014e94:	6560      	str	r0, [r4, #84]	; 0x54
 8014e96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014e98:	602f      	str	r7, [r5, #0]
 8014e9a:	2900      	cmp	r1, #0
 8014e9c:	d0c9      	beq.n	8014e32 <__sflush_r+0x1a>
 8014e9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014ea2:	4299      	cmp	r1, r3
 8014ea4:	d002      	beq.n	8014eac <__sflush_r+0x94>
 8014ea6:	4628      	mov	r0, r5
 8014ea8:	f7fe faec 	bl	8013484 <_free_r>
 8014eac:	2000      	movs	r0, #0
 8014eae:	6360      	str	r0, [r4, #52]	; 0x34
 8014eb0:	e7c0      	b.n	8014e34 <__sflush_r+0x1c>
 8014eb2:	2301      	movs	r3, #1
 8014eb4:	4628      	mov	r0, r5
 8014eb6:	47b0      	blx	r6
 8014eb8:	1c41      	adds	r1, r0, #1
 8014eba:	d1c8      	bne.n	8014e4e <__sflush_r+0x36>
 8014ebc:	682b      	ldr	r3, [r5, #0]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d0c5      	beq.n	8014e4e <__sflush_r+0x36>
 8014ec2:	2b1d      	cmp	r3, #29
 8014ec4:	d001      	beq.n	8014eca <__sflush_r+0xb2>
 8014ec6:	2b16      	cmp	r3, #22
 8014ec8:	d101      	bne.n	8014ece <__sflush_r+0xb6>
 8014eca:	602f      	str	r7, [r5, #0]
 8014ecc:	e7b1      	b.n	8014e32 <__sflush_r+0x1a>
 8014ece:	89a3      	ldrh	r3, [r4, #12]
 8014ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ed4:	81a3      	strh	r3, [r4, #12]
 8014ed6:	e7ad      	b.n	8014e34 <__sflush_r+0x1c>
 8014ed8:	690f      	ldr	r7, [r1, #16]
 8014eda:	2f00      	cmp	r7, #0
 8014edc:	d0a9      	beq.n	8014e32 <__sflush_r+0x1a>
 8014ede:	0793      	lsls	r3, r2, #30
 8014ee0:	680e      	ldr	r6, [r1, #0]
 8014ee2:	bf08      	it	eq
 8014ee4:	694b      	ldreq	r3, [r1, #20]
 8014ee6:	600f      	str	r7, [r1, #0]
 8014ee8:	bf18      	it	ne
 8014eea:	2300      	movne	r3, #0
 8014eec:	eba6 0807 	sub.w	r8, r6, r7
 8014ef0:	608b      	str	r3, [r1, #8]
 8014ef2:	f1b8 0f00 	cmp.w	r8, #0
 8014ef6:	dd9c      	ble.n	8014e32 <__sflush_r+0x1a>
 8014ef8:	4643      	mov	r3, r8
 8014efa:	463a      	mov	r2, r7
 8014efc:	6a21      	ldr	r1, [r4, #32]
 8014efe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014f00:	4628      	mov	r0, r5
 8014f02:	47b0      	blx	r6
 8014f04:	2800      	cmp	r0, #0
 8014f06:	dc06      	bgt.n	8014f16 <__sflush_r+0xfe>
 8014f08:	89a3      	ldrh	r3, [r4, #12]
 8014f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f0e:	81a3      	strh	r3, [r4, #12]
 8014f10:	f04f 30ff 	mov.w	r0, #4294967295
 8014f14:	e78e      	b.n	8014e34 <__sflush_r+0x1c>
 8014f16:	4407      	add	r7, r0
 8014f18:	eba8 0800 	sub.w	r8, r8, r0
 8014f1c:	e7e9      	b.n	8014ef2 <__sflush_r+0xda>
 8014f1e:	bf00      	nop
 8014f20:	20400001 	.word	0x20400001

08014f24 <_fflush_r>:
 8014f24:	b538      	push	{r3, r4, r5, lr}
 8014f26:	690b      	ldr	r3, [r1, #16]
 8014f28:	4605      	mov	r5, r0
 8014f2a:	460c      	mov	r4, r1
 8014f2c:	b1db      	cbz	r3, 8014f66 <_fflush_r+0x42>
 8014f2e:	b118      	cbz	r0, 8014f38 <_fflush_r+0x14>
 8014f30:	6983      	ldr	r3, [r0, #24]
 8014f32:	b90b      	cbnz	r3, 8014f38 <_fflush_r+0x14>
 8014f34:	f000 f860 	bl	8014ff8 <__sinit>
 8014f38:	4b0c      	ldr	r3, [pc, #48]	; (8014f6c <_fflush_r+0x48>)
 8014f3a:	429c      	cmp	r4, r3
 8014f3c:	d109      	bne.n	8014f52 <_fflush_r+0x2e>
 8014f3e:	686c      	ldr	r4, [r5, #4]
 8014f40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f44:	b17b      	cbz	r3, 8014f66 <_fflush_r+0x42>
 8014f46:	4621      	mov	r1, r4
 8014f48:	4628      	mov	r0, r5
 8014f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014f4e:	f7ff bf63 	b.w	8014e18 <__sflush_r>
 8014f52:	4b07      	ldr	r3, [pc, #28]	; (8014f70 <_fflush_r+0x4c>)
 8014f54:	429c      	cmp	r4, r3
 8014f56:	d101      	bne.n	8014f5c <_fflush_r+0x38>
 8014f58:	68ac      	ldr	r4, [r5, #8]
 8014f5a:	e7f1      	b.n	8014f40 <_fflush_r+0x1c>
 8014f5c:	4b05      	ldr	r3, [pc, #20]	; (8014f74 <_fflush_r+0x50>)
 8014f5e:	429c      	cmp	r4, r3
 8014f60:	bf08      	it	eq
 8014f62:	68ec      	ldreq	r4, [r5, #12]
 8014f64:	e7ec      	b.n	8014f40 <_fflush_r+0x1c>
 8014f66:	2000      	movs	r0, #0
 8014f68:	bd38      	pop	{r3, r4, r5, pc}
 8014f6a:	bf00      	nop
 8014f6c:	08017d98 	.word	0x08017d98
 8014f70:	08017db8 	.word	0x08017db8
 8014f74:	08017d78 	.word	0x08017d78

08014f78 <std>:
 8014f78:	2300      	movs	r3, #0
 8014f7a:	b510      	push	{r4, lr}
 8014f7c:	4604      	mov	r4, r0
 8014f7e:	e9c0 3300 	strd	r3, r3, [r0]
 8014f82:	6083      	str	r3, [r0, #8]
 8014f84:	8181      	strh	r1, [r0, #12]
 8014f86:	6643      	str	r3, [r0, #100]	; 0x64
 8014f88:	81c2      	strh	r2, [r0, #14]
 8014f8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014f8e:	6183      	str	r3, [r0, #24]
 8014f90:	4619      	mov	r1, r3
 8014f92:	2208      	movs	r2, #8
 8014f94:	305c      	adds	r0, #92	; 0x5c
 8014f96:	f7fe fa6c 	bl	8013472 <memset>
 8014f9a:	4b05      	ldr	r3, [pc, #20]	; (8014fb0 <std+0x38>)
 8014f9c:	6263      	str	r3, [r4, #36]	; 0x24
 8014f9e:	4b05      	ldr	r3, [pc, #20]	; (8014fb4 <std+0x3c>)
 8014fa0:	62a3      	str	r3, [r4, #40]	; 0x28
 8014fa2:	4b05      	ldr	r3, [pc, #20]	; (8014fb8 <std+0x40>)
 8014fa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014fa6:	4b05      	ldr	r3, [pc, #20]	; (8014fbc <std+0x44>)
 8014fa8:	6224      	str	r4, [r4, #32]
 8014faa:	6323      	str	r3, [r4, #48]	; 0x30
 8014fac:	bd10      	pop	{r4, pc}
 8014fae:	bf00      	nop
 8014fb0:	08015ced 	.word	0x08015ced
 8014fb4:	08015d0f 	.word	0x08015d0f
 8014fb8:	08015d47 	.word	0x08015d47
 8014fbc:	08015d6b 	.word	0x08015d6b

08014fc0 <_cleanup_r>:
 8014fc0:	4901      	ldr	r1, [pc, #4]	; (8014fc8 <_cleanup_r+0x8>)
 8014fc2:	f000 b885 	b.w	80150d0 <_fwalk_reent>
 8014fc6:	bf00      	nop
 8014fc8:	08014f25 	.word	0x08014f25

08014fcc <__sfmoreglue>:
 8014fcc:	b570      	push	{r4, r5, r6, lr}
 8014fce:	1e4a      	subs	r2, r1, #1
 8014fd0:	2568      	movs	r5, #104	; 0x68
 8014fd2:	4355      	muls	r5, r2
 8014fd4:	460e      	mov	r6, r1
 8014fd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014fda:	f7fe faa1 	bl	8013520 <_malloc_r>
 8014fde:	4604      	mov	r4, r0
 8014fe0:	b140      	cbz	r0, 8014ff4 <__sfmoreglue+0x28>
 8014fe2:	2100      	movs	r1, #0
 8014fe4:	e9c0 1600 	strd	r1, r6, [r0]
 8014fe8:	300c      	adds	r0, #12
 8014fea:	60a0      	str	r0, [r4, #8]
 8014fec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014ff0:	f7fe fa3f 	bl	8013472 <memset>
 8014ff4:	4620      	mov	r0, r4
 8014ff6:	bd70      	pop	{r4, r5, r6, pc}

08014ff8 <__sinit>:
 8014ff8:	6983      	ldr	r3, [r0, #24]
 8014ffa:	b510      	push	{r4, lr}
 8014ffc:	4604      	mov	r4, r0
 8014ffe:	bb33      	cbnz	r3, 801504e <__sinit+0x56>
 8015000:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015004:	6503      	str	r3, [r0, #80]	; 0x50
 8015006:	4b12      	ldr	r3, [pc, #72]	; (8015050 <__sinit+0x58>)
 8015008:	4a12      	ldr	r2, [pc, #72]	; (8015054 <__sinit+0x5c>)
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	6282      	str	r2, [r0, #40]	; 0x28
 801500e:	4298      	cmp	r0, r3
 8015010:	bf04      	itt	eq
 8015012:	2301      	moveq	r3, #1
 8015014:	6183      	streq	r3, [r0, #24]
 8015016:	f000 f81f 	bl	8015058 <__sfp>
 801501a:	6060      	str	r0, [r4, #4]
 801501c:	4620      	mov	r0, r4
 801501e:	f000 f81b 	bl	8015058 <__sfp>
 8015022:	60a0      	str	r0, [r4, #8]
 8015024:	4620      	mov	r0, r4
 8015026:	f000 f817 	bl	8015058 <__sfp>
 801502a:	2200      	movs	r2, #0
 801502c:	60e0      	str	r0, [r4, #12]
 801502e:	2104      	movs	r1, #4
 8015030:	6860      	ldr	r0, [r4, #4]
 8015032:	f7ff ffa1 	bl	8014f78 <std>
 8015036:	2201      	movs	r2, #1
 8015038:	2109      	movs	r1, #9
 801503a:	68a0      	ldr	r0, [r4, #8]
 801503c:	f7ff ff9c 	bl	8014f78 <std>
 8015040:	2202      	movs	r2, #2
 8015042:	2112      	movs	r1, #18
 8015044:	68e0      	ldr	r0, [r4, #12]
 8015046:	f7ff ff97 	bl	8014f78 <std>
 801504a:	2301      	movs	r3, #1
 801504c:	61a3      	str	r3, [r4, #24]
 801504e:	bd10      	pop	{r4, pc}
 8015050:	08017d30 	.word	0x08017d30
 8015054:	08014fc1 	.word	0x08014fc1

08015058 <__sfp>:
 8015058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801505a:	4b1b      	ldr	r3, [pc, #108]	; (80150c8 <__sfp+0x70>)
 801505c:	681e      	ldr	r6, [r3, #0]
 801505e:	69b3      	ldr	r3, [r6, #24]
 8015060:	4607      	mov	r7, r0
 8015062:	b913      	cbnz	r3, 801506a <__sfp+0x12>
 8015064:	4630      	mov	r0, r6
 8015066:	f7ff ffc7 	bl	8014ff8 <__sinit>
 801506a:	3648      	adds	r6, #72	; 0x48
 801506c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015070:	3b01      	subs	r3, #1
 8015072:	d503      	bpl.n	801507c <__sfp+0x24>
 8015074:	6833      	ldr	r3, [r6, #0]
 8015076:	b133      	cbz	r3, 8015086 <__sfp+0x2e>
 8015078:	6836      	ldr	r6, [r6, #0]
 801507a:	e7f7      	b.n	801506c <__sfp+0x14>
 801507c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015080:	b16d      	cbz	r5, 801509e <__sfp+0x46>
 8015082:	3468      	adds	r4, #104	; 0x68
 8015084:	e7f4      	b.n	8015070 <__sfp+0x18>
 8015086:	2104      	movs	r1, #4
 8015088:	4638      	mov	r0, r7
 801508a:	f7ff ff9f 	bl	8014fcc <__sfmoreglue>
 801508e:	6030      	str	r0, [r6, #0]
 8015090:	2800      	cmp	r0, #0
 8015092:	d1f1      	bne.n	8015078 <__sfp+0x20>
 8015094:	230c      	movs	r3, #12
 8015096:	603b      	str	r3, [r7, #0]
 8015098:	4604      	mov	r4, r0
 801509a:	4620      	mov	r0, r4
 801509c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801509e:	4b0b      	ldr	r3, [pc, #44]	; (80150cc <__sfp+0x74>)
 80150a0:	6665      	str	r5, [r4, #100]	; 0x64
 80150a2:	e9c4 5500 	strd	r5, r5, [r4]
 80150a6:	60a5      	str	r5, [r4, #8]
 80150a8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80150ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80150b0:	2208      	movs	r2, #8
 80150b2:	4629      	mov	r1, r5
 80150b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80150b8:	f7fe f9db 	bl	8013472 <memset>
 80150bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80150c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80150c4:	e7e9      	b.n	801509a <__sfp+0x42>
 80150c6:	bf00      	nop
 80150c8:	08017d30 	.word	0x08017d30
 80150cc:	ffff0001 	.word	0xffff0001

080150d0 <_fwalk_reent>:
 80150d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150d4:	4680      	mov	r8, r0
 80150d6:	4689      	mov	r9, r1
 80150d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80150dc:	2600      	movs	r6, #0
 80150de:	b914      	cbnz	r4, 80150e6 <_fwalk_reent+0x16>
 80150e0:	4630      	mov	r0, r6
 80150e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80150e6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80150ea:	3f01      	subs	r7, #1
 80150ec:	d501      	bpl.n	80150f2 <_fwalk_reent+0x22>
 80150ee:	6824      	ldr	r4, [r4, #0]
 80150f0:	e7f5      	b.n	80150de <_fwalk_reent+0xe>
 80150f2:	89ab      	ldrh	r3, [r5, #12]
 80150f4:	2b01      	cmp	r3, #1
 80150f6:	d907      	bls.n	8015108 <_fwalk_reent+0x38>
 80150f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80150fc:	3301      	adds	r3, #1
 80150fe:	d003      	beq.n	8015108 <_fwalk_reent+0x38>
 8015100:	4629      	mov	r1, r5
 8015102:	4640      	mov	r0, r8
 8015104:	47c8      	blx	r9
 8015106:	4306      	orrs	r6, r0
 8015108:	3568      	adds	r5, #104	; 0x68
 801510a:	e7ee      	b.n	80150ea <_fwalk_reent+0x1a>

0801510c <_localeconv_r>:
 801510c:	4b04      	ldr	r3, [pc, #16]	; (8015120 <_localeconv_r+0x14>)
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	6a18      	ldr	r0, [r3, #32]
 8015112:	4b04      	ldr	r3, [pc, #16]	; (8015124 <_localeconv_r+0x18>)
 8015114:	2800      	cmp	r0, #0
 8015116:	bf08      	it	eq
 8015118:	4618      	moveq	r0, r3
 801511a:	30f0      	adds	r0, #240	; 0xf0
 801511c:	4770      	bx	lr
 801511e:	bf00      	nop
 8015120:	20000030 	.word	0x20000030
 8015124:	20000094 	.word	0x20000094

08015128 <__swhatbuf_r>:
 8015128:	b570      	push	{r4, r5, r6, lr}
 801512a:	460e      	mov	r6, r1
 801512c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015130:	2900      	cmp	r1, #0
 8015132:	b096      	sub	sp, #88	; 0x58
 8015134:	4614      	mov	r4, r2
 8015136:	461d      	mov	r5, r3
 8015138:	da07      	bge.n	801514a <__swhatbuf_r+0x22>
 801513a:	2300      	movs	r3, #0
 801513c:	602b      	str	r3, [r5, #0]
 801513e:	89b3      	ldrh	r3, [r6, #12]
 8015140:	061a      	lsls	r2, r3, #24
 8015142:	d410      	bmi.n	8015166 <__swhatbuf_r+0x3e>
 8015144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015148:	e00e      	b.n	8015168 <__swhatbuf_r+0x40>
 801514a:	466a      	mov	r2, sp
 801514c:	f000 fe34 	bl	8015db8 <_fstat_r>
 8015150:	2800      	cmp	r0, #0
 8015152:	dbf2      	blt.n	801513a <__swhatbuf_r+0x12>
 8015154:	9a01      	ldr	r2, [sp, #4]
 8015156:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801515a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801515e:	425a      	negs	r2, r3
 8015160:	415a      	adcs	r2, r3
 8015162:	602a      	str	r2, [r5, #0]
 8015164:	e7ee      	b.n	8015144 <__swhatbuf_r+0x1c>
 8015166:	2340      	movs	r3, #64	; 0x40
 8015168:	2000      	movs	r0, #0
 801516a:	6023      	str	r3, [r4, #0]
 801516c:	b016      	add	sp, #88	; 0x58
 801516e:	bd70      	pop	{r4, r5, r6, pc}

08015170 <__smakebuf_r>:
 8015170:	898b      	ldrh	r3, [r1, #12]
 8015172:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015174:	079d      	lsls	r5, r3, #30
 8015176:	4606      	mov	r6, r0
 8015178:	460c      	mov	r4, r1
 801517a:	d507      	bpl.n	801518c <__smakebuf_r+0x1c>
 801517c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015180:	6023      	str	r3, [r4, #0]
 8015182:	6123      	str	r3, [r4, #16]
 8015184:	2301      	movs	r3, #1
 8015186:	6163      	str	r3, [r4, #20]
 8015188:	b002      	add	sp, #8
 801518a:	bd70      	pop	{r4, r5, r6, pc}
 801518c:	ab01      	add	r3, sp, #4
 801518e:	466a      	mov	r2, sp
 8015190:	f7ff ffca 	bl	8015128 <__swhatbuf_r>
 8015194:	9900      	ldr	r1, [sp, #0]
 8015196:	4605      	mov	r5, r0
 8015198:	4630      	mov	r0, r6
 801519a:	f7fe f9c1 	bl	8013520 <_malloc_r>
 801519e:	b948      	cbnz	r0, 80151b4 <__smakebuf_r+0x44>
 80151a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80151a4:	059a      	lsls	r2, r3, #22
 80151a6:	d4ef      	bmi.n	8015188 <__smakebuf_r+0x18>
 80151a8:	f023 0303 	bic.w	r3, r3, #3
 80151ac:	f043 0302 	orr.w	r3, r3, #2
 80151b0:	81a3      	strh	r3, [r4, #12]
 80151b2:	e7e3      	b.n	801517c <__smakebuf_r+0xc>
 80151b4:	4b0d      	ldr	r3, [pc, #52]	; (80151ec <__smakebuf_r+0x7c>)
 80151b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80151b8:	89a3      	ldrh	r3, [r4, #12]
 80151ba:	6020      	str	r0, [r4, #0]
 80151bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80151c0:	81a3      	strh	r3, [r4, #12]
 80151c2:	9b00      	ldr	r3, [sp, #0]
 80151c4:	6163      	str	r3, [r4, #20]
 80151c6:	9b01      	ldr	r3, [sp, #4]
 80151c8:	6120      	str	r0, [r4, #16]
 80151ca:	b15b      	cbz	r3, 80151e4 <__smakebuf_r+0x74>
 80151cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80151d0:	4630      	mov	r0, r6
 80151d2:	f000 fe03 	bl	8015ddc <_isatty_r>
 80151d6:	b128      	cbz	r0, 80151e4 <__smakebuf_r+0x74>
 80151d8:	89a3      	ldrh	r3, [r4, #12]
 80151da:	f023 0303 	bic.w	r3, r3, #3
 80151de:	f043 0301 	orr.w	r3, r3, #1
 80151e2:	81a3      	strh	r3, [r4, #12]
 80151e4:	89a3      	ldrh	r3, [r4, #12]
 80151e6:	431d      	orrs	r5, r3
 80151e8:	81a5      	strh	r5, [r4, #12]
 80151ea:	e7cd      	b.n	8015188 <__smakebuf_r+0x18>
 80151ec:	08014fc1 	.word	0x08014fc1

080151f0 <__malloc_lock>:
 80151f0:	4770      	bx	lr

080151f2 <__malloc_unlock>:
 80151f2:	4770      	bx	lr

080151f4 <_Balloc>:
 80151f4:	b570      	push	{r4, r5, r6, lr}
 80151f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80151f8:	4604      	mov	r4, r0
 80151fa:	460e      	mov	r6, r1
 80151fc:	b93d      	cbnz	r5, 801520e <_Balloc+0x1a>
 80151fe:	2010      	movs	r0, #16
 8015200:	f7fe f924 	bl	801344c <malloc>
 8015204:	6260      	str	r0, [r4, #36]	; 0x24
 8015206:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801520a:	6005      	str	r5, [r0, #0]
 801520c:	60c5      	str	r5, [r0, #12]
 801520e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8015210:	68eb      	ldr	r3, [r5, #12]
 8015212:	b183      	cbz	r3, 8015236 <_Balloc+0x42>
 8015214:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015216:	68db      	ldr	r3, [r3, #12]
 8015218:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801521c:	b9b8      	cbnz	r0, 801524e <_Balloc+0x5a>
 801521e:	2101      	movs	r1, #1
 8015220:	fa01 f506 	lsl.w	r5, r1, r6
 8015224:	1d6a      	adds	r2, r5, #5
 8015226:	0092      	lsls	r2, r2, #2
 8015228:	4620      	mov	r0, r4
 801522a:	f000 fabf 	bl	80157ac <_calloc_r>
 801522e:	b160      	cbz	r0, 801524a <_Balloc+0x56>
 8015230:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8015234:	e00e      	b.n	8015254 <_Balloc+0x60>
 8015236:	2221      	movs	r2, #33	; 0x21
 8015238:	2104      	movs	r1, #4
 801523a:	4620      	mov	r0, r4
 801523c:	f000 fab6 	bl	80157ac <_calloc_r>
 8015240:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015242:	60e8      	str	r0, [r5, #12]
 8015244:	68db      	ldr	r3, [r3, #12]
 8015246:	2b00      	cmp	r3, #0
 8015248:	d1e4      	bne.n	8015214 <_Balloc+0x20>
 801524a:	2000      	movs	r0, #0
 801524c:	bd70      	pop	{r4, r5, r6, pc}
 801524e:	6802      	ldr	r2, [r0, #0]
 8015250:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8015254:	2300      	movs	r3, #0
 8015256:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801525a:	e7f7      	b.n	801524c <_Balloc+0x58>

0801525c <_Bfree>:
 801525c:	b570      	push	{r4, r5, r6, lr}
 801525e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8015260:	4606      	mov	r6, r0
 8015262:	460d      	mov	r5, r1
 8015264:	b93c      	cbnz	r4, 8015276 <_Bfree+0x1a>
 8015266:	2010      	movs	r0, #16
 8015268:	f7fe f8f0 	bl	801344c <malloc>
 801526c:	6270      	str	r0, [r6, #36]	; 0x24
 801526e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015272:	6004      	str	r4, [r0, #0]
 8015274:	60c4      	str	r4, [r0, #12]
 8015276:	b13d      	cbz	r5, 8015288 <_Bfree+0x2c>
 8015278:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801527a:	686a      	ldr	r2, [r5, #4]
 801527c:	68db      	ldr	r3, [r3, #12]
 801527e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015282:	6029      	str	r1, [r5, #0]
 8015284:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8015288:	bd70      	pop	{r4, r5, r6, pc}

0801528a <__multadd>:
 801528a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801528e:	690d      	ldr	r5, [r1, #16]
 8015290:	461f      	mov	r7, r3
 8015292:	4606      	mov	r6, r0
 8015294:	460c      	mov	r4, r1
 8015296:	f101 0c14 	add.w	ip, r1, #20
 801529a:	2300      	movs	r3, #0
 801529c:	f8dc 0000 	ldr.w	r0, [ip]
 80152a0:	b281      	uxth	r1, r0
 80152a2:	fb02 7101 	mla	r1, r2, r1, r7
 80152a6:	0c0f      	lsrs	r7, r1, #16
 80152a8:	0c00      	lsrs	r0, r0, #16
 80152aa:	fb02 7000 	mla	r0, r2, r0, r7
 80152ae:	b289      	uxth	r1, r1
 80152b0:	3301      	adds	r3, #1
 80152b2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80152b6:	429d      	cmp	r5, r3
 80152b8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80152bc:	f84c 1b04 	str.w	r1, [ip], #4
 80152c0:	dcec      	bgt.n	801529c <__multadd+0x12>
 80152c2:	b1d7      	cbz	r7, 80152fa <__multadd+0x70>
 80152c4:	68a3      	ldr	r3, [r4, #8]
 80152c6:	42ab      	cmp	r3, r5
 80152c8:	dc12      	bgt.n	80152f0 <__multadd+0x66>
 80152ca:	6861      	ldr	r1, [r4, #4]
 80152cc:	4630      	mov	r0, r6
 80152ce:	3101      	adds	r1, #1
 80152d0:	f7ff ff90 	bl	80151f4 <_Balloc>
 80152d4:	6922      	ldr	r2, [r4, #16]
 80152d6:	3202      	adds	r2, #2
 80152d8:	f104 010c 	add.w	r1, r4, #12
 80152dc:	4680      	mov	r8, r0
 80152de:	0092      	lsls	r2, r2, #2
 80152e0:	300c      	adds	r0, #12
 80152e2:	f7fe f8bb 	bl	801345c <memcpy>
 80152e6:	4621      	mov	r1, r4
 80152e8:	4630      	mov	r0, r6
 80152ea:	f7ff ffb7 	bl	801525c <_Bfree>
 80152ee:	4644      	mov	r4, r8
 80152f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80152f4:	3501      	adds	r5, #1
 80152f6:	615f      	str	r7, [r3, #20]
 80152f8:	6125      	str	r5, [r4, #16]
 80152fa:	4620      	mov	r0, r4
 80152fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015300 <__hi0bits>:
 8015300:	0c02      	lsrs	r2, r0, #16
 8015302:	0412      	lsls	r2, r2, #16
 8015304:	4603      	mov	r3, r0
 8015306:	b9b2      	cbnz	r2, 8015336 <__hi0bits+0x36>
 8015308:	0403      	lsls	r3, r0, #16
 801530a:	2010      	movs	r0, #16
 801530c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015310:	bf04      	itt	eq
 8015312:	021b      	lsleq	r3, r3, #8
 8015314:	3008      	addeq	r0, #8
 8015316:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801531a:	bf04      	itt	eq
 801531c:	011b      	lsleq	r3, r3, #4
 801531e:	3004      	addeq	r0, #4
 8015320:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015324:	bf04      	itt	eq
 8015326:	009b      	lsleq	r3, r3, #2
 8015328:	3002      	addeq	r0, #2
 801532a:	2b00      	cmp	r3, #0
 801532c:	db06      	blt.n	801533c <__hi0bits+0x3c>
 801532e:	005b      	lsls	r3, r3, #1
 8015330:	d503      	bpl.n	801533a <__hi0bits+0x3a>
 8015332:	3001      	adds	r0, #1
 8015334:	4770      	bx	lr
 8015336:	2000      	movs	r0, #0
 8015338:	e7e8      	b.n	801530c <__hi0bits+0xc>
 801533a:	2020      	movs	r0, #32
 801533c:	4770      	bx	lr

0801533e <__lo0bits>:
 801533e:	6803      	ldr	r3, [r0, #0]
 8015340:	f013 0207 	ands.w	r2, r3, #7
 8015344:	4601      	mov	r1, r0
 8015346:	d00b      	beq.n	8015360 <__lo0bits+0x22>
 8015348:	07da      	lsls	r2, r3, #31
 801534a:	d423      	bmi.n	8015394 <__lo0bits+0x56>
 801534c:	0798      	lsls	r0, r3, #30
 801534e:	bf49      	itett	mi
 8015350:	085b      	lsrmi	r3, r3, #1
 8015352:	089b      	lsrpl	r3, r3, #2
 8015354:	2001      	movmi	r0, #1
 8015356:	600b      	strmi	r3, [r1, #0]
 8015358:	bf5c      	itt	pl
 801535a:	600b      	strpl	r3, [r1, #0]
 801535c:	2002      	movpl	r0, #2
 801535e:	4770      	bx	lr
 8015360:	b298      	uxth	r0, r3
 8015362:	b9a8      	cbnz	r0, 8015390 <__lo0bits+0x52>
 8015364:	0c1b      	lsrs	r3, r3, #16
 8015366:	2010      	movs	r0, #16
 8015368:	f013 0fff 	tst.w	r3, #255	; 0xff
 801536c:	bf04      	itt	eq
 801536e:	0a1b      	lsreq	r3, r3, #8
 8015370:	3008      	addeq	r0, #8
 8015372:	071a      	lsls	r2, r3, #28
 8015374:	bf04      	itt	eq
 8015376:	091b      	lsreq	r3, r3, #4
 8015378:	3004      	addeq	r0, #4
 801537a:	079a      	lsls	r2, r3, #30
 801537c:	bf04      	itt	eq
 801537e:	089b      	lsreq	r3, r3, #2
 8015380:	3002      	addeq	r0, #2
 8015382:	07da      	lsls	r2, r3, #31
 8015384:	d402      	bmi.n	801538c <__lo0bits+0x4e>
 8015386:	085b      	lsrs	r3, r3, #1
 8015388:	d006      	beq.n	8015398 <__lo0bits+0x5a>
 801538a:	3001      	adds	r0, #1
 801538c:	600b      	str	r3, [r1, #0]
 801538e:	4770      	bx	lr
 8015390:	4610      	mov	r0, r2
 8015392:	e7e9      	b.n	8015368 <__lo0bits+0x2a>
 8015394:	2000      	movs	r0, #0
 8015396:	4770      	bx	lr
 8015398:	2020      	movs	r0, #32
 801539a:	4770      	bx	lr

0801539c <__i2b>:
 801539c:	b510      	push	{r4, lr}
 801539e:	460c      	mov	r4, r1
 80153a0:	2101      	movs	r1, #1
 80153a2:	f7ff ff27 	bl	80151f4 <_Balloc>
 80153a6:	2201      	movs	r2, #1
 80153a8:	6144      	str	r4, [r0, #20]
 80153aa:	6102      	str	r2, [r0, #16]
 80153ac:	bd10      	pop	{r4, pc}

080153ae <__multiply>:
 80153ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153b2:	4614      	mov	r4, r2
 80153b4:	690a      	ldr	r2, [r1, #16]
 80153b6:	6923      	ldr	r3, [r4, #16]
 80153b8:	429a      	cmp	r2, r3
 80153ba:	bfb8      	it	lt
 80153bc:	460b      	movlt	r3, r1
 80153be:	4688      	mov	r8, r1
 80153c0:	bfbc      	itt	lt
 80153c2:	46a0      	movlt	r8, r4
 80153c4:	461c      	movlt	r4, r3
 80153c6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80153ca:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80153ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80153d2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80153d6:	eb07 0609 	add.w	r6, r7, r9
 80153da:	42b3      	cmp	r3, r6
 80153dc:	bfb8      	it	lt
 80153de:	3101      	addlt	r1, #1
 80153e0:	f7ff ff08 	bl	80151f4 <_Balloc>
 80153e4:	f100 0514 	add.w	r5, r0, #20
 80153e8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80153ec:	462b      	mov	r3, r5
 80153ee:	2200      	movs	r2, #0
 80153f0:	4573      	cmp	r3, lr
 80153f2:	d316      	bcc.n	8015422 <__multiply+0x74>
 80153f4:	f104 0214 	add.w	r2, r4, #20
 80153f8:	f108 0114 	add.w	r1, r8, #20
 80153fc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8015400:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8015404:	9300      	str	r3, [sp, #0]
 8015406:	9b00      	ldr	r3, [sp, #0]
 8015408:	9201      	str	r2, [sp, #4]
 801540a:	4293      	cmp	r3, r2
 801540c:	d80c      	bhi.n	8015428 <__multiply+0x7a>
 801540e:	2e00      	cmp	r6, #0
 8015410:	dd03      	ble.n	801541a <__multiply+0x6c>
 8015412:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015416:	2b00      	cmp	r3, #0
 8015418:	d05d      	beq.n	80154d6 <__multiply+0x128>
 801541a:	6106      	str	r6, [r0, #16]
 801541c:	b003      	add	sp, #12
 801541e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015422:	f843 2b04 	str.w	r2, [r3], #4
 8015426:	e7e3      	b.n	80153f0 <__multiply+0x42>
 8015428:	f8b2 b000 	ldrh.w	fp, [r2]
 801542c:	f1bb 0f00 	cmp.w	fp, #0
 8015430:	d023      	beq.n	801547a <__multiply+0xcc>
 8015432:	4689      	mov	r9, r1
 8015434:	46ac      	mov	ip, r5
 8015436:	f04f 0800 	mov.w	r8, #0
 801543a:	f859 4b04 	ldr.w	r4, [r9], #4
 801543e:	f8dc a000 	ldr.w	sl, [ip]
 8015442:	b2a3      	uxth	r3, r4
 8015444:	fa1f fa8a 	uxth.w	sl, sl
 8015448:	fb0b a303 	mla	r3, fp, r3, sl
 801544c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015450:	f8dc 4000 	ldr.w	r4, [ip]
 8015454:	4443      	add	r3, r8
 8015456:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801545a:	fb0b 840a 	mla	r4, fp, sl, r8
 801545e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8015462:	46e2      	mov	sl, ip
 8015464:	b29b      	uxth	r3, r3
 8015466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801546a:	454f      	cmp	r7, r9
 801546c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015470:	f84a 3b04 	str.w	r3, [sl], #4
 8015474:	d82b      	bhi.n	80154ce <__multiply+0x120>
 8015476:	f8cc 8004 	str.w	r8, [ip, #4]
 801547a:	9b01      	ldr	r3, [sp, #4]
 801547c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8015480:	3204      	adds	r2, #4
 8015482:	f1ba 0f00 	cmp.w	sl, #0
 8015486:	d020      	beq.n	80154ca <__multiply+0x11c>
 8015488:	682b      	ldr	r3, [r5, #0]
 801548a:	4689      	mov	r9, r1
 801548c:	46a8      	mov	r8, r5
 801548e:	f04f 0b00 	mov.w	fp, #0
 8015492:	f8b9 c000 	ldrh.w	ip, [r9]
 8015496:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801549a:	fb0a 440c 	mla	r4, sl, ip, r4
 801549e:	445c      	add	r4, fp
 80154a0:	46c4      	mov	ip, r8
 80154a2:	b29b      	uxth	r3, r3
 80154a4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80154a8:	f84c 3b04 	str.w	r3, [ip], #4
 80154ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80154b0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80154b4:	0c1b      	lsrs	r3, r3, #16
 80154b6:	fb0a b303 	mla	r3, sl, r3, fp
 80154ba:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80154be:	454f      	cmp	r7, r9
 80154c0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80154c4:	d805      	bhi.n	80154d2 <__multiply+0x124>
 80154c6:	f8c8 3004 	str.w	r3, [r8, #4]
 80154ca:	3504      	adds	r5, #4
 80154cc:	e79b      	b.n	8015406 <__multiply+0x58>
 80154ce:	46d4      	mov	ip, sl
 80154d0:	e7b3      	b.n	801543a <__multiply+0x8c>
 80154d2:	46e0      	mov	r8, ip
 80154d4:	e7dd      	b.n	8015492 <__multiply+0xe4>
 80154d6:	3e01      	subs	r6, #1
 80154d8:	e799      	b.n	801540e <__multiply+0x60>
	...

080154dc <__pow5mult>:
 80154dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80154e0:	4615      	mov	r5, r2
 80154e2:	f012 0203 	ands.w	r2, r2, #3
 80154e6:	4606      	mov	r6, r0
 80154e8:	460f      	mov	r7, r1
 80154ea:	d007      	beq.n	80154fc <__pow5mult+0x20>
 80154ec:	3a01      	subs	r2, #1
 80154ee:	4c21      	ldr	r4, [pc, #132]	; (8015574 <__pow5mult+0x98>)
 80154f0:	2300      	movs	r3, #0
 80154f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80154f6:	f7ff fec8 	bl	801528a <__multadd>
 80154fa:	4607      	mov	r7, r0
 80154fc:	10ad      	asrs	r5, r5, #2
 80154fe:	d035      	beq.n	801556c <__pow5mult+0x90>
 8015500:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015502:	b93c      	cbnz	r4, 8015514 <__pow5mult+0x38>
 8015504:	2010      	movs	r0, #16
 8015506:	f7fd ffa1 	bl	801344c <malloc>
 801550a:	6270      	str	r0, [r6, #36]	; 0x24
 801550c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015510:	6004      	str	r4, [r0, #0]
 8015512:	60c4      	str	r4, [r0, #12]
 8015514:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015518:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801551c:	b94c      	cbnz	r4, 8015532 <__pow5mult+0x56>
 801551e:	f240 2171 	movw	r1, #625	; 0x271
 8015522:	4630      	mov	r0, r6
 8015524:	f7ff ff3a 	bl	801539c <__i2b>
 8015528:	2300      	movs	r3, #0
 801552a:	f8c8 0008 	str.w	r0, [r8, #8]
 801552e:	4604      	mov	r4, r0
 8015530:	6003      	str	r3, [r0, #0]
 8015532:	f04f 0800 	mov.w	r8, #0
 8015536:	07eb      	lsls	r3, r5, #31
 8015538:	d50a      	bpl.n	8015550 <__pow5mult+0x74>
 801553a:	4639      	mov	r1, r7
 801553c:	4622      	mov	r2, r4
 801553e:	4630      	mov	r0, r6
 8015540:	f7ff ff35 	bl	80153ae <__multiply>
 8015544:	4639      	mov	r1, r7
 8015546:	4681      	mov	r9, r0
 8015548:	4630      	mov	r0, r6
 801554a:	f7ff fe87 	bl	801525c <_Bfree>
 801554e:	464f      	mov	r7, r9
 8015550:	106d      	asrs	r5, r5, #1
 8015552:	d00b      	beq.n	801556c <__pow5mult+0x90>
 8015554:	6820      	ldr	r0, [r4, #0]
 8015556:	b938      	cbnz	r0, 8015568 <__pow5mult+0x8c>
 8015558:	4622      	mov	r2, r4
 801555a:	4621      	mov	r1, r4
 801555c:	4630      	mov	r0, r6
 801555e:	f7ff ff26 	bl	80153ae <__multiply>
 8015562:	6020      	str	r0, [r4, #0]
 8015564:	f8c0 8000 	str.w	r8, [r0]
 8015568:	4604      	mov	r4, r0
 801556a:	e7e4      	b.n	8015536 <__pow5mult+0x5a>
 801556c:	4638      	mov	r0, r7
 801556e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015572:	bf00      	nop
 8015574:	08017ec8 	.word	0x08017ec8

08015578 <__lshift>:
 8015578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801557c:	460c      	mov	r4, r1
 801557e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015582:	6923      	ldr	r3, [r4, #16]
 8015584:	6849      	ldr	r1, [r1, #4]
 8015586:	eb0a 0903 	add.w	r9, sl, r3
 801558a:	68a3      	ldr	r3, [r4, #8]
 801558c:	4607      	mov	r7, r0
 801558e:	4616      	mov	r6, r2
 8015590:	f109 0501 	add.w	r5, r9, #1
 8015594:	42ab      	cmp	r3, r5
 8015596:	db32      	blt.n	80155fe <__lshift+0x86>
 8015598:	4638      	mov	r0, r7
 801559a:	f7ff fe2b 	bl	80151f4 <_Balloc>
 801559e:	2300      	movs	r3, #0
 80155a0:	4680      	mov	r8, r0
 80155a2:	f100 0114 	add.w	r1, r0, #20
 80155a6:	461a      	mov	r2, r3
 80155a8:	4553      	cmp	r3, sl
 80155aa:	db2b      	blt.n	8015604 <__lshift+0x8c>
 80155ac:	6920      	ldr	r0, [r4, #16]
 80155ae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80155b2:	f104 0314 	add.w	r3, r4, #20
 80155b6:	f016 021f 	ands.w	r2, r6, #31
 80155ba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80155be:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80155c2:	d025      	beq.n	8015610 <__lshift+0x98>
 80155c4:	f1c2 0e20 	rsb	lr, r2, #32
 80155c8:	2000      	movs	r0, #0
 80155ca:	681e      	ldr	r6, [r3, #0]
 80155cc:	468a      	mov	sl, r1
 80155ce:	4096      	lsls	r6, r2
 80155d0:	4330      	orrs	r0, r6
 80155d2:	f84a 0b04 	str.w	r0, [sl], #4
 80155d6:	f853 0b04 	ldr.w	r0, [r3], #4
 80155da:	459c      	cmp	ip, r3
 80155dc:	fa20 f00e 	lsr.w	r0, r0, lr
 80155e0:	d814      	bhi.n	801560c <__lshift+0x94>
 80155e2:	6048      	str	r0, [r1, #4]
 80155e4:	b108      	cbz	r0, 80155ea <__lshift+0x72>
 80155e6:	f109 0502 	add.w	r5, r9, #2
 80155ea:	3d01      	subs	r5, #1
 80155ec:	4638      	mov	r0, r7
 80155ee:	f8c8 5010 	str.w	r5, [r8, #16]
 80155f2:	4621      	mov	r1, r4
 80155f4:	f7ff fe32 	bl	801525c <_Bfree>
 80155f8:	4640      	mov	r0, r8
 80155fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155fe:	3101      	adds	r1, #1
 8015600:	005b      	lsls	r3, r3, #1
 8015602:	e7c7      	b.n	8015594 <__lshift+0x1c>
 8015604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8015608:	3301      	adds	r3, #1
 801560a:	e7cd      	b.n	80155a8 <__lshift+0x30>
 801560c:	4651      	mov	r1, sl
 801560e:	e7dc      	b.n	80155ca <__lshift+0x52>
 8015610:	3904      	subs	r1, #4
 8015612:	f853 2b04 	ldr.w	r2, [r3], #4
 8015616:	f841 2f04 	str.w	r2, [r1, #4]!
 801561a:	459c      	cmp	ip, r3
 801561c:	d8f9      	bhi.n	8015612 <__lshift+0x9a>
 801561e:	e7e4      	b.n	80155ea <__lshift+0x72>

08015620 <__mcmp>:
 8015620:	6903      	ldr	r3, [r0, #16]
 8015622:	690a      	ldr	r2, [r1, #16]
 8015624:	1a9b      	subs	r3, r3, r2
 8015626:	b530      	push	{r4, r5, lr}
 8015628:	d10c      	bne.n	8015644 <__mcmp+0x24>
 801562a:	0092      	lsls	r2, r2, #2
 801562c:	3014      	adds	r0, #20
 801562e:	3114      	adds	r1, #20
 8015630:	1884      	adds	r4, r0, r2
 8015632:	4411      	add	r1, r2
 8015634:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015638:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801563c:	4295      	cmp	r5, r2
 801563e:	d003      	beq.n	8015648 <__mcmp+0x28>
 8015640:	d305      	bcc.n	801564e <__mcmp+0x2e>
 8015642:	2301      	movs	r3, #1
 8015644:	4618      	mov	r0, r3
 8015646:	bd30      	pop	{r4, r5, pc}
 8015648:	42a0      	cmp	r0, r4
 801564a:	d3f3      	bcc.n	8015634 <__mcmp+0x14>
 801564c:	e7fa      	b.n	8015644 <__mcmp+0x24>
 801564e:	f04f 33ff 	mov.w	r3, #4294967295
 8015652:	e7f7      	b.n	8015644 <__mcmp+0x24>

08015654 <__mdiff>:
 8015654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015658:	460d      	mov	r5, r1
 801565a:	4607      	mov	r7, r0
 801565c:	4611      	mov	r1, r2
 801565e:	4628      	mov	r0, r5
 8015660:	4614      	mov	r4, r2
 8015662:	f7ff ffdd 	bl	8015620 <__mcmp>
 8015666:	1e06      	subs	r6, r0, #0
 8015668:	d108      	bne.n	801567c <__mdiff+0x28>
 801566a:	4631      	mov	r1, r6
 801566c:	4638      	mov	r0, r7
 801566e:	f7ff fdc1 	bl	80151f4 <_Balloc>
 8015672:	2301      	movs	r3, #1
 8015674:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8015678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801567c:	bfa4      	itt	ge
 801567e:	4623      	movge	r3, r4
 8015680:	462c      	movge	r4, r5
 8015682:	4638      	mov	r0, r7
 8015684:	6861      	ldr	r1, [r4, #4]
 8015686:	bfa6      	itte	ge
 8015688:	461d      	movge	r5, r3
 801568a:	2600      	movge	r6, #0
 801568c:	2601      	movlt	r6, #1
 801568e:	f7ff fdb1 	bl	80151f4 <_Balloc>
 8015692:	692b      	ldr	r3, [r5, #16]
 8015694:	60c6      	str	r6, [r0, #12]
 8015696:	6926      	ldr	r6, [r4, #16]
 8015698:	f105 0914 	add.w	r9, r5, #20
 801569c:	f104 0214 	add.w	r2, r4, #20
 80156a0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80156a4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80156a8:	f100 0514 	add.w	r5, r0, #20
 80156ac:	f04f 0e00 	mov.w	lr, #0
 80156b0:	f852 ab04 	ldr.w	sl, [r2], #4
 80156b4:	f859 4b04 	ldr.w	r4, [r9], #4
 80156b8:	fa1e f18a 	uxtah	r1, lr, sl
 80156bc:	b2a3      	uxth	r3, r4
 80156be:	1ac9      	subs	r1, r1, r3
 80156c0:	0c23      	lsrs	r3, r4, #16
 80156c2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80156c6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80156ca:	b289      	uxth	r1, r1
 80156cc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80156d0:	45c8      	cmp	r8, r9
 80156d2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80156d6:	4694      	mov	ip, r2
 80156d8:	f845 3b04 	str.w	r3, [r5], #4
 80156dc:	d8e8      	bhi.n	80156b0 <__mdiff+0x5c>
 80156de:	45bc      	cmp	ip, r7
 80156e0:	d304      	bcc.n	80156ec <__mdiff+0x98>
 80156e2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80156e6:	b183      	cbz	r3, 801570a <__mdiff+0xb6>
 80156e8:	6106      	str	r6, [r0, #16]
 80156ea:	e7c5      	b.n	8015678 <__mdiff+0x24>
 80156ec:	f85c 1b04 	ldr.w	r1, [ip], #4
 80156f0:	fa1e f381 	uxtah	r3, lr, r1
 80156f4:	141a      	asrs	r2, r3, #16
 80156f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80156fa:	b29b      	uxth	r3, r3
 80156fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015700:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8015704:	f845 3b04 	str.w	r3, [r5], #4
 8015708:	e7e9      	b.n	80156de <__mdiff+0x8a>
 801570a:	3e01      	subs	r6, #1
 801570c:	e7e9      	b.n	80156e2 <__mdiff+0x8e>

0801570e <__d2b>:
 801570e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015712:	460e      	mov	r6, r1
 8015714:	2101      	movs	r1, #1
 8015716:	ec59 8b10 	vmov	r8, r9, d0
 801571a:	4615      	mov	r5, r2
 801571c:	f7ff fd6a 	bl	80151f4 <_Balloc>
 8015720:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8015724:	4607      	mov	r7, r0
 8015726:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801572a:	bb34      	cbnz	r4, 801577a <__d2b+0x6c>
 801572c:	9301      	str	r3, [sp, #4]
 801572e:	f1b8 0300 	subs.w	r3, r8, #0
 8015732:	d027      	beq.n	8015784 <__d2b+0x76>
 8015734:	a802      	add	r0, sp, #8
 8015736:	f840 3d08 	str.w	r3, [r0, #-8]!
 801573a:	f7ff fe00 	bl	801533e <__lo0bits>
 801573e:	9900      	ldr	r1, [sp, #0]
 8015740:	b1f0      	cbz	r0, 8015780 <__d2b+0x72>
 8015742:	9a01      	ldr	r2, [sp, #4]
 8015744:	f1c0 0320 	rsb	r3, r0, #32
 8015748:	fa02 f303 	lsl.w	r3, r2, r3
 801574c:	430b      	orrs	r3, r1
 801574e:	40c2      	lsrs	r2, r0
 8015750:	617b      	str	r3, [r7, #20]
 8015752:	9201      	str	r2, [sp, #4]
 8015754:	9b01      	ldr	r3, [sp, #4]
 8015756:	61bb      	str	r3, [r7, #24]
 8015758:	2b00      	cmp	r3, #0
 801575a:	bf14      	ite	ne
 801575c:	2102      	movne	r1, #2
 801575e:	2101      	moveq	r1, #1
 8015760:	6139      	str	r1, [r7, #16]
 8015762:	b1c4      	cbz	r4, 8015796 <__d2b+0x88>
 8015764:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8015768:	4404      	add	r4, r0
 801576a:	6034      	str	r4, [r6, #0]
 801576c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015770:	6028      	str	r0, [r5, #0]
 8015772:	4638      	mov	r0, r7
 8015774:	b003      	add	sp, #12
 8015776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801577a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801577e:	e7d5      	b.n	801572c <__d2b+0x1e>
 8015780:	6179      	str	r1, [r7, #20]
 8015782:	e7e7      	b.n	8015754 <__d2b+0x46>
 8015784:	a801      	add	r0, sp, #4
 8015786:	f7ff fdda 	bl	801533e <__lo0bits>
 801578a:	9b01      	ldr	r3, [sp, #4]
 801578c:	617b      	str	r3, [r7, #20]
 801578e:	2101      	movs	r1, #1
 8015790:	6139      	str	r1, [r7, #16]
 8015792:	3020      	adds	r0, #32
 8015794:	e7e5      	b.n	8015762 <__d2b+0x54>
 8015796:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801579a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801579e:	6030      	str	r0, [r6, #0]
 80157a0:	6918      	ldr	r0, [r3, #16]
 80157a2:	f7ff fdad 	bl	8015300 <__hi0bits>
 80157a6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80157aa:	e7e1      	b.n	8015770 <__d2b+0x62>

080157ac <_calloc_r>:
 80157ac:	b538      	push	{r3, r4, r5, lr}
 80157ae:	fb02 f401 	mul.w	r4, r2, r1
 80157b2:	4621      	mov	r1, r4
 80157b4:	f7fd feb4 	bl	8013520 <_malloc_r>
 80157b8:	4605      	mov	r5, r0
 80157ba:	b118      	cbz	r0, 80157c4 <_calloc_r+0x18>
 80157bc:	4622      	mov	r2, r4
 80157be:	2100      	movs	r1, #0
 80157c0:	f7fd fe57 	bl	8013472 <memset>
 80157c4:	4628      	mov	r0, r5
 80157c6:	bd38      	pop	{r3, r4, r5, pc}

080157c8 <__ssputs_r>:
 80157c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80157cc:	688e      	ldr	r6, [r1, #8]
 80157ce:	429e      	cmp	r6, r3
 80157d0:	4682      	mov	sl, r0
 80157d2:	460c      	mov	r4, r1
 80157d4:	4690      	mov	r8, r2
 80157d6:	4699      	mov	r9, r3
 80157d8:	d837      	bhi.n	801584a <__ssputs_r+0x82>
 80157da:	898a      	ldrh	r2, [r1, #12]
 80157dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80157e0:	d031      	beq.n	8015846 <__ssputs_r+0x7e>
 80157e2:	6825      	ldr	r5, [r4, #0]
 80157e4:	6909      	ldr	r1, [r1, #16]
 80157e6:	1a6f      	subs	r7, r5, r1
 80157e8:	6965      	ldr	r5, [r4, #20]
 80157ea:	2302      	movs	r3, #2
 80157ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80157f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80157f4:	f109 0301 	add.w	r3, r9, #1
 80157f8:	443b      	add	r3, r7
 80157fa:	429d      	cmp	r5, r3
 80157fc:	bf38      	it	cc
 80157fe:	461d      	movcc	r5, r3
 8015800:	0553      	lsls	r3, r2, #21
 8015802:	d530      	bpl.n	8015866 <__ssputs_r+0x9e>
 8015804:	4629      	mov	r1, r5
 8015806:	f7fd fe8b 	bl	8013520 <_malloc_r>
 801580a:	4606      	mov	r6, r0
 801580c:	b950      	cbnz	r0, 8015824 <__ssputs_r+0x5c>
 801580e:	230c      	movs	r3, #12
 8015810:	f8ca 3000 	str.w	r3, [sl]
 8015814:	89a3      	ldrh	r3, [r4, #12]
 8015816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801581a:	81a3      	strh	r3, [r4, #12]
 801581c:	f04f 30ff 	mov.w	r0, #4294967295
 8015820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015824:	463a      	mov	r2, r7
 8015826:	6921      	ldr	r1, [r4, #16]
 8015828:	f7fd fe18 	bl	801345c <memcpy>
 801582c:	89a3      	ldrh	r3, [r4, #12]
 801582e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015836:	81a3      	strh	r3, [r4, #12]
 8015838:	6126      	str	r6, [r4, #16]
 801583a:	6165      	str	r5, [r4, #20]
 801583c:	443e      	add	r6, r7
 801583e:	1bed      	subs	r5, r5, r7
 8015840:	6026      	str	r6, [r4, #0]
 8015842:	60a5      	str	r5, [r4, #8]
 8015844:	464e      	mov	r6, r9
 8015846:	454e      	cmp	r6, r9
 8015848:	d900      	bls.n	801584c <__ssputs_r+0x84>
 801584a:	464e      	mov	r6, r9
 801584c:	4632      	mov	r2, r6
 801584e:	4641      	mov	r1, r8
 8015850:	6820      	ldr	r0, [r4, #0]
 8015852:	f000 faf7 	bl	8015e44 <memmove>
 8015856:	68a3      	ldr	r3, [r4, #8]
 8015858:	1b9b      	subs	r3, r3, r6
 801585a:	60a3      	str	r3, [r4, #8]
 801585c:	6823      	ldr	r3, [r4, #0]
 801585e:	441e      	add	r6, r3
 8015860:	6026      	str	r6, [r4, #0]
 8015862:	2000      	movs	r0, #0
 8015864:	e7dc      	b.n	8015820 <__ssputs_r+0x58>
 8015866:	462a      	mov	r2, r5
 8015868:	f000 fb05 	bl	8015e76 <_realloc_r>
 801586c:	4606      	mov	r6, r0
 801586e:	2800      	cmp	r0, #0
 8015870:	d1e2      	bne.n	8015838 <__ssputs_r+0x70>
 8015872:	6921      	ldr	r1, [r4, #16]
 8015874:	4650      	mov	r0, sl
 8015876:	f7fd fe05 	bl	8013484 <_free_r>
 801587a:	e7c8      	b.n	801580e <__ssputs_r+0x46>

0801587c <_svfiprintf_r>:
 801587c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015880:	461d      	mov	r5, r3
 8015882:	898b      	ldrh	r3, [r1, #12]
 8015884:	061f      	lsls	r7, r3, #24
 8015886:	b09d      	sub	sp, #116	; 0x74
 8015888:	4680      	mov	r8, r0
 801588a:	460c      	mov	r4, r1
 801588c:	4616      	mov	r6, r2
 801588e:	d50f      	bpl.n	80158b0 <_svfiprintf_r+0x34>
 8015890:	690b      	ldr	r3, [r1, #16]
 8015892:	b96b      	cbnz	r3, 80158b0 <_svfiprintf_r+0x34>
 8015894:	2140      	movs	r1, #64	; 0x40
 8015896:	f7fd fe43 	bl	8013520 <_malloc_r>
 801589a:	6020      	str	r0, [r4, #0]
 801589c:	6120      	str	r0, [r4, #16]
 801589e:	b928      	cbnz	r0, 80158ac <_svfiprintf_r+0x30>
 80158a0:	230c      	movs	r3, #12
 80158a2:	f8c8 3000 	str.w	r3, [r8]
 80158a6:	f04f 30ff 	mov.w	r0, #4294967295
 80158aa:	e0c8      	b.n	8015a3e <_svfiprintf_r+0x1c2>
 80158ac:	2340      	movs	r3, #64	; 0x40
 80158ae:	6163      	str	r3, [r4, #20]
 80158b0:	2300      	movs	r3, #0
 80158b2:	9309      	str	r3, [sp, #36]	; 0x24
 80158b4:	2320      	movs	r3, #32
 80158b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80158ba:	2330      	movs	r3, #48	; 0x30
 80158bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80158c0:	9503      	str	r5, [sp, #12]
 80158c2:	f04f 0b01 	mov.w	fp, #1
 80158c6:	4637      	mov	r7, r6
 80158c8:	463d      	mov	r5, r7
 80158ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80158ce:	b10b      	cbz	r3, 80158d4 <_svfiprintf_r+0x58>
 80158d0:	2b25      	cmp	r3, #37	; 0x25
 80158d2:	d13e      	bne.n	8015952 <_svfiprintf_r+0xd6>
 80158d4:	ebb7 0a06 	subs.w	sl, r7, r6
 80158d8:	d00b      	beq.n	80158f2 <_svfiprintf_r+0x76>
 80158da:	4653      	mov	r3, sl
 80158dc:	4632      	mov	r2, r6
 80158de:	4621      	mov	r1, r4
 80158e0:	4640      	mov	r0, r8
 80158e2:	f7ff ff71 	bl	80157c8 <__ssputs_r>
 80158e6:	3001      	adds	r0, #1
 80158e8:	f000 80a4 	beq.w	8015a34 <_svfiprintf_r+0x1b8>
 80158ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158ee:	4453      	add	r3, sl
 80158f0:	9309      	str	r3, [sp, #36]	; 0x24
 80158f2:	783b      	ldrb	r3, [r7, #0]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	f000 809d 	beq.w	8015a34 <_svfiprintf_r+0x1b8>
 80158fa:	2300      	movs	r3, #0
 80158fc:	f04f 32ff 	mov.w	r2, #4294967295
 8015900:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015904:	9304      	str	r3, [sp, #16]
 8015906:	9307      	str	r3, [sp, #28]
 8015908:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801590c:	931a      	str	r3, [sp, #104]	; 0x68
 801590e:	462f      	mov	r7, r5
 8015910:	2205      	movs	r2, #5
 8015912:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015916:	4850      	ldr	r0, [pc, #320]	; (8015a58 <_svfiprintf_r+0x1dc>)
 8015918:	f7ea fc3a 	bl	8000190 <memchr>
 801591c:	9b04      	ldr	r3, [sp, #16]
 801591e:	b9d0      	cbnz	r0, 8015956 <_svfiprintf_r+0xda>
 8015920:	06d9      	lsls	r1, r3, #27
 8015922:	bf44      	itt	mi
 8015924:	2220      	movmi	r2, #32
 8015926:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801592a:	071a      	lsls	r2, r3, #28
 801592c:	bf44      	itt	mi
 801592e:	222b      	movmi	r2, #43	; 0x2b
 8015930:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015934:	782a      	ldrb	r2, [r5, #0]
 8015936:	2a2a      	cmp	r2, #42	; 0x2a
 8015938:	d015      	beq.n	8015966 <_svfiprintf_r+0xea>
 801593a:	9a07      	ldr	r2, [sp, #28]
 801593c:	462f      	mov	r7, r5
 801593e:	2000      	movs	r0, #0
 8015940:	250a      	movs	r5, #10
 8015942:	4639      	mov	r1, r7
 8015944:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015948:	3b30      	subs	r3, #48	; 0x30
 801594a:	2b09      	cmp	r3, #9
 801594c:	d94d      	bls.n	80159ea <_svfiprintf_r+0x16e>
 801594e:	b1b8      	cbz	r0, 8015980 <_svfiprintf_r+0x104>
 8015950:	e00f      	b.n	8015972 <_svfiprintf_r+0xf6>
 8015952:	462f      	mov	r7, r5
 8015954:	e7b8      	b.n	80158c8 <_svfiprintf_r+0x4c>
 8015956:	4a40      	ldr	r2, [pc, #256]	; (8015a58 <_svfiprintf_r+0x1dc>)
 8015958:	1a80      	subs	r0, r0, r2
 801595a:	fa0b f000 	lsl.w	r0, fp, r0
 801595e:	4318      	orrs	r0, r3
 8015960:	9004      	str	r0, [sp, #16]
 8015962:	463d      	mov	r5, r7
 8015964:	e7d3      	b.n	801590e <_svfiprintf_r+0x92>
 8015966:	9a03      	ldr	r2, [sp, #12]
 8015968:	1d11      	adds	r1, r2, #4
 801596a:	6812      	ldr	r2, [r2, #0]
 801596c:	9103      	str	r1, [sp, #12]
 801596e:	2a00      	cmp	r2, #0
 8015970:	db01      	blt.n	8015976 <_svfiprintf_r+0xfa>
 8015972:	9207      	str	r2, [sp, #28]
 8015974:	e004      	b.n	8015980 <_svfiprintf_r+0x104>
 8015976:	4252      	negs	r2, r2
 8015978:	f043 0302 	orr.w	r3, r3, #2
 801597c:	9207      	str	r2, [sp, #28]
 801597e:	9304      	str	r3, [sp, #16]
 8015980:	783b      	ldrb	r3, [r7, #0]
 8015982:	2b2e      	cmp	r3, #46	; 0x2e
 8015984:	d10c      	bne.n	80159a0 <_svfiprintf_r+0x124>
 8015986:	787b      	ldrb	r3, [r7, #1]
 8015988:	2b2a      	cmp	r3, #42	; 0x2a
 801598a:	d133      	bne.n	80159f4 <_svfiprintf_r+0x178>
 801598c:	9b03      	ldr	r3, [sp, #12]
 801598e:	1d1a      	adds	r2, r3, #4
 8015990:	681b      	ldr	r3, [r3, #0]
 8015992:	9203      	str	r2, [sp, #12]
 8015994:	2b00      	cmp	r3, #0
 8015996:	bfb8      	it	lt
 8015998:	f04f 33ff 	movlt.w	r3, #4294967295
 801599c:	3702      	adds	r7, #2
 801599e:	9305      	str	r3, [sp, #20]
 80159a0:	4d2e      	ldr	r5, [pc, #184]	; (8015a5c <_svfiprintf_r+0x1e0>)
 80159a2:	7839      	ldrb	r1, [r7, #0]
 80159a4:	2203      	movs	r2, #3
 80159a6:	4628      	mov	r0, r5
 80159a8:	f7ea fbf2 	bl	8000190 <memchr>
 80159ac:	b138      	cbz	r0, 80159be <_svfiprintf_r+0x142>
 80159ae:	2340      	movs	r3, #64	; 0x40
 80159b0:	1b40      	subs	r0, r0, r5
 80159b2:	fa03 f000 	lsl.w	r0, r3, r0
 80159b6:	9b04      	ldr	r3, [sp, #16]
 80159b8:	4303      	orrs	r3, r0
 80159ba:	3701      	adds	r7, #1
 80159bc:	9304      	str	r3, [sp, #16]
 80159be:	7839      	ldrb	r1, [r7, #0]
 80159c0:	4827      	ldr	r0, [pc, #156]	; (8015a60 <_svfiprintf_r+0x1e4>)
 80159c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80159c6:	2206      	movs	r2, #6
 80159c8:	1c7e      	adds	r6, r7, #1
 80159ca:	f7ea fbe1 	bl	8000190 <memchr>
 80159ce:	2800      	cmp	r0, #0
 80159d0:	d038      	beq.n	8015a44 <_svfiprintf_r+0x1c8>
 80159d2:	4b24      	ldr	r3, [pc, #144]	; (8015a64 <_svfiprintf_r+0x1e8>)
 80159d4:	bb13      	cbnz	r3, 8015a1c <_svfiprintf_r+0x1a0>
 80159d6:	9b03      	ldr	r3, [sp, #12]
 80159d8:	3307      	adds	r3, #7
 80159da:	f023 0307 	bic.w	r3, r3, #7
 80159de:	3308      	adds	r3, #8
 80159e0:	9303      	str	r3, [sp, #12]
 80159e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159e4:	444b      	add	r3, r9
 80159e6:	9309      	str	r3, [sp, #36]	; 0x24
 80159e8:	e76d      	b.n	80158c6 <_svfiprintf_r+0x4a>
 80159ea:	fb05 3202 	mla	r2, r5, r2, r3
 80159ee:	2001      	movs	r0, #1
 80159f0:	460f      	mov	r7, r1
 80159f2:	e7a6      	b.n	8015942 <_svfiprintf_r+0xc6>
 80159f4:	2300      	movs	r3, #0
 80159f6:	3701      	adds	r7, #1
 80159f8:	9305      	str	r3, [sp, #20]
 80159fa:	4619      	mov	r1, r3
 80159fc:	250a      	movs	r5, #10
 80159fe:	4638      	mov	r0, r7
 8015a00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015a04:	3a30      	subs	r2, #48	; 0x30
 8015a06:	2a09      	cmp	r2, #9
 8015a08:	d903      	bls.n	8015a12 <_svfiprintf_r+0x196>
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d0c8      	beq.n	80159a0 <_svfiprintf_r+0x124>
 8015a0e:	9105      	str	r1, [sp, #20]
 8015a10:	e7c6      	b.n	80159a0 <_svfiprintf_r+0x124>
 8015a12:	fb05 2101 	mla	r1, r5, r1, r2
 8015a16:	2301      	movs	r3, #1
 8015a18:	4607      	mov	r7, r0
 8015a1a:	e7f0      	b.n	80159fe <_svfiprintf_r+0x182>
 8015a1c:	ab03      	add	r3, sp, #12
 8015a1e:	9300      	str	r3, [sp, #0]
 8015a20:	4622      	mov	r2, r4
 8015a22:	4b11      	ldr	r3, [pc, #68]	; (8015a68 <_svfiprintf_r+0x1ec>)
 8015a24:	a904      	add	r1, sp, #16
 8015a26:	4640      	mov	r0, r8
 8015a28:	f7fd fe68 	bl	80136fc <_printf_float>
 8015a2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015a30:	4681      	mov	r9, r0
 8015a32:	d1d6      	bne.n	80159e2 <_svfiprintf_r+0x166>
 8015a34:	89a3      	ldrh	r3, [r4, #12]
 8015a36:	065b      	lsls	r3, r3, #25
 8015a38:	f53f af35 	bmi.w	80158a6 <_svfiprintf_r+0x2a>
 8015a3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015a3e:	b01d      	add	sp, #116	; 0x74
 8015a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a44:	ab03      	add	r3, sp, #12
 8015a46:	9300      	str	r3, [sp, #0]
 8015a48:	4622      	mov	r2, r4
 8015a4a:	4b07      	ldr	r3, [pc, #28]	; (8015a68 <_svfiprintf_r+0x1ec>)
 8015a4c:	a904      	add	r1, sp, #16
 8015a4e:	4640      	mov	r0, r8
 8015a50:	f7fe f90a 	bl	8013c68 <_printf_i>
 8015a54:	e7ea      	b.n	8015a2c <_svfiprintf_r+0x1b0>
 8015a56:	bf00      	nop
 8015a58:	08017ed4 	.word	0x08017ed4
 8015a5c:	08017eda 	.word	0x08017eda
 8015a60:	08017ede 	.word	0x08017ede
 8015a64:	080136fd 	.word	0x080136fd
 8015a68:	080157c9 	.word	0x080157c9

08015a6c <__sfputc_r>:
 8015a6c:	6893      	ldr	r3, [r2, #8]
 8015a6e:	3b01      	subs	r3, #1
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	b410      	push	{r4}
 8015a74:	6093      	str	r3, [r2, #8]
 8015a76:	da08      	bge.n	8015a8a <__sfputc_r+0x1e>
 8015a78:	6994      	ldr	r4, [r2, #24]
 8015a7a:	42a3      	cmp	r3, r4
 8015a7c:	db01      	blt.n	8015a82 <__sfputc_r+0x16>
 8015a7e:	290a      	cmp	r1, #10
 8015a80:	d103      	bne.n	8015a8a <__sfputc_r+0x1e>
 8015a82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015a86:	f7fe bac3 	b.w	8014010 <__swbuf_r>
 8015a8a:	6813      	ldr	r3, [r2, #0]
 8015a8c:	1c58      	adds	r0, r3, #1
 8015a8e:	6010      	str	r0, [r2, #0]
 8015a90:	7019      	strb	r1, [r3, #0]
 8015a92:	4608      	mov	r0, r1
 8015a94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015a98:	4770      	bx	lr

08015a9a <__sfputs_r>:
 8015a9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a9c:	4606      	mov	r6, r0
 8015a9e:	460f      	mov	r7, r1
 8015aa0:	4614      	mov	r4, r2
 8015aa2:	18d5      	adds	r5, r2, r3
 8015aa4:	42ac      	cmp	r4, r5
 8015aa6:	d101      	bne.n	8015aac <__sfputs_r+0x12>
 8015aa8:	2000      	movs	r0, #0
 8015aaa:	e007      	b.n	8015abc <__sfputs_r+0x22>
 8015aac:	463a      	mov	r2, r7
 8015aae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ab2:	4630      	mov	r0, r6
 8015ab4:	f7ff ffda 	bl	8015a6c <__sfputc_r>
 8015ab8:	1c43      	adds	r3, r0, #1
 8015aba:	d1f3      	bne.n	8015aa4 <__sfputs_r+0xa>
 8015abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015ac0 <_vfiprintf_r>:
 8015ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ac4:	460c      	mov	r4, r1
 8015ac6:	b09d      	sub	sp, #116	; 0x74
 8015ac8:	4617      	mov	r7, r2
 8015aca:	461d      	mov	r5, r3
 8015acc:	4606      	mov	r6, r0
 8015ace:	b118      	cbz	r0, 8015ad8 <_vfiprintf_r+0x18>
 8015ad0:	6983      	ldr	r3, [r0, #24]
 8015ad2:	b90b      	cbnz	r3, 8015ad8 <_vfiprintf_r+0x18>
 8015ad4:	f7ff fa90 	bl	8014ff8 <__sinit>
 8015ad8:	4b7c      	ldr	r3, [pc, #496]	; (8015ccc <_vfiprintf_r+0x20c>)
 8015ada:	429c      	cmp	r4, r3
 8015adc:	d158      	bne.n	8015b90 <_vfiprintf_r+0xd0>
 8015ade:	6874      	ldr	r4, [r6, #4]
 8015ae0:	89a3      	ldrh	r3, [r4, #12]
 8015ae2:	0718      	lsls	r0, r3, #28
 8015ae4:	d55e      	bpl.n	8015ba4 <_vfiprintf_r+0xe4>
 8015ae6:	6923      	ldr	r3, [r4, #16]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d05b      	beq.n	8015ba4 <_vfiprintf_r+0xe4>
 8015aec:	2300      	movs	r3, #0
 8015aee:	9309      	str	r3, [sp, #36]	; 0x24
 8015af0:	2320      	movs	r3, #32
 8015af2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015af6:	2330      	movs	r3, #48	; 0x30
 8015af8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015afc:	9503      	str	r5, [sp, #12]
 8015afe:	f04f 0b01 	mov.w	fp, #1
 8015b02:	46b8      	mov	r8, r7
 8015b04:	4645      	mov	r5, r8
 8015b06:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015b0a:	b10b      	cbz	r3, 8015b10 <_vfiprintf_r+0x50>
 8015b0c:	2b25      	cmp	r3, #37	; 0x25
 8015b0e:	d154      	bne.n	8015bba <_vfiprintf_r+0xfa>
 8015b10:	ebb8 0a07 	subs.w	sl, r8, r7
 8015b14:	d00b      	beq.n	8015b2e <_vfiprintf_r+0x6e>
 8015b16:	4653      	mov	r3, sl
 8015b18:	463a      	mov	r2, r7
 8015b1a:	4621      	mov	r1, r4
 8015b1c:	4630      	mov	r0, r6
 8015b1e:	f7ff ffbc 	bl	8015a9a <__sfputs_r>
 8015b22:	3001      	adds	r0, #1
 8015b24:	f000 80c2 	beq.w	8015cac <_vfiprintf_r+0x1ec>
 8015b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b2a:	4453      	add	r3, sl
 8015b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8015b2e:	f898 3000 	ldrb.w	r3, [r8]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	f000 80ba 	beq.w	8015cac <_vfiprintf_r+0x1ec>
 8015b38:	2300      	movs	r3, #0
 8015b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8015b3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015b42:	9304      	str	r3, [sp, #16]
 8015b44:	9307      	str	r3, [sp, #28]
 8015b46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015b4a:	931a      	str	r3, [sp, #104]	; 0x68
 8015b4c:	46a8      	mov	r8, r5
 8015b4e:	2205      	movs	r2, #5
 8015b50:	f818 1b01 	ldrb.w	r1, [r8], #1
 8015b54:	485e      	ldr	r0, [pc, #376]	; (8015cd0 <_vfiprintf_r+0x210>)
 8015b56:	f7ea fb1b 	bl	8000190 <memchr>
 8015b5a:	9b04      	ldr	r3, [sp, #16]
 8015b5c:	bb78      	cbnz	r0, 8015bbe <_vfiprintf_r+0xfe>
 8015b5e:	06d9      	lsls	r1, r3, #27
 8015b60:	bf44      	itt	mi
 8015b62:	2220      	movmi	r2, #32
 8015b64:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015b68:	071a      	lsls	r2, r3, #28
 8015b6a:	bf44      	itt	mi
 8015b6c:	222b      	movmi	r2, #43	; 0x2b
 8015b6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015b72:	782a      	ldrb	r2, [r5, #0]
 8015b74:	2a2a      	cmp	r2, #42	; 0x2a
 8015b76:	d02a      	beq.n	8015bce <_vfiprintf_r+0x10e>
 8015b78:	9a07      	ldr	r2, [sp, #28]
 8015b7a:	46a8      	mov	r8, r5
 8015b7c:	2000      	movs	r0, #0
 8015b7e:	250a      	movs	r5, #10
 8015b80:	4641      	mov	r1, r8
 8015b82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015b86:	3b30      	subs	r3, #48	; 0x30
 8015b88:	2b09      	cmp	r3, #9
 8015b8a:	d969      	bls.n	8015c60 <_vfiprintf_r+0x1a0>
 8015b8c:	b360      	cbz	r0, 8015be8 <_vfiprintf_r+0x128>
 8015b8e:	e024      	b.n	8015bda <_vfiprintf_r+0x11a>
 8015b90:	4b50      	ldr	r3, [pc, #320]	; (8015cd4 <_vfiprintf_r+0x214>)
 8015b92:	429c      	cmp	r4, r3
 8015b94:	d101      	bne.n	8015b9a <_vfiprintf_r+0xda>
 8015b96:	68b4      	ldr	r4, [r6, #8]
 8015b98:	e7a2      	b.n	8015ae0 <_vfiprintf_r+0x20>
 8015b9a:	4b4f      	ldr	r3, [pc, #316]	; (8015cd8 <_vfiprintf_r+0x218>)
 8015b9c:	429c      	cmp	r4, r3
 8015b9e:	bf08      	it	eq
 8015ba0:	68f4      	ldreq	r4, [r6, #12]
 8015ba2:	e79d      	b.n	8015ae0 <_vfiprintf_r+0x20>
 8015ba4:	4621      	mov	r1, r4
 8015ba6:	4630      	mov	r0, r6
 8015ba8:	f7fe fa84 	bl	80140b4 <__swsetup_r>
 8015bac:	2800      	cmp	r0, #0
 8015bae:	d09d      	beq.n	8015aec <_vfiprintf_r+0x2c>
 8015bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8015bb4:	b01d      	add	sp, #116	; 0x74
 8015bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bba:	46a8      	mov	r8, r5
 8015bbc:	e7a2      	b.n	8015b04 <_vfiprintf_r+0x44>
 8015bbe:	4a44      	ldr	r2, [pc, #272]	; (8015cd0 <_vfiprintf_r+0x210>)
 8015bc0:	1a80      	subs	r0, r0, r2
 8015bc2:	fa0b f000 	lsl.w	r0, fp, r0
 8015bc6:	4318      	orrs	r0, r3
 8015bc8:	9004      	str	r0, [sp, #16]
 8015bca:	4645      	mov	r5, r8
 8015bcc:	e7be      	b.n	8015b4c <_vfiprintf_r+0x8c>
 8015bce:	9a03      	ldr	r2, [sp, #12]
 8015bd0:	1d11      	adds	r1, r2, #4
 8015bd2:	6812      	ldr	r2, [r2, #0]
 8015bd4:	9103      	str	r1, [sp, #12]
 8015bd6:	2a00      	cmp	r2, #0
 8015bd8:	db01      	blt.n	8015bde <_vfiprintf_r+0x11e>
 8015bda:	9207      	str	r2, [sp, #28]
 8015bdc:	e004      	b.n	8015be8 <_vfiprintf_r+0x128>
 8015bde:	4252      	negs	r2, r2
 8015be0:	f043 0302 	orr.w	r3, r3, #2
 8015be4:	9207      	str	r2, [sp, #28]
 8015be6:	9304      	str	r3, [sp, #16]
 8015be8:	f898 3000 	ldrb.w	r3, [r8]
 8015bec:	2b2e      	cmp	r3, #46	; 0x2e
 8015bee:	d10e      	bne.n	8015c0e <_vfiprintf_r+0x14e>
 8015bf0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8015bf4:	2b2a      	cmp	r3, #42	; 0x2a
 8015bf6:	d138      	bne.n	8015c6a <_vfiprintf_r+0x1aa>
 8015bf8:	9b03      	ldr	r3, [sp, #12]
 8015bfa:	1d1a      	adds	r2, r3, #4
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	9203      	str	r2, [sp, #12]
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	bfb8      	it	lt
 8015c04:	f04f 33ff 	movlt.w	r3, #4294967295
 8015c08:	f108 0802 	add.w	r8, r8, #2
 8015c0c:	9305      	str	r3, [sp, #20]
 8015c0e:	4d33      	ldr	r5, [pc, #204]	; (8015cdc <_vfiprintf_r+0x21c>)
 8015c10:	f898 1000 	ldrb.w	r1, [r8]
 8015c14:	2203      	movs	r2, #3
 8015c16:	4628      	mov	r0, r5
 8015c18:	f7ea faba 	bl	8000190 <memchr>
 8015c1c:	b140      	cbz	r0, 8015c30 <_vfiprintf_r+0x170>
 8015c1e:	2340      	movs	r3, #64	; 0x40
 8015c20:	1b40      	subs	r0, r0, r5
 8015c22:	fa03 f000 	lsl.w	r0, r3, r0
 8015c26:	9b04      	ldr	r3, [sp, #16]
 8015c28:	4303      	orrs	r3, r0
 8015c2a:	f108 0801 	add.w	r8, r8, #1
 8015c2e:	9304      	str	r3, [sp, #16]
 8015c30:	f898 1000 	ldrb.w	r1, [r8]
 8015c34:	482a      	ldr	r0, [pc, #168]	; (8015ce0 <_vfiprintf_r+0x220>)
 8015c36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015c3a:	2206      	movs	r2, #6
 8015c3c:	f108 0701 	add.w	r7, r8, #1
 8015c40:	f7ea faa6 	bl	8000190 <memchr>
 8015c44:	2800      	cmp	r0, #0
 8015c46:	d037      	beq.n	8015cb8 <_vfiprintf_r+0x1f8>
 8015c48:	4b26      	ldr	r3, [pc, #152]	; (8015ce4 <_vfiprintf_r+0x224>)
 8015c4a:	bb1b      	cbnz	r3, 8015c94 <_vfiprintf_r+0x1d4>
 8015c4c:	9b03      	ldr	r3, [sp, #12]
 8015c4e:	3307      	adds	r3, #7
 8015c50:	f023 0307 	bic.w	r3, r3, #7
 8015c54:	3308      	adds	r3, #8
 8015c56:	9303      	str	r3, [sp, #12]
 8015c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c5a:	444b      	add	r3, r9
 8015c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8015c5e:	e750      	b.n	8015b02 <_vfiprintf_r+0x42>
 8015c60:	fb05 3202 	mla	r2, r5, r2, r3
 8015c64:	2001      	movs	r0, #1
 8015c66:	4688      	mov	r8, r1
 8015c68:	e78a      	b.n	8015b80 <_vfiprintf_r+0xc0>
 8015c6a:	2300      	movs	r3, #0
 8015c6c:	f108 0801 	add.w	r8, r8, #1
 8015c70:	9305      	str	r3, [sp, #20]
 8015c72:	4619      	mov	r1, r3
 8015c74:	250a      	movs	r5, #10
 8015c76:	4640      	mov	r0, r8
 8015c78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015c7c:	3a30      	subs	r2, #48	; 0x30
 8015c7e:	2a09      	cmp	r2, #9
 8015c80:	d903      	bls.n	8015c8a <_vfiprintf_r+0x1ca>
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d0c3      	beq.n	8015c0e <_vfiprintf_r+0x14e>
 8015c86:	9105      	str	r1, [sp, #20]
 8015c88:	e7c1      	b.n	8015c0e <_vfiprintf_r+0x14e>
 8015c8a:	fb05 2101 	mla	r1, r5, r1, r2
 8015c8e:	2301      	movs	r3, #1
 8015c90:	4680      	mov	r8, r0
 8015c92:	e7f0      	b.n	8015c76 <_vfiprintf_r+0x1b6>
 8015c94:	ab03      	add	r3, sp, #12
 8015c96:	9300      	str	r3, [sp, #0]
 8015c98:	4622      	mov	r2, r4
 8015c9a:	4b13      	ldr	r3, [pc, #76]	; (8015ce8 <_vfiprintf_r+0x228>)
 8015c9c:	a904      	add	r1, sp, #16
 8015c9e:	4630      	mov	r0, r6
 8015ca0:	f7fd fd2c 	bl	80136fc <_printf_float>
 8015ca4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015ca8:	4681      	mov	r9, r0
 8015caa:	d1d5      	bne.n	8015c58 <_vfiprintf_r+0x198>
 8015cac:	89a3      	ldrh	r3, [r4, #12]
 8015cae:	065b      	lsls	r3, r3, #25
 8015cb0:	f53f af7e 	bmi.w	8015bb0 <_vfiprintf_r+0xf0>
 8015cb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015cb6:	e77d      	b.n	8015bb4 <_vfiprintf_r+0xf4>
 8015cb8:	ab03      	add	r3, sp, #12
 8015cba:	9300      	str	r3, [sp, #0]
 8015cbc:	4622      	mov	r2, r4
 8015cbe:	4b0a      	ldr	r3, [pc, #40]	; (8015ce8 <_vfiprintf_r+0x228>)
 8015cc0:	a904      	add	r1, sp, #16
 8015cc2:	4630      	mov	r0, r6
 8015cc4:	f7fd ffd0 	bl	8013c68 <_printf_i>
 8015cc8:	e7ec      	b.n	8015ca4 <_vfiprintf_r+0x1e4>
 8015cca:	bf00      	nop
 8015ccc:	08017d98 	.word	0x08017d98
 8015cd0:	08017ed4 	.word	0x08017ed4
 8015cd4:	08017db8 	.word	0x08017db8
 8015cd8:	08017d78 	.word	0x08017d78
 8015cdc:	08017eda 	.word	0x08017eda
 8015ce0:	08017ede 	.word	0x08017ede
 8015ce4:	080136fd 	.word	0x080136fd
 8015ce8:	08015a9b 	.word	0x08015a9b

08015cec <__sread>:
 8015cec:	b510      	push	{r4, lr}
 8015cee:	460c      	mov	r4, r1
 8015cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015cf4:	f000 f8e6 	bl	8015ec4 <_read_r>
 8015cf8:	2800      	cmp	r0, #0
 8015cfa:	bfab      	itete	ge
 8015cfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015cfe:	89a3      	ldrhlt	r3, [r4, #12]
 8015d00:	181b      	addge	r3, r3, r0
 8015d02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015d06:	bfac      	ite	ge
 8015d08:	6563      	strge	r3, [r4, #84]	; 0x54
 8015d0a:	81a3      	strhlt	r3, [r4, #12]
 8015d0c:	bd10      	pop	{r4, pc}

08015d0e <__swrite>:
 8015d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d12:	461f      	mov	r7, r3
 8015d14:	898b      	ldrh	r3, [r1, #12]
 8015d16:	05db      	lsls	r3, r3, #23
 8015d18:	4605      	mov	r5, r0
 8015d1a:	460c      	mov	r4, r1
 8015d1c:	4616      	mov	r6, r2
 8015d1e:	d505      	bpl.n	8015d2c <__swrite+0x1e>
 8015d20:	2302      	movs	r3, #2
 8015d22:	2200      	movs	r2, #0
 8015d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d28:	f000 f868 	bl	8015dfc <_lseek_r>
 8015d2c:	89a3      	ldrh	r3, [r4, #12]
 8015d2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015d32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015d36:	81a3      	strh	r3, [r4, #12]
 8015d38:	4632      	mov	r2, r6
 8015d3a:	463b      	mov	r3, r7
 8015d3c:	4628      	mov	r0, r5
 8015d3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015d42:	f000 b817 	b.w	8015d74 <_write_r>

08015d46 <__sseek>:
 8015d46:	b510      	push	{r4, lr}
 8015d48:	460c      	mov	r4, r1
 8015d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d4e:	f000 f855 	bl	8015dfc <_lseek_r>
 8015d52:	1c43      	adds	r3, r0, #1
 8015d54:	89a3      	ldrh	r3, [r4, #12]
 8015d56:	bf15      	itete	ne
 8015d58:	6560      	strne	r0, [r4, #84]	; 0x54
 8015d5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015d5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015d62:	81a3      	strheq	r3, [r4, #12]
 8015d64:	bf18      	it	ne
 8015d66:	81a3      	strhne	r3, [r4, #12]
 8015d68:	bd10      	pop	{r4, pc}

08015d6a <__sclose>:
 8015d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d6e:	f000 b813 	b.w	8015d98 <_close_r>
	...

08015d74 <_write_r>:
 8015d74:	b538      	push	{r3, r4, r5, lr}
 8015d76:	4c07      	ldr	r4, [pc, #28]	; (8015d94 <_write_r+0x20>)
 8015d78:	4605      	mov	r5, r0
 8015d7a:	4608      	mov	r0, r1
 8015d7c:	4611      	mov	r1, r2
 8015d7e:	2200      	movs	r2, #0
 8015d80:	6022      	str	r2, [r4, #0]
 8015d82:	461a      	mov	r2, r3
 8015d84:	f7f8 fc76 	bl	800e674 <_write>
 8015d88:	1c43      	adds	r3, r0, #1
 8015d8a:	d102      	bne.n	8015d92 <_write_r+0x1e>
 8015d8c:	6823      	ldr	r3, [r4, #0]
 8015d8e:	b103      	cbz	r3, 8015d92 <_write_r+0x1e>
 8015d90:	602b      	str	r3, [r5, #0]
 8015d92:	bd38      	pop	{r3, r4, r5, pc}
 8015d94:	20004cf4 	.word	0x20004cf4

08015d98 <_close_r>:
 8015d98:	b538      	push	{r3, r4, r5, lr}
 8015d9a:	4c06      	ldr	r4, [pc, #24]	; (8015db4 <_close_r+0x1c>)
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	4605      	mov	r5, r0
 8015da0:	4608      	mov	r0, r1
 8015da2:	6023      	str	r3, [r4, #0]
 8015da4:	f7ef ff7c 	bl	8005ca0 <_close>
 8015da8:	1c43      	adds	r3, r0, #1
 8015daa:	d102      	bne.n	8015db2 <_close_r+0x1a>
 8015dac:	6823      	ldr	r3, [r4, #0]
 8015dae:	b103      	cbz	r3, 8015db2 <_close_r+0x1a>
 8015db0:	602b      	str	r3, [r5, #0]
 8015db2:	bd38      	pop	{r3, r4, r5, pc}
 8015db4:	20004cf4 	.word	0x20004cf4

08015db8 <_fstat_r>:
 8015db8:	b538      	push	{r3, r4, r5, lr}
 8015dba:	4c07      	ldr	r4, [pc, #28]	; (8015dd8 <_fstat_r+0x20>)
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	4605      	mov	r5, r0
 8015dc0:	4608      	mov	r0, r1
 8015dc2:	4611      	mov	r1, r2
 8015dc4:	6023      	str	r3, [r4, #0]
 8015dc6:	f7ef ff77 	bl	8005cb8 <_fstat>
 8015dca:	1c43      	adds	r3, r0, #1
 8015dcc:	d102      	bne.n	8015dd4 <_fstat_r+0x1c>
 8015dce:	6823      	ldr	r3, [r4, #0]
 8015dd0:	b103      	cbz	r3, 8015dd4 <_fstat_r+0x1c>
 8015dd2:	602b      	str	r3, [r5, #0]
 8015dd4:	bd38      	pop	{r3, r4, r5, pc}
 8015dd6:	bf00      	nop
 8015dd8:	20004cf4 	.word	0x20004cf4

08015ddc <_isatty_r>:
 8015ddc:	b538      	push	{r3, r4, r5, lr}
 8015dde:	4c06      	ldr	r4, [pc, #24]	; (8015df8 <_isatty_r+0x1c>)
 8015de0:	2300      	movs	r3, #0
 8015de2:	4605      	mov	r5, r0
 8015de4:	4608      	mov	r0, r1
 8015de6:	6023      	str	r3, [r4, #0]
 8015de8:	f7ef ff76 	bl	8005cd8 <_isatty>
 8015dec:	1c43      	adds	r3, r0, #1
 8015dee:	d102      	bne.n	8015df6 <_isatty_r+0x1a>
 8015df0:	6823      	ldr	r3, [r4, #0]
 8015df2:	b103      	cbz	r3, 8015df6 <_isatty_r+0x1a>
 8015df4:	602b      	str	r3, [r5, #0]
 8015df6:	bd38      	pop	{r3, r4, r5, pc}
 8015df8:	20004cf4 	.word	0x20004cf4

08015dfc <_lseek_r>:
 8015dfc:	b538      	push	{r3, r4, r5, lr}
 8015dfe:	4c07      	ldr	r4, [pc, #28]	; (8015e1c <_lseek_r+0x20>)
 8015e00:	4605      	mov	r5, r0
 8015e02:	4608      	mov	r0, r1
 8015e04:	4611      	mov	r1, r2
 8015e06:	2200      	movs	r2, #0
 8015e08:	6022      	str	r2, [r4, #0]
 8015e0a:	461a      	mov	r2, r3
 8015e0c:	f7ef ff6f 	bl	8005cee <_lseek>
 8015e10:	1c43      	adds	r3, r0, #1
 8015e12:	d102      	bne.n	8015e1a <_lseek_r+0x1e>
 8015e14:	6823      	ldr	r3, [r4, #0]
 8015e16:	b103      	cbz	r3, 8015e1a <_lseek_r+0x1e>
 8015e18:	602b      	str	r3, [r5, #0]
 8015e1a:	bd38      	pop	{r3, r4, r5, pc}
 8015e1c:	20004cf4 	.word	0x20004cf4

08015e20 <__ascii_mbtowc>:
 8015e20:	b082      	sub	sp, #8
 8015e22:	b901      	cbnz	r1, 8015e26 <__ascii_mbtowc+0x6>
 8015e24:	a901      	add	r1, sp, #4
 8015e26:	b142      	cbz	r2, 8015e3a <__ascii_mbtowc+0x1a>
 8015e28:	b14b      	cbz	r3, 8015e3e <__ascii_mbtowc+0x1e>
 8015e2a:	7813      	ldrb	r3, [r2, #0]
 8015e2c:	600b      	str	r3, [r1, #0]
 8015e2e:	7812      	ldrb	r2, [r2, #0]
 8015e30:	1c10      	adds	r0, r2, #0
 8015e32:	bf18      	it	ne
 8015e34:	2001      	movne	r0, #1
 8015e36:	b002      	add	sp, #8
 8015e38:	4770      	bx	lr
 8015e3a:	4610      	mov	r0, r2
 8015e3c:	e7fb      	b.n	8015e36 <__ascii_mbtowc+0x16>
 8015e3e:	f06f 0001 	mvn.w	r0, #1
 8015e42:	e7f8      	b.n	8015e36 <__ascii_mbtowc+0x16>

08015e44 <memmove>:
 8015e44:	4288      	cmp	r0, r1
 8015e46:	b510      	push	{r4, lr}
 8015e48:	eb01 0302 	add.w	r3, r1, r2
 8015e4c:	d807      	bhi.n	8015e5e <memmove+0x1a>
 8015e4e:	1e42      	subs	r2, r0, #1
 8015e50:	4299      	cmp	r1, r3
 8015e52:	d00a      	beq.n	8015e6a <memmove+0x26>
 8015e54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e58:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015e5c:	e7f8      	b.n	8015e50 <memmove+0xc>
 8015e5e:	4283      	cmp	r3, r0
 8015e60:	d9f5      	bls.n	8015e4e <memmove+0xa>
 8015e62:	1881      	adds	r1, r0, r2
 8015e64:	1ad2      	subs	r2, r2, r3
 8015e66:	42d3      	cmn	r3, r2
 8015e68:	d100      	bne.n	8015e6c <memmove+0x28>
 8015e6a:	bd10      	pop	{r4, pc}
 8015e6c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015e70:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015e74:	e7f7      	b.n	8015e66 <memmove+0x22>

08015e76 <_realloc_r>:
 8015e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e78:	4607      	mov	r7, r0
 8015e7a:	4614      	mov	r4, r2
 8015e7c:	460e      	mov	r6, r1
 8015e7e:	b921      	cbnz	r1, 8015e8a <_realloc_r+0x14>
 8015e80:	4611      	mov	r1, r2
 8015e82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015e86:	f7fd bb4b 	b.w	8013520 <_malloc_r>
 8015e8a:	b922      	cbnz	r2, 8015e96 <_realloc_r+0x20>
 8015e8c:	f7fd fafa 	bl	8013484 <_free_r>
 8015e90:	4625      	mov	r5, r4
 8015e92:	4628      	mov	r0, r5
 8015e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e96:	f000 f834 	bl	8015f02 <_malloc_usable_size_r>
 8015e9a:	42a0      	cmp	r0, r4
 8015e9c:	d20f      	bcs.n	8015ebe <_realloc_r+0x48>
 8015e9e:	4621      	mov	r1, r4
 8015ea0:	4638      	mov	r0, r7
 8015ea2:	f7fd fb3d 	bl	8013520 <_malloc_r>
 8015ea6:	4605      	mov	r5, r0
 8015ea8:	2800      	cmp	r0, #0
 8015eaa:	d0f2      	beq.n	8015e92 <_realloc_r+0x1c>
 8015eac:	4631      	mov	r1, r6
 8015eae:	4622      	mov	r2, r4
 8015eb0:	f7fd fad4 	bl	801345c <memcpy>
 8015eb4:	4631      	mov	r1, r6
 8015eb6:	4638      	mov	r0, r7
 8015eb8:	f7fd fae4 	bl	8013484 <_free_r>
 8015ebc:	e7e9      	b.n	8015e92 <_realloc_r+0x1c>
 8015ebe:	4635      	mov	r5, r6
 8015ec0:	e7e7      	b.n	8015e92 <_realloc_r+0x1c>
	...

08015ec4 <_read_r>:
 8015ec4:	b538      	push	{r3, r4, r5, lr}
 8015ec6:	4c07      	ldr	r4, [pc, #28]	; (8015ee4 <_read_r+0x20>)
 8015ec8:	4605      	mov	r5, r0
 8015eca:	4608      	mov	r0, r1
 8015ecc:	4611      	mov	r1, r2
 8015ece:	2200      	movs	r2, #0
 8015ed0:	6022      	str	r2, [r4, #0]
 8015ed2:	461a      	mov	r2, r3
 8015ed4:	f7ef fec7 	bl	8005c66 <_read>
 8015ed8:	1c43      	adds	r3, r0, #1
 8015eda:	d102      	bne.n	8015ee2 <_read_r+0x1e>
 8015edc:	6823      	ldr	r3, [r4, #0]
 8015ede:	b103      	cbz	r3, 8015ee2 <_read_r+0x1e>
 8015ee0:	602b      	str	r3, [r5, #0]
 8015ee2:	bd38      	pop	{r3, r4, r5, pc}
 8015ee4:	20004cf4 	.word	0x20004cf4

08015ee8 <__ascii_wctomb>:
 8015ee8:	b149      	cbz	r1, 8015efe <__ascii_wctomb+0x16>
 8015eea:	2aff      	cmp	r2, #255	; 0xff
 8015eec:	bf85      	ittet	hi
 8015eee:	238a      	movhi	r3, #138	; 0x8a
 8015ef0:	6003      	strhi	r3, [r0, #0]
 8015ef2:	700a      	strbls	r2, [r1, #0]
 8015ef4:	f04f 30ff 	movhi.w	r0, #4294967295
 8015ef8:	bf98      	it	ls
 8015efa:	2001      	movls	r0, #1
 8015efc:	4770      	bx	lr
 8015efe:	4608      	mov	r0, r1
 8015f00:	4770      	bx	lr

08015f02 <_malloc_usable_size_r>:
 8015f02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015f06:	1f18      	subs	r0, r3, #4
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	bfbc      	itt	lt
 8015f0c:	580b      	ldrlt	r3, [r1, r0]
 8015f0e:	18c0      	addlt	r0, r0, r3
 8015f10:	4770      	bx	lr
	...

08015f14 <round>:
 8015f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f16:	ec57 6b10 	vmov	r6, r7, d0
 8015f1a:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8015f1e:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8015f22:	2c13      	cmp	r4, #19
 8015f24:	463b      	mov	r3, r7
 8015f26:	463d      	mov	r5, r7
 8015f28:	dc17      	bgt.n	8015f5a <round+0x46>
 8015f2a:	2c00      	cmp	r4, #0
 8015f2c:	da09      	bge.n	8015f42 <round+0x2e>
 8015f2e:	3401      	adds	r4, #1
 8015f30:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8015f34:	d103      	bne.n	8015f3e <round+0x2a>
 8015f36:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8015f3a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015f3e:	2100      	movs	r1, #0
 8015f40:	e02c      	b.n	8015f9c <round+0x88>
 8015f42:	4a18      	ldr	r2, [pc, #96]	; (8015fa4 <round+0x90>)
 8015f44:	4122      	asrs	r2, r4
 8015f46:	4217      	tst	r7, r2
 8015f48:	d100      	bne.n	8015f4c <round+0x38>
 8015f4a:	b19e      	cbz	r6, 8015f74 <round+0x60>
 8015f4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8015f50:	4123      	asrs	r3, r4
 8015f52:	442b      	add	r3, r5
 8015f54:	ea23 0302 	bic.w	r3, r3, r2
 8015f58:	e7f1      	b.n	8015f3e <round+0x2a>
 8015f5a:	2c33      	cmp	r4, #51	; 0x33
 8015f5c:	dd0d      	ble.n	8015f7a <round+0x66>
 8015f5e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8015f62:	d107      	bne.n	8015f74 <round+0x60>
 8015f64:	4630      	mov	r0, r6
 8015f66:	4639      	mov	r1, r7
 8015f68:	ee10 2a10 	vmov	r2, s0
 8015f6c:	f7ea f966 	bl	800023c <__adddf3>
 8015f70:	4606      	mov	r6, r0
 8015f72:	460f      	mov	r7, r1
 8015f74:	ec47 6b10 	vmov	d0, r6, r7
 8015f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f7a:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8015f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8015f82:	40d0      	lsrs	r0, r2
 8015f84:	4206      	tst	r6, r0
 8015f86:	d0f5      	beq.n	8015f74 <round+0x60>
 8015f88:	2201      	movs	r2, #1
 8015f8a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8015f8e:	fa02 f404 	lsl.w	r4, r2, r4
 8015f92:	1931      	adds	r1, r6, r4
 8015f94:	bf28      	it	cs
 8015f96:	189b      	addcs	r3, r3, r2
 8015f98:	ea21 0100 	bic.w	r1, r1, r0
 8015f9c:	461f      	mov	r7, r3
 8015f9e:	460e      	mov	r6, r1
 8015fa0:	e7e8      	b.n	8015f74 <round+0x60>
 8015fa2:	bf00      	nop
 8015fa4:	000fffff 	.word	0x000fffff

08015fa8 <_init>:
 8015fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015faa:	bf00      	nop
 8015fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015fae:	bc08      	pop	{r3}
 8015fb0:	469e      	mov	lr, r3
 8015fb2:	4770      	bx	lr

08015fb4 <_fini>:
 8015fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fb6:	bf00      	nop
 8015fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015fba:	bc08      	pop	{r3}
 8015fbc:	469e      	mov	lr, r3
 8015fbe:	4770      	bx	lr
